//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.10.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from /Users/maxfarsikov/IdeaProjects/antlr-parser/antlr-parser/grammars/CPP14Parser.g4 by ANTLR 4.10.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.10.1")]
[System.CLSCompliant(false)]
public partial class CPP14Parser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		IntegerLiteral=1, CharacterLiteral=2, FloatingLiteral=3, StringLiteral=4, 
		BooleanLiteral=5, PointerLiteral=6, UserDefinedLiteral=7, MultiLineMacro=8, 
		Directive=9, Alignas=10, Alignof=11, Asm=12, Auto=13, Bool=14, Break=15, 
		Case=16, Catch=17, Char=18, Char16=19, Char32=20, Class=21, Const=22, 
		Constexpr=23, Const_cast=24, Continue=25, Decltype=26, Default=27, Delete=28, 
		Do=29, Double=30, Dynamic_cast=31, Else=32, Enum=33, Explicit=34, Export=35, 
		Extern=36, False_=37, Final=38, Float=39, For=40, Friend=41, Goto=42, 
		If=43, Inline=44, Int=45, Long=46, Mutable=47, Namespace=48, New=49, Noexcept=50, 
		Nullptr=51, Operator=52, Override=53, Private=54, Protected=55, Public=56, 
		Register=57, Reinterpret_cast=58, Return=59, Short=60, Signed=61, Sizeof=62, 
		Static=63, Static_assert=64, Static_cast=65, Struct=66, Switch=67, Template=68, 
		This=69, Thread_local=70, Throw=71, True_=72, Try=73, Typedef=74, Typeid_=75, 
		Typename_=76, Union=77, Unsigned=78, Using=79, Virtual=80, Void=81, Volatile=82, 
		Wchar=83, While=84, LeftParen=85, RightParen=86, LeftBracket=87, RightBracket=88, 
		LeftBrace=89, RightBrace=90, Plus=91, Minus=92, Star=93, Div=94, Mod=95, 
		Caret=96, And=97, Or=98, Tilde=99, Not=100, Assign=101, Less=102, Greater=103, 
		PlusAssign=104, MinusAssign=105, StarAssign=106, DivAssign=107, ModAssign=108, 
		XorAssign=109, AndAssign=110, OrAssign=111, LeftShiftAssign=112, RightShiftAssign=113, 
		Equal=114, NotEqual=115, LessEqual=116, GreaterEqual=117, AndAnd=118, 
		OrOr=119, PlusPlus=120, MinusMinus=121, Comma=122, ArrowStar=123, Arrow=124, 
		Question=125, Colon=126, Doublecolon=127, Semi=128, Dot=129, DotStar=130, 
		Ellipsis=131, Identifier=132, DecimalLiteral=133, OctalLiteral=134, HexadecimalLiteral=135, 
		BinaryLiteral=136, Integersuffix=137, UserDefinedIntegerLiteral=138, UserDefinedFloatingLiteral=139, 
		UserDefinedStringLiteral=140, UserDefinedCharacterLiteral=141, Whitespace=142, 
		Newline=143, BlockComment=144, LineComment=145;
	public const int
		RULE_translationUnit = 0, RULE_primaryExpression = 1, RULE_idExpression = 2, 
		RULE_unqualifiedId = 3, RULE_qualifiedId = 4, RULE_nestedNameSpecifier = 5, 
		RULE_lambdaExpression = 6, RULE_lambdaIntroducer = 7, RULE_lambdaCapture = 8, 
		RULE_captureDefault = 9, RULE_captureList = 10, RULE_capture = 11, RULE_simpleCapture = 12, 
		RULE_initcapture = 13, RULE_lambdaDeclarator = 14, RULE_postfixExpression = 15, 
		RULE_typeIdOfTheTypeId = 16, RULE_expressionList = 17, RULE_pseudoDestructorName = 18, 
		RULE_unaryExpression = 19, RULE_unaryOperator = 20, RULE_newExpression = 21, 
		RULE_newPlacement = 22, RULE_newTypeId = 23, RULE_newDeclarator = 24, 
		RULE_noPointerNewDeclarator = 25, RULE_newInitializer = 26, RULE_deleteExpression = 27, 
		RULE_noExceptExpression = 28, RULE_castExpression = 29, RULE_pointerMemberExpression = 30, 
		RULE_multiplicativeExpression = 31, RULE_additiveExpression = 32, RULE_shiftExpression = 33, 
		RULE_shiftOperator = 34, RULE_relationalExpression = 35, RULE_equalityExpression = 36, 
		RULE_andExpression = 37, RULE_exclusiveOrExpression = 38, RULE_inclusiveOrExpression = 39, 
		RULE_logicalAndExpression = 40, RULE_logicalOrExpression = 41, RULE_conditionalExpression = 42, 
		RULE_assignmentExpression = 43, RULE_assignmentOperator = 44, RULE_expression = 45, 
		RULE_constantExpression = 46, RULE_statement = 47, RULE_labeledStatement = 48, 
		RULE_expressionStatement = 49, RULE_compoundStatement = 50, RULE_statementSeq = 51, 
		RULE_selectionStatement = 52, RULE_condition = 53, RULE_iterationStatement = 54, 
		RULE_forInitStatement = 55, RULE_forRangeDeclaration = 56, RULE_forRangeInitializer = 57, 
		RULE_jumpStatement = 58, RULE_declarationStatement = 59, RULE_declarationseq = 60, 
		RULE_declaration = 61, RULE_blockDeclaration = 62, RULE_aliasDeclaration = 63, 
		RULE_simpleDeclaration = 64, RULE_staticAssertDeclaration = 65, RULE_emptyDeclaration = 66, 
		RULE_attributeDeclaration = 67, RULE_declSpecifier = 68, RULE_declSpecifierSeq = 69, 
		RULE_storageClassSpecifier = 70, RULE_functionSpecifier = 71, RULE_typedefName = 72, 
		RULE_typeSpecifier = 73, RULE_trailingTypeSpecifier = 74, RULE_typeSpecifierSeq = 75, 
		RULE_trailingTypeSpecifierSeq = 76, RULE_simpleTypeLengthModifier = 77, 
		RULE_simpleTypeSignednessModifier = 78, RULE_simpleTypeSpecifier = 79, 
		RULE_theTypeName = 80, RULE_decltypeSpecifier = 81, RULE_elaboratedTypeSpecifier = 82, 
		RULE_enumName = 83, RULE_enumSpecifier = 84, RULE_enumHead = 85, RULE_opaqueEnumDeclaration = 86, 
		RULE_enumkey = 87, RULE_enumbase = 88, RULE_enumeratorList = 89, RULE_enumeratorDefinition = 90, 
		RULE_enumerator = 91, RULE_namespaceName = 92, RULE_originalNamespaceName = 93, 
		RULE_namespaceDefinition = 94, RULE_namespaceAlias = 95, RULE_namespaceAliasDefinition = 96, 
		RULE_qualifiednamespacespecifier = 97, RULE_usingDeclaration = 98, RULE_usingDirective = 99, 
		RULE_asmDefinition = 100, RULE_linkageSpecification = 101, RULE_attributeSpecifierSeq = 102, 
		RULE_attributeSpecifier = 103, RULE_alignmentspecifier = 104, RULE_attributeList = 105, 
		RULE_attribute = 106, RULE_attributeNamespace = 107, RULE_attributeArgumentClause = 108, 
		RULE_balancedTokenSeq = 109, RULE_balancedtoken = 110, RULE_initDeclaratorList = 111, 
		RULE_initDeclarator = 112, RULE_declarator = 113, RULE_pointerDeclarator = 114, 
		RULE_noPointerDeclarator = 115, RULE_parametersAndQualifiers = 116, RULE_trailingReturnType = 117, 
		RULE_pointerOperator = 118, RULE_cvqualifierseq = 119, RULE_cvQualifier = 120, 
		RULE_refqualifier = 121, RULE_declaratorid = 122, RULE_theTypeId = 123, 
		RULE_abstractDeclarator = 124, RULE_pointerAbstractDeclarator = 125, RULE_noPointerAbstractDeclarator = 126, 
		RULE_abstractPackDeclarator = 127, RULE_noPointerAbstractPackDeclarator = 128, 
		RULE_parameterDeclarationClause = 129, RULE_parameterDeclarationList = 130, 
		RULE_parameterDeclaration = 131, RULE_functionDefinition = 132, RULE_functionBody = 133, 
		RULE_initializer = 134, RULE_braceOrEqualInitializer = 135, RULE_initializerClause = 136, 
		RULE_initializerList = 137, RULE_bracedInitList = 138, RULE_className = 139, 
		RULE_classSpecifier = 140, RULE_classHead = 141, RULE_classHeadName = 142, 
		RULE_classVirtSpecifier = 143, RULE_classKey = 144, RULE_memberSpecification = 145, 
		RULE_memberdeclaration = 146, RULE_memberDeclaratorList = 147, RULE_memberDeclarator = 148, 
		RULE_virtualSpecifierSeq = 149, RULE_virtualSpecifier = 150, RULE_pureSpecifier = 151, 
		RULE_baseClause = 152, RULE_baseSpecifierList = 153, RULE_baseSpecifier = 154, 
		RULE_classOrDeclType = 155, RULE_baseTypeSpecifier = 156, RULE_accessSpecifier = 157, 
		RULE_conversionFunctionId = 158, RULE_conversionTypeId = 159, RULE_conversionDeclarator = 160, 
		RULE_constructorInitializer = 161, RULE_memInitializerList = 162, RULE_memInitializer = 163, 
		RULE_meminitializerid = 164, RULE_operatorFunctionId = 165, RULE_literalOperatorId = 166, 
		RULE_templateDeclaration = 167, RULE_templateparameterList = 168, RULE_templateParameter = 169, 
		RULE_typeParameter = 170, RULE_simpleTemplateId = 171, RULE_templateId = 172, 
		RULE_templateName = 173, RULE_templateArgumentList = 174, RULE_templateArgument = 175, 
		RULE_typeNameSpecifier = 176, RULE_explicitInstantiation = 177, RULE_explicitSpecialization = 178, 
		RULE_tryBlock = 179, RULE_functionTryBlock = 180, RULE_handlerSeq = 181, 
		RULE_handler = 182, RULE_exceptionDeclaration = 183, RULE_throwExpression = 184, 
		RULE_exceptionSpecification = 185, RULE_dynamicExceptionSpecification = 186, 
		RULE_typeIdList = 187, RULE_noeExceptSpecification = 188, RULE_theOperator = 189, 
		RULE_literal = 190;
	public static readonly string[] ruleNames = {
		"translationUnit", "primaryExpression", "idExpression", "unqualifiedId", 
		"qualifiedId", "nestedNameSpecifier", "lambdaExpression", "lambdaIntroducer", 
		"lambdaCapture", "captureDefault", "captureList", "capture", "simpleCapture", 
		"initcapture", "lambdaDeclarator", "postfixExpression", "typeIdOfTheTypeId", 
		"expressionList", "pseudoDestructorName", "unaryExpression", "unaryOperator", 
		"newExpression", "newPlacement", "newTypeId", "newDeclarator", "noPointerNewDeclarator", 
		"newInitializer", "deleteExpression", "noExceptExpression", "castExpression", 
		"pointerMemberExpression", "multiplicativeExpression", "additiveExpression", 
		"shiftExpression", "shiftOperator", "relationalExpression", "equalityExpression", 
		"andExpression", "exclusiveOrExpression", "inclusiveOrExpression", "logicalAndExpression", 
		"logicalOrExpression", "conditionalExpression", "assignmentExpression", 
		"assignmentOperator", "expression", "constantExpression", "statement", 
		"labeledStatement", "expressionStatement", "compoundStatement", "statementSeq", 
		"selectionStatement", "condition", "iterationStatement", "forInitStatement", 
		"forRangeDeclaration", "forRangeInitializer", "jumpStatement", "declarationStatement", 
		"declarationseq", "declaration", "blockDeclaration", "aliasDeclaration", 
		"simpleDeclaration", "staticAssertDeclaration", "emptyDeclaration", "attributeDeclaration", 
		"declSpecifier", "declSpecifierSeq", "storageClassSpecifier", "functionSpecifier", 
		"typedefName", "typeSpecifier", "trailingTypeSpecifier", "typeSpecifierSeq", 
		"trailingTypeSpecifierSeq", "simpleTypeLengthModifier", "simpleTypeSignednessModifier", 
		"simpleTypeSpecifier", "theTypeName", "decltypeSpecifier", "elaboratedTypeSpecifier", 
		"enumName", "enumSpecifier", "enumHead", "opaqueEnumDeclaration", "enumkey", 
		"enumbase", "enumeratorList", "enumeratorDefinition", "enumerator", "namespaceName", 
		"originalNamespaceName", "namespaceDefinition", "namespaceAlias", "namespaceAliasDefinition", 
		"qualifiednamespacespecifier", "usingDeclaration", "usingDirective", "asmDefinition", 
		"linkageSpecification", "attributeSpecifierSeq", "attributeSpecifier", 
		"alignmentspecifier", "attributeList", "attribute", "attributeNamespace", 
		"attributeArgumentClause", "balancedTokenSeq", "balancedtoken", "initDeclaratorList", 
		"initDeclarator", "declarator", "pointerDeclarator", "noPointerDeclarator", 
		"parametersAndQualifiers", "trailingReturnType", "pointerOperator", "cvqualifierseq", 
		"cvQualifier", "refqualifier", "declaratorid", "theTypeId", "abstractDeclarator", 
		"pointerAbstractDeclarator", "noPointerAbstractDeclarator", "abstractPackDeclarator", 
		"noPointerAbstractPackDeclarator", "parameterDeclarationClause", "parameterDeclarationList", 
		"parameterDeclaration", "functionDefinition", "functionBody", "initializer", 
		"braceOrEqualInitializer", "initializerClause", "initializerList", "bracedInitList", 
		"className", "classSpecifier", "classHead", "classHeadName", "classVirtSpecifier", 
		"classKey", "memberSpecification", "memberdeclaration", "memberDeclaratorList", 
		"memberDeclarator", "virtualSpecifierSeq", "virtualSpecifier", "pureSpecifier", 
		"baseClause", "baseSpecifierList", "baseSpecifier", "classOrDeclType", 
		"baseTypeSpecifier", "accessSpecifier", "conversionFunctionId", "conversionTypeId", 
		"conversionDeclarator", "constructorInitializer", "memInitializerList", 
		"memInitializer", "meminitializerid", "operatorFunctionId", "literalOperatorId", 
		"templateDeclaration", "templateparameterList", "templateParameter", "typeParameter", 
		"simpleTemplateId", "templateId", "templateName", "templateArgumentList", 
		"templateArgument", "typeNameSpecifier", "explicitInstantiation", "explicitSpecialization", 
		"tryBlock", "functionTryBlock", "handlerSeq", "handler", "exceptionDeclaration", 
		"throwExpression", "exceptionSpecification", "dynamicExceptionSpecification", 
		"typeIdList", "noeExceptSpecification", "theOperator", "literal"
	};

	private static readonly string[] _LiteralNames = {
		null, null, null, null, null, null, null, null, null, null, "'alignas'", 
		"'alignof'", "'asm'", "'auto'", "'bool'", "'break'", "'case'", "'catch'", 
		"'char'", "'char16_t'", "'char32_t'", "'class'", "'const'", "'constexpr'", 
		"'const_cast'", "'continue'", "'decltype'", "'default'", "'delete'", "'do'", 
		"'double'", "'dynamic_cast'", "'else'", "'enum'", "'explicit'", "'export'", 
		"'extern'", "'false'", "'final'", "'float'", "'for'", "'friend'", "'goto'", 
		"'if'", "'inline'", "'int'", "'long'", "'mutable'", "'namespace'", "'new'", 
		"'noexcept'", "'nullptr'", "'operator'", "'override'", "'private'", "'protected'", 
		"'public'", "'register'", "'reinterpret_cast'", "'return'", "'short'", 
		"'signed'", "'sizeof'", "'static'", "'static_assert'", "'static_cast'", 
		"'struct'", "'switch'", "'template'", "'this'", "'thread_local'", "'throw'", 
		"'true'", "'try'", "'typedef'", "'typeid'", "'typename'", "'union'", "'unsigned'", 
		"'using'", "'virtual'", "'void'", "'volatile'", "'wchar_t'", "'while'", 
		"'('", "')'", "'['", "']'", "'{'", "'}'", "'+'", "'-'", "'*'", "'/'", 
		"'%'", "'^'", "'&'", "'|'", "'~'", null, "'='", "'<'", "'>'", "'+='", 
		"'-='", "'*='", "'/='", "'%='", "'^='", "'&='", "'|='", "'<<='", "'>>='", 
		"'=='", "'!='", "'<='", "'>='", null, null, "'++'", "'--'", "','", "'->*'", 
		"'->'", "'?'", "':'", "'::'", "';'", "'.'", "'.*'", "'...'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "IntegerLiteral", "CharacterLiteral", "FloatingLiteral", "StringLiteral", 
		"BooleanLiteral", "PointerLiteral", "UserDefinedLiteral", "MultiLineMacro", 
		"Directive", "Alignas", "Alignof", "Asm", "Auto", "Bool", "Break", "Case", 
		"Catch", "Char", "Char16", "Char32", "Class", "Const", "Constexpr", "Const_cast", 
		"Continue", "Decltype", "Default", "Delete", "Do", "Double", "Dynamic_cast", 
		"Else", "Enum", "Explicit", "Export", "Extern", "False_", "Final", "Float", 
		"For", "Friend", "Goto", "If", "Inline", "Int", "Long", "Mutable", "Namespace", 
		"New", "Noexcept", "Nullptr", "Operator", "Override", "Private", "Protected", 
		"Public", "Register", "Reinterpret_cast", "Return", "Short", "Signed", 
		"Sizeof", "Static", "Static_assert", "Static_cast", "Struct", "Switch", 
		"Template", "This", "Thread_local", "Throw", "True_", "Try", "Typedef", 
		"Typeid_", "Typename_", "Union", "Unsigned", "Using", "Virtual", "Void", 
		"Volatile", "Wchar", "While", "LeftParen", "RightParen", "LeftBracket", 
		"RightBracket", "LeftBrace", "RightBrace", "Plus", "Minus", "Star", "Div", 
		"Mod", "Caret", "And", "Or", "Tilde", "Not", "Assign", "Less", "Greater", 
		"PlusAssign", "MinusAssign", "StarAssign", "DivAssign", "ModAssign", "XorAssign", 
		"AndAssign", "OrAssign", "LeftShiftAssign", "RightShiftAssign", "Equal", 
		"NotEqual", "LessEqual", "GreaterEqual", "AndAnd", "OrOr", "PlusPlus", 
		"MinusMinus", "Comma", "ArrowStar", "Arrow", "Question", "Colon", "Doublecolon", 
		"Semi", "Dot", "DotStar", "Ellipsis", "Identifier", "DecimalLiteral", 
		"OctalLiteral", "HexadecimalLiteral", "BinaryLiteral", "Integersuffix", 
		"UserDefinedIntegerLiteral", "UserDefinedFloatingLiteral", "UserDefinedStringLiteral", 
		"UserDefinedCharacterLiteral", "Whitespace", "Newline", "BlockComment", 
		"LineComment"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "CPP14Parser.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static CPP14Parser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public CPP14Parser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public CPP14Parser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class TranslationUnitContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(CPP14Parser.Eof, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public DeclarationseqContext declarationseq() {
			return GetRuleContext<DeclarationseqContext>(0);
		}
		public TranslationUnitContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_translationUnit; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14ParserListener typedListener = listener as ICPP14ParserListener;
			if (typedListener != null) typedListener.EnterTranslationUnit(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14ParserListener typedListener = listener as ICPP14ParserListener;
			if (typedListener != null) typedListener.ExitTranslationUnit(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICPP14ParserVisitor<TResult> typedVisitor = visitor as ICPP14ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTranslationUnit(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TranslationUnitContext translationUnit() {
		TranslationUnitContext _localctx = new TranslationUnitContext(Context, State);
		EnterRule(_localctx, 0, RULE_translationUnit);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 383;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (((((_la - 10)) & ~0x3f) == 0 && ((1L << (_la - 10)) & ((1L << (Alignas - 10)) | (1L << (Asm - 10)) | (1L << (Auto - 10)) | (1L << (Bool - 10)) | (1L << (Char - 10)) | (1L << (Char16 - 10)) | (1L << (Char32 - 10)) | (1L << (Class - 10)) | (1L << (Const - 10)) | (1L << (Constexpr - 10)) | (1L << (Decltype - 10)) | (1L << (Double - 10)) | (1L << (Enum - 10)) | (1L << (Explicit - 10)) | (1L << (Extern - 10)) | (1L << (Float - 10)) | (1L << (Friend - 10)) | (1L << (Inline - 10)) | (1L << (Int - 10)) | (1L << (Long - 10)) | (1L << (Mutable - 10)) | (1L << (Namespace - 10)) | (1L << (Operator - 10)) | (1L << (Register - 10)) | (1L << (Short - 10)) | (1L << (Signed - 10)) | (1L << (Static - 10)) | (1L << (Static_assert - 10)) | (1L << (Struct - 10)) | (1L << (Template - 10)) | (1L << (Thread_local - 10)))) != 0) || ((((_la - 74)) & ~0x3f) == 0 && ((1L << (_la - 74)) & ((1L << (Typedef - 74)) | (1L << (Typename_ - 74)) | (1L << (Union - 74)) | (1L << (Unsigned - 74)) | (1L << (Using - 74)) | (1L << (Virtual - 74)) | (1L << (Void - 74)) | (1L << (Volatile - 74)) | (1L << (Wchar - 74)) | (1L << (LeftParen - 74)) | (1L << (LeftBracket - 74)) | (1L << (Star - 74)) | (1L << (And - 74)) | (1L << (Tilde - 74)) | (1L << (AndAnd - 74)) | (1L << (Doublecolon - 74)) | (1L << (Semi - 74)) | (1L << (Ellipsis - 74)) | (1L << (Identifier - 74)))) != 0)) {
				{
				State = 382;
				declarationseq();
				}
			}

			State = 385;
			Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PrimaryExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public LiteralContext[] literal() {
			return GetRuleContexts<LiteralContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public LiteralContext literal(int i) {
			return GetRuleContext<LiteralContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode This() { return GetToken(CPP14Parser.This, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LeftParen() { return GetToken(CPP14Parser.LeftParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RightParen() { return GetToken(CPP14Parser.RightParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdExpressionContext idExpression() {
			return GetRuleContext<IdExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LambdaExpressionContext lambdaExpression() {
			return GetRuleContext<LambdaExpressionContext>(0);
		}
		public PrimaryExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_primaryExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14ParserListener typedListener = listener as ICPP14ParserListener;
			if (typedListener != null) typedListener.EnterPrimaryExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14ParserListener typedListener = listener as ICPP14ParserListener;
			if (typedListener != null) typedListener.ExitPrimaryExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICPP14ParserVisitor<TResult> typedVisitor = visitor as ICPP14ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrimaryExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PrimaryExpressionContext primaryExpression() {
		PrimaryExpressionContext _localctx = new PrimaryExpressionContext(Context, State);
		EnterRule(_localctx, 2, RULE_primaryExpression);
		try {
			int _alt;
			State = 399;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case IntegerLiteral:
			case CharacterLiteral:
			case FloatingLiteral:
			case StringLiteral:
			case BooleanLiteral:
			case PointerLiteral:
			case UserDefinedLiteral:
				EnterOuterAlt(_localctx, 1);
				{
				State = 388;
				ErrorHandler.Sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						State = 387;
						literal();
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 390;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,1,Context);
				} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
				}
				break;
			case This:
				EnterOuterAlt(_localctx, 2);
				{
				State = 392;
				Match(This);
				}
				break;
			case LeftParen:
				EnterOuterAlt(_localctx, 3);
				{
				State = 393;
				Match(LeftParen);
				State = 394;
				expression();
				State = 395;
				Match(RightParen);
				}
				break;
			case Decltype:
			case Operator:
			case Tilde:
			case Doublecolon:
			case Identifier:
				EnterOuterAlt(_localctx, 4);
				{
				State = 397;
				idExpression();
				}
				break;
			case LeftBracket:
				EnterOuterAlt(_localctx, 5);
				{
				State = 398;
				lambdaExpression();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IdExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public UnqualifiedIdContext unqualifiedId() {
			return GetRuleContext<UnqualifiedIdContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public QualifiedIdContext qualifiedId() {
			return GetRuleContext<QualifiedIdContext>(0);
		}
		public IdExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_idExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14ParserListener typedListener = listener as ICPP14ParserListener;
			if (typedListener != null) typedListener.EnterIdExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14ParserListener typedListener = listener as ICPP14ParserListener;
			if (typedListener != null) typedListener.ExitIdExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICPP14ParserVisitor<TResult> typedVisitor = visitor as ICPP14ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIdExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IdExpressionContext idExpression() {
		IdExpressionContext _localctx = new IdExpressionContext(Context, State);
		EnterRule(_localctx, 4, RULE_idExpression);
		try {
			State = 403;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,3,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 401;
				unqualifiedId();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 402;
				qualifiedId();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UnqualifiedIdContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(CPP14Parser.Identifier, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public OperatorFunctionIdContext operatorFunctionId() {
			return GetRuleContext<OperatorFunctionIdContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ConversionFunctionIdContext conversionFunctionId() {
			return GetRuleContext<ConversionFunctionIdContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LiteralOperatorIdContext literalOperatorId() {
			return GetRuleContext<LiteralOperatorIdContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Tilde() { return GetToken(CPP14Parser.Tilde, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ClassNameContext className() {
			return GetRuleContext<ClassNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DecltypeSpecifierContext decltypeSpecifier() {
			return GetRuleContext<DecltypeSpecifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TemplateIdContext templateId() {
			return GetRuleContext<TemplateIdContext>(0);
		}
		public UnqualifiedIdContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unqualifiedId; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14ParserListener typedListener = listener as ICPP14ParserListener;
			if (typedListener != null) typedListener.EnterUnqualifiedId(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14ParserListener typedListener = listener as ICPP14ParserListener;
			if (typedListener != null) typedListener.ExitUnqualifiedId(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICPP14ParserVisitor<TResult> typedVisitor = visitor as ICPP14ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnqualifiedId(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UnqualifiedIdContext unqualifiedId() {
		UnqualifiedIdContext _localctx = new UnqualifiedIdContext(Context, State);
		EnterRule(_localctx, 6, RULE_unqualifiedId);
		try {
			State = 415;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,5,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 405;
				Match(Identifier);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 406;
				operatorFunctionId();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 407;
				conversionFunctionId();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 408;
				literalOperatorId();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 409;
				Match(Tilde);
				State = 412;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case Identifier:
					{
					State = 410;
					className();
					}
					break;
				case Decltype:
					{
					State = 411;
					decltypeSpecifier();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 414;
				templateId();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class QualifiedIdContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public NestedNameSpecifierContext nestedNameSpecifier() {
			return GetRuleContext<NestedNameSpecifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public UnqualifiedIdContext unqualifiedId() {
			return GetRuleContext<UnqualifiedIdContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Template() { return GetToken(CPP14Parser.Template, 0); }
		public QualifiedIdContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_qualifiedId; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14ParserListener typedListener = listener as ICPP14ParserListener;
			if (typedListener != null) typedListener.EnterQualifiedId(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14ParserListener typedListener = listener as ICPP14ParserListener;
			if (typedListener != null) typedListener.ExitQualifiedId(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICPP14ParserVisitor<TResult> typedVisitor = visitor as ICPP14ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitQualifiedId(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public QualifiedIdContext qualifiedId() {
		QualifiedIdContext _localctx = new QualifiedIdContext(Context, State);
		EnterRule(_localctx, 8, RULE_qualifiedId);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 417;
			nestedNameSpecifier(0);
			State = 419;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Template) {
				{
				State = 418;
				Match(Template);
				}
			}

			State = 421;
			unqualifiedId();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NestedNameSpecifierContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Doublecolon() { return GetToken(CPP14Parser.Doublecolon, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TheTypeNameContext theTypeName() {
			return GetRuleContext<TheTypeNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NamespaceNameContext namespaceName() {
			return GetRuleContext<NamespaceNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DecltypeSpecifierContext decltypeSpecifier() {
			return GetRuleContext<DecltypeSpecifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NestedNameSpecifierContext nestedNameSpecifier() {
			return GetRuleContext<NestedNameSpecifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(CPP14Parser.Identifier, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SimpleTemplateIdContext simpleTemplateId() {
			return GetRuleContext<SimpleTemplateIdContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Template() { return GetToken(CPP14Parser.Template, 0); }
		public NestedNameSpecifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_nestedNameSpecifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14ParserListener typedListener = listener as ICPP14ParserListener;
			if (typedListener != null) typedListener.EnterNestedNameSpecifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14ParserListener typedListener = listener as ICPP14ParserListener;
			if (typedListener != null) typedListener.ExitNestedNameSpecifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICPP14ParserVisitor<TResult> typedVisitor = visitor as ICPP14ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNestedNameSpecifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NestedNameSpecifierContext nestedNameSpecifier() {
		return nestedNameSpecifier(0);
	}

	private NestedNameSpecifierContext nestedNameSpecifier(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		NestedNameSpecifierContext _localctx = new NestedNameSpecifierContext(Context, _parentState);
		NestedNameSpecifierContext _prevctx = _localctx;
		int _startState = 10;
		EnterRecursionRule(_localctx, 10, RULE_nestedNameSpecifier, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 427;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,7,Context) ) {
			case 1:
				{
				State = 424;
				theTypeName();
				}
				break;
			case 2:
				{
				State = 425;
				namespaceName();
				}
				break;
			case 3:
				{
				State = 426;
				decltypeSpecifier();
				}
				break;
			}
			State = 429;
			Match(Doublecolon);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 442;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,10,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new NestedNameSpecifierContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_nestedNameSpecifier);
					State = 431;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 437;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,9,Context) ) {
					case 1:
						{
						State = 432;
						Match(Identifier);
						}
						break;
					case 2:
						{
						State = 434;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if (_la==Template) {
							{
							State = 433;
							Match(Template);
							}
						}

						State = 436;
						simpleTemplateId();
						}
						break;
					}
					State = 439;
					Match(Doublecolon);
					}
					} 
				}
				State = 444;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,10,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class LambdaExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public LambdaIntroducerContext lambdaIntroducer() {
			return GetRuleContext<LambdaIntroducerContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CompoundStatementContext compoundStatement() {
			return GetRuleContext<CompoundStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LambdaDeclaratorContext lambdaDeclarator() {
			return GetRuleContext<LambdaDeclaratorContext>(0);
		}
		public LambdaExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lambdaExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14ParserListener typedListener = listener as ICPP14ParserListener;
			if (typedListener != null) typedListener.EnterLambdaExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14ParserListener typedListener = listener as ICPP14ParserListener;
			if (typedListener != null) typedListener.ExitLambdaExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICPP14ParserVisitor<TResult> typedVisitor = visitor as ICPP14ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLambdaExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LambdaExpressionContext lambdaExpression() {
		LambdaExpressionContext _localctx = new LambdaExpressionContext(Context, State);
		EnterRule(_localctx, 12, RULE_lambdaExpression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 445;
			lambdaIntroducer();
			State = 447;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LeftParen) {
				{
				State = 446;
				lambdaDeclarator();
				}
			}

			State = 449;
			compoundStatement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LambdaIntroducerContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LeftBracket() { return GetToken(CPP14Parser.LeftBracket, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RightBracket() { return GetToken(CPP14Parser.RightBracket, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public LambdaCaptureContext lambdaCapture() {
			return GetRuleContext<LambdaCaptureContext>(0);
		}
		public LambdaIntroducerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lambdaIntroducer; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14ParserListener typedListener = listener as ICPP14ParserListener;
			if (typedListener != null) typedListener.EnterLambdaIntroducer(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14ParserListener typedListener = listener as ICPP14ParserListener;
			if (typedListener != null) typedListener.ExitLambdaIntroducer(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICPP14ParserVisitor<TResult> typedVisitor = visitor as ICPP14ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLambdaIntroducer(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LambdaIntroducerContext lambdaIntroducer() {
		LambdaIntroducerContext _localctx = new LambdaIntroducerContext(Context, State);
		EnterRule(_localctx, 14, RULE_lambdaIntroducer);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 451;
			Match(LeftBracket);
			State = 453;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (((((_la - 69)) & ~0x3f) == 0 && ((1L << (_la - 69)) & ((1L << (This - 69)) | (1L << (And - 69)) | (1L << (Assign - 69)) | (1L << (Identifier - 69)))) != 0)) {
				{
				State = 452;
				lambdaCapture();
				}
			}

			State = 455;
			Match(RightBracket);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LambdaCaptureContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public CaptureListContext captureList() {
			return GetRuleContext<CaptureListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CaptureDefaultContext captureDefault() {
			return GetRuleContext<CaptureDefaultContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comma() { return GetToken(CPP14Parser.Comma, 0); }
		public LambdaCaptureContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lambdaCapture; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14ParserListener typedListener = listener as ICPP14ParserListener;
			if (typedListener != null) typedListener.EnterLambdaCapture(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14ParserListener typedListener = listener as ICPP14ParserListener;
			if (typedListener != null) typedListener.ExitLambdaCapture(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICPP14ParserVisitor<TResult> typedVisitor = visitor as ICPP14ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLambdaCapture(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LambdaCaptureContext lambdaCapture() {
		LambdaCaptureContext _localctx = new LambdaCaptureContext(Context, State);
		EnterRule(_localctx, 16, RULE_lambdaCapture);
		int _la;
		try {
			State = 463;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,14,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 457;
				captureList();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 458;
				captureDefault();
				State = 461;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==Comma) {
					{
					State = 459;
					Match(Comma);
					State = 460;
					captureList();
					}
				}

				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CaptureDefaultContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode And() { return GetToken(CPP14Parser.And, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Assign() { return GetToken(CPP14Parser.Assign, 0); }
		public CaptureDefaultContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_captureDefault; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14ParserListener typedListener = listener as ICPP14ParserListener;
			if (typedListener != null) typedListener.EnterCaptureDefault(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14ParserListener typedListener = listener as ICPP14ParserListener;
			if (typedListener != null) typedListener.ExitCaptureDefault(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICPP14ParserVisitor<TResult> typedVisitor = visitor as ICPP14ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCaptureDefault(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CaptureDefaultContext captureDefault() {
		CaptureDefaultContext _localctx = new CaptureDefaultContext(Context, State);
		EnterRule(_localctx, 18, RULE_captureDefault);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 465;
			_la = TokenStream.LA(1);
			if ( !(_la==And || _la==Assign) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CaptureListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public CaptureContext[] capture() {
			return GetRuleContexts<CaptureContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public CaptureContext capture(int i) {
			return GetRuleContext<CaptureContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Comma() { return GetTokens(CPP14Parser.Comma); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comma(int i) {
			return GetToken(CPP14Parser.Comma, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Ellipsis() { return GetToken(CPP14Parser.Ellipsis, 0); }
		public CaptureListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_captureList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14ParserListener typedListener = listener as ICPP14ParserListener;
			if (typedListener != null) typedListener.EnterCaptureList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14ParserListener typedListener = listener as ICPP14ParserListener;
			if (typedListener != null) typedListener.ExitCaptureList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICPP14ParserVisitor<TResult> typedVisitor = visitor as ICPP14ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCaptureList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CaptureListContext captureList() {
		CaptureListContext _localctx = new CaptureListContext(Context, State);
		EnterRule(_localctx, 20, RULE_captureList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 467;
			capture();
			State = 472;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==Comma) {
				{
				{
				State = 468;
				Match(Comma);
				State = 469;
				capture();
				}
				}
				State = 474;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 476;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Ellipsis) {
				{
				State = 475;
				Match(Ellipsis);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CaptureContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SimpleCaptureContext simpleCapture() {
			return GetRuleContext<SimpleCaptureContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public InitcaptureContext initcapture() {
			return GetRuleContext<InitcaptureContext>(0);
		}
		public CaptureContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_capture; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14ParserListener typedListener = listener as ICPP14ParserListener;
			if (typedListener != null) typedListener.EnterCapture(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14ParserListener typedListener = listener as ICPP14ParserListener;
			if (typedListener != null) typedListener.ExitCapture(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICPP14ParserVisitor<TResult> typedVisitor = visitor as ICPP14ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCapture(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CaptureContext capture() {
		CaptureContext _localctx = new CaptureContext(Context, State);
		EnterRule(_localctx, 22, RULE_capture);
		try {
			State = 480;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,17,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 478;
				simpleCapture();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 479;
				initcapture();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SimpleCaptureContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(CPP14Parser.Identifier, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode And() { return GetToken(CPP14Parser.And, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode This() { return GetToken(CPP14Parser.This, 0); }
		public SimpleCaptureContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_simpleCapture; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14ParserListener typedListener = listener as ICPP14ParserListener;
			if (typedListener != null) typedListener.EnterSimpleCapture(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14ParserListener typedListener = listener as ICPP14ParserListener;
			if (typedListener != null) typedListener.ExitSimpleCapture(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICPP14ParserVisitor<TResult> typedVisitor = visitor as ICPP14ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSimpleCapture(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SimpleCaptureContext simpleCapture() {
		SimpleCaptureContext _localctx = new SimpleCaptureContext(Context, State);
		EnterRule(_localctx, 24, RULE_simpleCapture);
		int _la;
		try {
			State = 487;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case And:
			case Identifier:
				EnterOuterAlt(_localctx, 1);
				{
				State = 483;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==And) {
					{
					State = 482;
					Match(And);
					}
				}

				State = 485;
				Match(Identifier);
				}
				break;
			case This:
				EnterOuterAlt(_localctx, 2);
				{
				State = 486;
				Match(This);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InitcaptureContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(CPP14Parser.Identifier, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public InitializerContext initializer() {
			return GetRuleContext<InitializerContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode And() { return GetToken(CPP14Parser.And, 0); }
		public InitcaptureContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_initcapture; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14ParserListener typedListener = listener as ICPP14ParserListener;
			if (typedListener != null) typedListener.EnterInitcapture(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14ParserListener typedListener = listener as ICPP14ParserListener;
			if (typedListener != null) typedListener.ExitInitcapture(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICPP14ParserVisitor<TResult> typedVisitor = visitor as ICPP14ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInitcapture(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InitcaptureContext initcapture() {
		InitcaptureContext _localctx = new InitcaptureContext(Context, State);
		EnterRule(_localctx, 26, RULE_initcapture);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 490;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==And) {
				{
				State = 489;
				Match(And);
				}
			}

			State = 492;
			Match(Identifier);
			State = 493;
			initializer();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LambdaDeclaratorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LeftParen() { return GetToken(CPP14Parser.LeftParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RightParen() { return GetToken(CPP14Parser.RightParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ParameterDeclarationClauseContext parameterDeclarationClause() {
			return GetRuleContext<ParameterDeclarationClauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Mutable() { return GetToken(CPP14Parser.Mutable, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExceptionSpecificationContext exceptionSpecification() {
			return GetRuleContext<ExceptionSpecificationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AttributeSpecifierSeqContext attributeSpecifierSeq() {
			return GetRuleContext<AttributeSpecifierSeqContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TrailingReturnTypeContext trailingReturnType() {
			return GetRuleContext<TrailingReturnTypeContext>(0);
		}
		public LambdaDeclaratorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lambdaDeclarator; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14ParserListener typedListener = listener as ICPP14ParserListener;
			if (typedListener != null) typedListener.EnterLambdaDeclarator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14ParserListener typedListener = listener as ICPP14ParserListener;
			if (typedListener != null) typedListener.ExitLambdaDeclarator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICPP14ParserVisitor<TResult> typedVisitor = visitor as ICPP14ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLambdaDeclarator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LambdaDeclaratorContext lambdaDeclarator() {
		LambdaDeclaratorContext _localctx = new LambdaDeclaratorContext(Context, State);
		EnterRule(_localctx, 28, RULE_lambdaDeclarator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 495;
			Match(LeftParen);
			State = 497;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (((((_la - 10)) & ~0x3f) == 0 && ((1L << (_la - 10)) & ((1L << (Alignas - 10)) | (1L << (Auto - 10)) | (1L << (Bool - 10)) | (1L << (Char - 10)) | (1L << (Char16 - 10)) | (1L << (Char32 - 10)) | (1L << (Class - 10)) | (1L << (Const - 10)) | (1L << (Constexpr - 10)) | (1L << (Decltype - 10)) | (1L << (Double - 10)) | (1L << (Enum - 10)) | (1L << (Explicit - 10)) | (1L << (Extern - 10)) | (1L << (Float - 10)) | (1L << (Friend - 10)) | (1L << (Inline - 10)) | (1L << (Int - 10)) | (1L << (Long - 10)) | (1L << (Mutable - 10)) | (1L << (Register - 10)) | (1L << (Short - 10)) | (1L << (Signed - 10)) | (1L << (Static - 10)) | (1L << (Struct - 10)) | (1L << (Thread_local - 10)))) != 0) || ((((_la - 74)) & ~0x3f) == 0 && ((1L << (_la - 74)) & ((1L << (Typedef - 74)) | (1L << (Typename_ - 74)) | (1L << (Union - 74)) | (1L << (Unsigned - 74)) | (1L << (Virtual - 74)) | (1L << (Void - 74)) | (1L << (Volatile - 74)) | (1L << (Wchar - 74)) | (1L << (LeftBracket - 74)) | (1L << (Doublecolon - 74)) | (1L << (Identifier - 74)))) != 0)) {
				{
				State = 496;
				parameterDeclarationClause();
				}
			}

			State = 499;
			Match(RightParen);
			State = 501;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Mutable) {
				{
				State = 500;
				Match(Mutable);
				}
			}

			State = 504;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Noexcept || _la==Throw) {
				{
				State = 503;
				exceptionSpecification();
				}
			}

			State = 507;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Alignas || _la==LeftBracket) {
				{
				State = 506;
				attributeSpecifierSeq();
				}
			}

			State = 510;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Arrow) {
				{
				State = 509;
				trailingReturnType();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PostfixExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public PrimaryExpressionContext primaryExpression() {
			return GetRuleContext<PrimaryExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SimpleTypeSpecifierContext simpleTypeSpecifier() {
			return GetRuleContext<SimpleTypeSpecifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeNameSpecifierContext typeNameSpecifier() {
			return GetRuleContext<TypeNameSpecifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LeftParen() { return GetToken(CPP14Parser.LeftParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RightParen() { return GetToken(CPP14Parser.RightParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BracedInitListContext bracedInitList() {
			return GetRuleContext<BracedInitListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionListContext expressionList() {
			return GetRuleContext<ExpressionListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Less() { return GetToken(CPP14Parser.Less, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TheTypeIdContext theTypeId() {
			return GetRuleContext<TheTypeIdContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Greater() { return GetToken(CPP14Parser.Greater, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Dynamic_cast() { return GetToken(CPP14Parser.Dynamic_cast, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Static_cast() { return GetToken(CPP14Parser.Static_cast, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Reinterpret_cast() { return GetToken(CPP14Parser.Reinterpret_cast, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Const_cast() { return GetToken(CPP14Parser.Const_cast, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeIdOfTheTypeIdContext typeIdOfTheTypeId() {
			return GetRuleContext<TypeIdOfTheTypeIdContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PostfixExpressionContext postfixExpression() {
			return GetRuleContext<PostfixExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LeftBracket() { return GetToken(CPP14Parser.LeftBracket, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RightBracket() { return GetToken(CPP14Parser.RightBracket, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Dot() { return GetToken(CPP14Parser.Dot, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Arrow() { return GetToken(CPP14Parser.Arrow, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdExpressionContext idExpression() {
			return GetRuleContext<IdExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PseudoDestructorNameContext pseudoDestructorName() {
			return GetRuleContext<PseudoDestructorNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Template() { return GetToken(CPP14Parser.Template, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PlusPlus() { return GetToken(CPP14Parser.PlusPlus, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MinusMinus() { return GetToken(CPP14Parser.MinusMinus, 0); }
		public PostfixExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_postfixExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14ParserListener typedListener = listener as ICPP14ParserListener;
			if (typedListener != null) typedListener.EnterPostfixExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14ParserListener typedListener = listener as ICPP14ParserListener;
			if (typedListener != null) typedListener.ExitPostfixExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICPP14ParserVisitor<TResult> typedVisitor = visitor as ICPP14ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPostfixExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PostfixExpressionContext postfixExpression() {
		return postfixExpression(0);
	}

	private PostfixExpressionContext postfixExpression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		PostfixExpressionContext _localctx = new PostfixExpressionContext(Context, _parentState);
		PostfixExpressionContext _prevctx = _localctx;
		int _startState = 30;
		EnterRecursionRule(_localctx, 30, RULE_postfixExpression, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 542;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,30,Context) ) {
			case 1:
				{
				State = 513;
				primaryExpression();
				}
				break;
			case 2:
				{
				State = 516;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case Auto:
				case Bool:
				case Char:
				case Char16:
				case Char32:
				case Decltype:
				case Double:
				case Float:
				case Int:
				case Long:
				case Short:
				case Signed:
				case Unsigned:
				case Void:
				case Wchar:
				case Doublecolon:
				case Identifier:
					{
					State = 514;
					simpleTypeSpecifier();
					}
					break;
				case Typename_:
					{
					State = 515;
					typeNameSpecifier();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 524;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case LeftParen:
					{
					State = 518;
					Match(LeftParen);
					State = 520;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << IntegerLiteral) | (1L << CharacterLiteral) | (1L << FloatingLiteral) | (1L << StringLiteral) | (1L << BooleanLiteral) | (1L << PointerLiteral) | (1L << UserDefinedLiteral) | (1L << Alignof) | (1L << Auto) | (1L << Bool) | (1L << Char) | (1L << Char16) | (1L << Char32) | (1L << Const_cast) | (1L << Decltype) | (1L << Delete) | (1L << Double) | (1L << Dynamic_cast) | (1L << Float) | (1L << Int) | (1L << Long) | (1L << New) | (1L << Noexcept) | (1L << Operator) | (1L << Reinterpret_cast) | (1L << Short) | (1L << Signed) | (1L << Sizeof))) != 0) || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & ((1L << (Static_cast - 65)) | (1L << (This - 65)) | (1L << (Throw - 65)) | (1L << (Typeid_ - 65)) | (1L << (Typename_ - 65)) | (1L << (Unsigned - 65)) | (1L << (Void - 65)) | (1L << (Wchar - 65)) | (1L << (LeftParen - 65)) | (1L << (LeftBracket - 65)) | (1L << (LeftBrace - 65)) | (1L << (Plus - 65)) | (1L << (Minus - 65)) | (1L << (Star - 65)) | (1L << (And - 65)) | (1L << (Or - 65)) | (1L << (Tilde - 65)) | (1L << (Not - 65)) | (1L << (PlusPlus - 65)) | (1L << (MinusMinus - 65)) | (1L << (Doublecolon - 65)))) != 0) || _la==Identifier) {
						{
						State = 519;
						expressionList();
						}
					}

					State = 522;
					Match(RightParen);
					}
					break;
				case LeftBrace:
					{
					State = 523;
					bracedInitList();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 3:
				{
				State = 526;
				_la = TokenStream.LA(1);
				if ( !(((((_la - 24)) & ~0x3f) == 0 && ((1L << (_la - 24)) & ((1L << (Const_cast - 24)) | (1L << (Dynamic_cast - 24)) | (1L << (Reinterpret_cast - 24)) | (1L << (Static_cast - 24)))) != 0)) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 527;
				Match(Less);
				State = 528;
				theTypeId();
				State = 529;
				Match(Greater);
				State = 530;
				Match(LeftParen);
				State = 531;
				expression();
				State = 532;
				Match(RightParen);
				}
				break;
			case 4:
				{
				State = 534;
				typeIdOfTheTypeId();
				State = 535;
				Match(LeftParen);
				State = 538;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,29,Context) ) {
				case 1:
					{
					State = 536;
					expression();
					}
					break;
				case 2:
					{
					State = 537;
					theTypeId();
					}
					break;
				}
				State = 540;
				Match(RightParen);
				}
				break;
			}
			Context.Stop = TokenStream.LT(-1);
			State = 571;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,36,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 569;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,35,Context) ) {
					case 1:
						{
						_localctx = new PostfixExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_postfixExpression);
						State = 544;
						if (!(Precpred(Context, 7))) throw new FailedPredicateException(this, "Precpred(Context, 7)");
						State = 545;
						Match(LeftBracket);
						State = 548;
						ErrorHandler.Sync(this);
						switch (TokenStream.LA(1)) {
						case IntegerLiteral:
						case CharacterLiteral:
						case FloatingLiteral:
						case StringLiteral:
						case BooleanLiteral:
						case PointerLiteral:
						case UserDefinedLiteral:
						case Alignof:
						case Auto:
						case Bool:
						case Char:
						case Char16:
						case Char32:
						case Const_cast:
						case Decltype:
						case Delete:
						case Double:
						case Dynamic_cast:
						case Float:
						case Int:
						case Long:
						case New:
						case Noexcept:
						case Operator:
						case Reinterpret_cast:
						case Short:
						case Signed:
						case Sizeof:
						case Static_cast:
						case This:
						case Throw:
						case Typeid_:
						case Typename_:
						case Unsigned:
						case Void:
						case Wchar:
						case LeftParen:
						case LeftBracket:
						case Plus:
						case Minus:
						case Star:
						case And:
						case Or:
						case Tilde:
						case Not:
						case PlusPlus:
						case MinusMinus:
						case Doublecolon:
						case Identifier:
							{
							State = 546;
							expression();
							}
							break;
						case LeftBrace:
							{
							State = 547;
							bracedInitList();
							}
							break;
						default:
							throw new NoViableAltException(this);
						}
						State = 550;
						Match(RightBracket);
						}
						break;
					case 2:
						{
						_localctx = new PostfixExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_postfixExpression);
						State = 552;
						if (!(Precpred(Context, 6))) throw new FailedPredicateException(this, "Precpred(Context, 6)");
						State = 553;
						Match(LeftParen);
						State = 555;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << IntegerLiteral) | (1L << CharacterLiteral) | (1L << FloatingLiteral) | (1L << StringLiteral) | (1L << BooleanLiteral) | (1L << PointerLiteral) | (1L << UserDefinedLiteral) | (1L << Alignof) | (1L << Auto) | (1L << Bool) | (1L << Char) | (1L << Char16) | (1L << Char32) | (1L << Const_cast) | (1L << Decltype) | (1L << Delete) | (1L << Double) | (1L << Dynamic_cast) | (1L << Float) | (1L << Int) | (1L << Long) | (1L << New) | (1L << Noexcept) | (1L << Operator) | (1L << Reinterpret_cast) | (1L << Short) | (1L << Signed) | (1L << Sizeof))) != 0) || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & ((1L << (Static_cast - 65)) | (1L << (This - 65)) | (1L << (Throw - 65)) | (1L << (Typeid_ - 65)) | (1L << (Typename_ - 65)) | (1L << (Unsigned - 65)) | (1L << (Void - 65)) | (1L << (Wchar - 65)) | (1L << (LeftParen - 65)) | (1L << (LeftBracket - 65)) | (1L << (LeftBrace - 65)) | (1L << (Plus - 65)) | (1L << (Minus - 65)) | (1L << (Star - 65)) | (1L << (And - 65)) | (1L << (Or - 65)) | (1L << (Tilde - 65)) | (1L << (Not - 65)) | (1L << (PlusPlus - 65)) | (1L << (MinusMinus - 65)) | (1L << (Doublecolon - 65)))) != 0) || _la==Identifier) {
							{
							State = 554;
							expressionList();
							}
						}

						State = 557;
						Match(RightParen);
						}
						break;
					case 3:
						{
						_localctx = new PostfixExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_postfixExpression);
						State = 558;
						if (!(Precpred(Context, 4))) throw new FailedPredicateException(this, "Precpred(Context, 4)");
						State = 559;
						_la = TokenStream.LA(1);
						if ( !(_la==Arrow || _la==Dot) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 565;
						ErrorHandler.Sync(this);
						switch ( Interpreter.AdaptivePredict(TokenStream,34,Context) ) {
						case 1:
							{
							State = 561;
							ErrorHandler.Sync(this);
							_la = TokenStream.LA(1);
							if (_la==Template) {
								{
								State = 560;
								Match(Template);
								}
							}

							State = 563;
							idExpression();
							}
							break;
						case 2:
							{
							State = 564;
							pseudoDestructorName();
							}
							break;
						}
						}
						break;
					case 4:
						{
						_localctx = new PostfixExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_postfixExpression);
						State = 567;
						if (!(Precpred(Context, 3))) throw new FailedPredicateException(this, "Precpred(Context, 3)");
						State = 568;
						_la = TokenStream.LA(1);
						if ( !(_la==PlusPlus || _la==MinusMinus) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						}
						break;
					}
					} 
				}
				State = 573;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,36,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class TypeIdOfTheTypeIdContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Typeid_() { return GetToken(CPP14Parser.Typeid_, 0); }
		public TypeIdOfTheTypeIdContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeIdOfTheTypeId; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14ParserListener typedListener = listener as ICPP14ParserListener;
			if (typedListener != null) typedListener.EnterTypeIdOfTheTypeId(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14ParserListener typedListener = listener as ICPP14ParserListener;
			if (typedListener != null) typedListener.ExitTypeIdOfTheTypeId(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICPP14ParserVisitor<TResult> typedVisitor = visitor as ICPP14ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeIdOfTheTypeId(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeIdOfTheTypeIdContext typeIdOfTheTypeId() {
		TypeIdOfTheTypeIdContext _localctx = new TypeIdOfTheTypeIdContext(Context, State);
		EnterRule(_localctx, 32, RULE_typeIdOfTheTypeId);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 574;
			Match(Typeid_);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public InitializerListContext initializerList() {
			return GetRuleContext<InitializerListContext>(0);
		}
		public ExpressionListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expressionList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14ParserListener typedListener = listener as ICPP14ParserListener;
			if (typedListener != null) typedListener.EnterExpressionList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14ParserListener typedListener = listener as ICPP14ParserListener;
			if (typedListener != null) typedListener.ExitExpressionList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICPP14ParserVisitor<TResult> typedVisitor = visitor as ICPP14ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpressionList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionListContext expressionList() {
		ExpressionListContext _localctx = new ExpressionListContext(Context, State);
		EnterRule(_localctx, 34, RULE_expressionList);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 576;
			initializerList();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PseudoDestructorNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Tilde() { return GetToken(CPP14Parser.Tilde, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TheTypeNameContext[] theTypeName() {
			return GetRuleContexts<TheTypeNameContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TheTypeNameContext theTypeName(int i) {
			return GetRuleContext<TheTypeNameContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NestedNameSpecifierContext nestedNameSpecifier() {
			return GetRuleContext<NestedNameSpecifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Doublecolon() { return GetToken(CPP14Parser.Doublecolon, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Template() { return GetToken(CPP14Parser.Template, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SimpleTemplateIdContext simpleTemplateId() {
			return GetRuleContext<SimpleTemplateIdContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DecltypeSpecifierContext decltypeSpecifier() {
			return GetRuleContext<DecltypeSpecifierContext>(0);
		}
		public PseudoDestructorNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pseudoDestructorName; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14ParserListener typedListener = listener as ICPP14ParserListener;
			if (typedListener != null) typedListener.EnterPseudoDestructorName(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14ParserListener typedListener = listener as ICPP14ParserListener;
			if (typedListener != null) typedListener.ExitPseudoDestructorName(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICPP14ParserVisitor<TResult> typedVisitor = visitor as ICPP14ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPseudoDestructorName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PseudoDestructorNameContext pseudoDestructorName() {
		PseudoDestructorNameContext _localctx = new PseudoDestructorNameContext(Context, State);
		EnterRule(_localctx, 36, RULE_pseudoDestructorName);
		int _la;
		try {
			State = 597;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,39,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 579;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,37,Context) ) {
				case 1:
					{
					State = 578;
					nestedNameSpecifier(0);
					}
					break;
				}
				State = 584;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==Identifier) {
					{
					State = 581;
					theTypeName();
					State = 582;
					Match(Doublecolon);
					}
				}

				State = 586;
				Match(Tilde);
				State = 587;
				theTypeName();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 588;
				nestedNameSpecifier(0);
				State = 589;
				Match(Template);
				State = 590;
				simpleTemplateId();
				State = 591;
				Match(Doublecolon);
				State = 592;
				Match(Tilde);
				State = 593;
				theTypeName();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 595;
				Match(Tilde);
				State = 596;
				decltypeSpecifier();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UnaryExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public PostfixExpressionContext postfixExpression() {
			return GetRuleContext<PostfixExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public UnaryExpressionContext unaryExpression() {
			return GetRuleContext<UnaryExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PlusPlus() { return GetToken(CPP14Parser.PlusPlus, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MinusMinus() { return GetToken(CPP14Parser.MinusMinus, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UnaryOperatorContext unaryOperator() {
			return GetRuleContext<UnaryOperatorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Sizeof() { return GetToken(CPP14Parser.Sizeof, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LeftParen() { return GetToken(CPP14Parser.LeftParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TheTypeIdContext theTypeId() {
			return GetRuleContext<TheTypeIdContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RightParen() { return GetToken(CPP14Parser.RightParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Ellipsis() { return GetToken(CPP14Parser.Ellipsis, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(CPP14Parser.Identifier, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Alignof() { return GetToken(CPP14Parser.Alignof, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NoExceptExpressionContext noExceptExpression() {
			return GetRuleContext<NoExceptExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NewExpressionContext newExpression() {
			return GetRuleContext<NewExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DeleteExpressionContext deleteExpression() {
			return GetRuleContext<DeleteExpressionContext>(0);
		}
		public UnaryExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unaryExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14ParserListener typedListener = listener as ICPP14ParserListener;
			if (typedListener != null) typedListener.EnterUnaryExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14ParserListener typedListener = listener as ICPP14ParserListener;
			if (typedListener != null) typedListener.ExitUnaryExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICPP14ParserVisitor<TResult> typedVisitor = visitor as ICPP14ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnaryExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UnaryExpressionContext unaryExpression() {
		UnaryExpressionContext _localctx = new UnaryExpressionContext(Context, State);
		EnterRule(_localctx, 38, RULE_unaryExpression);
		try {
			State = 626;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,42,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 599;
				postfixExpression(0);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 604;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case PlusPlus:
					{
					State = 600;
					Match(PlusPlus);
					}
					break;
				case MinusMinus:
					{
					State = 601;
					Match(MinusMinus);
					}
					break;
				case Plus:
				case Minus:
				case Star:
				case And:
				case Or:
				case Tilde:
				case Not:
					{
					State = 602;
					unaryOperator();
					}
					break;
				case Sizeof:
					{
					State = 603;
					Match(Sizeof);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 606;
				unaryExpression();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 607;
				Match(Sizeof);
				State = 616;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case LeftParen:
					{
					State = 608;
					Match(LeftParen);
					State = 609;
					theTypeId();
					State = 610;
					Match(RightParen);
					}
					break;
				case Ellipsis:
					{
					State = 612;
					Match(Ellipsis);
					State = 613;
					Match(LeftParen);
					State = 614;
					Match(Identifier);
					State = 615;
					Match(RightParen);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 618;
				Match(Alignof);
				State = 619;
				Match(LeftParen);
				State = 620;
				theTypeId();
				State = 621;
				Match(RightParen);
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 623;
				noExceptExpression();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 624;
				newExpression();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 625;
				deleteExpression();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UnaryOperatorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Or() { return GetToken(CPP14Parser.Or, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Star() { return GetToken(CPP14Parser.Star, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode And() { return GetToken(CPP14Parser.And, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Plus() { return GetToken(CPP14Parser.Plus, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Tilde() { return GetToken(CPP14Parser.Tilde, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Minus() { return GetToken(CPP14Parser.Minus, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Not() { return GetToken(CPP14Parser.Not, 0); }
		public UnaryOperatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unaryOperator; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14ParserListener typedListener = listener as ICPP14ParserListener;
			if (typedListener != null) typedListener.EnterUnaryOperator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14ParserListener typedListener = listener as ICPP14ParserListener;
			if (typedListener != null) typedListener.ExitUnaryOperator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICPP14ParserVisitor<TResult> typedVisitor = visitor as ICPP14ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnaryOperator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UnaryOperatorContext unaryOperator() {
		UnaryOperatorContext _localctx = new UnaryOperatorContext(Context, State);
		EnterRule(_localctx, 40, RULE_unaryOperator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 628;
			_la = TokenStream.LA(1);
			if ( !(((((_la - 91)) & ~0x3f) == 0 && ((1L << (_la - 91)) & ((1L << (Plus - 91)) | (1L << (Minus - 91)) | (1L << (Star - 91)) | (1L << (And - 91)) | (1L << (Or - 91)) | (1L << (Tilde - 91)) | (1L << (Not - 91)))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NewExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode New() { return GetToken(CPP14Parser.New, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NewTypeIdContext newTypeId() {
			return GetRuleContext<NewTypeIdContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Doublecolon() { return GetToken(CPP14Parser.Doublecolon, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NewPlacementContext newPlacement() {
			return GetRuleContext<NewPlacementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NewInitializerContext newInitializer() {
			return GetRuleContext<NewInitializerContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LeftParen() { return GetToken(CPP14Parser.LeftParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TheTypeIdContext theTypeId() {
			return GetRuleContext<TheTypeIdContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RightParen() { return GetToken(CPP14Parser.RightParen, 0); }
		public NewExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_newExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14ParserListener typedListener = listener as ICPP14ParserListener;
			if (typedListener != null) typedListener.EnterNewExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14ParserListener typedListener = listener as ICPP14ParserListener;
			if (typedListener != null) typedListener.ExitNewExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICPP14ParserVisitor<TResult> typedVisitor = visitor as ICPP14ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNewExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NewExpressionContext newExpression() {
		NewExpressionContext _localctx = new NewExpressionContext(Context, State);
		EnterRule(_localctx, 42, RULE_newExpression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 631;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Doublecolon) {
				{
				State = 630;
				Match(Doublecolon);
				}
			}

			State = 633;
			Match(New);
			State = 635;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,44,Context) ) {
			case 1:
				{
				State = 634;
				newPlacement();
				}
				break;
			}
			State = 642;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case Auto:
			case Bool:
			case Char:
			case Char16:
			case Char32:
			case Class:
			case Const:
			case Decltype:
			case Double:
			case Enum:
			case Float:
			case Int:
			case Long:
			case Short:
			case Signed:
			case Struct:
			case Typename_:
			case Union:
			case Unsigned:
			case Void:
			case Volatile:
			case Wchar:
			case Doublecolon:
			case Identifier:
				{
				State = 637;
				newTypeId();
				}
				break;
			case LeftParen:
				{
				{
				State = 638;
				Match(LeftParen);
				State = 639;
				theTypeId();
				State = 640;
				Match(RightParen);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 645;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LeftParen || _la==LeftBrace) {
				{
				State = 644;
				newInitializer();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NewPlacementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LeftParen() { return GetToken(CPP14Parser.LeftParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionListContext expressionList() {
			return GetRuleContext<ExpressionListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RightParen() { return GetToken(CPP14Parser.RightParen, 0); }
		public NewPlacementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_newPlacement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14ParserListener typedListener = listener as ICPP14ParserListener;
			if (typedListener != null) typedListener.EnterNewPlacement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14ParserListener typedListener = listener as ICPP14ParserListener;
			if (typedListener != null) typedListener.ExitNewPlacement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICPP14ParserVisitor<TResult> typedVisitor = visitor as ICPP14ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNewPlacement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NewPlacementContext newPlacement() {
		NewPlacementContext _localctx = new NewPlacementContext(Context, State);
		EnterRule(_localctx, 44, RULE_newPlacement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 647;
			Match(LeftParen);
			State = 648;
			expressionList();
			State = 649;
			Match(RightParen);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NewTypeIdContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypeSpecifierSeqContext typeSpecifierSeq() {
			return GetRuleContext<TypeSpecifierSeqContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NewDeclaratorContext newDeclarator() {
			return GetRuleContext<NewDeclaratorContext>(0);
		}
		public NewTypeIdContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_newTypeId; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14ParserListener typedListener = listener as ICPP14ParserListener;
			if (typedListener != null) typedListener.EnterNewTypeId(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14ParserListener typedListener = listener as ICPP14ParserListener;
			if (typedListener != null) typedListener.ExitNewTypeId(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICPP14ParserVisitor<TResult> typedVisitor = visitor as ICPP14ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNewTypeId(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NewTypeIdContext newTypeId() {
		NewTypeIdContext _localctx = new NewTypeIdContext(Context, State);
		EnterRule(_localctx, 46, RULE_newTypeId);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 651;
			typeSpecifierSeq();
			State = 653;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,47,Context) ) {
			case 1:
				{
				State = 652;
				newDeclarator();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NewDeclaratorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public PointerOperatorContext pointerOperator() {
			return GetRuleContext<PointerOperatorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NewDeclaratorContext newDeclarator() {
			return GetRuleContext<NewDeclaratorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NoPointerNewDeclaratorContext noPointerNewDeclarator() {
			return GetRuleContext<NoPointerNewDeclaratorContext>(0);
		}
		public NewDeclaratorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_newDeclarator; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14ParserListener typedListener = listener as ICPP14ParserListener;
			if (typedListener != null) typedListener.EnterNewDeclarator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14ParserListener typedListener = listener as ICPP14ParserListener;
			if (typedListener != null) typedListener.ExitNewDeclarator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICPP14ParserVisitor<TResult> typedVisitor = visitor as ICPP14ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNewDeclarator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NewDeclaratorContext newDeclarator() {
		NewDeclaratorContext _localctx = new NewDeclaratorContext(Context, State);
		EnterRule(_localctx, 48, RULE_newDeclarator);
		try {
			State = 660;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case Decltype:
			case Star:
			case And:
			case AndAnd:
			case Doublecolon:
			case Identifier:
				EnterOuterAlt(_localctx, 1);
				{
				State = 655;
				pointerOperator();
				State = 657;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,48,Context) ) {
				case 1:
					{
					State = 656;
					newDeclarator();
					}
					break;
				}
				}
				break;
			case LeftBracket:
				EnterOuterAlt(_localctx, 2);
				{
				State = 659;
				noPointerNewDeclarator(0);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NoPointerNewDeclaratorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LeftBracket() { return GetToken(CPP14Parser.LeftBracket, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RightBracket() { return GetToken(CPP14Parser.RightBracket, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public AttributeSpecifierSeqContext attributeSpecifierSeq() {
			return GetRuleContext<AttributeSpecifierSeqContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NoPointerNewDeclaratorContext noPointerNewDeclarator() {
			return GetRuleContext<NoPointerNewDeclaratorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ConstantExpressionContext constantExpression() {
			return GetRuleContext<ConstantExpressionContext>(0);
		}
		public NoPointerNewDeclaratorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_noPointerNewDeclarator; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14ParserListener typedListener = listener as ICPP14ParserListener;
			if (typedListener != null) typedListener.EnterNoPointerNewDeclarator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14ParserListener typedListener = listener as ICPP14ParserListener;
			if (typedListener != null) typedListener.ExitNoPointerNewDeclarator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICPP14ParserVisitor<TResult> typedVisitor = visitor as ICPP14ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNoPointerNewDeclarator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NoPointerNewDeclaratorContext noPointerNewDeclarator() {
		return noPointerNewDeclarator(0);
	}

	private NoPointerNewDeclaratorContext noPointerNewDeclarator(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		NoPointerNewDeclaratorContext _localctx = new NoPointerNewDeclaratorContext(Context, _parentState);
		NoPointerNewDeclaratorContext _prevctx = _localctx;
		int _startState = 50;
		EnterRecursionRule(_localctx, 50, RULE_noPointerNewDeclarator, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 663;
			Match(LeftBracket);
			State = 664;
			expression();
			State = 665;
			Match(RightBracket);
			State = 667;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,50,Context) ) {
			case 1:
				{
				State = 666;
				attributeSpecifierSeq();
				}
				break;
			}
			}
			Context.Stop = TokenStream.LT(-1);
			State = 678;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,52,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new NoPointerNewDeclaratorContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_noPointerNewDeclarator);
					State = 669;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 670;
					Match(LeftBracket);
					State = 671;
					constantExpression();
					State = 672;
					Match(RightBracket);
					State = 674;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,51,Context) ) {
					case 1:
						{
						State = 673;
						attributeSpecifierSeq();
						}
						break;
					}
					}
					} 
				}
				State = 680;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,52,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class NewInitializerContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LeftParen() { return GetToken(CPP14Parser.LeftParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RightParen() { return GetToken(CPP14Parser.RightParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionListContext expressionList() {
			return GetRuleContext<ExpressionListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BracedInitListContext bracedInitList() {
			return GetRuleContext<BracedInitListContext>(0);
		}
		public NewInitializerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_newInitializer; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14ParserListener typedListener = listener as ICPP14ParserListener;
			if (typedListener != null) typedListener.EnterNewInitializer(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14ParserListener typedListener = listener as ICPP14ParserListener;
			if (typedListener != null) typedListener.ExitNewInitializer(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICPP14ParserVisitor<TResult> typedVisitor = visitor as ICPP14ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNewInitializer(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NewInitializerContext newInitializer() {
		NewInitializerContext _localctx = new NewInitializerContext(Context, State);
		EnterRule(_localctx, 52, RULE_newInitializer);
		int _la;
		try {
			State = 687;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case LeftParen:
				EnterOuterAlt(_localctx, 1);
				{
				State = 681;
				Match(LeftParen);
				State = 683;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << IntegerLiteral) | (1L << CharacterLiteral) | (1L << FloatingLiteral) | (1L << StringLiteral) | (1L << BooleanLiteral) | (1L << PointerLiteral) | (1L << UserDefinedLiteral) | (1L << Alignof) | (1L << Auto) | (1L << Bool) | (1L << Char) | (1L << Char16) | (1L << Char32) | (1L << Const_cast) | (1L << Decltype) | (1L << Delete) | (1L << Double) | (1L << Dynamic_cast) | (1L << Float) | (1L << Int) | (1L << Long) | (1L << New) | (1L << Noexcept) | (1L << Operator) | (1L << Reinterpret_cast) | (1L << Short) | (1L << Signed) | (1L << Sizeof))) != 0) || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & ((1L << (Static_cast - 65)) | (1L << (This - 65)) | (1L << (Throw - 65)) | (1L << (Typeid_ - 65)) | (1L << (Typename_ - 65)) | (1L << (Unsigned - 65)) | (1L << (Void - 65)) | (1L << (Wchar - 65)) | (1L << (LeftParen - 65)) | (1L << (LeftBracket - 65)) | (1L << (LeftBrace - 65)) | (1L << (Plus - 65)) | (1L << (Minus - 65)) | (1L << (Star - 65)) | (1L << (And - 65)) | (1L << (Or - 65)) | (1L << (Tilde - 65)) | (1L << (Not - 65)) | (1L << (PlusPlus - 65)) | (1L << (MinusMinus - 65)) | (1L << (Doublecolon - 65)))) != 0) || _la==Identifier) {
					{
					State = 682;
					expressionList();
					}
				}

				State = 685;
				Match(RightParen);
				}
				break;
			case LeftBrace:
				EnterOuterAlt(_localctx, 2);
				{
				State = 686;
				bracedInitList();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeleteExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Delete() { return GetToken(CPP14Parser.Delete, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public CastExpressionContext castExpression() {
			return GetRuleContext<CastExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Doublecolon() { return GetToken(CPP14Parser.Doublecolon, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LeftBracket() { return GetToken(CPP14Parser.LeftBracket, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RightBracket() { return GetToken(CPP14Parser.RightBracket, 0); }
		public DeleteExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_deleteExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14ParserListener typedListener = listener as ICPP14ParserListener;
			if (typedListener != null) typedListener.EnterDeleteExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14ParserListener typedListener = listener as ICPP14ParserListener;
			if (typedListener != null) typedListener.ExitDeleteExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICPP14ParserVisitor<TResult> typedVisitor = visitor as ICPP14ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeleteExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DeleteExpressionContext deleteExpression() {
		DeleteExpressionContext _localctx = new DeleteExpressionContext(Context, State);
		EnterRule(_localctx, 54, RULE_deleteExpression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 690;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Doublecolon) {
				{
				State = 689;
				Match(Doublecolon);
				}
			}

			State = 692;
			Match(Delete);
			State = 695;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,56,Context) ) {
			case 1:
				{
				State = 693;
				Match(LeftBracket);
				State = 694;
				Match(RightBracket);
				}
				break;
			}
			State = 697;
			castExpression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NoExceptExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Noexcept() { return GetToken(CPP14Parser.Noexcept, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LeftParen() { return GetToken(CPP14Parser.LeftParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RightParen() { return GetToken(CPP14Parser.RightParen, 0); }
		public NoExceptExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_noExceptExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14ParserListener typedListener = listener as ICPP14ParserListener;
			if (typedListener != null) typedListener.EnterNoExceptExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14ParserListener typedListener = listener as ICPP14ParserListener;
			if (typedListener != null) typedListener.ExitNoExceptExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICPP14ParserVisitor<TResult> typedVisitor = visitor as ICPP14ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNoExceptExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NoExceptExpressionContext noExceptExpression() {
		NoExceptExpressionContext _localctx = new NoExceptExpressionContext(Context, State);
		EnterRule(_localctx, 56, RULE_noExceptExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 699;
			Match(Noexcept);
			State = 700;
			Match(LeftParen);
			State = 701;
			expression();
			State = 702;
			Match(RightParen);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CastExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public UnaryExpressionContext unaryExpression() {
			return GetRuleContext<UnaryExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LeftParen() { return GetToken(CPP14Parser.LeftParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TheTypeIdContext theTypeId() {
			return GetRuleContext<TheTypeIdContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RightParen() { return GetToken(CPP14Parser.RightParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public CastExpressionContext castExpression() {
			return GetRuleContext<CastExpressionContext>(0);
		}
		public CastExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_castExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14ParserListener typedListener = listener as ICPP14ParserListener;
			if (typedListener != null) typedListener.EnterCastExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14ParserListener typedListener = listener as ICPP14ParserListener;
			if (typedListener != null) typedListener.ExitCastExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICPP14ParserVisitor<TResult> typedVisitor = visitor as ICPP14ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCastExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CastExpressionContext castExpression() {
		CastExpressionContext _localctx = new CastExpressionContext(Context, State);
		EnterRule(_localctx, 58, RULE_castExpression);
		try {
			State = 710;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,57,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 704;
				unaryExpression();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 705;
				Match(LeftParen);
				State = 706;
				theTypeId();
				State = 707;
				Match(RightParen);
				State = 708;
				castExpression();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PointerMemberExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public CastExpressionContext[] castExpression() {
			return GetRuleContexts<CastExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public CastExpressionContext castExpression(int i) {
			return GetRuleContext<CastExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] DotStar() { return GetTokens(CPP14Parser.DotStar); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DotStar(int i) {
			return GetToken(CPP14Parser.DotStar, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] ArrowStar() { return GetTokens(CPP14Parser.ArrowStar); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ArrowStar(int i) {
			return GetToken(CPP14Parser.ArrowStar, i);
		}
		public PointerMemberExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pointerMemberExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14ParserListener typedListener = listener as ICPP14ParserListener;
			if (typedListener != null) typedListener.EnterPointerMemberExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14ParserListener typedListener = listener as ICPP14ParserListener;
			if (typedListener != null) typedListener.ExitPointerMemberExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICPP14ParserVisitor<TResult> typedVisitor = visitor as ICPP14ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPointerMemberExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PointerMemberExpressionContext pointerMemberExpression() {
		PointerMemberExpressionContext _localctx = new PointerMemberExpressionContext(Context, State);
		EnterRule(_localctx, 60, RULE_pointerMemberExpression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 712;
			castExpression();
			State = 717;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==ArrowStar || _la==DotStar) {
				{
				{
				State = 713;
				_la = TokenStream.LA(1);
				if ( !(_la==ArrowStar || _la==DotStar) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 714;
				castExpression();
				}
				}
				State = 719;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MultiplicativeExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public PointerMemberExpressionContext[] pointerMemberExpression() {
			return GetRuleContexts<PointerMemberExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public PointerMemberExpressionContext pointerMemberExpression(int i) {
			return GetRuleContext<PointerMemberExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Star() { return GetTokens(CPP14Parser.Star); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Star(int i) {
			return GetToken(CPP14Parser.Star, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Div() { return GetTokens(CPP14Parser.Div); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Div(int i) {
			return GetToken(CPP14Parser.Div, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Mod() { return GetTokens(CPP14Parser.Mod); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Mod(int i) {
			return GetToken(CPP14Parser.Mod, i);
		}
		public MultiplicativeExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_multiplicativeExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14ParserListener typedListener = listener as ICPP14ParserListener;
			if (typedListener != null) typedListener.EnterMultiplicativeExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14ParserListener typedListener = listener as ICPP14ParserListener;
			if (typedListener != null) typedListener.ExitMultiplicativeExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICPP14ParserVisitor<TResult> typedVisitor = visitor as ICPP14ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMultiplicativeExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MultiplicativeExpressionContext multiplicativeExpression() {
		MultiplicativeExpressionContext _localctx = new MultiplicativeExpressionContext(Context, State);
		EnterRule(_localctx, 62, RULE_multiplicativeExpression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 720;
			pointerMemberExpression();
			State = 725;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (((((_la - 93)) & ~0x3f) == 0 && ((1L << (_la - 93)) & ((1L << (Star - 93)) | (1L << (Div - 93)) | (1L << (Mod - 93)))) != 0)) {
				{
				{
				State = 721;
				_la = TokenStream.LA(1);
				if ( !(((((_la - 93)) & ~0x3f) == 0 && ((1L << (_la - 93)) & ((1L << (Star - 93)) | (1L << (Div - 93)) | (1L << (Mod - 93)))) != 0)) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 722;
				pointerMemberExpression();
				}
				}
				State = 727;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AdditiveExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public MultiplicativeExpressionContext[] multiplicativeExpression() {
			return GetRuleContexts<MultiplicativeExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public MultiplicativeExpressionContext multiplicativeExpression(int i) {
			return GetRuleContext<MultiplicativeExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Plus() { return GetTokens(CPP14Parser.Plus); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Plus(int i) {
			return GetToken(CPP14Parser.Plus, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Minus() { return GetTokens(CPP14Parser.Minus); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Minus(int i) {
			return GetToken(CPP14Parser.Minus, i);
		}
		public AdditiveExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_additiveExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14ParserListener typedListener = listener as ICPP14ParserListener;
			if (typedListener != null) typedListener.EnterAdditiveExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14ParserListener typedListener = listener as ICPP14ParserListener;
			if (typedListener != null) typedListener.ExitAdditiveExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICPP14ParserVisitor<TResult> typedVisitor = visitor as ICPP14ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAdditiveExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AdditiveExpressionContext additiveExpression() {
		AdditiveExpressionContext _localctx = new AdditiveExpressionContext(Context, State);
		EnterRule(_localctx, 64, RULE_additiveExpression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 728;
			multiplicativeExpression();
			State = 733;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==Plus || _la==Minus) {
				{
				{
				State = 729;
				_la = TokenStream.LA(1);
				if ( !(_la==Plus || _la==Minus) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 730;
				multiplicativeExpression();
				}
				}
				State = 735;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ShiftExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public AdditiveExpressionContext[] additiveExpression() {
			return GetRuleContexts<AdditiveExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AdditiveExpressionContext additiveExpression(int i) {
			return GetRuleContext<AdditiveExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ShiftOperatorContext[] shiftOperator() {
			return GetRuleContexts<ShiftOperatorContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ShiftOperatorContext shiftOperator(int i) {
			return GetRuleContext<ShiftOperatorContext>(i);
		}
		public ShiftExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_shiftExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14ParserListener typedListener = listener as ICPP14ParserListener;
			if (typedListener != null) typedListener.EnterShiftExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14ParserListener typedListener = listener as ICPP14ParserListener;
			if (typedListener != null) typedListener.ExitShiftExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICPP14ParserVisitor<TResult> typedVisitor = visitor as ICPP14ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitShiftExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ShiftExpressionContext shiftExpression() {
		ShiftExpressionContext _localctx = new ShiftExpressionContext(Context, State);
		EnterRule(_localctx, 66, RULE_shiftExpression);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 736;
			additiveExpression();
			State = 742;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,61,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 737;
					shiftOperator();
					State = 738;
					additiveExpression();
					}
					} 
				}
				State = 744;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,61,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ShiftOperatorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Greater() { return GetTokens(CPP14Parser.Greater); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Greater(int i) {
			return GetToken(CPP14Parser.Greater, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Less() { return GetTokens(CPP14Parser.Less); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Less(int i) {
			return GetToken(CPP14Parser.Less, i);
		}
		public ShiftOperatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_shiftOperator; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14ParserListener typedListener = listener as ICPP14ParserListener;
			if (typedListener != null) typedListener.EnterShiftOperator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14ParserListener typedListener = listener as ICPP14ParserListener;
			if (typedListener != null) typedListener.ExitShiftOperator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICPP14ParserVisitor<TResult> typedVisitor = visitor as ICPP14ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitShiftOperator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ShiftOperatorContext shiftOperator() {
		ShiftOperatorContext _localctx = new ShiftOperatorContext(Context, State);
		EnterRule(_localctx, 68, RULE_shiftOperator);
		try {
			State = 749;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case Greater:
				EnterOuterAlt(_localctx, 1);
				{
				State = 745;
				Match(Greater);
				State = 746;
				Match(Greater);
				}
				break;
			case Less:
				EnterOuterAlt(_localctx, 2);
				{
				State = 747;
				Match(Less);
				State = 748;
				Match(Less);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RelationalExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ShiftExpressionContext[] shiftExpression() {
			return GetRuleContexts<ShiftExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ShiftExpressionContext shiftExpression(int i) {
			return GetRuleContext<ShiftExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Less() { return GetTokens(CPP14Parser.Less); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Less(int i) {
			return GetToken(CPP14Parser.Less, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Greater() { return GetTokens(CPP14Parser.Greater); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Greater(int i) {
			return GetToken(CPP14Parser.Greater, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] LessEqual() { return GetTokens(CPP14Parser.LessEqual); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LessEqual(int i) {
			return GetToken(CPP14Parser.LessEqual, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] GreaterEqual() { return GetTokens(CPP14Parser.GreaterEqual); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GreaterEqual(int i) {
			return GetToken(CPP14Parser.GreaterEqual, i);
		}
		public RelationalExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_relationalExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14ParserListener typedListener = listener as ICPP14ParserListener;
			if (typedListener != null) typedListener.EnterRelationalExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14ParserListener typedListener = listener as ICPP14ParserListener;
			if (typedListener != null) typedListener.ExitRelationalExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICPP14ParserVisitor<TResult> typedVisitor = visitor as ICPP14ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRelationalExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RelationalExpressionContext relationalExpression() {
		RelationalExpressionContext _localctx = new RelationalExpressionContext(Context, State);
		EnterRule(_localctx, 70, RULE_relationalExpression);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 751;
			shiftExpression();
			State = 756;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,63,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 752;
					_la = TokenStream.LA(1);
					if ( !(((((_la - 102)) & ~0x3f) == 0 && ((1L << (_la - 102)) & ((1L << (Less - 102)) | (1L << (Greater - 102)) | (1L << (LessEqual - 102)) | (1L << (GreaterEqual - 102)))) != 0)) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					State = 753;
					shiftExpression();
					}
					} 
				}
				State = 758;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,63,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EqualityExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public RelationalExpressionContext[] relationalExpression() {
			return GetRuleContexts<RelationalExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public RelationalExpressionContext relationalExpression(int i) {
			return GetRuleContext<RelationalExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Equal() { return GetTokens(CPP14Parser.Equal); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Equal(int i) {
			return GetToken(CPP14Parser.Equal, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NotEqual() { return GetTokens(CPP14Parser.NotEqual); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NotEqual(int i) {
			return GetToken(CPP14Parser.NotEqual, i);
		}
		public EqualityExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_equalityExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14ParserListener typedListener = listener as ICPP14ParserListener;
			if (typedListener != null) typedListener.EnterEqualityExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14ParserListener typedListener = listener as ICPP14ParserListener;
			if (typedListener != null) typedListener.ExitEqualityExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICPP14ParserVisitor<TResult> typedVisitor = visitor as ICPP14ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEqualityExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EqualityExpressionContext equalityExpression() {
		EqualityExpressionContext _localctx = new EqualityExpressionContext(Context, State);
		EnterRule(_localctx, 72, RULE_equalityExpression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 759;
			relationalExpression();
			State = 764;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==Equal || _la==NotEqual) {
				{
				{
				State = 760;
				_la = TokenStream.LA(1);
				if ( !(_la==Equal || _la==NotEqual) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 761;
				relationalExpression();
				}
				}
				State = 766;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AndExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public EqualityExpressionContext[] equalityExpression() {
			return GetRuleContexts<EqualityExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public EqualityExpressionContext equalityExpression(int i) {
			return GetRuleContext<EqualityExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] And() { return GetTokens(CPP14Parser.And); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode And(int i) {
			return GetToken(CPP14Parser.And, i);
		}
		public AndExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_andExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14ParserListener typedListener = listener as ICPP14ParserListener;
			if (typedListener != null) typedListener.EnterAndExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14ParserListener typedListener = listener as ICPP14ParserListener;
			if (typedListener != null) typedListener.ExitAndExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICPP14ParserVisitor<TResult> typedVisitor = visitor as ICPP14ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAndExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AndExpressionContext andExpression() {
		AndExpressionContext _localctx = new AndExpressionContext(Context, State);
		EnterRule(_localctx, 74, RULE_andExpression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 767;
			equalityExpression();
			State = 772;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==And) {
				{
				{
				State = 768;
				Match(And);
				State = 769;
				equalityExpression();
				}
				}
				State = 774;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExclusiveOrExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public AndExpressionContext[] andExpression() {
			return GetRuleContexts<AndExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AndExpressionContext andExpression(int i) {
			return GetRuleContext<AndExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Caret() { return GetTokens(CPP14Parser.Caret); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Caret(int i) {
			return GetToken(CPP14Parser.Caret, i);
		}
		public ExclusiveOrExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_exclusiveOrExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14ParserListener typedListener = listener as ICPP14ParserListener;
			if (typedListener != null) typedListener.EnterExclusiveOrExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14ParserListener typedListener = listener as ICPP14ParserListener;
			if (typedListener != null) typedListener.ExitExclusiveOrExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICPP14ParserVisitor<TResult> typedVisitor = visitor as ICPP14ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExclusiveOrExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExclusiveOrExpressionContext exclusiveOrExpression() {
		ExclusiveOrExpressionContext _localctx = new ExclusiveOrExpressionContext(Context, State);
		EnterRule(_localctx, 76, RULE_exclusiveOrExpression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 775;
			andExpression();
			State = 780;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==Caret) {
				{
				{
				State = 776;
				Match(Caret);
				State = 777;
				andExpression();
				}
				}
				State = 782;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InclusiveOrExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExclusiveOrExpressionContext[] exclusiveOrExpression() {
			return GetRuleContexts<ExclusiveOrExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExclusiveOrExpressionContext exclusiveOrExpression(int i) {
			return GetRuleContext<ExclusiveOrExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Or() { return GetTokens(CPP14Parser.Or); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Or(int i) {
			return GetToken(CPP14Parser.Or, i);
		}
		public InclusiveOrExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_inclusiveOrExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14ParserListener typedListener = listener as ICPP14ParserListener;
			if (typedListener != null) typedListener.EnterInclusiveOrExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14ParserListener typedListener = listener as ICPP14ParserListener;
			if (typedListener != null) typedListener.ExitInclusiveOrExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICPP14ParserVisitor<TResult> typedVisitor = visitor as ICPP14ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInclusiveOrExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InclusiveOrExpressionContext inclusiveOrExpression() {
		InclusiveOrExpressionContext _localctx = new InclusiveOrExpressionContext(Context, State);
		EnterRule(_localctx, 78, RULE_inclusiveOrExpression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 783;
			exclusiveOrExpression();
			State = 788;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==Or) {
				{
				{
				State = 784;
				Match(Or);
				State = 785;
				exclusiveOrExpression();
				}
				}
				State = 790;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LogicalAndExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public InclusiveOrExpressionContext[] inclusiveOrExpression() {
			return GetRuleContexts<InclusiveOrExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public InclusiveOrExpressionContext inclusiveOrExpression(int i) {
			return GetRuleContext<InclusiveOrExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] AndAnd() { return GetTokens(CPP14Parser.AndAnd); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AndAnd(int i) {
			return GetToken(CPP14Parser.AndAnd, i);
		}
		public LogicalAndExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_logicalAndExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14ParserListener typedListener = listener as ICPP14ParserListener;
			if (typedListener != null) typedListener.EnterLogicalAndExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14ParserListener typedListener = listener as ICPP14ParserListener;
			if (typedListener != null) typedListener.ExitLogicalAndExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICPP14ParserVisitor<TResult> typedVisitor = visitor as ICPP14ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLogicalAndExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LogicalAndExpressionContext logicalAndExpression() {
		LogicalAndExpressionContext _localctx = new LogicalAndExpressionContext(Context, State);
		EnterRule(_localctx, 80, RULE_logicalAndExpression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 791;
			inclusiveOrExpression();
			State = 796;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==AndAnd) {
				{
				{
				State = 792;
				Match(AndAnd);
				State = 793;
				inclusiveOrExpression();
				}
				}
				State = 798;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LogicalOrExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public LogicalAndExpressionContext[] logicalAndExpression() {
			return GetRuleContexts<LogicalAndExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public LogicalAndExpressionContext logicalAndExpression(int i) {
			return GetRuleContext<LogicalAndExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] OrOr() { return GetTokens(CPP14Parser.OrOr); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OrOr(int i) {
			return GetToken(CPP14Parser.OrOr, i);
		}
		public LogicalOrExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_logicalOrExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14ParserListener typedListener = listener as ICPP14ParserListener;
			if (typedListener != null) typedListener.EnterLogicalOrExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14ParserListener typedListener = listener as ICPP14ParserListener;
			if (typedListener != null) typedListener.ExitLogicalOrExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICPP14ParserVisitor<TResult> typedVisitor = visitor as ICPP14ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLogicalOrExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LogicalOrExpressionContext logicalOrExpression() {
		LogicalOrExpressionContext _localctx = new LogicalOrExpressionContext(Context, State);
		EnterRule(_localctx, 82, RULE_logicalOrExpression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 799;
			logicalAndExpression();
			State = 804;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==OrOr) {
				{
				{
				State = 800;
				Match(OrOr);
				State = 801;
				logicalAndExpression();
				}
				}
				State = 806;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConditionalExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public LogicalOrExpressionContext logicalOrExpression() {
			return GetRuleContext<LogicalOrExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Question() { return GetToken(CPP14Parser.Question, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Colon() { return GetToken(CPP14Parser.Colon, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public AssignmentExpressionContext assignmentExpression() {
			return GetRuleContext<AssignmentExpressionContext>(0);
		}
		public ConditionalExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_conditionalExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14ParserListener typedListener = listener as ICPP14ParserListener;
			if (typedListener != null) typedListener.EnterConditionalExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14ParserListener typedListener = listener as ICPP14ParserListener;
			if (typedListener != null) typedListener.ExitConditionalExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICPP14ParserVisitor<TResult> typedVisitor = visitor as ICPP14ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConditionalExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConditionalExpressionContext conditionalExpression() {
		ConditionalExpressionContext _localctx = new ConditionalExpressionContext(Context, State);
		EnterRule(_localctx, 84, RULE_conditionalExpression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 807;
			logicalOrExpression();
			State = 813;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Question) {
				{
				State = 808;
				Match(Question);
				State = 809;
				expression();
				State = 810;
				Match(Colon);
				State = 811;
				assignmentExpression();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssignmentExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ConditionalExpressionContext conditionalExpression() {
			return GetRuleContext<ConditionalExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LogicalOrExpressionContext logicalOrExpression() {
			return GetRuleContext<LogicalOrExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AssignmentOperatorContext assignmentOperator() {
			return GetRuleContext<AssignmentOperatorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public InitializerClauseContext initializerClause() {
			return GetRuleContext<InitializerClauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ThrowExpressionContext throwExpression() {
			return GetRuleContext<ThrowExpressionContext>(0);
		}
		public AssignmentExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assignmentExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14ParserListener typedListener = listener as ICPP14ParserListener;
			if (typedListener != null) typedListener.EnterAssignmentExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14ParserListener typedListener = listener as ICPP14ParserListener;
			if (typedListener != null) typedListener.ExitAssignmentExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICPP14ParserVisitor<TResult> typedVisitor = visitor as ICPP14ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssignmentExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AssignmentExpressionContext assignmentExpression() {
		AssignmentExpressionContext _localctx = new AssignmentExpressionContext(Context, State);
		EnterRule(_localctx, 86, RULE_assignmentExpression);
		try {
			State = 821;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,71,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 815;
				conditionalExpression();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 816;
				logicalOrExpression();
				State = 817;
				assignmentOperator();
				State = 818;
				initializerClause();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 820;
				throwExpression();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssignmentOperatorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Assign() { return GetToken(CPP14Parser.Assign, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode StarAssign() { return GetToken(CPP14Parser.StarAssign, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DivAssign() { return GetToken(CPP14Parser.DivAssign, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ModAssign() { return GetToken(CPP14Parser.ModAssign, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PlusAssign() { return GetToken(CPP14Parser.PlusAssign, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MinusAssign() { return GetToken(CPP14Parser.MinusAssign, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RightShiftAssign() { return GetToken(CPP14Parser.RightShiftAssign, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LeftShiftAssign() { return GetToken(CPP14Parser.LeftShiftAssign, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AndAssign() { return GetToken(CPP14Parser.AndAssign, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode XorAssign() { return GetToken(CPP14Parser.XorAssign, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OrAssign() { return GetToken(CPP14Parser.OrAssign, 0); }
		public AssignmentOperatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assignmentOperator; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14ParserListener typedListener = listener as ICPP14ParserListener;
			if (typedListener != null) typedListener.EnterAssignmentOperator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14ParserListener typedListener = listener as ICPP14ParserListener;
			if (typedListener != null) typedListener.ExitAssignmentOperator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICPP14ParserVisitor<TResult> typedVisitor = visitor as ICPP14ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssignmentOperator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AssignmentOperatorContext assignmentOperator() {
		AssignmentOperatorContext _localctx = new AssignmentOperatorContext(Context, State);
		EnterRule(_localctx, 88, RULE_assignmentOperator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 823;
			_la = TokenStream.LA(1);
			if ( !(((((_la - 101)) & ~0x3f) == 0 && ((1L << (_la - 101)) & ((1L << (Assign - 101)) | (1L << (PlusAssign - 101)) | (1L << (MinusAssign - 101)) | (1L << (StarAssign - 101)) | (1L << (DivAssign - 101)) | (1L << (ModAssign - 101)) | (1L << (XorAssign - 101)) | (1L << (AndAssign - 101)) | (1L << (OrAssign - 101)) | (1L << (LeftShiftAssign - 101)) | (1L << (RightShiftAssign - 101)))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public AssignmentExpressionContext[] assignmentExpression() {
			return GetRuleContexts<AssignmentExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AssignmentExpressionContext assignmentExpression(int i) {
			return GetRuleContext<AssignmentExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Comma() { return GetTokens(CPP14Parser.Comma); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comma(int i) {
			return GetToken(CPP14Parser.Comma, i);
		}
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14ParserListener typedListener = listener as ICPP14ParserListener;
			if (typedListener != null) typedListener.EnterExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14ParserListener typedListener = listener as ICPP14ParserListener;
			if (typedListener != null) typedListener.ExitExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICPP14ParserVisitor<TResult> typedVisitor = visitor as ICPP14ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		ExpressionContext _localctx = new ExpressionContext(Context, State);
		EnterRule(_localctx, 90, RULE_expression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 825;
			assignmentExpression();
			State = 830;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==Comma) {
				{
				{
				State = 826;
				Match(Comma);
				State = 827;
				assignmentExpression();
				}
				}
				State = 832;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConstantExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ConditionalExpressionContext conditionalExpression() {
			return GetRuleContext<ConditionalExpressionContext>(0);
		}
		public ConstantExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constantExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14ParserListener typedListener = listener as ICPP14ParserListener;
			if (typedListener != null) typedListener.EnterConstantExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14ParserListener typedListener = listener as ICPP14ParserListener;
			if (typedListener != null) typedListener.ExitConstantExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICPP14ParserVisitor<TResult> typedVisitor = visitor as ICPP14ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConstantExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConstantExpressionContext constantExpression() {
		ConstantExpressionContext _localctx = new ConstantExpressionContext(Context, State);
		EnterRule(_localctx, 92, RULE_constantExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 833;
			conditionalExpression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public LabeledStatementContext labeledStatement() {
			return GetRuleContext<LabeledStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DeclarationStatementContext declarationStatement() {
			return GetRuleContext<DeclarationStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionStatementContext expressionStatement() {
			return GetRuleContext<ExpressionStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CompoundStatementContext compoundStatement() {
			return GetRuleContext<CompoundStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SelectionStatementContext selectionStatement() {
			return GetRuleContext<SelectionStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IterationStatementContext iterationStatement() {
			return GetRuleContext<IterationStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public JumpStatementContext jumpStatement() {
			return GetRuleContext<JumpStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TryBlockContext tryBlock() {
			return GetRuleContext<TryBlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AttributeSpecifierSeqContext attributeSpecifierSeq() {
			return GetRuleContext<AttributeSpecifierSeqContext>(0);
		}
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14ParserListener typedListener = listener as ICPP14ParserListener;
			if (typedListener != null) typedListener.EnterStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14ParserListener typedListener = listener as ICPP14ParserListener;
			if (typedListener != null) typedListener.ExitStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICPP14ParserVisitor<TResult> typedVisitor = visitor as ICPP14ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		StatementContext _localctx = new StatementContext(Context, State);
		EnterRule(_localctx, 94, RULE_statement);
		try {
			State = 848;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,75,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 835;
				labeledStatement();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 836;
				declarationStatement();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 838;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,73,Context) ) {
				case 1:
					{
					State = 837;
					attributeSpecifierSeq();
					}
					break;
				}
				State = 846;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case IntegerLiteral:
				case CharacterLiteral:
				case FloatingLiteral:
				case StringLiteral:
				case BooleanLiteral:
				case PointerLiteral:
				case UserDefinedLiteral:
				case Alignof:
				case Auto:
				case Bool:
				case Char:
				case Char16:
				case Char32:
				case Const_cast:
				case Decltype:
				case Delete:
				case Double:
				case Dynamic_cast:
				case Float:
				case Int:
				case Long:
				case New:
				case Noexcept:
				case Operator:
				case Reinterpret_cast:
				case Short:
				case Signed:
				case Sizeof:
				case Static_cast:
				case This:
				case Throw:
				case Typeid_:
				case Typename_:
				case Unsigned:
				case Void:
				case Wchar:
				case LeftParen:
				case LeftBracket:
				case Plus:
				case Minus:
				case Star:
				case And:
				case Or:
				case Tilde:
				case Not:
				case PlusPlus:
				case MinusMinus:
				case Doublecolon:
				case Semi:
				case Identifier:
					{
					State = 840;
					expressionStatement();
					}
					break;
				case LeftBrace:
					{
					State = 841;
					compoundStatement();
					}
					break;
				case If:
				case Switch:
					{
					State = 842;
					selectionStatement();
					}
					break;
				case Do:
				case For:
				case While:
					{
					State = 843;
					iterationStatement();
					}
					break;
				case Break:
				case Continue:
				case Goto:
				case Return:
					{
					State = 844;
					jumpStatement();
					}
					break;
				case Try:
					{
					State = 845;
					tryBlock();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LabeledStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Colon() { return GetToken(CPP14Parser.Colon, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(CPP14Parser.Identifier, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Case() { return GetToken(CPP14Parser.Case, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ConstantExpressionContext constantExpression() {
			return GetRuleContext<ConstantExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Default() { return GetToken(CPP14Parser.Default, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public AttributeSpecifierSeqContext attributeSpecifierSeq() {
			return GetRuleContext<AttributeSpecifierSeqContext>(0);
		}
		public LabeledStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_labeledStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14ParserListener typedListener = listener as ICPP14ParserListener;
			if (typedListener != null) typedListener.EnterLabeledStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14ParserListener typedListener = listener as ICPP14ParserListener;
			if (typedListener != null) typedListener.ExitLabeledStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICPP14ParserVisitor<TResult> typedVisitor = visitor as ICPP14ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLabeledStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LabeledStatementContext labeledStatement() {
		LabeledStatementContext _localctx = new LabeledStatementContext(Context, State);
		EnterRule(_localctx, 96, RULE_labeledStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 851;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Alignas || _la==LeftBracket) {
				{
				State = 850;
				attributeSpecifierSeq();
				}
			}

			State = 857;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case Identifier:
				{
				State = 853;
				Match(Identifier);
				}
				break;
			case Case:
				{
				State = 854;
				Match(Case);
				State = 855;
				constantExpression();
				}
				break;
			case Default:
				{
				State = 856;
				Match(Default);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 859;
			Match(Colon);
			State = 860;
			statement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Semi() { return GetToken(CPP14Parser.Semi, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ExpressionStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expressionStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14ParserListener typedListener = listener as ICPP14ParserListener;
			if (typedListener != null) typedListener.EnterExpressionStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14ParserListener typedListener = listener as ICPP14ParserListener;
			if (typedListener != null) typedListener.ExitExpressionStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICPP14ParserVisitor<TResult> typedVisitor = visitor as ICPP14ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpressionStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionStatementContext expressionStatement() {
		ExpressionStatementContext _localctx = new ExpressionStatementContext(Context, State);
		EnterRule(_localctx, 98, RULE_expressionStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 863;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << IntegerLiteral) | (1L << CharacterLiteral) | (1L << FloatingLiteral) | (1L << StringLiteral) | (1L << BooleanLiteral) | (1L << PointerLiteral) | (1L << UserDefinedLiteral) | (1L << Alignof) | (1L << Auto) | (1L << Bool) | (1L << Char) | (1L << Char16) | (1L << Char32) | (1L << Const_cast) | (1L << Decltype) | (1L << Delete) | (1L << Double) | (1L << Dynamic_cast) | (1L << Float) | (1L << Int) | (1L << Long) | (1L << New) | (1L << Noexcept) | (1L << Operator) | (1L << Reinterpret_cast) | (1L << Short) | (1L << Signed) | (1L << Sizeof))) != 0) || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & ((1L << (Static_cast - 65)) | (1L << (This - 65)) | (1L << (Throw - 65)) | (1L << (Typeid_ - 65)) | (1L << (Typename_ - 65)) | (1L << (Unsigned - 65)) | (1L << (Void - 65)) | (1L << (Wchar - 65)) | (1L << (LeftParen - 65)) | (1L << (LeftBracket - 65)) | (1L << (Plus - 65)) | (1L << (Minus - 65)) | (1L << (Star - 65)) | (1L << (And - 65)) | (1L << (Or - 65)) | (1L << (Tilde - 65)) | (1L << (Not - 65)) | (1L << (PlusPlus - 65)) | (1L << (MinusMinus - 65)) | (1L << (Doublecolon - 65)))) != 0) || _la==Identifier) {
				{
				State = 862;
				expression();
				}
			}

			State = 865;
			Match(Semi);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CompoundStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LeftBrace() { return GetToken(CPP14Parser.LeftBrace, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RightBrace() { return GetToken(CPP14Parser.RightBrace, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementSeqContext statementSeq() {
			return GetRuleContext<StatementSeqContext>(0);
		}
		public CompoundStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_compoundStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14ParserListener typedListener = listener as ICPP14ParserListener;
			if (typedListener != null) typedListener.EnterCompoundStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14ParserListener typedListener = listener as ICPP14ParserListener;
			if (typedListener != null) typedListener.ExitCompoundStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICPP14ParserVisitor<TResult> typedVisitor = visitor as ICPP14ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCompoundStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CompoundStatementContext compoundStatement() {
		CompoundStatementContext _localctx = new CompoundStatementContext(Context, State);
		EnterRule(_localctx, 100, RULE_compoundStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 867;
			Match(LeftBrace);
			State = 869;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << IntegerLiteral) | (1L << CharacterLiteral) | (1L << FloatingLiteral) | (1L << StringLiteral) | (1L << BooleanLiteral) | (1L << PointerLiteral) | (1L << UserDefinedLiteral) | (1L << Alignas) | (1L << Alignof) | (1L << Asm) | (1L << Auto) | (1L << Bool) | (1L << Break) | (1L << Case) | (1L << Char) | (1L << Char16) | (1L << Char32) | (1L << Class) | (1L << Const) | (1L << Constexpr) | (1L << Const_cast) | (1L << Continue) | (1L << Decltype) | (1L << Default) | (1L << Delete) | (1L << Do) | (1L << Double) | (1L << Dynamic_cast) | (1L << Enum) | (1L << Explicit) | (1L << Extern) | (1L << Float) | (1L << For) | (1L << Friend) | (1L << Goto) | (1L << If) | (1L << Inline) | (1L << Int) | (1L << Long) | (1L << Mutable) | (1L << Namespace) | (1L << New) | (1L << Noexcept) | (1L << Operator) | (1L << Register) | (1L << Reinterpret_cast) | (1L << Return) | (1L << Short) | (1L << Signed) | (1L << Sizeof) | (1L << Static))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (Static_assert - 64)) | (1L << (Static_cast - 64)) | (1L << (Struct - 64)) | (1L << (Switch - 64)) | (1L << (This - 64)) | (1L << (Thread_local - 64)) | (1L << (Throw - 64)) | (1L << (Try - 64)) | (1L << (Typedef - 64)) | (1L << (Typeid_ - 64)) | (1L << (Typename_ - 64)) | (1L << (Union - 64)) | (1L << (Unsigned - 64)) | (1L << (Using - 64)) | (1L << (Virtual - 64)) | (1L << (Void - 64)) | (1L << (Volatile - 64)) | (1L << (Wchar - 64)) | (1L << (While - 64)) | (1L << (LeftParen - 64)) | (1L << (LeftBracket - 64)) | (1L << (LeftBrace - 64)) | (1L << (Plus - 64)) | (1L << (Minus - 64)) | (1L << (Star - 64)) | (1L << (And - 64)) | (1L << (Or - 64)) | (1L << (Tilde - 64)) | (1L << (Not - 64)) | (1L << (AndAnd - 64)) | (1L << (PlusPlus - 64)) | (1L << (MinusMinus - 64)) | (1L << (Doublecolon - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (Semi - 128)) | (1L << (Ellipsis - 128)) | (1L << (Identifier - 128)))) != 0)) {
				{
				State = 868;
				statementSeq();
				}
			}

			State = 871;
			Match(RightBrace);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementSeqContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public StatementSeqContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statementSeq; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14ParserListener typedListener = listener as ICPP14ParserListener;
			if (typedListener != null) typedListener.EnterStatementSeq(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14ParserListener typedListener = listener as ICPP14ParserListener;
			if (typedListener != null) typedListener.ExitStatementSeq(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICPP14ParserVisitor<TResult> typedVisitor = visitor as ICPP14ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatementSeq(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementSeqContext statementSeq() {
		StatementSeqContext _localctx = new StatementSeqContext(Context, State);
		EnterRule(_localctx, 102, RULE_statementSeq);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 874;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 873;
				statement();
				}
				}
				State = 876;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << IntegerLiteral) | (1L << CharacterLiteral) | (1L << FloatingLiteral) | (1L << StringLiteral) | (1L << BooleanLiteral) | (1L << PointerLiteral) | (1L << UserDefinedLiteral) | (1L << Alignas) | (1L << Alignof) | (1L << Asm) | (1L << Auto) | (1L << Bool) | (1L << Break) | (1L << Case) | (1L << Char) | (1L << Char16) | (1L << Char32) | (1L << Class) | (1L << Const) | (1L << Constexpr) | (1L << Const_cast) | (1L << Continue) | (1L << Decltype) | (1L << Default) | (1L << Delete) | (1L << Do) | (1L << Double) | (1L << Dynamic_cast) | (1L << Enum) | (1L << Explicit) | (1L << Extern) | (1L << Float) | (1L << For) | (1L << Friend) | (1L << Goto) | (1L << If) | (1L << Inline) | (1L << Int) | (1L << Long) | (1L << Mutable) | (1L << Namespace) | (1L << New) | (1L << Noexcept) | (1L << Operator) | (1L << Register) | (1L << Reinterpret_cast) | (1L << Return) | (1L << Short) | (1L << Signed) | (1L << Sizeof) | (1L << Static))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (Static_assert - 64)) | (1L << (Static_cast - 64)) | (1L << (Struct - 64)) | (1L << (Switch - 64)) | (1L << (This - 64)) | (1L << (Thread_local - 64)) | (1L << (Throw - 64)) | (1L << (Try - 64)) | (1L << (Typedef - 64)) | (1L << (Typeid_ - 64)) | (1L << (Typename_ - 64)) | (1L << (Union - 64)) | (1L << (Unsigned - 64)) | (1L << (Using - 64)) | (1L << (Virtual - 64)) | (1L << (Void - 64)) | (1L << (Volatile - 64)) | (1L << (Wchar - 64)) | (1L << (While - 64)) | (1L << (LeftParen - 64)) | (1L << (LeftBracket - 64)) | (1L << (LeftBrace - 64)) | (1L << (Plus - 64)) | (1L << (Minus - 64)) | (1L << (Star - 64)) | (1L << (And - 64)) | (1L << (Or - 64)) | (1L << (Tilde - 64)) | (1L << (Not - 64)) | (1L << (AndAnd - 64)) | (1L << (PlusPlus - 64)) | (1L << (MinusMinus - 64)) | (1L << (Doublecolon - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (Semi - 128)) | (1L << (Ellipsis - 128)) | (1L << (Identifier - 128)))) != 0) );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SelectionStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode If() { return GetToken(CPP14Parser.If, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LeftParen() { return GetToken(CPP14Parser.LeftParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ConditionContext condition() {
			return GetRuleContext<ConditionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RightParen() { return GetToken(CPP14Parser.RightParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Else() { return GetToken(CPP14Parser.Else, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Switch() { return GetToken(CPP14Parser.Switch, 0); }
		public SelectionStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_selectionStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14ParserListener typedListener = listener as ICPP14ParserListener;
			if (typedListener != null) typedListener.EnterSelectionStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14ParserListener typedListener = listener as ICPP14ParserListener;
			if (typedListener != null) typedListener.ExitSelectionStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICPP14ParserVisitor<TResult> typedVisitor = visitor as ICPP14ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSelectionStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SelectionStatementContext selectionStatement() {
		SelectionStatementContext _localctx = new SelectionStatementContext(Context, State);
		EnterRule(_localctx, 104, RULE_selectionStatement);
		try {
			State = 893;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case If:
				EnterOuterAlt(_localctx, 1);
				{
				State = 878;
				Match(If);
				State = 879;
				Match(LeftParen);
				State = 880;
				condition();
				State = 881;
				Match(RightParen);
				State = 882;
				statement();
				State = 885;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,81,Context) ) {
				case 1:
					{
					State = 883;
					Match(Else);
					State = 884;
					statement();
					}
					break;
				}
				}
				break;
			case Switch:
				EnterOuterAlt(_localctx, 2);
				{
				State = 887;
				Match(Switch);
				State = 888;
				Match(LeftParen);
				State = 889;
				condition();
				State = 890;
				Match(RightParen);
				State = 891;
				statement();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConditionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DeclSpecifierSeqContext declSpecifierSeq() {
			return GetRuleContext<DeclSpecifierSeqContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DeclaratorContext declarator() {
			return GetRuleContext<DeclaratorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Assign() { return GetToken(CPP14Parser.Assign, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public InitializerClauseContext initializerClause() {
			return GetRuleContext<InitializerClauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BracedInitListContext bracedInitList() {
			return GetRuleContext<BracedInitListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AttributeSpecifierSeqContext attributeSpecifierSeq() {
			return GetRuleContext<AttributeSpecifierSeqContext>(0);
		}
		public ConditionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_condition; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14ParserListener typedListener = listener as ICPP14ParserListener;
			if (typedListener != null) typedListener.EnterCondition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14ParserListener typedListener = listener as ICPP14ParserListener;
			if (typedListener != null) typedListener.ExitCondition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICPP14ParserVisitor<TResult> typedVisitor = visitor as ICPP14ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCondition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConditionContext condition() {
		ConditionContext _localctx = new ConditionContext(Context, State);
		EnterRule(_localctx, 106, RULE_condition);
		int _la;
		try {
			State = 906;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,85,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 895;
				expression();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 897;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==Alignas || _la==LeftBracket) {
					{
					State = 896;
					attributeSpecifierSeq();
					}
				}

				State = 899;
				declSpecifierSeq();
				State = 900;
				declarator();
				State = 904;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case Assign:
					{
					State = 901;
					Match(Assign);
					State = 902;
					initializerClause();
					}
					break;
				case LeftBrace:
					{
					State = 903;
					bracedInitList();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IterationStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode While() { return GetToken(CPP14Parser.While, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LeftParen() { return GetToken(CPP14Parser.LeftParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ConditionContext condition() {
			return GetRuleContext<ConditionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RightParen() { return GetToken(CPP14Parser.RightParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Do() { return GetToken(CPP14Parser.Do, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Semi() { return GetToken(CPP14Parser.Semi, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode For() { return GetToken(CPP14Parser.For, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ForInitStatementContext forInitStatement() {
			return GetRuleContext<ForInitStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ForRangeDeclarationContext forRangeDeclaration() {
			return GetRuleContext<ForRangeDeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Colon() { return GetToken(CPP14Parser.Colon, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ForRangeInitializerContext forRangeInitializer() {
			return GetRuleContext<ForRangeInitializerContext>(0);
		}
		public IterationStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_iterationStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14ParserListener typedListener = listener as ICPP14ParserListener;
			if (typedListener != null) typedListener.EnterIterationStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14ParserListener typedListener = listener as ICPP14ParserListener;
			if (typedListener != null) typedListener.ExitIterationStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICPP14ParserVisitor<TResult> typedVisitor = visitor as ICPP14ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIterationStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IterationStatementContext iterationStatement() {
		IterationStatementContext _localctx = new IterationStatementContext(Context, State);
		EnterRule(_localctx, 108, RULE_iterationStatement);
		int _la;
		try {
			State = 941;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case While:
				EnterOuterAlt(_localctx, 1);
				{
				State = 908;
				Match(While);
				State = 909;
				Match(LeftParen);
				State = 910;
				condition();
				State = 911;
				Match(RightParen);
				State = 912;
				statement();
				}
				break;
			case Do:
				EnterOuterAlt(_localctx, 2);
				{
				State = 914;
				Match(Do);
				State = 915;
				statement();
				State = 916;
				Match(While);
				State = 917;
				Match(LeftParen);
				State = 918;
				expression();
				State = 919;
				Match(RightParen);
				State = 920;
				Match(Semi);
				}
				break;
			case For:
				EnterOuterAlt(_localctx, 3);
				{
				State = 922;
				Match(For);
				State = 923;
				Match(LeftParen);
				State = 936;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,88,Context) ) {
				case 1:
					{
					State = 924;
					forInitStatement();
					State = 926;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << IntegerLiteral) | (1L << CharacterLiteral) | (1L << FloatingLiteral) | (1L << StringLiteral) | (1L << BooleanLiteral) | (1L << PointerLiteral) | (1L << UserDefinedLiteral) | (1L << Alignas) | (1L << Alignof) | (1L << Auto) | (1L << Bool) | (1L << Char) | (1L << Char16) | (1L << Char32) | (1L << Class) | (1L << Const) | (1L << Constexpr) | (1L << Const_cast) | (1L << Decltype) | (1L << Delete) | (1L << Double) | (1L << Dynamic_cast) | (1L << Enum) | (1L << Explicit) | (1L << Extern) | (1L << Float) | (1L << Friend) | (1L << Inline) | (1L << Int) | (1L << Long) | (1L << Mutable) | (1L << New) | (1L << Noexcept) | (1L << Operator) | (1L << Register) | (1L << Reinterpret_cast) | (1L << Short) | (1L << Signed) | (1L << Sizeof) | (1L << Static))) != 0) || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & ((1L << (Static_cast - 65)) | (1L << (Struct - 65)) | (1L << (This - 65)) | (1L << (Thread_local - 65)) | (1L << (Throw - 65)) | (1L << (Typedef - 65)) | (1L << (Typeid_ - 65)) | (1L << (Typename_ - 65)) | (1L << (Union - 65)) | (1L << (Unsigned - 65)) | (1L << (Virtual - 65)) | (1L << (Void - 65)) | (1L << (Volatile - 65)) | (1L << (Wchar - 65)) | (1L << (LeftParen - 65)) | (1L << (LeftBracket - 65)) | (1L << (Plus - 65)) | (1L << (Minus - 65)) | (1L << (Star - 65)) | (1L << (And - 65)) | (1L << (Or - 65)) | (1L << (Tilde - 65)) | (1L << (Not - 65)) | (1L << (PlusPlus - 65)) | (1L << (MinusMinus - 65)) | (1L << (Doublecolon - 65)))) != 0) || _la==Identifier) {
						{
						State = 925;
						condition();
						}
					}

					State = 928;
					Match(Semi);
					State = 930;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << IntegerLiteral) | (1L << CharacterLiteral) | (1L << FloatingLiteral) | (1L << StringLiteral) | (1L << BooleanLiteral) | (1L << PointerLiteral) | (1L << UserDefinedLiteral) | (1L << Alignof) | (1L << Auto) | (1L << Bool) | (1L << Char) | (1L << Char16) | (1L << Char32) | (1L << Const_cast) | (1L << Decltype) | (1L << Delete) | (1L << Double) | (1L << Dynamic_cast) | (1L << Float) | (1L << Int) | (1L << Long) | (1L << New) | (1L << Noexcept) | (1L << Operator) | (1L << Reinterpret_cast) | (1L << Short) | (1L << Signed) | (1L << Sizeof))) != 0) || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & ((1L << (Static_cast - 65)) | (1L << (This - 65)) | (1L << (Throw - 65)) | (1L << (Typeid_ - 65)) | (1L << (Typename_ - 65)) | (1L << (Unsigned - 65)) | (1L << (Void - 65)) | (1L << (Wchar - 65)) | (1L << (LeftParen - 65)) | (1L << (LeftBracket - 65)) | (1L << (Plus - 65)) | (1L << (Minus - 65)) | (1L << (Star - 65)) | (1L << (And - 65)) | (1L << (Or - 65)) | (1L << (Tilde - 65)) | (1L << (Not - 65)) | (1L << (PlusPlus - 65)) | (1L << (MinusMinus - 65)) | (1L << (Doublecolon - 65)))) != 0) || _la==Identifier) {
						{
						State = 929;
						expression();
						}
					}

					}
					break;
				case 2:
					{
					State = 932;
					forRangeDeclaration();
					State = 933;
					Match(Colon);
					State = 934;
					forRangeInitializer();
					}
					break;
				}
				State = 938;
				Match(RightParen);
				State = 939;
				statement();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ForInitStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionStatementContext expressionStatement() {
			return GetRuleContext<ExpressionStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SimpleDeclarationContext simpleDeclaration() {
			return GetRuleContext<SimpleDeclarationContext>(0);
		}
		public ForInitStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_forInitStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14ParserListener typedListener = listener as ICPP14ParserListener;
			if (typedListener != null) typedListener.EnterForInitStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14ParserListener typedListener = listener as ICPP14ParserListener;
			if (typedListener != null) typedListener.ExitForInitStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICPP14ParserVisitor<TResult> typedVisitor = visitor as ICPP14ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForInitStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ForInitStatementContext forInitStatement() {
		ForInitStatementContext _localctx = new ForInitStatementContext(Context, State);
		EnterRule(_localctx, 110, RULE_forInitStatement);
		try {
			State = 945;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,90,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 943;
				expressionStatement();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 944;
				simpleDeclaration();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ForRangeDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public DeclSpecifierSeqContext declSpecifierSeq() {
			return GetRuleContext<DeclSpecifierSeqContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DeclaratorContext declarator() {
			return GetRuleContext<DeclaratorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AttributeSpecifierSeqContext attributeSpecifierSeq() {
			return GetRuleContext<AttributeSpecifierSeqContext>(0);
		}
		public ForRangeDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_forRangeDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14ParserListener typedListener = listener as ICPP14ParserListener;
			if (typedListener != null) typedListener.EnterForRangeDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14ParserListener typedListener = listener as ICPP14ParserListener;
			if (typedListener != null) typedListener.ExitForRangeDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICPP14ParserVisitor<TResult> typedVisitor = visitor as ICPP14ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForRangeDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ForRangeDeclarationContext forRangeDeclaration() {
		ForRangeDeclarationContext _localctx = new ForRangeDeclarationContext(Context, State);
		EnterRule(_localctx, 112, RULE_forRangeDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 948;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Alignas || _la==LeftBracket) {
				{
				State = 947;
				attributeSpecifierSeq();
				}
			}

			State = 950;
			declSpecifierSeq();
			State = 951;
			declarator();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ForRangeInitializerContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BracedInitListContext bracedInitList() {
			return GetRuleContext<BracedInitListContext>(0);
		}
		public ForRangeInitializerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_forRangeInitializer; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14ParserListener typedListener = listener as ICPP14ParserListener;
			if (typedListener != null) typedListener.EnterForRangeInitializer(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14ParserListener typedListener = listener as ICPP14ParserListener;
			if (typedListener != null) typedListener.ExitForRangeInitializer(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICPP14ParserVisitor<TResult> typedVisitor = visitor as ICPP14ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForRangeInitializer(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ForRangeInitializerContext forRangeInitializer() {
		ForRangeInitializerContext _localctx = new ForRangeInitializerContext(Context, State);
		EnterRule(_localctx, 114, RULE_forRangeInitializer);
		try {
			State = 955;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case IntegerLiteral:
			case CharacterLiteral:
			case FloatingLiteral:
			case StringLiteral:
			case BooleanLiteral:
			case PointerLiteral:
			case UserDefinedLiteral:
			case Alignof:
			case Auto:
			case Bool:
			case Char:
			case Char16:
			case Char32:
			case Const_cast:
			case Decltype:
			case Delete:
			case Double:
			case Dynamic_cast:
			case Float:
			case Int:
			case Long:
			case New:
			case Noexcept:
			case Operator:
			case Reinterpret_cast:
			case Short:
			case Signed:
			case Sizeof:
			case Static_cast:
			case This:
			case Throw:
			case Typeid_:
			case Typename_:
			case Unsigned:
			case Void:
			case Wchar:
			case LeftParen:
			case LeftBracket:
			case Plus:
			case Minus:
			case Star:
			case And:
			case Or:
			case Tilde:
			case Not:
			case PlusPlus:
			case MinusMinus:
			case Doublecolon:
			case Identifier:
				EnterOuterAlt(_localctx, 1);
				{
				State = 953;
				expression();
				}
				break;
			case LeftBrace:
				EnterOuterAlt(_localctx, 2);
				{
				State = 954;
				bracedInitList();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class JumpStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Semi() { return GetToken(CPP14Parser.Semi, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Break() { return GetToken(CPP14Parser.Break, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Continue() { return GetToken(CPP14Parser.Continue, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Return() { return GetToken(CPP14Parser.Return, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Goto() { return GetToken(CPP14Parser.Goto, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(CPP14Parser.Identifier, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BracedInitListContext bracedInitList() {
			return GetRuleContext<BracedInitListContext>(0);
		}
		public JumpStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_jumpStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14ParserListener typedListener = listener as ICPP14ParserListener;
			if (typedListener != null) typedListener.EnterJumpStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14ParserListener typedListener = listener as ICPP14ParserListener;
			if (typedListener != null) typedListener.ExitJumpStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICPP14ParserVisitor<TResult> typedVisitor = visitor as ICPP14ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitJumpStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public JumpStatementContext jumpStatement() {
		JumpStatementContext _localctx = new JumpStatementContext(Context, State);
		EnterRule(_localctx, 116, RULE_jumpStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 966;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case Break:
				{
				State = 957;
				Match(Break);
				}
				break;
			case Continue:
				{
				State = 958;
				Match(Continue);
				}
				break;
			case Return:
				{
				State = 959;
				Match(Return);
				State = 962;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case IntegerLiteral:
				case CharacterLiteral:
				case FloatingLiteral:
				case StringLiteral:
				case BooleanLiteral:
				case PointerLiteral:
				case UserDefinedLiteral:
				case Alignof:
				case Auto:
				case Bool:
				case Char:
				case Char16:
				case Char32:
				case Const_cast:
				case Decltype:
				case Delete:
				case Double:
				case Dynamic_cast:
				case Float:
				case Int:
				case Long:
				case New:
				case Noexcept:
				case Operator:
				case Reinterpret_cast:
				case Short:
				case Signed:
				case Sizeof:
				case Static_cast:
				case This:
				case Throw:
				case Typeid_:
				case Typename_:
				case Unsigned:
				case Void:
				case Wchar:
				case LeftParen:
				case LeftBracket:
				case Plus:
				case Minus:
				case Star:
				case And:
				case Or:
				case Tilde:
				case Not:
				case PlusPlus:
				case MinusMinus:
				case Doublecolon:
				case Identifier:
					{
					State = 960;
					expression();
					}
					break;
				case LeftBrace:
					{
					State = 961;
					bracedInitList();
					}
					break;
				case Semi:
					break;
				default:
					break;
				}
				}
				break;
			case Goto:
				{
				State = 964;
				Match(Goto);
				State = 965;
				Match(Identifier);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 968;
			Match(Semi);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeclarationStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public BlockDeclarationContext blockDeclaration() {
			return GetRuleContext<BlockDeclarationContext>(0);
		}
		public DeclarationStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_declarationStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14ParserListener typedListener = listener as ICPP14ParserListener;
			if (typedListener != null) typedListener.EnterDeclarationStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14ParserListener typedListener = listener as ICPP14ParserListener;
			if (typedListener != null) typedListener.ExitDeclarationStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICPP14ParserVisitor<TResult> typedVisitor = visitor as ICPP14ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeclarationStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DeclarationStatementContext declarationStatement() {
		DeclarationStatementContext _localctx = new DeclarationStatementContext(Context, State);
		EnterRule(_localctx, 118, RULE_declarationStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 970;
			blockDeclaration();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeclarationseqContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public DeclarationContext[] declaration() {
			return GetRuleContexts<DeclarationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public DeclarationContext declaration(int i) {
			return GetRuleContext<DeclarationContext>(i);
		}
		public DeclarationseqContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_declarationseq; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14ParserListener typedListener = listener as ICPP14ParserListener;
			if (typedListener != null) typedListener.EnterDeclarationseq(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14ParserListener typedListener = listener as ICPP14ParserListener;
			if (typedListener != null) typedListener.ExitDeclarationseq(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICPP14ParserVisitor<TResult> typedVisitor = visitor as ICPP14ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeclarationseq(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DeclarationseqContext declarationseq() {
		DeclarationseqContext _localctx = new DeclarationseqContext(Context, State);
		EnterRule(_localctx, 120, RULE_declarationseq);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 973;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 972;
				declaration();
				}
				}
				State = 975;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( ((((_la - 10)) & ~0x3f) == 0 && ((1L << (_la - 10)) & ((1L << (Alignas - 10)) | (1L << (Asm - 10)) | (1L << (Auto - 10)) | (1L << (Bool - 10)) | (1L << (Char - 10)) | (1L << (Char16 - 10)) | (1L << (Char32 - 10)) | (1L << (Class - 10)) | (1L << (Const - 10)) | (1L << (Constexpr - 10)) | (1L << (Decltype - 10)) | (1L << (Double - 10)) | (1L << (Enum - 10)) | (1L << (Explicit - 10)) | (1L << (Extern - 10)) | (1L << (Float - 10)) | (1L << (Friend - 10)) | (1L << (Inline - 10)) | (1L << (Int - 10)) | (1L << (Long - 10)) | (1L << (Mutable - 10)) | (1L << (Namespace - 10)) | (1L << (Operator - 10)) | (1L << (Register - 10)) | (1L << (Short - 10)) | (1L << (Signed - 10)) | (1L << (Static - 10)) | (1L << (Static_assert - 10)) | (1L << (Struct - 10)) | (1L << (Template - 10)) | (1L << (Thread_local - 10)))) != 0) || ((((_la - 74)) & ~0x3f) == 0 && ((1L << (_la - 74)) & ((1L << (Typedef - 74)) | (1L << (Typename_ - 74)) | (1L << (Union - 74)) | (1L << (Unsigned - 74)) | (1L << (Using - 74)) | (1L << (Virtual - 74)) | (1L << (Void - 74)) | (1L << (Volatile - 74)) | (1L << (Wchar - 74)) | (1L << (LeftParen - 74)) | (1L << (LeftBracket - 74)) | (1L << (Star - 74)) | (1L << (And - 74)) | (1L << (Tilde - 74)) | (1L << (AndAnd - 74)) | (1L << (Doublecolon - 74)) | (1L << (Semi - 74)) | (1L << (Ellipsis - 74)) | (1L << (Identifier - 74)))) != 0) );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public BlockDeclarationContext blockDeclaration() {
			return GetRuleContext<BlockDeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionDefinitionContext functionDefinition() {
			return GetRuleContext<FunctionDefinitionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TemplateDeclarationContext templateDeclaration() {
			return GetRuleContext<TemplateDeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExplicitInstantiationContext explicitInstantiation() {
			return GetRuleContext<ExplicitInstantiationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExplicitSpecializationContext explicitSpecialization() {
			return GetRuleContext<ExplicitSpecializationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LinkageSpecificationContext linkageSpecification() {
			return GetRuleContext<LinkageSpecificationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NamespaceDefinitionContext namespaceDefinition() {
			return GetRuleContext<NamespaceDefinitionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public EmptyDeclarationContext emptyDeclaration() {
			return GetRuleContext<EmptyDeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AttributeDeclarationContext attributeDeclaration() {
			return GetRuleContext<AttributeDeclarationContext>(0);
		}
		public DeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_declaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14ParserListener typedListener = listener as ICPP14ParserListener;
			if (typedListener != null) typedListener.EnterDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14ParserListener typedListener = listener as ICPP14ParserListener;
			if (typedListener != null) typedListener.ExitDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICPP14ParserVisitor<TResult> typedVisitor = visitor as ICPP14ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DeclarationContext declaration() {
		DeclarationContext _localctx = new DeclarationContext(Context, State);
		EnterRule(_localctx, 122, RULE_declaration);
		try {
			State = 986;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,96,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 977;
				blockDeclaration();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 978;
				functionDefinition();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 979;
				templateDeclaration();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 980;
				explicitInstantiation();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 981;
				explicitSpecialization();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 982;
				linkageSpecification();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 983;
				namespaceDefinition();
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 984;
				emptyDeclaration();
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 985;
				attributeDeclaration();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlockDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SimpleDeclarationContext simpleDeclaration() {
			return GetRuleContext<SimpleDeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AsmDefinitionContext asmDefinition() {
			return GetRuleContext<AsmDefinitionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NamespaceAliasDefinitionContext namespaceAliasDefinition() {
			return GetRuleContext<NamespaceAliasDefinitionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public UsingDeclarationContext usingDeclaration() {
			return GetRuleContext<UsingDeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public UsingDirectiveContext usingDirective() {
			return GetRuleContext<UsingDirectiveContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StaticAssertDeclarationContext staticAssertDeclaration() {
			return GetRuleContext<StaticAssertDeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AliasDeclarationContext aliasDeclaration() {
			return GetRuleContext<AliasDeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public OpaqueEnumDeclarationContext opaqueEnumDeclaration() {
			return GetRuleContext<OpaqueEnumDeclarationContext>(0);
		}
		public BlockDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_blockDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14ParserListener typedListener = listener as ICPP14ParserListener;
			if (typedListener != null) typedListener.EnterBlockDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14ParserListener typedListener = listener as ICPP14ParserListener;
			if (typedListener != null) typedListener.ExitBlockDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICPP14ParserVisitor<TResult> typedVisitor = visitor as ICPP14ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBlockDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BlockDeclarationContext blockDeclaration() {
		BlockDeclarationContext _localctx = new BlockDeclarationContext(Context, State);
		EnterRule(_localctx, 124, RULE_blockDeclaration);
		try {
			State = 996;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,97,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 988;
				simpleDeclaration();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 989;
				asmDefinition();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 990;
				namespaceAliasDefinition();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 991;
				usingDeclaration();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 992;
				usingDirective();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 993;
				staticAssertDeclaration();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 994;
				aliasDeclaration();
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 995;
				opaqueEnumDeclaration();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AliasDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Using() { return GetToken(CPP14Parser.Using, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(CPP14Parser.Identifier, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Assign() { return GetToken(CPP14Parser.Assign, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TheTypeIdContext theTypeId() {
			return GetRuleContext<TheTypeIdContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Semi() { return GetToken(CPP14Parser.Semi, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public AttributeSpecifierSeqContext attributeSpecifierSeq() {
			return GetRuleContext<AttributeSpecifierSeqContext>(0);
		}
		public AliasDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_aliasDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14ParserListener typedListener = listener as ICPP14ParserListener;
			if (typedListener != null) typedListener.EnterAliasDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14ParserListener typedListener = listener as ICPP14ParserListener;
			if (typedListener != null) typedListener.ExitAliasDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICPP14ParserVisitor<TResult> typedVisitor = visitor as ICPP14ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAliasDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AliasDeclarationContext aliasDeclaration() {
		AliasDeclarationContext _localctx = new AliasDeclarationContext(Context, State);
		EnterRule(_localctx, 126, RULE_aliasDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 998;
			Match(Using);
			State = 999;
			Match(Identifier);
			State = 1001;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Alignas || _la==LeftBracket) {
				{
				State = 1000;
				attributeSpecifierSeq();
				}
			}

			State = 1003;
			Match(Assign);
			State = 1004;
			theTypeId();
			State = 1005;
			Match(Semi);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SimpleDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Semi() { return GetToken(CPP14Parser.Semi, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public DeclSpecifierSeqContext declSpecifierSeq() {
			return GetRuleContext<DeclSpecifierSeqContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public InitDeclaratorListContext initDeclaratorList() {
			return GetRuleContext<InitDeclaratorListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AttributeSpecifierSeqContext attributeSpecifierSeq() {
			return GetRuleContext<AttributeSpecifierSeqContext>(0);
		}
		public SimpleDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_simpleDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14ParserListener typedListener = listener as ICPP14ParserListener;
			if (typedListener != null) typedListener.EnterSimpleDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14ParserListener typedListener = listener as ICPP14ParserListener;
			if (typedListener != null) typedListener.ExitSimpleDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICPP14ParserVisitor<TResult> typedVisitor = visitor as ICPP14ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSimpleDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SimpleDeclarationContext simpleDeclaration() {
		SimpleDeclarationContext _localctx = new SimpleDeclarationContext(Context, State);
		EnterRule(_localctx, 128, RULE_simpleDeclaration);
		int _la;
		try {
			State = 1021;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case Auto:
			case Bool:
			case Char:
			case Char16:
			case Char32:
			case Class:
			case Const:
			case Constexpr:
			case Decltype:
			case Double:
			case Enum:
			case Explicit:
			case Extern:
			case Float:
			case Friend:
			case Inline:
			case Int:
			case Long:
			case Mutable:
			case Operator:
			case Register:
			case Short:
			case Signed:
			case Static:
			case Struct:
			case Thread_local:
			case Typedef:
			case Typename_:
			case Union:
			case Unsigned:
			case Virtual:
			case Void:
			case Volatile:
			case Wchar:
			case LeftParen:
			case Star:
			case And:
			case Tilde:
			case AndAnd:
			case Doublecolon:
			case Semi:
			case Ellipsis:
			case Identifier:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1008;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,99,Context) ) {
				case 1:
					{
					State = 1007;
					declSpecifierSeq();
					}
					break;
				}
				State = 1011;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==Decltype || _la==Operator || ((((_la - 85)) & ~0x3f) == 0 && ((1L << (_la - 85)) & ((1L << (LeftParen - 85)) | (1L << (Star - 85)) | (1L << (And - 85)) | (1L << (Tilde - 85)) | (1L << (AndAnd - 85)) | (1L << (Doublecolon - 85)) | (1L << (Ellipsis - 85)) | (1L << (Identifier - 85)))) != 0)) {
					{
					State = 1010;
					initDeclaratorList();
					}
				}

				State = 1013;
				Match(Semi);
				}
				break;
			case Alignas:
			case LeftBracket:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1014;
				attributeSpecifierSeq();
				State = 1016;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,101,Context) ) {
				case 1:
					{
					State = 1015;
					declSpecifierSeq();
					}
					break;
				}
				State = 1018;
				initDeclaratorList();
				State = 1019;
				Match(Semi);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StaticAssertDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Static_assert() { return GetToken(CPP14Parser.Static_assert, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LeftParen() { return GetToken(CPP14Parser.LeftParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ConstantExpressionContext constantExpression() {
			return GetRuleContext<ConstantExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comma() { return GetToken(CPP14Parser.Comma, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode StringLiteral() { return GetToken(CPP14Parser.StringLiteral, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RightParen() { return GetToken(CPP14Parser.RightParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Semi() { return GetToken(CPP14Parser.Semi, 0); }
		public StaticAssertDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_staticAssertDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14ParserListener typedListener = listener as ICPP14ParserListener;
			if (typedListener != null) typedListener.EnterStaticAssertDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14ParserListener typedListener = listener as ICPP14ParserListener;
			if (typedListener != null) typedListener.ExitStaticAssertDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICPP14ParserVisitor<TResult> typedVisitor = visitor as ICPP14ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStaticAssertDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StaticAssertDeclarationContext staticAssertDeclaration() {
		StaticAssertDeclarationContext _localctx = new StaticAssertDeclarationContext(Context, State);
		EnterRule(_localctx, 130, RULE_staticAssertDeclaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1023;
			Match(Static_assert);
			State = 1024;
			Match(LeftParen);
			State = 1025;
			constantExpression();
			State = 1026;
			Match(Comma);
			State = 1027;
			Match(StringLiteral);
			State = 1028;
			Match(RightParen);
			State = 1029;
			Match(Semi);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EmptyDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Semi() { return GetToken(CPP14Parser.Semi, 0); }
		public EmptyDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_emptyDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14ParserListener typedListener = listener as ICPP14ParserListener;
			if (typedListener != null) typedListener.EnterEmptyDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14ParserListener typedListener = listener as ICPP14ParserListener;
			if (typedListener != null) typedListener.ExitEmptyDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICPP14ParserVisitor<TResult> typedVisitor = visitor as ICPP14ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEmptyDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EmptyDeclarationContext emptyDeclaration() {
		EmptyDeclarationContext _localctx = new EmptyDeclarationContext(Context, State);
		EnterRule(_localctx, 132, RULE_emptyDeclaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1031;
			Match(Semi);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AttributeDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public AttributeSpecifierSeqContext attributeSpecifierSeq() {
			return GetRuleContext<AttributeSpecifierSeqContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Semi() { return GetToken(CPP14Parser.Semi, 0); }
		public AttributeDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_attributeDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14ParserListener typedListener = listener as ICPP14ParserListener;
			if (typedListener != null) typedListener.EnterAttributeDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14ParserListener typedListener = listener as ICPP14ParserListener;
			if (typedListener != null) typedListener.ExitAttributeDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICPP14ParserVisitor<TResult> typedVisitor = visitor as ICPP14ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAttributeDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AttributeDeclarationContext attributeDeclaration() {
		AttributeDeclarationContext _localctx = new AttributeDeclarationContext(Context, State);
		EnterRule(_localctx, 134, RULE_attributeDeclaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1033;
			attributeSpecifierSeq();
			State = 1034;
			Match(Semi);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeclSpecifierContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StorageClassSpecifierContext storageClassSpecifier() {
			return GetRuleContext<StorageClassSpecifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeSpecifierContext typeSpecifier() {
			return GetRuleContext<TypeSpecifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionSpecifierContext functionSpecifier() {
			return GetRuleContext<FunctionSpecifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Friend() { return GetToken(CPP14Parser.Friend, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Typedef() { return GetToken(CPP14Parser.Typedef, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Constexpr() { return GetToken(CPP14Parser.Constexpr, 0); }
		public DeclSpecifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_declSpecifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14ParserListener typedListener = listener as ICPP14ParserListener;
			if (typedListener != null) typedListener.EnterDeclSpecifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14ParserListener typedListener = listener as ICPP14ParserListener;
			if (typedListener != null) typedListener.ExitDeclSpecifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICPP14ParserVisitor<TResult> typedVisitor = visitor as ICPP14ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeclSpecifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DeclSpecifierContext declSpecifier() {
		DeclSpecifierContext _localctx = new DeclSpecifierContext(Context, State);
		EnterRule(_localctx, 136, RULE_declSpecifier);
		try {
			State = 1042;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case Extern:
			case Mutable:
			case Register:
			case Static:
			case Thread_local:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1036;
				storageClassSpecifier();
				}
				break;
			case Auto:
			case Bool:
			case Char:
			case Char16:
			case Char32:
			case Class:
			case Const:
			case Decltype:
			case Double:
			case Enum:
			case Float:
			case Int:
			case Long:
			case Short:
			case Signed:
			case Struct:
			case Typename_:
			case Union:
			case Unsigned:
			case Void:
			case Volatile:
			case Wchar:
			case Doublecolon:
			case Identifier:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1037;
				typeSpecifier();
				}
				break;
			case Explicit:
			case Inline:
			case Virtual:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1038;
				functionSpecifier();
				}
				break;
			case Friend:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1039;
				Match(Friend);
				}
				break;
			case Typedef:
				EnterOuterAlt(_localctx, 5);
				{
				State = 1040;
				Match(Typedef);
				}
				break;
			case Constexpr:
				EnterOuterAlt(_localctx, 6);
				{
				State = 1041;
				Match(Constexpr);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeclSpecifierSeqContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public DeclSpecifierContext[] declSpecifier() {
			return GetRuleContexts<DeclSpecifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public DeclSpecifierContext declSpecifier(int i) {
			return GetRuleContext<DeclSpecifierContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AttributeSpecifierSeqContext attributeSpecifierSeq() {
			return GetRuleContext<AttributeSpecifierSeqContext>(0);
		}
		public DeclSpecifierSeqContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_declSpecifierSeq; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14ParserListener typedListener = listener as ICPP14ParserListener;
			if (typedListener != null) typedListener.EnterDeclSpecifierSeq(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14ParserListener typedListener = listener as ICPP14ParserListener;
			if (typedListener != null) typedListener.ExitDeclSpecifierSeq(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICPP14ParserVisitor<TResult> typedVisitor = visitor as ICPP14ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeclSpecifierSeq(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DeclSpecifierSeqContext declSpecifierSeq() {
		DeclSpecifierSeqContext _localctx = new DeclSpecifierSeqContext(Context, State);
		EnterRule(_localctx, 138, RULE_declSpecifierSeq);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1045;
			ErrorHandler.Sync(this);
			_alt = 1+1;
			do {
				switch (_alt) {
				case 1+1:
					{
					{
					State = 1044;
					declSpecifier();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 1047;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,104,Context);
			} while ( _alt!=1 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
			State = 1050;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,105,Context) ) {
			case 1:
				{
				State = 1049;
				attributeSpecifierSeq();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StorageClassSpecifierContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Register() { return GetToken(CPP14Parser.Register, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Static() { return GetToken(CPP14Parser.Static, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Thread_local() { return GetToken(CPP14Parser.Thread_local, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Extern() { return GetToken(CPP14Parser.Extern, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Mutable() { return GetToken(CPP14Parser.Mutable, 0); }
		public StorageClassSpecifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_storageClassSpecifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14ParserListener typedListener = listener as ICPP14ParserListener;
			if (typedListener != null) typedListener.EnterStorageClassSpecifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14ParserListener typedListener = listener as ICPP14ParserListener;
			if (typedListener != null) typedListener.ExitStorageClassSpecifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICPP14ParserVisitor<TResult> typedVisitor = visitor as ICPP14ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStorageClassSpecifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StorageClassSpecifierContext storageClassSpecifier() {
		StorageClassSpecifierContext _localctx = new StorageClassSpecifierContext(Context, State);
		EnterRule(_localctx, 140, RULE_storageClassSpecifier);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1052;
			_la = TokenStream.LA(1);
			if ( !(((((_la - 36)) & ~0x3f) == 0 && ((1L << (_la - 36)) & ((1L << (Extern - 36)) | (1L << (Mutable - 36)) | (1L << (Register - 36)) | (1L << (Static - 36)) | (1L << (Thread_local - 36)))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionSpecifierContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Inline() { return GetToken(CPP14Parser.Inline, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Virtual() { return GetToken(CPP14Parser.Virtual, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Explicit() { return GetToken(CPP14Parser.Explicit, 0); }
		public FunctionSpecifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionSpecifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14ParserListener typedListener = listener as ICPP14ParserListener;
			if (typedListener != null) typedListener.EnterFunctionSpecifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14ParserListener typedListener = listener as ICPP14ParserListener;
			if (typedListener != null) typedListener.ExitFunctionSpecifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICPP14ParserVisitor<TResult> typedVisitor = visitor as ICPP14ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionSpecifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionSpecifierContext functionSpecifier() {
		FunctionSpecifierContext _localctx = new FunctionSpecifierContext(Context, State);
		EnterRule(_localctx, 142, RULE_functionSpecifier);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1054;
			_la = TokenStream.LA(1);
			if ( !(((((_la - 34)) & ~0x3f) == 0 && ((1L << (_la - 34)) & ((1L << (Explicit - 34)) | (1L << (Inline - 34)) | (1L << (Virtual - 34)))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypedefNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(CPP14Parser.Identifier, 0); }
		public TypedefNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typedefName; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14ParserListener typedListener = listener as ICPP14ParserListener;
			if (typedListener != null) typedListener.EnterTypedefName(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14ParserListener typedListener = listener as ICPP14ParserListener;
			if (typedListener != null) typedListener.ExitTypedefName(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICPP14ParserVisitor<TResult> typedVisitor = visitor as ICPP14ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypedefName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypedefNameContext typedefName() {
		TypedefNameContext _localctx = new TypedefNameContext(Context, State);
		EnterRule(_localctx, 144, RULE_typedefName);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1056;
			Match(Identifier);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeSpecifierContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TrailingTypeSpecifierContext trailingTypeSpecifier() {
			return GetRuleContext<TrailingTypeSpecifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ClassSpecifierContext classSpecifier() {
			return GetRuleContext<ClassSpecifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public EnumSpecifierContext enumSpecifier() {
			return GetRuleContext<EnumSpecifierContext>(0);
		}
		public TypeSpecifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeSpecifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14ParserListener typedListener = listener as ICPP14ParserListener;
			if (typedListener != null) typedListener.EnterTypeSpecifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14ParserListener typedListener = listener as ICPP14ParserListener;
			if (typedListener != null) typedListener.ExitTypeSpecifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICPP14ParserVisitor<TResult> typedVisitor = visitor as ICPP14ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeSpecifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeSpecifierContext typeSpecifier() {
		TypeSpecifierContext _localctx = new TypeSpecifierContext(Context, State);
		EnterRule(_localctx, 146, RULE_typeSpecifier);
		try {
			State = 1061;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,106,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1058;
				trailingTypeSpecifier();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1059;
				classSpecifier();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1060;
				enumSpecifier();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TrailingTypeSpecifierContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SimpleTypeSpecifierContext simpleTypeSpecifier() {
			return GetRuleContext<SimpleTypeSpecifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ElaboratedTypeSpecifierContext elaboratedTypeSpecifier() {
			return GetRuleContext<ElaboratedTypeSpecifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeNameSpecifierContext typeNameSpecifier() {
			return GetRuleContext<TypeNameSpecifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CvQualifierContext cvQualifier() {
			return GetRuleContext<CvQualifierContext>(0);
		}
		public TrailingTypeSpecifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_trailingTypeSpecifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14ParserListener typedListener = listener as ICPP14ParserListener;
			if (typedListener != null) typedListener.EnterTrailingTypeSpecifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14ParserListener typedListener = listener as ICPP14ParserListener;
			if (typedListener != null) typedListener.ExitTrailingTypeSpecifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICPP14ParserVisitor<TResult> typedVisitor = visitor as ICPP14ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTrailingTypeSpecifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TrailingTypeSpecifierContext trailingTypeSpecifier() {
		TrailingTypeSpecifierContext _localctx = new TrailingTypeSpecifierContext(Context, State);
		EnterRule(_localctx, 148, RULE_trailingTypeSpecifier);
		try {
			State = 1067;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case Auto:
			case Bool:
			case Char:
			case Char16:
			case Char32:
			case Decltype:
			case Double:
			case Float:
			case Int:
			case Long:
			case Short:
			case Signed:
			case Unsigned:
			case Void:
			case Wchar:
			case Doublecolon:
			case Identifier:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1063;
				simpleTypeSpecifier();
				}
				break;
			case Class:
			case Enum:
			case Struct:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1064;
				elaboratedTypeSpecifier();
				}
				break;
			case Typename_:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1065;
				typeNameSpecifier();
				}
				break;
			case Const:
			case Volatile:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1066;
				cvQualifier();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeSpecifierSeqContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypeSpecifierContext[] typeSpecifier() {
			return GetRuleContexts<TypeSpecifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeSpecifierContext typeSpecifier(int i) {
			return GetRuleContext<TypeSpecifierContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AttributeSpecifierSeqContext attributeSpecifierSeq() {
			return GetRuleContext<AttributeSpecifierSeqContext>(0);
		}
		public TypeSpecifierSeqContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeSpecifierSeq; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14ParserListener typedListener = listener as ICPP14ParserListener;
			if (typedListener != null) typedListener.EnterTypeSpecifierSeq(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14ParserListener typedListener = listener as ICPP14ParserListener;
			if (typedListener != null) typedListener.ExitTypeSpecifierSeq(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICPP14ParserVisitor<TResult> typedVisitor = visitor as ICPP14ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeSpecifierSeq(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeSpecifierSeqContext typeSpecifierSeq() {
		TypeSpecifierSeqContext _localctx = new TypeSpecifierSeqContext(Context, State);
		EnterRule(_localctx, 150, RULE_typeSpecifierSeq);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1070;
			ErrorHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 1069;
					typeSpecifier();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 1072;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,108,Context);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
			State = 1075;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,109,Context) ) {
			case 1:
				{
				State = 1074;
				attributeSpecifierSeq();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TrailingTypeSpecifierSeqContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TrailingTypeSpecifierContext[] trailingTypeSpecifier() {
			return GetRuleContexts<TrailingTypeSpecifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TrailingTypeSpecifierContext trailingTypeSpecifier(int i) {
			return GetRuleContext<TrailingTypeSpecifierContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AttributeSpecifierSeqContext attributeSpecifierSeq() {
			return GetRuleContext<AttributeSpecifierSeqContext>(0);
		}
		public TrailingTypeSpecifierSeqContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_trailingTypeSpecifierSeq; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14ParserListener typedListener = listener as ICPP14ParserListener;
			if (typedListener != null) typedListener.EnterTrailingTypeSpecifierSeq(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14ParserListener typedListener = listener as ICPP14ParserListener;
			if (typedListener != null) typedListener.ExitTrailingTypeSpecifierSeq(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICPP14ParserVisitor<TResult> typedVisitor = visitor as ICPP14ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTrailingTypeSpecifierSeq(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TrailingTypeSpecifierSeqContext trailingTypeSpecifierSeq() {
		TrailingTypeSpecifierSeqContext _localctx = new TrailingTypeSpecifierSeqContext(Context, State);
		EnterRule(_localctx, 152, RULE_trailingTypeSpecifierSeq);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1078;
			ErrorHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 1077;
					trailingTypeSpecifier();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 1080;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,110,Context);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
			State = 1083;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,111,Context) ) {
			case 1:
				{
				State = 1082;
				attributeSpecifierSeq();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SimpleTypeLengthModifierContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Short() { return GetToken(CPP14Parser.Short, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Long() { return GetToken(CPP14Parser.Long, 0); }
		public SimpleTypeLengthModifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_simpleTypeLengthModifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14ParserListener typedListener = listener as ICPP14ParserListener;
			if (typedListener != null) typedListener.EnterSimpleTypeLengthModifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14ParserListener typedListener = listener as ICPP14ParserListener;
			if (typedListener != null) typedListener.ExitSimpleTypeLengthModifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICPP14ParserVisitor<TResult> typedVisitor = visitor as ICPP14ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSimpleTypeLengthModifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SimpleTypeLengthModifierContext simpleTypeLengthModifier() {
		SimpleTypeLengthModifierContext _localctx = new SimpleTypeLengthModifierContext(Context, State);
		EnterRule(_localctx, 154, RULE_simpleTypeLengthModifier);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1085;
			_la = TokenStream.LA(1);
			if ( !(_la==Long || _la==Short) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SimpleTypeSignednessModifierContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Unsigned() { return GetToken(CPP14Parser.Unsigned, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Signed() { return GetToken(CPP14Parser.Signed, 0); }
		public SimpleTypeSignednessModifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_simpleTypeSignednessModifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14ParserListener typedListener = listener as ICPP14ParserListener;
			if (typedListener != null) typedListener.EnterSimpleTypeSignednessModifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14ParserListener typedListener = listener as ICPP14ParserListener;
			if (typedListener != null) typedListener.ExitSimpleTypeSignednessModifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICPP14ParserVisitor<TResult> typedVisitor = visitor as ICPP14ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSimpleTypeSignednessModifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SimpleTypeSignednessModifierContext simpleTypeSignednessModifier() {
		SimpleTypeSignednessModifierContext _localctx = new SimpleTypeSignednessModifierContext(Context, State);
		EnterRule(_localctx, 156, RULE_simpleTypeSignednessModifier);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1087;
			_la = TokenStream.LA(1);
			if ( !(_la==Signed || _la==Unsigned) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SimpleTypeSpecifierContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TheTypeNameContext theTypeName() {
			return GetRuleContext<TheTypeNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NestedNameSpecifierContext nestedNameSpecifier() {
			return GetRuleContext<NestedNameSpecifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Template() { return GetToken(CPP14Parser.Template, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SimpleTemplateIdContext simpleTemplateId() {
			return GetRuleContext<SimpleTemplateIdContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SimpleTypeSignednessModifierContext simpleTypeSignednessModifier() {
			return GetRuleContext<SimpleTypeSignednessModifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SimpleTypeLengthModifierContext[] simpleTypeLengthModifier() {
			return GetRuleContexts<SimpleTypeLengthModifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SimpleTypeLengthModifierContext simpleTypeLengthModifier(int i) {
			return GetRuleContext<SimpleTypeLengthModifierContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Char() { return GetToken(CPP14Parser.Char, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Char16() { return GetToken(CPP14Parser.Char16, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Char32() { return GetToken(CPP14Parser.Char32, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Wchar() { return GetToken(CPP14Parser.Wchar, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Bool() { return GetToken(CPP14Parser.Bool, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Int() { return GetToken(CPP14Parser.Int, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Float() { return GetToken(CPP14Parser.Float, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Double() { return GetToken(CPP14Parser.Double, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Void() { return GetToken(CPP14Parser.Void, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Auto() { return GetToken(CPP14Parser.Auto, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public DecltypeSpecifierContext decltypeSpecifier() {
			return GetRuleContext<DecltypeSpecifierContext>(0);
		}
		public SimpleTypeSpecifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_simpleTypeSpecifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14ParserListener typedListener = listener as ICPP14ParserListener;
			if (typedListener != null) typedListener.EnterSimpleTypeSpecifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14ParserListener typedListener = listener as ICPP14ParserListener;
			if (typedListener != null) typedListener.ExitSimpleTypeSpecifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICPP14ParserVisitor<TResult> typedVisitor = visitor as ICPP14ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSimpleTypeSpecifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SimpleTypeSpecifierContext simpleTypeSpecifier() {
		SimpleTypeSpecifierContext _localctx = new SimpleTypeSpecifierContext(Context, State);
		EnterRule(_localctx, 158, RULE_simpleTypeSpecifier);
		int _la;
		try {
			int _alt;
			State = 1141;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,122,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1090;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,112,Context) ) {
				case 1:
					{
					State = 1089;
					nestedNameSpecifier(0);
					}
					break;
				}
				State = 1092;
				theTypeName();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1093;
				nestedNameSpecifier(0);
				State = 1094;
				Match(Template);
				State = 1095;
				simpleTemplateId();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1097;
				simpleTypeSignednessModifier();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1099;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==Signed || _la==Unsigned) {
					{
					State = 1098;
					simpleTypeSignednessModifier();
					}
				}

				State = 1102;
				ErrorHandler.Sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						State = 1101;
						simpleTypeLengthModifier();
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 1104;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,114,Context);
				} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 1107;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==Signed || _la==Unsigned) {
					{
					State = 1106;
					simpleTypeSignednessModifier();
					}
				}

				State = 1109;
				Match(Char);
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 1111;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==Signed || _la==Unsigned) {
					{
					State = 1110;
					simpleTypeSignednessModifier();
					}
				}

				State = 1113;
				Match(Char16);
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 1115;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==Signed || _la==Unsigned) {
					{
					State = 1114;
					simpleTypeSignednessModifier();
					}
				}

				State = 1117;
				Match(Char32);
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 1119;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==Signed || _la==Unsigned) {
					{
					State = 1118;
					simpleTypeSignednessModifier();
					}
				}

				State = 1121;
				Match(Wchar);
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 1122;
				Match(Bool);
				}
				break;
			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 1124;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==Signed || _la==Unsigned) {
					{
					State = 1123;
					simpleTypeSignednessModifier();
					}
				}

				State = 1129;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==Long || _la==Short) {
					{
					{
					State = 1126;
					simpleTypeLengthModifier();
					}
					}
					State = 1131;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 1132;
				Match(Int);
				}
				break;
			case 11:
				EnterOuterAlt(_localctx, 11);
				{
				State = 1133;
				Match(Float);
				}
				break;
			case 12:
				EnterOuterAlt(_localctx, 12);
				{
				State = 1135;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==Long || _la==Short) {
					{
					State = 1134;
					simpleTypeLengthModifier();
					}
				}

				State = 1137;
				Match(Double);
				}
				break;
			case 13:
				EnterOuterAlt(_localctx, 13);
				{
				State = 1138;
				Match(Void);
				}
				break;
			case 14:
				EnterOuterAlt(_localctx, 14);
				{
				State = 1139;
				Match(Auto);
				}
				break;
			case 15:
				EnterOuterAlt(_localctx, 15);
				{
				State = 1140;
				decltypeSpecifier();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TheTypeNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ClassNameContext className() {
			return GetRuleContext<ClassNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public EnumNameContext enumName() {
			return GetRuleContext<EnumNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypedefNameContext typedefName() {
			return GetRuleContext<TypedefNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SimpleTemplateIdContext simpleTemplateId() {
			return GetRuleContext<SimpleTemplateIdContext>(0);
		}
		public TheTypeNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_theTypeName; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14ParserListener typedListener = listener as ICPP14ParserListener;
			if (typedListener != null) typedListener.EnterTheTypeName(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14ParserListener typedListener = listener as ICPP14ParserListener;
			if (typedListener != null) typedListener.ExitTheTypeName(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICPP14ParserVisitor<TResult> typedVisitor = visitor as ICPP14ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTheTypeName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TheTypeNameContext theTypeName() {
		TheTypeNameContext _localctx = new TheTypeNameContext(Context, State);
		EnterRule(_localctx, 160, RULE_theTypeName);
		try {
			State = 1147;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,123,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1143;
				className();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1144;
				enumName();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1145;
				typedefName();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1146;
				simpleTemplateId();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DecltypeSpecifierContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Decltype() { return GetToken(CPP14Parser.Decltype, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LeftParen() { return GetToken(CPP14Parser.LeftParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RightParen() { return GetToken(CPP14Parser.RightParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Auto() { return GetToken(CPP14Parser.Auto, 0); }
		public DecltypeSpecifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_decltypeSpecifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14ParserListener typedListener = listener as ICPP14ParserListener;
			if (typedListener != null) typedListener.EnterDecltypeSpecifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14ParserListener typedListener = listener as ICPP14ParserListener;
			if (typedListener != null) typedListener.ExitDecltypeSpecifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICPP14ParserVisitor<TResult> typedVisitor = visitor as ICPP14ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDecltypeSpecifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DecltypeSpecifierContext decltypeSpecifier() {
		DecltypeSpecifierContext _localctx = new DecltypeSpecifierContext(Context, State);
		EnterRule(_localctx, 162, RULE_decltypeSpecifier);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1149;
			Match(Decltype);
			State = 1150;
			Match(LeftParen);
			State = 1153;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,124,Context) ) {
			case 1:
				{
				State = 1151;
				expression();
				}
				break;
			case 2:
				{
				State = 1152;
				Match(Auto);
				}
				break;
			}
			State = 1155;
			Match(RightParen);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ElaboratedTypeSpecifierContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ClassKeyContext classKey() {
			return GetRuleContext<ClassKeyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(CPP14Parser.Identifier, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SimpleTemplateIdContext simpleTemplateId() {
			return GetRuleContext<SimpleTemplateIdContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NestedNameSpecifierContext nestedNameSpecifier() {
			return GetRuleContext<NestedNameSpecifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AttributeSpecifierSeqContext attributeSpecifierSeq() {
			return GetRuleContext<AttributeSpecifierSeqContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Template() { return GetToken(CPP14Parser.Template, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Enum() { return GetToken(CPP14Parser.Enum, 0); }
		public ElaboratedTypeSpecifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_elaboratedTypeSpecifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14ParserListener typedListener = listener as ICPP14ParserListener;
			if (typedListener != null) typedListener.EnterElaboratedTypeSpecifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14ParserListener typedListener = listener as ICPP14ParserListener;
			if (typedListener != null) typedListener.ExitElaboratedTypeSpecifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICPP14ParserVisitor<TResult> typedVisitor = visitor as ICPP14ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitElaboratedTypeSpecifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ElaboratedTypeSpecifierContext elaboratedTypeSpecifier() {
		ElaboratedTypeSpecifierContext _localctx = new ElaboratedTypeSpecifierContext(Context, State);
		EnterRule(_localctx, 164, RULE_elaboratedTypeSpecifier);
		int _la;
		try {
			State = 1179;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case Class:
			case Struct:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1157;
				classKey();
				State = 1172;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,128,Context) ) {
				case 1:
					{
					State = 1159;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==Alignas || _la==LeftBracket) {
						{
						State = 1158;
						attributeSpecifierSeq();
						}
					}

					State = 1162;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,126,Context) ) {
					case 1:
						{
						State = 1161;
						nestedNameSpecifier(0);
						}
						break;
					}
					State = 1164;
					Match(Identifier);
					}
					break;
				case 2:
					{
					State = 1165;
					simpleTemplateId();
					}
					break;
				case 3:
					{
					State = 1166;
					nestedNameSpecifier(0);
					State = 1168;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==Template) {
						{
						State = 1167;
						Match(Template);
						}
					}

					State = 1170;
					simpleTemplateId();
					}
					break;
				}
				}
				break;
			case Enum:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1174;
				Match(Enum);
				State = 1176;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,129,Context) ) {
				case 1:
					{
					State = 1175;
					nestedNameSpecifier(0);
					}
					break;
				}
				State = 1178;
				Match(Identifier);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EnumNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(CPP14Parser.Identifier, 0); }
		public EnumNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enumName; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14ParserListener typedListener = listener as ICPP14ParserListener;
			if (typedListener != null) typedListener.EnterEnumName(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14ParserListener typedListener = listener as ICPP14ParserListener;
			if (typedListener != null) typedListener.ExitEnumName(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICPP14ParserVisitor<TResult> typedVisitor = visitor as ICPP14ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEnumName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EnumNameContext enumName() {
		EnumNameContext _localctx = new EnumNameContext(Context, State);
		EnterRule(_localctx, 166, RULE_enumName);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1181;
			Match(Identifier);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EnumSpecifierContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public EnumHeadContext enumHead() {
			return GetRuleContext<EnumHeadContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LeftBrace() { return GetToken(CPP14Parser.LeftBrace, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RightBrace() { return GetToken(CPP14Parser.RightBrace, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public EnumeratorListContext enumeratorList() {
			return GetRuleContext<EnumeratorListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comma() { return GetToken(CPP14Parser.Comma, 0); }
		public EnumSpecifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enumSpecifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14ParserListener typedListener = listener as ICPP14ParserListener;
			if (typedListener != null) typedListener.EnterEnumSpecifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14ParserListener typedListener = listener as ICPP14ParserListener;
			if (typedListener != null) typedListener.ExitEnumSpecifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICPP14ParserVisitor<TResult> typedVisitor = visitor as ICPP14ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEnumSpecifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EnumSpecifierContext enumSpecifier() {
		EnumSpecifierContext _localctx = new EnumSpecifierContext(Context, State);
		EnterRule(_localctx, 168, RULE_enumSpecifier);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1183;
			enumHead();
			State = 1184;
			Match(LeftBrace);
			State = 1189;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Identifier) {
				{
				State = 1185;
				enumeratorList();
				State = 1187;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==Comma) {
					{
					State = 1186;
					Match(Comma);
					}
				}

				}
			}

			State = 1191;
			Match(RightBrace);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EnumHeadContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public EnumkeyContext enumkey() {
			return GetRuleContext<EnumkeyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AttributeSpecifierSeqContext attributeSpecifierSeq() {
			return GetRuleContext<AttributeSpecifierSeqContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(CPP14Parser.Identifier, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public EnumbaseContext enumbase() {
			return GetRuleContext<EnumbaseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NestedNameSpecifierContext nestedNameSpecifier() {
			return GetRuleContext<NestedNameSpecifierContext>(0);
		}
		public EnumHeadContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enumHead; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14ParserListener typedListener = listener as ICPP14ParserListener;
			if (typedListener != null) typedListener.EnterEnumHead(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14ParserListener typedListener = listener as ICPP14ParserListener;
			if (typedListener != null) typedListener.ExitEnumHead(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICPP14ParserVisitor<TResult> typedVisitor = visitor as ICPP14ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEnumHead(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EnumHeadContext enumHead() {
		EnumHeadContext _localctx = new EnumHeadContext(Context, State);
		EnterRule(_localctx, 170, RULE_enumHead);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1193;
			enumkey();
			State = 1195;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Alignas || _la==LeftBracket) {
				{
				State = 1194;
				attributeSpecifierSeq();
				}
			}

			State = 1201;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Decltype || _la==Doublecolon || _la==Identifier) {
				{
				State = 1198;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,134,Context) ) {
				case 1:
					{
					State = 1197;
					nestedNameSpecifier(0);
					}
					break;
				}
				State = 1200;
				Match(Identifier);
				}
			}

			State = 1204;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Colon) {
				{
				State = 1203;
				enumbase();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OpaqueEnumDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public EnumkeyContext enumkey() {
			return GetRuleContext<EnumkeyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(CPP14Parser.Identifier, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Semi() { return GetToken(CPP14Parser.Semi, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public AttributeSpecifierSeqContext attributeSpecifierSeq() {
			return GetRuleContext<AttributeSpecifierSeqContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public EnumbaseContext enumbase() {
			return GetRuleContext<EnumbaseContext>(0);
		}
		public OpaqueEnumDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_opaqueEnumDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14ParserListener typedListener = listener as ICPP14ParserListener;
			if (typedListener != null) typedListener.EnterOpaqueEnumDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14ParserListener typedListener = listener as ICPP14ParserListener;
			if (typedListener != null) typedListener.ExitOpaqueEnumDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICPP14ParserVisitor<TResult> typedVisitor = visitor as ICPP14ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOpaqueEnumDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OpaqueEnumDeclarationContext opaqueEnumDeclaration() {
		OpaqueEnumDeclarationContext _localctx = new OpaqueEnumDeclarationContext(Context, State);
		EnterRule(_localctx, 172, RULE_opaqueEnumDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1206;
			enumkey();
			State = 1208;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Alignas || _la==LeftBracket) {
				{
				State = 1207;
				attributeSpecifierSeq();
				}
			}

			State = 1210;
			Match(Identifier);
			State = 1212;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Colon) {
				{
				State = 1211;
				enumbase();
				}
			}

			State = 1214;
			Match(Semi);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EnumkeyContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Enum() { return GetToken(CPP14Parser.Enum, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Class() { return GetToken(CPP14Parser.Class, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Struct() { return GetToken(CPP14Parser.Struct, 0); }
		public EnumkeyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enumkey; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14ParserListener typedListener = listener as ICPP14ParserListener;
			if (typedListener != null) typedListener.EnterEnumkey(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14ParserListener typedListener = listener as ICPP14ParserListener;
			if (typedListener != null) typedListener.ExitEnumkey(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICPP14ParserVisitor<TResult> typedVisitor = visitor as ICPP14ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEnumkey(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EnumkeyContext enumkey() {
		EnumkeyContext _localctx = new EnumkeyContext(Context, State);
		EnterRule(_localctx, 174, RULE_enumkey);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1216;
			Match(Enum);
			State = 1218;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Class || _la==Struct) {
				{
				State = 1217;
				_la = TokenStream.LA(1);
				if ( !(_la==Class || _la==Struct) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EnumbaseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Colon() { return GetToken(CPP14Parser.Colon, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeSpecifierSeqContext typeSpecifierSeq() {
			return GetRuleContext<TypeSpecifierSeqContext>(0);
		}
		public EnumbaseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enumbase; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14ParserListener typedListener = listener as ICPP14ParserListener;
			if (typedListener != null) typedListener.EnterEnumbase(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14ParserListener typedListener = listener as ICPP14ParserListener;
			if (typedListener != null) typedListener.ExitEnumbase(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICPP14ParserVisitor<TResult> typedVisitor = visitor as ICPP14ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEnumbase(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EnumbaseContext enumbase() {
		EnumbaseContext _localctx = new EnumbaseContext(Context, State);
		EnterRule(_localctx, 176, RULE_enumbase);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1220;
			Match(Colon);
			State = 1221;
			typeSpecifierSeq();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EnumeratorListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public EnumeratorDefinitionContext[] enumeratorDefinition() {
			return GetRuleContexts<EnumeratorDefinitionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public EnumeratorDefinitionContext enumeratorDefinition(int i) {
			return GetRuleContext<EnumeratorDefinitionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Comma() { return GetTokens(CPP14Parser.Comma); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comma(int i) {
			return GetToken(CPP14Parser.Comma, i);
		}
		public EnumeratorListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enumeratorList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14ParserListener typedListener = listener as ICPP14ParserListener;
			if (typedListener != null) typedListener.EnterEnumeratorList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14ParserListener typedListener = listener as ICPP14ParserListener;
			if (typedListener != null) typedListener.ExitEnumeratorList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICPP14ParserVisitor<TResult> typedVisitor = visitor as ICPP14ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEnumeratorList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EnumeratorListContext enumeratorList() {
		EnumeratorListContext _localctx = new EnumeratorListContext(Context, State);
		EnterRule(_localctx, 178, RULE_enumeratorList);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1223;
			enumeratorDefinition();
			State = 1228;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,140,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 1224;
					Match(Comma);
					State = 1225;
					enumeratorDefinition();
					}
					} 
				}
				State = 1230;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,140,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EnumeratorDefinitionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public EnumeratorContext enumerator() {
			return GetRuleContext<EnumeratorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Assign() { return GetToken(CPP14Parser.Assign, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ConstantExpressionContext constantExpression() {
			return GetRuleContext<ConstantExpressionContext>(0);
		}
		public EnumeratorDefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enumeratorDefinition; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14ParserListener typedListener = listener as ICPP14ParserListener;
			if (typedListener != null) typedListener.EnterEnumeratorDefinition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14ParserListener typedListener = listener as ICPP14ParserListener;
			if (typedListener != null) typedListener.ExitEnumeratorDefinition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICPP14ParserVisitor<TResult> typedVisitor = visitor as ICPP14ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEnumeratorDefinition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EnumeratorDefinitionContext enumeratorDefinition() {
		EnumeratorDefinitionContext _localctx = new EnumeratorDefinitionContext(Context, State);
		EnterRule(_localctx, 180, RULE_enumeratorDefinition);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1231;
			enumerator();
			State = 1234;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Assign) {
				{
				State = 1232;
				Match(Assign);
				State = 1233;
				constantExpression();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EnumeratorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(CPP14Parser.Identifier, 0); }
		public EnumeratorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enumerator; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14ParserListener typedListener = listener as ICPP14ParserListener;
			if (typedListener != null) typedListener.EnterEnumerator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14ParserListener typedListener = listener as ICPP14ParserListener;
			if (typedListener != null) typedListener.ExitEnumerator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICPP14ParserVisitor<TResult> typedVisitor = visitor as ICPP14ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEnumerator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EnumeratorContext enumerator() {
		EnumeratorContext _localctx = new EnumeratorContext(Context, State);
		EnterRule(_localctx, 182, RULE_enumerator);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1236;
			Match(Identifier);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NamespaceNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public OriginalNamespaceNameContext originalNamespaceName() {
			return GetRuleContext<OriginalNamespaceNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NamespaceAliasContext namespaceAlias() {
			return GetRuleContext<NamespaceAliasContext>(0);
		}
		public NamespaceNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_namespaceName; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14ParserListener typedListener = listener as ICPP14ParserListener;
			if (typedListener != null) typedListener.EnterNamespaceName(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14ParserListener typedListener = listener as ICPP14ParserListener;
			if (typedListener != null) typedListener.ExitNamespaceName(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICPP14ParserVisitor<TResult> typedVisitor = visitor as ICPP14ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNamespaceName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NamespaceNameContext namespaceName() {
		NamespaceNameContext _localctx = new NamespaceNameContext(Context, State);
		EnterRule(_localctx, 184, RULE_namespaceName);
		try {
			State = 1240;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,142,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1238;
				originalNamespaceName();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1239;
				namespaceAlias();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OriginalNamespaceNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(CPP14Parser.Identifier, 0); }
		public OriginalNamespaceNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_originalNamespaceName; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14ParserListener typedListener = listener as ICPP14ParserListener;
			if (typedListener != null) typedListener.EnterOriginalNamespaceName(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14ParserListener typedListener = listener as ICPP14ParserListener;
			if (typedListener != null) typedListener.ExitOriginalNamespaceName(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICPP14ParserVisitor<TResult> typedVisitor = visitor as ICPP14ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOriginalNamespaceName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OriginalNamespaceNameContext originalNamespaceName() {
		OriginalNamespaceNameContext _localctx = new OriginalNamespaceNameContext(Context, State);
		EnterRule(_localctx, 186, RULE_originalNamespaceName);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1242;
			Match(Identifier);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NamespaceDefinitionContext : ParserRuleContext {
		public DeclarationseqContext namespaceBody;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Namespace() { return GetToken(CPP14Parser.Namespace, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LeftBrace() { return GetToken(CPP14Parser.LeftBrace, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RightBrace() { return GetToken(CPP14Parser.RightBrace, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Inline() { return GetToken(CPP14Parser.Inline, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(CPP14Parser.Identifier, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public OriginalNamespaceNameContext originalNamespaceName() {
			return GetRuleContext<OriginalNamespaceNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DeclarationseqContext declarationseq() {
			return GetRuleContext<DeclarationseqContext>(0);
		}
		public NamespaceDefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_namespaceDefinition; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14ParserListener typedListener = listener as ICPP14ParserListener;
			if (typedListener != null) typedListener.EnterNamespaceDefinition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14ParserListener typedListener = listener as ICPP14ParserListener;
			if (typedListener != null) typedListener.ExitNamespaceDefinition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICPP14ParserVisitor<TResult> typedVisitor = visitor as ICPP14ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNamespaceDefinition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NamespaceDefinitionContext namespaceDefinition() {
		NamespaceDefinitionContext _localctx = new NamespaceDefinitionContext(Context, State);
		EnterRule(_localctx, 188, RULE_namespaceDefinition);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1245;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Inline) {
				{
				State = 1244;
				Match(Inline);
				}
			}

			State = 1247;
			Match(Namespace);
			State = 1250;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,144,Context) ) {
			case 1:
				{
				State = 1248;
				Match(Identifier);
				}
				break;
			case 2:
				{
				State = 1249;
				originalNamespaceName();
				}
				break;
			}
			State = 1252;
			Match(LeftBrace);
			State = 1254;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (((((_la - 10)) & ~0x3f) == 0 && ((1L << (_la - 10)) & ((1L << (Alignas - 10)) | (1L << (Asm - 10)) | (1L << (Auto - 10)) | (1L << (Bool - 10)) | (1L << (Char - 10)) | (1L << (Char16 - 10)) | (1L << (Char32 - 10)) | (1L << (Class - 10)) | (1L << (Const - 10)) | (1L << (Constexpr - 10)) | (1L << (Decltype - 10)) | (1L << (Double - 10)) | (1L << (Enum - 10)) | (1L << (Explicit - 10)) | (1L << (Extern - 10)) | (1L << (Float - 10)) | (1L << (Friend - 10)) | (1L << (Inline - 10)) | (1L << (Int - 10)) | (1L << (Long - 10)) | (1L << (Mutable - 10)) | (1L << (Namespace - 10)) | (1L << (Operator - 10)) | (1L << (Register - 10)) | (1L << (Short - 10)) | (1L << (Signed - 10)) | (1L << (Static - 10)) | (1L << (Static_assert - 10)) | (1L << (Struct - 10)) | (1L << (Template - 10)) | (1L << (Thread_local - 10)))) != 0) || ((((_la - 74)) & ~0x3f) == 0 && ((1L << (_la - 74)) & ((1L << (Typedef - 74)) | (1L << (Typename_ - 74)) | (1L << (Union - 74)) | (1L << (Unsigned - 74)) | (1L << (Using - 74)) | (1L << (Virtual - 74)) | (1L << (Void - 74)) | (1L << (Volatile - 74)) | (1L << (Wchar - 74)) | (1L << (LeftParen - 74)) | (1L << (LeftBracket - 74)) | (1L << (Star - 74)) | (1L << (And - 74)) | (1L << (Tilde - 74)) | (1L << (AndAnd - 74)) | (1L << (Doublecolon - 74)) | (1L << (Semi - 74)) | (1L << (Ellipsis - 74)) | (1L << (Identifier - 74)))) != 0)) {
				{
				State = 1253;
				_localctx.namespaceBody = declarationseq();
				}
			}

			State = 1256;
			Match(RightBrace);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NamespaceAliasContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(CPP14Parser.Identifier, 0); }
		public NamespaceAliasContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_namespaceAlias; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14ParserListener typedListener = listener as ICPP14ParserListener;
			if (typedListener != null) typedListener.EnterNamespaceAlias(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14ParserListener typedListener = listener as ICPP14ParserListener;
			if (typedListener != null) typedListener.ExitNamespaceAlias(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICPP14ParserVisitor<TResult> typedVisitor = visitor as ICPP14ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNamespaceAlias(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NamespaceAliasContext namespaceAlias() {
		NamespaceAliasContext _localctx = new NamespaceAliasContext(Context, State);
		EnterRule(_localctx, 190, RULE_namespaceAlias);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1258;
			Match(Identifier);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NamespaceAliasDefinitionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Namespace() { return GetToken(CPP14Parser.Namespace, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(CPP14Parser.Identifier, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Assign() { return GetToken(CPP14Parser.Assign, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public QualifiednamespacespecifierContext qualifiednamespacespecifier() {
			return GetRuleContext<QualifiednamespacespecifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Semi() { return GetToken(CPP14Parser.Semi, 0); }
		public NamespaceAliasDefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_namespaceAliasDefinition; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14ParserListener typedListener = listener as ICPP14ParserListener;
			if (typedListener != null) typedListener.EnterNamespaceAliasDefinition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14ParserListener typedListener = listener as ICPP14ParserListener;
			if (typedListener != null) typedListener.ExitNamespaceAliasDefinition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICPP14ParserVisitor<TResult> typedVisitor = visitor as ICPP14ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNamespaceAliasDefinition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NamespaceAliasDefinitionContext namespaceAliasDefinition() {
		NamespaceAliasDefinitionContext _localctx = new NamespaceAliasDefinitionContext(Context, State);
		EnterRule(_localctx, 192, RULE_namespaceAliasDefinition);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1260;
			Match(Namespace);
			State = 1261;
			Match(Identifier);
			State = 1262;
			Match(Assign);
			State = 1263;
			qualifiednamespacespecifier();
			State = 1264;
			Match(Semi);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class QualifiednamespacespecifierContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public NamespaceNameContext namespaceName() {
			return GetRuleContext<NamespaceNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NestedNameSpecifierContext nestedNameSpecifier() {
			return GetRuleContext<NestedNameSpecifierContext>(0);
		}
		public QualifiednamespacespecifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_qualifiednamespacespecifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14ParserListener typedListener = listener as ICPP14ParserListener;
			if (typedListener != null) typedListener.EnterQualifiednamespacespecifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14ParserListener typedListener = listener as ICPP14ParserListener;
			if (typedListener != null) typedListener.ExitQualifiednamespacespecifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICPP14ParserVisitor<TResult> typedVisitor = visitor as ICPP14ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitQualifiednamespacespecifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public QualifiednamespacespecifierContext qualifiednamespacespecifier() {
		QualifiednamespacespecifierContext _localctx = new QualifiednamespacespecifierContext(Context, State);
		EnterRule(_localctx, 194, RULE_qualifiednamespacespecifier);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1267;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,146,Context) ) {
			case 1:
				{
				State = 1266;
				nestedNameSpecifier(0);
				}
				break;
			}
			State = 1269;
			namespaceName();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UsingDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Using() { return GetToken(CPP14Parser.Using, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UnqualifiedIdContext unqualifiedId() {
			return GetRuleContext<UnqualifiedIdContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Semi() { return GetToken(CPP14Parser.Semi, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Doublecolon() { return GetToken(CPP14Parser.Doublecolon, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NestedNameSpecifierContext nestedNameSpecifier() {
			return GetRuleContext<NestedNameSpecifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Typename_() { return GetToken(CPP14Parser.Typename_, 0); }
		public UsingDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_usingDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14ParserListener typedListener = listener as ICPP14ParserListener;
			if (typedListener != null) typedListener.EnterUsingDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14ParserListener typedListener = listener as ICPP14ParserListener;
			if (typedListener != null) typedListener.ExitUsingDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICPP14ParserVisitor<TResult> typedVisitor = visitor as ICPP14ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUsingDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UsingDeclarationContext usingDeclaration() {
		UsingDeclarationContext _localctx = new UsingDeclarationContext(Context, State);
		EnterRule(_localctx, 196, RULE_usingDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1271;
			Match(Using);
			State = 1277;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,148,Context) ) {
			case 1:
				{
				{
				State = 1273;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==Typename_) {
					{
					State = 1272;
					Match(Typename_);
					}
				}

				State = 1275;
				nestedNameSpecifier(0);
				}
				}
				break;
			case 2:
				{
				State = 1276;
				Match(Doublecolon);
				}
				break;
			}
			State = 1279;
			unqualifiedId();
			State = 1280;
			Match(Semi);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UsingDirectiveContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Using() { return GetToken(CPP14Parser.Using, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Namespace() { return GetToken(CPP14Parser.Namespace, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NamespaceNameContext namespaceName() {
			return GetRuleContext<NamespaceNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Semi() { return GetToken(CPP14Parser.Semi, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public AttributeSpecifierSeqContext attributeSpecifierSeq() {
			return GetRuleContext<AttributeSpecifierSeqContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NestedNameSpecifierContext nestedNameSpecifier() {
			return GetRuleContext<NestedNameSpecifierContext>(0);
		}
		public UsingDirectiveContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_usingDirective; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14ParserListener typedListener = listener as ICPP14ParserListener;
			if (typedListener != null) typedListener.EnterUsingDirective(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14ParserListener typedListener = listener as ICPP14ParserListener;
			if (typedListener != null) typedListener.ExitUsingDirective(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICPP14ParserVisitor<TResult> typedVisitor = visitor as ICPP14ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUsingDirective(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UsingDirectiveContext usingDirective() {
		UsingDirectiveContext _localctx = new UsingDirectiveContext(Context, State);
		EnterRule(_localctx, 198, RULE_usingDirective);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1283;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Alignas || _la==LeftBracket) {
				{
				State = 1282;
				attributeSpecifierSeq();
				}
			}

			State = 1285;
			Match(Using);
			State = 1286;
			Match(Namespace);
			State = 1288;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,150,Context) ) {
			case 1:
				{
				State = 1287;
				nestedNameSpecifier(0);
				}
				break;
			}
			State = 1290;
			namespaceName();
			State = 1291;
			Match(Semi);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AsmDefinitionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Asm() { return GetToken(CPP14Parser.Asm, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LeftParen() { return GetToken(CPP14Parser.LeftParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode StringLiteral() { return GetToken(CPP14Parser.StringLiteral, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RightParen() { return GetToken(CPP14Parser.RightParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Semi() { return GetToken(CPP14Parser.Semi, 0); }
		public AsmDefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_asmDefinition; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14ParserListener typedListener = listener as ICPP14ParserListener;
			if (typedListener != null) typedListener.EnterAsmDefinition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14ParserListener typedListener = listener as ICPP14ParserListener;
			if (typedListener != null) typedListener.ExitAsmDefinition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICPP14ParserVisitor<TResult> typedVisitor = visitor as ICPP14ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAsmDefinition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AsmDefinitionContext asmDefinition() {
		AsmDefinitionContext _localctx = new AsmDefinitionContext(Context, State);
		EnterRule(_localctx, 200, RULE_asmDefinition);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1293;
			Match(Asm);
			State = 1294;
			Match(LeftParen);
			State = 1295;
			Match(StringLiteral);
			State = 1296;
			Match(RightParen);
			State = 1297;
			Match(Semi);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LinkageSpecificationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Extern() { return GetToken(CPP14Parser.Extern, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode StringLiteral() { return GetToken(CPP14Parser.StringLiteral, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LeftBrace() { return GetToken(CPP14Parser.LeftBrace, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RightBrace() { return GetToken(CPP14Parser.RightBrace, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public DeclarationContext declaration() {
			return GetRuleContext<DeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DeclarationseqContext declarationseq() {
			return GetRuleContext<DeclarationseqContext>(0);
		}
		public LinkageSpecificationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_linkageSpecification; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14ParserListener typedListener = listener as ICPP14ParserListener;
			if (typedListener != null) typedListener.EnterLinkageSpecification(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14ParserListener typedListener = listener as ICPP14ParserListener;
			if (typedListener != null) typedListener.ExitLinkageSpecification(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICPP14ParserVisitor<TResult> typedVisitor = visitor as ICPP14ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLinkageSpecification(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LinkageSpecificationContext linkageSpecification() {
		LinkageSpecificationContext _localctx = new LinkageSpecificationContext(Context, State);
		EnterRule(_localctx, 202, RULE_linkageSpecification);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1299;
			Match(Extern);
			State = 1300;
			Match(StringLiteral);
			State = 1307;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case LeftBrace:
				{
				State = 1301;
				Match(LeftBrace);
				State = 1303;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (((((_la - 10)) & ~0x3f) == 0 && ((1L << (_la - 10)) & ((1L << (Alignas - 10)) | (1L << (Asm - 10)) | (1L << (Auto - 10)) | (1L << (Bool - 10)) | (1L << (Char - 10)) | (1L << (Char16 - 10)) | (1L << (Char32 - 10)) | (1L << (Class - 10)) | (1L << (Const - 10)) | (1L << (Constexpr - 10)) | (1L << (Decltype - 10)) | (1L << (Double - 10)) | (1L << (Enum - 10)) | (1L << (Explicit - 10)) | (1L << (Extern - 10)) | (1L << (Float - 10)) | (1L << (Friend - 10)) | (1L << (Inline - 10)) | (1L << (Int - 10)) | (1L << (Long - 10)) | (1L << (Mutable - 10)) | (1L << (Namespace - 10)) | (1L << (Operator - 10)) | (1L << (Register - 10)) | (1L << (Short - 10)) | (1L << (Signed - 10)) | (1L << (Static - 10)) | (1L << (Static_assert - 10)) | (1L << (Struct - 10)) | (1L << (Template - 10)) | (1L << (Thread_local - 10)))) != 0) || ((((_la - 74)) & ~0x3f) == 0 && ((1L << (_la - 74)) & ((1L << (Typedef - 74)) | (1L << (Typename_ - 74)) | (1L << (Union - 74)) | (1L << (Unsigned - 74)) | (1L << (Using - 74)) | (1L << (Virtual - 74)) | (1L << (Void - 74)) | (1L << (Volatile - 74)) | (1L << (Wchar - 74)) | (1L << (LeftParen - 74)) | (1L << (LeftBracket - 74)) | (1L << (Star - 74)) | (1L << (And - 74)) | (1L << (Tilde - 74)) | (1L << (AndAnd - 74)) | (1L << (Doublecolon - 74)) | (1L << (Semi - 74)) | (1L << (Ellipsis - 74)) | (1L << (Identifier - 74)))) != 0)) {
					{
					State = 1302;
					declarationseq();
					}
				}

				State = 1305;
				Match(RightBrace);
				}
				break;
			case Alignas:
			case Asm:
			case Auto:
			case Bool:
			case Char:
			case Char16:
			case Char32:
			case Class:
			case Const:
			case Constexpr:
			case Decltype:
			case Double:
			case Enum:
			case Explicit:
			case Extern:
			case Float:
			case Friend:
			case Inline:
			case Int:
			case Long:
			case Mutable:
			case Namespace:
			case Operator:
			case Register:
			case Short:
			case Signed:
			case Static:
			case Static_assert:
			case Struct:
			case Template:
			case Thread_local:
			case Typedef:
			case Typename_:
			case Union:
			case Unsigned:
			case Using:
			case Virtual:
			case Void:
			case Volatile:
			case Wchar:
			case LeftParen:
			case LeftBracket:
			case Star:
			case And:
			case Tilde:
			case AndAnd:
			case Doublecolon:
			case Semi:
			case Ellipsis:
			case Identifier:
				{
				State = 1306;
				declaration();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AttributeSpecifierSeqContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public AttributeSpecifierContext[] attributeSpecifier() {
			return GetRuleContexts<AttributeSpecifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AttributeSpecifierContext attributeSpecifier(int i) {
			return GetRuleContext<AttributeSpecifierContext>(i);
		}
		public AttributeSpecifierSeqContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_attributeSpecifierSeq; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14ParserListener typedListener = listener as ICPP14ParserListener;
			if (typedListener != null) typedListener.EnterAttributeSpecifierSeq(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14ParserListener typedListener = listener as ICPP14ParserListener;
			if (typedListener != null) typedListener.ExitAttributeSpecifierSeq(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICPP14ParserVisitor<TResult> typedVisitor = visitor as ICPP14ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAttributeSpecifierSeq(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AttributeSpecifierSeqContext attributeSpecifierSeq() {
		AttributeSpecifierSeqContext _localctx = new AttributeSpecifierSeqContext(Context, State);
		EnterRule(_localctx, 204, RULE_attributeSpecifierSeq);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1310;
			ErrorHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 1309;
					attributeSpecifier();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 1312;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,153,Context);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AttributeSpecifierContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] LeftBracket() { return GetTokens(CPP14Parser.LeftBracket); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LeftBracket(int i) {
			return GetToken(CPP14Parser.LeftBracket, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] RightBracket() { return GetTokens(CPP14Parser.RightBracket); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RightBracket(int i) {
			return GetToken(CPP14Parser.RightBracket, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AttributeListContext attributeList() {
			return GetRuleContext<AttributeListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AlignmentspecifierContext alignmentspecifier() {
			return GetRuleContext<AlignmentspecifierContext>(0);
		}
		public AttributeSpecifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_attributeSpecifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14ParserListener typedListener = listener as ICPP14ParserListener;
			if (typedListener != null) typedListener.EnterAttributeSpecifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14ParserListener typedListener = listener as ICPP14ParserListener;
			if (typedListener != null) typedListener.ExitAttributeSpecifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICPP14ParserVisitor<TResult> typedVisitor = visitor as ICPP14ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAttributeSpecifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AttributeSpecifierContext attributeSpecifier() {
		AttributeSpecifierContext _localctx = new AttributeSpecifierContext(Context, State);
		EnterRule(_localctx, 206, RULE_attributeSpecifier);
		int _la;
		try {
			State = 1322;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case LeftBracket:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1314;
				Match(LeftBracket);
				State = 1315;
				Match(LeftBracket);
				State = 1317;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==Identifier) {
					{
					State = 1316;
					attributeList();
					}
				}

				State = 1319;
				Match(RightBracket);
				State = 1320;
				Match(RightBracket);
				}
				break;
			case Alignas:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1321;
				alignmentspecifier();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AlignmentspecifierContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Alignas() { return GetToken(CPP14Parser.Alignas, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LeftParen() { return GetToken(CPP14Parser.LeftParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RightParen() { return GetToken(CPP14Parser.RightParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TheTypeIdContext theTypeId() {
			return GetRuleContext<TheTypeIdContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ConstantExpressionContext constantExpression() {
			return GetRuleContext<ConstantExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Ellipsis() { return GetToken(CPP14Parser.Ellipsis, 0); }
		public AlignmentspecifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alignmentspecifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14ParserListener typedListener = listener as ICPP14ParserListener;
			if (typedListener != null) typedListener.EnterAlignmentspecifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14ParserListener typedListener = listener as ICPP14ParserListener;
			if (typedListener != null) typedListener.ExitAlignmentspecifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICPP14ParserVisitor<TResult> typedVisitor = visitor as ICPP14ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlignmentspecifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AlignmentspecifierContext alignmentspecifier() {
		AlignmentspecifierContext _localctx = new AlignmentspecifierContext(Context, State);
		EnterRule(_localctx, 208, RULE_alignmentspecifier);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1324;
			Match(Alignas);
			State = 1325;
			Match(LeftParen);
			State = 1328;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,156,Context) ) {
			case 1:
				{
				State = 1326;
				theTypeId();
				}
				break;
			case 2:
				{
				State = 1327;
				constantExpression();
				}
				break;
			}
			State = 1331;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Ellipsis) {
				{
				State = 1330;
				Match(Ellipsis);
				}
			}

			State = 1333;
			Match(RightParen);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AttributeListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public AttributeContext[] attribute() {
			return GetRuleContexts<AttributeContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AttributeContext attribute(int i) {
			return GetRuleContext<AttributeContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Comma() { return GetTokens(CPP14Parser.Comma); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comma(int i) {
			return GetToken(CPP14Parser.Comma, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Ellipsis() { return GetToken(CPP14Parser.Ellipsis, 0); }
		public AttributeListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_attributeList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14ParserListener typedListener = listener as ICPP14ParserListener;
			if (typedListener != null) typedListener.EnterAttributeList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14ParserListener typedListener = listener as ICPP14ParserListener;
			if (typedListener != null) typedListener.ExitAttributeList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICPP14ParserVisitor<TResult> typedVisitor = visitor as ICPP14ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAttributeList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AttributeListContext attributeList() {
		AttributeListContext _localctx = new AttributeListContext(Context, State);
		EnterRule(_localctx, 210, RULE_attributeList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1335;
			attribute();
			State = 1340;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==Comma) {
				{
				{
				State = 1336;
				Match(Comma);
				State = 1337;
				attribute();
				}
				}
				State = 1342;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 1344;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Ellipsis) {
				{
				State = 1343;
				Match(Ellipsis);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AttributeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(CPP14Parser.Identifier, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public AttributeNamespaceContext attributeNamespace() {
			return GetRuleContext<AttributeNamespaceContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Doublecolon() { return GetToken(CPP14Parser.Doublecolon, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public AttributeArgumentClauseContext attributeArgumentClause() {
			return GetRuleContext<AttributeArgumentClauseContext>(0);
		}
		public AttributeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_attribute; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14ParserListener typedListener = listener as ICPP14ParserListener;
			if (typedListener != null) typedListener.EnterAttribute(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14ParserListener typedListener = listener as ICPP14ParserListener;
			if (typedListener != null) typedListener.ExitAttribute(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICPP14ParserVisitor<TResult> typedVisitor = visitor as ICPP14ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAttribute(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AttributeContext attribute() {
		AttributeContext _localctx = new AttributeContext(Context, State);
		EnterRule(_localctx, 212, RULE_attribute);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1349;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,160,Context) ) {
			case 1:
				{
				State = 1346;
				attributeNamespace();
				State = 1347;
				Match(Doublecolon);
				}
				break;
			}
			State = 1351;
			Match(Identifier);
			State = 1353;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LeftParen) {
				{
				State = 1352;
				attributeArgumentClause();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AttributeNamespaceContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(CPP14Parser.Identifier, 0); }
		public AttributeNamespaceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_attributeNamespace; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14ParserListener typedListener = listener as ICPP14ParserListener;
			if (typedListener != null) typedListener.EnterAttributeNamespace(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14ParserListener typedListener = listener as ICPP14ParserListener;
			if (typedListener != null) typedListener.ExitAttributeNamespace(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICPP14ParserVisitor<TResult> typedVisitor = visitor as ICPP14ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAttributeNamespace(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AttributeNamespaceContext attributeNamespace() {
		AttributeNamespaceContext _localctx = new AttributeNamespaceContext(Context, State);
		EnterRule(_localctx, 214, RULE_attributeNamespace);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1355;
			Match(Identifier);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AttributeArgumentClauseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LeftParen() { return GetToken(CPP14Parser.LeftParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RightParen() { return GetToken(CPP14Parser.RightParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BalancedTokenSeqContext balancedTokenSeq() {
			return GetRuleContext<BalancedTokenSeqContext>(0);
		}
		public AttributeArgumentClauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_attributeArgumentClause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14ParserListener typedListener = listener as ICPP14ParserListener;
			if (typedListener != null) typedListener.EnterAttributeArgumentClause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14ParserListener typedListener = listener as ICPP14ParserListener;
			if (typedListener != null) typedListener.ExitAttributeArgumentClause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICPP14ParserVisitor<TResult> typedVisitor = visitor as ICPP14ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAttributeArgumentClause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AttributeArgumentClauseContext attributeArgumentClause() {
		AttributeArgumentClauseContext _localctx = new AttributeArgumentClauseContext(Context, State);
		EnterRule(_localctx, 216, RULE_attributeArgumentClause);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1357;
			Match(LeftParen);
			State = 1359;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << IntegerLiteral) | (1L << CharacterLiteral) | (1L << FloatingLiteral) | (1L << StringLiteral) | (1L << BooleanLiteral) | (1L << PointerLiteral) | (1L << UserDefinedLiteral) | (1L << MultiLineMacro) | (1L << Directive) | (1L << Alignas) | (1L << Alignof) | (1L << Asm) | (1L << Auto) | (1L << Bool) | (1L << Break) | (1L << Case) | (1L << Catch) | (1L << Char) | (1L << Char16) | (1L << Char32) | (1L << Class) | (1L << Const) | (1L << Constexpr) | (1L << Const_cast) | (1L << Continue) | (1L << Decltype) | (1L << Default) | (1L << Delete) | (1L << Do) | (1L << Double) | (1L << Dynamic_cast) | (1L << Else) | (1L << Enum) | (1L << Explicit) | (1L << Export) | (1L << Extern) | (1L << False_) | (1L << Final) | (1L << Float) | (1L << For) | (1L << Friend) | (1L << Goto) | (1L << If) | (1L << Inline) | (1L << Int) | (1L << Long) | (1L << Mutable) | (1L << Namespace) | (1L << New) | (1L << Noexcept) | (1L << Nullptr) | (1L << Operator) | (1L << Override) | (1L << Private) | (1L << Protected) | (1L << Public) | (1L << Register) | (1L << Reinterpret_cast) | (1L << Return) | (1L << Short) | (1L << Signed) | (1L << Sizeof) | (1L << Static))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (Static_assert - 64)) | (1L << (Static_cast - 64)) | (1L << (Struct - 64)) | (1L << (Switch - 64)) | (1L << (Template - 64)) | (1L << (This - 64)) | (1L << (Thread_local - 64)) | (1L << (Throw - 64)) | (1L << (True_ - 64)) | (1L << (Try - 64)) | (1L << (Typedef - 64)) | (1L << (Typeid_ - 64)) | (1L << (Typename_ - 64)) | (1L << (Union - 64)) | (1L << (Unsigned - 64)) | (1L << (Using - 64)) | (1L << (Virtual - 64)) | (1L << (Void - 64)) | (1L << (Volatile - 64)) | (1L << (Wchar - 64)) | (1L << (While - 64)) | (1L << (LeftParen - 64)) | (1L << (LeftBracket - 64)) | (1L << (LeftBrace - 64)) | (1L << (Plus - 64)) | (1L << (Minus - 64)) | (1L << (Star - 64)) | (1L << (Div - 64)) | (1L << (Mod - 64)) | (1L << (Caret - 64)) | (1L << (And - 64)) | (1L << (Or - 64)) | (1L << (Tilde - 64)) | (1L << (Not - 64)) | (1L << (Assign - 64)) | (1L << (Less - 64)) | (1L << (Greater - 64)) | (1L << (PlusAssign - 64)) | (1L << (MinusAssign - 64)) | (1L << (StarAssign - 64)) | (1L << (DivAssign - 64)) | (1L << (ModAssign - 64)) | (1L << (XorAssign - 64)) | (1L << (AndAssign - 64)) | (1L << (OrAssign - 64)) | (1L << (LeftShiftAssign - 64)) | (1L << (RightShiftAssign - 64)) | (1L << (Equal - 64)) | (1L << (NotEqual - 64)) | (1L << (LessEqual - 64)) | (1L << (GreaterEqual - 64)) | (1L << (AndAnd - 64)) | (1L << (OrOr - 64)) | (1L << (PlusPlus - 64)) | (1L << (MinusMinus - 64)) | (1L << (Comma - 64)) | (1L << (ArrowStar - 64)) | (1L << (Arrow - 64)) | (1L << (Question - 64)) | (1L << (Colon - 64)) | (1L << (Doublecolon - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (Semi - 128)) | (1L << (Dot - 128)) | (1L << (DotStar - 128)) | (1L << (Ellipsis - 128)) | (1L << (Identifier - 128)) | (1L << (DecimalLiteral - 128)) | (1L << (OctalLiteral - 128)) | (1L << (HexadecimalLiteral - 128)) | (1L << (BinaryLiteral - 128)) | (1L << (Integersuffix - 128)) | (1L << (UserDefinedIntegerLiteral - 128)) | (1L << (UserDefinedFloatingLiteral - 128)) | (1L << (UserDefinedStringLiteral - 128)) | (1L << (UserDefinedCharacterLiteral - 128)) | (1L << (Whitespace - 128)) | (1L << (Newline - 128)) | (1L << (BlockComment - 128)) | (1L << (LineComment - 128)))) != 0)) {
				{
				State = 1358;
				balancedTokenSeq();
				}
			}

			State = 1361;
			Match(RightParen);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BalancedTokenSeqContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public BalancedtokenContext[] balancedtoken() {
			return GetRuleContexts<BalancedtokenContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public BalancedtokenContext balancedtoken(int i) {
			return GetRuleContext<BalancedtokenContext>(i);
		}
		public BalancedTokenSeqContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_balancedTokenSeq; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14ParserListener typedListener = listener as ICPP14ParserListener;
			if (typedListener != null) typedListener.EnterBalancedTokenSeq(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14ParserListener typedListener = listener as ICPP14ParserListener;
			if (typedListener != null) typedListener.ExitBalancedTokenSeq(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICPP14ParserVisitor<TResult> typedVisitor = visitor as ICPP14ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBalancedTokenSeq(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BalancedTokenSeqContext balancedTokenSeq() {
		BalancedTokenSeqContext _localctx = new BalancedTokenSeqContext(Context, State);
		EnterRule(_localctx, 218, RULE_balancedTokenSeq);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1364;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 1363;
				balancedtoken();
				}
				}
				State = 1366;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << IntegerLiteral) | (1L << CharacterLiteral) | (1L << FloatingLiteral) | (1L << StringLiteral) | (1L << BooleanLiteral) | (1L << PointerLiteral) | (1L << UserDefinedLiteral) | (1L << MultiLineMacro) | (1L << Directive) | (1L << Alignas) | (1L << Alignof) | (1L << Asm) | (1L << Auto) | (1L << Bool) | (1L << Break) | (1L << Case) | (1L << Catch) | (1L << Char) | (1L << Char16) | (1L << Char32) | (1L << Class) | (1L << Const) | (1L << Constexpr) | (1L << Const_cast) | (1L << Continue) | (1L << Decltype) | (1L << Default) | (1L << Delete) | (1L << Do) | (1L << Double) | (1L << Dynamic_cast) | (1L << Else) | (1L << Enum) | (1L << Explicit) | (1L << Export) | (1L << Extern) | (1L << False_) | (1L << Final) | (1L << Float) | (1L << For) | (1L << Friend) | (1L << Goto) | (1L << If) | (1L << Inline) | (1L << Int) | (1L << Long) | (1L << Mutable) | (1L << Namespace) | (1L << New) | (1L << Noexcept) | (1L << Nullptr) | (1L << Operator) | (1L << Override) | (1L << Private) | (1L << Protected) | (1L << Public) | (1L << Register) | (1L << Reinterpret_cast) | (1L << Return) | (1L << Short) | (1L << Signed) | (1L << Sizeof) | (1L << Static))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (Static_assert - 64)) | (1L << (Static_cast - 64)) | (1L << (Struct - 64)) | (1L << (Switch - 64)) | (1L << (Template - 64)) | (1L << (This - 64)) | (1L << (Thread_local - 64)) | (1L << (Throw - 64)) | (1L << (True_ - 64)) | (1L << (Try - 64)) | (1L << (Typedef - 64)) | (1L << (Typeid_ - 64)) | (1L << (Typename_ - 64)) | (1L << (Union - 64)) | (1L << (Unsigned - 64)) | (1L << (Using - 64)) | (1L << (Virtual - 64)) | (1L << (Void - 64)) | (1L << (Volatile - 64)) | (1L << (Wchar - 64)) | (1L << (While - 64)) | (1L << (LeftParen - 64)) | (1L << (LeftBracket - 64)) | (1L << (LeftBrace - 64)) | (1L << (Plus - 64)) | (1L << (Minus - 64)) | (1L << (Star - 64)) | (1L << (Div - 64)) | (1L << (Mod - 64)) | (1L << (Caret - 64)) | (1L << (And - 64)) | (1L << (Or - 64)) | (1L << (Tilde - 64)) | (1L << (Not - 64)) | (1L << (Assign - 64)) | (1L << (Less - 64)) | (1L << (Greater - 64)) | (1L << (PlusAssign - 64)) | (1L << (MinusAssign - 64)) | (1L << (StarAssign - 64)) | (1L << (DivAssign - 64)) | (1L << (ModAssign - 64)) | (1L << (XorAssign - 64)) | (1L << (AndAssign - 64)) | (1L << (OrAssign - 64)) | (1L << (LeftShiftAssign - 64)) | (1L << (RightShiftAssign - 64)) | (1L << (Equal - 64)) | (1L << (NotEqual - 64)) | (1L << (LessEqual - 64)) | (1L << (GreaterEqual - 64)) | (1L << (AndAnd - 64)) | (1L << (OrOr - 64)) | (1L << (PlusPlus - 64)) | (1L << (MinusMinus - 64)) | (1L << (Comma - 64)) | (1L << (ArrowStar - 64)) | (1L << (Arrow - 64)) | (1L << (Question - 64)) | (1L << (Colon - 64)) | (1L << (Doublecolon - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (Semi - 128)) | (1L << (Dot - 128)) | (1L << (DotStar - 128)) | (1L << (Ellipsis - 128)) | (1L << (Identifier - 128)) | (1L << (DecimalLiteral - 128)) | (1L << (OctalLiteral - 128)) | (1L << (HexadecimalLiteral - 128)) | (1L << (BinaryLiteral - 128)) | (1L << (Integersuffix - 128)) | (1L << (UserDefinedIntegerLiteral - 128)) | (1L << (UserDefinedFloatingLiteral - 128)) | (1L << (UserDefinedStringLiteral - 128)) | (1L << (UserDefinedCharacterLiteral - 128)) | (1L << (Whitespace - 128)) | (1L << (Newline - 128)) | (1L << (BlockComment - 128)) | (1L << (LineComment - 128)))) != 0) );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BalancedtokenContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] LeftParen() { return GetTokens(CPP14Parser.LeftParen); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LeftParen(int i) {
			return GetToken(CPP14Parser.LeftParen, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BalancedTokenSeqContext balancedTokenSeq() {
			return GetRuleContext<BalancedTokenSeqContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] RightParen() { return GetTokens(CPP14Parser.RightParen); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RightParen(int i) {
			return GetToken(CPP14Parser.RightParen, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] LeftBracket() { return GetTokens(CPP14Parser.LeftBracket); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LeftBracket(int i) {
			return GetToken(CPP14Parser.LeftBracket, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] RightBracket() { return GetTokens(CPP14Parser.RightBracket); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RightBracket(int i) {
			return GetToken(CPP14Parser.RightBracket, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] LeftBrace() { return GetTokens(CPP14Parser.LeftBrace); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LeftBrace(int i) {
			return GetToken(CPP14Parser.LeftBrace, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] RightBrace() { return GetTokens(CPP14Parser.RightBrace); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RightBrace(int i) {
			return GetToken(CPP14Parser.RightBrace, i);
		}
		public BalancedtokenContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_balancedtoken; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14ParserListener typedListener = listener as ICPP14ParserListener;
			if (typedListener != null) typedListener.EnterBalancedtoken(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14ParserListener typedListener = listener as ICPP14ParserListener;
			if (typedListener != null) typedListener.ExitBalancedtoken(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICPP14ParserVisitor<TResult> typedVisitor = visitor as ICPP14ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBalancedtoken(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BalancedtokenContext balancedtoken() {
		BalancedtokenContext _localctx = new BalancedtokenContext(Context, State);
		EnterRule(_localctx, 220, RULE_balancedtoken);
		int _la;
		try {
			int _alt;
			State = 1385;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case LeftParen:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1368;
				Match(LeftParen);
				State = 1369;
				balancedTokenSeq();
				State = 1370;
				Match(RightParen);
				}
				break;
			case LeftBracket:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1372;
				Match(LeftBracket);
				State = 1373;
				balancedTokenSeq();
				State = 1374;
				Match(RightBracket);
				}
				break;
			case LeftBrace:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1376;
				Match(LeftBrace);
				State = 1377;
				balancedTokenSeq();
				State = 1378;
				Match(RightBrace);
				}
				break;
			case IntegerLiteral:
			case CharacterLiteral:
			case FloatingLiteral:
			case StringLiteral:
			case BooleanLiteral:
			case PointerLiteral:
			case UserDefinedLiteral:
			case MultiLineMacro:
			case Directive:
			case Alignas:
			case Alignof:
			case Asm:
			case Auto:
			case Bool:
			case Break:
			case Case:
			case Catch:
			case Char:
			case Char16:
			case Char32:
			case Class:
			case Const:
			case Constexpr:
			case Const_cast:
			case Continue:
			case Decltype:
			case Default:
			case Delete:
			case Do:
			case Double:
			case Dynamic_cast:
			case Else:
			case Enum:
			case Explicit:
			case Export:
			case Extern:
			case False_:
			case Final:
			case Float:
			case For:
			case Friend:
			case Goto:
			case If:
			case Inline:
			case Int:
			case Long:
			case Mutable:
			case Namespace:
			case New:
			case Noexcept:
			case Nullptr:
			case Operator:
			case Override:
			case Private:
			case Protected:
			case Public:
			case Register:
			case Reinterpret_cast:
			case Return:
			case Short:
			case Signed:
			case Sizeof:
			case Static:
			case Static_assert:
			case Static_cast:
			case Struct:
			case Switch:
			case Template:
			case This:
			case Thread_local:
			case Throw:
			case True_:
			case Try:
			case Typedef:
			case Typeid_:
			case Typename_:
			case Union:
			case Unsigned:
			case Using:
			case Virtual:
			case Void:
			case Volatile:
			case Wchar:
			case While:
			case Plus:
			case Minus:
			case Star:
			case Div:
			case Mod:
			case Caret:
			case And:
			case Or:
			case Tilde:
			case Not:
			case Assign:
			case Less:
			case Greater:
			case PlusAssign:
			case MinusAssign:
			case StarAssign:
			case DivAssign:
			case ModAssign:
			case XorAssign:
			case AndAssign:
			case OrAssign:
			case LeftShiftAssign:
			case RightShiftAssign:
			case Equal:
			case NotEqual:
			case LessEqual:
			case GreaterEqual:
			case AndAnd:
			case OrOr:
			case PlusPlus:
			case MinusMinus:
			case Comma:
			case ArrowStar:
			case Arrow:
			case Question:
			case Colon:
			case Doublecolon:
			case Semi:
			case Dot:
			case DotStar:
			case Ellipsis:
			case Identifier:
			case DecimalLiteral:
			case OctalLiteral:
			case HexadecimalLiteral:
			case BinaryLiteral:
			case Integersuffix:
			case UserDefinedIntegerLiteral:
			case UserDefinedFloatingLiteral:
			case UserDefinedStringLiteral:
			case UserDefinedCharacterLiteral:
			case Whitespace:
			case Newline:
			case BlockComment:
			case LineComment:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1381;
				ErrorHandler.Sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						State = 1380;
						_la = TokenStream.LA(1);
						if ( _la <= 0 || (((((_la - 85)) & ~0x3f) == 0 && ((1L << (_la - 85)) & ((1L << (LeftParen - 85)) | (1L << (RightParen - 85)) | (1L << (LeftBracket - 85)) | (1L << (RightBracket - 85)) | (1L << (LeftBrace - 85)) | (1L << (RightBrace - 85)))) != 0)) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 1383;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,164,Context);
				} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InitDeclaratorListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public InitDeclaratorContext[] initDeclarator() {
			return GetRuleContexts<InitDeclaratorContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public InitDeclaratorContext initDeclarator(int i) {
			return GetRuleContext<InitDeclaratorContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Comma() { return GetTokens(CPP14Parser.Comma); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comma(int i) {
			return GetToken(CPP14Parser.Comma, i);
		}
		public InitDeclaratorListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_initDeclaratorList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14ParserListener typedListener = listener as ICPP14ParserListener;
			if (typedListener != null) typedListener.EnterInitDeclaratorList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14ParserListener typedListener = listener as ICPP14ParserListener;
			if (typedListener != null) typedListener.ExitInitDeclaratorList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICPP14ParserVisitor<TResult> typedVisitor = visitor as ICPP14ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInitDeclaratorList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InitDeclaratorListContext initDeclaratorList() {
		InitDeclaratorListContext _localctx = new InitDeclaratorListContext(Context, State);
		EnterRule(_localctx, 222, RULE_initDeclaratorList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1387;
			initDeclarator();
			State = 1392;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==Comma) {
				{
				{
				State = 1388;
				Match(Comma);
				State = 1389;
				initDeclarator();
				}
				}
				State = 1394;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InitDeclaratorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public DeclaratorContext declarator() {
			return GetRuleContext<DeclaratorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public InitializerContext initializer() {
			return GetRuleContext<InitializerContext>(0);
		}
		public InitDeclaratorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_initDeclarator; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14ParserListener typedListener = listener as ICPP14ParserListener;
			if (typedListener != null) typedListener.EnterInitDeclarator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14ParserListener typedListener = listener as ICPP14ParserListener;
			if (typedListener != null) typedListener.ExitInitDeclarator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICPP14ParserVisitor<TResult> typedVisitor = visitor as ICPP14ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInitDeclarator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InitDeclaratorContext initDeclarator() {
		InitDeclaratorContext _localctx = new InitDeclaratorContext(Context, State);
		EnterRule(_localctx, 224, RULE_initDeclarator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1395;
			declarator();
			State = 1397;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (((((_la - 85)) & ~0x3f) == 0 && ((1L << (_la - 85)) & ((1L << (LeftParen - 85)) | (1L << (LeftBrace - 85)) | (1L << (Assign - 85)))) != 0)) {
				{
				State = 1396;
				initializer();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeclaratorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public PointerDeclaratorContext pointerDeclarator() {
			return GetRuleContext<PointerDeclaratorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NoPointerDeclaratorContext noPointerDeclarator() {
			return GetRuleContext<NoPointerDeclaratorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ParametersAndQualifiersContext parametersAndQualifiers() {
			return GetRuleContext<ParametersAndQualifiersContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TrailingReturnTypeContext trailingReturnType() {
			return GetRuleContext<TrailingReturnTypeContext>(0);
		}
		public DeclaratorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_declarator; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14ParserListener typedListener = listener as ICPP14ParserListener;
			if (typedListener != null) typedListener.EnterDeclarator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14ParserListener typedListener = listener as ICPP14ParserListener;
			if (typedListener != null) typedListener.ExitDeclarator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICPP14ParserVisitor<TResult> typedVisitor = visitor as ICPP14ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeclarator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DeclaratorContext declarator() {
		DeclaratorContext _localctx = new DeclaratorContext(Context, State);
		EnterRule(_localctx, 226, RULE_declarator);
		try {
			State = 1404;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,168,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1399;
				pointerDeclarator();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1400;
				noPointerDeclarator(0);
				State = 1401;
				parametersAndQualifiers();
				State = 1402;
				trailingReturnType();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PointerDeclaratorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public NoPointerDeclaratorContext noPointerDeclarator() {
			return GetRuleContext<NoPointerDeclaratorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PointerOperatorContext[] pointerOperator() {
			return GetRuleContexts<PointerOperatorContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public PointerOperatorContext pointerOperator(int i) {
			return GetRuleContext<PointerOperatorContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Const() { return GetTokens(CPP14Parser.Const); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Const(int i) {
			return GetToken(CPP14Parser.Const, i);
		}
		public PointerDeclaratorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pointerDeclarator; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14ParserListener typedListener = listener as ICPP14ParserListener;
			if (typedListener != null) typedListener.EnterPointerDeclarator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14ParserListener typedListener = listener as ICPP14ParserListener;
			if (typedListener != null) typedListener.ExitPointerDeclarator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICPP14ParserVisitor<TResult> typedVisitor = visitor as ICPP14ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPointerDeclarator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PointerDeclaratorContext pointerDeclarator() {
		PointerDeclaratorContext _localctx = new PointerDeclaratorContext(Context, State);
		EnterRule(_localctx, 228, RULE_pointerDeclarator);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1412;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,170,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 1406;
					pointerOperator();
					State = 1408;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==Const) {
						{
						State = 1407;
						Match(Const);
						}
					}

					}
					} 
				}
				State = 1414;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,170,Context);
			}
			State = 1415;
			noPointerDeclarator(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NoPointerDeclaratorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public DeclaratoridContext declaratorid() {
			return GetRuleContext<DeclaratoridContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AttributeSpecifierSeqContext attributeSpecifierSeq() {
			return GetRuleContext<AttributeSpecifierSeqContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LeftParen() { return GetToken(CPP14Parser.LeftParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public PointerDeclaratorContext pointerDeclarator() {
			return GetRuleContext<PointerDeclaratorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RightParen() { return GetToken(CPP14Parser.RightParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NoPointerDeclaratorContext noPointerDeclarator() {
			return GetRuleContext<NoPointerDeclaratorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ParametersAndQualifiersContext parametersAndQualifiers() {
			return GetRuleContext<ParametersAndQualifiersContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LeftBracket() { return GetToken(CPP14Parser.LeftBracket, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RightBracket() { return GetToken(CPP14Parser.RightBracket, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ConstantExpressionContext constantExpression() {
			return GetRuleContext<ConstantExpressionContext>(0);
		}
		public NoPointerDeclaratorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_noPointerDeclarator; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14ParserListener typedListener = listener as ICPP14ParserListener;
			if (typedListener != null) typedListener.EnterNoPointerDeclarator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14ParserListener typedListener = listener as ICPP14ParserListener;
			if (typedListener != null) typedListener.ExitNoPointerDeclarator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICPP14ParserVisitor<TResult> typedVisitor = visitor as ICPP14ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNoPointerDeclarator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NoPointerDeclaratorContext noPointerDeclarator() {
		return noPointerDeclarator(0);
	}

	private NoPointerDeclaratorContext noPointerDeclarator(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		NoPointerDeclaratorContext _localctx = new NoPointerDeclaratorContext(Context, _parentState);
		NoPointerDeclaratorContext _prevctx = _localctx;
		int _startState = 230;
		EnterRecursionRule(_localctx, 230, RULE_noPointerDeclarator, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1426;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case Decltype:
			case Operator:
			case Tilde:
			case Doublecolon:
			case Ellipsis:
			case Identifier:
				{
				State = 1418;
				declaratorid();
				State = 1420;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,171,Context) ) {
				case 1:
					{
					State = 1419;
					attributeSpecifierSeq();
					}
					break;
				}
				}
				break;
			case LeftParen:
				{
				State = 1422;
				Match(LeftParen);
				State = 1423;
				pointerDeclarator();
				State = 1424;
				Match(RightParen);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 1442;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,176,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new NoPointerDeclaratorContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_noPointerDeclarator);
					State = 1428;
					if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
					State = 1438;
					ErrorHandler.Sync(this);
					switch (TokenStream.LA(1)) {
					case LeftParen:
						{
						State = 1429;
						parametersAndQualifiers();
						}
						break;
					case LeftBracket:
						{
						State = 1430;
						Match(LeftBracket);
						State = 1432;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << IntegerLiteral) | (1L << CharacterLiteral) | (1L << FloatingLiteral) | (1L << StringLiteral) | (1L << BooleanLiteral) | (1L << PointerLiteral) | (1L << UserDefinedLiteral) | (1L << Alignof) | (1L << Auto) | (1L << Bool) | (1L << Char) | (1L << Char16) | (1L << Char32) | (1L << Const_cast) | (1L << Decltype) | (1L << Delete) | (1L << Double) | (1L << Dynamic_cast) | (1L << Float) | (1L << Int) | (1L << Long) | (1L << New) | (1L << Noexcept) | (1L << Operator) | (1L << Reinterpret_cast) | (1L << Short) | (1L << Signed) | (1L << Sizeof))) != 0) || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & ((1L << (Static_cast - 65)) | (1L << (This - 65)) | (1L << (Typeid_ - 65)) | (1L << (Typename_ - 65)) | (1L << (Unsigned - 65)) | (1L << (Void - 65)) | (1L << (Wchar - 65)) | (1L << (LeftParen - 65)) | (1L << (LeftBracket - 65)) | (1L << (Plus - 65)) | (1L << (Minus - 65)) | (1L << (Star - 65)) | (1L << (And - 65)) | (1L << (Or - 65)) | (1L << (Tilde - 65)) | (1L << (Not - 65)) | (1L << (PlusPlus - 65)) | (1L << (MinusMinus - 65)) | (1L << (Doublecolon - 65)))) != 0) || _la==Identifier) {
							{
							State = 1431;
							constantExpression();
							}
						}

						State = 1434;
						Match(RightBracket);
						State = 1436;
						ErrorHandler.Sync(this);
						switch ( Interpreter.AdaptivePredict(TokenStream,174,Context) ) {
						case 1:
							{
							State = 1435;
							attributeSpecifierSeq();
							}
							break;
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
					} 
				}
				State = 1444;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,176,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class ParametersAndQualifiersContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LeftParen() { return GetToken(CPP14Parser.LeftParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RightParen() { return GetToken(CPP14Parser.RightParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ParameterDeclarationClauseContext parameterDeclarationClause() {
			return GetRuleContext<ParameterDeclarationClauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CvqualifierseqContext cvqualifierseq() {
			return GetRuleContext<CvqualifierseqContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RefqualifierContext refqualifier() {
			return GetRuleContext<RefqualifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExceptionSpecificationContext exceptionSpecification() {
			return GetRuleContext<ExceptionSpecificationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AttributeSpecifierSeqContext attributeSpecifierSeq() {
			return GetRuleContext<AttributeSpecifierSeqContext>(0);
		}
		public ParametersAndQualifiersContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parametersAndQualifiers; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14ParserListener typedListener = listener as ICPP14ParserListener;
			if (typedListener != null) typedListener.EnterParametersAndQualifiers(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14ParserListener typedListener = listener as ICPP14ParserListener;
			if (typedListener != null) typedListener.ExitParametersAndQualifiers(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICPP14ParserVisitor<TResult> typedVisitor = visitor as ICPP14ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParametersAndQualifiers(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ParametersAndQualifiersContext parametersAndQualifiers() {
		ParametersAndQualifiersContext _localctx = new ParametersAndQualifiersContext(Context, State);
		EnterRule(_localctx, 232, RULE_parametersAndQualifiers);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1445;
			Match(LeftParen);
			State = 1447;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (((((_la - 10)) & ~0x3f) == 0 && ((1L << (_la - 10)) & ((1L << (Alignas - 10)) | (1L << (Auto - 10)) | (1L << (Bool - 10)) | (1L << (Char - 10)) | (1L << (Char16 - 10)) | (1L << (Char32 - 10)) | (1L << (Class - 10)) | (1L << (Const - 10)) | (1L << (Constexpr - 10)) | (1L << (Decltype - 10)) | (1L << (Double - 10)) | (1L << (Enum - 10)) | (1L << (Explicit - 10)) | (1L << (Extern - 10)) | (1L << (Float - 10)) | (1L << (Friend - 10)) | (1L << (Inline - 10)) | (1L << (Int - 10)) | (1L << (Long - 10)) | (1L << (Mutable - 10)) | (1L << (Register - 10)) | (1L << (Short - 10)) | (1L << (Signed - 10)) | (1L << (Static - 10)) | (1L << (Struct - 10)) | (1L << (Thread_local - 10)))) != 0) || ((((_la - 74)) & ~0x3f) == 0 && ((1L << (_la - 74)) & ((1L << (Typedef - 74)) | (1L << (Typename_ - 74)) | (1L << (Union - 74)) | (1L << (Unsigned - 74)) | (1L << (Virtual - 74)) | (1L << (Void - 74)) | (1L << (Volatile - 74)) | (1L << (Wchar - 74)) | (1L << (LeftBracket - 74)) | (1L << (Doublecolon - 74)) | (1L << (Identifier - 74)))) != 0)) {
				{
				State = 1446;
				parameterDeclarationClause();
				}
			}

			State = 1449;
			Match(RightParen);
			State = 1451;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,178,Context) ) {
			case 1:
				{
				State = 1450;
				cvqualifierseq();
				}
				break;
			}
			State = 1454;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,179,Context) ) {
			case 1:
				{
				State = 1453;
				refqualifier();
				}
				break;
			}
			State = 1457;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,180,Context) ) {
			case 1:
				{
				State = 1456;
				exceptionSpecification();
				}
				break;
			}
			State = 1460;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,181,Context) ) {
			case 1:
				{
				State = 1459;
				attributeSpecifierSeq();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TrailingReturnTypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Arrow() { return GetToken(CPP14Parser.Arrow, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TrailingTypeSpecifierSeqContext trailingTypeSpecifierSeq() {
			return GetRuleContext<TrailingTypeSpecifierSeqContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AbstractDeclaratorContext abstractDeclarator() {
			return GetRuleContext<AbstractDeclaratorContext>(0);
		}
		public TrailingReturnTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_trailingReturnType; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14ParserListener typedListener = listener as ICPP14ParserListener;
			if (typedListener != null) typedListener.EnterTrailingReturnType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14ParserListener typedListener = listener as ICPP14ParserListener;
			if (typedListener != null) typedListener.ExitTrailingReturnType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICPP14ParserVisitor<TResult> typedVisitor = visitor as ICPP14ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTrailingReturnType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TrailingReturnTypeContext trailingReturnType() {
		TrailingReturnTypeContext _localctx = new TrailingReturnTypeContext(Context, State);
		EnterRule(_localctx, 234, RULE_trailingReturnType);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1462;
			Match(Arrow);
			State = 1463;
			trailingTypeSpecifierSeq();
			State = 1465;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,182,Context) ) {
			case 1:
				{
				State = 1464;
				abstractDeclarator();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PointerOperatorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode And() { return GetToken(CPP14Parser.And, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AndAnd() { return GetToken(CPP14Parser.AndAnd, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public AttributeSpecifierSeqContext attributeSpecifierSeq() {
			return GetRuleContext<AttributeSpecifierSeqContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Star() { return GetToken(CPP14Parser.Star, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NestedNameSpecifierContext nestedNameSpecifier() {
			return GetRuleContext<NestedNameSpecifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CvqualifierseqContext cvqualifierseq() {
			return GetRuleContext<CvqualifierseqContext>(0);
		}
		public PointerOperatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pointerOperator; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14ParserListener typedListener = listener as ICPP14ParserListener;
			if (typedListener != null) typedListener.EnterPointerOperator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14ParserListener typedListener = listener as ICPP14ParserListener;
			if (typedListener != null) typedListener.ExitPointerOperator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICPP14ParserVisitor<TResult> typedVisitor = visitor as ICPP14ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPointerOperator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PointerOperatorContext pointerOperator() {
		PointerOperatorContext _localctx = new PointerOperatorContext(Context, State);
		EnterRule(_localctx, 236, RULE_pointerOperator);
		int _la;
		try {
			State = 1481;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case And:
			case AndAnd:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1467;
				_la = TokenStream.LA(1);
				if ( !(_la==And || _la==AndAnd) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 1469;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,183,Context) ) {
				case 1:
					{
					State = 1468;
					attributeSpecifierSeq();
					}
					break;
				}
				}
				break;
			case Decltype:
			case Star:
			case Doublecolon:
			case Identifier:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1472;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==Decltype || _la==Doublecolon || _la==Identifier) {
					{
					State = 1471;
					nestedNameSpecifier(0);
					}
				}

				State = 1474;
				Match(Star);
				State = 1476;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,185,Context) ) {
				case 1:
					{
					State = 1475;
					attributeSpecifierSeq();
					}
					break;
				}
				State = 1479;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,186,Context) ) {
				case 1:
					{
					State = 1478;
					cvqualifierseq();
					}
					break;
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CvqualifierseqContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public CvQualifierContext[] cvQualifier() {
			return GetRuleContexts<CvQualifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public CvQualifierContext cvQualifier(int i) {
			return GetRuleContext<CvQualifierContext>(i);
		}
		public CvqualifierseqContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_cvqualifierseq; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14ParserListener typedListener = listener as ICPP14ParserListener;
			if (typedListener != null) typedListener.EnterCvqualifierseq(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14ParserListener typedListener = listener as ICPP14ParserListener;
			if (typedListener != null) typedListener.ExitCvqualifierseq(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICPP14ParserVisitor<TResult> typedVisitor = visitor as ICPP14ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCvqualifierseq(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CvqualifierseqContext cvqualifierseq() {
		CvqualifierseqContext _localctx = new CvqualifierseqContext(Context, State);
		EnterRule(_localctx, 238, RULE_cvqualifierseq);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1484;
			ErrorHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 1483;
					cvQualifier();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 1486;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,188,Context);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CvQualifierContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Const() { return GetToken(CPP14Parser.Const, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Volatile() { return GetToken(CPP14Parser.Volatile, 0); }
		public CvQualifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_cvQualifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14ParserListener typedListener = listener as ICPP14ParserListener;
			if (typedListener != null) typedListener.EnterCvQualifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14ParserListener typedListener = listener as ICPP14ParserListener;
			if (typedListener != null) typedListener.ExitCvQualifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICPP14ParserVisitor<TResult> typedVisitor = visitor as ICPP14ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCvQualifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CvQualifierContext cvQualifier() {
		CvQualifierContext _localctx = new CvQualifierContext(Context, State);
		EnterRule(_localctx, 240, RULE_cvQualifier);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1488;
			_la = TokenStream.LA(1);
			if ( !(_la==Const || _la==Volatile) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RefqualifierContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode And() { return GetToken(CPP14Parser.And, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AndAnd() { return GetToken(CPP14Parser.AndAnd, 0); }
		public RefqualifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_refqualifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14ParserListener typedListener = listener as ICPP14ParserListener;
			if (typedListener != null) typedListener.EnterRefqualifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14ParserListener typedListener = listener as ICPP14ParserListener;
			if (typedListener != null) typedListener.ExitRefqualifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICPP14ParserVisitor<TResult> typedVisitor = visitor as ICPP14ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRefqualifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RefqualifierContext refqualifier() {
		RefqualifierContext _localctx = new RefqualifierContext(Context, State);
		EnterRule(_localctx, 242, RULE_refqualifier);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1490;
			_la = TokenStream.LA(1);
			if ( !(_la==And || _la==AndAnd) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeclaratoridContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdExpressionContext idExpression() {
			return GetRuleContext<IdExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Ellipsis() { return GetToken(CPP14Parser.Ellipsis, 0); }
		public DeclaratoridContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_declaratorid; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14ParserListener typedListener = listener as ICPP14ParserListener;
			if (typedListener != null) typedListener.EnterDeclaratorid(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14ParserListener typedListener = listener as ICPP14ParserListener;
			if (typedListener != null) typedListener.ExitDeclaratorid(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICPP14ParserVisitor<TResult> typedVisitor = visitor as ICPP14ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeclaratorid(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DeclaratoridContext declaratorid() {
		DeclaratoridContext _localctx = new DeclaratoridContext(Context, State);
		EnterRule(_localctx, 244, RULE_declaratorid);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1493;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Ellipsis) {
				{
				State = 1492;
				Match(Ellipsis);
				}
			}

			State = 1495;
			idExpression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TheTypeIdContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypeSpecifierSeqContext typeSpecifierSeq() {
			return GetRuleContext<TypeSpecifierSeqContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AbstractDeclaratorContext abstractDeclarator() {
			return GetRuleContext<AbstractDeclaratorContext>(0);
		}
		public TheTypeIdContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_theTypeId; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14ParserListener typedListener = listener as ICPP14ParserListener;
			if (typedListener != null) typedListener.EnterTheTypeId(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14ParserListener typedListener = listener as ICPP14ParserListener;
			if (typedListener != null) typedListener.ExitTheTypeId(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICPP14ParserVisitor<TResult> typedVisitor = visitor as ICPP14ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTheTypeId(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TheTypeIdContext theTypeId() {
		TheTypeIdContext _localctx = new TheTypeIdContext(Context, State);
		EnterRule(_localctx, 246, RULE_theTypeId);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1497;
			typeSpecifierSeq();
			State = 1499;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,190,Context) ) {
			case 1:
				{
				State = 1498;
				abstractDeclarator();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AbstractDeclaratorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public PointerAbstractDeclaratorContext pointerAbstractDeclarator() {
			return GetRuleContext<PointerAbstractDeclaratorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ParametersAndQualifiersContext parametersAndQualifiers() {
			return GetRuleContext<ParametersAndQualifiersContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TrailingReturnTypeContext trailingReturnType() {
			return GetRuleContext<TrailingReturnTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NoPointerAbstractDeclaratorContext noPointerAbstractDeclarator() {
			return GetRuleContext<NoPointerAbstractDeclaratorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AbstractPackDeclaratorContext abstractPackDeclarator() {
			return GetRuleContext<AbstractPackDeclaratorContext>(0);
		}
		public AbstractDeclaratorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_abstractDeclarator; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14ParserListener typedListener = listener as ICPP14ParserListener;
			if (typedListener != null) typedListener.EnterAbstractDeclarator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14ParserListener typedListener = listener as ICPP14ParserListener;
			if (typedListener != null) typedListener.ExitAbstractDeclarator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICPP14ParserVisitor<TResult> typedVisitor = visitor as ICPP14ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAbstractDeclarator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AbstractDeclaratorContext abstractDeclarator() {
		AbstractDeclaratorContext _localctx = new AbstractDeclaratorContext(Context, State);
		EnterRule(_localctx, 248, RULE_abstractDeclarator);
		try {
			State = 1509;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,192,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1501;
				pointerAbstractDeclarator();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1503;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,191,Context) ) {
				case 1:
					{
					State = 1502;
					noPointerAbstractDeclarator(0);
					}
					break;
				}
				State = 1505;
				parametersAndQualifiers();
				State = 1506;
				trailingReturnType();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1508;
				abstractPackDeclarator();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PointerAbstractDeclaratorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public NoPointerAbstractDeclaratorContext noPointerAbstractDeclarator() {
			return GetRuleContext<NoPointerAbstractDeclaratorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PointerOperatorContext[] pointerOperator() {
			return GetRuleContexts<PointerOperatorContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public PointerOperatorContext pointerOperator(int i) {
			return GetRuleContext<PointerOperatorContext>(i);
		}
		public PointerAbstractDeclaratorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pointerAbstractDeclarator; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14ParserListener typedListener = listener as ICPP14ParserListener;
			if (typedListener != null) typedListener.EnterPointerAbstractDeclarator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14ParserListener typedListener = listener as ICPP14ParserListener;
			if (typedListener != null) typedListener.ExitPointerAbstractDeclarator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICPP14ParserVisitor<TResult> typedVisitor = visitor as ICPP14ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPointerAbstractDeclarator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PointerAbstractDeclaratorContext pointerAbstractDeclarator() {
		PointerAbstractDeclaratorContext _localctx = new PointerAbstractDeclaratorContext(Context, State);
		EnterRule(_localctx, 250, RULE_pointerAbstractDeclarator);
		int _la;
		try {
			State = 1520;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case LeftParen:
			case LeftBracket:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1511;
				noPointerAbstractDeclarator(0);
				}
				break;
			case Decltype:
			case Star:
			case And:
			case AndAnd:
			case Doublecolon:
			case Identifier:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1513;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 1512;
					pointerOperator();
					}
					}
					State = 1515;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( _la==Decltype || ((((_la - 93)) & ~0x3f) == 0 && ((1L << (_la - 93)) & ((1L << (Star - 93)) | (1L << (And - 93)) | (1L << (AndAnd - 93)) | (1L << (Doublecolon - 93)) | (1L << (Identifier - 93)))) != 0) );
				State = 1518;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,194,Context) ) {
				case 1:
					{
					State = 1517;
					noPointerAbstractDeclarator(0);
					}
					break;
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NoPointerAbstractDeclaratorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ParametersAndQualifiersContext parametersAndQualifiers() {
			return GetRuleContext<ParametersAndQualifiersContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LeftBracket() { return GetToken(CPP14Parser.LeftBracket, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RightBracket() { return GetToken(CPP14Parser.RightBracket, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ConstantExpressionContext constantExpression() {
			return GetRuleContext<ConstantExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AttributeSpecifierSeqContext attributeSpecifierSeq() {
			return GetRuleContext<AttributeSpecifierSeqContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LeftParen() { return GetToken(CPP14Parser.LeftParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public PointerAbstractDeclaratorContext pointerAbstractDeclarator() {
			return GetRuleContext<PointerAbstractDeclaratorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RightParen() { return GetToken(CPP14Parser.RightParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NoPointerAbstractDeclaratorContext[] noPointerAbstractDeclarator() {
			return GetRuleContexts<NoPointerAbstractDeclaratorContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public NoPointerAbstractDeclaratorContext noPointerAbstractDeclarator(int i) {
			return GetRuleContext<NoPointerAbstractDeclaratorContext>(i);
		}
		public NoPointerAbstractDeclaratorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_noPointerAbstractDeclarator; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14ParserListener typedListener = listener as ICPP14ParserListener;
			if (typedListener != null) typedListener.EnterNoPointerAbstractDeclarator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14ParserListener typedListener = listener as ICPP14ParserListener;
			if (typedListener != null) typedListener.ExitNoPointerAbstractDeclarator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICPP14ParserVisitor<TResult> typedVisitor = visitor as ICPP14ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNoPointerAbstractDeclarator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NoPointerAbstractDeclaratorContext noPointerAbstractDeclarator() {
		return noPointerAbstractDeclarator(0);
	}

	private NoPointerAbstractDeclaratorContext noPointerAbstractDeclarator(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		NoPointerAbstractDeclaratorContext _localctx = new NoPointerAbstractDeclaratorContext(Context, _parentState);
		NoPointerAbstractDeclaratorContext _prevctx = _localctx;
		int _startState = 252;
		EnterRecursionRule(_localctx, 252, RULE_noPointerAbstractDeclarator, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1536;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,198,Context) ) {
			case 1:
				{
				State = 1523;
				parametersAndQualifiers();
				}
				break;
			case 2:
				{
				State = 1524;
				Match(LeftBracket);
				State = 1526;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << IntegerLiteral) | (1L << CharacterLiteral) | (1L << FloatingLiteral) | (1L << StringLiteral) | (1L << BooleanLiteral) | (1L << PointerLiteral) | (1L << UserDefinedLiteral) | (1L << Alignof) | (1L << Auto) | (1L << Bool) | (1L << Char) | (1L << Char16) | (1L << Char32) | (1L << Const_cast) | (1L << Decltype) | (1L << Delete) | (1L << Double) | (1L << Dynamic_cast) | (1L << Float) | (1L << Int) | (1L << Long) | (1L << New) | (1L << Noexcept) | (1L << Operator) | (1L << Reinterpret_cast) | (1L << Short) | (1L << Signed) | (1L << Sizeof))) != 0) || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & ((1L << (Static_cast - 65)) | (1L << (This - 65)) | (1L << (Typeid_ - 65)) | (1L << (Typename_ - 65)) | (1L << (Unsigned - 65)) | (1L << (Void - 65)) | (1L << (Wchar - 65)) | (1L << (LeftParen - 65)) | (1L << (LeftBracket - 65)) | (1L << (Plus - 65)) | (1L << (Minus - 65)) | (1L << (Star - 65)) | (1L << (And - 65)) | (1L << (Or - 65)) | (1L << (Tilde - 65)) | (1L << (Not - 65)) | (1L << (PlusPlus - 65)) | (1L << (MinusMinus - 65)) | (1L << (Doublecolon - 65)))) != 0) || _la==Identifier) {
					{
					State = 1525;
					constantExpression();
					}
				}

				State = 1528;
				Match(RightBracket);
				State = 1530;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,197,Context) ) {
				case 1:
					{
					State = 1529;
					attributeSpecifierSeq();
					}
					break;
				}
				}
				break;
			case 3:
				{
				State = 1532;
				Match(LeftParen);
				State = 1533;
				pointerAbstractDeclarator();
				State = 1534;
				Match(RightParen);
				}
				break;
			}
			Context.Stop = TokenStream.LT(-1);
			State = 1553;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,202,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new NoPointerAbstractDeclaratorContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_noPointerAbstractDeclarator);
					State = 1538;
					if (!(Precpred(Context, 4))) throw new FailedPredicateException(this, "Precpred(Context, 4)");
					State = 1549;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,201,Context) ) {
					case 1:
						{
						State = 1539;
						parametersAndQualifiers();
						}
						break;
					case 2:
						{
						State = 1540;
						noPointerAbstractDeclarator(0);
						State = 1541;
						Match(LeftBracket);
						State = 1543;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << IntegerLiteral) | (1L << CharacterLiteral) | (1L << FloatingLiteral) | (1L << StringLiteral) | (1L << BooleanLiteral) | (1L << PointerLiteral) | (1L << UserDefinedLiteral) | (1L << Alignof) | (1L << Auto) | (1L << Bool) | (1L << Char) | (1L << Char16) | (1L << Char32) | (1L << Const_cast) | (1L << Decltype) | (1L << Delete) | (1L << Double) | (1L << Dynamic_cast) | (1L << Float) | (1L << Int) | (1L << Long) | (1L << New) | (1L << Noexcept) | (1L << Operator) | (1L << Reinterpret_cast) | (1L << Short) | (1L << Signed) | (1L << Sizeof))) != 0) || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & ((1L << (Static_cast - 65)) | (1L << (This - 65)) | (1L << (Typeid_ - 65)) | (1L << (Typename_ - 65)) | (1L << (Unsigned - 65)) | (1L << (Void - 65)) | (1L << (Wchar - 65)) | (1L << (LeftParen - 65)) | (1L << (LeftBracket - 65)) | (1L << (Plus - 65)) | (1L << (Minus - 65)) | (1L << (Star - 65)) | (1L << (And - 65)) | (1L << (Or - 65)) | (1L << (Tilde - 65)) | (1L << (Not - 65)) | (1L << (PlusPlus - 65)) | (1L << (MinusMinus - 65)) | (1L << (Doublecolon - 65)))) != 0) || _la==Identifier) {
							{
							State = 1542;
							constantExpression();
							}
						}

						State = 1545;
						Match(RightBracket);
						State = 1547;
						ErrorHandler.Sync(this);
						switch ( Interpreter.AdaptivePredict(TokenStream,200,Context) ) {
						case 1:
							{
							State = 1546;
							attributeSpecifierSeq();
							}
							break;
						}
						}
						break;
					}
					}
					} 
				}
				State = 1555;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,202,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class AbstractPackDeclaratorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public NoPointerAbstractPackDeclaratorContext noPointerAbstractPackDeclarator() {
			return GetRuleContext<NoPointerAbstractPackDeclaratorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PointerOperatorContext[] pointerOperator() {
			return GetRuleContexts<PointerOperatorContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public PointerOperatorContext pointerOperator(int i) {
			return GetRuleContext<PointerOperatorContext>(i);
		}
		public AbstractPackDeclaratorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_abstractPackDeclarator; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14ParserListener typedListener = listener as ICPP14ParserListener;
			if (typedListener != null) typedListener.EnterAbstractPackDeclarator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14ParserListener typedListener = listener as ICPP14ParserListener;
			if (typedListener != null) typedListener.ExitAbstractPackDeclarator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICPP14ParserVisitor<TResult> typedVisitor = visitor as ICPP14ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAbstractPackDeclarator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AbstractPackDeclaratorContext abstractPackDeclarator() {
		AbstractPackDeclaratorContext _localctx = new AbstractPackDeclaratorContext(Context, State);
		EnterRule(_localctx, 254, RULE_abstractPackDeclarator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1559;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==Decltype || ((((_la - 93)) & ~0x3f) == 0 && ((1L << (_la - 93)) & ((1L << (Star - 93)) | (1L << (And - 93)) | (1L << (AndAnd - 93)) | (1L << (Doublecolon - 93)) | (1L << (Identifier - 93)))) != 0)) {
				{
				{
				State = 1556;
				pointerOperator();
				}
				}
				State = 1561;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 1562;
			noPointerAbstractPackDeclarator(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NoPointerAbstractPackDeclaratorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Ellipsis() { return GetToken(CPP14Parser.Ellipsis, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NoPointerAbstractPackDeclaratorContext noPointerAbstractPackDeclarator() {
			return GetRuleContext<NoPointerAbstractPackDeclaratorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ParametersAndQualifiersContext parametersAndQualifiers() {
			return GetRuleContext<ParametersAndQualifiersContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LeftBracket() { return GetToken(CPP14Parser.LeftBracket, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RightBracket() { return GetToken(CPP14Parser.RightBracket, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ConstantExpressionContext constantExpression() {
			return GetRuleContext<ConstantExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AttributeSpecifierSeqContext attributeSpecifierSeq() {
			return GetRuleContext<AttributeSpecifierSeqContext>(0);
		}
		public NoPointerAbstractPackDeclaratorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_noPointerAbstractPackDeclarator; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14ParserListener typedListener = listener as ICPP14ParserListener;
			if (typedListener != null) typedListener.EnterNoPointerAbstractPackDeclarator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14ParserListener typedListener = listener as ICPP14ParserListener;
			if (typedListener != null) typedListener.ExitNoPointerAbstractPackDeclarator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICPP14ParserVisitor<TResult> typedVisitor = visitor as ICPP14ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNoPointerAbstractPackDeclarator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NoPointerAbstractPackDeclaratorContext noPointerAbstractPackDeclarator() {
		return noPointerAbstractPackDeclarator(0);
	}

	private NoPointerAbstractPackDeclaratorContext noPointerAbstractPackDeclarator(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		NoPointerAbstractPackDeclaratorContext _localctx = new NoPointerAbstractPackDeclaratorContext(Context, _parentState);
		NoPointerAbstractPackDeclaratorContext _prevctx = _localctx;
		int _startState = 256;
		EnterRecursionRule(_localctx, 256, RULE_noPointerAbstractPackDeclarator, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 1565;
			Match(Ellipsis);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 1581;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,207,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new NoPointerAbstractPackDeclaratorContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_noPointerAbstractPackDeclarator);
					State = 1567;
					if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
					State = 1577;
					ErrorHandler.Sync(this);
					switch (TokenStream.LA(1)) {
					case LeftParen:
						{
						State = 1568;
						parametersAndQualifiers();
						}
						break;
					case LeftBracket:
						{
						State = 1569;
						Match(LeftBracket);
						State = 1571;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << IntegerLiteral) | (1L << CharacterLiteral) | (1L << FloatingLiteral) | (1L << StringLiteral) | (1L << BooleanLiteral) | (1L << PointerLiteral) | (1L << UserDefinedLiteral) | (1L << Alignof) | (1L << Auto) | (1L << Bool) | (1L << Char) | (1L << Char16) | (1L << Char32) | (1L << Const_cast) | (1L << Decltype) | (1L << Delete) | (1L << Double) | (1L << Dynamic_cast) | (1L << Float) | (1L << Int) | (1L << Long) | (1L << New) | (1L << Noexcept) | (1L << Operator) | (1L << Reinterpret_cast) | (1L << Short) | (1L << Signed) | (1L << Sizeof))) != 0) || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & ((1L << (Static_cast - 65)) | (1L << (This - 65)) | (1L << (Typeid_ - 65)) | (1L << (Typename_ - 65)) | (1L << (Unsigned - 65)) | (1L << (Void - 65)) | (1L << (Wchar - 65)) | (1L << (LeftParen - 65)) | (1L << (LeftBracket - 65)) | (1L << (Plus - 65)) | (1L << (Minus - 65)) | (1L << (Star - 65)) | (1L << (And - 65)) | (1L << (Or - 65)) | (1L << (Tilde - 65)) | (1L << (Not - 65)) | (1L << (PlusPlus - 65)) | (1L << (MinusMinus - 65)) | (1L << (Doublecolon - 65)))) != 0) || _la==Identifier) {
							{
							State = 1570;
							constantExpression();
							}
						}

						State = 1573;
						Match(RightBracket);
						State = 1575;
						ErrorHandler.Sync(this);
						switch ( Interpreter.AdaptivePredict(TokenStream,205,Context) ) {
						case 1:
							{
							State = 1574;
							attributeSpecifierSeq();
							}
							break;
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
					} 
				}
				State = 1583;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,207,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class ParameterDeclarationClauseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ParameterDeclarationListContext parameterDeclarationList() {
			return GetRuleContext<ParameterDeclarationListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Ellipsis() { return GetToken(CPP14Parser.Ellipsis, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comma() { return GetToken(CPP14Parser.Comma, 0); }
		public ParameterDeclarationClauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parameterDeclarationClause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14ParserListener typedListener = listener as ICPP14ParserListener;
			if (typedListener != null) typedListener.EnterParameterDeclarationClause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14ParserListener typedListener = listener as ICPP14ParserListener;
			if (typedListener != null) typedListener.ExitParameterDeclarationClause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICPP14ParserVisitor<TResult> typedVisitor = visitor as ICPP14ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParameterDeclarationClause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ParameterDeclarationClauseContext parameterDeclarationClause() {
		ParameterDeclarationClauseContext _localctx = new ParameterDeclarationClauseContext(Context, State);
		EnterRule(_localctx, 258, RULE_parameterDeclarationClause);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1584;
			parameterDeclarationList();
			State = 1589;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Comma || _la==Ellipsis) {
				{
				State = 1586;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==Comma) {
					{
					State = 1585;
					Match(Comma);
					}
				}

				State = 1588;
				Match(Ellipsis);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParameterDeclarationListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ParameterDeclarationContext[] parameterDeclaration() {
			return GetRuleContexts<ParameterDeclarationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ParameterDeclarationContext parameterDeclaration(int i) {
			return GetRuleContext<ParameterDeclarationContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Comma() { return GetTokens(CPP14Parser.Comma); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comma(int i) {
			return GetToken(CPP14Parser.Comma, i);
		}
		public ParameterDeclarationListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parameterDeclarationList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14ParserListener typedListener = listener as ICPP14ParserListener;
			if (typedListener != null) typedListener.EnterParameterDeclarationList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14ParserListener typedListener = listener as ICPP14ParserListener;
			if (typedListener != null) typedListener.ExitParameterDeclarationList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICPP14ParserVisitor<TResult> typedVisitor = visitor as ICPP14ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParameterDeclarationList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ParameterDeclarationListContext parameterDeclarationList() {
		ParameterDeclarationListContext _localctx = new ParameterDeclarationListContext(Context, State);
		EnterRule(_localctx, 260, RULE_parameterDeclarationList);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1591;
			parameterDeclaration();
			State = 1596;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,210,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 1592;
					Match(Comma);
					State = 1593;
					parameterDeclaration();
					}
					} 
				}
				State = 1598;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,210,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParameterDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public DeclSpecifierSeqContext declSpecifierSeq() {
			return GetRuleContext<DeclSpecifierSeqContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AttributeSpecifierSeqContext attributeSpecifierSeq() {
			return GetRuleContext<AttributeSpecifierSeqContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DeclaratorContext declarator() {
			return GetRuleContext<DeclaratorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Assign() { return GetToken(CPP14Parser.Assign, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public InitializerClauseContext initializerClause() {
			return GetRuleContext<InitializerClauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AbstractDeclaratorContext abstractDeclarator() {
			return GetRuleContext<AbstractDeclaratorContext>(0);
		}
		public ParameterDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parameterDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14ParserListener typedListener = listener as ICPP14ParserListener;
			if (typedListener != null) typedListener.EnterParameterDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14ParserListener typedListener = listener as ICPP14ParserListener;
			if (typedListener != null) typedListener.ExitParameterDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICPP14ParserVisitor<TResult> typedVisitor = visitor as ICPP14ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParameterDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ParameterDeclarationContext parameterDeclaration() {
		ParameterDeclarationContext _localctx = new ParameterDeclarationContext(Context, State);
		EnterRule(_localctx, 262, RULE_parameterDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1600;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Alignas || _la==LeftBracket) {
				{
				State = 1599;
				attributeSpecifierSeq();
				}
			}

			State = 1602;
			declSpecifierSeq();
			{
			State = 1607;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,213,Context) ) {
			case 1:
				{
				State = 1603;
				declarator();
				}
				break;
			case 2:
				{
				State = 1605;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,212,Context) ) {
				case 1:
					{
					State = 1604;
					abstractDeclarator();
					}
					break;
				}
				}
				break;
			}
			State = 1611;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Assign) {
				{
				State = 1609;
				Match(Assign);
				State = 1610;
				initializerClause();
				}
			}

			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionDefinitionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public DeclaratorContext declarator() {
			return GetRuleContext<DeclaratorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionBodyContext functionBody() {
			return GetRuleContext<FunctionBodyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AttributeSpecifierSeqContext attributeSpecifierSeq() {
			return GetRuleContext<AttributeSpecifierSeqContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DeclSpecifierSeqContext declSpecifierSeq() {
			return GetRuleContext<DeclSpecifierSeqContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public VirtualSpecifierSeqContext virtualSpecifierSeq() {
			return GetRuleContext<VirtualSpecifierSeqContext>(0);
		}
		public FunctionDefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionDefinition; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14ParserListener typedListener = listener as ICPP14ParserListener;
			if (typedListener != null) typedListener.EnterFunctionDefinition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14ParserListener typedListener = listener as ICPP14ParserListener;
			if (typedListener != null) typedListener.ExitFunctionDefinition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICPP14ParserVisitor<TResult> typedVisitor = visitor as ICPP14ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionDefinition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionDefinitionContext functionDefinition() {
		FunctionDefinitionContext _localctx = new FunctionDefinitionContext(Context, State);
		EnterRule(_localctx, 264, RULE_functionDefinition);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1614;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Alignas || _la==LeftBracket) {
				{
				State = 1613;
				attributeSpecifierSeq();
				}
			}

			State = 1617;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,216,Context) ) {
			case 1:
				{
				State = 1616;
				declSpecifierSeq();
				}
				break;
			}
			State = 1619;
			declarator();
			State = 1621;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Final || _la==Override) {
				{
				State = 1620;
				virtualSpecifierSeq();
				}
			}

			State = 1623;
			functionBody();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionBodyContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public CompoundStatementContext compoundStatement() {
			return GetRuleContext<CompoundStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ConstructorInitializerContext constructorInitializer() {
			return GetRuleContext<ConstructorInitializerContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionTryBlockContext functionTryBlock() {
			return GetRuleContext<FunctionTryBlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Assign() { return GetToken(CPP14Parser.Assign, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Semi() { return GetToken(CPP14Parser.Semi, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Default() { return GetToken(CPP14Parser.Default, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Delete() { return GetToken(CPP14Parser.Delete, 0); }
		public FunctionBodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionBody; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14ParserListener typedListener = listener as ICPP14ParserListener;
			if (typedListener != null) typedListener.EnterFunctionBody(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14ParserListener typedListener = listener as ICPP14ParserListener;
			if (typedListener != null) typedListener.ExitFunctionBody(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICPP14ParserVisitor<TResult> typedVisitor = visitor as ICPP14ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionBody(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionBodyContext functionBody() {
		FunctionBodyContext _localctx = new FunctionBodyContext(Context, State);
		EnterRule(_localctx, 266, RULE_functionBody);
		int _la;
		try {
			State = 1633;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case LeftBrace:
			case Colon:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1626;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==Colon) {
					{
					State = 1625;
					constructorInitializer();
					}
				}

				State = 1628;
				compoundStatement();
				}
				break;
			case Try:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1629;
				functionTryBlock();
				}
				break;
			case Assign:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1630;
				Match(Assign);
				State = 1631;
				_la = TokenStream.LA(1);
				if ( !(_la==Default || _la==Delete) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 1632;
				Match(Semi);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InitializerContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public BraceOrEqualInitializerContext braceOrEqualInitializer() {
			return GetRuleContext<BraceOrEqualInitializerContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LeftParen() { return GetToken(CPP14Parser.LeftParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionListContext expressionList() {
			return GetRuleContext<ExpressionListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RightParen() { return GetToken(CPP14Parser.RightParen, 0); }
		public InitializerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_initializer; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14ParserListener typedListener = listener as ICPP14ParserListener;
			if (typedListener != null) typedListener.EnterInitializer(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14ParserListener typedListener = listener as ICPP14ParserListener;
			if (typedListener != null) typedListener.ExitInitializer(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICPP14ParserVisitor<TResult> typedVisitor = visitor as ICPP14ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInitializer(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InitializerContext initializer() {
		InitializerContext _localctx = new InitializerContext(Context, State);
		EnterRule(_localctx, 268, RULE_initializer);
		try {
			State = 1640;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case LeftBrace:
			case Assign:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1635;
				braceOrEqualInitializer();
				}
				break;
			case LeftParen:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1636;
				Match(LeftParen);
				State = 1637;
				expressionList();
				State = 1638;
				Match(RightParen);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BraceOrEqualInitializerContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Assign() { return GetToken(CPP14Parser.Assign, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public InitializerClauseContext initializerClause() {
			return GetRuleContext<InitializerClauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BracedInitListContext bracedInitList() {
			return GetRuleContext<BracedInitListContext>(0);
		}
		public BraceOrEqualInitializerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_braceOrEqualInitializer; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14ParserListener typedListener = listener as ICPP14ParserListener;
			if (typedListener != null) typedListener.EnterBraceOrEqualInitializer(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14ParserListener typedListener = listener as ICPP14ParserListener;
			if (typedListener != null) typedListener.ExitBraceOrEqualInitializer(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICPP14ParserVisitor<TResult> typedVisitor = visitor as ICPP14ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBraceOrEqualInitializer(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BraceOrEqualInitializerContext braceOrEqualInitializer() {
		BraceOrEqualInitializerContext _localctx = new BraceOrEqualInitializerContext(Context, State);
		EnterRule(_localctx, 270, RULE_braceOrEqualInitializer);
		try {
			State = 1645;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case Assign:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1642;
				Match(Assign);
				State = 1643;
				initializerClause();
				}
				break;
			case LeftBrace:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1644;
				bracedInitList();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InitializerClauseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public AssignmentExpressionContext assignmentExpression() {
			return GetRuleContext<AssignmentExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BracedInitListContext bracedInitList() {
			return GetRuleContext<BracedInitListContext>(0);
		}
		public InitializerClauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_initializerClause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14ParserListener typedListener = listener as ICPP14ParserListener;
			if (typedListener != null) typedListener.EnterInitializerClause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14ParserListener typedListener = listener as ICPP14ParserListener;
			if (typedListener != null) typedListener.ExitInitializerClause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICPP14ParserVisitor<TResult> typedVisitor = visitor as ICPP14ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInitializerClause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InitializerClauseContext initializerClause() {
		InitializerClauseContext _localctx = new InitializerClauseContext(Context, State);
		EnterRule(_localctx, 272, RULE_initializerClause);
		try {
			State = 1649;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case IntegerLiteral:
			case CharacterLiteral:
			case FloatingLiteral:
			case StringLiteral:
			case BooleanLiteral:
			case PointerLiteral:
			case UserDefinedLiteral:
			case Alignof:
			case Auto:
			case Bool:
			case Char:
			case Char16:
			case Char32:
			case Const_cast:
			case Decltype:
			case Delete:
			case Double:
			case Dynamic_cast:
			case Float:
			case Int:
			case Long:
			case New:
			case Noexcept:
			case Operator:
			case Reinterpret_cast:
			case Short:
			case Signed:
			case Sizeof:
			case Static_cast:
			case This:
			case Throw:
			case Typeid_:
			case Typename_:
			case Unsigned:
			case Void:
			case Wchar:
			case LeftParen:
			case LeftBracket:
			case Plus:
			case Minus:
			case Star:
			case And:
			case Or:
			case Tilde:
			case Not:
			case PlusPlus:
			case MinusMinus:
			case Doublecolon:
			case Identifier:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1647;
				assignmentExpression();
				}
				break;
			case LeftBrace:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1648;
				bracedInitList();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InitializerListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public InitializerClauseContext[] initializerClause() {
			return GetRuleContexts<InitializerClauseContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public InitializerClauseContext initializerClause(int i) {
			return GetRuleContext<InitializerClauseContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Ellipsis() { return GetTokens(CPP14Parser.Ellipsis); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Ellipsis(int i) {
			return GetToken(CPP14Parser.Ellipsis, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Comma() { return GetTokens(CPP14Parser.Comma); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comma(int i) {
			return GetToken(CPP14Parser.Comma, i);
		}
		public InitializerListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_initializerList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14ParserListener typedListener = listener as ICPP14ParserListener;
			if (typedListener != null) typedListener.EnterInitializerList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14ParserListener typedListener = listener as ICPP14ParserListener;
			if (typedListener != null) typedListener.ExitInitializerList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICPP14ParserVisitor<TResult> typedVisitor = visitor as ICPP14ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInitializerList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InitializerListContext initializerList() {
		InitializerListContext _localctx = new InitializerListContext(Context, State);
		EnterRule(_localctx, 274, RULE_initializerList);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1651;
			initializerClause();
			State = 1653;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Ellipsis) {
				{
				State = 1652;
				Match(Ellipsis);
				}
			}

			State = 1662;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,225,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 1655;
					Match(Comma);
					State = 1656;
					initializerClause();
					State = 1658;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==Ellipsis) {
						{
						State = 1657;
						Match(Ellipsis);
						}
					}

					}
					} 
				}
				State = 1664;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,225,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BracedInitListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LeftBrace() { return GetToken(CPP14Parser.LeftBrace, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RightBrace() { return GetToken(CPP14Parser.RightBrace, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public InitializerListContext initializerList() {
			return GetRuleContext<InitializerListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comma() { return GetToken(CPP14Parser.Comma, 0); }
		public BracedInitListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_bracedInitList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14ParserListener typedListener = listener as ICPP14ParserListener;
			if (typedListener != null) typedListener.EnterBracedInitList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14ParserListener typedListener = listener as ICPP14ParserListener;
			if (typedListener != null) typedListener.ExitBracedInitList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICPP14ParserVisitor<TResult> typedVisitor = visitor as ICPP14ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBracedInitList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BracedInitListContext bracedInitList() {
		BracedInitListContext _localctx = new BracedInitListContext(Context, State);
		EnterRule(_localctx, 276, RULE_bracedInitList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1665;
			Match(LeftBrace);
			State = 1670;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << IntegerLiteral) | (1L << CharacterLiteral) | (1L << FloatingLiteral) | (1L << StringLiteral) | (1L << BooleanLiteral) | (1L << PointerLiteral) | (1L << UserDefinedLiteral) | (1L << Alignof) | (1L << Auto) | (1L << Bool) | (1L << Char) | (1L << Char16) | (1L << Char32) | (1L << Const_cast) | (1L << Decltype) | (1L << Delete) | (1L << Double) | (1L << Dynamic_cast) | (1L << Float) | (1L << Int) | (1L << Long) | (1L << New) | (1L << Noexcept) | (1L << Operator) | (1L << Reinterpret_cast) | (1L << Short) | (1L << Signed) | (1L << Sizeof))) != 0) || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & ((1L << (Static_cast - 65)) | (1L << (This - 65)) | (1L << (Throw - 65)) | (1L << (Typeid_ - 65)) | (1L << (Typename_ - 65)) | (1L << (Unsigned - 65)) | (1L << (Void - 65)) | (1L << (Wchar - 65)) | (1L << (LeftParen - 65)) | (1L << (LeftBracket - 65)) | (1L << (LeftBrace - 65)) | (1L << (Plus - 65)) | (1L << (Minus - 65)) | (1L << (Star - 65)) | (1L << (And - 65)) | (1L << (Or - 65)) | (1L << (Tilde - 65)) | (1L << (Not - 65)) | (1L << (PlusPlus - 65)) | (1L << (MinusMinus - 65)) | (1L << (Doublecolon - 65)))) != 0) || _la==Identifier) {
				{
				State = 1666;
				initializerList();
				State = 1668;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==Comma) {
					{
					State = 1667;
					Match(Comma);
					}
				}

				}
			}

			State = 1672;
			Match(RightBrace);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClassNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(CPP14Parser.Identifier, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SimpleTemplateIdContext simpleTemplateId() {
			return GetRuleContext<SimpleTemplateIdContext>(0);
		}
		public ClassNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_className; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14ParserListener typedListener = listener as ICPP14ParserListener;
			if (typedListener != null) typedListener.EnterClassName(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14ParserListener typedListener = listener as ICPP14ParserListener;
			if (typedListener != null) typedListener.ExitClassName(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICPP14ParserVisitor<TResult> typedVisitor = visitor as ICPP14ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClassName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ClassNameContext className() {
		ClassNameContext _localctx = new ClassNameContext(Context, State);
		EnterRule(_localctx, 278, RULE_className);
		try {
			State = 1676;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,228,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1674;
				Match(Identifier);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1675;
				simpleTemplateId();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClassSpecifierContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ClassHeadContext classHead() {
			return GetRuleContext<ClassHeadContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LeftBrace() { return GetToken(CPP14Parser.LeftBrace, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RightBrace() { return GetToken(CPP14Parser.RightBrace, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public MemberSpecificationContext memberSpecification() {
			return GetRuleContext<MemberSpecificationContext>(0);
		}
		public ClassSpecifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_classSpecifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14ParserListener typedListener = listener as ICPP14ParserListener;
			if (typedListener != null) typedListener.EnterClassSpecifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14ParserListener typedListener = listener as ICPP14ParserListener;
			if (typedListener != null) typedListener.ExitClassSpecifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICPP14ParserVisitor<TResult> typedVisitor = visitor as ICPP14ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClassSpecifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ClassSpecifierContext classSpecifier() {
		ClassSpecifierContext _localctx = new ClassSpecifierContext(Context, State);
		EnterRule(_localctx, 280, RULE_classSpecifier);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1678;
			classHead();
			State = 1679;
			Match(LeftBrace);
			State = 1681;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (((((_la - 10)) & ~0x3f) == 0 && ((1L << (_la - 10)) & ((1L << (Alignas - 10)) | (1L << (Auto - 10)) | (1L << (Bool - 10)) | (1L << (Char - 10)) | (1L << (Char16 - 10)) | (1L << (Char32 - 10)) | (1L << (Class - 10)) | (1L << (Const - 10)) | (1L << (Constexpr - 10)) | (1L << (Decltype - 10)) | (1L << (Double - 10)) | (1L << (Enum - 10)) | (1L << (Explicit - 10)) | (1L << (Extern - 10)) | (1L << (Float - 10)) | (1L << (Friend - 10)) | (1L << (Inline - 10)) | (1L << (Int - 10)) | (1L << (Long - 10)) | (1L << (Mutable - 10)) | (1L << (Operator - 10)) | (1L << (Private - 10)) | (1L << (Protected - 10)) | (1L << (Public - 10)) | (1L << (Register - 10)) | (1L << (Short - 10)) | (1L << (Signed - 10)) | (1L << (Static - 10)) | (1L << (Static_assert - 10)) | (1L << (Struct - 10)) | (1L << (Template - 10)) | (1L << (Thread_local - 10)))) != 0) || ((((_la - 74)) & ~0x3f) == 0 && ((1L << (_la - 74)) & ((1L << (Typedef - 74)) | (1L << (Typename_ - 74)) | (1L << (Union - 74)) | (1L << (Unsigned - 74)) | (1L << (Using - 74)) | (1L << (Virtual - 74)) | (1L << (Void - 74)) | (1L << (Volatile - 74)) | (1L << (Wchar - 74)) | (1L << (LeftParen - 74)) | (1L << (LeftBracket - 74)) | (1L << (Star - 74)) | (1L << (And - 74)) | (1L << (Tilde - 74)) | (1L << (AndAnd - 74)) | (1L << (Colon - 74)) | (1L << (Doublecolon - 74)) | (1L << (Semi - 74)) | (1L << (Ellipsis - 74)) | (1L << (Identifier - 74)))) != 0)) {
				{
				State = 1680;
				memberSpecification();
				}
			}

			State = 1683;
			Match(RightBrace);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClassHeadContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ClassKeyContext classKey() {
			return GetRuleContext<ClassKeyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AttributeSpecifierSeqContext attributeSpecifierSeq() {
			return GetRuleContext<AttributeSpecifierSeqContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ClassHeadNameContext classHeadName() {
			return GetRuleContext<ClassHeadNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BaseClauseContext baseClause() {
			return GetRuleContext<BaseClauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ClassVirtSpecifierContext classVirtSpecifier() {
			return GetRuleContext<ClassVirtSpecifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Union() { return GetToken(CPP14Parser.Union, 0); }
		public ClassHeadContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_classHead; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14ParserListener typedListener = listener as ICPP14ParserListener;
			if (typedListener != null) typedListener.EnterClassHead(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14ParserListener typedListener = listener as ICPP14ParserListener;
			if (typedListener != null) typedListener.ExitClassHead(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICPP14ParserVisitor<TResult> typedVisitor = visitor as ICPP14ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClassHead(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ClassHeadContext classHead() {
		ClassHeadContext _localctx = new ClassHeadContext(Context, State);
		EnterRule(_localctx, 282, RULE_classHead);
		int _la;
		try {
			State = 1708;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case Class:
			case Struct:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1685;
				classKey();
				State = 1687;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==Alignas || _la==LeftBracket) {
					{
					State = 1686;
					attributeSpecifierSeq();
					}
				}

				State = 1693;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==Decltype || _la==Doublecolon || _la==Identifier) {
					{
					State = 1689;
					classHeadName();
					State = 1691;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==Final) {
						{
						State = 1690;
						classVirtSpecifier();
						}
					}

					}
				}

				State = 1696;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==Colon) {
					{
					State = 1695;
					baseClause();
					}
				}

				}
				break;
			case Union:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1698;
				Match(Union);
				State = 1700;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==Alignas || _la==LeftBracket) {
					{
					State = 1699;
					attributeSpecifierSeq();
					}
				}

				State = 1706;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==Decltype || _la==Doublecolon || _la==Identifier) {
					{
					State = 1702;
					classHeadName();
					State = 1704;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==Final) {
						{
						State = 1703;
						classVirtSpecifier();
						}
					}

					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClassHeadNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ClassNameContext className() {
			return GetRuleContext<ClassNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NestedNameSpecifierContext nestedNameSpecifier() {
			return GetRuleContext<NestedNameSpecifierContext>(0);
		}
		public ClassHeadNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_classHeadName; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14ParserListener typedListener = listener as ICPP14ParserListener;
			if (typedListener != null) typedListener.EnterClassHeadName(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14ParserListener typedListener = listener as ICPP14ParserListener;
			if (typedListener != null) typedListener.ExitClassHeadName(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICPP14ParserVisitor<TResult> typedVisitor = visitor as ICPP14ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClassHeadName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ClassHeadNameContext classHeadName() {
		ClassHeadNameContext _localctx = new ClassHeadNameContext(Context, State);
		EnterRule(_localctx, 284, RULE_classHeadName);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1711;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,238,Context) ) {
			case 1:
				{
				State = 1710;
				nestedNameSpecifier(0);
				}
				break;
			}
			State = 1713;
			className();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClassVirtSpecifierContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Final() { return GetToken(CPP14Parser.Final, 0); }
		public ClassVirtSpecifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_classVirtSpecifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14ParserListener typedListener = listener as ICPP14ParserListener;
			if (typedListener != null) typedListener.EnterClassVirtSpecifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14ParserListener typedListener = listener as ICPP14ParserListener;
			if (typedListener != null) typedListener.ExitClassVirtSpecifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICPP14ParserVisitor<TResult> typedVisitor = visitor as ICPP14ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClassVirtSpecifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ClassVirtSpecifierContext classVirtSpecifier() {
		ClassVirtSpecifierContext _localctx = new ClassVirtSpecifierContext(Context, State);
		EnterRule(_localctx, 286, RULE_classVirtSpecifier);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1715;
			Match(Final);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClassKeyContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Class() { return GetToken(CPP14Parser.Class, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Struct() { return GetToken(CPP14Parser.Struct, 0); }
		public ClassKeyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_classKey; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14ParserListener typedListener = listener as ICPP14ParserListener;
			if (typedListener != null) typedListener.EnterClassKey(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14ParserListener typedListener = listener as ICPP14ParserListener;
			if (typedListener != null) typedListener.ExitClassKey(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICPP14ParserVisitor<TResult> typedVisitor = visitor as ICPP14ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClassKey(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ClassKeyContext classKey() {
		ClassKeyContext _localctx = new ClassKeyContext(Context, State);
		EnterRule(_localctx, 288, RULE_classKey);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1717;
			_la = TokenStream.LA(1);
			if ( !(_la==Class || _la==Struct) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MemberSpecificationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public MemberdeclarationContext[] memberdeclaration() {
			return GetRuleContexts<MemberdeclarationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public MemberdeclarationContext memberdeclaration(int i) {
			return GetRuleContext<MemberdeclarationContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AccessSpecifierContext[] accessSpecifier() {
			return GetRuleContexts<AccessSpecifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AccessSpecifierContext accessSpecifier(int i) {
			return GetRuleContext<AccessSpecifierContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Colon() { return GetTokens(CPP14Parser.Colon); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Colon(int i) {
			return GetToken(CPP14Parser.Colon, i);
		}
		public MemberSpecificationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_memberSpecification; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14ParserListener typedListener = listener as ICPP14ParserListener;
			if (typedListener != null) typedListener.EnterMemberSpecification(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14ParserListener typedListener = listener as ICPP14ParserListener;
			if (typedListener != null) typedListener.ExitMemberSpecification(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICPP14ParserVisitor<TResult> typedVisitor = visitor as ICPP14ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMemberSpecification(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MemberSpecificationContext memberSpecification() {
		MemberSpecificationContext _localctx = new MemberSpecificationContext(Context, State);
		EnterRule(_localctx, 290, RULE_memberSpecification);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1723;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				State = 1723;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case Alignas:
				case Auto:
				case Bool:
				case Char:
				case Char16:
				case Char32:
				case Class:
				case Const:
				case Constexpr:
				case Decltype:
				case Double:
				case Enum:
				case Explicit:
				case Extern:
				case Float:
				case Friend:
				case Inline:
				case Int:
				case Long:
				case Mutable:
				case Operator:
				case Register:
				case Short:
				case Signed:
				case Static:
				case Static_assert:
				case Struct:
				case Template:
				case Thread_local:
				case Typedef:
				case Typename_:
				case Union:
				case Unsigned:
				case Using:
				case Virtual:
				case Void:
				case Volatile:
				case Wchar:
				case LeftParen:
				case LeftBracket:
				case Star:
				case And:
				case Tilde:
				case AndAnd:
				case Colon:
				case Doublecolon:
				case Semi:
				case Ellipsis:
				case Identifier:
					{
					State = 1719;
					memberdeclaration();
					}
					break;
				case Private:
				case Protected:
				case Public:
					{
					State = 1720;
					accessSpecifier();
					State = 1721;
					Match(Colon);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				State = 1725;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( ((((_la - 10)) & ~0x3f) == 0 && ((1L << (_la - 10)) & ((1L << (Alignas - 10)) | (1L << (Auto - 10)) | (1L << (Bool - 10)) | (1L << (Char - 10)) | (1L << (Char16 - 10)) | (1L << (Char32 - 10)) | (1L << (Class - 10)) | (1L << (Const - 10)) | (1L << (Constexpr - 10)) | (1L << (Decltype - 10)) | (1L << (Double - 10)) | (1L << (Enum - 10)) | (1L << (Explicit - 10)) | (1L << (Extern - 10)) | (1L << (Float - 10)) | (1L << (Friend - 10)) | (1L << (Inline - 10)) | (1L << (Int - 10)) | (1L << (Long - 10)) | (1L << (Mutable - 10)) | (1L << (Operator - 10)) | (1L << (Private - 10)) | (1L << (Protected - 10)) | (1L << (Public - 10)) | (1L << (Register - 10)) | (1L << (Short - 10)) | (1L << (Signed - 10)) | (1L << (Static - 10)) | (1L << (Static_assert - 10)) | (1L << (Struct - 10)) | (1L << (Template - 10)) | (1L << (Thread_local - 10)))) != 0) || ((((_la - 74)) & ~0x3f) == 0 && ((1L << (_la - 74)) & ((1L << (Typedef - 74)) | (1L << (Typename_ - 74)) | (1L << (Union - 74)) | (1L << (Unsigned - 74)) | (1L << (Using - 74)) | (1L << (Virtual - 74)) | (1L << (Void - 74)) | (1L << (Volatile - 74)) | (1L << (Wchar - 74)) | (1L << (LeftParen - 74)) | (1L << (LeftBracket - 74)) | (1L << (Star - 74)) | (1L << (And - 74)) | (1L << (Tilde - 74)) | (1L << (AndAnd - 74)) | (1L << (Colon - 74)) | (1L << (Doublecolon - 74)) | (1L << (Semi - 74)) | (1L << (Ellipsis - 74)) | (1L << (Identifier - 74)))) != 0) );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MemberdeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Semi() { return GetToken(CPP14Parser.Semi, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public AttributeSpecifierSeqContext attributeSpecifierSeq() {
			return GetRuleContext<AttributeSpecifierSeqContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DeclSpecifierSeqContext declSpecifierSeq() {
			return GetRuleContext<DeclSpecifierSeqContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MemberDeclaratorListContext memberDeclaratorList() {
			return GetRuleContext<MemberDeclaratorListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionDefinitionContext functionDefinition() {
			return GetRuleContext<FunctionDefinitionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public UsingDeclarationContext usingDeclaration() {
			return GetRuleContext<UsingDeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StaticAssertDeclarationContext staticAssertDeclaration() {
			return GetRuleContext<StaticAssertDeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TemplateDeclarationContext templateDeclaration() {
			return GetRuleContext<TemplateDeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AliasDeclarationContext aliasDeclaration() {
			return GetRuleContext<AliasDeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public EmptyDeclarationContext emptyDeclaration() {
			return GetRuleContext<EmptyDeclarationContext>(0);
		}
		public MemberdeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_memberdeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14ParserListener typedListener = listener as ICPP14ParserListener;
			if (typedListener != null) typedListener.EnterMemberdeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14ParserListener typedListener = listener as ICPP14ParserListener;
			if (typedListener != null) typedListener.ExitMemberdeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICPP14ParserVisitor<TResult> typedVisitor = visitor as ICPP14ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMemberdeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MemberdeclarationContext memberdeclaration() {
		MemberdeclarationContext _localctx = new MemberdeclarationContext(Context, State);
		EnterRule(_localctx, 292, RULE_memberdeclaration);
		int _la;
		try {
			State = 1743;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,244,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1728;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,241,Context) ) {
				case 1:
					{
					State = 1727;
					attributeSpecifierSeq();
					}
					break;
				}
				State = 1731;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,242,Context) ) {
				case 1:
					{
					State = 1730;
					declSpecifierSeq();
					}
					break;
				}
				State = 1734;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << Alignas) | (1L << Decltype) | (1L << Operator))) != 0) || ((((_la - 85)) & ~0x3f) == 0 && ((1L << (_la - 85)) & ((1L << (LeftParen - 85)) | (1L << (LeftBracket - 85)) | (1L << (Star - 85)) | (1L << (And - 85)) | (1L << (Tilde - 85)) | (1L << (AndAnd - 85)) | (1L << (Colon - 85)) | (1L << (Doublecolon - 85)) | (1L << (Ellipsis - 85)) | (1L << (Identifier - 85)))) != 0)) {
					{
					State = 1733;
					memberDeclaratorList();
					}
				}

				State = 1736;
				Match(Semi);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1737;
				functionDefinition();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1738;
				usingDeclaration();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1739;
				staticAssertDeclaration();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 1740;
				templateDeclaration();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 1741;
				aliasDeclaration();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 1742;
				emptyDeclaration();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MemberDeclaratorListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public MemberDeclaratorContext[] memberDeclarator() {
			return GetRuleContexts<MemberDeclaratorContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public MemberDeclaratorContext memberDeclarator(int i) {
			return GetRuleContext<MemberDeclaratorContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Comma() { return GetTokens(CPP14Parser.Comma); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comma(int i) {
			return GetToken(CPP14Parser.Comma, i);
		}
		public MemberDeclaratorListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_memberDeclaratorList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14ParserListener typedListener = listener as ICPP14ParserListener;
			if (typedListener != null) typedListener.EnterMemberDeclaratorList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14ParserListener typedListener = listener as ICPP14ParserListener;
			if (typedListener != null) typedListener.ExitMemberDeclaratorList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICPP14ParserVisitor<TResult> typedVisitor = visitor as ICPP14ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMemberDeclaratorList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MemberDeclaratorListContext memberDeclaratorList() {
		MemberDeclaratorListContext _localctx = new MemberDeclaratorListContext(Context, State);
		EnterRule(_localctx, 294, RULE_memberDeclaratorList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1745;
			memberDeclarator();
			State = 1750;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==Comma) {
				{
				{
				State = 1746;
				Match(Comma);
				State = 1747;
				memberDeclarator();
				}
				}
				State = 1752;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MemberDeclaratorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public DeclaratorContext declarator() {
			return GetRuleContext<DeclaratorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public VirtualSpecifierSeqContext virtualSpecifierSeq() {
			return GetRuleContext<VirtualSpecifierSeqContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PureSpecifierContext pureSpecifier() {
			return GetRuleContext<PureSpecifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BraceOrEqualInitializerContext braceOrEqualInitializer() {
			return GetRuleContext<BraceOrEqualInitializerContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Colon() { return GetToken(CPP14Parser.Colon, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ConstantExpressionContext constantExpression() {
			return GetRuleContext<ConstantExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(CPP14Parser.Identifier, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public AttributeSpecifierSeqContext attributeSpecifierSeq() {
			return GetRuleContext<AttributeSpecifierSeqContext>(0);
		}
		public MemberDeclaratorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_memberDeclarator; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14ParserListener typedListener = listener as ICPP14ParserListener;
			if (typedListener != null) typedListener.EnterMemberDeclarator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14ParserListener typedListener = listener as ICPP14ParserListener;
			if (typedListener != null) typedListener.ExitMemberDeclarator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICPP14ParserVisitor<TResult> typedVisitor = visitor as ICPP14ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMemberDeclarator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MemberDeclaratorContext memberDeclarator() {
		MemberDeclaratorContext _localctx = new MemberDeclaratorContext(Context, State);
		EnterRule(_localctx, 296, RULE_memberDeclarator);
		int _la;
		try {
			State = 1773;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,252,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1753;
				declarator();
				State = 1763;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,249,Context) ) {
				case 1:
					{
					State = 1755;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==Final || _la==Override) {
						{
						State = 1754;
						virtualSpecifierSeq();
						}
					}

					State = 1758;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==Assign) {
						{
						State = 1757;
						pureSpecifier();
						}
					}

					}
					break;
				case 2:
					{
					State = 1761;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==LeftBrace || _la==Assign) {
						{
						State = 1760;
						braceOrEqualInitializer();
						}
					}

					}
					break;
				}
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1766;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==Identifier) {
					{
					State = 1765;
					Match(Identifier);
					}
				}

				State = 1769;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==Alignas || _la==LeftBracket) {
					{
					State = 1768;
					attributeSpecifierSeq();
					}
				}

				State = 1771;
				Match(Colon);
				State = 1772;
				constantExpression();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VirtualSpecifierSeqContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public VirtualSpecifierContext[] virtualSpecifier() {
			return GetRuleContexts<VirtualSpecifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public VirtualSpecifierContext virtualSpecifier(int i) {
			return GetRuleContext<VirtualSpecifierContext>(i);
		}
		public VirtualSpecifierSeqContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_virtualSpecifierSeq; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14ParserListener typedListener = listener as ICPP14ParserListener;
			if (typedListener != null) typedListener.EnterVirtualSpecifierSeq(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14ParserListener typedListener = listener as ICPP14ParserListener;
			if (typedListener != null) typedListener.ExitVirtualSpecifierSeq(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICPP14ParserVisitor<TResult> typedVisitor = visitor as ICPP14ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVirtualSpecifierSeq(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VirtualSpecifierSeqContext virtualSpecifierSeq() {
		VirtualSpecifierSeqContext _localctx = new VirtualSpecifierSeqContext(Context, State);
		EnterRule(_localctx, 298, RULE_virtualSpecifierSeq);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1776;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 1775;
				virtualSpecifier();
				}
				}
				State = 1778;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==Final || _la==Override );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VirtualSpecifierContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Override() { return GetToken(CPP14Parser.Override, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Final() { return GetToken(CPP14Parser.Final, 0); }
		public VirtualSpecifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_virtualSpecifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14ParserListener typedListener = listener as ICPP14ParserListener;
			if (typedListener != null) typedListener.EnterVirtualSpecifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14ParserListener typedListener = listener as ICPP14ParserListener;
			if (typedListener != null) typedListener.ExitVirtualSpecifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICPP14ParserVisitor<TResult> typedVisitor = visitor as ICPP14ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVirtualSpecifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VirtualSpecifierContext virtualSpecifier() {
		VirtualSpecifierContext _localctx = new VirtualSpecifierContext(Context, State);
		EnterRule(_localctx, 300, RULE_virtualSpecifier);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1780;
			_la = TokenStream.LA(1);
			if ( !(_la==Final || _la==Override) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PureSpecifierContext : ParserRuleContext {
		public IToken val;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Assign() { return GetToken(CPP14Parser.Assign, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OctalLiteral() { return GetToken(CPP14Parser.OctalLiteral, 0); }
		public PureSpecifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pureSpecifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14ParserListener typedListener = listener as ICPP14ParserListener;
			if (typedListener != null) typedListener.EnterPureSpecifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14ParserListener typedListener = listener as ICPP14ParserListener;
			if (typedListener != null) typedListener.ExitPureSpecifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICPP14ParserVisitor<TResult> typedVisitor = visitor as ICPP14ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPureSpecifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PureSpecifierContext pureSpecifier() {
		PureSpecifierContext _localctx = new PureSpecifierContext(Context, State);
		EnterRule(_localctx, 302, RULE_pureSpecifier);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1782;
			Match(Assign);
			State = 1783;
			_localctx.val = Match(OctalLiteral);
			if((_localctx.val != null ? _localctx.val.Text : null) != "0") throw new InputMismatchException(this);
					
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BaseClauseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Colon() { return GetToken(CPP14Parser.Colon, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BaseSpecifierListContext baseSpecifierList() {
			return GetRuleContext<BaseSpecifierListContext>(0);
		}
		public BaseClauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_baseClause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14ParserListener typedListener = listener as ICPP14ParserListener;
			if (typedListener != null) typedListener.EnterBaseClause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14ParserListener typedListener = listener as ICPP14ParserListener;
			if (typedListener != null) typedListener.ExitBaseClause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICPP14ParserVisitor<TResult> typedVisitor = visitor as ICPP14ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBaseClause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BaseClauseContext baseClause() {
		BaseClauseContext _localctx = new BaseClauseContext(Context, State);
		EnterRule(_localctx, 304, RULE_baseClause);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1786;
			Match(Colon);
			State = 1787;
			baseSpecifierList();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BaseSpecifierListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public BaseSpecifierContext[] baseSpecifier() {
			return GetRuleContexts<BaseSpecifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public BaseSpecifierContext baseSpecifier(int i) {
			return GetRuleContext<BaseSpecifierContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Ellipsis() { return GetTokens(CPP14Parser.Ellipsis); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Ellipsis(int i) {
			return GetToken(CPP14Parser.Ellipsis, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Comma() { return GetTokens(CPP14Parser.Comma); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comma(int i) {
			return GetToken(CPP14Parser.Comma, i);
		}
		public BaseSpecifierListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_baseSpecifierList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14ParserListener typedListener = listener as ICPP14ParserListener;
			if (typedListener != null) typedListener.EnterBaseSpecifierList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14ParserListener typedListener = listener as ICPP14ParserListener;
			if (typedListener != null) typedListener.ExitBaseSpecifierList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICPP14ParserVisitor<TResult> typedVisitor = visitor as ICPP14ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBaseSpecifierList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BaseSpecifierListContext baseSpecifierList() {
		BaseSpecifierListContext _localctx = new BaseSpecifierListContext(Context, State);
		EnterRule(_localctx, 306, RULE_baseSpecifierList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1789;
			baseSpecifier();
			State = 1791;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Ellipsis) {
				{
				State = 1790;
				Match(Ellipsis);
				}
			}

			State = 1800;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==Comma) {
				{
				{
				State = 1793;
				Match(Comma);
				State = 1794;
				baseSpecifier();
				State = 1796;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==Ellipsis) {
					{
					State = 1795;
					Match(Ellipsis);
					}
				}

				}
				}
				State = 1802;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BaseSpecifierContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public BaseTypeSpecifierContext baseTypeSpecifier() {
			return GetRuleContext<BaseTypeSpecifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Virtual() { return GetToken(CPP14Parser.Virtual, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public AccessSpecifierContext accessSpecifier() {
			return GetRuleContext<AccessSpecifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AttributeSpecifierSeqContext attributeSpecifierSeq() {
			return GetRuleContext<AttributeSpecifierSeqContext>(0);
		}
		public BaseSpecifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_baseSpecifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14ParserListener typedListener = listener as ICPP14ParserListener;
			if (typedListener != null) typedListener.EnterBaseSpecifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14ParserListener typedListener = listener as ICPP14ParserListener;
			if (typedListener != null) typedListener.ExitBaseSpecifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICPP14ParserVisitor<TResult> typedVisitor = visitor as ICPP14ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBaseSpecifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BaseSpecifierContext baseSpecifier() {
		BaseSpecifierContext _localctx = new BaseSpecifierContext(Context, State);
		EnterRule(_localctx, 308, RULE_baseSpecifier);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1804;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Alignas || _la==LeftBracket) {
				{
				State = 1803;
				attributeSpecifierSeq();
				}
			}

			State = 1818;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case Decltype:
			case Doublecolon:
			case Identifier:
				{
				State = 1806;
				baseTypeSpecifier();
				}
				break;
			case Virtual:
				{
				State = 1807;
				Match(Virtual);
				State = 1809;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << Private) | (1L << Protected) | (1L << Public))) != 0)) {
					{
					State = 1808;
					accessSpecifier();
					}
				}

				State = 1811;
				baseTypeSpecifier();
				}
				break;
			case Private:
			case Protected:
			case Public:
				{
				State = 1812;
				accessSpecifier();
				State = 1814;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==Virtual) {
					{
					State = 1813;
					Match(Virtual);
					}
				}

				State = 1816;
				baseTypeSpecifier();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClassOrDeclTypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ClassNameContext className() {
			return GetRuleContext<ClassNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NestedNameSpecifierContext nestedNameSpecifier() {
			return GetRuleContext<NestedNameSpecifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DecltypeSpecifierContext decltypeSpecifier() {
			return GetRuleContext<DecltypeSpecifierContext>(0);
		}
		public ClassOrDeclTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_classOrDeclType; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14ParserListener typedListener = listener as ICPP14ParserListener;
			if (typedListener != null) typedListener.EnterClassOrDeclType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14ParserListener typedListener = listener as ICPP14ParserListener;
			if (typedListener != null) typedListener.ExitClassOrDeclType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICPP14ParserVisitor<TResult> typedVisitor = visitor as ICPP14ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClassOrDeclType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ClassOrDeclTypeContext classOrDeclType() {
		ClassOrDeclTypeContext _localctx = new ClassOrDeclTypeContext(Context, State);
		EnterRule(_localctx, 310, RULE_classOrDeclType);
		try {
			State = 1825;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,262,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1821;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,261,Context) ) {
				case 1:
					{
					State = 1820;
					nestedNameSpecifier(0);
					}
					break;
				}
				State = 1823;
				className();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1824;
				decltypeSpecifier();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BaseTypeSpecifierContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ClassOrDeclTypeContext classOrDeclType() {
			return GetRuleContext<ClassOrDeclTypeContext>(0);
		}
		public BaseTypeSpecifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_baseTypeSpecifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14ParserListener typedListener = listener as ICPP14ParserListener;
			if (typedListener != null) typedListener.EnterBaseTypeSpecifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14ParserListener typedListener = listener as ICPP14ParserListener;
			if (typedListener != null) typedListener.ExitBaseTypeSpecifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICPP14ParserVisitor<TResult> typedVisitor = visitor as ICPP14ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBaseTypeSpecifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BaseTypeSpecifierContext baseTypeSpecifier() {
		BaseTypeSpecifierContext _localctx = new BaseTypeSpecifierContext(Context, State);
		EnterRule(_localctx, 312, RULE_baseTypeSpecifier);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1827;
			classOrDeclType();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AccessSpecifierContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Private() { return GetToken(CPP14Parser.Private, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Protected() { return GetToken(CPP14Parser.Protected, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Public() { return GetToken(CPP14Parser.Public, 0); }
		public AccessSpecifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_accessSpecifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14ParserListener typedListener = listener as ICPP14ParserListener;
			if (typedListener != null) typedListener.EnterAccessSpecifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14ParserListener typedListener = listener as ICPP14ParserListener;
			if (typedListener != null) typedListener.ExitAccessSpecifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICPP14ParserVisitor<TResult> typedVisitor = visitor as ICPP14ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAccessSpecifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AccessSpecifierContext accessSpecifier() {
		AccessSpecifierContext _localctx = new AccessSpecifierContext(Context, State);
		EnterRule(_localctx, 314, RULE_accessSpecifier);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1829;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << Private) | (1L << Protected) | (1L << Public))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConversionFunctionIdContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Operator() { return GetToken(CPP14Parser.Operator, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ConversionTypeIdContext conversionTypeId() {
			return GetRuleContext<ConversionTypeIdContext>(0);
		}
		public ConversionFunctionIdContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_conversionFunctionId; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14ParserListener typedListener = listener as ICPP14ParserListener;
			if (typedListener != null) typedListener.EnterConversionFunctionId(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14ParserListener typedListener = listener as ICPP14ParserListener;
			if (typedListener != null) typedListener.ExitConversionFunctionId(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICPP14ParserVisitor<TResult> typedVisitor = visitor as ICPP14ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConversionFunctionId(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConversionFunctionIdContext conversionFunctionId() {
		ConversionFunctionIdContext _localctx = new ConversionFunctionIdContext(Context, State);
		EnterRule(_localctx, 316, RULE_conversionFunctionId);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1831;
			Match(Operator);
			State = 1832;
			conversionTypeId();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConversionTypeIdContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypeSpecifierSeqContext typeSpecifierSeq() {
			return GetRuleContext<TypeSpecifierSeqContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ConversionDeclaratorContext conversionDeclarator() {
			return GetRuleContext<ConversionDeclaratorContext>(0);
		}
		public ConversionTypeIdContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_conversionTypeId; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14ParserListener typedListener = listener as ICPP14ParserListener;
			if (typedListener != null) typedListener.EnterConversionTypeId(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14ParserListener typedListener = listener as ICPP14ParserListener;
			if (typedListener != null) typedListener.ExitConversionTypeId(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICPP14ParserVisitor<TResult> typedVisitor = visitor as ICPP14ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConversionTypeId(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConversionTypeIdContext conversionTypeId() {
		ConversionTypeIdContext _localctx = new ConversionTypeIdContext(Context, State);
		EnterRule(_localctx, 318, RULE_conversionTypeId);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1834;
			typeSpecifierSeq();
			State = 1836;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,263,Context) ) {
			case 1:
				{
				State = 1835;
				conversionDeclarator();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConversionDeclaratorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public PointerOperatorContext pointerOperator() {
			return GetRuleContext<PointerOperatorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ConversionDeclaratorContext conversionDeclarator() {
			return GetRuleContext<ConversionDeclaratorContext>(0);
		}
		public ConversionDeclaratorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_conversionDeclarator; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14ParserListener typedListener = listener as ICPP14ParserListener;
			if (typedListener != null) typedListener.EnterConversionDeclarator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14ParserListener typedListener = listener as ICPP14ParserListener;
			if (typedListener != null) typedListener.ExitConversionDeclarator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICPP14ParserVisitor<TResult> typedVisitor = visitor as ICPP14ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConversionDeclarator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConversionDeclaratorContext conversionDeclarator() {
		ConversionDeclaratorContext _localctx = new ConversionDeclaratorContext(Context, State);
		EnterRule(_localctx, 320, RULE_conversionDeclarator);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1838;
			pointerOperator();
			State = 1840;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,264,Context) ) {
			case 1:
				{
				State = 1839;
				conversionDeclarator();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConstructorInitializerContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Colon() { return GetToken(CPP14Parser.Colon, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public MemInitializerListContext memInitializerList() {
			return GetRuleContext<MemInitializerListContext>(0);
		}
		public ConstructorInitializerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constructorInitializer; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14ParserListener typedListener = listener as ICPP14ParserListener;
			if (typedListener != null) typedListener.EnterConstructorInitializer(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14ParserListener typedListener = listener as ICPP14ParserListener;
			if (typedListener != null) typedListener.ExitConstructorInitializer(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICPP14ParserVisitor<TResult> typedVisitor = visitor as ICPP14ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConstructorInitializer(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConstructorInitializerContext constructorInitializer() {
		ConstructorInitializerContext _localctx = new ConstructorInitializerContext(Context, State);
		EnterRule(_localctx, 322, RULE_constructorInitializer);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1842;
			Match(Colon);
			State = 1843;
			memInitializerList();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MemInitializerListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public MemInitializerContext[] memInitializer() {
			return GetRuleContexts<MemInitializerContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public MemInitializerContext memInitializer(int i) {
			return GetRuleContext<MemInitializerContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Ellipsis() { return GetTokens(CPP14Parser.Ellipsis); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Ellipsis(int i) {
			return GetToken(CPP14Parser.Ellipsis, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Comma() { return GetTokens(CPP14Parser.Comma); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comma(int i) {
			return GetToken(CPP14Parser.Comma, i);
		}
		public MemInitializerListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_memInitializerList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14ParserListener typedListener = listener as ICPP14ParserListener;
			if (typedListener != null) typedListener.EnterMemInitializerList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14ParserListener typedListener = listener as ICPP14ParserListener;
			if (typedListener != null) typedListener.ExitMemInitializerList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICPP14ParserVisitor<TResult> typedVisitor = visitor as ICPP14ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMemInitializerList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MemInitializerListContext memInitializerList() {
		MemInitializerListContext _localctx = new MemInitializerListContext(Context, State);
		EnterRule(_localctx, 324, RULE_memInitializerList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1845;
			memInitializer();
			State = 1847;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Ellipsis) {
				{
				State = 1846;
				Match(Ellipsis);
				}
			}

			State = 1856;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==Comma) {
				{
				{
				State = 1849;
				Match(Comma);
				State = 1850;
				memInitializer();
				State = 1852;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==Ellipsis) {
					{
					State = 1851;
					Match(Ellipsis);
					}
				}

				}
				}
				State = 1858;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MemInitializerContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public MeminitializeridContext meminitializerid() {
			return GetRuleContext<MeminitializeridContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LeftParen() { return GetToken(CPP14Parser.LeftParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RightParen() { return GetToken(CPP14Parser.RightParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BracedInitListContext bracedInitList() {
			return GetRuleContext<BracedInitListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionListContext expressionList() {
			return GetRuleContext<ExpressionListContext>(0);
		}
		public MemInitializerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_memInitializer; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14ParserListener typedListener = listener as ICPP14ParserListener;
			if (typedListener != null) typedListener.EnterMemInitializer(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14ParserListener typedListener = listener as ICPP14ParserListener;
			if (typedListener != null) typedListener.ExitMemInitializer(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICPP14ParserVisitor<TResult> typedVisitor = visitor as ICPP14ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMemInitializer(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MemInitializerContext memInitializer() {
		MemInitializerContext _localctx = new MemInitializerContext(Context, State);
		EnterRule(_localctx, 326, RULE_memInitializer);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1859;
			meminitializerid();
			State = 1866;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case LeftParen:
				{
				State = 1860;
				Match(LeftParen);
				State = 1862;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << IntegerLiteral) | (1L << CharacterLiteral) | (1L << FloatingLiteral) | (1L << StringLiteral) | (1L << BooleanLiteral) | (1L << PointerLiteral) | (1L << UserDefinedLiteral) | (1L << Alignof) | (1L << Auto) | (1L << Bool) | (1L << Char) | (1L << Char16) | (1L << Char32) | (1L << Const_cast) | (1L << Decltype) | (1L << Delete) | (1L << Double) | (1L << Dynamic_cast) | (1L << Float) | (1L << Int) | (1L << Long) | (1L << New) | (1L << Noexcept) | (1L << Operator) | (1L << Reinterpret_cast) | (1L << Short) | (1L << Signed) | (1L << Sizeof))) != 0) || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & ((1L << (Static_cast - 65)) | (1L << (This - 65)) | (1L << (Throw - 65)) | (1L << (Typeid_ - 65)) | (1L << (Typename_ - 65)) | (1L << (Unsigned - 65)) | (1L << (Void - 65)) | (1L << (Wchar - 65)) | (1L << (LeftParen - 65)) | (1L << (LeftBracket - 65)) | (1L << (LeftBrace - 65)) | (1L << (Plus - 65)) | (1L << (Minus - 65)) | (1L << (Star - 65)) | (1L << (And - 65)) | (1L << (Or - 65)) | (1L << (Tilde - 65)) | (1L << (Not - 65)) | (1L << (PlusPlus - 65)) | (1L << (MinusMinus - 65)) | (1L << (Doublecolon - 65)))) != 0) || _la==Identifier) {
					{
					State = 1861;
					expressionList();
					}
				}

				State = 1864;
				Match(RightParen);
				}
				break;
			case LeftBrace:
				{
				State = 1865;
				bracedInitList();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MeminitializeridContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ClassOrDeclTypeContext classOrDeclType() {
			return GetRuleContext<ClassOrDeclTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(CPP14Parser.Identifier, 0); }
		public MeminitializeridContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_meminitializerid; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14ParserListener typedListener = listener as ICPP14ParserListener;
			if (typedListener != null) typedListener.EnterMeminitializerid(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14ParserListener typedListener = listener as ICPP14ParserListener;
			if (typedListener != null) typedListener.ExitMeminitializerid(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICPP14ParserVisitor<TResult> typedVisitor = visitor as ICPP14ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMeminitializerid(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MeminitializeridContext meminitializerid() {
		MeminitializeridContext _localctx = new MeminitializeridContext(Context, State);
		EnterRule(_localctx, 328, RULE_meminitializerid);
		try {
			State = 1870;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,270,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1868;
				classOrDeclType();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1869;
				Match(Identifier);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OperatorFunctionIdContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Operator() { return GetToken(CPP14Parser.Operator, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TheOperatorContext theOperator() {
			return GetRuleContext<TheOperatorContext>(0);
		}
		public OperatorFunctionIdContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_operatorFunctionId; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14ParserListener typedListener = listener as ICPP14ParserListener;
			if (typedListener != null) typedListener.EnterOperatorFunctionId(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14ParserListener typedListener = listener as ICPP14ParserListener;
			if (typedListener != null) typedListener.ExitOperatorFunctionId(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICPP14ParserVisitor<TResult> typedVisitor = visitor as ICPP14ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOperatorFunctionId(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OperatorFunctionIdContext operatorFunctionId() {
		OperatorFunctionIdContext _localctx = new OperatorFunctionIdContext(Context, State);
		EnterRule(_localctx, 330, RULE_operatorFunctionId);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1872;
			Match(Operator);
			State = 1873;
			theOperator();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LiteralOperatorIdContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Operator() { return GetToken(CPP14Parser.Operator, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode StringLiteral() { return GetToken(CPP14Parser.StringLiteral, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(CPP14Parser.Identifier, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UserDefinedStringLiteral() { return GetToken(CPP14Parser.UserDefinedStringLiteral, 0); }
		public LiteralOperatorIdContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_literalOperatorId; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14ParserListener typedListener = listener as ICPP14ParserListener;
			if (typedListener != null) typedListener.EnterLiteralOperatorId(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14ParserListener typedListener = listener as ICPP14ParserListener;
			if (typedListener != null) typedListener.ExitLiteralOperatorId(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICPP14ParserVisitor<TResult> typedVisitor = visitor as ICPP14ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLiteralOperatorId(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LiteralOperatorIdContext literalOperatorId() {
		LiteralOperatorIdContext _localctx = new LiteralOperatorIdContext(Context, State);
		EnterRule(_localctx, 332, RULE_literalOperatorId);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1875;
			Match(Operator);
			State = 1879;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case StringLiteral:
				{
				State = 1876;
				Match(StringLiteral);
				State = 1877;
				Match(Identifier);
				}
				break;
			case UserDefinedStringLiteral:
				{
				State = 1878;
				Match(UserDefinedStringLiteral);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TemplateDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Template() { return GetToken(CPP14Parser.Template, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Less() { return GetToken(CPP14Parser.Less, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TemplateparameterListContext templateparameterList() {
			return GetRuleContext<TemplateparameterListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Greater() { return GetToken(CPP14Parser.Greater, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public DeclarationContext declaration() {
			return GetRuleContext<DeclarationContext>(0);
		}
		public TemplateDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_templateDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14ParserListener typedListener = listener as ICPP14ParserListener;
			if (typedListener != null) typedListener.EnterTemplateDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14ParserListener typedListener = listener as ICPP14ParserListener;
			if (typedListener != null) typedListener.ExitTemplateDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICPP14ParserVisitor<TResult> typedVisitor = visitor as ICPP14ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTemplateDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TemplateDeclarationContext templateDeclaration() {
		TemplateDeclarationContext _localctx = new TemplateDeclarationContext(Context, State);
		EnterRule(_localctx, 334, RULE_templateDeclaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1881;
			Match(Template);
			State = 1882;
			Match(Less);
			State = 1883;
			templateparameterList();
			State = 1884;
			Match(Greater);
			State = 1885;
			declaration();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TemplateparameterListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TemplateParameterContext[] templateParameter() {
			return GetRuleContexts<TemplateParameterContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TemplateParameterContext templateParameter(int i) {
			return GetRuleContext<TemplateParameterContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Comma() { return GetTokens(CPP14Parser.Comma); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comma(int i) {
			return GetToken(CPP14Parser.Comma, i);
		}
		public TemplateparameterListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_templateparameterList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14ParserListener typedListener = listener as ICPP14ParserListener;
			if (typedListener != null) typedListener.EnterTemplateparameterList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14ParserListener typedListener = listener as ICPP14ParserListener;
			if (typedListener != null) typedListener.ExitTemplateparameterList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICPP14ParserVisitor<TResult> typedVisitor = visitor as ICPP14ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTemplateparameterList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TemplateparameterListContext templateparameterList() {
		TemplateparameterListContext _localctx = new TemplateparameterListContext(Context, State);
		EnterRule(_localctx, 336, RULE_templateparameterList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1887;
			templateParameter();
			State = 1892;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==Comma) {
				{
				{
				State = 1888;
				Match(Comma);
				State = 1889;
				templateParameter();
				}
				}
				State = 1894;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TemplateParameterContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypeParameterContext typeParameter() {
			return GetRuleContext<TypeParameterContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ParameterDeclarationContext parameterDeclaration() {
			return GetRuleContext<ParameterDeclarationContext>(0);
		}
		public TemplateParameterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_templateParameter; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14ParserListener typedListener = listener as ICPP14ParserListener;
			if (typedListener != null) typedListener.EnterTemplateParameter(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14ParserListener typedListener = listener as ICPP14ParserListener;
			if (typedListener != null) typedListener.ExitTemplateParameter(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICPP14ParserVisitor<TResult> typedVisitor = visitor as ICPP14ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTemplateParameter(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TemplateParameterContext templateParameter() {
		TemplateParameterContext _localctx = new TemplateParameterContext(Context, State);
		EnterRule(_localctx, 338, RULE_templateParameter);
		try {
			State = 1897;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,273,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1895;
				typeParameter();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1896;
				parameterDeclaration();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeParameterContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Class() { return GetToken(CPP14Parser.Class, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Typename_() { return GetToken(CPP14Parser.Typename_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Assign() { return GetToken(CPP14Parser.Assign, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TheTypeIdContext theTypeId() {
			return GetRuleContext<TheTypeIdContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Template() { return GetToken(CPP14Parser.Template, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Less() { return GetToken(CPP14Parser.Less, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TemplateparameterListContext templateparameterList() {
			return GetRuleContext<TemplateparameterListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Greater() { return GetToken(CPP14Parser.Greater, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Ellipsis() { return GetToken(CPP14Parser.Ellipsis, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(CPP14Parser.Identifier, 0); }
		public TypeParameterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeParameter; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14ParserListener typedListener = listener as ICPP14ParserListener;
			if (typedListener != null) typedListener.EnterTypeParameter(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14ParserListener typedListener = listener as ICPP14ParserListener;
			if (typedListener != null) typedListener.ExitTypeParameter(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICPP14ParserVisitor<TResult> typedVisitor = visitor as ICPP14ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeParameter(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeParameterContext typeParameter() {
		TypeParameterContext _localctx = new TypeParameterContext(Context, State);
		EnterRule(_localctx, 340, RULE_typeParameter);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1908;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case Class:
			case Template:
				{
				State = 1904;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==Template) {
					{
					State = 1899;
					Match(Template);
					State = 1900;
					Match(Less);
					State = 1901;
					templateparameterList();
					State = 1902;
					Match(Greater);
					}
				}

				State = 1906;
				Match(Class);
				}
				break;
			case Typename_:
				{
				State = 1907;
				Match(Typename_);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 1921;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,279,Context) ) {
			case 1:
				{
				{
				State = 1911;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==Ellipsis) {
					{
					State = 1910;
					Match(Ellipsis);
					}
				}

				State = 1914;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==Identifier) {
					{
					State = 1913;
					Match(Identifier);
					}
				}

				}
				}
				break;
			case 2:
				{
				{
				State = 1917;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==Identifier) {
					{
					State = 1916;
					Match(Identifier);
					}
				}

				State = 1919;
				Match(Assign);
				State = 1920;
				theTypeId();
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SimpleTemplateIdContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TemplateNameContext templateName() {
			return GetRuleContext<TemplateNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Less() { return GetToken(CPP14Parser.Less, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Greater() { return GetToken(CPP14Parser.Greater, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TemplateArgumentListContext templateArgumentList() {
			return GetRuleContext<TemplateArgumentListContext>(0);
		}
		public SimpleTemplateIdContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_simpleTemplateId; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14ParserListener typedListener = listener as ICPP14ParserListener;
			if (typedListener != null) typedListener.EnterSimpleTemplateId(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14ParserListener typedListener = listener as ICPP14ParserListener;
			if (typedListener != null) typedListener.ExitSimpleTemplateId(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICPP14ParserVisitor<TResult> typedVisitor = visitor as ICPP14ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSimpleTemplateId(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SimpleTemplateIdContext simpleTemplateId() {
		SimpleTemplateIdContext _localctx = new SimpleTemplateIdContext(Context, State);
		EnterRule(_localctx, 342, RULE_simpleTemplateId);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1923;
			templateName();
			State = 1924;
			Match(Less);
			State = 1926;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << IntegerLiteral) | (1L << CharacterLiteral) | (1L << FloatingLiteral) | (1L << StringLiteral) | (1L << BooleanLiteral) | (1L << PointerLiteral) | (1L << UserDefinedLiteral) | (1L << Alignof) | (1L << Auto) | (1L << Bool) | (1L << Char) | (1L << Char16) | (1L << Char32) | (1L << Class) | (1L << Const) | (1L << Const_cast) | (1L << Decltype) | (1L << Delete) | (1L << Double) | (1L << Dynamic_cast) | (1L << Enum) | (1L << Float) | (1L << Int) | (1L << Long) | (1L << New) | (1L << Noexcept) | (1L << Operator) | (1L << Reinterpret_cast) | (1L << Short) | (1L << Signed) | (1L << Sizeof))) != 0) || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & ((1L << (Static_cast - 65)) | (1L << (Struct - 65)) | (1L << (This - 65)) | (1L << (Typeid_ - 65)) | (1L << (Typename_ - 65)) | (1L << (Union - 65)) | (1L << (Unsigned - 65)) | (1L << (Void - 65)) | (1L << (Volatile - 65)) | (1L << (Wchar - 65)) | (1L << (LeftParen - 65)) | (1L << (LeftBracket - 65)) | (1L << (Plus - 65)) | (1L << (Minus - 65)) | (1L << (Star - 65)) | (1L << (And - 65)) | (1L << (Or - 65)) | (1L << (Tilde - 65)) | (1L << (Not - 65)) | (1L << (PlusPlus - 65)) | (1L << (MinusMinus - 65)) | (1L << (Doublecolon - 65)))) != 0) || _la==Identifier) {
				{
				State = 1925;
				templateArgumentList();
				}
			}

			State = 1928;
			Match(Greater);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TemplateIdContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SimpleTemplateIdContext simpleTemplateId() {
			return GetRuleContext<SimpleTemplateIdContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Less() { return GetToken(CPP14Parser.Less, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Greater() { return GetToken(CPP14Parser.Greater, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public OperatorFunctionIdContext operatorFunctionId() {
			return GetRuleContext<OperatorFunctionIdContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LiteralOperatorIdContext literalOperatorId() {
			return GetRuleContext<LiteralOperatorIdContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TemplateArgumentListContext templateArgumentList() {
			return GetRuleContext<TemplateArgumentListContext>(0);
		}
		public TemplateIdContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_templateId; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14ParserListener typedListener = listener as ICPP14ParserListener;
			if (typedListener != null) typedListener.EnterTemplateId(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14ParserListener typedListener = listener as ICPP14ParserListener;
			if (typedListener != null) typedListener.ExitTemplateId(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICPP14ParserVisitor<TResult> typedVisitor = visitor as ICPP14ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTemplateId(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TemplateIdContext templateId() {
		TemplateIdContext _localctx = new TemplateIdContext(Context, State);
		EnterRule(_localctx, 344, RULE_templateId);
		int _la;
		try {
			State = 1941;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case Identifier:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1930;
				simpleTemplateId();
				}
				break;
			case Operator:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1933;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,281,Context) ) {
				case 1:
					{
					State = 1931;
					operatorFunctionId();
					}
					break;
				case 2:
					{
					State = 1932;
					literalOperatorId();
					}
					break;
				}
				State = 1935;
				Match(Less);
				State = 1937;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << IntegerLiteral) | (1L << CharacterLiteral) | (1L << FloatingLiteral) | (1L << StringLiteral) | (1L << BooleanLiteral) | (1L << PointerLiteral) | (1L << UserDefinedLiteral) | (1L << Alignof) | (1L << Auto) | (1L << Bool) | (1L << Char) | (1L << Char16) | (1L << Char32) | (1L << Class) | (1L << Const) | (1L << Const_cast) | (1L << Decltype) | (1L << Delete) | (1L << Double) | (1L << Dynamic_cast) | (1L << Enum) | (1L << Float) | (1L << Int) | (1L << Long) | (1L << New) | (1L << Noexcept) | (1L << Operator) | (1L << Reinterpret_cast) | (1L << Short) | (1L << Signed) | (1L << Sizeof))) != 0) || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & ((1L << (Static_cast - 65)) | (1L << (Struct - 65)) | (1L << (This - 65)) | (1L << (Typeid_ - 65)) | (1L << (Typename_ - 65)) | (1L << (Union - 65)) | (1L << (Unsigned - 65)) | (1L << (Void - 65)) | (1L << (Volatile - 65)) | (1L << (Wchar - 65)) | (1L << (LeftParen - 65)) | (1L << (LeftBracket - 65)) | (1L << (Plus - 65)) | (1L << (Minus - 65)) | (1L << (Star - 65)) | (1L << (And - 65)) | (1L << (Or - 65)) | (1L << (Tilde - 65)) | (1L << (Not - 65)) | (1L << (PlusPlus - 65)) | (1L << (MinusMinus - 65)) | (1L << (Doublecolon - 65)))) != 0) || _la==Identifier) {
					{
					State = 1936;
					templateArgumentList();
					}
				}

				State = 1939;
				Match(Greater);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TemplateNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(CPP14Parser.Identifier, 0); }
		public TemplateNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_templateName; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14ParserListener typedListener = listener as ICPP14ParserListener;
			if (typedListener != null) typedListener.EnterTemplateName(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14ParserListener typedListener = listener as ICPP14ParserListener;
			if (typedListener != null) typedListener.ExitTemplateName(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICPP14ParserVisitor<TResult> typedVisitor = visitor as ICPP14ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTemplateName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TemplateNameContext templateName() {
		TemplateNameContext _localctx = new TemplateNameContext(Context, State);
		EnterRule(_localctx, 346, RULE_templateName);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1943;
			Match(Identifier);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TemplateArgumentListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TemplateArgumentContext[] templateArgument() {
			return GetRuleContexts<TemplateArgumentContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TemplateArgumentContext templateArgument(int i) {
			return GetRuleContext<TemplateArgumentContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Ellipsis() { return GetTokens(CPP14Parser.Ellipsis); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Ellipsis(int i) {
			return GetToken(CPP14Parser.Ellipsis, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Comma() { return GetTokens(CPP14Parser.Comma); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comma(int i) {
			return GetToken(CPP14Parser.Comma, i);
		}
		public TemplateArgumentListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_templateArgumentList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14ParserListener typedListener = listener as ICPP14ParserListener;
			if (typedListener != null) typedListener.EnterTemplateArgumentList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14ParserListener typedListener = listener as ICPP14ParserListener;
			if (typedListener != null) typedListener.ExitTemplateArgumentList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICPP14ParserVisitor<TResult> typedVisitor = visitor as ICPP14ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTemplateArgumentList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TemplateArgumentListContext templateArgumentList() {
		TemplateArgumentListContext _localctx = new TemplateArgumentListContext(Context, State);
		EnterRule(_localctx, 348, RULE_templateArgumentList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1945;
			templateArgument();
			State = 1947;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Ellipsis) {
				{
				State = 1946;
				Match(Ellipsis);
				}
			}

			State = 1956;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==Comma) {
				{
				{
				State = 1949;
				Match(Comma);
				State = 1950;
				templateArgument();
				State = 1952;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==Ellipsis) {
					{
					State = 1951;
					Match(Ellipsis);
					}
				}

				}
				}
				State = 1958;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TemplateArgumentContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TheTypeIdContext theTypeId() {
			return GetRuleContext<TheTypeIdContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ConstantExpressionContext constantExpression() {
			return GetRuleContext<ConstantExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdExpressionContext idExpression() {
			return GetRuleContext<IdExpressionContext>(0);
		}
		public TemplateArgumentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_templateArgument; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14ParserListener typedListener = listener as ICPP14ParserListener;
			if (typedListener != null) typedListener.EnterTemplateArgument(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14ParserListener typedListener = listener as ICPP14ParserListener;
			if (typedListener != null) typedListener.ExitTemplateArgument(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICPP14ParserVisitor<TResult> typedVisitor = visitor as ICPP14ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTemplateArgument(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TemplateArgumentContext templateArgument() {
		TemplateArgumentContext _localctx = new TemplateArgumentContext(Context, State);
		EnterRule(_localctx, 350, RULE_templateArgument);
		try {
			State = 1962;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,287,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1959;
				theTypeId();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1960;
				constantExpression();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1961;
				idExpression();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeNameSpecifierContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Typename_() { return GetToken(CPP14Parser.Typename_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NestedNameSpecifierContext nestedNameSpecifier() {
			return GetRuleContext<NestedNameSpecifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(CPP14Parser.Identifier, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SimpleTemplateIdContext simpleTemplateId() {
			return GetRuleContext<SimpleTemplateIdContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Template() { return GetToken(CPP14Parser.Template, 0); }
		public TypeNameSpecifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeNameSpecifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14ParserListener typedListener = listener as ICPP14ParserListener;
			if (typedListener != null) typedListener.EnterTypeNameSpecifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14ParserListener typedListener = listener as ICPP14ParserListener;
			if (typedListener != null) typedListener.ExitTypeNameSpecifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICPP14ParserVisitor<TResult> typedVisitor = visitor as ICPP14ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeNameSpecifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeNameSpecifierContext typeNameSpecifier() {
		TypeNameSpecifierContext _localctx = new TypeNameSpecifierContext(Context, State);
		EnterRule(_localctx, 352, RULE_typeNameSpecifier);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1964;
			Match(Typename_);
			State = 1965;
			nestedNameSpecifier(0);
			State = 1971;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,289,Context) ) {
			case 1:
				{
				State = 1966;
				Match(Identifier);
				}
				break;
			case 2:
				{
				State = 1968;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==Template) {
					{
					State = 1967;
					Match(Template);
					}
				}

				State = 1970;
				simpleTemplateId();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExplicitInstantiationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Template() { return GetToken(CPP14Parser.Template, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public DeclarationContext declaration() {
			return GetRuleContext<DeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Extern() { return GetToken(CPP14Parser.Extern, 0); }
		public ExplicitInstantiationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_explicitInstantiation; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14ParserListener typedListener = listener as ICPP14ParserListener;
			if (typedListener != null) typedListener.EnterExplicitInstantiation(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14ParserListener typedListener = listener as ICPP14ParserListener;
			if (typedListener != null) typedListener.ExitExplicitInstantiation(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICPP14ParserVisitor<TResult> typedVisitor = visitor as ICPP14ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExplicitInstantiation(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExplicitInstantiationContext explicitInstantiation() {
		ExplicitInstantiationContext _localctx = new ExplicitInstantiationContext(Context, State);
		EnterRule(_localctx, 354, RULE_explicitInstantiation);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1974;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Extern) {
				{
				State = 1973;
				Match(Extern);
				}
			}

			State = 1976;
			Match(Template);
			State = 1977;
			declaration();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExplicitSpecializationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Template() { return GetToken(CPP14Parser.Template, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Less() { return GetToken(CPP14Parser.Less, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Greater() { return GetToken(CPP14Parser.Greater, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public DeclarationContext declaration() {
			return GetRuleContext<DeclarationContext>(0);
		}
		public ExplicitSpecializationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_explicitSpecialization; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14ParserListener typedListener = listener as ICPP14ParserListener;
			if (typedListener != null) typedListener.EnterExplicitSpecialization(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14ParserListener typedListener = listener as ICPP14ParserListener;
			if (typedListener != null) typedListener.ExitExplicitSpecialization(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICPP14ParserVisitor<TResult> typedVisitor = visitor as ICPP14ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExplicitSpecialization(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExplicitSpecializationContext explicitSpecialization() {
		ExplicitSpecializationContext _localctx = new ExplicitSpecializationContext(Context, State);
		EnterRule(_localctx, 356, RULE_explicitSpecialization);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1979;
			Match(Template);
			State = 1980;
			Match(Less);
			State = 1981;
			Match(Greater);
			State = 1982;
			declaration();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TryBlockContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Try() { return GetToken(CPP14Parser.Try, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public CompoundStatementContext compoundStatement() {
			return GetRuleContext<CompoundStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public HandlerSeqContext handlerSeq() {
			return GetRuleContext<HandlerSeqContext>(0);
		}
		public TryBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tryBlock; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14ParserListener typedListener = listener as ICPP14ParserListener;
			if (typedListener != null) typedListener.EnterTryBlock(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14ParserListener typedListener = listener as ICPP14ParserListener;
			if (typedListener != null) typedListener.ExitTryBlock(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICPP14ParserVisitor<TResult> typedVisitor = visitor as ICPP14ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTryBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TryBlockContext tryBlock() {
		TryBlockContext _localctx = new TryBlockContext(Context, State);
		EnterRule(_localctx, 358, RULE_tryBlock);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1984;
			Match(Try);
			State = 1985;
			compoundStatement();
			State = 1986;
			handlerSeq();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionTryBlockContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Try() { return GetToken(CPP14Parser.Try, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public CompoundStatementContext compoundStatement() {
			return GetRuleContext<CompoundStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public HandlerSeqContext handlerSeq() {
			return GetRuleContext<HandlerSeqContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ConstructorInitializerContext constructorInitializer() {
			return GetRuleContext<ConstructorInitializerContext>(0);
		}
		public FunctionTryBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionTryBlock; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14ParserListener typedListener = listener as ICPP14ParserListener;
			if (typedListener != null) typedListener.EnterFunctionTryBlock(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14ParserListener typedListener = listener as ICPP14ParserListener;
			if (typedListener != null) typedListener.ExitFunctionTryBlock(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICPP14ParserVisitor<TResult> typedVisitor = visitor as ICPP14ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionTryBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionTryBlockContext functionTryBlock() {
		FunctionTryBlockContext _localctx = new FunctionTryBlockContext(Context, State);
		EnterRule(_localctx, 360, RULE_functionTryBlock);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1988;
			Match(Try);
			State = 1990;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Colon) {
				{
				State = 1989;
				constructorInitializer();
				}
			}

			State = 1992;
			compoundStatement();
			State = 1993;
			handlerSeq();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class HandlerSeqContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public HandlerContext[] handler() {
			return GetRuleContexts<HandlerContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public HandlerContext handler(int i) {
			return GetRuleContext<HandlerContext>(i);
		}
		public HandlerSeqContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_handlerSeq; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14ParserListener typedListener = listener as ICPP14ParserListener;
			if (typedListener != null) typedListener.EnterHandlerSeq(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14ParserListener typedListener = listener as ICPP14ParserListener;
			if (typedListener != null) typedListener.ExitHandlerSeq(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICPP14ParserVisitor<TResult> typedVisitor = visitor as ICPP14ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitHandlerSeq(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public HandlerSeqContext handlerSeq() {
		HandlerSeqContext _localctx = new HandlerSeqContext(Context, State);
		EnterRule(_localctx, 362, RULE_handlerSeq);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1996;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 1995;
				handler();
				}
				}
				State = 1998;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==Catch );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class HandlerContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Catch() { return GetToken(CPP14Parser.Catch, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LeftParen() { return GetToken(CPP14Parser.LeftParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExceptionDeclarationContext exceptionDeclaration() {
			return GetRuleContext<ExceptionDeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RightParen() { return GetToken(CPP14Parser.RightParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public CompoundStatementContext compoundStatement() {
			return GetRuleContext<CompoundStatementContext>(0);
		}
		public HandlerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_handler; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14ParserListener typedListener = listener as ICPP14ParserListener;
			if (typedListener != null) typedListener.EnterHandler(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14ParserListener typedListener = listener as ICPP14ParserListener;
			if (typedListener != null) typedListener.ExitHandler(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICPP14ParserVisitor<TResult> typedVisitor = visitor as ICPP14ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitHandler(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public HandlerContext handler() {
		HandlerContext _localctx = new HandlerContext(Context, State);
		EnterRule(_localctx, 364, RULE_handler);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2000;
			Match(Catch);
			State = 2001;
			Match(LeftParen);
			State = 2002;
			exceptionDeclaration();
			State = 2003;
			Match(RightParen);
			State = 2004;
			compoundStatement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExceptionDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypeSpecifierSeqContext typeSpecifierSeq() {
			return GetRuleContext<TypeSpecifierSeqContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AttributeSpecifierSeqContext attributeSpecifierSeq() {
			return GetRuleContext<AttributeSpecifierSeqContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DeclaratorContext declarator() {
			return GetRuleContext<DeclaratorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AbstractDeclaratorContext abstractDeclarator() {
			return GetRuleContext<AbstractDeclaratorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Ellipsis() { return GetToken(CPP14Parser.Ellipsis, 0); }
		public ExceptionDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_exceptionDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14ParserListener typedListener = listener as ICPP14ParserListener;
			if (typedListener != null) typedListener.EnterExceptionDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14ParserListener typedListener = listener as ICPP14ParserListener;
			if (typedListener != null) typedListener.ExitExceptionDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICPP14ParserVisitor<TResult> typedVisitor = visitor as ICPP14ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExceptionDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExceptionDeclarationContext exceptionDeclaration() {
		ExceptionDeclarationContext _localctx = new ExceptionDeclarationContext(Context, State);
		EnterRule(_localctx, 366, RULE_exceptionDeclaration);
		int _la;
		try {
			State = 2015;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case Alignas:
			case Auto:
			case Bool:
			case Char:
			case Char16:
			case Char32:
			case Class:
			case Const:
			case Decltype:
			case Double:
			case Enum:
			case Float:
			case Int:
			case Long:
			case Short:
			case Signed:
			case Struct:
			case Typename_:
			case Union:
			case Unsigned:
			case Void:
			case Volatile:
			case Wchar:
			case LeftBracket:
			case Doublecolon:
			case Identifier:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2007;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==Alignas || _la==LeftBracket) {
					{
					State = 2006;
					attributeSpecifierSeq();
					}
				}

				State = 2009;
				typeSpecifierSeq();
				State = 2012;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,294,Context) ) {
				case 1:
					{
					State = 2010;
					declarator();
					}
					break;
				case 2:
					{
					State = 2011;
					abstractDeclarator();
					}
					break;
				}
				}
				break;
			case Ellipsis:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2014;
				Match(Ellipsis);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ThrowExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Throw() { return GetToken(CPP14Parser.Throw, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public AssignmentExpressionContext assignmentExpression() {
			return GetRuleContext<AssignmentExpressionContext>(0);
		}
		public ThrowExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_throwExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14ParserListener typedListener = listener as ICPP14ParserListener;
			if (typedListener != null) typedListener.EnterThrowExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14ParserListener typedListener = listener as ICPP14ParserListener;
			if (typedListener != null) typedListener.ExitThrowExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICPP14ParserVisitor<TResult> typedVisitor = visitor as ICPP14ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitThrowExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ThrowExpressionContext throwExpression() {
		ThrowExpressionContext _localctx = new ThrowExpressionContext(Context, State);
		EnterRule(_localctx, 368, RULE_throwExpression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2017;
			Match(Throw);
			State = 2019;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << IntegerLiteral) | (1L << CharacterLiteral) | (1L << FloatingLiteral) | (1L << StringLiteral) | (1L << BooleanLiteral) | (1L << PointerLiteral) | (1L << UserDefinedLiteral) | (1L << Alignof) | (1L << Auto) | (1L << Bool) | (1L << Char) | (1L << Char16) | (1L << Char32) | (1L << Const_cast) | (1L << Decltype) | (1L << Delete) | (1L << Double) | (1L << Dynamic_cast) | (1L << Float) | (1L << Int) | (1L << Long) | (1L << New) | (1L << Noexcept) | (1L << Operator) | (1L << Reinterpret_cast) | (1L << Short) | (1L << Signed) | (1L << Sizeof))) != 0) || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & ((1L << (Static_cast - 65)) | (1L << (This - 65)) | (1L << (Throw - 65)) | (1L << (Typeid_ - 65)) | (1L << (Typename_ - 65)) | (1L << (Unsigned - 65)) | (1L << (Void - 65)) | (1L << (Wchar - 65)) | (1L << (LeftParen - 65)) | (1L << (LeftBracket - 65)) | (1L << (Plus - 65)) | (1L << (Minus - 65)) | (1L << (Star - 65)) | (1L << (And - 65)) | (1L << (Or - 65)) | (1L << (Tilde - 65)) | (1L << (Not - 65)) | (1L << (PlusPlus - 65)) | (1L << (MinusMinus - 65)) | (1L << (Doublecolon - 65)))) != 0) || _la==Identifier) {
				{
				State = 2018;
				assignmentExpression();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExceptionSpecificationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public DynamicExceptionSpecificationContext dynamicExceptionSpecification() {
			return GetRuleContext<DynamicExceptionSpecificationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NoeExceptSpecificationContext noeExceptSpecification() {
			return GetRuleContext<NoeExceptSpecificationContext>(0);
		}
		public ExceptionSpecificationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_exceptionSpecification; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14ParserListener typedListener = listener as ICPP14ParserListener;
			if (typedListener != null) typedListener.EnterExceptionSpecification(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14ParserListener typedListener = listener as ICPP14ParserListener;
			if (typedListener != null) typedListener.ExitExceptionSpecification(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICPP14ParserVisitor<TResult> typedVisitor = visitor as ICPP14ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExceptionSpecification(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExceptionSpecificationContext exceptionSpecification() {
		ExceptionSpecificationContext _localctx = new ExceptionSpecificationContext(Context, State);
		EnterRule(_localctx, 370, RULE_exceptionSpecification);
		try {
			State = 2023;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case Throw:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2021;
				dynamicExceptionSpecification();
				}
				break;
			case Noexcept:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2022;
				noeExceptSpecification();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DynamicExceptionSpecificationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Throw() { return GetToken(CPP14Parser.Throw, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LeftParen() { return GetToken(CPP14Parser.LeftParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RightParen() { return GetToken(CPP14Parser.RightParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeIdListContext typeIdList() {
			return GetRuleContext<TypeIdListContext>(0);
		}
		public DynamicExceptionSpecificationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dynamicExceptionSpecification; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14ParserListener typedListener = listener as ICPP14ParserListener;
			if (typedListener != null) typedListener.EnterDynamicExceptionSpecification(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14ParserListener typedListener = listener as ICPP14ParserListener;
			if (typedListener != null) typedListener.ExitDynamicExceptionSpecification(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICPP14ParserVisitor<TResult> typedVisitor = visitor as ICPP14ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDynamicExceptionSpecification(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DynamicExceptionSpecificationContext dynamicExceptionSpecification() {
		DynamicExceptionSpecificationContext _localctx = new DynamicExceptionSpecificationContext(Context, State);
		EnterRule(_localctx, 372, RULE_dynamicExceptionSpecification);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2025;
			Match(Throw);
			State = 2026;
			Match(LeftParen);
			State = 2028;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (((((_la - 13)) & ~0x3f) == 0 && ((1L << (_la - 13)) & ((1L << (Auto - 13)) | (1L << (Bool - 13)) | (1L << (Char - 13)) | (1L << (Char16 - 13)) | (1L << (Char32 - 13)) | (1L << (Class - 13)) | (1L << (Const - 13)) | (1L << (Decltype - 13)) | (1L << (Double - 13)) | (1L << (Enum - 13)) | (1L << (Float - 13)) | (1L << (Int - 13)) | (1L << (Long - 13)) | (1L << (Short - 13)) | (1L << (Signed - 13)) | (1L << (Struct - 13)) | (1L << (Typename_ - 13)))) != 0) || ((((_la - 77)) & ~0x3f) == 0 && ((1L << (_la - 77)) & ((1L << (Union - 77)) | (1L << (Unsigned - 77)) | (1L << (Void - 77)) | (1L << (Volatile - 77)) | (1L << (Wchar - 77)) | (1L << (Doublecolon - 77)) | (1L << (Identifier - 77)))) != 0)) {
				{
				State = 2027;
				typeIdList();
				}
			}

			State = 2030;
			Match(RightParen);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeIdListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TheTypeIdContext[] theTypeId() {
			return GetRuleContexts<TheTypeIdContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TheTypeIdContext theTypeId(int i) {
			return GetRuleContext<TheTypeIdContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Ellipsis() { return GetTokens(CPP14Parser.Ellipsis); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Ellipsis(int i) {
			return GetToken(CPP14Parser.Ellipsis, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Comma() { return GetTokens(CPP14Parser.Comma); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comma(int i) {
			return GetToken(CPP14Parser.Comma, i);
		}
		public TypeIdListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeIdList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14ParserListener typedListener = listener as ICPP14ParserListener;
			if (typedListener != null) typedListener.EnterTypeIdList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14ParserListener typedListener = listener as ICPP14ParserListener;
			if (typedListener != null) typedListener.ExitTypeIdList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICPP14ParserVisitor<TResult> typedVisitor = visitor as ICPP14ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeIdList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeIdListContext typeIdList() {
		TypeIdListContext _localctx = new TypeIdListContext(Context, State);
		EnterRule(_localctx, 374, RULE_typeIdList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2032;
			theTypeId();
			State = 2034;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Ellipsis) {
				{
				State = 2033;
				Match(Ellipsis);
				}
			}

			State = 2043;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==Comma) {
				{
				{
				State = 2036;
				Match(Comma);
				State = 2037;
				theTypeId();
				State = 2039;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==Ellipsis) {
					{
					State = 2038;
					Match(Ellipsis);
					}
				}

				}
				}
				State = 2045;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NoeExceptSpecificationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Noexcept() { return GetToken(CPP14Parser.Noexcept, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LeftParen() { return GetToken(CPP14Parser.LeftParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ConstantExpressionContext constantExpression() {
			return GetRuleContext<ConstantExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RightParen() { return GetToken(CPP14Parser.RightParen, 0); }
		public NoeExceptSpecificationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_noeExceptSpecification; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14ParserListener typedListener = listener as ICPP14ParserListener;
			if (typedListener != null) typedListener.EnterNoeExceptSpecification(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14ParserListener typedListener = listener as ICPP14ParserListener;
			if (typedListener != null) typedListener.ExitNoeExceptSpecification(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICPP14ParserVisitor<TResult> typedVisitor = visitor as ICPP14ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNoeExceptSpecification(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NoeExceptSpecificationContext noeExceptSpecification() {
		NoeExceptSpecificationContext _localctx = new NoeExceptSpecificationContext(Context, State);
		EnterRule(_localctx, 376, RULE_noeExceptSpecification);
		try {
			State = 2052;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,302,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2046;
				Match(Noexcept);
				State = 2047;
				Match(LeftParen);
				State = 2048;
				constantExpression();
				State = 2049;
				Match(RightParen);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2051;
				Match(Noexcept);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TheOperatorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode New() { return GetToken(CPP14Parser.New, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LeftBracket() { return GetToken(CPP14Parser.LeftBracket, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RightBracket() { return GetToken(CPP14Parser.RightBracket, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Delete() { return GetToken(CPP14Parser.Delete, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Plus() { return GetToken(CPP14Parser.Plus, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Minus() { return GetToken(CPP14Parser.Minus, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Star() { return GetToken(CPP14Parser.Star, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Div() { return GetToken(CPP14Parser.Div, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Mod() { return GetToken(CPP14Parser.Mod, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Caret() { return GetToken(CPP14Parser.Caret, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode And() { return GetToken(CPP14Parser.And, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Or() { return GetToken(CPP14Parser.Or, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Tilde() { return GetToken(CPP14Parser.Tilde, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Not() { return GetToken(CPP14Parser.Not, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Assign() { return GetToken(CPP14Parser.Assign, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Greater() { return GetTokens(CPP14Parser.Greater); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Greater(int i) {
			return GetToken(CPP14Parser.Greater, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Less() { return GetTokens(CPP14Parser.Less); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Less(int i) {
			return GetToken(CPP14Parser.Less, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GreaterEqual() { return GetToken(CPP14Parser.GreaterEqual, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PlusAssign() { return GetToken(CPP14Parser.PlusAssign, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MinusAssign() { return GetToken(CPP14Parser.MinusAssign, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode StarAssign() { return GetToken(CPP14Parser.StarAssign, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ModAssign() { return GetToken(CPP14Parser.ModAssign, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode XorAssign() { return GetToken(CPP14Parser.XorAssign, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AndAssign() { return GetToken(CPP14Parser.AndAssign, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OrAssign() { return GetToken(CPP14Parser.OrAssign, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RightShiftAssign() { return GetToken(CPP14Parser.RightShiftAssign, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LeftShiftAssign() { return GetToken(CPP14Parser.LeftShiftAssign, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Equal() { return GetToken(CPP14Parser.Equal, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NotEqual() { return GetToken(CPP14Parser.NotEqual, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LessEqual() { return GetToken(CPP14Parser.LessEqual, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AndAnd() { return GetToken(CPP14Parser.AndAnd, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OrOr() { return GetToken(CPP14Parser.OrOr, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PlusPlus() { return GetToken(CPP14Parser.PlusPlus, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MinusMinus() { return GetToken(CPP14Parser.MinusMinus, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comma() { return GetToken(CPP14Parser.Comma, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ArrowStar() { return GetToken(CPP14Parser.ArrowStar, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Arrow() { return GetToken(CPP14Parser.Arrow, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LeftParen() { return GetToken(CPP14Parser.LeftParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RightParen() { return GetToken(CPP14Parser.RightParen, 0); }
		public TheOperatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_theOperator; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14ParserListener typedListener = listener as ICPP14ParserListener;
			if (typedListener != null) typedListener.EnterTheOperator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14ParserListener typedListener = listener as ICPP14ParserListener;
			if (typedListener != null) typedListener.ExitTheOperator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICPP14ParserVisitor<TResult> typedVisitor = visitor as ICPP14ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTheOperator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TheOperatorContext theOperator() {
		TheOperatorContext _localctx = new TheOperatorContext(Context, State);
		EnterRule(_localctx, 378, RULE_theOperator);
		try {
			State = 2105;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,305,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2054;
				Match(New);
				State = 2057;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,303,Context) ) {
				case 1:
					{
					State = 2055;
					Match(LeftBracket);
					State = 2056;
					Match(RightBracket);
					}
					break;
				}
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2059;
				Match(Delete);
				State = 2062;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,304,Context) ) {
				case 1:
					{
					State = 2060;
					Match(LeftBracket);
					State = 2061;
					Match(RightBracket);
					}
					break;
				}
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 2064;
				Match(Plus);
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 2065;
				Match(Minus);
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 2066;
				Match(Star);
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 2067;
				Match(Div);
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 2068;
				Match(Mod);
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 2069;
				Match(Caret);
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 2070;
				Match(And);
				}
				break;
			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 2071;
				Match(Or);
				}
				break;
			case 11:
				EnterOuterAlt(_localctx, 11);
				{
				State = 2072;
				Match(Tilde);
				}
				break;
			case 12:
				EnterOuterAlt(_localctx, 12);
				{
				State = 2073;
				Match(Not);
				}
				break;
			case 13:
				EnterOuterAlt(_localctx, 13);
				{
				State = 2074;
				Match(Assign);
				}
				break;
			case 14:
				EnterOuterAlt(_localctx, 14);
				{
				State = 2075;
				Match(Greater);
				}
				break;
			case 15:
				EnterOuterAlt(_localctx, 15);
				{
				State = 2076;
				Match(Less);
				}
				break;
			case 16:
				EnterOuterAlt(_localctx, 16);
				{
				State = 2077;
				Match(GreaterEqual);
				}
				break;
			case 17:
				EnterOuterAlt(_localctx, 17);
				{
				State = 2078;
				Match(PlusAssign);
				}
				break;
			case 18:
				EnterOuterAlt(_localctx, 18);
				{
				State = 2079;
				Match(MinusAssign);
				}
				break;
			case 19:
				EnterOuterAlt(_localctx, 19);
				{
				State = 2080;
				Match(StarAssign);
				}
				break;
			case 20:
				EnterOuterAlt(_localctx, 20);
				{
				State = 2081;
				Match(ModAssign);
				}
				break;
			case 21:
				EnterOuterAlt(_localctx, 21);
				{
				State = 2082;
				Match(XorAssign);
				}
				break;
			case 22:
				EnterOuterAlt(_localctx, 22);
				{
				State = 2083;
				Match(AndAssign);
				}
				break;
			case 23:
				EnterOuterAlt(_localctx, 23);
				{
				State = 2084;
				Match(OrAssign);
				}
				break;
			case 24:
				EnterOuterAlt(_localctx, 24);
				{
				State = 2085;
				Match(Less);
				State = 2086;
				Match(Less);
				}
				break;
			case 25:
				EnterOuterAlt(_localctx, 25);
				{
				State = 2087;
				Match(Greater);
				State = 2088;
				Match(Greater);
				}
				break;
			case 26:
				EnterOuterAlt(_localctx, 26);
				{
				State = 2089;
				Match(RightShiftAssign);
				}
				break;
			case 27:
				EnterOuterAlt(_localctx, 27);
				{
				State = 2090;
				Match(LeftShiftAssign);
				}
				break;
			case 28:
				EnterOuterAlt(_localctx, 28);
				{
				State = 2091;
				Match(Equal);
				}
				break;
			case 29:
				EnterOuterAlt(_localctx, 29);
				{
				State = 2092;
				Match(NotEqual);
				}
				break;
			case 30:
				EnterOuterAlt(_localctx, 30);
				{
				State = 2093;
				Match(LessEqual);
				}
				break;
			case 31:
				EnterOuterAlt(_localctx, 31);
				{
				State = 2094;
				Match(AndAnd);
				}
				break;
			case 32:
				EnterOuterAlt(_localctx, 32);
				{
				State = 2095;
				Match(OrOr);
				}
				break;
			case 33:
				EnterOuterAlt(_localctx, 33);
				{
				State = 2096;
				Match(PlusPlus);
				}
				break;
			case 34:
				EnterOuterAlt(_localctx, 34);
				{
				State = 2097;
				Match(MinusMinus);
				}
				break;
			case 35:
				EnterOuterAlt(_localctx, 35);
				{
				State = 2098;
				Match(Comma);
				}
				break;
			case 36:
				EnterOuterAlt(_localctx, 36);
				{
				State = 2099;
				Match(ArrowStar);
				}
				break;
			case 37:
				EnterOuterAlt(_localctx, 37);
				{
				State = 2100;
				Match(Arrow);
				}
				break;
			case 38:
				EnterOuterAlt(_localctx, 38);
				{
				State = 2101;
				Match(LeftParen);
				State = 2102;
				Match(RightParen);
				}
				break;
			case 39:
				EnterOuterAlt(_localctx, 39);
				{
				State = 2103;
				Match(LeftBracket);
				State = 2104;
				Match(RightBracket);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LiteralContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IntegerLiteral() { return GetToken(CPP14Parser.IntegerLiteral, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CharacterLiteral() { return GetToken(CPP14Parser.CharacterLiteral, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FloatingLiteral() { return GetToken(CPP14Parser.FloatingLiteral, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode StringLiteral() { return GetToken(CPP14Parser.StringLiteral, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BooleanLiteral() { return GetToken(CPP14Parser.BooleanLiteral, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PointerLiteral() { return GetToken(CPP14Parser.PointerLiteral, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UserDefinedLiteral() { return GetToken(CPP14Parser.UserDefinedLiteral, 0); }
		public LiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_literal; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14ParserListener typedListener = listener as ICPP14ParserListener;
			if (typedListener != null) typedListener.EnterLiteral(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14ParserListener typedListener = listener as ICPP14ParserListener;
			if (typedListener != null) typedListener.ExitLiteral(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICPP14ParserVisitor<TResult> typedVisitor = visitor as ICPP14ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LiteralContext literal() {
		LiteralContext _localctx = new LiteralContext(Context, State);
		EnterRule(_localctx, 380, RULE_literal);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2107;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << IntegerLiteral) | (1L << CharacterLiteral) | (1L << FloatingLiteral) | (1L << StringLiteral) | (1L << BooleanLiteral) | (1L << PointerLiteral) | (1L << UserDefinedLiteral))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 5: return nestedNameSpecifier_sempred((NestedNameSpecifierContext)_localctx, predIndex);
		case 15: return postfixExpression_sempred((PostfixExpressionContext)_localctx, predIndex);
		case 25: return noPointerNewDeclarator_sempred((NoPointerNewDeclaratorContext)_localctx, predIndex);
		case 115: return noPointerDeclarator_sempred((NoPointerDeclaratorContext)_localctx, predIndex);
		case 126: return noPointerAbstractDeclarator_sempred((NoPointerAbstractDeclaratorContext)_localctx, predIndex);
		case 128: return noPointerAbstractPackDeclarator_sempred((NoPointerAbstractPackDeclaratorContext)_localctx, predIndex);
		}
		return true;
	}
	private bool nestedNameSpecifier_sempred(NestedNameSpecifierContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 1);
		}
		return true;
	}
	private bool postfixExpression_sempred(PostfixExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 1: return Precpred(Context, 7);
		case 2: return Precpred(Context, 6);
		case 3: return Precpred(Context, 4);
		case 4: return Precpred(Context, 3);
		}
		return true;
	}
	private bool noPointerNewDeclarator_sempred(NoPointerNewDeclaratorContext _localctx, int predIndex) {
		switch (predIndex) {
		case 5: return Precpred(Context, 1);
		}
		return true;
	}
	private bool noPointerDeclarator_sempred(NoPointerDeclaratorContext _localctx, int predIndex) {
		switch (predIndex) {
		case 6: return Precpred(Context, 2);
		}
		return true;
	}
	private bool noPointerAbstractDeclarator_sempred(NoPointerAbstractDeclaratorContext _localctx, int predIndex) {
		switch (predIndex) {
		case 7: return Precpred(Context, 4);
		}
		return true;
	}
	private bool noPointerAbstractPackDeclarator_sempred(NoPointerAbstractPackDeclaratorContext _localctx, int predIndex) {
		switch (predIndex) {
		case 8: return Precpred(Context, 2);
		}
		return true;
	}

	private static int[] _serializedATN = {
		4,1,145,2110,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,
		7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,7,14,
		2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,7,21,
		2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,7,28,
		2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,2,35,7,35,
		2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,2,42,7,42,
		2,43,7,43,2,44,7,44,2,45,7,45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,
		2,50,7,50,2,51,7,51,2,52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,7,56,
		2,57,7,57,2,58,7,58,2,59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,7,63,
		2,64,7,64,2,65,7,65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,2,70,7,70,
		2,71,7,71,2,72,7,72,2,73,7,73,2,74,7,74,2,75,7,75,2,76,7,76,2,77,7,77,
		2,78,7,78,2,79,7,79,2,80,7,80,2,81,7,81,2,82,7,82,2,83,7,83,2,84,7,84,
		2,85,7,85,2,86,7,86,2,87,7,87,2,88,7,88,2,89,7,89,2,90,7,90,2,91,7,91,
		2,92,7,92,2,93,7,93,2,94,7,94,2,95,7,95,2,96,7,96,2,97,7,97,2,98,7,98,
		2,99,7,99,2,100,7,100,2,101,7,101,2,102,7,102,2,103,7,103,2,104,7,104,
		2,105,7,105,2,106,7,106,2,107,7,107,2,108,7,108,2,109,7,109,2,110,7,110,
		2,111,7,111,2,112,7,112,2,113,7,113,2,114,7,114,2,115,7,115,2,116,7,116,
		2,117,7,117,2,118,7,118,2,119,7,119,2,120,7,120,2,121,7,121,2,122,7,122,
		2,123,7,123,2,124,7,124,2,125,7,125,2,126,7,126,2,127,7,127,2,128,7,128,
		2,129,7,129,2,130,7,130,2,131,7,131,2,132,7,132,2,133,7,133,2,134,7,134,
		2,135,7,135,2,136,7,136,2,137,7,137,2,138,7,138,2,139,7,139,2,140,7,140,
		2,141,7,141,2,142,7,142,2,143,7,143,2,144,7,144,2,145,7,145,2,146,7,146,
		2,147,7,147,2,148,7,148,2,149,7,149,2,150,7,150,2,151,7,151,2,152,7,152,
		2,153,7,153,2,154,7,154,2,155,7,155,2,156,7,156,2,157,7,157,2,158,7,158,
		2,159,7,159,2,160,7,160,2,161,7,161,2,162,7,162,2,163,7,163,2,164,7,164,
		2,165,7,165,2,166,7,166,2,167,7,167,2,168,7,168,2,169,7,169,2,170,7,170,
		2,171,7,171,2,172,7,172,2,173,7,173,2,174,7,174,2,175,7,175,2,176,7,176,
		2,177,7,177,2,178,7,178,2,179,7,179,2,180,7,180,2,181,7,181,2,182,7,182,
		2,183,7,183,2,184,7,184,2,185,7,185,2,186,7,186,2,187,7,187,2,188,7,188,
		2,189,7,189,2,190,7,190,1,0,3,0,384,8,0,1,0,1,0,1,1,4,1,389,8,1,11,1,12,
		1,390,1,1,1,1,1,1,1,1,1,1,1,1,1,1,3,1,400,8,1,1,2,1,2,3,2,404,8,2,1,3,
		1,3,1,3,1,3,1,3,1,3,1,3,3,3,413,8,3,1,3,3,3,416,8,3,1,4,1,4,3,4,420,8,
		4,1,4,1,4,1,5,1,5,1,5,1,5,3,5,428,8,5,1,5,1,5,1,5,1,5,1,5,3,5,435,8,5,
		1,5,3,5,438,8,5,1,5,5,5,441,8,5,10,5,12,5,444,9,5,1,6,1,6,3,6,448,8,6,
		1,6,1,6,1,7,1,7,3,7,454,8,7,1,7,1,7,1,8,1,8,1,8,1,8,3,8,462,8,8,3,8,464,
		8,8,1,9,1,9,1,10,1,10,1,10,5,10,471,8,10,10,10,12,10,474,9,10,1,10,3,10,
		477,8,10,1,11,1,11,3,11,481,8,11,1,12,3,12,484,8,12,1,12,1,12,3,12,488,
		8,12,1,13,3,13,491,8,13,1,13,1,13,1,13,1,14,1,14,3,14,498,8,14,1,14,1,
		14,3,14,502,8,14,1,14,3,14,505,8,14,1,14,3,14,508,8,14,1,14,3,14,511,8,
		14,1,15,1,15,1,15,1,15,3,15,517,8,15,1,15,1,15,3,15,521,8,15,1,15,1,15,
		3,15,525,8,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,
		15,3,15,539,8,15,1,15,1,15,3,15,543,8,15,1,15,1,15,1,15,1,15,3,15,549,
		8,15,1,15,1,15,1,15,1,15,1,15,3,15,556,8,15,1,15,1,15,1,15,1,15,3,15,562,
		8,15,1,15,1,15,3,15,566,8,15,1,15,1,15,5,15,570,8,15,10,15,12,15,573,9,
		15,1,16,1,16,1,17,1,17,1,18,3,18,580,8,18,1,18,1,18,1,18,3,18,585,8,18,
		1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,18,3,18,598,8,18,1,
		19,1,19,1,19,1,19,1,19,3,19,605,8,19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,
		1,19,1,19,1,19,3,19,617,8,19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,3,
		19,627,8,19,1,20,1,20,1,21,3,21,632,8,21,1,21,1,21,3,21,636,8,21,1,21,
		1,21,1,21,1,21,1,21,3,21,643,8,21,1,21,3,21,646,8,21,1,22,1,22,1,22,1,
		22,1,23,1,23,3,23,654,8,23,1,24,1,24,3,24,658,8,24,1,24,3,24,661,8,24,
		1,25,1,25,1,25,1,25,1,25,3,25,668,8,25,1,25,1,25,1,25,1,25,1,25,3,25,675,
		8,25,5,25,677,8,25,10,25,12,25,680,9,25,1,26,1,26,3,26,684,8,26,1,26,1,
		26,3,26,688,8,26,1,27,3,27,691,8,27,1,27,1,27,1,27,3,27,696,8,27,1,27,
		1,27,1,28,1,28,1,28,1,28,1,28,1,29,1,29,1,29,1,29,1,29,1,29,3,29,711,8,
		29,1,30,1,30,1,30,5,30,716,8,30,10,30,12,30,719,9,30,1,31,1,31,1,31,5,
		31,724,8,31,10,31,12,31,727,9,31,1,32,1,32,1,32,5,32,732,8,32,10,32,12,
		32,735,9,32,1,33,1,33,1,33,1,33,5,33,741,8,33,10,33,12,33,744,9,33,1,34,
		1,34,1,34,1,34,3,34,750,8,34,1,35,1,35,1,35,5,35,755,8,35,10,35,12,35,
		758,9,35,1,36,1,36,1,36,5,36,763,8,36,10,36,12,36,766,9,36,1,37,1,37,1,
		37,5,37,771,8,37,10,37,12,37,774,9,37,1,38,1,38,1,38,5,38,779,8,38,10,
		38,12,38,782,9,38,1,39,1,39,1,39,5,39,787,8,39,10,39,12,39,790,9,39,1,
		40,1,40,1,40,5,40,795,8,40,10,40,12,40,798,9,40,1,41,1,41,1,41,5,41,803,
		8,41,10,41,12,41,806,9,41,1,42,1,42,1,42,1,42,1,42,1,42,3,42,814,8,42,
		1,43,1,43,1,43,1,43,1,43,1,43,3,43,822,8,43,1,44,1,44,1,45,1,45,1,45,5,
		45,829,8,45,10,45,12,45,832,9,45,1,46,1,46,1,47,1,47,1,47,3,47,839,8,47,
		1,47,1,47,1,47,1,47,1,47,1,47,3,47,847,8,47,3,47,849,8,47,1,48,3,48,852,
		8,48,1,48,1,48,1,48,1,48,3,48,858,8,48,1,48,1,48,1,48,1,49,3,49,864,8,
		49,1,49,1,49,1,50,1,50,3,50,870,8,50,1,50,1,50,1,51,4,51,875,8,51,11,51,
		12,51,876,1,52,1,52,1,52,1,52,1,52,1,52,1,52,3,52,886,8,52,1,52,1,52,1,
		52,1,52,1,52,1,52,3,52,894,8,52,1,53,1,53,3,53,898,8,53,1,53,1,53,1,53,
		1,53,1,53,3,53,905,8,53,3,53,907,8,53,1,54,1,54,1,54,1,54,1,54,1,54,1,
		54,1,54,1,54,1,54,1,54,1,54,1,54,1,54,1,54,1,54,1,54,1,54,3,54,927,8,54,
		1,54,1,54,3,54,931,8,54,1,54,1,54,1,54,1,54,3,54,937,8,54,1,54,1,54,1,
		54,3,54,942,8,54,1,55,1,55,3,55,946,8,55,1,56,3,56,949,8,56,1,56,1,56,
		1,56,1,57,1,57,3,57,956,8,57,1,58,1,58,1,58,1,58,1,58,3,58,963,8,58,1,
		58,1,58,3,58,967,8,58,1,58,1,58,1,59,1,59,1,60,4,60,974,8,60,11,60,12,
		60,975,1,61,1,61,1,61,1,61,1,61,1,61,1,61,1,61,1,61,3,61,987,8,61,1,62,
		1,62,1,62,1,62,1,62,1,62,1,62,1,62,3,62,997,8,62,1,63,1,63,1,63,3,63,1002,
		8,63,1,63,1,63,1,63,1,63,1,64,3,64,1009,8,64,1,64,3,64,1012,8,64,1,64,
		1,64,1,64,3,64,1017,8,64,1,64,1,64,1,64,3,64,1022,8,64,1,65,1,65,1,65,
		1,65,1,65,1,65,1,65,1,65,1,66,1,66,1,67,1,67,1,67,1,68,1,68,1,68,1,68,
		1,68,1,68,3,68,1043,8,68,1,69,4,69,1046,8,69,11,69,12,69,1047,1,69,3,69,
		1051,8,69,1,70,1,70,1,71,1,71,1,72,1,72,1,73,1,73,1,73,3,73,1062,8,73,
		1,74,1,74,1,74,1,74,3,74,1068,8,74,1,75,4,75,1071,8,75,11,75,12,75,1072,
		1,75,3,75,1076,8,75,1,76,4,76,1079,8,76,11,76,12,76,1080,1,76,3,76,1084,
		8,76,1,77,1,77,1,78,1,78,1,79,3,79,1091,8,79,1,79,1,79,1,79,1,79,1,79,
		1,79,1,79,3,79,1100,8,79,1,79,4,79,1103,8,79,11,79,12,79,1104,1,79,3,79,
		1108,8,79,1,79,1,79,3,79,1112,8,79,1,79,1,79,3,79,1116,8,79,1,79,1,79,
		3,79,1120,8,79,1,79,1,79,1,79,3,79,1125,8,79,1,79,5,79,1128,8,79,10,79,
		12,79,1131,9,79,1,79,1,79,1,79,3,79,1136,8,79,1,79,1,79,1,79,1,79,3,79,
		1142,8,79,1,80,1,80,1,80,1,80,3,80,1148,8,80,1,81,1,81,1,81,1,81,3,81,
		1154,8,81,1,81,1,81,1,82,1,82,3,82,1160,8,82,1,82,3,82,1163,8,82,1,82,
		1,82,1,82,1,82,3,82,1169,8,82,1,82,1,82,3,82,1173,8,82,1,82,1,82,3,82,
		1177,8,82,1,82,3,82,1180,8,82,1,83,1,83,1,84,1,84,1,84,1,84,3,84,1188,
		8,84,3,84,1190,8,84,1,84,1,84,1,85,1,85,3,85,1196,8,85,1,85,3,85,1199,
		8,85,1,85,3,85,1202,8,85,1,85,3,85,1205,8,85,1,86,1,86,3,86,1209,8,86,
		1,86,1,86,3,86,1213,8,86,1,86,1,86,1,87,1,87,3,87,1219,8,87,1,88,1,88,
		1,88,1,89,1,89,1,89,5,89,1227,8,89,10,89,12,89,1230,9,89,1,90,1,90,1,90,
		3,90,1235,8,90,1,91,1,91,1,92,1,92,3,92,1241,8,92,1,93,1,93,1,94,3,94,
		1246,8,94,1,94,1,94,1,94,3,94,1251,8,94,1,94,1,94,3,94,1255,8,94,1,94,
		1,94,1,95,1,95,1,96,1,96,1,96,1,96,1,96,1,96,1,97,3,97,1268,8,97,1,97,
		1,97,1,98,1,98,3,98,1274,8,98,1,98,1,98,3,98,1278,8,98,1,98,1,98,1,98,
		1,99,3,99,1284,8,99,1,99,1,99,1,99,3,99,1289,8,99,1,99,1,99,1,99,1,100,
		1,100,1,100,1,100,1,100,1,100,1,101,1,101,1,101,1,101,3,101,1304,8,101,
		1,101,1,101,3,101,1308,8,101,1,102,4,102,1311,8,102,11,102,12,102,1312,
		1,103,1,103,1,103,3,103,1318,8,103,1,103,1,103,1,103,3,103,1323,8,103,
		1,104,1,104,1,104,1,104,3,104,1329,8,104,1,104,3,104,1332,8,104,1,104,
		1,104,1,105,1,105,1,105,5,105,1339,8,105,10,105,12,105,1342,9,105,1,105,
		3,105,1345,8,105,1,106,1,106,1,106,3,106,1350,8,106,1,106,1,106,3,106,
		1354,8,106,1,107,1,107,1,108,1,108,3,108,1360,8,108,1,108,1,108,1,109,
		4,109,1365,8,109,11,109,12,109,1366,1,110,1,110,1,110,1,110,1,110,1,110,
		1,110,1,110,1,110,1,110,1,110,1,110,1,110,4,110,1382,8,110,11,110,12,110,
		1383,3,110,1386,8,110,1,111,1,111,1,111,5,111,1391,8,111,10,111,12,111,
		1394,9,111,1,112,1,112,3,112,1398,8,112,1,113,1,113,1,113,1,113,1,113,
		3,113,1405,8,113,1,114,1,114,3,114,1409,8,114,5,114,1411,8,114,10,114,
		12,114,1414,9,114,1,114,1,114,1,115,1,115,1,115,3,115,1421,8,115,1,115,
		1,115,1,115,1,115,3,115,1427,8,115,1,115,1,115,1,115,1,115,3,115,1433,
		8,115,1,115,1,115,3,115,1437,8,115,3,115,1439,8,115,5,115,1441,8,115,10,
		115,12,115,1444,9,115,1,116,1,116,3,116,1448,8,116,1,116,1,116,3,116,1452,
		8,116,1,116,3,116,1455,8,116,1,116,3,116,1458,8,116,1,116,3,116,1461,8,
		116,1,117,1,117,1,117,3,117,1466,8,117,1,118,1,118,3,118,1470,8,118,1,
		118,3,118,1473,8,118,1,118,1,118,3,118,1477,8,118,1,118,3,118,1480,8,118,
		3,118,1482,8,118,1,119,4,119,1485,8,119,11,119,12,119,1486,1,120,1,120,
		1,121,1,121,1,122,3,122,1494,8,122,1,122,1,122,1,123,1,123,3,123,1500,
		8,123,1,124,1,124,3,124,1504,8,124,1,124,1,124,1,124,1,124,3,124,1510,
		8,124,1,125,1,125,4,125,1514,8,125,11,125,12,125,1515,1,125,3,125,1519,
		8,125,3,125,1521,8,125,1,126,1,126,1,126,1,126,3,126,1527,8,126,1,126,
		1,126,3,126,1531,8,126,1,126,1,126,1,126,1,126,3,126,1537,8,126,1,126,
		1,126,1,126,1,126,1,126,3,126,1544,8,126,1,126,1,126,3,126,1548,8,126,
		3,126,1550,8,126,5,126,1552,8,126,10,126,12,126,1555,9,126,1,127,5,127,
		1558,8,127,10,127,12,127,1561,9,127,1,127,1,127,1,128,1,128,1,128,1,128,
		1,128,1,128,1,128,3,128,1572,8,128,1,128,1,128,3,128,1576,8,128,3,128,
		1578,8,128,5,128,1580,8,128,10,128,12,128,1583,9,128,1,129,1,129,3,129,
		1587,8,129,1,129,3,129,1590,8,129,1,130,1,130,1,130,5,130,1595,8,130,10,
		130,12,130,1598,9,130,1,131,3,131,1601,8,131,1,131,1,131,1,131,3,131,1606,
		8,131,3,131,1608,8,131,1,131,1,131,3,131,1612,8,131,1,132,3,132,1615,8,
		132,1,132,3,132,1618,8,132,1,132,1,132,3,132,1622,8,132,1,132,1,132,1,
		133,3,133,1627,8,133,1,133,1,133,1,133,1,133,1,133,3,133,1634,8,133,1,
		134,1,134,1,134,1,134,1,134,3,134,1641,8,134,1,135,1,135,1,135,3,135,1646,
		8,135,1,136,1,136,3,136,1650,8,136,1,137,1,137,3,137,1654,8,137,1,137,
		1,137,1,137,3,137,1659,8,137,5,137,1661,8,137,10,137,12,137,1664,9,137,
		1,138,1,138,1,138,3,138,1669,8,138,3,138,1671,8,138,1,138,1,138,1,139,
		1,139,3,139,1677,8,139,1,140,1,140,1,140,3,140,1682,8,140,1,140,1,140,
		1,141,1,141,3,141,1688,8,141,1,141,1,141,3,141,1692,8,141,3,141,1694,8,
		141,1,141,3,141,1697,8,141,1,141,1,141,3,141,1701,8,141,1,141,1,141,3,
		141,1705,8,141,3,141,1707,8,141,3,141,1709,8,141,1,142,3,142,1712,8,142,
		1,142,1,142,1,143,1,143,1,144,1,144,1,145,1,145,1,145,1,145,4,145,1724,
		8,145,11,145,12,145,1725,1,146,3,146,1729,8,146,1,146,3,146,1732,8,146,
		1,146,3,146,1735,8,146,1,146,1,146,1,146,1,146,1,146,1,146,1,146,3,146,
		1744,8,146,1,147,1,147,1,147,5,147,1749,8,147,10,147,12,147,1752,9,147,
		1,148,1,148,3,148,1756,8,148,1,148,3,148,1759,8,148,1,148,3,148,1762,8,
		148,3,148,1764,8,148,1,148,3,148,1767,8,148,1,148,3,148,1770,8,148,1,148,
		1,148,3,148,1774,8,148,1,149,4,149,1777,8,149,11,149,12,149,1778,1,150,
		1,150,1,151,1,151,1,151,1,151,1,152,1,152,1,152,1,153,1,153,3,153,1792,
		8,153,1,153,1,153,1,153,3,153,1797,8,153,5,153,1799,8,153,10,153,12,153,
		1802,9,153,1,154,3,154,1805,8,154,1,154,1,154,1,154,3,154,1810,8,154,1,
		154,1,154,1,154,3,154,1815,8,154,1,154,1,154,3,154,1819,8,154,1,155,3,
		155,1822,8,155,1,155,1,155,3,155,1826,8,155,1,156,1,156,1,157,1,157,1,
		158,1,158,1,158,1,159,1,159,3,159,1837,8,159,1,160,1,160,3,160,1841,8,
		160,1,161,1,161,1,161,1,162,1,162,3,162,1848,8,162,1,162,1,162,1,162,3,
		162,1853,8,162,5,162,1855,8,162,10,162,12,162,1858,9,162,1,163,1,163,1,
		163,3,163,1863,8,163,1,163,1,163,3,163,1867,8,163,1,164,1,164,3,164,1871,
		8,164,1,165,1,165,1,165,1,166,1,166,1,166,1,166,3,166,1880,8,166,1,167,
		1,167,1,167,1,167,1,167,1,167,1,168,1,168,1,168,5,168,1891,8,168,10,168,
		12,168,1894,9,168,1,169,1,169,3,169,1898,8,169,1,170,1,170,1,170,1,170,
		1,170,3,170,1905,8,170,1,170,1,170,3,170,1909,8,170,1,170,3,170,1912,8,
		170,1,170,3,170,1915,8,170,1,170,3,170,1918,8,170,1,170,1,170,3,170,1922,
		8,170,1,171,1,171,1,171,3,171,1927,8,171,1,171,1,171,1,172,1,172,1,172,
		3,172,1934,8,172,1,172,1,172,3,172,1938,8,172,1,172,1,172,3,172,1942,8,
		172,1,173,1,173,1,174,1,174,3,174,1948,8,174,1,174,1,174,1,174,3,174,1953,
		8,174,5,174,1955,8,174,10,174,12,174,1958,9,174,1,175,1,175,1,175,3,175,
		1963,8,175,1,176,1,176,1,176,1,176,3,176,1969,8,176,1,176,3,176,1972,8,
		176,1,177,3,177,1975,8,177,1,177,1,177,1,177,1,178,1,178,1,178,1,178,1,
		178,1,179,1,179,1,179,1,179,1,180,1,180,3,180,1991,8,180,1,180,1,180,1,
		180,1,181,4,181,1997,8,181,11,181,12,181,1998,1,182,1,182,1,182,1,182,
		1,182,1,182,1,183,3,183,2008,8,183,1,183,1,183,1,183,3,183,2013,8,183,
		1,183,3,183,2016,8,183,1,184,1,184,3,184,2020,8,184,1,185,1,185,3,185,
		2024,8,185,1,186,1,186,1,186,3,186,2029,8,186,1,186,1,186,1,187,1,187,
		3,187,2035,8,187,1,187,1,187,1,187,3,187,2040,8,187,5,187,2042,8,187,10,
		187,12,187,2045,9,187,1,188,1,188,1,188,1,188,1,188,1,188,3,188,2053,8,
		188,1,189,1,189,1,189,3,189,2058,8,189,1,189,1,189,1,189,3,189,2063,8,
		189,1,189,1,189,1,189,1,189,1,189,1,189,1,189,1,189,1,189,1,189,1,189,
		1,189,1,189,1,189,1,189,1,189,1,189,1,189,1,189,1,189,1,189,1,189,1,189,
		1,189,1,189,1,189,1,189,1,189,1,189,1,189,1,189,1,189,1,189,1,189,1,189,
		1,189,1,189,1,189,1,189,1,189,1,189,3,189,2106,8,189,1,190,1,190,1,190,
		1,1047,6,10,30,50,230,252,256,191,0,2,4,6,8,10,12,14,16,18,20,22,24,26,
		28,30,32,34,36,38,40,42,44,46,48,50,52,54,56,58,60,62,64,66,68,70,72,74,
		76,78,80,82,84,86,88,90,92,94,96,98,100,102,104,106,108,110,112,114,116,
		118,120,122,124,126,128,130,132,134,136,138,140,142,144,146,148,150,152,
		154,156,158,160,162,164,166,168,170,172,174,176,178,180,182,184,186,188,
		190,192,194,196,198,200,202,204,206,208,210,212,214,216,218,220,222,224,
		226,228,230,232,234,236,238,240,242,244,246,248,250,252,254,256,258,260,
		262,264,266,268,270,272,274,276,278,280,282,284,286,288,290,292,294,296,
		298,300,302,304,306,308,310,312,314,316,318,320,322,324,326,328,330,332,
		334,336,338,340,342,344,346,348,350,352,354,356,358,360,362,364,366,368,
		370,372,374,376,378,380,0,23,2,0,97,97,101,101,4,0,24,24,31,31,58,58,65,
		65,2,0,124,124,129,129,1,0,120,121,2,0,91,93,97,100,2,0,123,123,130,130,
		1,0,93,95,1,0,91,92,2,0,102,103,116,117,1,0,114,115,2,0,101,101,104,113,
		5,0,36,36,47,47,57,57,63,63,70,70,3,0,34,34,44,44,80,80,2,0,46,46,60,60,
		2,0,61,61,78,78,2,0,21,21,66,66,1,0,85,90,2,0,97,97,118,118,2,0,22,22,
		82,82,1,0,27,28,2,0,38,38,53,53,1,0,54,56,1,0,1,7,2343,0,383,1,0,0,0,2,
		399,1,0,0,0,4,403,1,0,0,0,6,415,1,0,0,0,8,417,1,0,0,0,10,423,1,0,0,0,12,
		445,1,0,0,0,14,451,1,0,0,0,16,463,1,0,0,0,18,465,1,0,0,0,20,467,1,0,0,
		0,22,480,1,0,0,0,24,487,1,0,0,0,26,490,1,0,0,0,28,495,1,0,0,0,30,542,1,
		0,0,0,32,574,1,0,0,0,34,576,1,0,0,0,36,597,1,0,0,0,38,626,1,0,0,0,40,628,
		1,0,0,0,42,631,1,0,0,0,44,647,1,0,0,0,46,651,1,0,0,0,48,660,1,0,0,0,50,
		662,1,0,0,0,52,687,1,0,0,0,54,690,1,0,0,0,56,699,1,0,0,0,58,710,1,0,0,
		0,60,712,1,0,0,0,62,720,1,0,0,0,64,728,1,0,0,0,66,736,1,0,0,0,68,749,1,
		0,0,0,70,751,1,0,0,0,72,759,1,0,0,0,74,767,1,0,0,0,76,775,1,0,0,0,78,783,
		1,0,0,0,80,791,1,0,0,0,82,799,1,0,0,0,84,807,1,0,0,0,86,821,1,0,0,0,88,
		823,1,0,0,0,90,825,1,0,0,0,92,833,1,0,0,0,94,848,1,0,0,0,96,851,1,0,0,
		0,98,863,1,0,0,0,100,867,1,0,0,0,102,874,1,0,0,0,104,893,1,0,0,0,106,906,
		1,0,0,0,108,941,1,0,0,0,110,945,1,0,0,0,112,948,1,0,0,0,114,955,1,0,0,
		0,116,966,1,0,0,0,118,970,1,0,0,0,120,973,1,0,0,0,122,986,1,0,0,0,124,
		996,1,0,0,0,126,998,1,0,0,0,128,1021,1,0,0,0,130,1023,1,0,0,0,132,1031,
		1,0,0,0,134,1033,1,0,0,0,136,1042,1,0,0,0,138,1045,1,0,0,0,140,1052,1,
		0,0,0,142,1054,1,0,0,0,144,1056,1,0,0,0,146,1061,1,0,0,0,148,1067,1,0,
		0,0,150,1070,1,0,0,0,152,1078,1,0,0,0,154,1085,1,0,0,0,156,1087,1,0,0,
		0,158,1141,1,0,0,0,160,1147,1,0,0,0,162,1149,1,0,0,0,164,1179,1,0,0,0,
		166,1181,1,0,0,0,168,1183,1,0,0,0,170,1193,1,0,0,0,172,1206,1,0,0,0,174,
		1216,1,0,0,0,176,1220,1,0,0,0,178,1223,1,0,0,0,180,1231,1,0,0,0,182,1236,
		1,0,0,0,184,1240,1,0,0,0,186,1242,1,0,0,0,188,1245,1,0,0,0,190,1258,1,
		0,0,0,192,1260,1,0,0,0,194,1267,1,0,0,0,196,1271,1,0,0,0,198,1283,1,0,
		0,0,200,1293,1,0,0,0,202,1299,1,0,0,0,204,1310,1,0,0,0,206,1322,1,0,0,
		0,208,1324,1,0,0,0,210,1335,1,0,0,0,212,1349,1,0,0,0,214,1355,1,0,0,0,
		216,1357,1,0,0,0,218,1364,1,0,0,0,220,1385,1,0,0,0,222,1387,1,0,0,0,224,
		1395,1,0,0,0,226,1404,1,0,0,0,228,1412,1,0,0,0,230,1426,1,0,0,0,232,1445,
		1,0,0,0,234,1462,1,0,0,0,236,1481,1,0,0,0,238,1484,1,0,0,0,240,1488,1,
		0,0,0,242,1490,1,0,0,0,244,1493,1,0,0,0,246,1497,1,0,0,0,248,1509,1,0,
		0,0,250,1520,1,0,0,0,252,1536,1,0,0,0,254,1559,1,0,0,0,256,1564,1,0,0,
		0,258,1584,1,0,0,0,260,1591,1,0,0,0,262,1600,1,0,0,0,264,1614,1,0,0,0,
		266,1633,1,0,0,0,268,1640,1,0,0,0,270,1645,1,0,0,0,272,1649,1,0,0,0,274,
		1651,1,0,0,0,276,1665,1,0,0,0,278,1676,1,0,0,0,280,1678,1,0,0,0,282,1708,
		1,0,0,0,284,1711,1,0,0,0,286,1715,1,0,0,0,288,1717,1,0,0,0,290,1723,1,
		0,0,0,292,1743,1,0,0,0,294,1745,1,0,0,0,296,1773,1,0,0,0,298,1776,1,0,
		0,0,300,1780,1,0,0,0,302,1782,1,0,0,0,304,1786,1,0,0,0,306,1789,1,0,0,
		0,308,1804,1,0,0,0,310,1825,1,0,0,0,312,1827,1,0,0,0,314,1829,1,0,0,0,
		316,1831,1,0,0,0,318,1834,1,0,0,0,320,1838,1,0,0,0,322,1842,1,0,0,0,324,
		1845,1,0,0,0,326,1859,1,0,0,0,328,1870,1,0,0,0,330,1872,1,0,0,0,332,1875,
		1,0,0,0,334,1881,1,0,0,0,336,1887,1,0,0,0,338,1897,1,0,0,0,340,1908,1,
		0,0,0,342,1923,1,0,0,0,344,1941,1,0,0,0,346,1943,1,0,0,0,348,1945,1,0,
		0,0,350,1962,1,0,0,0,352,1964,1,0,0,0,354,1974,1,0,0,0,356,1979,1,0,0,
		0,358,1984,1,0,0,0,360,1988,1,0,0,0,362,1996,1,0,0,0,364,2000,1,0,0,0,
		366,2015,1,0,0,0,368,2017,1,0,0,0,370,2023,1,0,0,0,372,2025,1,0,0,0,374,
		2032,1,0,0,0,376,2052,1,0,0,0,378,2105,1,0,0,0,380,2107,1,0,0,0,382,384,
		3,120,60,0,383,382,1,0,0,0,383,384,1,0,0,0,384,385,1,0,0,0,385,386,5,0,
		0,1,386,1,1,0,0,0,387,389,3,380,190,0,388,387,1,0,0,0,389,390,1,0,0,0,
		390,388,1,0,0,0,390,391,1,0,0,0,391,400,1,0,0,0,392,400,5,69,0,0,393,394,
		5,85,0,0,394,395,3,90,45,0,395,396,5,86,0,0,396,400,1,0,0,0,397,400,3,
		4,2,0,398,400,3,12,6,0,399,388,1,0,0,0,399,392,1,0,0,0,399,393,1,0,0,0,
		399,397,1,0,0,0,399,398,1,0,0,0,400,3,1,0,0,0,401,404,3,6,3,0,402,404,
		3,8,4,0,403,401,1,0,0,0,403,402,1,0,0,0,404,5,1,0,0,0,405,416,5,132,0,
		0,406,416,3,330,165,0,407,416,3,316,158,0,408,416,3,332,166,0,409,412,
		5,99,0,0,410,413,3,278,139,0,411,413,3,162,81,0,412,410,1,0,0,0,412,411,
		1,0,0,0,413,416,1,0,0,0,414,416,3,344,172,0,415,405,1,0,0,0,415,406,1,
		0,0,0,415,407,1,0,0,0,415,408,1,0,0,0,415,409,1,0,0,0,415,414,1,0,0,0,
		416,7,1,0,0,0,417,419,3,10,5,0,418,420,5,68,0,0,419,418,1,0,0,0,419,420,
		1,0,0,0,420,421,1,0,0,0,421,422,3,6,3,0,422,9,1,0,0,0,423,427,6,5,-1,0,
		424,428,3,160,80,0,425,428,3,184,92,0,426,428,3,162,81,0,427,424,1,0,0,
		0,427,425,1,0,0,0,427,426,1,0,0,0,427,428,1,0,0,0,428,429,1,0,0,0,429,
		430,5,127,0,0,430,442,1,0,0,0,431,437,10,1,0,0,432,438,5,132,0,0,433,435,
		5,68,0,0,434,433,1,0,0,0,434,435,1,0,0,0,435,436,1,0,0,0,436,438,3,342,
		171,0,437,432,1,0,0,0,437,434,1,0,0,0,438,439,1,0,0,0,439,441,5,127,0,
		0,440,431,1,0,0,0,441,444,1,0,0,0,442,440,1,0,0,0,442,443,1,0,0,0,443,
		11,1,0,0,0,444,442,1,0,0,0,445,447,3,14,7,0,446,448,3,28,14,0,447,446,
		1,0,0,0,447,448,1,0,0,0,448,449,1,0,0,0,449,450,3,100,50,0,450,13,1,0,
		0,0,451,453,5,87,0,0,452,454,3,16,8,0,453,452,1,0,0,0,453,454,1,0,0,0,
		454,455,1,0,0,0,455,456,5,88,0,0,456,15,1,0,0,0,457,464,3,20,10,0,458,
		461,3,18,9,0,459,460,5,122,0,0,460,462,3,20,10,0,461,459,1,0,0,0,461,462,
		1,0,0,0,462,464,1,0,0,0,463,457,1,0,0,0,463,458,1,0,0,0,464,17,1,0,0,0,
		465,466,7,0,0,0,466,19,1,0,0,0,467,472,3,22,11,0,468,469,5,122,0,0,469,
		471,3,22,11,0,470,468,1,0,0,0,471,474,1,0,0,0,472,470,1,0,0,0,472,473,
		1,0,0,0,473,476,1,0,0,0,474,472,1,0,0,0,475,477,5,131,0,0,476,475,1,0,
		0,0,476,477,1,0,0,0,477,21,1,0,0,0,478,481,3,24,12,0,479,481,3,26,13,0,
		480,478,1,0,0,0,480,479,1,0,0,0,481,23,1,0,0,0,482,484,5,97,0,0,483,482,
		1,0,0,0,483,484,1,0,0,0,484,485,1,0,0,0,485,488,5,132,0,0,486,488,5,69,
		0,0,487,483,1,0,0,0,487,486,1,0,0,0,488,25,1,0,0,0,489,491,5,97,0,0,490,
		489,1,0,0,0,490,491,1,0,0,0,491,492,1,0,0,0,492,493,5,132,0,0,493,494,
		3,268,134,0,494,27,1,0,0,0,495,497,5,85,0,0,496,498,3,258,129,0,497,496,
		1,0,0,0,497,498,1,0,0,0,498,499,1,0,0,0,499,501,5,86,0,0,500,502,5,47,
		0,0,501,500,1,0,0,0,501,502,1,0,0,0,502,504,1,0,0,0,503,505,3,370,185,
		0,504,503,1,0,0,0,504,505,1,0,0,0,505,507,1,0,0,0,506,508,3,204,102,0,
		507,506,1,0,0,0,507,508,1,0,0,0,508,510,1,0,0,0,509,511,3,234,117,0,510,
		509,1,0,0,0,510,511,1,0,0,0,511,29,1,0,0,0,512,513,6,15,-1,0,513,543,3,
		2,1,0,514,517,3,158,79,0,515,517,3,352,176,0,516,514,1,0,0,0,516,515,1,
		0,0,0,517,524,1,0,0,0,518,520,5,85,0,0,519,521,3,34,17,0,520,519,1,0,0,
		0,520,521,1,0,0,0,521,522,1,0,0,0,522,525,5,86,0,0,523,525,3,276,138,0,
		524,518,1,0,0,0,524,523,1,0,0,0,525,543,1,0,0,0,526,527,7,1,0,0,527,528,
		5,102,0,0,528,529,3,246,123,0,529,530,5,103,0,0,530,531,5,85,0,0,531,532,
		3,90,45,0,532,533,5,86,0,0,533,543,1,0,0,0,534,535,3,32,16,0,535,538,5,
		85,0,0,536,539,3,90,45,0,537,539,3,246,123,0,538,536,1,0,0,0,538,537,1,
		0,0,0,539,540,1,0,0,0,540,541,5,86,0,0,541,543,1,0,0,0,542,512,1,0,0,0,
		542,516,1,0,0,0,542,526,1,0,0,0,542,534,1,0,0,0,543,571,1,0,0,0,544,545,
		10,7,0,0,545,548,5,87,0,0,546,549,3,90,45,0,547,549,3,276,138,0,548,546,
		1,0,0,0,548,547,1,0,0,0,549,550,1,0,0,0,550,551,5,88,0,0,551,570,1,0,0,
		0,552,553,10,6,0,0,553,555,5,85,0,0,554,556,3,34,17,0,555,554,1,0,0,0,
		555,556,1,0,0,0,556,557,1,0,0,0,557,570,5,86,0,0,558,559,10,4,0,0,559,
		565,7,2,0,0,560,562,5,68,0,0,561,560,1,0,0,0,561,562,1,0,0,0,562,563,1,
		0,0,0,563,566,3,4,2,0,564,566,3,36,18,0,565,561,1,0,0,0,565,564,1,0,0,
		0,566,570,1,0,0,0,567,568,10,3,0,0,568,570,7,3,0,0,569,544,1,0,0,0,569,
		552,1,0,0,0,569,558,1,0,0,0,569,567,1,0,0,0,570,573,1,0,0,0,571,569,1,
		0,0,0,571,572,1,0,0,0,572,31,1,0,0,0,573,571,1,0,0,0,574,575,5,75,0,0,
		575,33,1,0,0,0,576,577,3,274,137,0,577,35,1,0,0,0,578,580,3,10,5,0,579,
		578,1,0,0,0,579,580,1,0,0,0,580,584,1,0,0,0,581,582,3,160,80,0,582,583,
		5,127,0,0,583,585,1,0,0,0,584,581,1,0,0,0,584,585,1,0,0,0,585,586,1,0,
		0,0,586,587,5,99,0,0,587,598,3,160,80,0,588,589,3,10,5,0,589,590,5,68,
		0,0,590,591,3,342,171,0,591,592,5,127,0,0,592,593,5,99,0,0,593,594,3,160,
		80,0,594,598,1,0,0,0,595,596,5,99,0,0,596,598,3,162,81,0,597,579,1,0,0,
		0,597,588,1,0,0,0,597,595,1,0,0,0,598,37,1,0,0,0,599,627,3,30,15,0,600,
		605,5,120,0,0,601,605,5,121,0,0,602,605,3,40,20,0,603,605,5,62,0,0,604,
		600,1,0,0,0,604,601,1,0,0,0,604,602,1,0,0,0,604,603,1,0,0,0,605,606,1,
		0,0,0,606,627,3,38,19,0,607,616,5,62,0,0,608,609,5,85,0,0,609,610,3,246,
		123,0,610,611,5,86,0,0,611,617,1,0,0,0,612,613,5,131,0,0,613,614,5,85,
		0,0,614,615,5,132,0,0,615,617,5,86,0,0,616,608,1,0,0,0,616,612,1,0,0,0,
		617,627,1,0,0,0,618,619,5,11,0,0,619,620,5,85,0,0,620,621,3,246,123,0,
		621,622,5,86,0,0,622,627,1,0,0,0,623,627,3,56,28,0,624,627,3,42,21,0,625,
		627,3,54,27,0,626,599,1,0,0,0,626,604,1,0,0,0,626,607,1,0,0,0,626,618,
		1,0,0,0,626,623,1,0,0,0,626,624,1,0,0,0,626,625,1,0,0,0,627,39,1,0,0,0,
		628,629,7,4,0,0,629,41,1,0,0,0,630,632,5,127,0,0,631,630,1,0,0,0,631,632,
		1,0,0,0,632,633,1,0,0,0,633,635,5,49,0,0,634,636,3,44,22,0,635,634,1,0,
		0,0,635,636,1,0,0,0,636,642,1,0,0,0,637,643,3,46,23,0,638,639,5,85,0,0,
		639,640,3,246,123,0,640,641,5,86,0,0,641,643,1,0,0,0,642,637,1,0,0,0,642,
		638,1,0,0,0,643,645,1,0,0,0,644,646,3,52,26,0,645,644,1,0,0,0,645,646,
		1,0,0,0,646,43,1,0,0,0,647,648,5,85,0,0,648,649,3,34,17,0,649,650,5,86,
		0,0,650,45,1,0,0,0,651,653,3,150,75,0,652,654,3,48,24,0,653,652,1,0,0,
		0,653,654,1,0,0,0,654,47,1,0,0,0,655,657,3,236,118,0,656,658,3,48,24,0,
		657,656,1,0,0,0,657,658,1,0,0,0,658,661,1,0,0,0,659,661,3,50,25,0,660,
		655,1,0,0,0,660,659,1,0,0,0,661,49,1,0,0,0,662,663,6,25,-1,0,663,664,5,
		87,0,0,664,665,3,90,45,0,665,667,5,88,0,0,666,668,3,204,102,0,667,666,
		1,0,0,0,667,668,1,0,0,0,668,678,1,0,0,0,669,670,10,1,0,0,670,671,5,87,
		0,0,671,672,3,92,46,0,672,674,5,88,0,0,673,675,3,204,102,0,674,673,1,0,
		0,0,674,675,1,0,0,0,675,677,1,0,0,0,676,669,1,0,0,0,677,680,1,0,0,0,678,
		676,1,0,0,0,678,679,1,0,0,0,679,51,1,0,0,0,680,678,1,0,0,0,681,683,5,85,
		0,0,682,684,3,34,17,0,683,682,1,0,0,0,683,684,1,0,0,0,684,685,1,0,0,0,
		685,688,5,86,0,0,686,688,3,276,138,0,687,681,1,0,0,0,687,686,1,0,0,0,688,
		53,1,0,0,0,689,691,5,127,0,0,690,689,1,0,0,0,690,691,1,0,0,0,691,692,1,
		0,0,0,692,695,5,28,0,0,693,694,5,87,0,0,694,696,5,88,0,0,695,693,1,0,0,
		0,695,696,1,0,0,0,696,697,1,0,0,0,697,698,3,58,29,0,698,55,1,0,0,0,699,
		700,5,50,0,0,700,701,5,85,0,0,701,702,3,90,45,0,702,703,5,86,0,0,703,57,
		1,0,0,0,704,711,3,38,19,0,705,706,5,85,0,0,706,707,3,246,123,0,707,708,
		5,86,0,0,708,709,3,58,29,0,709,711,1,0,0,0,710,704,1,0,0,0,710,705,1,0,
		0,0,711,59,1,0,0,0,712,717,3,58,29,0,713,714,7,5,0,0,714,716,3,58,29,0,
		715,713,1,0,0,0,716,719,1,0,0,0,717,715,1,0,0,0,717,718,1,0,0,0,718,61,
		1,0,0,0,719,717,1,0,0,0,720,725,3,60,30,0,721,722,7,6,0,0,722,724,3,60,
		30,0,723,721,1,0,0,0,724,727,1,0,0,0,725,723,1,0,0,0,725,726,1,0,0,0,726,
		63,1,0,0,0,727,725,1,0,0,0,728,733,3,62,31,0,729,730,7,7,0,0,730,732,3,
		62,31,0,731,729,1,0,0,0,732,735,1,0,0,0,733,731,1,0,0,0,733,734,1,0,0,
		0,734,65,1,0,0,0,735,733,1,0,0,0,736,742,3,64,32,0,737,738,3,68,34,0,738,
		739,3,64,32,0,739,741,1,0,0,0,740,737,1,0,0,0,741,744,1,0,0,0,742,740,
		1,0,0,0,742,743,1,0,0,0,743,67,1,0,0,0,744,742,1,0,0,0,745,746,5,103,0,
		0,746,750,5,103,0,0,747,748,5,102,0,0,748,750,5,102,0,0,749,745,1,0,0,
		0,749,747,1,0,0,0,750,69,1,0,0,0,751,756,3,66,33,0,752,753,7,8,0,0,753,
		755,3,66,33,0,754,752,1,0,0,0,755,758,1,0,0,0,756,754,1,0,0,0,756,757,
		1,0,0,0,757,71,1,0,0,0,758,756,1,0,0,0,759,764,3,70,35,0,760,761,7,9,0,
		0,761,763,3,70,35,0,762,760,1,0,0,0,763,766,1,0,0,0,764,762,1,0,0,0,764,
		765,1,0,0,0,765,73,1,0,0,0,766,764,1,0,0,0,767,772,3,72,36,0,768,769,5,
		97,0,0,769,771,3,72,36,0,770,768,1,0,0,0,771,774,1,0,0,0,772,770,1,0,0,
		0,772,773,1,0,0,0,773,75,1,0,0,0,774,772,1,0,0,0,775,780,3,74,37,0,776,
		777,5,96,0,0,777,779,3,74,37,0,778,776,1,0,0,0,779,782,1,0,0,0,780,778,
		1,0,0,0,780,781,1,0,0,0,781,77,1,0,0,0,782,780,1,0,0,0,783,788,3,76,38,
		0,784,785,5,98,0,0,785,787,3,76,38,0,786,784,1,0,0,0,787,790,1,0,0,0,788,
		786,1,0,0,0,788,789,1,0,0,0,789,79,1,0,0,0,790,788,1,0,0,0,791,796,3,78,
		39,0,792,793,5,118,0,0,793,795,3,78,39,0,794,792,1,0,0,0,795,798,1,0,0,
		0,796,794,1,0,0,0,796,797,1,0,0,0,797,81,1,0,0,0,798,796,1,0,0,0,799,804,
		3,80,40,0,800,801,5,119,0,0,801,803,3,80,40,0,802,800,1,0,0,0,803,806,
		1,0,0,0,804,802,1,0,0,0,804,805,1,0,0,0,805,83,1,0,0,0,806,804,1,0,0,0,
		807,813,3,82,41,0,808,809,5,125,0,0,809,810,3,90,45,0,810,811,5,126,0,
		0,811,812,3,86,43,0,812,814,1,0,0,0,813,808,1,0,0,0,813,814,1,0,0,0,814,
		85,1,0,0,0,815,822,3,84,42,0,816,817,3,82,41,0,817,818,3,88,44,0,818,819,
		3,272,136,0,819,822,1,0,0,0,820,822,3,368,184,0,821,815,1,0,0,0,821,816,
		1,0,0,0,821,820,1,0,0,0,822,87,1,0,0,0,823,824,7,10,0,0,824,89,1,0,0,0,
		825,830,3,86,43,0,826,827,5,122,0,0,827,829,3,86,43,0,828,826,1,0,0,0,
		829,832,1,0,0,0,830,828,1,0,0,0,830,831,1,0,0,0,831,91,1,0,0,0,832,830,
		1,0,0,0,833,834,3,84,42,0,834,93,1,0,0,0,835,849,3,96,48,0,836,849,3,118,
		59,0,837,839,3,204,102,0,838,837,1,0,0,0,838,839,1,0,0,0,839,846,1,0,0,
		0,840,847,3,98,49,0,841,847,3,100,50,0,842,847,3,104,52,0,843,847,3,108,
		54,0,844,847,3,116,58,0,845,847,3,358,179,0,846,840,1,0,0,0,846,841,1,
		0,0,0,846,842,1,0,0,0,846,843,1,0,0,0,846,844,1,0,0,0,846,845,1,0,0,0,
		847,849,1,0,0,0,848,835,1,0,0,0,848,836,1,0,0,0,848,838,1,0,0,0,849,95,
		1,0,0,0,850,852,3,204,102,0,851,850,1,0,0,0,851,852,1,0,0,0,852,857,1,
		0,0,0,853,858,5,132,0,0,854,855,5,16,0,0,855,858,3,92,46,0,856,858,5,27,
		0,0,857,853,1,0,0,0,857,854,1,0,0,0,857,856,1,0,0,0,858,859,1,0,0,0,859,
		860,5,126,0,0,860,861,3,94,47,0,861,97,1,0,0,0,862,864,3,90,45,0,863,862,
		1,0,0,0,863,864,1,0,0,0,864,865,1,0,0,0,865,866,5,128,0,0,866,99,1,0,0,
		0,867,869,5,89,0,0,868,870,3,102,51,0,869,868,1,0,0,0,869,870,1,0,0,0,
		870,871,1,0,0,0,871,872,5,90,0,0,872,101,1,0,0,0,873,875,3,94,47,0,874,
		873,1,0,0,0,875,876,1,0,0,0,876,874,1,0,0,0,876,877,1,0,0,0,877,103,1,
		0,0,0,878,879,5,43,0,0,879,880,5,85,0,0,880,881,3,106,53,0,881,882,5,86,
		0,0,882,885,3,94,47,0,883,884,5,32,0,0,884,886,3,94,47,0,885,883,1,0,0,
		0,885,886,1,0,0,0,886,894,1,0,0,0,887,888,5,67,0,0,888,889,5,85,0,0,889,
		890,3,106,53,0,890,891,5,86,0,0,891,892,3,94,47,0,892,894,1,0,0,0,893,
		878,1,0,0,0,893,887,1,0,0,0,894,105,1,0,0,0,895,907,3,90,45,0,896,898,
		3,204,102,0,897,896,1,0,0,0,897,898,1,0,0,0,898,899,1,0,0,0,899,900,3,
		138,69,0,900,904,3,226,113,0,901,902,5,101,0,0,902,905,3,272,136,0,903,
		905,3,276,138,0,904,901,1,0,0,0,904,903,1,0,0,0,905,907,1,0,0,0,906,895,
		1,0,0,0,906,897,1,0,0,0,907,107,1,0,0,0,908,909,5,84,0,0,909,910,5,85,
		0,0,910,911,3,106,53,0,911,912,5,86,0,0,912,913,3,94,47,0,913,942,1,0,
		0,0,914,915,5,29,0,0,915,916,3,94,47,0,916,917,5,84,0,0,917,918,5,85,0,
		0,918,919,3,90,45,0,919,920,5,86,0,0,920,921,5,128,0,0,921,942,1,0,0,0,
		922,923,5,40,0,0,923,936,5,85,0,0,924,926,3,110,55,0,925,927,3,106,53,
		0,926,925,1,0,0,0,926,927,1,0,0,0,927,928,1,0,0,0,928,930,5,128,0,0,929,
		931,3,90,45,0,930,929,1,0,0,0,930,931,1,0,0,0,931,937,1,0,0,0,932,933,
		3,112,56,0,933,934,5,126,0,0,934,935,3,114,57,0,935,937,1,0,0,0,936,924,
		1,0,0,0,936,932,1,0,0,0,937,938,1,0,0,0,938,939,5,86,0,0,939,940,3,94,
		47,0,940,942,1,0,0,0,941,908,1,0,0,0,941,914,1,0,0,0,941,922,1,0,0,0,942,
		109,1,0,0,0,943,946,3,98,49,0,944,946,3,128,64,0,945,943,1,0,0,0,945,944,
		1,0,0,0,946,111,1,0,0,0,947,949,3,204,102,0,948,947,1,0,0,0,948,949,1,
		0,0,0,949,950,1,0,0,0,950,951,3,138,69,0,951,952,3,226,113,0,952,113,1,
		0,0,0,953,956,3,90,45,0,954,956,3,276,138,0,955,953,1,0,0,0,955,954,1,
		0,0,0,956,115,1,0,0,0,957,967,5,15,0,0,958,967,5,25,0,0,959,962,5,59,0,
		0,960,963,3,90,45,0,961,963,3,276,138,0,962,960,1,0,0,0,962,961,1,0,0,
		0,962,963,1,0,0,0,963,967,1,0,0,0,964,965,5,42,0,0,965,967,5,132,0,0,966,
		957,1,0,0,0,966,958,1,0,0,0,966,959,1,0,0,0,966,964,1,0,0,0,967,968,1,
		0,0,0,968,969,5,128,0,0,969,117,1,0,0,0,970,971,3,124,62,0,971,119,1,0,
		0,0,972,974,3,122,61,0,973,972,1,0,0,0,974,975,1,0,0,0,975,973,1,0,0,0,
		975,976,1,0,0,0,976,121,1,0,0,0,977,987,3,124,62,0,978,987,3,264,132,0,
		979,987,3,334,167,0,980,987,3,354,177,0,981,987,3,356,178,0,982,987,3,
		202,101,0,983,987,3,188,94,0,984,987,3,132,66,0,985,987,3,134,67,0,986,
		977,1,0,0,0,986,978,1,0,0,0,986,979,1,0,0,0,986,980,1,0,0,0,986,981,1,
		0,0,0,986,982,1,0,0,0,986,983,1,0,0,0,986,984,1,0,0,0,986,985,1,0,0,0,
		987,123,1,0,0,0,988,997,3,128,64,0,989,997,3,200,100,0,990,997,3,192,96,
		0,991,997,3,196,98,0,992,997,3,198,99,0,993,997,3,130,65,0,994,997,3,126,
		63,0,995,997,3,172,86,0,996,988,1,0,0,0,996,989,1,0,0,0,996,990,1,0,0,
		0,996,991,1,0,0,0,996,992,1,0,0,0,996,993,1,0,0,0,996,994,1,0,0,0,996,
		995,1,0,0,0,997,125,1,0,0,0,998,999,5,79,0,0,999,1001,5,132,0,0,1000,1002,
		3,204,102,0,1001,1000,1,0,0,0,1001,1002,1,0,0,0,1002,1003,1,0,0,0,1003,
		1004,5,101,0,0,1004,1005,3,246,123,0,1005,1006,5,128,0,0,1006,127,1,0,
		0,0,1007,1009,3,138,69,0,1008,1007,1,0,0,0,1008,1009,1,0,0,0,1009,1011,
		1,0,0,0,1010,1012,3,222,111,0,1011,1010,1,0,0,0,1011,1012,1,0,0,0,1012,
		1013,1,0,0,0,1013,1022,5,128,0,0,1014,1016,3,204,102,0,1015,1017,3,138,
		69,0,1016,1015,1,0,0,0,1016,1017,1,0,0,0,1017,1018,1,0,0,0,1018,1019,3,
		222,111,0,1019,1020,5,128,0,0,1020,1022,1,0,0,0,1021,1008,1,0,0,0,1021,
		1014,1,0,0,0,1022,129,1,0,0,0,1023,1024,5,64,0,0,1024,1025,5,85,0,0,1025,
		1026,3,92,46,0,1026,1027,5,122,0,0,1027,1028,5,4,0,0,1028,1029,5,86,0,
		0,1029,1030,5,128,0,0,1030,131,1,0,0,0,1031,1032,5,128,0,0,1032,133,1,
		0,0,0,1033,1034,3,204,102,0,1034,1035,5,128,0,0,1035,135,1,0,0,0,1036,
		1043,3,140,70,0,1037,1043,3,146,73,0,1038,1043,3,142,71,0,1039,1043,5,
		41,0,0,1040,1043,5,74,0,0,1041,1043,5,23,0,0,1042,1036,1,0,0,0,1042,1037,
		1,0,0,0,1042,1038,1,0,0,0,1042,1039,1,0,0,0,1042,1040,1,0,0,0,1042,1041,
		1,0,0,0,1043,137,1,0,0,0,1044,1046,3,136,68,0,1045,1044,1,0,0,0,1046,1047,
		1,0,0,0,1047,1048,1,0,0,0,1047,1045,1,0,0,0,1048,1050,1,0,0,0,1049,1051,
		3,204,102,0,1050,1049,1,0,0,0,1050,1051,1,0,0,0,1051,139,1,0,0,0,1052,
		1053,7,11,0,0,1053,141,1,0,0,0,1054,1055,7,12,0,0,1055,143,1,0,0,0,1056,
		1057,5,132,0,0,1057,145,1,0,0,0,1058,1062,3,148,74,0,1059,1062,3,280,140,
		0,1060,1062,3,168,84,0,1061,1058,1,0,0,0,1061,1059,1,0,0,0,1061,1060,1,
		0,0,0,1062,147,1,0,0,0,1063,1068,3,158,79,0,1064,1068,3,164,82,0,1065,
		1068,3,352,176,0,1066,1068,3,240,120,0,1067,1063,1,0,0,0,1067,1064,1,0,
		0,0,1067,1065,1,0,0,0,1067,1066,1,0,0,0,1068,149,1,0,0,0,1069,1071,3,146,
		73,0,1070,1069,1,0,0,0,1071,1072,1,0,0,0,1072,1070,1,0,0,0,1072,1073,1,
		0,0,0,1073,1075,1,0,0,0,1074,1076,3,204,102,0,1075,1074,1,0,0,0,1075,1076,
		1,0,0,0,1076,151,1,0,0,0,1077,1079,3,148,74,0,1078,1077,1,0,0,0,1079,1080,
		1,0,0,0,1080,1078,1,0,0,0,1080,1081,1,0,0,0,1081,1083,1,0,0,0,1082,1084,
		3,204,102,0,1083,1082,1,0,0,0,1083,1084,1,0,0,0,1084,153,1,0,0,0,1085,
		1086,7,13,0,0,1086,155,1,0,0,0,1087,1088,7,14,0,0,1088,157,1,0,0,0,1089,
		1091,3,10,5,0,1090,1089,1,0,0,0,1090,1091,1,0,0,0,1091,1092,1,0,0,0,1092,
		1142,3,160,80,0,1093,1094,3,10,5,0,1094,1095,5,68,0,0,1095,1096,3,342,
		171,0,1096,1142,1,0,0,0,1097,1142,3,156,78,0,1098,1100,3,156,78,0,1099,
		1098,1,0,0,0,1099,1100,1,0,0,0,1100,1102,1,0,0,0,1101,1103,3,154,77,0,
		1102,1101,1,0,0,0,1103,1104,1,0,0,0,1104,1102,1,0,0,0,1104,1105,1,0,0,
		0,1105,1142,1,0,0,0,1106,1108,3,156,78,0,1107,1106,1,0,0,0,1107,1108,1,
		0,0,0,1108,1109,1,0,0,0,1109,1142,5,18,0,0,1110,1112,3,156,78,0,1111,1110,
		1,0,0,0,1111,1112,1,0,0,0,1112,1113,1,0,0,0,1113,1142,5,19,0,0,1114,1116,
		3,156,78,0,1115,1114,1,0,0,0,1115,1116,1,0,0,0,1116,1117,1,0,0,0,1117,
		1142,5,20,0,0,1118,1120,3,156,78,0,1119,1118,1,0,0,0,1119,1120,1,0,0,0,
		1120,1121,1,0,0,0,1121,1142,5,83,0,0,1122,1142,5,14,0,0,1123,1125,3,156,
		78,0,1124,1123,1,0,0,0,1124,1125,1,0,0,0,1125,1129,1,0,0,0,1126,1128,3,
		154,77,0,1127,1126,1,0,0,0,1128,1131,1,0,0,0,1129,1127,1,0,0,0,1129,1130,
		1,0,0,0,1130,1132,1,0,0,0,1131,1129,1,0,0,0,1132,1142,5,45,0,0,1133,1142,
		5,39,0,0,1134,1136,3,154,77,0,1135,1134,1,0,0,0,1135,1136,1,0,0,0,1136,
		1137,1,0,0,0,1137,1142,5,30,0,0,1138,1142,5,81,0,0,1139,1142,5,13,0,0,
		1140,1142,3,162,81,0,1141,1090,1,0,0,0,1141,1093,1,0,0,0,1141,1097,1,0,
		0,0,1141,1099,1,0,0,0,1141,1107,1,0,0,0,1141,1111,1,0,0,0,1141,1115,1,
		0,0,0,1141,1119,1,0,0,0,1141,1122,1,0,0,0,1141,1124,1,0,0,0,1141,1133,
		1,0,0,0,1141,1135,1,0,0,0,1141,1138,1,0,0,0,1141,1139,1,0,0,0,1141,1140,
		1,0,0,0,1142,159,1,0,0,0,1143,1148,3,278,139,0,1144,1148,3,166,83,0,1145,
		1148,3,144,72,0,1146,1148,3,342,171,0,1147,1143,1,0,0,0,1147,1144,1,0,
		0,0,1147,1145,1,0,0,0,1147,1146,1,0,0,0,1148,161,1,0,0,0,1149,1150,5,26,
		0,0,1150,1153,5,85,0,0,1151,1154,3,90,45,0,1152,1154,5,13,0,0,1153,1151,
		1,0,0,0,1153,1152,1,0,0,0,1154,1155,1,0,0,0,1155,1156,5,86,0,0,1156,163,
		1,0,0,0,1157,1172,3,288,144,0,1158,1160,3,204,102,0,1159,1158,1,0,0,0,
		1159,1160,1,0,0,0,1160,1162,1,0,0,0,1161,1163,3,10,5,0,1162,1161,1,0,0,
		0,1162,1163,1,0,0,0,1163,1164,1,0,0,0,1164,1173,5,132,0,0,1165,1173,3,
		342,171,0,1166,1168,3,10,5,0,1167,1169,5,68,0,0,1168,1167,1,0,0,0,1168,
		1169,1,0,0,0,1169,1170,1,0,0,0,1170,1171,3,342,171,0,1171,1173,1,0,0,0,
		1172,1159,1,0,0,0,1172,1165,1,0,0,0,1172,1166,1,0,0,0,1173,1180,1,0,0,
		0,1174,1176,5,33,0,0,1175,1177,3,10,5,0,1176,1175,1,0,0,0,1176,1177,1,
		0,0,0,1177,1178,1,0,0,0,1178,1180,5,132,0,0,1179,1157,1,0,0,0,1179,1174,
		1,0,0,0,1180,165,1,0,0,0,1181,1182,5,132,0,0,1182,167,1,0,0,0,1183,1184,
		3,170,85,0,1184,1189,5,89,0,0,1185,1187,3,178,89,0,1186,1188,5,122,0,0,
		1187,1186,1,0,0,0,1187,1188,1,0,0,0,1188,1190,1,0,0,0,1189,1185,1,0,0,
		0,1189,1190,1,0,0,0,1190,1191,1,0,0,0,1191,1192,5,90,0,0,1192,169,1,0,
		0,0,1193,1195,3,174,87,0,1194,1196,3,204,102,0,1195,1194,1,0,0,0,1195,
		1196,1,0,0,0,1196,1201,1,0,0,0,1197,1199,3,10,5,0,1198,1197,1,0,0,0,1198,
		1199,1,0,0,0,1199,1200,1,0,0,0,1200,1202,5,132,0,0,1201,1198,1,0,0,0,1201,
		1202,1,0,0,0,1202,1204,1,0,0,0,1203,1205,3,176,88,0,1204,1203,1,0,0,0,
		1204,1205,1,0,0,0,1205,171,1,0,0,0,1206,1208,3,174,87,0,1207,1209,3,204,
		102,0,1208,1207,1,0,0,0,1208,1209,1,0,0,0,1209,1210,1,0,0,0,1210,1212,
		5,132,0,0,1211,1213,3,176,88,0,1212,1211,1,0,0,0,1212,1213,1,0,0,0,1213,
		1214,1,0,0,0,1214,1215,5,128,0,0,1215,173,1,0,0,0,1216,1218,5,33,0,0,1217,
		1219,7,15,0,0,1218,1217,1,0,0,0,1218,1219,1,0,0,0,1219,175,1,0,0,0,1220,
		1221,5,126,0,0,1221,1222,3,150,75,0,1222,177,1,0,0,0,1223,1228,3,180,90,
		0,1224,1225,5,122,0,0,1225,1227,3,180,90,0,1226,1224,1,0,0,0,1227,1230,
		1,0,0,0,1228,1226,1,0,0,0,1228,1229,1,0,0,0,1229,179,1,0,0,0,1230,1228,
		1,0,0,0,1231,1234,3,182,91,0,1232,1233,5,101,0,0,1233,1235,3,92,46,0,1234,
		1232,1,0,0,0,1234,1235,1,0,0,0,1235,181,1,0,0,0,1236,1237,5,132,0,0,1237,
		183,1,0,0,0,1238,1241,3,186,93,0,1239,1241,3,190,95,0,1240,1238,1,0,0,
		0,1240,1239,1,0,0,0,1241,185,1,0,0,0,1242,1243,5,132,0,0,1243,187,1,0,
		0,0,1244,1246,5,44,0,0,1245,1244,1,0,0,0,1245,1246,1,0,0,0,1246,1247,1,
		0,0,0,1247,1250,5,48,0,0,1248,1251,5,132,0,0,1249,1251,3,186,93,0,1250,
		1248,1,0,0,0,1250,1249,1,0,0,0,1250,1251,1,0,0,0,1251,1252,1,0,0,0,1252,
		1254,5,89,0,0,1253,1255,3,120,60,0,1254,1253,1,0,0,0,1254,1255,1,0,0,0,
		1255,1256,1,0,0,0,1256,1257,5,90,0,0,1257,189,1,0,0,0,1258,1259,5,132,
		0,0,1259,191,1,0,0,0,1260,1261,5,48,0,0,1261,1262,5,132,0,0,1262,1263,
		5,101,0,0,1263,1264,3,194,97,0,1264,1265,5,128,0,0,1265,193,1,0,0,0,1266,
		1268,3,10,5,0,1267,1266,1,0,0,0,1267,1268,1,0,0,0,1268,1269,1,0,0,0,1269,
		1270,3,184,92,0,1270,195,1,0,0,0,1271,1277,5,79,0,0,1272,1274,5,76,0,0,
		1273,1272,1,0,0,0,1273,1274,1,0,0,0,1274,1275,1,0,0,0,1275,1278,3,10,5,
		0,1276,1278,5,127,0,0,1277,1273,1,0,0,0,1277,1276,1,0,0,0,1278,1279,1,
		0,0,0,1279,1280,3,6,3,0,1280,1281,5,128,0,0,1281,197,1,0,0,0,1282,1284,
		3,204,102,0,1283,1282,1,0,0,0,1283,1284,1,0,0,0,1284,1285,1,0,0,0,1285,
		1286,5,79,0,0,1286,1288,5,48,0,0,1287,1289,3,10,5,0,1288,1287,1,0,0,0,
		1288,1289,1,0,0,0,1289,1290,1,0,0,0,1290,1291,3,184,92,0,1291,1292,5,128,
		0,0,1292,199,1,0,0,0,1293,1294,5,12,0,0,1294,1295,5,85,0,0,1295,1296,5,
		4,0,0,1296,1297,5,86,0,0,1297,1298,5,128,0,0,1298,201,1,0,0,0,1299,1300,
		5,36,0,0,1300,1307,5,4,0,0,1301,1303,5,89,0,0,1302,1304,3,120,60,0,1303,
		1302,1,0,0,0,1303,1304,1,0,0,0,1304,1305,1,0,0,0,1305,1308,5,90,0,0,1306,
		1308,3,122,61,0,1307,1301,1,0,0,0,1307,1306,1,0,0,0,1308,203,1,0,0,0,1309,
		1311,3,206,103,0,1310,1309,1,0,0,0,1311,1312,1,0,0,0,1312,1310,1,0,0,0,
		1312,1313,1,0,0,0,1313,205,1,0,0,0,1314,1315,5,87,0,0,1315,1317,5,87,0,
		0,1316,1318,3,210,105,0,1317,1316,1,0,0,0,1317,1318,1,0,0,0,1318,1319,
		1,0,0,0,1319,1320,5,88,0,0,1320,1323,5,88,0,0,1321,1323,3,208,104,0,1322,
		1314,1,0,0,0,1322,1321,1,0,0,0,1323,207,1,0,0,0,1324,1325,5,10,0,0,1325,
		1328,5,85,0,0,1326,1329,3,246,123,0,1327,1329,3,92,46,0,1328,1326,1,0,
		0,0,1328,1327,1,0,0,0,1329,1331,1,0,0,0,1330,1332,5,131,0,0,1331,1330,
		1,0,0,0,1331,1332,1,0,0,0,1332,1333,1,0,0,0,1333,1334,5,86,0,0,1334,209,
		1,0,0,0,1335,1340,3,212,106,0,1336,1337,5,122,0,0,1337,1339,3,212,106,
		0,1338,1336,1,0,0,0,1339,1342,1,0,0,0,1340,1338,1,0,0,0,1340,1341,1,0,
		0,0,1341,1344,1,0,0,0,1342,1340,1,0,0,0,1343,1345,5,131,0,0,1344,1343,
		1,0,0,0,1344,1345,1,0,0,0,1345,211,1,0,0,0,1346,1347,3,214,107,0,1347,
		1348,5,127,0,0,1348,1350,1,0,0,0,1349,1346,1,0,0,0,1349,1350,1,0,0,0,1350,
		1351,1,0,0,0,1351,1353,5,132,0,0,1352,1354,3,216,108,0,1353,1352,1,0,0,
		0,1353,1354,1,0,0,0,1354,213,1,0,0,0,1355,1356,5,132,0,0,1356,215,1,0,
		0,0,1357,1359,5,85,0,0,1358,1360,3,218,109,0,1359,1358,1,0,0,0,1359,1360,
		1,0,0,0,1360,1361,1,0,0,0,1361,1362,5,86,0,0,1362,217,1,0,0,0,1363,1365,
		3,220,110,0,1364,1363,1,0,0,0,1365,1366,1,0,0,0,1366,1364,1,0,0,0,1366,
		1367,1,0,0,0,1367,219,1,0,0,0,1368,1369,5,85,0,0,1369,1370,3,218,109,0,
		1370,1371,5,86,0,0,1371,1386,1,0,0,0,1372,1373,5,87,0,0,1373,1374,3,218,
		109,0,1374,1375,5,88,0,0,1375,1386,1,0,0,0,1376,1377,5,89,0,0,1377,1378,
		3,218,109,0,1378,1379,5,90,0,0,1379,1386,1,0,0,0,1380,1382,8,16,0,0,1381,
		1380,1,0,0,0,1382,1383,1,0,0,0,1383,1381,1,0,0,0,1383,1384,1,0,0,0,1384,
		1386,1,0,0,0,1385,1368,1,0,0,0,1385,1372,1,0,0,0,1385,1376,1,0,0,0,1385,
		1381,1,0,0,0,1386,221,1,0,0,0,1387,1392,3,224,112,0,1388,1389,5,122,0,
		0,1389,1391,3,224,112,0,1390,1388,1,0,0,0,1391,1394,1,0,0,0,1392,1390,
		1,0,0,0,1392,1393,1,0,0,0,1393,223,1,0,0,0,1394,1392,1,0,0,0,1395,1397,
		3,226,113,0,1396,1398,3,268,134,0,1397,1396,1,0,0,0,1397,1398,1,0,0,0,
		1398,225,1,0,0,0,1399,1405,3,228,114,0,1400,1401,3,230,115,0,1401,1402,
		3,232,116,0,1402,1403,3,234,117,0,1403,1405,1,0,0,0,1404,1399,1,0,0,0,
		1404,1400,1,0,0,0,1405,227,1,0,0,0,1406,1408,3,236,118,0,1407,1409,5,22,
		0,0,1408,1407,1,0,0,0,1408,1409,1,0,0,0,1409,1411,1,0,0,0,1410,1406,1,
		0,0,0,1411,1414,1,0,0,0,1412,1410,1,0,0,0,1412,1413,1,0,0,0,1413,1415,
		1,0,0,0,1414,1412,1,0,0,0,1415,1416,3,230,115,0,1416,229,1,0,0,0,1417,
		1418,6,115,-1,0,1418,1420,3,244,122,0,1419,1421,3,204,102,0,1420,1419,
		1,0,0,0,1420,1421,1,0,0,0,1421,1427,1,0,0,0,1422,1423,5,85,0,0,1423,1424,
		3,228,114,0,1424,1425,5,86,0,0,1425,1427,1,0,0,0,1426,1417,1,0,0,0,1426,
		1422,1,0,0,0,1427,1442,1,0,0,0,1428,1438,10,2,0,0,1429,1439,3,232,116,
		0,1430,1432,5,87,0,0,1431,1433,3,92,46,0,1432,1431,1,0,0,0,1432,1433,1,
		0,0,0,1433,1434,1,0,0,0,1434,1436,5,88,0,0,1435,1437,3,204,102,0,1436,
		1435,1,0,0,0,1436,1437,1,0,0,0,1437,1439,1,0,0,0,1438,1429,1,0,0,0,1438,
		1430,1,0,0,0,1439,1441,1,0,0,0,1440,1428,1,0,0,0,1441,1444,1,0,0,0,1442,
		1440,1,0,0,0,1442,1443,1,0,0,0,1443,231,1,0,0,0,1444,1442,1,0,0,0,1445,
		1447,5,85,0,0,1446,1448,3,258,129,0,1447,1446,1,0,0,0,1447,1448,1,0,0,
		0,1448,1449,1,0,0,0,1449,1451,5,86,0,0,1450,1452,3,238,119,0,1451,1450,
		1,0,0,0,1451,1452,1,0,0,0,1452,1454,1,0,0,0,1453,1455,3,242,121,0,1454,
		1453,1,0,0,0,1454,1455,1,0,0,0,1455,1457,1,0,0,0,1456,1458,3,370,185,0,
		1457,1456,1,0,0,0,1457,1458,1,0,0,0,1458,1460,1,0,0,0,1459,1461,3,204,
		102,0,1460,1459,1,0,0,0,1460,1461,1,0,0,0,1461,233,1,0,0,0,1462,1463,5,
		124,0,0,1463,1465,3,152,76,0,1464,1466,3,248,124,0,1465,1464,1,0,0,0,1465,
		1466,1,0,0,0,1466,235,1,0,0,0,1467,1469,7,17,0,0,1468,1470,3,204,102,0,
		1469,1468,1,0,0,0,1469,1470,1,0,0,0,1470,1482,1,0,0,0,1471,1473,3,10,5,
		0,1472,1471,1,0,0,0,1472,1473,1,0,0,0,1473,1474,1,0,0,0,1474,1476,5,93,
		0,0,1475,1477,3,204,102,0,1476,1475,1,0,0,0,1476,1477,1,0,0,0,1477,1479,
		1,0,0,0,1478,1480,3,238,119,0,1479,1478,1,0,0,0,1479,1480,1,0,0,0,1480,
		1482,1,0,0,0,1481,1467,1,0,0,0,1481,1472,1,0,0,0,1482,237,1,0,0,0,1483,
		1485,3,240,120,0,1484,1483,1,0,0,0,1485,1486,1,0,0,0,1486,1484,1,0,0,0,
		1486,1487,1,0,0,0,1487,239,1,0,0,0,1488,1489,7,18,0,0,1489,241,1,0,0,0,
		1490,1491,7,17,0,0,1491,243,1,0,0,0,1492,1494,5,131,0,0,1493,1492,1,0,
		0,0,1493,1494,1,0,0,0,1494,1495,1,0,0,0,1495,1496,3,4,2,0,1496,245,1,0,
		0,0,1497,1499,3,150,75,0,1498,1500,3,248,124,0,1499,1498,1,0,0,0,1499,
		1500,1,0,0,0,1500,247,1,0,0,0,1501,1510,3,250,125,0,1502,1504,3,252,126,
		0,1503,1502,1,0,0,0,1503,1504,1,0,0,0,1504,1505,1,0,0,0,1505,1506,3,232,
		116,0,1506,1507,3,234,117,0,1507,1510,1,0,0,0,1508,1510,3,254,127,0,1509,
		1501,1,0,0,0,1509,1503,1,0,0,0,1509,1508,1,0,0,0,1510,249,1,0,0,0,1511,
		1521,3,252,126,0,1512,1514,3,236,118,0,1513,1512,1,0,0,0,1514,1515,1,0,
		0,0,1515,1513,1,0,0,0,1515,1516,1,0,0,0,1516,1518,1,0,0,0,1517,1519,3,
		252,126,0,1518,1517,1,0,0,0,1518,1519,1,0,0,0,1519,1521,1,0,0,0,1520,1511,
		1,0,0,0,1520,1513,1,0,0,0,1521,251,1,0,0,0,1522,1523,6,126,-1,0,1523,1537,
		3,232,116,0,1524,1526,5,87,0,0,1525,1527,3,92,46,0,1526,1525,1,0,0,0,1526,
		1527,1,0,0,0,1527,1528,1,0,0,0,1528,1530,5,88,0,0,1529,1531,3,204,102,
		0,1530,1529,1,0,0,0,1530,1531,1,0,0,0,1531,1537,1,0,0,0,1532,1533,5,85,
		0,0,1533,1534,3,250,125,0,1534,1535,5,86,0,0,1535,1537,1,0,0,0,1536,1522,
		1,0,0,0,1536,1524,1,0,0,0,1536,1532,1,0,0,0,1537,1553,1,0,0,0,1538,1549,
		10,4,0,0,1539,1550,3,232,116,0,1540,1541,3,252,126,0,1541,1543,5,87,0,
		0,1542,1544,3,92,46,0,1543,1542,1,0,0,0,1543,1544,1,0,0,0,1544,1545,1,
		0,0,0,1545,1547,5,88,0,0,1546,1548,3,204,102,0,1547,1546,1,0,0,0,1547,
		1548,1,0,0,0,1548,1550,1,0,0,0,1549,1539,1,0,0,0,1549,1540,1,0,0,0,1550,
		1552,1,0,0,0,1551,1538,1,0,0,0,1552,1555,1,0,0,0,1553,1551,1,0,0,0,1553,
		1554,1,0,0,0,1554,253,1,0,0,0,1555,1553,1,0,0,0,1556,1558,3,236,118,0,
		1557,1556,1,0,0,0,1558,1561,1,0,0,0,1559,1557,1,0,0,0,1559,1560,1,0,0,
		0,1560,1562,1,0,0,0,1561,1559,1,0,0,0,1562,1563,3,256,128,0,1563,255,1,
		0,0,0,1564,1565,6,128,-1,0,1565,1566,5,131,0,0,1566,1581,1,0,0,0,1567,
		1577,10,2,0,0,1568,1578,3,232,116,0,1569,1571,5,87,0,0,1570,1572,3,92,
		46,0,1571,1570,1,0,0,0,1571,1572,1,0,0,0,1572,1573,1,0,0,0,1573,1575,5,
		88,0,0,1574,1576,3,204,102,0,1575,1574,1,0,0,0,1575,1576,1,0,0,0,1576,
		1578,1,0,0,0,1577,1568,1,0,0,0,1577,1569,1,0,0,0,1578,1580,1,0,0,0,1579,
		1567,1,0,0,0,1580,1583,1,0,0,0,1581,1579,1,0,0,0,1581,1582,1,0,0,0,1582,
		257,1,0,0,0,1583,1581,1,0,0,0,1584,1589,3,260,130,0,1585,1587,5,122,0,
		0,1586,1585,1,0,0,0,1586,1587,1,0,0,0,1587,1588,1,0,0,0,1588,1590,5,131,
		0,0,1589,1586,1,0,0,0,1589,1590,1,0,0,0,1590,259,1,0,0,0,1591,1596,3,262,
		131,0,1592,1593,5,122,0,0,1593,1595,3,262,131,0,1594,1592,1,0,0,0,1595,
		1598,1,0,0,0,1596,1594,1,0,0,0,1596,1597,1,0,0,0,1597,261,1,0,0,0,1598,
		1596,1,0,0,0,1599,1601,3,204,102,0,1600,1599,1,0,0,0,1600,1601,1,0,0,0,
		1601,1602,1,0,0,0,1602,1607,3,138,69,0,1603,1608,3,226,113,0,1604,1606,
		3,248,124,0,1605,1604,1,0,0,0,1605,1606,1,0,0,0,1606,1608,1,0,0,0,1607,
		1603,1,0,0,0,1607,1605,1,0,0,0,1608,1611,1,0,0,0,1609,1610,5,101,0,0,1610,
		1612,3,272,136,0,1611,1609,1,0,0,0,1611,1612,1,0,0,0,1612,263,1,0,0,0,
		1613,1615,3,204,102,0,1614,1613,1,0,0,0,1614,1615,1,0,0,0,1615,1617,1,
		0,0,0,1616,1618,3,138,69,0,1617,1616,1,0,0,0,1617,1618,1,0,0,0,1618,1619,
		1,0,0,0,1619,1621,3,226,113,0,1620,1622,3,298,149,0,1621,1620,1,0,0,0,
		1621,1622,1,0,0,0,1622,1623,1,0,0,0,1623,1624,3,266,133,0,1624,265,1,0,
		0,0,1625,1627,3,322,161,0,1626,1625,1,0,0,0,1626,1627,1,0,0,0,1627,1628,
		1,0,0,0,1628,1634,3,100,50,0,1629,1634,3,360,180,0,1630,1631,5,101,0,0,
		1631,1632,7,19,0,0,1632,1634,5,128,0,0,1633,1626,1,0,0,0,1633,1629,1,0,
		0,0,1633,1630,1,0,0,0,1634,267,1,0,0,0,1635,1641,3,270,135,0,1636,1637,
		5,85,0,0,1637,1638,3,34,17,0,1638,1639,5,86,0,0,1639,1641,1,0,0,0,1640,
		1635,1,0,0,0,1640,1636,1,0,0,0,1641,269,1,0,0,0,1642,1643,5,101,0,0,1643,
		1646,3,272,136,0,1644,1646,3,276,138,0,1645,1642,1,0,0,0,1645,1644,1,0,
		0,0,1646,271,1,0,0,0,1647,1650,3,86,43,0,1648,1650,3,276,138,0,1649,1647,
		1,0,0,0,1649,1648,1,0,0,0,1650,273,1,0,0,0,1651,1653,3,272,136,0,1652,
		1654,5,131,0,0,1653,1652,1,0,0,0,1653,1654,1,0,0,0,1654,1662,1,0,0,0,1655,
		1656,5,122,0,0,1656,1658,3,272,136,0,1657,1659,5,131,0,0,1658,1657,1,0,
		0,0,1658,1659,1,0,0,0,1659,1661,1,0,0,0,1660,1655,1,0,0,0,1661,1664,1,
		0,0,0,1662,1660,1,0,0,0,1662,1663,1,0,0,0,1663,275,1,0,0,0,1664,1662,1,
		0,0,0,1665,1670,5,89,0,0,1666,1668,3,274,137,0,1667,1669,5,122,0,0,1668,
		1667,1,0,0,0,1668,1669,1,0,0,0,1669,1671,1,0,0,0,1670,1666,1,0,0,0,1670,
		1671,1,0,0,0,1671,1672,1,0,0,0,1672,1673,5,90,0,0,1673,277,1,0,0,0,1674,
		1677,5,132,0,0,1675,1677,3,342,171,0,1676,1674,1,0,0,0,1676,1675,1,0,0,
		0,1677,279,1,0,0,0,1678,1679,3,282,141,0,1679,1681,5,89,0,0,1680,1682,
		3,290,145,0,1681,1680,1,0,0,0,1681,1682,1,0,0,0,1682,1683,1,0,0,0,1683,
		1684,5,90,0,0,1684,281,1,0,0,0,1685,1687,3,288,144,0,1686,1688,3,204,102,
		0,1687,1686,1,0,0,0,1687,1688,1,0,0,0,1688,1693,1,0,0,0,1689,1691,3,284,
		142,0,1690,1692,3,286,143,0,1691,1690,1,0,0,0,1691,1692,1,0,0,0,1692,1694,
		1,0,0,0,1693,1689,1,0,0,0,1693,1694,1,0,0,0,1694,1696,1,0,0,0,1695,1697,
		3,304,152,0,1696,1695,1,0,0,0,1696,1697,1,0,0,0,1697,1709,1,0,0,0,1698,
		1700,5,77,0,0,1699,1701,3,204,102,0,1700,1699,1,0,0,0,1700,1701,1,0,0,
		0,1701,1706,1,0,0,0,1702,1704,3,284,142,0,1703,1705,3,286,143,0,1704,1703,
		1,0,0,0,1704,1705,1,0,0,0,1705,1707,1,0,0,0,1706,1702,1,0,0,0,1706,1707,
		1,0,0,0,1707,1709,1,0,0,0,1708,1685,1,0,0,0,1708,1698,1,0,0,0,1709,283,
		1,0,0,0,1710,1712,3,10,5,0,1711,1710,1,0,0,0,1711,1712,1,0,0,0,1712,1713,
		1,0,0,0,1713,1714,3,278,139,0,1714,285,1,0,0,0,1715,1716,5,38,0,0,1716,
		287,1,0,0,0,1717,1718,7,15,0,0,1718,289,1,0,0,0,1719,1724,3,292,146,0,
		1720,1721,3,314,157,0,1721,1722,5,126,0,0,1722,1724,1,0,0,0,1723,1719,
		1,0,0,0,1723,1720,1,0,0,0,1724,1725,1,0,0,0,1725,1723,1,0,0,0,1725,1726,
		1,0,0,0,1726,291,1,0,0,0,1727,1729,3,204,102,0,1728,1727,1,0,0,0,1728,
		1729,1,0,0,0,1729,1731,1,0,0,0,1730,1732,3,138,69,0,1731,1730,1,0,0,0,
		1731,1732,1,0,0,0,1732,1734,1,0,0,0,1733,1735,3,294,147,0,1734,1733,1,
		0,0,0,1734,1735,1,0,0,0,1735,1736,1,0,0,0,1736,1744,5,128,0,0,1737,1744,
		3,264,132,0,1738,1744,3,196,98,0,1739,1744,3,130,65,0,1740,1744,3,334,
		167,0,1741,1744,3,126,63,0,1742,1744,3,132,66,0,1743,1728,1,0,0,0,1743,
		1737,1,0,0,0,1743,1738,1,0,0,0,1743,1739,1,0,0,0,1743,1740,1,0,0,0,1743,
		1741,1,0,0,0,1743,1742,1,0,0,0,1744,293,1,0,0,0,1745,1750,3,296,148,0,
		1746,1747,5,122,0,0,1747,1749,3,296,148,0,1748,1746,1,0,0,0,1749,1752,
		1,0,0,0,1750,1748,1,0,0,0,1750,1751,1,0,0,0,1751,295,1,0,0,0,1752,1750,
		1,0,0,0,1753,1763,3,226,113,0,1754,1756,3,298,149,0,1755,1754,1,0,0,0,
		1755,1756,1,0,0,0,1756,1758,1,0,0,0,1757,1759,3,302,151,0,1758,1757,1,
		0,0,0,1758,1759,1,0,0,0,1759,1764,1,0,0,0,1760,1762,3,270,135,0,1761,1760,
		1,0,0,0,1761,1762,1,0,0,0,1762,1764,1,0,0,0,1763,1755,1,0,0,0,1763,1761,
		1,0,0,0,1764,1774,1,0,0,0,1765,1767,5,132,0,0,1766,1765,1,0,0,0,1766,1767,
		1,0,0,0,1767,1769,1,0,0,0,1768,1770,3,204,102,0,1769,1768,1,0,0,0,1769,
		1770,1,0,0,0,1770,1771,1,0,0,0,1771,1772,5,126,0,0,1772,1774,3,92,46,0,
		1773,1753,1,0,0,0,1773,1766,1,0,0,0,1774,297,1,0,0,0,1775,1777,3,300,150,
		0,1776,1775,1,0,0,0,1777,1778,1,0,0,0,1778,1776,1,0,0,0,1778,1779,1,0,
		0,0,1779,299,1,0,0,0,1780,1781,7,20,0,0,1781,301,1,0,0,0,1782,1783,5,101,
		0,0,1783,1784,5,134,0,0,1784,1785,6,151,-1,0,1785,303,1,0,0,0,1786,1787,
		5,126,0,0,1787,1788,3,306,153,0,1788,305,1,0,0,0,1789,1791,3,308,154,0,
		1790,1792,5,131,0,0,1791,1790,1,0,0,0,1791,1792,1,0,0,0,1792,1800,1,0,
		0,0,1793,1794,5,122,0,0,1794,1796,3,308,154,0,1795,1797,5,131,0,0,1796,
		1795,1,0,0,0,1796,1797,1,0,0,0,1797,1799,1,0,0,0,1798,1793,1,0,0,0,1799,
		1802,1,0,0,0,1800,1798,1,0,0,0,1800,1801,1,0,0,0,1801,307,1,0,0,0,1802,
		1800,1,0,0,0,1803,1805,3,204,102,0,1804,1803,1,0,0,0,1804,1805,1,0,0,0,
		1805,1818,1,0,0,0,1806,1819,3,312,156,0,1807,1809,5,80,0,0,1808,1810,3,
		314,157,0,1809,1808,1,0,0,0,1809,1810,1,0,0,0,1810,1811,1,0,0,0,1811,1819,
		3,312,156,0,1812,1814,3,314,157,0,1813,1815,5,80,0,0,1814,1813,1,0,0,0,
		1814,1815,1,0,0,0,1815,1816,1,0,0,0,1816,1817,3,312,156,0,1817,1819,1,
		0,0,0,1818,1806,1,0,0,0,1818,1807,1,0,0,0,1818,1812,1,0,0,0,1819,309,1,
		0,0,0,1820,1822,3,10,5,0,1821,1820,1,0,0,0,1821,1822,1,0,0,0,1822,1823,
		1,0,0,0,1823,1826,3,278,139,0,1824,1826,3,162,81,0,1825,1821,1,0,0,0,1825,
		1824,1,0,0,0,1826,311,1,0,0,0,1827,1828,3,310,155,0,1828,313,1,0,0,0,1829,
		1830,7,21,0,0,1830,315,1,0,0,0,1831,1832,5,52,0,0,1832,1833,3,318,159,
		0,1833,317,1,0,0,0,1834,1836,3,150,75,0,1835,1837,3,320,160,0,1836,1835,
		1,0,0,0,1836,1837,1,0,0,0,1837,319,1,0,0,0,1838,1840,3,236,118,0,1839,
		1841,3,320,160,0,1840,1839,1,0,0,0,1840,1841,1,0,0,0,1841,321,1,0,0,0,
		1842,1843,5,126,0,0,1843,1844,3,324,162,0,1844,323,1,0,0,0,1845,1847,3,
		326,163,0,1846,1848,5,131,0,0,1847,1846,1,0,0,0,1847,1848,1,0,0,0,1848,
		1856,1,0,0,0,1849,1850,5,122,0,0,1850,1852,3,326,163,0,1851,1853,5,131,
		0,0,1852,1851,1,0,0,0,1852,1853,1,0,0,0,1853,1855,1,0,0,0,1854,1849,1,
		0,0,0,1855,1858,1,0,0,0,1856,1854,1,0,0,0,1856,1857,1,0,0,0,1857,325,1,
		0,0,0,1858,1856,1,0,0,0,1859,1866,3,328,164,0,1860,1862,5,85,0,0,1861,
		1863,3,34,17,0,1862,1861,1,0,0,0,1862,1863,1,0,0,0,1863,1864,1,0,0,0,1864,
		1867,5,86,0,0,1865,1867,3,276,138,0,1866,1860,1,0,0,0,1866,1865,1,0,0,
		0,1867,327,1,0,0,0,1868,1871,3,310,155,0,1869,1871,5,132,0,0,1870,1868,
		1,0,0,0,1870,1869,1,0,0,0,1871,329,1,0,0,0,1872,1873,5,52,0,0,1873,1874,
		3,378,189,0,1874,331,1,0,0,0,1875,1879,5,52,0,0,1876,1877,5,4,0,0,1877,
		1880,5,132,0,0,1878,1880,5,140,0,0,1879,1876,1,0,0,0,1879,1878,1,0,0,0,
		1880,333,1,0,0,0,1881,1882,5,68,0,0,1882,1883,5,102,0,0,1883,1884,3,336,
		168,0,1884,1885,5,103,0,0,1885,1886,3,122,61,0,1886,335,1,0,0,0,1887,1892,
		3,338,169,0,1888,1889,5,122,0,0,1889,1891,3,338,169,0,1890,1888,1,0,0,
		0,1891,1894,1,0,0,0,1892,1890,1,0,0,0,1892,1893,1,0,0,0,1893,337,1,0,0,
		0,1894,1892,1,0,0,0,1895,1898,3,340,170,0,1896,1898,3,262,131,0,1897,1895,
		1,0,0,0,1897,1896,1,0,0,0,1898,339,1,0,0,0,1899,1900,5,68,0,0,1900,1901,
		5,102,0,0,1901,1902,3,336,168,0,1902,1903,5,103,0,0,1903,1905,1,0,0,0,
		1904,1899,1,0,0,0,1904,1905,1,0,0,0,1905,1906,1,0,0,0,1906,1909,5,21,0,
		0,1907,1909,5,76,0,0,1908,1904,1,0,0,0,1908,1907,1,0,0,0,1909,1921,1,0,
		0,0,1910,1912,5,131,0,0,1911,1910,1,0,0,0,1911,1912,1,0,0,0,1912,1914,
		1,0,0,0,1913,1915,5,132,0,0,1914,1913,1,0,0,0,1914,1915,1,0,0,0,1915,1922,
		1,0,0,0,1916,1918,5,132,0,0,1917,1916,1,0,0,0,1917,1918,1,0,0,0,1918,1919,
		1,0,0,0,1919,1920,5,101,0,0,1920,1922,3,246,123,0,1921,1911,1,0,0,0,1921,
		1917,1,0,0,0,1922,341,1,0,0,0,1923,1924,3,346,173,0,1924,1926,5,102,0,
		0,1925,1927,3,348,174,0,1926,1925,1,0,0,0,1926,1927,1,0,0,0,1927,1928,
		1,0,0,0,1928,1929,5,103,0,0,1929,343,1,0,0,0,1930,1942,3,342,171,0,1931,
		1934,3,330,165,0,1932,1934,3,332,166,0,1933,1931,1,0,0,0,1933,1932,1,0,
		0,0,1934,1935,1,0,0,0,1935,1937,5,102,0,0,1936,1938,3,348,174,0,1937,1936,
		1,0,0,0,1937,1938,1,0,0,0,1938,1939,1,0,0,0,1939,1940,5,103,0,0,1940,1942,
		1,0,0,0,1941,1930,1,0,0,0,1941,1933,1,0,0,0,1942,345,1,0,0,0,1943,1944,
		5,132,0,0,1944,347,1,0,0,0,1945,1947,3,350,175,0,1946,1948,5,131,0,0,1947,
		1946,1,0,0,0,1947,1948,1,0,0,0,1948,1956,1,0,0,0,1949,1950,5,122,0,0,1950,
		1952,3,350,175,0,1951,1953,5,131,0,0,1952,1951,1,0,0,0,1952,1953,1,0,0,
		0,1953,1955,1,0,0,0,1954,1949,1,0,0,0,1955,1958,1,0,0,0,1956,1954,1,0,
		0,0,1956,1957,1,0,0,0,1957,349,1,0,0,0,1958,1956,1,0,0,0,1959,1963,3,246,
		123,0,1960,1963,3,92,46,0,1961,1963,3,4,2,0,1962,1959,1,0,0,0,1962,1960,
		1,0,0,0,1962,1961,1,0,0,0,1963,351,1,0,0,0,1964,1965,5,76,0,0,1965,1971,
		3,10,5,0,1966,1972,5,132,0,0,1967,1969,5,68,0,0,1968,1967,1,0,0,0,1968,
		1969,1,0,0,0,1969,1970,1,0,0,0,1970,1972,3,342,171,0,1971,1966,1,0,0,0,
		1971,1968,1,0,0,0,1972,353,1,0,0,0,1973,1975,5,36,0,0,1974,1973,1,0,0,
		0,1974,1975,1,0,0,0,1975,1976,1,0,0,0,1976,1977,5,68,0,0,1977,1978,3,122,
		61,0,1978,355,1,0,0,0,1979,1980,5,68,0,0,1980,1981,5,102,0,0,1981,1982,
		5,103,0,0,1982,1983,3,122,61,0,1983,357,1,0,0,0,1984,1985,5,73,0,0,1985,
		1986,3,100,50,0,1986,1987,3,362,181,0,1987,359,1,0,0,0,1988,1990,5,73,
		0,0,1989,1991,3,322,161,0,1990,1989,1,0,0,0,1990,1991,1,0,0,0,1991,1992,
		1,0,0,0,1992,1993,3,100,50,0,1993,1994,3,362,181,0,1994,361,1,0,0,0,1995,
		1997,3,364,182,0,1996,1995,1,0,0,0,1997,1998,1,0,0,0,1998,1996,1,0,0,0,
		1998,1999,1,0,0,0,1999,363,1,0,0,0,2000,2001,5,17,0,0,2001,2002,5,85,0,
		0,2002,2003,3,366,183,0,2003,2004,5,86,0,0,2004,2005,3,100,50,0,2005,365,
		1,0,0,0,2006,2008,3,204,102,0,2007,2006,1,0,0,0,2007,2008,1,0,0,0,2008,
		2009,1,0,0,0,2009,2012,3,150,75,0,2010,2013,3,226,113,0,2011,2013,3,248,
		124,0,2012,2010,1,0,0,0,2012,2011,1,0,0,0,2012,2013,1,0,0,0,2013,2016,
		1,0,0,0,2014,2016,5,131,0,0,2015,2007,1,0,0,0,2015,2014,1,0,0,0,2016,367,
		1,0,0,0,2017,2019,5,71,0,0,2018,2020,3,86,43,0,2019,2018,1,0,0,0,2019,
		2020,1,0,0,0,2020,369,1,0,0,0,2021,2024,3,372,186,0,2022,2024,3,376,188,
		0,2023,2021,1,0,0,0,2023,2022,1,0,0,0,2024,371,1,0,0,0,2025,2026,5,71,
		0,0,2026,2028,5,85,0,0,2027,2029,3,374,187,0,2028,2027,1,0,0,0,2028,2029,
		1,0,0,0,2029,2030,1,0,0,0,2030,2031,5,86,0,0,2031,373,1,0,0,0,2032,2034,
		3,246,123,0,2033,2035,5,131,0,0,2034,2033,1,0,0,0,2034,2035,1,0,0,0,2035,
		2043,1,0,0,0,2036,2037,5,122,0,0,2037,2039,3,246,123,0,2038,2040,5,131,
		0,0,2039,2038,1,0,0,0,2039,2040,1,0,0,0,2040,2042,1,0,0,0,2041,2036,1,
		0,0,0,2042,2045,1,0,0,0,2043,2041,1,0,0,0,2043,2044,1,0,0,0,2044,375,1,
		0,0,0,2045,2043,1,0,0,0,2046,2047,5,50,0,0,2047,2048,5,85,0,0,2048,2049,
		3,92,46,0,2049,2050,5,86,0,0,2050,2053,1,0,0,0,2051,2053,5,50,0,0,2052,
		2046,1,0,0,0,2052,2051,1,0,0,0,2053,377,1,0,0,0,2054,2057,5,49,0,0,2055,
		2056,5,87,0,0,2056,2058,5,88,0,0,2057,2055,1,0,0,0,2057,2058,1,0,0,0,2058,
		2106,1,0,0,0,2059,2062,5,28,0,0,2060,2061,5,87,0,0,2061,2063,5,88,0,0,
		2062,2060,1,0,0,0,2062,2063,1,0,0,0,2063,2106,1,0,0,0,2064,2106,5,91,0,
		0,2065,2106,5,92,0,0,2066,2106,5,93,0,0,2067,2106,5,94,0,0,2068,2106,5,
		95,0,0,2069,2106,5,96,0,0,2070,2106,5,97,0,0,2071,2106,5,98,0,0,2072,2106,
		5,99,0,0,2073,2106,5,100,0,0,2074,2106,5,101,0,0,2075,2106,5,103,0,0,2076,
		2106,5,102,0,0,2077,2106,5,117,0,0,2078,2106,5,104,0,0,2079,2106,5,105,
		0,0,2080,2106,5,106,0,0,2081,2106,5,108,0,0,2082,2106,5,109,0,0,2083,2106,
		5,110,0,0,2084,2106,5,111,0,0,2085,2086,5,102,0,0,2086,2106,5,102,0,0,
		2087,2088,5,103,0,0,2088,2106,5,103,0,0,2089,2106,5,113,0,0,2090,2106,
		5,112,0,0,2091,2106,5,114,0,0,2092,2106,5,115,0,0,2093,2106,5,116,0,0,
		2094,2106,5,118,0,0,2095,2106,5,119,0,0,2096,2106,5,120,0,0,2097,2106,
		5,121,0,0,2098,2106,5,122,0,0,2099,2106,5,123,0,0,2100,2106,5,124,0,0,
		2101,2102,5,85,0,0,2102,2106,5,86,0,0,2103,2104,5,87,0,0,2104,2106,5,88,
		0,0,2105,2054,1,0,0,0,2105,2059,1,0,0,0,2105,2064,1,0,0,0,2105,2065,1,
		0,0,0,2105,2066,1,0,0,0,2105,2067,1,0,0,0,2105,2068,1,0,0,0,2105,2069,
		1,0,0,0,2105,2070,1,0,0,0,2105,2071,1,0,0,0,2105,2072,1,0,0,0,2105,2073,
		1,0,0,0,2105,2074,1,0,0,0,2105,2075,1,0,0,0,2105,2076,1,0,0,0,2105,2077,
		1,0,0,0,2105,2078,1,0,0,0,2105,2079,1,0,0,0,2105,2080,1,0,0,0,2105,2081,
		1,0,0,0,2105,2082,1,0,0,0,2105,2083,1,0,0,0,2105,2084,1,0,0,0,2105,2085,
		1,0,0,0,2105,2087,1,0,0,0,2105,2089,1,0,0,0,2105,2090,1,0,0,0,2105,2091,
		1,0,0,0,2105,2092,1,0,0,0,2105,2093,1,0,0,0,2105,2094,1,0,0,0,2105,2095,
		1,0,0,0,2105,2096,1,0,0,0,2105,2097,1,0,0,0,2105,2098,1,0,0,0,2105,2099,
		1,0,0,0,2105,2100,1,0,0,0,2105,2101,1,0,0,0,2105,2103,1,0,0,0,2106,379,
		1,0,0,0,2107,2108,7,22,0,0,2108,381,1,0,0,0,306,383,390,399,403,412,415,
		419,427,434,437,442,447,453,461,463,472,476,480,483,487,490,497,501,504,
		507,510,516,520,524,538,542,548,555,561,565,569,571,579,584,597,604,616,
		626,631,635,642,645,653,657,660,667,674,678,683,687,690,695,710,717,725,
		733,742,749,756,764,772,780,788,796,804,813,821,830,838,846,848,851,857,
		863,869,876,885,893,897,904,906,926,930,936,941,945,948,955,962,966,975,
		986,996,1001,1008,1011,1016,1021,1042,1047,1050,1061,1067,1072,1075,1080,
		1083,1090,1099,1104,1107,1111,1115,1119,1124,1129,1135,1141,1147,1153,
		1159,1162,1168,1172,1176,1179,1187,1189,1195,1198,1201,1204,1208,1212,
		1218,1228,1234,1240,1245,1250,1254,1267,1273,1277,1283,1288,1303,1307,
		1312,1317,1322,1328,1331,1340,1344,1349,1353,1359,1366,1383,1385,1392,
		1397,1404,1408,1412,1420,1426,1432,1436,1438,1442,1447,1451,1454,1457,
		1460,1465,1469,1472,1476,1479,1481,1486,1493,1499,1503,1509,1515,1518,
		1520,1526,1530,1536,1543,1547,1549,1553,1559,1571,1575,1577,1581,1586,
		1589,1596,1600,1605,1607,1611,1614,1617,1621,1626,1633,1640,1645,1649,
		1653,1658,1662,1668,1670,1676,1681,1687,1691,1693,1696,1700,1704,1706,
		1708,1711,1723,1725,1728,1731,1734,1743,1750,1755,1758,1761,1763,1766,
		1769,1773,1778,1791,1796,1800,1804,1809,1814,1818,1821,1825,1836,1840,
		1847,1852,1856,1862,1866,1870,1879,1892,1897,1904,1908,1911,1914,1917,
		1921,1926,1933,1937,1941,1947,1952,1956,1962,1968,1971,1974,1990,1998,
		2007,2012,2015,2019,2023,2028,2034,2039,2043,2052,2057,2062,2105
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
