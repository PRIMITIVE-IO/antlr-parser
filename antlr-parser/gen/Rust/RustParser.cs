//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.10.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from C:/Users/john/Desktop/PRIMITIVE-Tools/PARSER/antlr-parser/antlr-parser/grammars\RustParser.g4 by ANTLR 4.10.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.10.1")]
[System.CLSCompliant(false)]
public partial class RustParser : RustParserBase {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		KW_AS=1, KW_BREAK=2, KW_CONST=3, KW_CONTINUE=4, KW_CRATE=5, KW_ELSE=6, 
		KW_ENUM=7, KW_EXTERN=8, KW_FALSE=9, KW_FN=10, KW_FOR=11, KW_IF=12, KW_IMPL=13, 
		KW_IN=14, KW_LET=15, KW_LOOP=16, KW_MATCH=17, KW_MOD=18, KW_MOVE=19, KW_MUT=20, 
		KW_PUB=21, KW_REF=22, KW_RETURN=23, KW_SELFVALUE=24, KW_SELFTYPE=25, KW_STATIC=26, 
		KW_STRUCT=27, KW_SUPER=28, KW_TRAIT=29, KW_TRUE=30, KW_TYPE=31, KW_UNSAFE=32, 
		KW_USE=33, KW_WHERE=34, KW_WHILE=35, KW_ASYNC=36, KW_AWAIT=37, KW_DYN=38, 
		KW_ABSTRACT=39, KW_BECOME=40, KW_BOX=41, KW_DO=42, KW_FINAL=43, KW_MACRO=44, 
		KW_OVERRIDE=45, KW_PRIV=46, KW_TYPEOF=47, KW_UNSIZED=48, KW_VIRTUAL=49, 
		KW_YIELD=50, KW_TRY=51, KW_UNION=52, KW_STATICLIFETIME=53, KW_MACRORULES=54, 
		KW_UNDERLINELIFETIME=55, KW_DOLLARCRATE=56, NON_KEYWORD_IDENTIFIER=57, 
		RAW_IDENTIFIER=58, LINE_COMMENT=59, BLOCK_COMMENT=60, INNER_LINE_DOC=61, 
		INNER_BLOCK_DOC=62, OUTER_LINE_DOC=63, OUTER_BLOCK_DOC=64, BLOCK_COMMENT_OR_DOC=65, 
		SHEBANG=66, WHITESPACE=67, NEWLINE=68, CHAR_LITERAL=69, STRING_LITERAL=70, 
		RAW_STRING_LITERAL=71, BYTE_LITERAL=72, BYTE_STRING_LITERAL=73, RAW_BYTE_STRING_LITERAL=74, 
		INTEGER_LITERAL=75, DEC_LITERAL=76, HEX_LITERAL=77, OCT_LITERAL=78, BIN_LITERAL=79, 
		FLOAT_LITERAL=80, LIFETIME_OR_LABEL=81, PLUS=82, MINUS=83, STAR=84, SLASH=85, 
		PERCENT=86, CARET=87, NOT=88, AND=89, OR=90, ANDAND=91, OROR=92, PLUSEQ=93, 
		MINUSEQ=94, STAREQ=95, SLASHEQ=96, PERCENTEQ=97, CARETEQ=98, ANDEQ=99, 
		OREQ=100, SHLEQ=101, SHREQ=102, EQ=103, EQEQ=104, NE=105, GT=106, LT=107, 
		GE=108, LE=109, AT=110, UNDERSCORE=111, DOT=112, DOTDOT=113, DOTDOTDOT=114, 
		DOTDOTEQ=115, COMMA=116, SEMI=117, COLON=118, PATHSEP=119, RARROW=120, 
		FATARROW=121, POUND=122, DOLLAR=123, QUESTION=124, LCURLYBRACE=125, RCURLYBRACE=126, 
		LSQUAREBRACKET=127, RSQUAREBRACKET=128, LPAREN=129, RPAREN=130;
	public const int
		RULE_crate = 0, RULE_macroInvocation = 1, RULE_delimTokenTree = 2, RULE_tokenTree = 3, 
		RULE_tokenTreeToken = 4, RULE_macroInvocationSemi = 5, RULE_macroRulesDefinition = 6, 
		RULE_macroRulesDef = 7, RULE_macroRules = 8, RULE_macroRule = 9, RULE_macroMatcher = 10, 
		RULE_macroMatch = 11, RULE_macroMatchToken = 12, RULE_macroFragSpec = 13, 
		RULE_macroRepSep = 14, RULE_macroRepOp = 15, RULE_macroTranscriber = 16, 
		RULE_item = 17, RULE_visItem = 18, RULE_macroItem = 19, RULE_module = 20, 
		RULE_externCrate = 21, RULE_crateRef = 22, RULE_asClause = 23, RULE_useDeclaration = 24, 
		RULE_useTree = 25, RULE_function_ = 26, RULE_functionQualifiers = 27, 
		RULE_abi = 28, RULE_functionParameters = 29, RULE_selfParam = 30, RULE_shorthandSelf = 31, 
		RULE_typedSelf = 32, RULE_functionParam = 33, RULE_functionParamPattern = 34, 
		RULE_functionReturnType = 35, RULE_typeAlias = 36, RULE_struct_ = 37, 
		RULE_structStruct = 38, RULE_tupleStruct = 39, RULE_structFields = 40, 
		RULE_structField = 41, RULE_tupleFields = 42, RULE_tupleField = 43, RULE_enumeration = 44, 
		RULE_enumItems = 45, RULE_enumItem = 46, RULE_enumItemTuple = 47, RULE_enumItemStruct = 48, 
		RULE_enumItemDiscriminant = 49, RULE_union_ = 50, RULE_constantItem = 51, 
		RULE_staticItem = 52, RULE_trait_ = 53, RULE_implementation = 54, RULE_inherentImpl = 55, 
		RULE_traitImpl = 56, RULE_externBlock = 57, RULE_externalItem = 58, RULE_genericParams = 59, 
		RULE_genericParam = 60, RULE_lifetimeParam = 61, RULE_typeParam = 62, 
		RULE_constParam = 63, RULE_whereClause = 64, RULE_whereClauseItem = 65, 
		RULE_lifetimeWhereClauseItem = 66, RULE_typeBoundWhereClauseItem = 67, 
		RULE_forLifetimes = 68, RULE_associatedItem = 69, RULE_innerAttribute = 70, 
		RULE_outerAttribute = 71, RULE_attr = 72, RULE_attrInput = 73, RULE_statement = 74, 
		RULE_letStatement = 75, RULE_expressionStatement = 76, RULE_expression = 77, 
		RULE_comparisonOperator = 78, RULE_compoundAssignOperator = 79, RULE_expressionWithBlock = 80, 
		RULE_literalExpression = 81, RULE_pathExpression = 82, RULE_blockExpression = 83, 
		RULE_statements = 84, RULE_asyncBlockExpression = 85, RULE_unsafeBlockExpression = 86, 
		RULE_arrayElements = 87, RULE_tupleElements = 88, RULE_tupleIndex = 89, 
		RULE_structExpression = 90, RULE_structExprStruct = 91, RULE_structExprFields = 92, 
		RULE_structExprField = 93, RULE_structBase = 94, RULE_structExprTuple = 95, 
		RULE_structExprUnit = 96, RULE_enumerationVariantExpression = 97, RULE_enumExprStruct = 98, 
		RULE_enumExprFields = 99, RULE_enumExprField = 100, RULE_enumExprTuple = 101, 
		RULE_enumExprFieldless = 102, RULE_callParams = 103, RULE_closureExpression = 104, 
		RULE_closureParameters = 105, RULE_closureParam = 106, RULE_loopExpression = 107, 
		RULE_infiniteLoopExpression = 108, RULE_predicateLoopExpression = 109, 
		RULE_predicatePatternLoopExpression = 110, RULE_iteratorLoopExpression = 111, 
		RULE_loopLabel = 112, RULE_ifExpression = 113, RULE_ifLetExpression = 114, 
		RULE_matchExpression = 115, RULE_matchArms = 116, RULE_matchArmExpression = 117, 
		RULE_matchArm = 118, RULE_matchArmGuard = 119, RULE_pattern = 120, RULE_patternNoTopAlt = 121, 
		RULE_patternWithoutRange = 122, RULE_literalPattern = 123, RULE_identifierPattern = 124, 
		RULE_wildcardPattern = 125, RULE_restPattern = 126, RULE_rangePattern = 127, 
		RULE_rangePatternBound = 128, RULE_referencePattern = 129, RULE_structPattern = 130, 
		RULE_structPatternElements = 131, RULE_structPatternFields = 132, RULE_structPatternField = 133, 
		RULE_structPatternEtCetera = 134, RULE_tupleStructPattern = 135, RULE_tupleStructItems = 136, 
		RULE_tuplePattern = 137, RULE_tuplePatternItems = 138, RULE_groupedPattern = 139, 
		RULE_slicePattern = 140, RULE_slicePatternItems = 141, RULE_pathPattern = 142, 
		RULE_type_ = 143, RULE_typeNoBounds = 144, RULE_parenthesizedType = 145, 
		RULE_neverType = 146, RULE_tupleType = 147, RULE_arrayType = 148, RULE_sliceType = 149, 
		RULE_referenceType = 150, RULE_rawPointerType = 151, RULE_bareFunctionType = 152, 
		RULE_functionTypeQualifiers = 153, RULE_bareFunctionReturnType = 154, 
		RULE_functionParametersMaybeNamedVariadic = 155, RULE_maybeNamedFunctionParameters = 156, 
		RULE_maybeNamedParam = 157, RULE_maybeNamedFunctionParametersVariadic = 158, 
		RULE_traitObjectType = 159, RULE_traitObjectTypeOneBound = 160, RULE_implTraitType = 161, 
		RULE_implTraitTypeOneBound = 162, RULE_inferredType = 163, RULE_typeParamBounds = 164, 
		RULE_typeParamBound = 165, RULE_traitBound = 166, RULE_lifetimeBounds = 167, 
		RULE_lifetime = 168, RULE_simplePath = 169, RULE_simplePathSegment = 170, 
		RULE_pathInExpression = 171, RULE_pathExprSegment = 172, RULE_pathIdentSegment = 173, 
		RULE_genericArgs = 174, RULE_genericArg = 175, RULE_genericArgsConst = 176, 
		RULE_genericArgsLifetimes = 177, RULE_genericArgsTypes = 178, RULE_genericArgsBindings = 179, 
		RULE_genericArgsBinding = 180, RULE_qualifiedPathInExpression = 181, RULE_qualifiedPathType = 182, 
		RULE_qualifiedPathInType = 183, RULE_typePath = 184, RULE_typePathSegment = 185, 
		RULE_typePathFn = 186, RULE_typePathInputs = 187, RULE_visibility = 188, 
		RULE_identifier = 189, RULE_keyword = 190, RULE_macroIdentifierLikeToken = 191, 
		RULE_macroLiteralToken = 192, RULE_macroPunctuationToken = 193, RULE_shl = 194, 
		RULE_shr = 195;
	public static readonly string[] ruleNames = {
		"crate", "macroInvocation", "delimTokenTree", "tokenTree", "tokenTreeToken", 
		"macroInvocationSemi", "macroRulesDefinition", "macroRulesDef", "macroRules", 
		"macroRule", "macroMatcher", "macroMatch", "macroMatchToken", "macroFragSpec", 
		"macroRepSep", "macroRepOp", "macroTranscriber", "item", "visItem", "macroItem", 
		"module", "externCrate", "crateRef", "asClause", "useDeclaration", "useTree", 
		"function_", "functionQualifiers", "abi", "functionParameters", "selfParam", 
		"shorthandSelf", "typedSelf", "functionParam", "functionParamPattern", 
		"functionReturnType", "typeAlias", "struct_", "structStruct", "tupleStruct", 
		"structFields", "structField", "tupleFields", "tupleField", "enumeration", 
		"enumItems", "enumItem", "enumItemTuple", "enumItemStruct", "enumItemDiscriminant", 
		"union_", "constantItem", "staticItem", "trait_", "implementation", "inherentImpl", 
		"traitImpl", "externBlock", "externalItem", "genericParams", "genericParam", 
		"lifetimeParam", "typeParam", "constParam", "whereClause", "whereClauseItem", 
		"lifetimeWhereClauseItem", "typeBoundWhereClauseItem", "forLifetimes", 
		"associatedItem", "innerAttribute", "outerAttribute", "attr", "attrInput", 
		"statement", "letStatement", "expressionStatement", "expression", "comparisonOperator", 
		"compoundAssignOperator", "expressionWithBlock", "literalExpression", 
		"pathExpression", "blockExpression", "statements", "asyncBlockExpression", 
		"unsafeBlockExpression", "arrayElements", "tupleElements", "tupleIndex", 
		"structExpression", "structExprStruct", "structExprFields", "structExprField", 
		"structBase", "structExprTuple", "structExprUnit", "enumerationVariantExpression", 
		"enumExprStruct", "enumExprFields", "enumExprField", "enumExprTuple", 
		"enumExprFieldless", "callParams", "closureExpression", "closureParameters", 
		"closureParam", "loopExpression", "infiniteLoopExpression", "predicateLoopExpression", 
		"predicatePatternLoopExpression", "iteratorLoopExpression", "loopLabel", 
		"ifExpression", "ifLetExpression", "matchExpression", "matchArms", "matchArmExpression", 
		"matchArm", "matchArmGuard", "pattern", "patternNoTopAlt", "patternWithoutRange", 
		"literalPattern", "identifierPattern", "wildcardPattern", "restPattern", 
		"rangePattern", "rangePatternBound", "referencePattern", "structPattern", 
		"structPatternElements", "structPatternFields", "structPatternField", 
		"structPatternEtCetera", "tupleStructPattern", "tupleStructItems", "tuplePattern", 
		"tuplePatternItems", "groupedPattern", "slicePattern", "slicePatternItems", 
		"pathPattern", "type_", "typeNoBounds", "parenthesizedType", "neverType", 
		"tupleType", "arrayType", "sliceType", "referenceType", "rawPointerType", 
		"bareFunctionType", "functionTypeQualifiers", "bareFunctionReturnType", 
		"functionParametersMaybeNamedVariadic", "maybeNamedFunctionParameters", 
		"maybeNamedParam", "maybeNamedFunctionParametersVariadic", "traitObjectType", 
		"traitObjectTypeOneBound", "implTraitType", "implTraitTypeOneBound", "inferredType", 
		"typeParamBounds", "typeParamBound", "traitBound", "lifetimeBounds", "lifetime", 
		"simplePath", "simplePathSegment", "pathInExpression", "pathExprSegment", 
		"pathIdentSegment", "genericArgs", "genericArg", "genericArgsConst", "genericArgsLifetimes", 
		"genericArgsTypes", "genericArgsBindings", "genericArgsBinding", "qualifiedPathInExpression", 
		"qualifiedPathType", "qualifiedPathInType", "typePath", "typePathSegment", 
		"typePathFn", "typePathInputs", "visibility", "identifier", "keyword", 
		"macroIdentifierLikeToken", "macroLiteralToken", "macroPunctuationToken", 
		"shl", "shr"
	};

	private static readonly string[] _LiteralNames = {
		null, "'as'", "'break'", "'const'", "'continue'", "'crate'", "'else'", 
		"'enum'", "'extern'", "'false'", "'fn'", "'for'", "'if'", "'impl'", "'in'", 
		"'let'", "'loop'", "'match'", "'mod'", "'move'", "'mut'", "'pub'", "'ref'", 
		"'return'", "'self'", "'Self'", "'static'", "'struct'", "'super'", "'trait'", 
		"'true'", "'type'", "'unsafe'", "'use'", "'where'", "'while'", "'async'", 
		"'await'", "'dyn'", "'abstract'", "'become'", "'box'", "'do'", "'final'", 
		"'macro'", "'override'", "'priv'", "'typeof'", "'unsized'", "'virtual'", 
		"'yield'", "'try'", "'union'", "''static'", "'macro_rules'", "''_'", "'$crate'", 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, "'+'", "'-'", "'*'", "'/'", "'%'", "'^'", "'!'", "'&'", "'|'", "'&&'", 
		"'||'", "'+='", "'-='", "'*='", "'/='", "'%='", "'^='", "'&='", "'|='", 
		"'<<='", "'>>='", "'='", "'=='", "'!='", "'>'", "'<'", "'>='", "'<='", 
		"'@'", "'_'", "'.'", "'..'", "'...'", "'..='", "','", "';'", "':'", "'::'", 
		"'->'", "'=>'", "'#'", "'$'", "'?'", "'{'", "'}'", "'['", "']'", "'('", 
		"')'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "KW_AS", "KW_BREAK", "KW_CONST", "KW_CONTINUE", "KW_CRATE", "KW_ELSE", 
		"KW_ENUM", "KW_EXTERN", "KW_FALSE", "KW_FN", "KW_FOR", "KW_IF", "KW_IMPL", 
		"KW_IN", "KW_LET", "KW_LOOP", "KW_MATCH", "KW_MOD", "KW_MOVE", "KW_MUT", 
		"KW_PUB", "KW_REF", "KW_RETURN", "KW_SELFVALUE", "KW_SELFTYPE", "KW_STATIC", 
		"KW_STRUCT", "KW_SUPER", "KW_TRAIT", "KW_TRUE", "KW_TYPE", "KW_UNSAFE", 
		"KW_USE", "KW_WHERE", "KW_WHILE", "KW_ASYNC", "KW_AWAIT", "KW_DYN", "KW_ABSTRACT", 
		"KW_BECOME", "KW_BOX", "KW_DO", "KW_FINAL", "KW_MACRO", "KW_OVERRIDE", 
		"KW_PRIV", "KW_TYPEOF", "KW_UNSIZED", "KW_VIRTUAL", "KW_YIELD", "KW_TRY", 
		"KW_UNION", "KW_STATICLIFETIME", "KW_MACRORULES", "KW_UNDERLINELIFETIME", 
		"KW_DOLLARCRATE", "NON_KEYWORD_IDENTIFIER", "RAW_IDENTIFIER", "LINE_COMMENT", 
		"BLOCK_COMMENT", "INNER_LINE_DOC", "INNER_BLOCK_DOC", "OUTER_LINE_DOC", 
		"OUTER_BLOCK_DOC", "BLOCK_COMMENT_OR_DOC", "SHEBANG", "WHITESPACE", "NEWLINE", 
		"CHAR_LITERAL", "STRING_LITERAL", "RAW_STRING_LITERAL", "BYTE_LITERAL", 
		"BYTE_STRING_LITERAL", "RAW_BYTE_STRING_LITERAL", "INTEGER_LITERAL", "DEC_LITERAL", 
		"HEX_LITERAL", "OCT_LITERAL", "BIN_LITERAL", "FLOAT_LITERAL", "LIFETIME_OR_LABEL", 
		"PLUS", "MINUS", "STAR", "SLASH", "PERCENT", "CARET", "NOT", "AND", "OR", 
		"ANDAND", "OROR", "PLUSEQ", "MINUSEQ", "STAREQ", "SLASHEQ", "PERCENTEQ", 
		"CARETEQ", "ANDEQ", "OREQ", "SHLEQ", "SHREQ", "EQ", "EQEQ", "NE", "GT", 
		"LT", "GE", "LE", "AT", "UNDERSCORE", "DOT", "DOTDOT", "DOTDOTDOT", "DOTDOTEQ", 
		"COMMA", "SEMI", "COLON", "PATHSEP", "RARROW", "FATARROW", "POUND", "DOLLAR", 
		"QUESTION", "LCURLYBRACE", "RCURLYBRACE", "LSQUAREBRACKET", "RSQUAREBRACKET", 
		"LPAREN", "RPAREN"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "RustParser.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static RustParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public RustParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public RustParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class CrateContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(RustParser.Eof, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public InnerAttributeContext[] innerAttribute() {
			return GetRuleContexts<InnerAttributeContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public InnerAttributeContext innerAttribute(int i) {
			return GetRuleContext<InnerAttributeContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ItemContext[] item() {
			return GetRuleContexts<ItemContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ItemContext item(int i) {
			return GetRuleContext<ItemContext>(i);
		}
		public CrateContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_crate; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRustParserListener typedListener = listener as IRustParserListener;
			if (typedListener != null) typedListener.EnterCrate(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRustParserListener typedListener = listener as IRustParserListener;
			if (typedListener != null) typedListener.ExitCrate(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRustParserVisitor<TResult> typedVisitor = visitor as IRustParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCrate(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CrateContext crate() {
		CrateContext _localctx = new CrateContext(Context, State);
		EnterRule(_localctx, 0, RULE_crate);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 395;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,0,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 392;
					innerAttribute();
					}
					} 
				}
				State = 397;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,0,Context);
			}
			State = 401;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << KW_CONST) | (1L << KW_CRATE) | (1L << KW_ENUM) | (1L << KW_EXTERN) | (1L << KW_FN) | (1L << KW_IMPL) | (1L << KW_MOD) | (1L << KW_PUB) | (1L << KW_SELFVALUE) | (1L << KW_STATIC) | (1L << KW_STRUCT) | (1L << KW_SUPER) | (1L << KW_TRAIT) | (1L << KW_TYPE) | (1L << KW_UNSAFE) | (1L << KW_USE) | (1L << KW_ASYNC) | (1L << KW_UNION) | (1L << KW_MACRORULES) | (1L << KW_DOLLARCRATE) | (1L << NON_KEYWORD_IDENTIFIER) | (1L << RAW_IDENTIFIER))) != 0) || _la==PATHSEP || _la==POUND) {
				{
				{
				State = 398;
				item();
				}
				}
				State = 403;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 404;
			Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MacroInvocationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SimplePathContext simplePath() {
			return GetRuleContext<SimplePathContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT() { return GetToken(RustParser.NOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public DelimTokenTreeContext delimTokenTree() {
			return GetRuleContext<DelimTokenTreeContext>(0);
		}
		public MacroInvocationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_macroInvocation; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRustParserListener typedListener = listener as IRustParserListener;
			if (typedListener != null) typedListener.EnterMacroInvocation(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRustParserListener typedListener = listener as IRustParserListener;
			if (typedListener != null) typedListener.ExitMacroInvocation(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRustParserVisitor<TResult> typedVisitor = visitor as IRustParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMacroInvocation(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MacroInvocationContext macroInvocation() {
		MacroInvocationContext _localctx = new MacroInvocationContext(Context, State);
		EnterRule(_localctx, 2, RULE_macroInvocation);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 406;
			simplePath();
			State = 407;
			Match(NOT);
			State = 408;
			delimTokenTree();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DelimTokenTreeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(RustParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(RustParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TokenTreeContext[] tokenTree() {
			return GetRuleContexts<TokenTreeContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TokenTreeContext tokenTree(int i) {
			return GetRuleContext<TokenTreeContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LSQUAREBRACKET() { return GetToken(RustParser.LSQUAREBRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RSQUAREBRACKET() { return GetToken(RustParser.RSQUAREBRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LCURLYBRACE() { return GetToken(RustParser.LCURLYBRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RCURLYBRACE() { return GetToken(RustParser.RCURLYBRACE, 0); }
		public DelimTokenTreeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_delimTokenTree; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRustParserListener typedListener = listener as IRustParserListener;
			if (typedListener != null) typedListener.EnterDelimTokenTree(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRustParserListener typedListener = listener as IRustParserListener;
			if (typedListener != null) typedListener.ExitDelimTokenTree(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRustParserVisitor<TResult> typedVisitor = visitor as IRustParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDelimTokenTree(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DelimTokenTreeContext delimTokenTree() {
		DelimTokenTreeContext _localctx = new DelimTokenTreeContext(Context, State);
		EnterRule(_localctx, 4, RULE_delimTokenTree);
		int _la;
		try {
			State = 434;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case LPAREN:
				EnterOuterAlt(_localctx, 1);
				{
				State = 410;
				Match(LPAREN);
				State = 414;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << KW_AS) | (1L << KW_BREAK) | (1L << KW_CONST) | (1L << KW_CONTINUE) | (1L << KW_CRATE) | (1L << KW_ELSE) | (1L << KW_ENUM) | (1L << KW_EXTERN) | (1L << KW_FALSE) | (1L << KW_FN) | (1L << KW_FOR) | (1L << KW_IF) | (1L << KW_IMPL) | (1L << KW_IN) | (1L << KW_LET) | (1L << KW_LOOP) | (1L << KW_MATCH) | (1L << KW_MOD) | (1L << KW_MOVE) | (1L << KW_MUT) | (1L << KW_PUB) | (1L << KW_REF) | (1L << KW_RETURN) | (1L << KW_SELFVALUE) | (1L << KW_SELFTYPE) | (1L << KW_STATIC) | (1L << KW_STRUCT) | (1L << KW_SUPER) | (1L << KW_TRAIT) | (1L << KW_TRUE) | (1L << KW_TYPE) | (1L << KW_UNSAFE) | (1L << KW_USE) | (1L << KW_WHERE) | (1L << KW_WHILE) | (1L << KW_ASYNC) | (1L << KW_AWAIT) | (1L << KW_DYN) | (1L << KW_ABSTRACT) | (1L << KW_BECOME) | (1L << KW_BOX) | (1L << KW_DO) | (1L << KW_FINAL) | (1L << KW_MACRO) | (1L << KW_OVERRIDE) | (1L << KW_PRIV) | (1L << KW_TYPEOF) | (1L << KW_UNSIZED) | (1L << KW_VIRTUAL) | (1L << KW_YIELD) | (1L << KW_TRY) | (1L << KW_UNION) | (1L << KW_STATICLIFETIME) | (1L << KW_MACRORULES) | (1L << KW_UNDERLINELIFETIME) | (1L << KW_DOLLARCRATE) | (1L << NON_KEYWORD_IDENTIFIER) | (1L << RAW_IDENTIFIER))) != 0) || ((((_la - 69)) & ~0x3f) == 0 && ((1L << (_la - 69)) & ((1L << (CHAR_LITERAL - 69)) | (1L << (STRING_LITERAL - 69)) | (1L << (RAW_STRING_LITERAL - 69)) | (1L << (BYTE_LITERAL - 69)) | (1L << (BYTE_STRING_LITERAL - 69)) | (1L << (RAW_BYTE_STRING_LITERAL - 69)) | (1L << (INTEGER_LITERAL - 69)) | (1L << (FLOAT_LITERAL - 69)) | (1L << (LIFETIME_OR_LABEL - 69)) | (1L << (PLUS - 69)) | (1L << (MINUS - 69)) | (1L << (STAR - 69)) | (1L << (SLASH - 69)) | (1L << (PERCENT - 69)) | (1L << (CARET - 69)) | (1L << (NOT - 69)) | (1L << (AND - 69)) | (1L << (OR - 69)) | (1L << (ANDAND - 69)) | (1L << (OROR - 69)) | (1L << (PLUSEQ - 69)) | (1L << (MINUSEQ - 69)) | (1L << (STAREQ - 69)) | (1L << (SLASHEQ - 69)) | (1L << (PERCENTEQ - 69)) | (1L << (CARETEQ - 69)) | (1L << (ANDEQ - 69)) | (1L << (OREQ - 69)) | (1L << (SHLEQ - 69)) | (1L << (SHREQ - 69)) | (1L << (EQ - 69)) | (1L << (EQEQ - 69)) | (1L << (NE - 69)) | (1L << (GT - 69)) | (1L << (LT - 69)) | (1L << (GE - 69)) | (1L << (LE - 69)) | (1L << (AT - 69)) | (1L << (UNDERSCORE - 69)) | (1L << (DOT - 69)) | (1L << (DOTDOT - 69)) | (1L << (DOTDOTDOT - 69)) | (1L << (DOTDOTEQ - 69)) | (1L << (COMMA - 69)) | (1L << (SEMI - 69)) | (1L << (COLON - 69)) | (1L << (PATHSEP - 69)) | (1L << (RARROW - 69)) | (1L << (FATARROW - 69)) | (1L << (POUND - 69)) | (1L << (DOLLAR - 69)) | (1L << (QUESTION - 69)) | (1L << (LCURLYBRACE - 69)) | (1L << (LSQUAREBRACKET - 69)) | (1L << (LPAREN - 69)))) != 0)) {
					{
					{
					State = 411;
					tokenTree();
					}
					}
					State = 416;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 417;
				Match(RPAREN);
				}
				break;
			case LSQUAREBRACKET:
				EnterOuterAlt(_localctx, 2);
				{
				State = 418;
				Match(LSQUAREBRACKET);
				State = 422;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << KW_AS) | (1L << KW_BREAK) | (1L << KW_CONST) | (1L << KW_CONTINUE) | (1L << KW_CRATE) | (1L << KW_ELSE) | (1L << KW_ENUM) | (1L << KW_EXTERN) | (1L << KW_FALSE) | (1L << KW_FN) | (1L << KW_FOR) | (1L << KW_IF) | (1L << KW_IMPL) | (1L << KW_IN) | (1L << KW_LET) | (1L << KW_LOOP) | (1L << KW_MATCH) | (1L << KW_MOD) | (1L << KW_MOVE) | (1L << KW_MUT) | (1L << KW_PUB) | (1L << KW_REF) | (1L << KW_RETURN) | (1L << KW_SELFVALUE) | (1L << KW_SELFTYPE) | (1L << KW_STATIC) | (1L << KW_STRUCT) | (1L << KW_SUPER) | (1L << KW_TRAIT) | (1L << KW_TRUE) | (1L << KW_TYPE) | (1L << KW_UNSAFE) | (1L << KW_USE) | (1L << KW_WHERE) | (1L << KW_WHILE) | (1L << KW_ASYNC) | (1L << KW_AWAIT) | (1L << KW_DYN) | (1L << KW_ABSTRACT) | (1L << KW_BECOME) | (1L << KW_BOX) | (1L << KW_DO) | (1L << KW_FINAL) | (1L << KW_MACRO) | (1L << KW_OVERRIDE) | (1L << KW_PRIV) | (1L << KW_TYPEOF) | (1L << KW_UNSIZED) | (1L << KW_VIRTUAL) | (1L << KW_YIELD) | (1L << KW_TRY) | (1L << KW_UNION) | (1L << KW_STATICLIFETIME) | (1L << KW_MACRORULES) | (1L << KW_UNDERLINELIFETIME) | (1L << KW_DOLLARCRATE) | (1L << NON_KEYWORD_IDENTIFIER) | (1L << RAW_IDENTIFIER))) != 0) || ((((_la - 69)) & ~0x3f) == 0 && ((1L << (_la - 69)) & ((1L << (CHAR_LITERAL - 69)) | (1L << (STRING_LITERAL - 69)) | (1L << (RAW_STRING_LITERAL - 69)) | (1L << (BYTE_LITERAL - 69)) | (1L << (BYTE_STRING_LITERAL - 69)) | (1L << (RAW_BYTE_STRING_LITERAL - 69)) | (1L << (INTEGER_LITERAL - 69)) | (1L << (FLOAT_LITERAL - 69)) | (1L << (LIFETIME_OR_LABEL - 69)) | (1L << (PLUS - 69)) | (1L << (MINUS - 69)) | (1L << (STAR - 69)) | (1L << (SLASH - 69)) | (1L << (PERCENT - 69)) | (1L << (CARET - 69)) | (1L << (NOT - 69)) | (1L << (AND - 69)) | (1L << (OR - 69)) | (1L << (ANDAND - 69)) | (1L << (OROR - 69)) | (1L << (PLUSEQ - 69)) | (1L << (MINUSEQ - 69)) | (1L << (STAREQ - 69)) | (1L << (SLASHEQ - 69)) | (1L << (PERCENTEQ - 69)) | (1L << (CARETEQ - 69)) | (1L << (ANDEQ - 69)) | (1L << (OREQ - 69)) | (1L << (SHLEQ - 69)) | (1L << (SHREQ - 69)) | (1L << (EQ - 69)) | (1L << (EQEQ - 69)) | (1L << (NE - 69)) | (1L << (GT - 69)) | (1L << (LT - 69)) | (1L << (GE - 69)) | (1L << (LE - 69)) | (1L << (AT - 69)) | (1L << (UNDERSCORE - 69)) | (1L << (DOT - 69)) | (1L << (DOTDOT - 69)) | (1L << (DOTDOTDOT - 69)) | (1L << (DOTDOTEQ - 69)) | (1L << (COMMA - 69)) | (1L << (SEMI - 69)) | (1L << (COLON - 69)) | (1L << (PATHSEP - 69)) | (1L << (RARROW - 69)) | (1L << (FATARROW - 69)) | (1L << (POUND - 69)) | (1L << (DOLLAR - 69)) | (1L << (QUESTION - 69)) | (1L << (LCURLYBRACE - 69)) | (1L << (LSQUAREBRACKET - 69)) | (1L << (LPAREN - 69)))) != 0)) {
					{
					{
					State = 419;
					tokenTree();
					}
					}
					State = 424;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 425;
				Match(RSQUAREBRACKET);
				}
				break;
			case LCURLYBRACE:
				EnterOuterAlt(_localctx, 3);
				{
				State = 426;
				Match(LCURLYBRACE);
				State = 430;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << KW_AS) | (1L << KW_BREAK) | (1L << KW_CONST) | (1L << KW_CONTINUE) | (1L << KW_CRATE) | (1L << KW_ELSE) | (1L << KW_ENUM) | (1L << KW_EXTERN) | (1L << KW_FALSE) | (1L << KW_FN) | (1L << KW_FOR) | (1L << KW_IF) | (1L << KW_IMPL) | (1L << KW_IN) | (1L << KW_LET) | (1L << KW_LOOP) | (1L << KW_MATCH) | (1L << KW_MOD) | (1L << KW_MOVE) | (1L << KW_MUT) | (1L << KW_PUB) | (1L << KW_REF) | (1L << KW_RETURN) | (1L << KW_SELFVALUE) | (1L << KW_SELFTYPE) | (1L << KW_STATIC) | (1L << KW_STRUCT) | (1L << KW_SUPER) | (1L << KW_TRAIT) | (1L << KW_TRUE) | (1L << KW_TYPE) | (1L << KW_UNSAFE) | (1L << KW_USE) | (1L << KW_WHERE) | (1L << KW_WHILE) | (1L << KW_ASYNC) | (1L << KW_AWAIT) | (1L << KW_DYN) | (1L << KW_ABSTRACT) | (1L << KW_BECOME) | (1L << KW_BOX) | (1L << KW_DO) | (1L << KW_FINAL) | (1L << KW_MACRO) | (1L << KW_OVERRIDE) | (1L << KW_PRIV) | (1L << KW_TYPEOF) | (1L << KW_UNSIZED) | (1L << KW_VIRTUAL) | (1L << KW_YIELD) | (1L << KW_TRY) | (1L << KW_UNION) | (1L << KW_STATICLIFETIME) | (1L << KW_MACRORULES) | (1L << KW_UNDERLINELIFETIME) | (1L << KW_DOLLARCRATE) | (1L << NON_KEYWORD_IDENTIFIER) | (1L << RAW_IDENTIFIER))) != 0) || ((((_la - 69)) & ~0x3f) == 0 && ((1L << (_la - 69)) & ((1L << (CHAR_LITERAL - 69)) | (1L << (STRING_LITERAL - 69)) | (1L << (RAW_STRING_LITERAL - 69)) | (1L << (BYTE_LITERAL - 69)) | (1L << (BYTE_STRING_LITERAL - 69)) | (1L << (RAW_BYTE_STRING_LITERAL - 69)) | (1L << (INTEGER_LITERAL - 69)) | (1L << (FLOAT_LITERAL - 69)) | (1L << (LIFETIME_OR_LABEL - 69)) | (1L << (PLUS - 69)) | (1L << (MINUS - 69)) | (1L << (STAR - 69)) | (1L << (SLASH - 69)) | (1L << (PERCENT - 69)) | (1L << (CARET - 69)) | (1L << (NOT - 69)) | (1L << (AND - 69)) | (1L << (OR - 69)) | (1L << (ANDAND - 69)) | (1L << (OROR - 69)) | (1L << (PLUSEQ - 69)) | (1L << (MINUSEQ - 69)) | (1L << (STAREQ - 69)) | (1L << (SLASHEQ - 69)) | (1L << (PERCENTEQ - 69)) | (1L << (CARETEQ - 69)) | (1L << (ANDEQ - 69)) | (1L << (OREQ - 69)) | (1L << (SHLEQ - 69)) | (1L << (SHREQ - 69)) | (1L << (EQ - 69)) | (1L << (EQEQ - 69)) | (1L << (NE - 69)) | (1L << (GT - 69)) | (1L << (LT - 69)) | (1L << (GE - 69)) | (1L << (LE - 69)) | (1L << (AT - 69)) | (1L << (UNDERSCORE - 69)) | (1L << (DOT - 69)) | (1L << (DOTDOT - 69)) | (1L << (DOTDOTDOT - 69)) | (1L << (DOTDOTEQ - 69)) | (1L << (COMMA - 69)) | (1L << (SEMI - 69)) | (1L << (COLON - 69)) | (1L << (PATHSEP - 69)) | (1L << (RARROW - 69)) | (1L << (FATARROW - 69)) | (1L << (POUND - 69)) | (1L << (DOLLAR - 69)) | (1L << (QUESTION - 69)) | (1L << (LCURLYBRACE - 69)) | (1L << (LSQUAREBRACKET - 69)) | (1L << (LPAREN - 69)))) != 0)) {
					{
					{
					State = 427;
					tokenTree();
					}
					}
					State = 432;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 433;
				Match(RCURLYBRACE);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TokenTreeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TokenTreeTokenContext[] tokenTreeToken() {
			return GetRuleContexts<TokenTreeTokenContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TokenTreeTokenContext tokenTreeToken(int i) {
			return GetRuleContext<TokenTreeTokenContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DelimTokenTreeContext delimTokenTree() {
			return GetRuleContext<DelimTokenTreeContext>(0);
		}
		public TokenTreeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tokenTree; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRustParserListener typedListener = listener as IRustParserListener;
			if (typedListener != null) typedListener.EnterTokenTree(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRustParserListener typedListener = listener as IRustParserListener;
			if (typedListener != null) typedListener.ExitTokenTree(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRustParserVisitor<TResult> typedVisitor = visitor as IRustParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTokenTree(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TokenTreeContext tokenTree() {
		TokenTreeContext _localctx = new TokenTreeContext(Context, State);
		EnterRule(_localctx, 6, RULE_tokenTree);
		try {
			int _alt;
			State = 442;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case KW_AS:
			case KW_BREAK:
			case KW_CONST:
			case KW_CONTINUE:
			case KW_CRATE:
			case KW_ELSE:
			case KW_ENUM:
			case KW_EXTERN:
			case KW_FALSE:
			case KW_FN:
			case KW_FOR:
			case KW_IF:
			case KW_IMPL:
			case KW_IN:
			case KW_LET:
			case KW_LOOP:
			case KW_MATCH:
			case KW_MOD:
			case KW_MOVE:
			case KW_MUT:
			case KW_PUB:
			case KW_REF:
			case KW_RETURN:
			case KW_SELFVALUE:
			case KW_SELFTYPE:
			case KW_STATIC:
			case KW_STRUCT:
			case KW_SUPER:
			case KW_TRAIT:
			case KW_TRUE:
			case KW_TYPE:
			case KW_UNSAFE:
			case KW_USE:
			case KW_WHERE:
			case KW_WHILE:
			case KW_ASYNC:
			case KW_AWAIT:
			case KW_DYN:
			case KW_ABSTRACT:
			case KW_BECOME:
			case KW_BOX:
			case KW_DO:
			case KW_FINAL:
			case KW_MACRO:
			case KW_OVERRIDE:
			case KW_PRIV:
			case KW_TYPEOF:
			case KW_UNSIZED:
			case KW_VIRTUAL:
			case KW_YIELD:
			case KW_TRY:
			case KW_UNION:
			case KW_STATICLIFETIME:
			case KW_MACRORULES:
			case KW_UNDERLINELIFETIME:
			case KW_DOLLARCRATE:
			case NON_KEYWORD_IDENTIFIER:
			case RAW_IDENTIFIER:
			case CHAR_LITERAL:
			case STRING_LITERAL:
			case RAW_STRING_LITERAL:
			case BYTE_LITERAL:
			case BYTE_STRING_LITERAL:
			case RAW_BYTE_STRING_LITERAL:
			case INTEGER_LITERAL:
			case FLOAT_LITERAL:
			case LIFETIME_OR_LABEL:
			case PLUS:
			case MINUS:
			case STAR:
			case SLASH:
			case PERCENT:
			case CARET:
			case NOT:
			case AND:
			case OR:
			case ANDAND:
			case OROR:
			case PLUSEQ:
			case MINUSEQ:
			case STAREQ:
			case SLASHEQ:
			case PERCENTEQ:
			case CARETEQ:
			case ANDEQ:
			case OREQ:
			case SHLEQ:
			case SHREQ:
			case EQ:
			case EQEQ:
			case NE:
			case GT:
			case LT:
			case GE:
			case LE:
			case AT:
			case UNDERSCORE:
			case DOT:
			case DOTDOT:
			case DOTDOTDOT:
			case DOTDOTEQ:
			case COMMA:
			case SEMI:
			case COLON:
			case PATHSEP:
			case RARROW:
			case FATARROW:
			case POUND:
			case DOLLAR:
			case QUESTION:
				EnterOuterAlt(_localctx, 1);
				{
				State = 437;
				ErrorHandler.Sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						State = 436;
						tokenTreeToken();
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 439;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,6,Context);
				} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
				}
				break;
			case LCURLYBRACE:
			case LSQUAREBRACKET:
			case LPAREN:
				EnterOuterAlt(_localctx, 2);
				{
				State = 441;
				delimTokenTree();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TokenTreeTokenContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public MacroIdentifierLikeTokenContext macroIdentifierLikeToken() {
			return GetRuleContext<MacroIdentifierLikeTokenContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MacroLiteralTokenContext macroLiteralToken() {
			return GetRuleContext<MacroLiteralTokenContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MacroPunctuationTokenContext macroPunctuationToken() {
			return GetRuleContext<MacroPunctuationTokenContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MacroRepOpContext macroRepOp() {
			return GetRuleContext<MacroRepOpContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOLLAR() { return GetToken(RustParser.DOLLAR, 0); }
		public TokenTreeTokenContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tokenTreeToken; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRustParserListener typedListener = listener as IRustParserListener;
			if (typedListener != null) typedListener.EnterTokenTreeToken(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRustParserListener typedListener = listener as IRustParserListener;
			if (typedListener != null) typedListener.ExitTokenTreeToken(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRustParserVisitor<TResult> typedVisitor = visitor as IRustParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTokenTreeToken(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TokenTreeTokenContext tokenTreeToken() {
		TokenTreeTokenContext _localctx = new TokenTreeTokenContext(Context, State);
		EnterRule(_localctx, 8, RULE_tokenTreeToken);
		try {
			State = 449;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,8,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 444;
				macroIdentifierLikeToken();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 445;
				macroLiteralToken();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 446;
				macroPunctuationToken();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 447;
				macroRepOp();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 448;
				Match(DOLLAR);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MacroInvocationSemiContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SimplePathContext simplePath() {
			return GetRuleContext<SimplePathContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT() { return GetToken(RustParser.NOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(RustParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(RustParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(RustParser.SEMI, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TokenTreeContext[] tokenTree() {
			return GetRuleContexts<TokenTreeContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TokenTreeContext tokenTree(int i) {
			return GetRuleContext<TokenTreeContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LSQUAREBRACKET() { return GetToken(RustParser.LSQUAREBRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RSQUAREBRACKET() { return GetToken(RustParser.RSQUAREBRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LCURLYBRACE() { return GetToken(RustParser.LCURLYBRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RCURLYBRACE() { return GetToken(RustParser.RCURLYBRACE, 0); }
		public MacroInvocationSemiContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_macroInvocationSemi; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRustParserListener typedListener = listener as IRustParserListener;
			if (typedListener != null) typedListener.EnterMacroInvocationSemi(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRustParserListener typedListener = listener as IRustParserListener;
			if (typedListener != null) typedListener.ExitMacroInvocationSemi(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRustParserVisitor<TResult> typedVisitor = visitor as IRustParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMacroInvocationSemi(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MacroInvocationSemiContext macroInvocationSemi() {
		MacroInvocationSemiContext _localctx = new MacroInvocationSemiContext(Context, State);
		EnterRule(_localctx, 10, RULE_macroInvocationSemi);
		int _la;
		try {
			State = 486;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,12,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 451;
				simplePath();
				State = 452;
				Match(NOT);
				State = 453;
				Match(LPAREN);
				State = 457;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << KW_AS) | (1L << KW_BREAK) | (1L << KW_CONST) | (1L << KW_CONTINUE) | (1L << KW_CRATE) | (1L << KW_ELSE) | (1L << KW_ENUM) | (1L << KW_EXTERN) | (1L << KW_FALSE) | (1L << KW_FN) | (1L << KW_FOR) | (1L << KW_IF) | (1L << KW_IMPL) | (1L << KW_IN) | (1L << KW_LET) | (1L << KW_LOOP) | (1L << KW_MATCH) | (1L << KW_MOD) | (1L << KW_MOVE) | (1L << KW_MUT) | (1L << KW_PUB) | (1L << KW_REF) | (1L << KW_RETURN) | (1L << KW_SELFVALUE) | (1L << KW_SELFTYPE) | (1L << KW_STATIC) | (1L << KW_STRUCT) | (1L << KW_SUPER) | (1L << KW_TRAIT) | (1L << KW_TRUE) | (1L << KW_TYPE) | (1L << KW_UNSAFE) | (1L << KW_USE) | (1L << KW_WHERE) | (1L << KW_WHILE) | (1L << KW_ASYNC) | (1L << KW_AWAIT) | (1L << KW_DYN) | (1L << KW_ABSTRACT) | (1L << KW_BECOME) | (1L << KW_BOX) | (1L << KW_DO) | (1L << KW_FINAL) | (1L << KW_MACRO) | (1L << KW_OVERRIDE) | (1L << KW_PRIV) | (1L << KW_TYPEOF) | (1L << KW_UNSIZED) | (1L << KW_VIRTUAL) | (1L << KW_YIELD) | (1L << KW_TRY) | (1L << KW_UNION) | (1L << KW_STATICLIFETIME) | (1L << KW_MACRORULES) | (1L << KW_UNDERLINELIFETIME) | (1L << KW_DOLLARCRATE) | (1L << NON_KEYWORD_IDENTIFIER) | (1L << RAW_IDENTIFIER))) != 0) || ((((_la - 69)) & ~0x3f) == 0 && ((1L << (_la - 69)) & ((1L << (CHAR_LITERAL - 69)) | (1L << (STRING_LITERAL - 69)) | (1L << (RAW_STRING_LITERAL - 69)) | (1L << (BYTE_LITERAL - 69)) | (1L << (BYTE_STRING_LITERAL - 69)) | (1L << (RAW_BYTE_STRING_LITERAL - 69)) | (1L << (INTEGER_LITERAL - 69)) | (1L << (FLOAT_LITERAL - 69)) | (1L << (LIFETIME_OR_LABEL - 69)) | (1L << (PLUS - 69)) | (1L << (MINUS - 69)) | (1L << (STAR - 69)) | (1L << (SLASH - 69)) | (1L << (PERCENT - 69)) | (1L << (CARET - 69)) | (1L << (NOT - 69)) | (1L << (AND - 69)) | (1L << (OR - 69)) | (1L << (ANDAND - 69)) | (1L << (OROR - 69)) | (1L << (PLUSEQ - 69)) | (1L << (MINUSEQ - 69)) | (1L << (STAREQ - 69)) | (1L << (SLASHEQ - 69)) | (1L << (PERCENTEQ - 69)) | (1L << (CARETEQ - 69)) | (1L << (ANDEQ - 69)) | (1L << (OREQ - 69)) | (1L << (SHLEQ - 69)) | (1L << (SHREQ - 69)) | (1L << (EQ - 69)) | (1L << (EQEQ - 69)) | (1L << (NE - 69)) | (1L << (GT - 69)) | (1L << (LT - 69)) | (1L << (GE - 69)) | (1L << (LE - 69)) | (1L << (AT - 69)) | (1L << (UNDERSCORE - 69)) | (1L << (DOT - 69)) | (1L << (DOTDOT - 69)) | (1L << (DOTDOTDOT - 69)) | (1L << (DOTDOTEQ - 69)) | (1L << (COMMA - 69)) | (1L << (SEMI - 69)) | (1L << (COLON - 69)) | (1L << (PATHSEP - 69)) | (1L << (RARROW - 69)) | (1L << (FATARROW - 69)) | (1L << (POUND - 69)) | (1L << (DOLLAR - 69)) | (1L << (QUESTION - 69)) | (1L << (LCURLYBRACE - 69)) | (1L << (LSQUAREBRACKET - 69)) | (1L << (LPAREN - 69)))) != 0)) {
					{
					{
					State = 454;
					tokenTree();
					}
					}
					State = 459;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 460;
				Match(RPAREN);
				State = 461;
				Match(SEMI);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 463;
				simplePath();
				State = 464;
				Match(NOT);
				State = 465;
				Match(LSQUAREBRACKET);
				State = 469;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << KW_AS) | (1L << KW_BREAK) | (1L << KW_CONST) | (1L << KW_CONTINUE) | (1L << KW_CRATE) | (1L << KW_ELSE) | (1L << KW_ENUM) | (1L << KW_EXTERN) | (1L << KW_FALSE) | (1L << KW_FN) | (1L << KW_FOR) | (1L << KW_IF) | (1L << KW_IMPL) | (1L << KW_IN) | (1L << KW_LET) | (1L << KW_LOOP) | (1L << KW_MATCH) | (1L << KW_MOD) | (1L << KW_MOVE) | (1L << KW_MUT) | (1L << KW_PUB) | (1L << KW_REF) | (1L << KW_RETURN) | (1L << KW_SELFVALUE) | (1L << KW_SELFTYPE) | (1L << KW_STATIC) | (1L << KW_STRUCT) | (1L << KW_SUPER) | (1L << KW_TRAIT) | (1L << KW_TRUE) | (1L << KW_TYPE) | (1L << KW_UNSAFE) | (1L << KW_USE) | (1L << KW_WHERE) | (1L << KW_WHILE) | (1L << KW_ASYNC) | (1L << KW_AWAIT) | (1L << KW_DYN) | (1L << KW_ABSTRACT) | (1L << KW_BECOME) | (1L << KW_BOX) | (1L << KW_DO) | (1L << KW_FINAL) | (1L << KW_MACRO) | (1L << KW_OVERRIDE) | (1L << KW_PRIV) | (1L << KW_TYPEOF) | (1L << KW_UNSIZED) | (1L << KW_VIRTUAL) | (1L << KW_YIELD) | (1L << KW_TRY) | (1L << KW_UNION) | (1L << KW_STATICLIFETIME) | (1L << KW_MACRORULES) | (1L << KW_UNDERLINELIFETIME) | (1L << KW_DOLLARCRATE) | (1L << NON_KEYWORD_IDENTIFIER) | (1L << RAW_IDENTIFIER))) != 0) || ((((_la - 69)) & ~0x3f) == 0 && ((1L << (_la - 69)) & ((1L << (CHAR_LITERAL - 69)) | (1L << (STRING_LITERAL - 69)) | (1L << (RAW_STRING_LITERAL - 69)) | (1L << (BYTE_LITERAL - 69)) | (1L << (BYTE_STRING_LITERAL - 69)) | (1L << (RAW_BYTE_STRING_LITERAL - 69)) | (1L << (INTEGER_LITERAL - 69)) | (1L << (FLOAT_LITERAL - 69)) | (1L << (LIFETIME_OR_LABEL - 69)) | (1L << (PLUS - 69)) | (1L << (MINUS - 69)) | (1L << (STAR - 69)) | (1L << (SLASH - 69)) | (1L << (PERCENT - 69)) | (1L << (CARET - 69)) | (1L << (NOT - 69)) | (1L << (AND - 69)) | (1L << (OR - 69)) | (1L << (ANDAND - 69)) | (1L << (OROR - 69)) | (1L << (PLUSEQ - 69)) | (1L << (MINUSEQ - 69)) | (1L << (STAREQ - 69)) | (1L << (SLASHEQ - 69)) | (1L << (PERCENTEQ - 69)) | (1L << (CARETEQ - 69)) | (1L << (ANDEQ - 69)) | (1L << (OREQ - 69)) | (1L << (SHLEQ - 69)) | (1L << (SHREQ - 69)) | (1L << (EQ - 69)) | (1L << (EQEQ - 69)) | (1L << (NE - 69)) | (1L << (GT - 69)) | (1L << (LT - 69)) | (1L << (GE - 69)) | (1L << (LE - 69)) | (1L << (AT - 69)) | (1L << (UNDERSCORE - 69)) | (1L << (DOT - 69)) | (1L << (DOTDOT - 69)) | (1L << (DOTDOTDOT - 69)) | (1L << (DOTDOTEQ - 69)) | (1L << (COMMA - 69)) | (1L << (SEMI - 69)) | (1L << (COLON - 69)) | (1L << (PATHSEP - 69)) | (1L << (RARROW - 69)) | (1L << (FATARROW - 69)) | (1L << (POUND - 69)) | (1L << (DOLLAR - 69)) | (1L << (QUESTION - 69)) | (1L << (LCURLYBRACE - 69)) | (1L << (LSQUAREBRACKET - 69)) | (1L << (LPAREN - 69)))) != 0)) {
					{
					{
					State = 466;
					tokenTree();
					}
					}
					State = 471;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 472;
				Match(RSQUAREBRACKET);
				State = 473;
				Match(SEMI);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 475;
				simplePath();
				State = 476;
				Match(NOT);
				State = 477;
				Match(LCURLYBRACE);
				State = 481;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << KW_AS) | (1L << KW_BREAK) | (1L << KW_CONST) | (1L << KW_CONTINUE) | (1L << KW_CRATE) | (1L << KW_ELSE) | (1L << KW_ENUM) | (1L << KW_EXTERN) | (1L << KW_FALSE) | (1L << KW_FN) | (1L << KW_FOR) | (1L << KW_IF) | (1L << KW_IMPL) | (1L << KW_IN) | (1L << KW_LET) | (1L << KW_LOOP) | (1L << KW_MATCH) | (1L << KW_MOD) | (1L << KW_MOVE) | (1L << KW_MUT) | (1L << KW_PUB) | (1L << KW_REF) | (1L << KW_RETURN) | (1L << KW_SELFVALUE) | (1L << KW_SELFTYPE) | (1L << KW_STATIC) | (1L << KW_STRUCT) | (1L << KW_SUPER) | (1L << KW_TRAIT) | (1L << KW_TRUE) | (1L << KW_TYPE) | (1L << KW_UNSAFE) | (1L << KW_USE) | (1L << KW_WHERE) | (1L << KW_WHILE) | (1L << KW_ASYNC) | (1L << KW_AWAIT) | (1L << KW_DYN) | (1L << KW_ABSTRACT) | (1L << KW_BECOME) | (1L << KW_BOX) | (1L << KW_DO) | (1L << KW_FINAL) | (1L << KW_MACRO) | (1L << KW_OVERRIDE) | (1L << KW_PRIV) | (1L << KW_TYPEOF) | (1L << KW_UNSIZED) | (1L << KW_VIRTUAL) | (1L << KW_YIELD) | (1L << KW_TRY) | (1L << KW_UNION) | (1L << KW_STATICLIFETIME) | (1L << KW_MACRORULES) | (1L << KW_UNDERLINELIFETIME) | (1L << KW_DOLLARCRATE) | (1L << NON_KEYWORD_IDENTIFIER) | (1L << RAW_IDENTIFIER))) != 0) || ((((_la - 69)) & ~0x3f) == 0 && ((1L << (_la - 69)) & ((1L << (CHAR_LITERAL - 69)) | (1L << (STRING_LITERAL - 69)) | (1L << (RAW_STRING_LITERAL - 69)) | (1L << (BYTE_LITERAL - 69)) | (1L << (BYTE_STRING_LITERAL - 69)) | (1L << (RAW_BYTE_STRING_LITERAL - 69)) | (1L << (INTEGER_LITERAL - 69)) | (1L << (FLOAT_LITERAL - 69)) | (1L << (LIFETIME_OR_LABEL - 69)) | (1L << (PLUS - 69)) | (1L << (MINUS - 69)) | (1L << (STAR - 69)) | (1L << (SLASH - 69)) | (1L << (PERCENT - 69)) | (1L << (CARET - 69)) | (1L << (NOT - 69)) | (1L << (AND - 69)) | (1L << (OR - 69)) | (1L << (ANDAND - 69)) | (1L << (OROR - 69)) | (1L << (PLUSEQ - 69)) | (1L << (MINUSEQ - 69)) | (1L << (STAREQ - 69)) | (1L << (SLASHEQ - 69)) | (1L << (PERCENTEQ - 69)) | (1L << (CARETEQ - 69)) | (1L << (ANDEQ - 69)) | (1L << (OREQ - 69)) | (1L << (SHLEQ - 69)) | (1L << (SHREQ - 69)) | (1L << (EQ - 69)) | (1L << (EQEQ - 69)) | (1L << (NE - 69)) | (1L << (GT - 69)) | (1L << (LT - 69)) | (1L << (GE - 69)) | (1L << (LE - 69)) | (1L << (AT - 69)) | (1L << (UNDERSCORE - 69)) | (1L << (DOT - 69)) | (1L << (DOTDOT - 69)) | (1L << (DOTDOTDOT - 69)) | (1L << (DOTDOTEQ - 69)) | (1L << (COMMA - 69)) | (1L << (SEMI - 69)) | (1L << (COLON - 69)) | (1L << (PATHSEP - 69)) | (1L << (RARROW - 69)) | (1L << (FATARROW - 69)) | (1L << (POUND - 69)) | (1L << (DOLLAR - 69)) | (1L << (QUESTION - 69)) | (1L << (LCURLYBRACE - 69)) | (1L << (LSQUAREBRACKET - 69)) | (1L << (LPAREN - 69)))) != 0)) {
					{
					{
					State = 478;
					tokenTree();
					}
					}
					State = 483;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 484;
				Match(RCURLYBRACE);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MacroRulesDefinitionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_MACRORULES() { return GetToken(RustParser.KW_MACRORULES, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT() { return GetToken(RustParser.NOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MacroRulesDefContext macroRulesDef() {
			return GetRuleContext<MacroRulesDefContext>(0);
		}
		public MacroRulesDefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_macroRulesDefinition; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRustParserListener typedListener = listener as IRustParserListener;
			if (typedListener != null) typedListener.EnterMacroRulesDefinition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRustParserListener typedListener = listener as IRustParserListener;
			if (typedListener != null) typedListener.ExitMacroRulesDefinition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRustParserVisitor<TResult> typedVisitor = visitor as IRustParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMacroRulesDefinition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MacroRulesDefinitionContext macroRulesDefinition() {
		MacroRulesDefinitionContext _localctx = new MacroRulesDefinitionContext(Context, State);
		EnterRule(_localctx, 12, RULE_macroRulesDefinition);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 488;
			Match(KW_MACRORULES);
			State = 489;
			Match(NOT);
			State = 490;
			identifier();
			State = 491;
			macroRulesDef();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MacroRulesDefContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(RustParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public MacroRulesContext macroRules() {
			return GetRuleContext<MacroRulesContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(RustParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(RustParser.SEMI, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LSQUAREBRACKET() { return GetToken(RustParser.LSQUAREBRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RSQUAREBRACKET() { return GetToken(RustParser.RSQUAREBRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LCURLYBRACE() { return GetToken(RustParser.LCURLYBRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RCURLYBRACE() { return GetToken(RustParser.RCURLYBRACE, 0); }
		public MacroRulesDefContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_macroRulesDef; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRustParserListener typedListener = listener as IRustParserListener;
			if (typedListener != null) typedListener.EnterMacroRulesDef(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRustParserListener typedListener = listener as IRustParserListener;
			if (typedListener != null) typedListener.ExitMacroRulesDef(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRustParserVisitor<TResult> typedVisitor = visitor as IRustParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMacroRulesDef(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MacroRulesDefContext macroRulesDef() {
		MacroRulesDefContext _localctx = new MacroRulesDefContext(Context, State);
		EnterRule(_localctx, 14, RULE_macroRulesDef);
		try {
			State = 507;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case LPAREN:
				EnterOuterAlt(_localctx, 1);
				{
				State = 493;
				Match(LPAREN);
				State = 494;
				macroRules();
				State = 495;
				Match(RPAREN);
				State = 496;
				Match(SEMI);
				}
				break;
			case LSQUAREBRACKET:
				EnterOuterAlt(_localctx, 2);
				{
				State = 498;
				Match(LSQUAREBRACKET);
				State = 499;
				macroRules();
				State = 500;
				Match(RSQUAREBRACKET);
				State = 501;
				Match(SEMI);
				}
				break;
			case LCURLYBRACE:
				EnterOuterAlt(_localctx, 3);
				{
				State = 503;
				Match(LCURLYBRACE);
				State = 504;
				macroRules();
				State = 505;
				Match(RCURLYBRACE);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MacroRulesContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public MacroRuleContext[] macroRule() {
			return GetRuleContexts<MacroRuleContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public MacroRuleContext macroRule(int i) {
			return GetRuleContext<MacroRuleContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SEMI() { return GetTokens(RustParser.SEMI); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI(int i) {
			return GetToken(RustParser.SEMI, i);
		}
		public MacroRulesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_macroRules; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRustParserListener typedListener = listener as IRustParserListener;
			if (typedListener != null) typedListener.EnterMacroRules(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRustParserListener typedListener = listener as IRustParserListener;
			if (typedListener != null) typedListener.ExitMacroRules(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRustParserVisitor<TResult> typedVisitor = visitor as IRustParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMacroRules(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MacroRulesContext macroRules() {
		MacroRulesContext _localctx = new MacroRulesContext(Context, State);
		EnterRule(_localctx, 16, RULE_macroRules);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 509;
			macroRule();
			State = 514;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,14,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 510;
					Match(SEMI);
					State = 511;
					macroRule();
					}
					} 
				}
				State = 516;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,14,Context);
			}
			State = 518;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==SEMI) {
				{
				State = 517;
				Match(SEMI);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MacroRuleContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public MacroMatcherContext macroMatcher() {
			return GetRuleContext<MacroMatcherContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FATARROW() { return GetToken(RustParser.FATARROW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public MacroTranscriberContext macroTranscriber() {
			return GetRuleContext<MacroTranscriberContext>(0);
		}
		public MacroRuleContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_macroRule; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRustParserListener typedListener = listener as IRustParserListener;
			if (typedListener != null) typedListener.EnterMacroRule(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRustParserListener typedListener = listener as IRustParserListener;
			if (typedListener != null) typedListener.ExitMacroRule(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRustParserVisitor<TResult> typedVisitor = visitor as IRustParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMacroRule(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MacroRuleContext macroRule() {
		MacroRuleContext _localctx = new MacroRuleContext(Context, State);
		EnterRule(_localctx, 18, RULE_macroRule);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 520;
			macroMatcher();
			State = 521;
			Match(FATARROW);
			State = 522;
			macroTranscriber();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MacroMatcherContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(RustParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(RustParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public MacroMatchContext[] macroMatch() {
			return GetRuleContexts<MacroMatchContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public MacroMatchContext macroMatch(int i) {
			return GetRuleContext<MacroMatchContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LSQUAREBRACKET() { return GetToken(RustParser.LSQUAREBRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RSQUAREBRACKET() { return GetToken(RustParser.RSQUAREBRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LCURLYBRACE() { return GetToken(RustParser.LCURLYBRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RCURLYBRACE() { return GetToken(RustParser.RCURLYBRACE, 0); }
		public MacroMatcherContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_macroMatcher; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRustParserListener typedListener = listener as IRustParserListener;
			if (typedListener != null) typedListener.EnterMacroMatcher(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRustParserListener typedListener = listener as IRustParserListener;
			if (typedListener != null) typedListener.ExitMacroMatcher(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRustParserVisitor<TResult> typedVisitor = visitor as IRustParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMacroMatcher(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MacroMatcherContext macroMatcher() {
		MacroMatcherContext _localctx = new MacroMatcherContext(Context, State);
		EnterRule(_localctx, 20, RULE_macroMatcher);
		int _la;
		try {
			State = 548;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case LPAREN:
				EnterOuterAlt(_localctx, 1);
				{
				State = 524;
				Match(LPAREN);
				State = 528;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << KW_AS) | (1L << KW_BREAK) | (1L << KW_CONST) | (1L << KW_CONTINUE) | (1L << KW_CRATE) | (1L << KW_ELSE) | (1L << KW_ENUM) | (1L << KW_EXTERN) | (1L << KW_FALSE) | (1L << KW_FN) | (1L << KW_FOR) | (1L << KW_IF) | (1L << KW_IMPL) | (1L << KW_IN) | (1L << KW_LET) | (1L << KW_LOOP) | (1L << KW_MATCH) | (1L << KW_MOD) | (1L << KW_MOVE) | (1L << KW_MUT) | (1L << KW_PUB) | (1L << KW_REF) | (1L << KW_RETURN) | (1L << KW_SELFVALUE) | (1L << KW_SELFTYPE) | (1L << KW_STATIC) | (1L << KW_STRUCT) | (1L << KW_SUPER) | (1L << KW_TRAIT) | (1L << KW_TRUE) | (1L << KW_TYPE) | (1L << KW_UNSAFE) | (1L << KW_USE) | (1L << KW_WHERE) | (1L << KW_WHILE) | (1L << KW_ASYNC) | (1L << KW_AWAIT) | (1L << KW_DYN) | (1L << KW_ABSTRACT) | (1L << KW_BECOME) | (1L << KW_BOX) | (1L << KW_DO) | (1L << KW_FINAL) | (1L << KW_MACRO) | (1L << KW_OVERRIDE) | (1L << KW_PRIV) | (1L << KW_TYPEOF) | (1L << KW_UNSIZED) | (1L << KW_VIRTUAL) | (1L << KW_YIELD) | (1L << KW_TRY) | (1L << KW_UNION) | (1L << KW_STATICLIFETIME) | (1L << KW_MACRORULES) | (1L << KW_UNDERLINELIFETIME) | (1L << KW_DOLLARCRATE) | (1L << NON_KEYWORD_IDENTIFIER) | (1L << RAW_IDENTIFIER))) != 0) || ((((_la - 69)) & ~0x3f) == 0 && ((1L << (_la - 69)) & ((1L << (CHAR_LITERAL - 69)) | (1L << (STRING_LITERAL - 69)) | (1L << (RAW_STRING_LITERAL - 69)) | (1L << (BYTE_LITERAL - 69)) | (1L << (BYTE_STRING_LITERAL - 69)) | (1L << (RAW_BYTE_STRING_LITERAL - 69)) | (1L << (INTEGER_LITERAL - 69)) | (1L << (FLOAT_LITERAL - 69)) | (1L << (LIFETIME_OR_LABEL - 69)) | (1L << (PLUS - 69)) | (1L << (MINUS - 69)) | (1L << (STAR - 69)) | (1L << (SLASH - 69)) | (1L << (PERCENT - 69)) | (1L << (CARET - 69)) | (1L << (NOT - 69)) | (1L << (AND - 69)) | (1L << (OR - 69)) | (1L << (ANDAND - 69)) | (1L << (OROR - 69)) | (1L << (PLUSEQ - 69)) | (1L << (MINUSEQ - 69)) | (1L << (STAREQ - 69)) | (1L << (SLASHEQ - 69)) | (1L << (PERCENTEQ - 69)) | (1L << (CARETEQ - 69)) | (1L << (ANDEQ - 69)) | (1L << (OREQ - 69)) | (1L << (SHLEQ - 69)) | (1L << (SHREQ - 69)) | (1L << (EQ - 69)) | (1L << (EQEQ - 69)) | (1L << (NE - 69)) | (1L << (GT - 69)) | (1L << (LT - 69)) | (1L << (GE - 69)) | (1L << (LE - 69)) | (1L << (AT - 69)) | (1L << (UNDERSCORE - 69)) | (1L << (DOT - 69)) | (1L << (DOTDOT - 69)) | (1L << (DOTDOTDOT - 69)) | (1L << (DOTDOTEQ - 69)) | (1L << (COMMA - 69)) | (1L << (SEMI - 69)) | (1L << (COLON - 69)) | (1L << (PATHSEP - 69)) | (1L << (RARROW - 69)) | (1L << (FATARROW - 69)) | (1L << (POUND - 69)) | (1L << (DOLLAR - 69)) | (1L << (QUESTION - 69)) | (1L << (LCURLYBRACE - 69)) | (1L << (LSQUAREBRACKET - 69)) | (1L << (LPAREN - 69)))) != 0)) {
					{
					{
					State = 525;
					macroMatch();
					}
					}
					State = 530;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 531;
				Match(RPAREN);
				}
				break;
			case LSQUAREBRACKET:
				EnterOuterAlt(_localctx, 2);
				{
				State = 532;
				Match(LSQUAREBRACKET);
				State = 536;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << KW_AS) | (1L << KW_BREAK) | (1L << KW_CONST) | (1L << KW_CONTINUE) | (1L << KW_CRATE) | (1L << KW_ELSE) | (1L << KW_ENUM) | (1L << KW_EXTERN) | (1L << KW_FALSE) | (1L << KW_FN) | (1L << KW_FOR) | (1L << KW_IF) | (1L << KW_IMPL) | (1L << KW_IN) | (1L << KW_LET) | (1L << KW_LOOP) | (1L << KW_MATCH) | (1L << KW_MOD) | (1L << KW_MOVE) | (1L << KW_MUT) | (1L << KW_PUB) | (1L << KW_REF) | (1L << KW_RETURN) | (1L << KW_SELFVALUE) | (1L << KW_SELFTYPE) | (1L << KW_STATIC) | (1L << KW_STRUCT) | (1L << KW_SUPER) | (1L << KW_TRAIT) | (1L << KW_TRUE) | (1L << KW_TYPE) | (1L << KW_UNSAFE) | (1L << KW_USE) | (1L << KW_WHERE) | (1L << KW_WHILE) | (1L << KW_ASYNC) | (1L << KW_AWAIT) | (1L << KW_DYN) | (1L << KW_ABSTRACT) | (1L << KW_BECOME) | (1L << KW_BOX) | (1L << KW_DO) | (1L << KW_FINAL) | (1L << KW_MACRO) | (1L << KW_OVERRIDE) | (1L << KW_PRIV) | (1L << KW_TYPEOF) | (1L << KW_UNSIZED) | (1L << KW_VIRTUAL) | (1L << KW_YIELD) | (1L << KW_TRY) | (1L << KW_UNION) | (1L << KW_STATICLIFETIME) | (1L << KW_MACRORULES) | (1L << KW_UNDERLINELIFETIME) | (1L << KW_DOLLARCRATE) | (1L << NON_KEYWORD_IDENTIFIER) | (1L << RAW_IDENTIFIER))) != 0) || ((((_la - 69)) & ~0x3f) == 0 && ((1L << (_la - 69)) & ((1L << (CHAR_LITERAL - 69)) | (1L << (STRING_LITERAL - 69)) | (1L << (RAW_STRING_LITERAL - 69)) | (1L << (BYTE_LITERAL - 69)) | (1L << (BYTE_STRING_LITERAL - 69)) | (1L << (RAW_BYTE_STRING_LITERAL - 69)) | (1L << (INTEGER_LITERAL - 69)) | (1L << (FLOAT_LITERAL - 69)) | (1L << (LIFETIME_OR_LABEL - 69)) | (1L << (PLUS - 69)) | (1L << (MINUS - 69)) | (1L << (STAR - 69)) | (1L << (SLASH - 69)) | (1L << (PERCENT - 69)) | (1L << (CARET - 69)) | (1L << (NOT - 69)) | (1L << (AND - 69)) | (1L << (OR - 69)) | (1L << (ANDAND - 69)) | (1L << (OROR - 69)) | (1L << (PLUSEQ - 69)) | (1L << (MINUSEQ - 69)) | (1L << (STAREQ - 69)) | (1L << (SLASHEQ - 69)) | (1L << (PERCENTEQ - 69)) | (1L << (CARETEQ - 69)) | (1L << (ANDEQ - 69)) | (1L << (OREQ - 69)) | (1L << (SHLEQ - 69)) | (1L << (SHREQ - 69)) | (1L << (EQ - 69)) | (1L << (EQEQ - 69)) | (1L << (NE - 69)) | (1L << (GT - 69)) | (1L << (LT - 69)) | (1L << (GE - 69)) | (1L << (LE - 69)) | (1L << (AT - 69)) | (1L << (UNDERSCORE - 69)) | (1L << (DOT - 69)) | (1L << (DOTDOT - 69)) | (1L << (DOTDOTDOT - 69)) | (1L << (DOTDOTEQ - 69)) | (1L << (COMMA - 69)) | (1L << (SEMI - 69)) | (1L << (COLON - 69)) | (1L << (PATHSEP - 69)) | (1L << (RARROW - 69)) | (1L << (FATARROW - 69)) | (1L << (POUND - 69)) | (1L << (DOLLAR - 69)) | (1L << (QUESTION - 69)) | (1L << (LCURLYBRACE - 69)) | (1L << (LSQUAREBRACKET - 69)) | (1L << (LPAREN - 69)))) != 0)) {
					{
					{
					State = 533;
					macroMatch();
					}
					}
					State = 538;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 539;
				Match(RSQUAREBRACKET);
				}
				break;
			case LCURLYBRACE:
				EnterOuterAlt(_localctx, 3);
				{
				State = 540;
				Match(LCURLYBRACE);
				State = 544;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << KW_AS) | (1L << KW_BREAK) | (1L << KW_CONST) | (1L << KW_CONTINUE) | (1L << KW_CRATE) | (1L << KW_ELSE) | (1L << KW_ENUM) | (1L << KW_EXTERN) | (1L << KW_FALSE) | (1L << KW_FN) | (1L << KW_FOR) | (1L << KW_IF) | (1L << KW_IMPL) | (1L << KW_IN) | (1L << KW_LET) | (1L << KW_LOOP) | (1L << KW_MATCH) | (1L << KW_MOD) | (1L << KW_MOVE) | (1L << KW_MUT) | (1L << KW_PUB) | (1L << KW_REF) | (1L << KW_RETURN) | (1L << KW_SELFVALUE) | (1L << KW_SELFTYPE) | (1L << KW_STATIC) | (1L << KW_STRUCT) | (1L << KW_SUPER) | (1L << KW_TRAIT) | (1L << KW_TRUE) | (1L << KW_TYPE) | (1L << KW_UNSAFE) | (1L << KW_USE) | (1L << KW_WHERE) | (1L << KW_WHILE) | (1L << KW_ASYNC) | (1L << KW_AWAIT) | (1L << KW_DYN) | (1L << KW_ABSTRACT) | (1L << KW_BECOME) | (1L << KW_BOX) | (1L << KW_DO) | (1L << KW_FINAL) | (1L << KW_MACRO) | (1L << KW_OVERRIDE) | (1L << KW_PRIV) | (1L << KW_TYPEOF) | (1L << KW_UNSIZED) | (1L << KW_VIRTUAL) | (1L << KW_YIELD) | (1L << KW_TRY) | (1L << KW_UNION) | (1L << KW_STATICLIFETIME) | (1L << KW_MACRORULES) | (1L << KW_UNDERLINELIFETIME) | (1L << KW_DOLLARCRATE) | (1L << NON_KEYWORD_IDENTIFIER) | (1L << RAW_IDENTIFIER))) != 0) || ((((_la - 69)) & ~0x3f) == 0 && ((1L << (_la - 69)) & ((1L << (CHAR_LITERAL - 69)) | (1L << (STRING_LITERAL - 69)) | (1L << (RAW_STRING_LITERAL - 69)) | (1L << (BYTE_LITERAL - 69)) | (1L << (BYTE_STRING_LITERAL - 69)) | (1L << (RAW_BYTE_STRING_LITERAL - 69)) | (1L << (INTEGER_LITERAL - 69)) | (1L << (FLOAT_LITERAL - 69)) | (1L << (LIFETIME_OR_LABEL - 69)) | (1L << (PLUS - 69)) | (1L << (MINUS - 69)) | (1L << (STAR - 69)) | (1L << (SLASH - 69)) | (1L << (PERCENT - 69)) | (1L << (CARET - 69)) | (1L << (NOT - 69)) | (1L << (AND - 69)) | (1L << (OR - 69)) | (1L << (ANDAND - 69)) | (1L << (OROR - 69)) | (1L << (PLUSEQ - 69)) | (1L << (MINUSEQ - 69)) | (1L << (STAREQ - 69)) | (1L << (SLASHEQ - 69)) | (1L << (PERCENTEQ - 69)) | (1L << (CARETEQ - 69)) | (1L << (ANDEQ - 69)) | (1L << (OREQ - 69)) | (1L << (SHLEQ - 69)) | (1L << (SHREQ - 69)) | (1L << (EQ - 69)) | (1L << (EQEQ - 69)) | (1L << (NE - 69)) | (1L << (GT - 69)) | (1L << (LT - 69)) | (1L << (GE - 69)) | (1L << (LE - 69)) | (1L << (AT - 69)) | (1L << (UNDERSCORE - 69)) | (1L << (DOT - 69)) | (1L << (DOTDOT - 69)) | (1L << (DOTDOTDOT - 69)) | (1L << (DOTDOTEQ - 69)) | (1L << (COMMA - 69)) | (1L << (SEMI - 69)) | (1L << (COLON - 69)) | (1L << (PATHSEP - 69)) | (1L << (RARROW - 69)) | (1L << (FATARROW - 69)) | (1L << (POUND - 69)) | (1L << (DOLLAR - 69)) | (1L << (QUESTION - 69)) | (1L << (LCURLYBRACE - 69)) | (1L << (LSQUAREBRACKET - 69)) | (1L << (LPAREN - 69)))) != 0)) {
					{
					{
					State = 541;
					macroMatch();
					}
					}
					State = 546;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 547;
				Match(RCURLYBRACE);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MacroMatchContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public MacroMatchTokenContext[] macroMatchToken() {
			return GetRuleContexts<MacroMatchTokenContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public MacroMatchTokenContext macroMatchToken(int i) {
			return GetRuleContext<MacroMatchTokenContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MacroMatcherContext macroMatcher() {
			return GetRuleContext<MacroMatcherContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOLLAR() { return GetToken(RustParser.DOLLAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(RustParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public MacroFragSpecContext macroFragSpec() {
			return GetRuleContext<MacroFragSpecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_SELFVALUE() { return GetToken(RustParser.KW_SELFVALUE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(RustParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(RustParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public MacroRepOpContext macroRepOp() {
			return GetRuleContext<MacroRepOpContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MacroMatchContext[] macroMatch() {
			return GetRuleContexts<MacroMatchContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public MacroMatchContext macroMatch(int i) {
			return GetRuleContext<MacroMatchContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MacroRepSepContext macroRepSep() {
			return GetRuleContext<MacroRepSepContext>(0);
		}
		public MacroMatchContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_macroMatch; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRustParserListener typedListener = listener as IRustParserListener;
			if (typedListener != null) typedListener.EnterMacroMatch(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRustParserListener typedListener = listener as IRustParserListener;
			if (typedListener != null) typedListener.ExitMacroMatch(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRustParserVisitor<TResult> typedVisitor = visitor as IRustParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMacroMatch(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MacroMatchContext macroMatch() {
		MacroMatchContext _localctx = new MacroMatchContext(Context, State);
		EnterRule(_localctx, 22, RULE_macroMatch);
		int _la;
		try {
			int _alt;
			State = 576;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,24,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 551;
				ErrorHandler.Sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						State = 550;
						macroMatchToken();
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 553;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,20,Context);
				} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 555;
				macroMatcher();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 556;
				Match(DOLLAR);
				State = 559;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case KW_MACRORULES:
				case NON_KEYWORD_IDENTIFIER:
				case RAW_IDENTIFIER:
					{
					State = 557;
					identifier();
					}
					break;
				case KW_SELFVALUE:
					{
					State = 558;
					Match(KW_SELFVALUE);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 561;
				Match(COLON);
				State = 562;
				macroFragSpec();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 563;
				Match(DOLLAR);
				State = 564;
				Match(LPAREN);
				State = 566;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 565;
					macroMatch();
					}
					}
					State = 568;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << KW_AS) | (1L << KW_BREAK) | (1L << KW_CONST) | (1L << KW_CONTINUE) | (1L << KW_CRATE) | (1L << KW_ELSE) | (1L << KW_ENUM) | (1L << KW_EXTERN) | (1L << KW_FALSE) | (1L << KW_FN) | (1L << KW_FOR) | (1L << KW_IF) | (1L << KW_IMPL) | (1L << KW_IN) | (1L << KW_LET) | (1L << KW_LOOP) | (1L << KW_MATCH) | (1L << KW_MOD) | (1L << KW_MOVE) | (1L << KW_MUT) | (1L << KW_PUB) | (1L << KW_REF) | (1L << KW_RETURN) | (1L << KW_SELFVALUE) | (1L << KW_SELFTYPE) | (1L << KW_STATIC) | (1L << KW_STRUCT) | (1L << KW_SUPER) | (1L << KW_TRAIT) | (1L << KW_TRUE) | (1L << KW_TYPE) | (1L << KW_UNSAFE) | (1L << KW_USE) | (1L << KW_WHERE) | (1L << KW_WHILE) | (1L << KW_ASYNC) | (1L << KW_AWAIT) | (1L << KW_DYN) | (1L << KW_ABSTRACT) | (1L << KW_BECOME) | (1L << KW_BOX) | (1L << KW_DO) | (1L << KW_FINAL) | (1L << KW_MACRO) | (1L << KW_OVERRIDE) | (1L << KW_PRIV) | (1L << KW_TYPEOF) | (1L << KW_UNSIZED) | (1L << KW_VIRTUAL) | (1L << KW_YIELD) | (1L << KW_TRY) | (1L << KW_UNION) | (1L << KW_STATICLIFETIME) | (1L << KW_MACRORULES) | (1L << KW_UNDERLINELIFETIME) | (1L << KW_DOLLARCRATE) | (1L << NON_KEYWORD_IDENTIFIER) | (1L << RAW_IDENTIFIER))) != 0) || ((((_la - 69)) & ~0x3f) == 0 && ((1L << (_la - 69)) & ((1L << (CHAR_LITERAL - 69)) | (1L << (STRING_LITERAL - 69)) | (1L << (RAW_STRING_LITERAL - 69)) | (1L << (BYTE_LITERAL - 69)) | (1L << (BYTE_STRING_LITERAL - 69)) | (1L << (RAW_BYTE_STRING_LITERAL - 69)) | (1L << (INTEGER_LITERAL - 69)) | (1L << (FLOAT_LITERAL - 69)) | (1L << (LIFETIME_OR_LABEL - 69)) | (1L << (PLUS - 69)) | (1L << (MINUS - 69)) | (1L << (STAR - 69)) | (1L << (SLASH - 69)) | (1L << (PERCENT - 69)) | (1L << (CARET - 69)) | (1L << (NOT - 69)) | (1L << (AND - 69)) | (1L << (OR - 69)) | (1L << (ANDAND - 69)) | (1L << (OROR - 69)) | (1L << (PLUSEQ - 69)) | (1L << (MINUSEQ - 69)) | (1L << (STAREQ - 69)) | (1L << (SLASHEQ - 69)) | (1L << (PERCENTEQ - 69)) | (1L << (CARETEQ - 69)) | (1L << (ANDEQ - 69)) | (1L << (OREQ - 69)) | (1L << (SHLEQ - 69)) | (1L << (SHREQ - 69)) | (1L << (EQ - 69)) | (1L << (EQEQ - 69)) | (1L << (NE - 69)) | (1L << (GT - 69)) | (1L << (LT - 69)) | (1L << (GE - 69)) | (1L << (LE - 69)) | (1L << (AT - 69)) | (1L << (UNDERSCORE - 69)) | (1L << (DOT - 69)) | (1L << (DOTDOT - 69)) | (1L << (DOTDOTDOT - 69)) | (1L << (DOTDOTEQ - 69)) | (1L << (COMMA - 69)) | (1L << (SEMI - 69)) | (1L << (COLON - 69)) | (1L << (PATHSEP - 69)) | (1L << (RARROW - 69)) | (1L << (FATARROW - 69)) | (1L << (POUND - 69)) | (1L << (DOLLAR - 69)) | (1L << (QUESTION - 69)) | (1L << (LCURLYBRACE - 69)) | (1L << (LSQUAREBRACKET - 69)) | (1L << (LPAREN - 69)))) != 0) );
				State = 570;
				Match(RPAREN);
				State = 572;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << KW_AS) | (1L << KW_BREAK) | (1L << KW_CONST) | (1L << KW_CONTINUE) | (1L << KW_CRATE) | (1L << KW_ELSE) | (1L << KW_ENUM) | (1L << KW_EXTERN) | (1L << KW_FALSE) | (1L << KW_FN) | (1L << KW_FOR) | (1L << KW_IF) | (1L << KW_IMPL) | (1L << KW_IN) | (1L << KW_LET) | (1L << KW_LOOP) | (1L << KW_MATCH) | (1L << KW_MOD) | (1L << KW_MOVE) | (1L << KW_MUT) | (1L << KW_PUB) | (1L << KW_REF) | (1L << KW_RETURN) | (1L << KW_SELFVALUE) | (1L << KW_SELFTYPE) | (1L << KW_STATIC) | (1L << KW_STRUCT) | (1L << KW_SUPER) | (1L << KW_TRAIT) | (1L << KW_TRUE) | (1L << KW_TYPE) | (1L << KW_UNSAFE) | (1L << KW_USE) | (1L << KW_WHERE) | (1L << KW_WHILE) | (1L << KW_ASYNC) | (1L << KW_AWAIT) | (1L << KW_DYN) | (1L << KW_ABSTRACT) | (1L << KW_BECOME) | (1L << KW_BOX) | (1L << KW_DO) | (1L << KW_FINAL) | (1L << KW_MACRO) | (1L << KW_OVERRIDE) | (1L << KW_PRIV) | (1L << KW_TYPEOF) | (1L << KW_UNSIZED) | (1L << KW_VIRTUAL) | (1L << KW_YIELD) | (1L << KW_TRY) | (1L << KW_UNION) | (1L << KW_STATICLIFETIME) | (1L << KW_MACRORULES) | (1L << KW_UNDERLINELIFETIME) | (1L << KW_DOLLARCRATE) | (1L << NON_KEYWORD_IDENTIFIER) | (1L << RAW_IDENTIFIER))) != 0) || ((((_la - 69)) & ~0x3f) == 0 && ((1L << (_la - 69)) & ((1L << (CHAR_LITERAL - 69)) | (1L << (STRING_LITERAL - 69)) | (1L << (RAW_STRING_LITERAL - 69)) | (1L << (BYTE_LITERAL - 69)) | (1L << (BYTE_STRING_LITERAL - 69)) | (1L << (RAW_BYTE_STRING_LITERAL - 69)) | (1L << (INTEGER_LITERAL - 69)) | (1L << (FLOAT_LITERAL - 69)) | (1L << (LIFETIME_OR_LABEL - 69)) | (1L << (MINUS - 69)) | (1L << (SLASH - 69)) | (1L << (PERCENT - 69)) | (1L << (CARET - 69)) | (1L << (NOT - 69)) | (1L << (AND - 69)) | (1L << (OR - 69)) | (1L << (ANDAND - 69)) | (1L << (OROR - 69)) | (1L << (PLUSEQ - 69)) | (1L << (MINUSEQ - 69)) | (1L << (STAREQ - 69)) | (1L << (SLASHEQ - 69)) | (1L << (PERCENTEQ - 69)) | (1L << (CARETEQ - 69)) | (1L << (ANDEQ - 69)) | (1L << (OREQ - 69)) | (1L << (SHLEQ - 69)) | (1L << (SHREQ - 69)) | (1L << (EQ - 69)) | (1L << (EQEQ - 69)) | (1L << (NE - 69)) | (1L << (GT - 69)) | (1L << (LT - 69)) | (1L << (GE - 69)) | (1L << (LE - 69)) | (1L << (AT - 69)) | (1L << (UNDERSCORE - 69)) | (1L << (DOT - 69)) | (1L << (DOTDOT - 69)) | (1L << (DOTDOTDOT - 69)) | (1L << (DOTDOTEQ - 69)) | (1L << (COMMA - 69)) | (1L << (SEMI - 69)) | (1L << (COLON - 69)) | (1L << (PATHSEP - 69)) | (1L << (RARROW - 69)) | (1L << (FATARROW - 69)) | (1L << (POUND - 69)) | (1L << (DOLLAR - 69)))) != 0)) {
					{
					State = 571;
					macroRepSep();
					}
				}

				State = 574;
				macroRepOp();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MacroMatchTokenContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public MacroIdentifierLikeTokenContext macroIdentifierLikeToken() {
			return GetRuleContext<MacroIdentifierLikeTokenContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MacroLiteralTokenContext macroLiteralToken() {
			return GetRuleContext<MacroLiteralTokenContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MacroPunctuationTokenContext macroPunctuationToken() {
			return GetRuleContext<MacroPunctuationTokenContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MacroRepOpContext macroRepOp() {
			return GetRuleContext<MacroRepOpContext>(0);
		}
		public MacroMatchTokenContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_macroMatchToken; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRustParserListener typedListener = listener as IRustParserListener;
			if (typedListener != null) typedListener.EnterMacroMatchToken(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRustParserListener typedListener = listener as IRustParserListener;
			if (typedListener != null) typedListener.ExitMacroMatchToken(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRustParserVisitor<TResult> typedVisitor = visitor as IRustParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMacroMatchToken(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MacroMatchTokenContext macroMatchToken() {
		MacroMatchTokenContext _localctx = new MacroMatchTokenContext(Context, State);
		EnterRule(_localctx, 24, RULE_macroMatchToken);
		try {
			State = 582;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,25,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 578;
				macroIdentifierLikeToken();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 579;
				macroLiteralToken();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 580;
				macroPunctuationToken();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 581;
				macroRepOp();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MacroFragSpecContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public MacroFragSpecContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_macroFragSpec; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRustParserListener typedListener = listener as IRustParserListener;
			if (typedListener != null) typedListener.EnterMacroFragSpec(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRustParserListener typedListener = listener as IRustParserListener;
			if (typedListener != null) typedListener.ExitMacroFragSpec(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRustParserVisitor<TResult> typedVisitor = visitor as IRustParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMacroFragSpec(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MacroFragSpecContext macroFragSpec() {
		MacroFragSpecContext _localctx = new MacroFragSpecContext(Context, State);
		EnterRule(_localctx, 26, RULE_macroFragSpec);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 584;
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MacroRepSepContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public MacroIdentifierLikeTokenContext macroIdentifierLikeToken() {
			return GetRuleContext<MacroIdentifierLikeTokenContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MacroLiteralTokenContext macroLiteralToken() {
			return GetRuleContext<MacroLiteralTokenContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MacroPunctuationTokenContext macroPunctuationToken() {
			return GetRuleContext<MacroPunctuationTokenContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOLLAR() { return GetToken(RustParser.DOLLAR, 0); }
		public MacroRepSepContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_macroRepSep; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRustParserListener typedListener = listener as IRustParserListener;
			if (typedListener != null) typedListener.EnterMacroRepSep(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRustParserListener typedListener = listener as IRustParserListener;
			if (typedListener != null) typedListener.ExitMacroRepSep(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRustParserVisitor<TResult> typedVisitor = visitor as IRustParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMacroRepSep(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MacroRepSepContext macroRepSep() {
		MacroRepSepContext _localctx = new MacroRepSepContext(Context, State);
		EnterRule(_localctx, 28, RULE_macroRepSep);
		try {
			State = 590;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,26,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 586;
				macroIdentifierLikeToken();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 587;
				macroLiteralToken();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 588;
				macroPunctuationToken();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 589;
				Match(DOLLAR);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MacroRepOpContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STAR() { return GetToken(RustParser.STAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PLUS() { return GetToken(RustParser.PLUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode QUESTION() { return GetToken(RustParser.QUESTION, 0); }
		public MacroRepOpContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_macroRepOp; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRustParserListener typedListener = listener as IRustParserListener;
			if (typedListener != null) typedListener.EnterMacroRepOp(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRustParserListener typedListener = listener as IRustParserListener;
			if (typedListener != null) typedListener.ExitMacroRepOp(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRustParserVisitor<TResult> typedVisitor = visitor as IRustParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMacroRepOp(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MacroRepOpContext macroRepOp() {
		MacroRepOpContext _localctx = new MacroRepOpContext(Context, State);
		EnterRule(_localctx, 30, RULE_macroRepOp);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 592;
			_la = TokenStream.LA(1);
			if ( !(((((_la - 82)) & ~0x3f) == 0 && ((1L << (_la - 82)) & ((1L << (PLUS - 82)) | (1L << (STAR - 82)) | (1L << (QUESTION - 82)))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MacroTranscriberContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public DelimTokenTreeContext delimTokenTree() {
			return GetRuleContext<DelimTokenTreeContext>(0);
		}
		public MacroTranscriberContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_macroTranscriber; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRustParserListener typedListener = listener as IRustParserListener;
			if (typedListener != null) typedListener.EnterMacroTranscriber(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRustParserListener typedListener = listener as IRustParserListener;
			if (typedListener != null) typedListener.ExitMacroTranscriber(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRustParserVisitor<TResult> typedVisitor = visitor as IRustParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMacroTranscriber(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MacroTranscriberContext macroTranscriber() {
		MacroTranscriberContext _localctx = new MacroTranscriberContext(Context, State);
		EnterRule(_localctx, 32, RULE_macroTranscriber);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 594;
			delimTokenTree();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ItemContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public VisItemContext visItem() {
			return GetRuleContext<VisItemContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MacroItemContext macroItem() {
			return GetRuleContext<MacroItemContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public OuterAttributeContext[] outerAttribute() {
			return GetRuleContexts<OuterAttributeContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public OuterAttributeContext outerAttribute(int i) {
			return GetRuleContext<OuterAttributeContext>(i);
		}
		public ItemContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_item; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRustParserListener typedListener = listener as IRustParserListener;
			if (typedListener != null) typedListener.EnterItem(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRustParserListener typedListener = listener as IRustParserListener;
			if (typedListener != null) typedListener.ExitItem(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRustParserVisitor<TResult> typedVisitor = visitor as IRustParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitItem(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ItemContext item() {
		ItemContext _localctx = new ItemContext(Context, State);
		EnterRule(_localctx, 34, RULE_item);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 599;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==POUND) {
				{
				{
				State = 596;
				outerAttribute();
				}
				}
				State = 601;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 604;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case KW_CONST:
			case KW_ENUM:
			case KW_EXTERN:
			case KW_FN:
			case KW_IMPL:
			case KW_MOD:
			case KW_PUB:
			case KW_STATIC:
			case KW_STRUCT:
			case KW_TRAIT:
			case KW_TYPE:
			case KW_UNSAFE:
			case KW_USE:
			case KW_ASYNC:
			case KW_UNION:
				{
				State = 602;
				visItem();
				}
				break;
			case KW_CRATE:
			case KW_SELFVALUE:
			case KW_SUPER:
			case KW_MACRORULES:
			case KW_DOLLARCRATE:
			case NON_KEYWORD_IDENTIFIER:
			case RAW_IDENTIFIER:
			case PATHSEP:
				{
				State = 603;
				macroItem();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VisItemContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ModuleContext module() {
			return GetRuleContext<ModuleContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExternCrateContext externCrate() {
			return GetRuleContext<ExternCrateContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public UseDeclarationContext useDeclaration() {
			return GetRuleContext<UseDeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Function_Context function_() {
			return GetRuleContext<Function_Context>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeAliasContext typeAlias() {
			return GetRuleContext<TypeAliasContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Struct_Context struct_() {
			return GetRuleContext<Struct_Context>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public EnumerationContext enumeration() {
			return GetRuleContext<EnumerationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Union_Context union_() {
			return GetRuleContext<Union_Context>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ConstantItemContext constantItem() {
			return GetRuleContext<ConstantItemContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StaticItemContext staticItem() {
			return GetRuleContext<StaticItemContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Trait_Context trait_() {
			return GetRuleContext<Trait_Context>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ImplementationContext implementation() {
			return GetRuleContext<ImplementationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExternBlockContext externBlock() {
			return GetRuleContext<ExternBlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public VisibilityContext visibility() {
			return GetRuleContext<VisibilityContext>(0);
		}
		public VisItemContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_visItem; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRustParserListener typedListener = listener as IRustParserListener;
			if (typedListener != null) typedListener.EnterVisItem(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRustParserListener typedListener = listener as IRustParserListener;
			if (typedListener != null) typedListener.ExitVisItem(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRustParserVisitor<TResult> typedVisitor = visitor as IRustParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVisItem(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VisItemContext visItem() {
		VisItemContext _localctx = new VisItemContext(Context, State);
		EnterRule(_localctx, 36, RULE_visItem);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 607;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==KW_PUB) {
				{
				State = 606;
				visibility();
				}
			}

			State = 622;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,30,Context) ) {
			case 1:
				{
				State = 609;
				module();
				}
				break;
			case 2:
				{
				State = 610;
				externCrate();
				}
				break;
			case 3:
				{
				State = 611;
				useDeclaration();
				}
				break;
			case 4:
				{
				State = 612;
				function_();
				}
				break;
			case 5:
				{
				State = 613;
				typeAlias();
				}
				break;
			case 6:
				{
				State = 614;
				struct_();
				}
				break;
			case 7:
				{
				State = 615;
				enumeration();
				}
				break;
			case 8:
				{
				State = 616;
				union_();
				}
				break;
			case 9:
				{
				State = 617;
				constantItem();
				}
				break;
			case 10:
				{
				State = 618;
				staticItem();
				}
				break;
			case 11:
				{
				State = 619;
				trait_();
				}
				break;
			case 12:
				{
				State = 620;
				implementation();
				}
				break;
			case 13:
				{
				State = 621;
				externBlock();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MacroItemContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public MacroInvocationSemiContext macroInvocationSemi() {
			return GetRuleContext<MacroInvocationSemiContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MacroRulesDefinitionContext macroRulesDefinition() {
			return GetRuleContext<MacroRulesDefinitionContext>(0);
		}
		public MacroItemContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_macroItem; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRustParserListener typedListener = listener as IRustParserListener;
			if (typedListener != null) typedListener.EnterMacroItem(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRustParserListener typedListener = listener as IRustParserListener;
			if (typedListener != null) typedListener.ExitMacroItem(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRustParserVisitor<TResult> typedVisitor = visitor as IRustParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMacroItem(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MacroItemContext macroItem() {
		MacroItemContext _localctx = new MacroItemContext(Context, State);
		EnterRule(_localctx, 38, RULE_macroItem);
		try {
			State = 626;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,31,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 624;
				macroInvocationSemi();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 625;
				macroRulesDefinition();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ModuleContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_MOD() { return GetToken(RustParser.KW_MOD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(RustParser.SEMI, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LCURLYBRACE() { return GetToken(RustParser.LCURLYBRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RCURLYBRACE() { return GetToken(RustParser.RCURLYBRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_UNSAFE() { return GetToken(RustParser.KW_UNSAFE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public InnerAttributeContext[] innerAttribute() {
			return GetRuleContexts<InnerAttributeContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public InnerAttributeContext innerAttribute(int i) {
			return GetRuleContext<InnerAttributeContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ItemContext[] item() {
			return GetRuleContexts<ItemContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ItemContext item(int i) {
			return GetRuleContext<ItemContext>(i);
		}
		public ModuleContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_module; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRustParserListener typedListener = listener as IRustParserListener;
			if (typedListener != null) typedListener.EnterModule(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRustParserListener typedListener = listener as IRustParserListener;
			if (typedListener != null) typedListener.ExitModule(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRustParserVisitor<TResult> typedVisitor = visitor as IRustParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitModule(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ModuleContext module() {
		ModuleContext _localctx = new ModuleContext(Context, State);
		EnterRule(_localctx, 40, RULE_module);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 629;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==KW_UNSAFE) {
				{
				State = 628;
				Match(KW_UNSAFE);
				}
			}

			State = 631;
			Match(KW_MOD);
			State = 632;
			identifier();
			State = 648;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case SEMI:
				{
				State = 633;
				Match(SEMI);
				}
				break;
			case LCURLYBRACE:
				{
				State = 634;
				Match(LCURLYBRACE);
				State = 638;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,33,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 635;
						innerAttribute();
						}
						} 
					}
					State = 640;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,33,Context);
				}
				State = 644;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << KW_CONST) | (1L << KW_CRATE) | (1L << KW_ENUM) | (1L << KW_EXTERN) | (1L << KW_FN) | (1L << KW_IMPL) | (1L << KW_MOD) | (1L << KW_PUB) | (1L << KW_SELFVALUE) | (1L << KW_STATIC) | (1L << KW_STRUCT) | (1L << KW_SUPER) | (1L << KW_TRAIT) | (1L << KW_TYPE) | (1L << KW_UNSAFE) | (1L << KW_USE) | (1L << KW_ASYNC) | (1L << KW_UNION) | (1L << KW_MACRORULES) | (1L << KW_DOLLARCRATE) | (1L << NON_KEYWORD_IDENTIFIER) | (1L << RAW_IDENTIFIER))) != 0) || _la==PATHSEP || _la==POUND) {
					{
					{
					State = 641;
					item();
					}
					}
					State = 646;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 647;
				Match(RCURLYBRACE);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExternCrateContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_EXTERN() { return GetToken(RustParser.KW_EXTERN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_CRATE() { return GetToken(RustParser.KW_CRATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public CrateRefContext crateRef() {
			return GetRuleContext<CrateRefContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(RustParser.SEMI, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public AsClauseContext asClause() {
			return GetRuleContext<AsClauseContext>(0);
		}
		public ExternCrateContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_externCrate; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRustParserListener typedListener = listener as IRustParserListener;
			if (typedListener != null) typedListener.EnterExternCrate(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRustParserListener typedListener = listener as IRustParserListener;
			if (typedListener != null) typedListener.ExitExternCrate(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRustParserVisitor<TResult> typedVisitor = visitor as IRustParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExternCrate(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExternCrateContext externCrate() {
		ExternCrateContext _localctx = new ExternCrateContext(Context, State);
		EnterRule(_localctx, 42, RULE_externCrate);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 650;
			Match(KW_EXTERN);
			State = 651;
			Match(KW_CRATE);
			State = 652;
			crateRef();
			State = 654;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==KW_AS) {
				{
				State = 653;
				asClause();
				}
			}

			State = 656;
			Match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CrateRefContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_SELFVALUE() { return GetToken(RustParser.KW_SELFVALUE, 0); }
		public CrateRefContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_crateRef; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRustParserListener typedListener = listener as IRustParserListener;
			if (typedListener != null) typedListener.EnterCrateRef(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRustParserListener typedListener = listener as IRustParserListener;
			if (typedListener != null) typedListener.ExitCrateRef(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRustParserVisitor<TResult> typedVisitor = visitor as IRustParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCrateRef(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CrateRefContext crateRef() {
		CrateRefContext _localctx = new CrateRefContext(Context, State);
		EnterRule(_localctx, 44, RULE_crateRef);
		try {
			State = 660;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case KW_MACRORULES:
			case NON_KEYWORD_IDENTIFIER:
			case RAW_IDENTIFIER:
				EnterOuterAlt(_localctx, 1);
				{
				State = 658;
				identifier();
				}
				break;
			case KW_SELFVALUE:
				EnterOuterAlt(_localctx, 2);
				{
				State = 659;
				Match(KW_SELFVALUE);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AsClauseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_AS() { return GetToken(RustParser.KW_AS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNDERSCORE() { return GetToken(RustParser.UNDERSCORE, 0); }
		public AsClauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_asClause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRustParserListener typedListener = listener as IRustParserListener;
			if (typedListener != null) typedListener.EnterAsClause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRustParserListener typedListener = listener as IRustParserListener;
			if (typedListener != null) typedListener.ExitAsClause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRustParserVisitor<TResult> typedVisitor = visitor as IRustParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAsClause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AsClauseContext asClause() {
		AsClauseContext _localctx = new AsClauseContext(Context, State);
		EnterRule(_localctx, 46, RULE_asClause);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 662;
			Match(KW_AS);
			State = 665;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case KW_MACRORULES:
			case NON_KEYWORD_IDENTIFIER:
			case RAW_IDENTIFIER:
				{
				State = 663;
				identifier();
				}
				break;
			case UNDERSCORE:
				{
				State = 664;
				Match(UNDERSCORE);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UseDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_USE() { return GetToken(RustParser.KW_USE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UseTreeContext useTree() {
			return GetRuleContext<UseTreeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(RustParser.SEMI, 0); }
		public UseDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_useDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRustParserListener typedListener = listener as IRustParserListener;
			if (typedListener != null) typedListener.EnterUseDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRustParserListener typedListener = listener as IRustParserListener;
			if (typedListener != null) typedListener.ExitUseDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRustParserVisitor<TResult> typedVisitor = visitor as IRustParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUseDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UseDeclarationContext useDeclaration() {
		UseDeclarationContext _localctx = new UseDeclarationContext(Context, State);
		EnterRule(_localctx, 48, RULE_useDeclaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 667;
			Match(KW_USE);
			State = 668;
			useTree();
			State = 669;
			Match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UseTreeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STAR() { return GetToken(RustParser.STAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LCURLYBRACE() { return GetToken(RustParser.LCURLYBRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RCURLYBRACE() { return GetToken(RustParser.RCURLYBRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PATHSEP() { return GetToken(RustParser.PATHSEP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UseTreeContext[] useTree() {
			return GetRuleContexts<UseTreeContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public UseTreeContext useTree(int i) {
			return GetRuleContext<UseTreeContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SimplePathContext simplePath() {
			return GetRuleContext<SimplePathContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(RustParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(RustParser.COMMA, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_AS() { return GetToken(RustParser.KW_AS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNDERSCORE() { return GetToken(RustParser.UNDERSCORE, 0); }
		public UseTreeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_useTree; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRustParserListener typedListener = listener as IRustParserListener;
			if (typedListener != null) typedListener.EnterUseTree(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRustParserListener typedListener = listener as IRustParserListener;
			if (typedListener != null) typedListener.ExitUseTree(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRustParserVisitor<TResult> typedVisitor = visitor as IRustParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUseTree(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UseTreeContext useTree() {
		UseTreeContext _localctx = new UseTreeContext(Context, State);
		EnterRule(_localctx, 50, RULE_useTree);
		int _la;
		try {
			int _alt;
			State = 703;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,47,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 675;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << KW_CRATE) | (1L << KW_SELFVALUE) | (1L << KW_SUPER) | (1L << KW_MACRORULES) | (1L << KW_DOLLARCRATE) | (1L << NON_KEYWORD_IDENTIFIER) | (1L << RAW_IDENTIFIER))) != 0) || _la==PATHSEP) {
					{
					State = 672;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,39,Context) ) {
					case 1:
						{
						State = 671;
						simplePath();
						}
						break;
					}
					State = 674;
					Match(PATHSEP);
					}
				}

				State = 693;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case STAR:
					{
					State = 677;
					Match(STAR);
					}
					break;
				case LCURLYBRACE:
					{
					State = 678;
					Match(LCURLYBRACE);
					State = 690;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << KW_CRATE) | (1L << KW_SELFVALUE) | (1L << KW_SUPER) | (1L << KW_MACRORULES) | (1L << KW_DOLLARCRATE) | (1L << NON_KEYWORD_IDENTIFIER) | (1L << RAW_IDENTIFIER))) != 0) || ((((_la - 84)) & ~0x3f) == 0 && ((1L << (_la - 84)) & ((1L << (STAR - 84)) | (1L << (PATHSEP - 84)) | (1L << (LCURLYBRACE - 84)))) != 0)) {
						{
						State = 679;
						useTree();
						State = 684;
						ErrorHandler.Sync(this);
						_alt = Interpreter.AdaptivePredict(TokenStream,41,Context);
						while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
							if ( _alt==1 ) {
								{
								{
								State = 680;
								Match(COMMA);
								State = 681;
								useTree();
								}
								} 
							}
							State = 686;
							ErrorHandler.Sync(this);
							_alt = Interpreter.AdaptivePredict(TokenStream,41,Context);
						}
						State = 688;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if (_la==COMMA) {
							{
							State = 687;
							Match(COMMA);
							}
						}

						}
					}

					State = 692;
					Match(RCURLYBRACE);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 695;
				simplePath();
				State = 701;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==KW_AS) {
					{
					State = 696;
					Match(KW_AS);
					State = 699;
					ErrorHandler.Sync(this);
					switch (TokenStream.LA(1)) {
					case KW_MACRORULES:
					case NON_KEYWORD_IDENTIFIER:
					case RAW_IDENTIFIER:
						{
						State = 697;
						identifier();
						}
						break;
					case UNDERSCORE:
						{
						State = 698;
						Match(UNDERSCORE);
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
				}

				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Function_Context : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FunctionQualifiersContext functionQualifiers() {
			return GetRuleContext<FunctionQualifiersContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_FN() { return GetToken(RustParser.KW_FN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(RustParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(RustParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BlockExpressionContext blockExpression() {
			return GetRuleContext<BlockExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(RustParser.SEMI, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public GenericParamsContext genericParams() {
			return GetRuleContext<GenericParamsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionParametersContext functionParameters() {
			return GetRuleContext<FunctionParametersContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionReturnTypeContext functionReturnType() {
			return GetRuleContext<FunctionReturnTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public WhereClauseContext whereClause() {
			return GetRuleContext<WhereClauseContext>(0);
		}
		public Function_Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_function_; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRustParserListener typedListener = listener as IRustParserListener;
			if (typedListener != null) typedListener.EnterFunction_(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRustParserListener typedListener = listener as IRustParserListener;
			if (typedListener != null) typedListener.ExitFunction_(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRustParserVisitor<TResult> typedVisitor = visitor as IRustParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunction_(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Function_Context function_() {
		Function_Context _localctx = new Function_Context(Context, State);
		EnterRule(_localctx, 52, RULE_function_);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 705;
			functionQualifiers();
			State = 706;
			Match(KW_FN);
			State = 707;
			identifier();
			State = 709;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LT) {
				{
				State = 708;
				genericParams();
				}
			}

			State = 711;
			Match(LPAREN);
			State = 713;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << KW_CRATE) | (1L << KW_EXTERN) | (1L << KW_FALSE) | (1L << KW_FN) | (1L << KW_FOR) | (1L << KW_IMPL) | (1L << KW_MUT) | (1L << KW_REF) | (1L << KW_SELFVALUE) | (1L << KW_SELFTYPE) | (1L << KW_SUPER) | (1L << KW_TRUE) | (1L << KW_UNSAFE) | (1L << KW_DYN) | (1L << KW_STATICLIFETIME) | (1L << KW_MACRORULES) | (1L << KW_UNDERLINELIFETIME) | (1L << KW_DOLLARCRATE) | (1L << NON_KEYWORD_IDENTIFIER) | (1L << RAW_IDENTIFIER))) != 0) || ((((_la - 69)) & ~0x3f) == 0 && ((1L << (_la - 69)) & ((1L << (CHAR_LITERAL - 69)) | (1L << (STRING_LITERAL - 69)) | (1L << (RAW_STRING_LITERAL - 69)) | (1L << (BYTE_LITERAL - 69)) | (1L << (BYTE_STRING_LITERAL - 69)) | (1L << (RAW_BYTE_STRING_LITERAL - 69)) | (1L << (INTEGER_LITERAL - 69)) | (1L << (FLOAT_LITERAL - 69)) | (1L << (LIFETIME_OR_LABEL - 69)) | (1L << (MINUS - 69)) | (1L << (STAR - 69)) | (1L << (NOT - 69)) | (1L << (AND - 69)) | (1L << (OR - 69)) | (1L << (ANDAND - 69)) | (1L << (LT - 69)) | (1L << (UNDERSCORE - 69)) | (1L << (DOTDOT - 69)) | (1L << (DOTDOTDOT - 69)) | (1L << (PATHSEP - 69)) | (1L << (POUND - 69)) | (1L << (QUESTION - 69)) | (1L << (LSQUAREBRACKET - 69)) | (1L << (LPAREN - 69)))) != 0)) {
				{
				State = 712;
				functionParameters();
				}
			}

			State = 715;
			Match(RPAREN);
			State = 717;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==RARROW) {
				{
				State = 716;
				functionReturnType();
				}
			}

			State = 720;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==KW_WHERE) {
				{
				State = 719;
				whereClause();
				}
			}

			State = 724;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case LCURLYBRACE:
				{
				State = 722;
				blockExpression();
				}
				break;
			case SEMI:
				{
				State = 723;
				Match(SEMI);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionQualifiersContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_CONST() { return GetToken(RustParser.KW_CONST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_ASYNC() { return GetToken(RustParser.KW_ASYNC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_UNSAFE() { return GetToken(RustParser.KW_UNSAFE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_EXTERN() { return GetToken(RustParser.KW_EXTERN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public AbiContext abi() {
			return GetRuleContext<AbiContext>(0);
		}
		public FunctionQualifiersContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionQualifiers; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRustParserListener typedListener = listener as IRustParserListener;
			if (typedListener != null) typedListener.EnterFunctionQualifiers(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRustParserListener typedListener = listener as IRustParserListener;
			if (typedListener != null) typedListener.ExitFunctionQualifiers(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRustParserVisitor<TResult> typedVisitor = visitor as IRustParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionQualifiers(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionQualifiersContext functionQualifiers() {
		FunctionQualifiersContext _localctx = new FunctionQualifiersContext(Context, State);
		EnterRule(_localctx, 54, RULE_functionQualifiers);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 727;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==KW_CONST) {
				{
				State = 726;
				Match(KW_CONST);
				}
			}

			State = 730;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==KW_ASYNC) {
				{
				State = 729;
				Match(KW_ASYNC);
				}
			}

			State = 733;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==KW_UNSAFE) {
				{
				State = 732;
				Match(KW_UNSAFE);
				}
			}

			State = 739;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==KW_EXTERN) {
				{
				State = 735;
				Match(KW_EXTERN);
				State = 737;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==STRING_LITERAL || _la==RAW_STRING_LITERAL) {
					{
					State = 736;
					abi();
					}
				}

				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AbiContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_LITERAL() { return GetToken(RustParser.STRING_LITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RAW_STRING_LITERAL() { return GetToken(RustParser.RAW_STRING_LITERAL, 0); }
		public AbiContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_abi; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRustParserListener typedListener = listener as IRustParserListener;
			if (typedListener != null) typedListener.EnterAbi(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRustParserListener typedListener = listener as IRustParserListener;
			if (typedListener != null) typedListener.ExitAbi(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRustParserVisitor<TResult> typedVisitor = visitor as IRustParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAbi(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AbiContext abi() {
		AbiContext _localctx = new AbiContext(Context, State);
		EnterRule(_localctx, 56, RULE_abi);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 741;
			_la = TokenStream.LA(1);
			if ( !(_la==STRING_LITERAL || _la==RAW_STRING_LITERAL) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionParametersContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SelfParamContext selfParam() {
			return GetRuleContext<SelfParamContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(RustParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(RustParser.COMMA, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionParamContext[] functionParam() {
			return GetRuleContexts<FunctionParamContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionParamContext functionParam(int i) {
			return GetRuleContext<FunctionParamContext>(i);
		}
		public FunctionParametersContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionParameters; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRustParserListener typedListener = listener as IRustParserListener;
			if (typedListener != null) typedListener.EnterFunctionParameters(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRustParserListener typedListener = listener as IRustParserListener;
			if (typedListener != null) typedListener.ExitFunctionParameters(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRustParserVisitor<TResult> typedVisitor = visitor as IRustParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionParameters(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionParametersContext functionParameters() {
		FunctionParametersContext _localctx = new FunctionParametersContext(Context, State);
		EnterRule(_localctx, 58, RULE_functionParameters);
		int _la;
		try {
			int _alt;
			State = 763;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,62,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 743;
				selfParam();
				State = 745;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==COMMA) {
					{
					State = 744;
					Match(COMMA);
					}
				}

				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 750;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,59,Context) ) {
				case 1:
					{
					State = 747;
					selfParam();
					State = 748;
					Match(COMMA);
					}
					break;
				}
				State = 752;
				functionParam();
				State = 757;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,60,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 753;
						Match(COMMA);
						State = 754;
						functionParam();
						}
						} 
					}
					State = 759;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,60,Context);
				}
				State = 761;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==COMMA) {
					{
					State = 760;
					Match(COMMA);
					}
				}

				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SelfParamContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ShorthandSelfContext shorthandSelf() {
			return GetRuleContext<ShorthandSelfContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypedSelfContext typedSelf() {
			return GetRuleContext<TypedSelfContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public OuterAttributeContext[] outerAttribute() {
			return GetRuleContexts<OuterAttributeContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public OuterAttributeContext outerAttribute(int i) {
			return GetRuleContext<OuterAttributeContext>(i);
		}
		public SelfParamContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_selfParam; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRustParserListener typedListener = listener as IRustParserListener;
			if (typedListener != null) typedListener.EnterSelfParam(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRustParserListener typedListener = listener as IRustParserListener;
			if (typedListener != null) typedListener.ExitSelfParam(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRustParserVisitor<TResult> typedVisitor = visitor as IRustParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSelfParam(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SelfParamContext selfParam() {
		SelfParamContext _localctx = new SelfParamContext(Context, State);
		EnterRule(_localctx, 60, RULE_selfParam);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 768;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==POUND) {
				{
				{
				State = 765;
				outerAttribute();
				}
				}
				State = 770;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 773;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,64,Context) ) {
			case 1:
				{
				State = 771;
				shorthandSelf();
				}
				break;
			case 2:
				{
				State = 772;
				typedSelf();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ShorthandSelfContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_SELFVALUE() { return GetToken(RustParser.KW_SELFVALUE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AND() { return GetToken(RustParser.AND, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_MUT() { return GetToken(RustParser.KW_MUT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public LifetimeContext lifetime() {
			return GetRuleContext<LifetimeContext>(0);
		}
		public ShorthandSelfContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_shorthandSelf; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRustParserListener typedListener = listener as IRustParserListener;
			if (typedListener != null) typedListener.EnterShorthandSelf(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRustParserListener typedListener = listener as IRustParserListener;
			if (typedListener != null) typedListener.ExitShorthandSelf(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRustParserVisitor<TResult> typedVisitor = visitor as IRustParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitShorthandSelf(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ShorthandSelfContext shorthandSelf() {
		ShorthandSelfContext _localctx = new ShorthandSelfContext(Context, State);
		EnterRule(_localctx, 62, RULE_shorthandSelf);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 779;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==AND) {
				{
				State = 775;
				Match(AND);
				State = 777;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (((((_la - 53)) & ~0x3f) == 0 && ((1L << (_la - 53)) & ((1L << (KW_STATICLIFETIME - 53)) | (1L << (KW_UNDERLINELIFETIME - 53)) | (1L << (LIFETIME_OR_LABEL - 53)))) != 0)) {
					{
					State = 776;
					lifetime();
					}
				}

				}
			}

			State = 782;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==KW_MUT) {
				{
				State = 781;
				Match(KW_MUT);
				}
			}

			State = 784;
			Match(KW_SELFVALUE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypedSelfContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_SELFVALUE() { return GetToken(RustParser.KW_SELFVALUE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(RustParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Type_Context type_() {
			return GetRuleContext<Type_Context>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_MUT() { return GetToken(RustParser.KW_MUT, 0); }
		public TypedSelfContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typedSelf; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRustParserListener typedListener = listener as IRustParserListener;
			if (typedListener != null) typedListener.EnterTypedSelf(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRustParserListener typedListener = listener as IRustParserListener;
			if (typedListener != null) typedListener.ExitTypedSelf(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRustParserVisitor<TResult> typedVisitor = visitor as IRustParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypedSelf(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypedSelfContext typedSelf() {
		TypedSelfContext _localctx = new TypedSelfContext(Context, State);
		EnterRule(_localctx, 64, RULE_typedSelf);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 787;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==KW_MUT) {
				{
				State = 786;
				Match(KW_MUT);
				}
			}

			State = 789;
			Match(KW_SELFVALUE);
			State = 790;
			Match(COLON);
			State = 791;
			type_();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionParamContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FunctionParamPatternContext functionParamPattern() {
			return GetRuleContext<FunctionParamPatternContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOTDOTDOT() { return GetToken(RustParser.DOTDOTDOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Type_Context type_() {
			return GetRuleContext<Type_Context>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public OuterAttributeContext[] outerAttribute() {
			return GetRuleContexts<OuterAttributeContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public OuterAttributeContext outerAttribute(int i) {
			return GetRuleContext<OuterAttributeContext>(i);
		}
		public FunctionParamContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionParam; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRustParserListener typedListener = listener as IRustParserListener;
			if (typedListener != null) typedListener.EnterFunctionParam(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRustParserListener typedListener = listener as IRustParserListener;
			if (typedListener != null) typedListener.ExitFunctionParam(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRustParserVisitor<TResult> typedVisitor = visitor as IRustParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionParam(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionParamContext functionParam() {
		FunctionParamContext _localctx = new FunctionParamContext(Context, State);
		EnterRule(_localctx, 66, RULE_functionParam);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 796;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==POUND) {
				{
				{
				State = 793;
				outerAttribute();
				}
				}
				State = 798;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 802;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,70,Context) ) {
			case 1:
				{
				State = 799;
				functionParamPattern();
				}
				break;
			case 2:
				{
				State = 800;
				Match(DOTDOTDOT);
				}
				break;
			case 3:
				{
				State = 801;
				type_();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionParamPatternContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public PatternContext pattern() {
			return GetRuleContext<PatternContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(RustParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Type_Context type_() {
			return GetRuleContext<Type_Context>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOTDOTDOT() { return GetToken(RustParser.DOTDOTDOT, 0); }
		public FunctionParamPatternContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionParamPattern; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRustParserListener typedListener = listener as IRustParserListener;
			if (typedListener != null) typedListener.EnterFunctionParamPattern(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRustParserListener typedListener = listener as IRustParserListener;
			if (typedListener != null) typedListener.ExitFunctionParamPattern(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRustParserVisitor<TResult> typedVisitor = visitor as IRustParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionParamPattern(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionParamPatternContext functionParamPattern() {
		FunctionParamPatternContext _localctx = new FunctionParamPatternContext(Context, State);
		EnterRule(_localctx, 68, RULE_functionParamPattern);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 804;
			pattern();
			State = 805;
			Match(COLON);
			State = 808;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case KW_CRATE:
			case KW_EXTERN:
			case KW_FN:
			case KW_FOR:
			case KW_IMPL:
			case KW_SELFVALUE:
			case KW_SELFTYPE:
			case KW_SUPER:
			case KW_UNSAFE:
			case KW_DYN:
			case KW_STATICLIFETIME:
			case KW_MACRORULES:
			case KW_UNDERLINELIFETIME:
			case KW_DOLLARCRATE:
			case NON_KEYWORD_IDENTIFIER:
			case RAW_IDENTIFIER:
			case LIFETIME_OR_LABEL:
			case STAR:
			case NOT:
			case AND:
			case LT:
			case UNDERSCORE:
			case PATHSEP:
			case QUESTION:
			case LSQUAREBRACKET:
			case LPAREN:
				{
				State = 806;
				type_();
				}
				break;
			case DOTDOTDOT:
				{
				State = 807;
				Match(DOTDOTDOT);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionReturnTypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RARROW() { return GetToken(RustParser.RARROW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Type_Context type_() {
			return GetRuleContext<Type_Context>(0);
		}
		public FunctionReturnTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionReturnType; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRustParserListener typedListener = listener as IRustParserListener;
			if (typedListener != null) typedListener.EnterFunctionReturnType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRustParserListener typedListener = listener as IRustParserListener;
			if (typedListener != null) typedListener.ExitFunctionReturnType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRustParserVisitor<TResult> typedVisitor = visitor as IRustParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionReturnType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionReturnTypeContext functionReturnType() {
		FunctionReturnTypeContext _localctx = new FunctionReturnTypeContext(Context, State);
		EnterRule(_localctx, 70, RULE_functionReturnType);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 810;
			Match(RARROW);
			State = 811;
			type_();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeAliasContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_TYPE() { return GetToken(RustParser.KW_TYPE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(RustParser.SEMI, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public GenericParamsContext genericParams() {
			return GetRuleContext<GenericParamsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public WhereClauseContext whereClause() {
			return GetRuleContext<WhereClauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQ() { return GetToken(RustParser.EQ, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Type_Context type_() {
			return GetRuleContext<Type_Context>(0);
		}
		public TypeAliasContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeAlias; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRustParserListener typedListener = listener as IRustParserListener;
			if (typedListener != null) typedListener.EnterTypeAlias(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRustParserListener typedListener = listener as IRustParserListener;
			if (typedListener != null) typedListener.ExitTypeAlias(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRustParserVisitor<TResult> typedVisitor = visitor as IRustParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeAlias(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeAliasContext typeAlias() {
		TypeAliasContext _localctx = new TypeAliasContext(Context, State);
		EnterRule(_localctx, 72, RULE_typeAlias);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 813;
			Match(KW_TYPE);
			State = 814;
			identifier();
			State = 816;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LT) {
				{
				State = 815;
				genericParams();
				}
			}

			State = 819;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==KW_WHERE) {
				{
				State = 818;
				whereClause();
				}
			}

			State = 823;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==EQ) {
				{
				State = 821;
				Match(EQ);
				State = 822;
				type_();
				}
			}

			State = 825;
			Match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Struct_Context : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StructStructContext structStruct() {
			return GetRuleContext<StructStructContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TupleStructContext tupleStruct() {
			return GetRuleContext<TupleStructContext>(0);
		}
		public Struct_Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_struct_; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRustParserListener typedListener = listener as IRustParserListener;
			if (typedListener != null) typedListener.EnterStruct_(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRustParserListener typedListener = listener as IRustParserListener;
			if (typedListener != null) typedListener.ExitStruct_(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRustParserVisitor<TResult> typedVisitor = visitor as IRustParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStruct_(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Struct_Context struct_() {
		Struct_Context _localctx = new Struct_Context(Context, State);
		EnterRule(_localctx, 74, RULE_struct_);
		try {
			State = 829;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,75,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 827;
				structStruct();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 828;
				tupleStruct();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StructStructContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_STRUCT() { return GetToken(RustParser.KW_STRUCT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LCURLYBRACE() { return GetToken(RustParser.LCURLYBRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RCURLYBRACE() { return GetToken(RustParser.RCURLYBRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(RustParser.SEMI, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public GenericParamsContext genericParams() {
			return GetRuleContext<GenericParamsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public WhereClauseContext whereClause() {
			return GetRuleContext<WhereClauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StructFieldsContext structFields() {
			return GetRuleContext<StructFieldsContext>(0);
		}
		public StructStructContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_structStruct; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRustParserListener typedListener = listener as IRustParserListener;
			if (typedListener != null) typedListener.EnterStructStruct(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRustParserListener typedListener = listener as IRustParserListener;
			if (typedListener != null) typedListener.ExitStructStruct(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRustParserVisitor<TResult> typedVisitor = visitor as IRustParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStructStruct(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StructStructContext structStruct() {
		StructStructContext _localctx = new StructStructContext(Context, State);
		EnterRule(_localctx, 76, RULE_structStruct);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 831;
			Match(KW_STRUCT);
			State = 832;
			identifier();
			State = 834;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LT) {
				{
				State = 833;
				genericParams();
				}
			}

			State = 837;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==KW_WHERE) {
				{
				State = 836;
				whereClause();
				}
			}

			State = 845;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case LCURLYBRACE:
				{
				State = 839;
				Match(LCURLYBRACE);
				State = 841;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << KW_PUB) | (1L << KW_MACRORULES) | (1L << NON_KEYWORD_IDENTIFIER) | (1L << RAW_IDENTIFIER))) != 0) || _la==POUND) {
					{
					State = 840;
					structFields();
					}
				}

				State = 843;
				Match(RCURLYBRACE);
				}
				break;
			case SEMI:
				{
				State = 844;
				Match(SEMI);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TupleStructContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_STRUCT() { return GetToken(RustParser.KW_STRUCT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(RustParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(RustParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(RustParser.SEMI, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public GenericParamsContext genericParams() {
			return GetRuleContext<GenericParamsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TupleFieldsContext tupleFields() {
			return GetRuleContext<TupleFieldsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public WhereClauseContext whereClause() {
			return GetRuleContext<WhereClauseContext>(0);
		}
		public TupleStructContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tupleStruct; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRustParserListener typedListener = listener as IRustParserListener;
			if (typedListener != null) typedListener.EnterTupleStruct(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRustParserListener typedListener = listener as IRustParserListener;
			if (typedListener != null) typedListener.ExitTupleStruct(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRustParserVisitor<TResult> typedVisitor = visitor as IRustParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTupleStruct(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TupleStructContext tupleStruct() {
		TupleStructContext _localctx = new TupleStructContext(Context, State);
		EnterRule(_localctx, 78, RULE_tupleStruct);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 847;
			Match(KW_STRUCT);
			State = 848;
			identifier();
			State = 850;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LT) {
				{
				State = 849;
				genericParams();
				}
			}

			State = 852;
			Match(LPAREN);
			State = 854;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << KW_CRATE) | (1L << KW_EXTERN) | (1L << KW_FN) | (1L << KW_FOR) | (1L << KW_IMPL) | (1L << KW_PUB) | (1L << KW_SELFVALUE) | (1L << KW_SELFTYPE) | (1L << KW_SUPER) | (1L << KW_UNSAFE) | (1L << KW_DYN) | (1L << KW_STATICLIFETIME) | (1L << KW_MACRORULES) | (1L << KW_UNDERLINELIFETIME) | (1L << KW_DOLLARCRATE) | (1L << NON_KEYWORD_IDENTIFIER) | (1L << RAW_IDENTIFIER))) != 0) || ((((_la - 81)) & ~0x3f) == 0 && ((1L << (_la - 81)) & ((1L << (LIFETIME_OR_LABEL - 81)) | (1L << (STAR - 81)) | (1L << (NOT - 81)) | (1L << (AND - 81)) | (1L << (LT - 81)) | (1L << (UNDERSCORE - 81)) | (1L << (PATHSEP - 81)) | (1L << (POUND - 81)) | (1L << (QUESTION - 81)) | (1L << (LSQUAREBRACKET - 81)) | (1L << (LPAREN - 81)))) != 0)) {
				{
				State = 853;
				tupleFields();
				}
			}

			State = 856;
			Match(RPAREN);
			State = 858;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==KW_WHERE) {
				{
				State = 857;
				whereClause();
				}
			}

			State = 860;
			Match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StructFieldsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StructFieldContext[] structField() {
			return GetRuleContexts<StructFieldContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StructFieldContext structField(int i) {
			return GetRuleContext<StructFieldContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(RustParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(RustParser.COMMA, i);
		}
		public StructFieldsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_structFields; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRustParserListener typedListener = listener as IRustParserListener;
			if (typedListener != null) typedListener.EnterStructFields(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRustParserListener typedListener = listener as IRustParserListener;
			if (typedListener != null) typedListener.ExitStructFields(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRustParserVisitor<TResult> typedVisitor = visitor as IRustParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStructFields(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StructFieldsContext structFields() {
		StructFieldsContext _localctx = new StructFieldsContext(Context, State);
		EnterRule(_localctx, 80, RULE_structFields);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 862;
			structField();
			State = 867;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,83,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 863;
					Match(COMMA);
					State = 864;
					structField();
					}
					} 
				}
				State = 869;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,83,Context);
			}
			State = 871;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==COMMA) {
				{
				State = 870;
				Match(COMMA);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StructFieldContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(RustParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Type_Context type_() {
			return GetRuleContext<Type_Context>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public OuterAttributeContext[] outerAttribute() {
			return GetRuleContexts<OuterAttributeContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public OuterAttributeContext outerAttribute(int i) {
			return GetRuleContext<OuterAttributeContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public VisibilityContext visibility() {
			return GetRuleContext<VisibilityContext>(0);
		}
		public StructFieldContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_structField; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRustParserListener typedListener = listener as IRustParserListener;
			if (typedListener != null) typedListener.EnterStructField(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRustParserListener typedListener = listener as IRustParserListener;
			if (typedListener != null) typedListener.ExitStructField(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRustParserVisitor<TResult> typedVisitor = visitor as IRustParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStructField(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StructFieldContext structField() {
		StructFieldContext _localctx = new StructFieldContext(Context, State);
		EnterRule(_localctx, 82, RULE_structField);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 876;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==POUND) {
				{
				{
				State = 873;
				outerAttribute();
				}
				}
				State = 878;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 880;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==KW_PUB) {
				{
				State = 879;
				visibility();
				}
			}

			State = 882;
			identifier();
			State = 883;
			Match(COLON);
			State = 884;
			type_();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TupleFieldsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TupleFieldContext[] tupleField() {
			return GetRuleContexts<TupleFieldContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TupleFieldContext tupleField(int i) {
			return GetRuleContext<TupleFieldContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(RustParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(RustParser.COMMA, i);
		}
		public TupleFieldsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tupleFields; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRustParserListener typedListener = listener as IRustParserListener;
			if (typedListener != null) typedListener.EnterTupleFields(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRustParserListener typedListener = listener as IRustParserListener;
			if (typedListener != null) typedListener.ExitTupleFields(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRustParserVisitor<TResult> typedVisitor = visitor as IRustParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTupleFields(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TupleFieldsContext tupleFields() {
		TupleFieldsContext _localctx = new TupleFieldsContext(Context, State);
		EnterRule(_localctx, 84, RULE_tupleFields);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 886;
			tupleField();
			State = 891;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,87,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 887;
					Match(COMMA);
					State = 888;
					tupleField();
					}
					} 
				}
				State = 893;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,87,Context);
			}
			State = 895;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==COMMA) {
				{
				State = 894;
				Match(COMMA);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TupleFieldContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Type_Context type_() {
			return GetRuleContext<Type_Context>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public OuterAttributeContext[] outerAttribute() {
			return GetRuleContexts<OuterAttributeContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public OuterAttributeContext outerAttribute(int i) {
			return GetRuleContext<OuterAttributeContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public VisibilityContext visibility() {
			return GetRuleContext<VisibilityContext>(0);
		}
		public TupleFieldContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tupleField; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRustParserListener typedListener = listener as IRustParserListener;
			if (typedListener != null) typedListener.EnterTupleField(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRustParserListener typedListener = listener as IRustParserListener;
			if (typedListener != null) typedListener.ExitTupleField(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRustParserVisitor<TResult> typedVisitor = visitor as IRustParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTupleField(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TupleFieldContext tupleField() {
		TupleFieldContext _localctx = new TupleFieldContext(Context, State);
		EnterRule(_localctx, 86, RULE_tupleField);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 900;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==POUND) {
				{
				{
				State = 897;
				outerAttribute();
				}
				}
				State = 902;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 904;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==KW_PUB) {
				{
				State = 903;
				visibility();
				}
			}

			State = 906;
			type_();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EnumerationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_ENUM() { return GetToken(RustParser.KW_ENUM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LCURLYBRACE() { return GetToken(RustParser.LCURLYBRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RCURLYBRACE() { return GetToken(RustParser.RCURLYBRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public GenericParamsContext genericParams() {
			return GetRuleContext<GenericParamsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public WhereClauseContext whereClause() {
			return GetRuleContext<WhereClauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public EnumItemsContext enumItems() {
			return GetRuleContext<EnumItemsContext>(0);
		}
		public EnumerationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enumeration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRustParserListener typedListener = listener as IRustParserListener;
			if (typedListener != null) typedListener.EnterEnumeration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRustParserListener typedListener = listener as IRustParserListener;
			if (typedListener != null) typedListener.ExitEnumeration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRustParserVisitor<TResult> typedVisitor = visitor as IRustParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEnumeration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EnumerationContext enumeration() {
		EnumerationContext _localctx = new EnumerationContext(Context, State);
		EnterRule(_localctx, 88, RULE_enumeration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 908;
			Match(KW_ENUM);
			State = 909;
			identifier();
			State = 911;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LT) {
				{
				State = 910;
				genericParams();
				}
			}

			State = 914;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==KW_WHERE) {
				{
				State = 913;
				whereClause();
				}
			}

			State = 916;
			Match(LCURLYBRACE);
			State = 918;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << KW_PUB) | (1L << KW_MACRORULES) | (1L << NON_KEYWORD_IDENTIFIER) | (1L << RAW_IDENTIFIER))) != 0) || _la==POUND) {
				{
				State = 917;
				enumItems();
				}
			}

			State = 920;
			Match(RCURLYBRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EnumItemsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public EnumItemContext[] enumItem() {
			return GetRuleContexts<EnumItemContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public EnumItemContext enumItem(int i) {
			return GetRuleContext<EnumItemContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(RustParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(RustParser.COMMA, i);
		}
		public EnumItemsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enumItems; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRustParserListener typedListener = listener as IRustParserListener;
			if (typedListener != null) typedListener.EnterEnumItems(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRustParserListener typedListener = listener as IRustParserListener;
			if (typedListener != null) typedListener.ExitEnumItems(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRustParserVisitor<TResult> typedVisitor = visitor as IRustParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEnumItems(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EnumItemsContext enumItems() {
		EnumItemsContext _localctx = new EnumItemsContext(Context, State);
		EnterRule(_localctx, 90, RULE_enumItems);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 922;
			enumItem();
			State = 927;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,94,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 923;
					Match(COMMA);
					State = 924;
					enumItem();
					}
					} 
				}
				State = 929;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,94,Context);
			}
			State = 931;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==COMMA) {
				{
				State = 930;
				Match(COMMA);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EnumItemContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public OuterAttributeContext[] outerAttribute() {
			return GetRuleContexts<OuterAttributeContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public OuterAttributeContext outerAttribute(int i) {
			return GetRuleContext<OuterAttributeContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public VisibilityContext visibility() {
			return GetRuleContext<VisibilityContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public EnumItemTupleContext enumItemTuple() {
			return GetRuleContext<EnumItemTupleContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public EnumItemStructContext enumItemStruct() {
			return GetRuleContext<EnumItemStructContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public EnumItemDiscriminantContext enumItemDiscriminant() {
			return GetRuleContext<EnumItemDiscriminantContext>(0);
		}
		public EnumItemContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enumItem; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRustParserListener typedListener = listener as IRustParserListener;
			if (typedListener != null) typedListener.EnterEnumItem(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRustParserListener typedListener = listener as IRustParserListener;
			if (typedListener != null) typedListener.ExitEnumItem(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRustParserVisitor<TResult> typedVisitor = visitor as IRustParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEnumItem(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EnumItemContext enumItem() {
		EnumItemContext _localctx = new EnumItemContext(Context, State);
		EnterRule(_localctx, 92, RULE_enumItem);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 936;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==POUND) {
				{
				{
				State = 933;
				outerAttribute();
				}
				}
				State = 938;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 940;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==KW_PUB) {
				{
				State = 939;
				visibility();
				}
			}

			State = 942;
			identifier();
			State = 946;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case LPAREN:
				{
				State = 943;
				enumItemTuple();
				}
				break;
			case LCURLYBRACE:
				{
				State = 944;
				enumItemStruct();
				}
				break;
			case EQ:
				{
				State = 945;
				enumItemDiscriminant();
				}
				break;
			case COMMA:
			case RCURLYBRACE:
				break;
			default:
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EnumItemTupleContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(RustParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(RustParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TupleFieldsContext tupleFields() {
			return GetRuleContext<TupleFieldsContext>(0);
		}
		public EnumItemTupleContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enumItemTuple; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRustParserListener typedListener = listener as IRustParserListener;
			if (typedListener != null) typedListener.EnterEnumItemTuple(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRustParserListener typedListener = listener as IRustParserListener;
			if (typedListener != null) typedListener.ExitEnumItemTuple(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRustParserVisitor<TResult> typedVisitor = visitor as IRustParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEnumItemTuple(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EnumItemTupleContext enumItemTuple() {
		EnumItemTupleContext _localctx = new EnumItemTupleContext(Context, State);
		EnterRule(_localctx, 94, RULE_enumItemTuple);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 948;
			Match(LPAREN);
			State = 950;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << KW_CRATE) | (1L << KW_EXTERN) | (1L << KW_FN) | (1L << KW_FOR) | (1L << KW_IMPL) | (1L << KW_PUB) | (1L << KW_SELFVALUE) | (1L << KW_SELFTYPE) | (1L << KW_SUPER) | (1L << KW_UNSAFE) | (1L << KW_DYN) | (1L << KW_STATICLIFETIME) | (1L << KW_MACRORULES) | (1L << KW_UNDERLINELIFETIME) | (1L << KW_DOLLARCRATE) | (1L << NON_KEYWORD_IDENTIFIER) | (1L << RAW_IDENTIFIER))) != 0) || ((((_la - 81)) & ~0x3f) == 0 && ((1L << (_la - 81)) & ((1L << (LIFETIME_OR_LABEL - 81)) | (1L << (STAR - 81)) | (1L << (NOT - 81)) | (1L << (AND - 81)) | (1L << (LT - 81)) | (1L << (UNDERSCORE - 81)) | (1L << (PATHSEP - 81)) | (1L << (POUND - 81)) | (1L << (QUESTION - 81)) | (1L << (LSQUAREBRACKET - 81)) | (1L << (LPAREN - 81)))) != 0)) {
				{
				State = 949;
				tupleFields();
				}
			}

			State = 952;
			Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EnumItemStructContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LCURLYBRACE() { return GetToken(RustParser.LCURLYBRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RCURLYBRACE() { return GetToken(RustParser.RCURLYBRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StructFieldsContext structFields() {
			return GetRuleContext<StructFieldsContext>(0);
		}
		public EnumItemStructContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enumItemStruct; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRustParserListener typedListener = listener as IRustParserListener;
			if (typedListener != null) typedListener.EnterEnumItemStruct(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRustParserListener typedListener = listener as IRustParserListener;
			if (typedListener != null) typedListener.ExitEnumItemStruct(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRustParserVisitor<TResult> typedVisitor = visitor as IRustParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEnumItemStruct(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EnumItemStructContext enumItemStruct() {
		EnumItemStructContext _localctx = new EnumItemStructContext(Context, State);
		EnterRule(_localctx, 96, RULE_enumItemStruct);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 954;
			Match(LCURLYBRACE);
			State = 956;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << KW_PUB) | (1L << KW_MACRORULES) | (1L << NON_KEYWORD_IDENTIFIER) | (1L << RAW_IDENTIFIER))) != 0) || _la==POUND) {
				{
				State = 955;
				structFields();
				}
			}

			State = 958;
			Match(RCURLYBRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EnumItemDiscriminantContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQ() { return GetToken(RustParser.EQ, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public EnumItemDiscriminantContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enumItemDiscriminant; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRustParserListener typedListener = listener as IRustParserListener;
			if (typedListener != null) typedListener.EnterEnumItemDiscriminant(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRustParserListener typedListener = listener as IRustParserListener;
			if (typedListener != null) typedListener.ExitEnumItemDiscriminant(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRustParserVisitor<TResult> typedVisitor = visitor as IRustParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEnumItemDiscriminant(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EnumItemDiscriminantContext enumItemDiscriminant() {
		EnumItemDiscriminantContext _localctx = new EnumItemDiscriminantContext(Context, State);
		EnterRule(_localctx, 98, RULE_enumItemDiscriminant);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 960;
			Match(EQ);
			State = 961;
			expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Union_Context : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_UNION() { return GetToken(RustParser.KW_UNION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LCURLYBRACE() { return GetToken(RustParser.LCURLYBRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StructFieldsContext structFields() {
			return GetRuleContext<StructFieldsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RCURLYBRACE() { return GetToken(RustParser.RCURLYBRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public GenericParamsContext genericParams() {
			return GetRuleContext<GenericParamsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public WhereClauseContext whereClause() {
			return GetRuleContext<WhereClauseContext>(0);
		}
		public Union_Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_union_; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRustParserListener typedListener = listener as IRustParserListener;
			if (typedListener != null) typedListener.EnterUnion_(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRustParserListener typedListener = listener as IRustParserListener;
			if (typedListener != null) typedListener.ExitUnion_(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRustParserVisitor<TResult> typedVisitor = visitor as IRustParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnion_(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Union_Context union_() {
		Union_Context _localctx = new Union_Context(Context, State);
		EnterRule(_localctx, 100, RULE_union_);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 963;
			Match(KW_UNION);
			State = 964;
			identifier();
			State = 966;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LT) {
				{
				State = 965;
				genericParams();
				}
			}

			State = 969;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==KW_WHERE) {
				{
				State = 968;
				whereClause();
				}
			}

			State = 971;
			Match(LCURLYBRACE);
			State = 972;
			structFields();
			State = 973;
			Match(RCURLYBRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConstantItemContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_CONST() { return GetToken(RustParser.KW_CONST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(RustParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Type_Context type_() {
			return GetRuleContext<Type_Context>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(RustParser.SEMI, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNDERSCORE() { return GetToken(RustParser.UNDERSCORE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQ() { return GetToken(RustParser.EQ, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ConstantItemContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constantItem; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRustParserListener typedListener = listener as IRustParserListener;
			if (typedListener != null) typedListener.EnterConstantItem(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRustParserListener typedListener = listener as IRustParserListener;
			if (typedListener != null) typedListener.ExitConstantItem(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRustParserVisitor<TResult> typedVisitor = visitor as IRustParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConstantItem(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConstantItemContext constantItem() {
		ConstantItemContext _localctx = new ConstantItemContext(Context, State);
		EnterRule(_localctx, 102, RULE_constantItem);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 975;
			Match(KW_CONST);
			State = 978;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case KW_MACRORULES:
			case NON_KEYWORD_IDENTIFIER:
			case RAW_IDENTIFIER:
				{
				State = 976;
				identifier();
				}
				break;
			case UNDERSCORE:
				{
				State = 977;
				Match(UNDERSCORE);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 980;
			Match(COLON);
			State = 981;
			type_();
			State = 984;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==EQ) {
				{
				State = 982;
				Match(EQ);
				State = 983;
				expression(0);
				}
			}

			State = 986;
			Match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StaticItemContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_STATIC() { return GetToken(RustParser.KW_STATIC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(RustParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Type_Context type_() {
			return GetRuleContext<Type_Context>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(RustParser.SEMI, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_MUT() { return GetToken(RustParser.KW_MUT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQ() { return GetToken(RustParser.EQ, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public StaticItemContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_staticItem; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRustParserListener typedListener = listener as IRustParserListener;
			if (typedListener != null) typedListener.EnterStaticItem(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRustParserListener typedListener = listener as IRustParserListener;
			if (typedListener != null) typedListener.ExitStaticItem(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRustParserVisitor<TResult> typedVisitor = visitor as IRustParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStaticItem(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StaticItemContext staticItem() {
		StaticItemContext _localctx = new StaticItemContext(Context, State);
		EnterRule(_localctx, 104, RULE_staticItem);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 988;
			Match(KW_STATIC);
			State = 990;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==KW_MUT) {
				{
				State = 989;
				Match(KW_MUT);
				}
			}

			State = 992;
			identifier();
			State = 993;
			Match(COLON);
			State = 994;
			type_();
			State = 997;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==EQ) {
				{
				State = 995;
				Match(EQ);
				State = 996;
				expression(0);
				}
			}

			State = 999;
			Match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Trait_Context : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_TRAIT() { return GetToken(RustParser.KW_TRAIT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LCURLYBRACE() { return GetToken(RustParser.LCURLYBRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RCURLYBRACE() { return GetToken(RustParser.RCURLYBRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_UNSAFE() { return GetToken(RustParser.KW_UNSAFE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public GenericParamsContext genericParams() {
			return GetRuleContext<GenericParamsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(RustParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public WhereClauseContext whereClause() {
			return GetRuleContext<WhereClauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public InnerAttributeContext[] innerAttribute() {
			return GetRuleContexts<InnerAttributeContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public InnerAttributeContext innerAttribute(int i) {
			return GetRuleContext<InnerAttributeContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AssociatedItemContext[] associatedItem() {
			return GetRuleContexts<AssociatedItemContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AssociatedItemContext associatedItem(int i) {
			return GetRuleContext<AssociatedItemContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeParamBoundsContext typeParamBounds() {
			return GetRuleContext<TypeParamBoundsContext>(0);
		}
		public Trait_Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_trait_; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRustParserListener typedListener = listener as IRustParserListener;
			if (typedListener != null) typedListener.EnterTrait_(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRustParserListener typedListener = listener as IRustParserListener;
			if (typedListener != null) typedListener.ExitTrait_(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRustParserVisitor<TResult> typedVisitor = visitor as IRustParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTrait_(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Trait_Context trait_() {
		Trait_Context _localctx = new Trait_Context(Context, State);
		EnterRule(_localctx, 106, RULE_trait_);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1002;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==KW_UNSAFE) {
				{
				State = 1001;
				Match(KW_UNSAFE);
				}
			}

			State = 1004;
			Match(KW_TRAIT);
			State = 1005;
			identifier();
			State = 1007;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LT) {
				{
				State = 1006;
				genericParams();
				}
			}

			State = 1013;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==COLON) {
				{
				State = 1009;
				Match(COLON);
				State = 1011;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << KW_CRATE) | (1L << KW_FOR) | (1L << KW_SELFVALUE) | (1L << KW_SELFTYPE) | (1L << KW_SUPER) | (1L << KW_STATICLIFETIME) | (1L << KW_MACRORULES) | (1L << KW_UNDERLINELIFETIME) | (1L << KW_DOLLARCRATE) | (1L << NON_KEYWORD_IDENTIFIER) | (1L << RAW_IDENTIFIER))) != 0) || ((((_la - 81)) & ~0x3f) == 0 && ((1L << (_la - 81)) & ((1L << (LIFETIME_OR_LABEL - 81)) | (1L << (PATHSEP - 81)) | (1L << (QUESTION - 81)) | (1L << (LPAREN - 81)))) != 0)) {
					{
					State = 1010;
					typeParamBounds();
					}
				}

				}
			}

			State = 1016;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==KW_WHERE) {
				{
				State = 1015;
				whereClause();
				}
			}

			State = 1018;
			Match(LCURLYBRACE);
			State = 1022;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,112,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 1019;
					innerAttribute();
					}
					} 
				}
				State = 1024;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,112,Context);
			}
			State = 1028;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << KW_CONST) | (1L << KW_CRATE) | (1L << KW_EXTERN) | (1L << KW_FN) | (1L << KW_PUB) | (1L << KW_SELFVALUE) | (1L << KW_SUPER) | (1L << KW_TYPE) | (1L << KW_UNSAFE) | (1L << KW_ASYNC) | (1L << KW_MACRORULES) | (1L << KW_DOLLARCRATE) | (1L << NON_KEYWORD_IDENTIFIER) | (1L << RAW_IDENTIFIER))) != 0) || _la==PATHSEP || _la==POUND) {
				{
				{
				State = 1025;
				associatedItem();
				}
				}
				State = 1030;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 1031;
			Match(RCURLYBRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ImplementationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public InherentImplContext inherentImpl() {
			return GetRuleContext<InherentImplContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TraitImplContext traitImpl() {
			return GetRuleContext<TraitImplContext>(0);
		}
		public ImplementationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_implementation; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRustParserListener typedListener = listener as IRustParserListener;
			if (typedListener != null) typedListener.EnterImplementation(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRustParserListener typedListener = listener as IRustParserListener;
			if (typedListener != null) typedListener.ExitImplementation(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRustParserVisitor<TResult> typedVisitor = visitor as IRustParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitImplementation(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ImplementationContext implementation() {
		ImplementationContext _localctx = new ImplementationContext(Context, State);
		EnterRule(_localctx, 108, RULE_implementation);
		try {
			State = 1035;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,114,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1033;
				inherentImpl();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1034;
				traitImpl();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InherentImplContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_IMPL() { return GetToken(RustParser.KW_IMPL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Type_Context type_() {
			return GetRuleContext<Type_Context>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LCURLYBRACE() { return GetToken(RustParser.LCURLYBRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RCURLYBRACE() { return GetToken(RustParser.RCURLYBRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public GenericParamsContext genericParams() {
			return GetRuleContext<GenericParamsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public WhereClauseContext whereClause() {
			return GetRuleContext<WhereClauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public InnerAttributeContext[] innerAttribute() {
			return GetRuleContexts<InnerAttributeContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public InnerAttributeContext innerAttribute(int i) {
			return GetRuleContext<InnerAttributeContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AssociatedItemContext[] associatedItem() {
			return GetRuleContexts<AssociatedItemContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AssociatedItemContext associatedItem(int i) {
			return GetRuleContext<AssociatedItemContext>(i);
		}
		public InherentImplContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_inherentImpl; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRustParserListener typedListener = listener as IRustParserListener;
			if (typedListener != null) typedListener.EnterInherentImpl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRustParserListener typedListener = listener as IRustParserListener;
			if (typedListener != null) typedListener.ExitInherentImpl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRustParserVisitor<TResult> typedVisitor = visitor as IRustParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInherentImpl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InherentImplContext inherentImpl() {
		InherentImplContext _localctx = new InherentImplContext(Context, State);
		EnterRule(_localctx, 110, RULE_inherentImpl);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1037;
			Match(KW_IMPL);
			State = 1039;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,115,Context) ) {
			case 1:
				{
				State = 1038;
				genericParams();
				}
				break;
			}
			State = 1041;
			type_();
			State = 1043;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==KW_WHERE) {
				{
				State = 1042;
				whereClause();
				}
			}

			State = 1045;
			Match(LCURLYBRACE);
			State = 1049;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,117,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 1046;
					innerAttribute();
					}
					} 
				}
				State = 1051;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,117,Context);
			}
			State = 1055;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << KW_CONST) | (1L << KW_CRATE) | (1L << KW_EXTERN) | (1L << KW_FN) | (1L << KW_PUB) | (1L << KW_SELFVALUE) | (1L << KW_SUPER) | (1L << KW_TYPE) | (1L << KW_UNSAFE) | (1L << KW_ASYNC) | (1L << KW_MACRORULES) | (1L << KW_DOLLARCRATE) | (1L << NON_KEYWORD_IDENTIFIER) | (1L << RAW_IDENTIFIER))) != 0) || _la==PATHSEP || _la==POUND) {
				{
				{
				State = 1052;
				associatedItem();
				}
				}
				State = 1057;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 1058;
			Match(RCURLYBRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TraitImplContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_IMPL() { return GetToken(RustParser.KW_IMPL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypePathContext typePath() {
			return GetRuleContext<TypePathContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_FOR() { return GetToken(RustParser.KW_FOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Type_Context type_() {
			return GetRuleContext<Type_Context>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LCURLYBRACE() { return GetToken(RustParser.LCURLYBRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RCURLYBRACE() { return GetToken(RustParser.RCURLYBRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_UNSAFE() { return GetToken(RustParser.KW_UNSAFE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public GenericParamsContext genericParams() {
			return GetRuleContext<GenericParamsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT() { return GetToken(RustParser.NOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public WhereClauseContext whereClause() {
			return GetRuleContext<WhereClauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public InnerAttributeContext[] innerAttribute() {
			return GetRuleContexts<InnerAttributeContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public InnerAttributeContext innerAttribute(int i) {
			return GetRuleContext<InnerAttributeContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AssociatedItemContext[] associatedItem() {
			return GetRuleContexts<AssociatedItemContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AssociatedItemContext associatedItem(int i) {
			return GetRuleContext<AssociatedItemContext>(i);
		}
		public TraitImplContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_traitImpl; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRustParserListener typedListener = listener as IRustParserListener;
			if (typedListener != null) typedListener.EnterTraitImpl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRustParserListener typedListener = listener as IRustParserListener;
			if (typedListener != null) typedListener.ExitTraitImpl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRustParserVisitor<TResult> typedVisitor = visitor as IRustParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTraitImpl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TraitImplContext traitImpl() {
		TraitImplContext _localctx = new TraitImplContext(Context, State);
		EnterRule(_localctx, 112, RULE_traitImpl);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1061;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==KW_UNSAFE) {
				{
				State = 1060;
				Match(KW_UNSAFE);
				}
			}

			State = 1063;
			Match(KW_IMPL);
			State = 1065;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LT) {
				{
				State = 1064;
				genericParams();
				}
			}

			State = 1068;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==NOT) {
				{
				State = 1067;
				Match(NOT);
				}
			}

			State = 1070;
			typePath();
			State = 1071;
			Match(KW_FOR);
			State = 1072;
			type_();
			State = 1074;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==KW_WHERE) {
				{
				State = 1073;
				whereClause();
				}
			}

			State = 1076;
			Match(LCURLYBRACE);
			State = 1080;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,123,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 1077;
					innerAttribute();
					}
					} 
				}
				State = 1082;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,123,Context);
			}
			State = 1086;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << KW_CONST) | (1L << KW_CRATE) | (1L << KW_EXTERN) | (1L << KW_FN) | (1L << KW_PUB) | (1L << KW_SELFVALUE) | (1L << KW_SUPER) | (1L << KW_TYPE) | (1L << KW_UNSAFE) | (1L << KW_ASYNC) | (1L << KW_MACRORULES) | (1L << KW_DOLLARCRATE) | (1L << NON_KEYWORD_IDENTIFIER) | (1L << RAW_IDENTIFIER))) != 0) || _la==PATHSEP || _la==POUND) {
				{
				{
				State = 1083;
				associatedItem();
				}
				}
				State = 1088;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 1089;
			Match(RCURLYBRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExternBlockContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_EXTERN() { return GetToken(RustParser.KW_EXTERN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LCURLYBRACE() { return GetToken(RustParser.LCURLYBRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RCURLYBRACE() { return GetToken(RustParser.RCURLYBRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_UNSAFE() { return GetToken(RustParser.KW_UNSAFE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public AbiContext abi() {
			return GetRuleContext<AbiContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public InnerAttributeContext[] innerAttribute() {
			return GetRuleContexts<InnerAttributeContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public InnerAttributeContext innerAttribute(int i) {
			return GetRuleContext<InnerAttributeContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExternalItemContext[] externalItem() {
			return GetRuleContexts<ExternalItemContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExternalItemContext externalItem(int i) {
			return GetRuleContext<ExternalItemContext>(i);
		}
		public ExternBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_externBlock; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRustParserListener typedListener = listener as IRustParserListener;
			if (typedListener != null) typedListener.EnterExternBlock(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRustParserListener typedListener = listener as IRustParserListener;
			if (typedListener != null) typedListener.ExitExternBlock(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRustParserVisitor<TResult> typedVisitor = visitor as IRustParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExternBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExternBlockContext externBlock() {
		ExternBlockContext _localctx = new ExternBlockContext(Context, State);
		EnterRule(_localctx, 114, RULE_externBlock);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1092;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==KW_UNSAFE) {
				{
				State = 1091;
				Match(KW_UNSAFE);
				}
			}

			State = 1094;
			Match(KW_EXTERN);
			State = 1096;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==STRING_LITERAL || _la==RAW_STRING_LITERAL) {
				{
				State = 1095;
				abi();
				}
			}

			State = 1098;
			Match(LCURLYBRACE);
			State = 1102;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,127,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 1099;
					innerAttribute();
					}
					} 
				}
				State = 1104;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,127,Context);
			}
			State = 1108;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << KW_CONST) | (1L << KW_CRATE) | (1L << KW_EXTERN) | (1L << KW_FN) | (1L << KW_PUB) | (1L << KW_SELFVALUE) | (1L << KW_STATIC) | (1L << KW_SUPER) | (1L << KW_UNSAFE) | (1L << KW_ASYNC) | (1L << KW_MACRORULES) | (1L << KW_DOLLARCRATE) | (1L << NON_KEYWORD_IDENTIFIER) | (1L << RAW_IDENTIFIER))) != 0) || _la==PATHSEP || _la==POUND) {
				{
				{
				State = 1105;
				externalItem();
				}
				}
				State = 1110;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 1111;
			Match(RCURLYBRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExternalItemContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public MacroInvocationSemiContext macroInvocationSemi() {
			return GetRuleContext<MacroInvocationSemiContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public OuterAttributeContext[] outerAttribute() {
			return GetRuleContexts<OuterAttributeContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public OuterAttributeContext outerAttribute(int i) {
			return GetRuleContext<OuterAttributeContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StaticItemContext staticItem() {
			return GetRuleContext<StaticItemContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Function_Context function_() {
			return GetRuleContext<Function_Context>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public VisibilityContext visibility() {
			return GetRuleContext<VisibilityContext>(0);
		}
		public ExternalItemContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_externalItem; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRustParserListener typedListener = listener as IRustParserListener;
			if (typedListener != null) typedListener.EnterExternalItem(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRustParserListener typedListener = listener as IRustParserListener;
			if (typedListener != null) typedListener.ExitExternalItem(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRustParserVisitor<TResult> typedVisitor = visitor as IRustParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExternalItem(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExternalItemContext externalItem() {
		ExternalItemContext _localctx = new ExternalItemContext(Context, State);
		EnterRule(_localctx, 116, RULE_externalItem);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1116;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==POUND) {
				{
				{
				State = 1113;
				outerAttribute();
				}
				}
				State = 1118;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 1127;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case KW_CRATE:
			case KW_SELFVALUE:
			case KW_SUPER:
			case KW_MACRORULES:
			case KW_DOLLARCRATE:
			case NON_KEYWORD_IDENTIFIER:
			case RAW_IDENTIFIER:
			case PATHSEP:
				{
				State = 1119;
				macroInvocationSemi();
				}
				break;
			case KW_CONST:
			case KW_EXTERN:
			case KW_FN:
			case KW_PUB:
			case KW_STATIC:
			case KW_UNSAFE:
			case KW_ASYNC:
				{
				State = 1121;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==KW_PUB) {
					{
					State = 1120;
					visibility();
					}
				}

				State = 1125;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case KW_STATIC:
					{
					State = 1123;
					staticItem();
					}
					break;
				case KW_CONST:
				case KW_EXTERN:
				case KW_FN:
				case KW_UNSAFE:
				case KW_ASYNC:
					{
					State = 1124;
					function_();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GenericParamsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LT() { return GetToken(RustParser.LT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GT() { return GetToken(RustParser.GT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public GenericParamContext[] genericParam() {
			return GetRuleContexts<GenericParamContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public GenericParamContext genericParam(int i) {
			return GetRuleContext<GenericParamContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(RustParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(RustParser.COMMA, i);
		}
		public GenericParamsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_genericParams; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRustParserListener typedListener = listener as IRustParserListener;
			if (typedListener != null) typedListener.EnterGenericParams(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRustParserListener typedListener = listener as IRustParserListener;
			if (typedListener != null) typedListener.ExitGenericParams(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRustParserVisitor<TResult> typedVisitor = visitor as IRustParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGenericParams(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public GenericParamsContext genericParams() {
		GenericParamsContext _localctx = new GenericParamsContext(Context, State);
		EnterRule(_localctx, 118, RULE_genericParams);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1129;
			Match(LT);
			State = 1142;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << KW_CONST) | (1L << KW_MACRORULES) | (1L << NON_KEYWORD_IDENTIFIER) | (1L << RAW_IDENTIFIER))) != 0) || _la==LIFETIME_OR_LABEL || _la==POUND) {
				{
				State = 1135;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,133,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 1130;
						genericParam();
						State = 1131;
						Match(COMMA);
						}
						} 
					}
					State = 1137;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,133,Context);
				}
				State = 1138;
				genericParam();
				State = 1140;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==COMMA) {
					{
					State = 1139;
					Match(COMMA);
					}
				}

				}
			}

			State = 1144;
			Match(GT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GenericParamContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public LifetimeParamContext lifetimeParam() {
			return GetRuleContext<LifetimeParamContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeParamContext typeParam() {
			return GetRuleContext<TypeParamContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ConstParamContext constParam() {
			return GetRuleContext<ConstParamContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public OuterAttributeContext[] outerAttribute() {
			return GetRuleContexts<OuterAttributeContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public OuterAttributeContext outerAttribute(int i) {
			return GetRuleContext<OuterAttributeContext>(i);
		}
		public GenericParamContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_genericParam; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRustParserListener typedListener = listener as IRustParserListener;
			if (typedListener != null) typedListener.EnterGenericParam(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRustParserListener typedListener = listener as IRustParserListener;
			if (typedListener != null) typedListener.ExitGenericParam(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRustParserVisitor<TResult> typedVisitor = visitor as IRustParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGenericParam(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public GenericParamContext genericParam() {
		GenericParamContext _localctx = new GenericParamContext(Context, State);
		EnterRule(_localctx, 120, RULE_genericParam);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1149;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,136,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 1146;
					outerAttribute();
					}
					} 
				}
				State = 1151;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,136,Context);
			}
			State = 1155;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,137,Context) ) {
			case 1:
				{
				State = 1152;
				lifetimeParam();
				}
				break;
			case 2:
				{
				State = 1153;
				typeParam();
				}
				break;
			case 3:
				{
				State = 1154;
				constParam();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LifetimeParamContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LIFETIME_OR_LABEL() { return GetToken(RustParser.LIFETIME_OR_LABEL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public OuterAttributeContext outerAttribute() {
			return GetRuleContext<OuterAttributeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(RustParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public LifetimeBoundsContext lifetimeBounds() {
			return GetRuleContext<LifetimeBoundsContext>(0);
		}
		public LifetimeParamContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lifetimeParam; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRustParserListener typedListener = listener as IRustParserListener;
			if (typedListener != null) typedListener.EnterLifetimeParam(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRustParserListener typedListener = listener as IRustParserListener;
			if (typedListener != null) typedListener.ExitLifetimeParam(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRustParserVisitor<TResult> typedVisitor = visitor as IRustParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLifetimeParam(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LifetimeParamContext lifetimeParam() {
		LifetimeParamContext _localctx = new LifetimeParamContext(Context, State);
		EnterRule(_localctx, 122, RULE_lifetimeParam);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1158;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==POUND) {
				{
				State = 1157;
				outerAttribute();
				}
			}

			State = 1160;
			Match(LIFETIME_OR_LABEL);
			State = 1163;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==COLON) {
				{
				State = 1161;
				Match(COLON);
				State = 1162;
				lifetimeBounds();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeParamContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public OuterAttributeContext outerAttribute() {
			return GetRuleContext<OuterAttributeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(RustParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQ() { return GetToken(RustParser.EQ, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Type_Context type_() {
			return GetRuleContext<Type_Context>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeParamBoundsContext typeParamBounds() {
			return GetRuleContext<TypeParamBoundsContext>(0);
		}
		public TypeParamContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeParam; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRustParserListener typedListener = listener as IRustParserListener;
			if (typedListener != null) typedListener.EnterTypeParam(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRustParserListener typedListener = listener as IRustParserListener;
			if (typedListener != null) typedListener.ExitTypeParam(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRustParserVisitor<TResult> typedVisitor = visitor as IRustParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeParam(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeParamContext typeParam() {
		TypeParamContext _localctx = new TypeParamContext(Context, State);
		EnterRule(_localctx, 124, RULE_typeParam);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1166;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==POUND) {
				{
				State = 1165;
				outerAttribute();
				}
			}

			State = 1168;
			identifier();
			State = 1173;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==COLON) {
				{
				State = 1169;
				Match(COLON);
				State = 1171;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << KW_CRATE) | (1L << KW_FOR) | (1L << KW_SELFVALUE) | (1L << KW_SELFTYPE) | (1L << KW_SUPER) | (1L << KW_STATICLIFETIME) | (1L << KW_MACRORULES) | (1L << KW_UNDERLINELIFETIME) | (1L << KW_DOLLARCRATE) | (1L << NON_KEYWORD_IDENTIFIER) | (1L << RAW_IDENTIFIER))) != 0) || ((((_la - 81)) & ~0x3f) == 0 && ((1L << (_la - 81)) & ((1L << (LIFETIME_OR_LABEL - 81)) | (1L << (PATHSEP - 81)) | (1L << (QUESTION - 81)) | (1L << (LPAREN - 81)))) != 0)) {
					{
					State = 1170;
					typeParamBounds();
					}
				}

				}
			}

			State = 1177;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==EQ) {
				{
				State = 1175;
				Match(EQ);
				State = 1176;
				type_();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConstParamContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_CONST() { return GetToken(RustParser.KW_CONST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(RustParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Type_Context type_() {
			return GetRuleContext<Type_Context>(0);
		}
		public ConstParamContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constParam; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRustParserListener typedListener = listener as IRustParserListener;
			if (typedListener != null) typedListener.EnterConstParam(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRustParserListener typedListener = listener as IRustParserListener;
			if (typedListener != null) typedListener.ExitConstParam(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRustParserVisitor<TResult> typedVisitor = visitor as IRustParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConstParam(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConstParamContext constParam() {
		ConstParamContext _localctx = new ConstParamContext(Context, State);
		EnterRule(_localctx, 126, RULE_constParam);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1179;
			Match(KW_CONST);
			State = 1180;
			identifier();
			State = 1181;
			Match(COLON);
			State = 1182;
			type_();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WhereClauseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_WHERE() { return GetToken(RustParser.KW_WHERE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public WhereClauseItemContext[] whereClauseItem() {
			return GetRuleContexts<WhereClauseItemContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public WhereClauseItemContext whereClauseItem(int i) {
			return GetRuleContext<WhereClauseItemContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(RustParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(RustParser.COMMA, i);
		}
		public WhereClauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_whereClause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRustParserListener typedListener = listener as IRustParserListener;
			if (typedListener != null) typedListener.EnterWhereClause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRustParserListener typedListener = listener as IRustParserListener;
			if (typedListener != null) typedListener.ExitWhereClause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRustParserVisitor<TResult> typedVisitor = visitor as IRustParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWhereClause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public WhereClauseContext whereClause() {
		WhereClauseContext _localctx = new WhereClauseContext(Context, State);
		EnterRule(_localctx, 128, RULE_whereClause);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1184;
			Match(KW_WHERE);
			State = 1190;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,144,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 1185;
					whereClauseItem();
					State = 1186;
					Match(COMMA);
					}
					} 
				}
				State = 1192;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,144,Context);
			}
			State = 1194;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << KW_CRATE) | (1L << KW_EXTERN) | (1L << KW_FN) | (1L << KW_FOR) | (1L << KW_IMPL) | (1L << KW_SELFVALUE) | (1L << KW_SELFTYPE) | (1L << KW_SUPER) | (1L << KW_UNSAFE) | (1L << KW_DYN) | (1L << KW_STATICLIFETIME) | (1L << KW_MACRORULES) | (1L << KW_UNDERLINELIFETIME) | (1L << KW_DOLLARCRATE) | (1L << NON_KEYWORD_IDENTIFIER) | (1L << RAW_IDENTIFIER))) != 0) || ((((_la - 81)) & ~0x3f) == 0 && ((1L << (_la - 81)) & ((1L << (LIFETIME_OR_LABEL - 81)) | (1L << (STAR - 81)) | (1L << (NOT - 81)) | (1L << (AND - 81)) | (1L << (LT - 81)) | (1L << (UNDERSCORE - 81)) | (1L << (PATHSEP - 81)) | (1L << (QUESTION - 81)) | (1L << (LSQUAREBRACKET - 81)) | (1L << (LPAREN - 81)))) != 0)) {
				{
				State = 1193;
				whereClauseItem();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WhereClauseItemContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public LifetimeWhereClauseItemContext lifetimeWhereClauseItem() {
			return GetRuleContext<LifetimeWhereClauseItemContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeBoundWhereClauseItemContext typeBoundWhereClauseItem() {
			return GetRuleContext<TypeBoundWhereClauseItemContext>(0);
		}
		public WhereClauseItemContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_whereClauseItem; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRustParserListener typedListener = listener as IRustParserListener;
			if (typedListener != null) typedListener.EnterWhereClauseItem(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRustParserListener typedListener = listener as IRustParserListener;
			if (typedListener != null) typedListener.ExitWhereClauseItem(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRustParserVisitor<TResult> typedVisitor = visitor as IRustParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWhereClauseItem(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public WhereClauseItemContext whereClauseItem() {
		WhereClauseItemContext _localctx = new WhereClauseItemContext(Context, State);
		EnterRule(_localctx, 130, RULE_whereClauseItem);
		try {
			State = 1198;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,146,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1196;
				lifetimeWhereClauseItem();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1197;
				typeBoundWhereClauseItem();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LifetimeWhereClauseItemContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public LifetimeContext lifetime() {
			return GetRuleContext<LifetimeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(RustParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public LifetimeBoundsContext lifetimeBounds() {
			return GetRuleContext<LifetimeBoundsContext>(0);
		}
		public LifetimeWhereClauseItemContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lifetimeWhereClauseItem; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRustParserListener typedListener = listener as IRustParserListener;
			if (typedListener != null) typedListener.EnterLifetimeWhereClauseItem(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRustParserListener typedListener = listener as IRustParserListener;
			if (typedListener != null) typedListener.ExitLifetimeWhereClauseItem(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRustParserVisitor<TResult> typedVisitor = visitor as IRustParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLifetimeWhereClauseItem(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LifetimeWhereClauseItemContext lifetimeWhereClauseItem() {
		LifetimeWhereClauseItemContext _localctx = new LifetimeWhereClauseItemContext(Context, State);
		EnterRule(_localctx, 132, RULE_lifetimeWhereClauseItem);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1200;
			lifetime();
			State = 1201;
			Match(COLON);
			State = 1202;
			lifetimeBounds();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeBoundWhereClauseItemContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Type_Context type_() {
			return GetRuleContext<Type_Context>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(RustParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ForLifetimesContext forLifetimes() {
			return GetRuleContext<ForLifetimesContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeParamBoundsContext typeParamBounds() {
			return GetRuleContext<TypeParamBoundsContext>(0);
		}
		public TypeBoundWhereClauseItemContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeBoundWhereClauseItem; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRustParserListener typedListener = listener as IRustParserListener;
			if (typedListener != null) typedListener.EnterTypeBoundWhereClauseItem(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRustParserListener typedListener = listener as IRustParserListener;
			if (typedListener != null) typedListener.ExitTypeBoundWhereClauseItem(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRustParserVisitor<TResult> typedVisitor = visitor as IRustParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeBoundWhereClauseItem(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeBoundWhereClauseItemContext typeBoundWhereClauseItem() {
		TypeBoundWhereClauseItemContext _localctx = new TypeBoundWhereClauseItemContext(Context, State);
		EnterRule(_localctx, 134, RULE_typeBoundWhereClauseItem);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1205;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,147,Context) ) {
			case 1:
				{
				State = 1204;
				forLifetimes();
				}
				break;
			}
			State = 1207;
			type_();
			State = 1208;
			Match(COLON);
			State = 1210;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << KW_CRATE) | (1L << KW_FOR) | (1L << KW_SELFVALUE) | (1L << KW_SELFTYPE) | (1L << KW_SUPER) | (1L << KW_STATICLIFETIME) | (1L << KW_MACRORULES) | (1L << KW_UNDERLINELIFETIME) | (1L << KW_DOLLARCRATE) | (1L << NON_KEYWORD_IDENTIFIER) | (1L << RAW_IDENTIFIER))) != 0) || ((((_la - 81)) & ~0x3f) == 0 && ((1L << (_la - 81)) & ((1L << (LIFETIME_OR_LABEL - 81)) | (1L << (PATHSEP - 81)) | (1L << (QUESTION - 81)) | (1L << (LPAREN - 81)))) != 0)) {
				{
				State = 1209;
				typeParamBounds();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ForLifetimesContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_FOR() { return GetToken(RustParser.KW_FOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public GenericParamsContext genericParams() {
			return GetRuleContext<GenericParamsContext>(0);
		}
		public ForLifetimesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_forLifetimes; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRustParserListener typedListener = listener as IRustParserListener;
			if (typedListener != null) typedListener.EnterForLifetimes(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRustParserListener typedListener = listener as IRustParserListener;
			if (typedListener != null) typedListener.ExitForLifetimes(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRustParserVisitor<TResult> typedVisitor = visitor as IRustParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForLifetimes(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ForLifetimesContext forLifetimes() {
		ForLifetimesContext _localctx = new ForLifetimesContext(Context, State);
		EnterRule(_localctx, 136, RULE_forLifetimes);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1212;
			Match(KW_FOR);
			State = 1213;
			genericParams();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssociatedItemContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public MacroInvocationSemiContext macroInvocationSemi() {
			return GetRuleContext<MacroInvocationSemiContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public OuterAttributeContext[] outerAttribute() {
			return GetRuleContexts<OuterAttributeContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public OuterAttributeContext outerAttribute(int i) {
			return GetRuleContext<OuterAttributeContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeAliasContext typeAlias() {
			return GetRuleContext<TypeAliasContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ConstantItemContext constantItem() {
			return GetRuleContext<ConstantItemContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Function_Context function_() {
			return GetRuleContext<Function_Context>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public VisibilityContext visibility() {
			return GetRuleContext<VisibilityContext>(0);
		}
		public AssociatedItemContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_associatedItem; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRustParserListener typedListener = listener as IRustParserListener;
			if (typedListener != null) typedListener.EnterAssociatedItem(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRustParserListener typedListener = listener as IRustParserListener;
			if (typedListener != null) typedListener.ExitAssociatedItem(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRustParserVisitor<TResult> typedVisitor = visitor as IRustParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssociatedItem(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AssociatedItemContext associatedItem() {
		AssociatedItemContext _localctx = new AssociatedItemContext(Context, State);
		EnterRule(_localctx, 138, RULE_associatedItem);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1218;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==POUND) {
				{
				{
				State = 1215;
				outerAttribute();
				}
				}
				State = 1220;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 1230;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case KW_CRATE:
			case KW_SELFVALUE:
			case KW_SUPER:
			case KW_MACRORULES:
			case KW_DOLLARCRATE:
			case NON_KEYWORD_IDENTIFIER:
			case RAW_IDENTIFIER:
			case PATHSEP:
				{
				State = 1221;
				macroInvocationSemi();
				}
				break;
			case KW_CONST:
			case KW_EXTERN:
			case KW_FN:
			case KW_PUB:
			case KW_TYPE:
			case KW_UNSAFE:
			case KW_ASYNC:
				{
				State = 1223;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==KW_PUB) {
					{
					State = 1222;
					visibility();
					}
				}

				State = 1228;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,151,Context) ) {
				case 1:
					{
					State = 1225;
					typeAlias();
					}
					break;
				case 2:
					{
					State = 1226;
					constantItem();
					}
					break;
				case 3:
					{
					State = 1227;
					function_();
					}
					break;
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InnerAttributeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode POUND() { return GetToken(RustParser.POUND, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT() { return GetToken(RustParser.NOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LSQUAREBRACKET() { return GetToken(RustParser.LSQUAREBRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public AttrContext attr() {
			return GetRuleContext<AttrContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RSQUAREBRACKET() { return GetToken(RustParser.RSQUAREBRACKET, 0); }
		public InnerAttributeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_innerAttribute; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRustParserListener typedListener = listener as IRustParserListener;
			if (typedListener != null) typedListener.EnterInnerAttribute(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRustParserListener typedListener = listener as IRustParserListener;
			if (typedListener != null) typedListener.ExitInnerAttribute(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRustParserVisitor<TResult> typedVisitor = visitor as IRustParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInnerAttribute(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InnerAttributeContext innerAttribute() {
		InnerAttributeContext _localctx = new InnerAttributeContext(Context, State);
		EnterRule(_localctx, 140, RULE_innerAttribute);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1232;
			Match(POUND);
			State = 1233;
			Match(NOT);
			State = 1234;
			Match(LSQUAREBRACKET);
			State = 1235;
			attr();
			State = 1236;
			Match(RSQUAREBRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OuterAttributeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode POUND() { return GetToken(RustParser.POUND, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LSQUAREBRACKET() { return GetToken(RustParser.LSQUAREBRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public AttrContext attr() {
			return GetRuleContext<AttrContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RSQUAREBRACKET() { return GetToken(RustParser.RSQUAREBRACKET, 0); }
		public OuterAttributeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_outerAttribute; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRustParserListener typedListener = listener as IRustParserListener;
			if (typedListener != null) typedListener.EnterOuterAttribute(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRustParserListener typedListener = listener as IRustParserListener;
			if (typedListener != null) typedListener.ExitOuterAttribute(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRustParserVisitor<TResult> typedVisitor = visitor as IRustParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOuterAttribute(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OuterAttributeContext outerAttribute() {
		OuterAttributeContext _localctx = new OuterAttributeContext(Context, State);
		EnterRule(_localctx, 142, RULE_outerAttribute);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1238;
			Match(POUND);
			State = 1239;
			Match(LSQUAREBRACKET);
			State = 1240;
			attr();
			State = 1241;
			Match(RSQUAREBRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AttrContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SimplePathContext simplePath() {
			return GetRuleContext<SimplePathContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AttrInputContext attrInput() {
			return GetRuleContext<AttrInputContext>(0);
		}
		public AttrContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_attr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRustParserListener typedListener = listener as IRustParserListener;
			if (typedListener != null) typedListener.EnterAttr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRustParserListener typedListener = listener as IRustParserListener;
			if (typedListener != null) typedListener.ExitAttr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRustParserVisitor<TResult> typedVisitor = visitor as IRustParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAttr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AttrContext attr() {
		AttrContext _localctx = new AttrContext(Context, State);
		EnterRule(_localctx, 144, RULE_attr);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1243;
			simplePath();
			State = 1245;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (((((_la - 103)) & ~0x3f) == 0 && ((1L << (_la - 103)) & ((1L << (EQ - 103)) | (1L << (LCURLYBRACE - 103)) | (1L << (LSQUAREBRACKET - 103)) | (1L << (LPAREN - 103)))) != 0)) {
				{
				State = 1244;
				attrInput();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AttrInputContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public DelimTokenTreeContext delimTokenTree() {
			return GetRuleContext<DelimTokenTreeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQ() { return GetToken(RustParser.EQ, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public LiteralExpressionContext literalExpression() {
			return GetRuleContext<LiteralExpressionContext>(0);
		}
		public AttrInputContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_attrInput; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRustParserListener typedListener = listener as IRustParserListener;
			if (typedListener != null) typedListener.EnterAttrInput(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRustParserListener typedListener = listener as IRustParserListener;
			if (typedListener != null) typedListener.ExitAttrInput(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRustParserVisitor<TResult> typedVisitor = visitor as IRustParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAttrInput(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AttrInputContext attrInput() {
		AttrInputContext _localctx = new AttrInputContext(Context, State);
		EnterRule(_localctx, 146, RULE_attrInput);
		try {
			State = 1250;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case LCURLYBRACE:
			case LSQUAREBRACKET:
			case LPAREN:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1247;
				delimTokenTree();
				}
				break;
			case EQ:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1248;
				Match(EQ);
				State = 1249;
				literalExpression();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(RustParser.SEMI, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ItemContext item() {
			return GetRuleContext<ItemContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LetStatementContext letStatement() {
			return GetRuleContext<LetStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionStatementContext expressionStatement() {
			return GetRuleContext<ExpressionStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MacroInvocationSemiContext macroInvocationSemi() {
			return GetRuleContext<MacroInvocationSemiContext>(0);
		}
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRustParserListener typedListener = listener as IRustParserListener;
			if (typedListener != null) typedListener.EnterStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRustParserListener typedListener = listener as IRustParserListener;
			if (typedListener != null) typedListener.ExitStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRustParserVisitor<TResult> typedVisitor = visitor as IRustParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		StatementContext _localctx = new StatementContext(Context, State);
		EnterRule(_localctx, 148, RULE_statement);
		try {
			State = 1257;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,155,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1252;
				Match(SEMI);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1253;
				item();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1254;
				letStatement();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1255;
				expressionStatement();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 1256;
				macroInvocationSemi();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LetStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_LET() { return GetToken(RustParser.KW_LET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public PatternNoTopAltContext patternNoTopAlt() {
			return GetRuleContext<PatternNoTopAltContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(RustParser.SEMI, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public OuterAttributeContext[] outerAttribute() {
			return GetRuleContexts<OuterAttributeContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public OuterAttributeContext outerAttribute(int i) {
			return GetRuleContext<OuterAttributeContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(RustParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Type_Context type_() {
			return GetRuleContext<Type_Context>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQ() { return GetToken(RustParser.EQ, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public LetStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_letStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRustParserListener typedListener = listener as IRustParserListener;
			if (typedListener != null) typedListener.EnterLetStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRustParserListener typedListener = listener as IRustParserListener;
			if (typedListener != null) typedListener.ExitLetStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRustParserVisitor<TResult> typedVisitor = visitor as IRustParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLetStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LetStatementContext letStatement() {
		LetStatementContext _localctx = new LetStatementContext(Context, State);
		EnterRule(_localctx, 150, RULE_letStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1262;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==POUND) {
				{
				{
				State = 1259;
				outerAttribute();
				}
				}
				State = 1264;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 1265;
			Match(KW_LET);
			State = 1266;
			patternNoTopAlt();
			State = 1269;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==COLON) {
				{
				State = 1267;
				Match(COLON);
				State = 1268;
				type_();
				}
			}

			State = 1273;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==EQ) {
				{
				State = 1271;
				Match(EQ);
				State = 1272;
				expression(0);
				}
			}

			State = 1275;
			Match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(RustParser.SEMI, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionWithBlockContext expressionWithBlock() {
			return GetRuleContext<ExpressionWithBlockContext>(0);
		}
		public ExpressionStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expressionStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRustParserListener typedListener = listener as IRustParserListener;
			if (typedListener != null) typedListener.EnterExpressionStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRustParserListener typedListener = listener as IRustParserListener;
			if (typedListener != null) typedListener.ExitExpressionStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRustParserVisitor<TResult> typedVisitor = visitor as IRustParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpressionStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionStatementContext expressionStatement() {
		ExpressionStatementContext _localctx = new ExpressionStatementContext(Context, State);
		EnterRule(_localctx, 152, RULE_expressionStatement);
		try {
			State = 1284;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,160,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1277;
				expression(0);
				State = 1278;
				Match(SEMI);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1280;
				expressionWithBlock();
				State = 1282;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,159,Context) ) {
				case 1:
					{
					State = 1281;
					Match(SEMI);
					}
					break;
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
	 
		public ExpressionContext() { }
		public virtual void CopyFrom(ExpressionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class TypeCastExpressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_AS() { return GetToken(RustParser.KW_AS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeNoBoundsContext typeNoBounds() {
			return GetRuleContext<TypeNoBoundsContext>(0);
		}
		public TypeCastExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRustParserListener typedListener = listener as IRustParserListener;
			if (typedListener != null) typedListener.EnterTypeCastExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRustParserListener typedListener = listener as IRustParserListener;
			if (typedListener != null) typedListener.ExitTypeCastExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRustParserVisitor<TResult> typedVisitor = visitor as IRustParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeCastExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class PathExpression_Context : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public PathExpressionContext pathExpression() {
			return GetRuleContext<PathExpressionContext>(0);
		}
		public PathExpression_Context(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRustParserListener typedListener = listener as IRustParserListener;
			if (typedListener != null) typedListener.EnterPathExpression_(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRustParserListener typedListener = listener as IRustParserListener;
			if (typedListener != null) typedListener.ExitPathExpression_(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRustParserVisitor<TResult> typedVisitor = visitor as IRustParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPathExpression_(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class TupleExpressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(RustParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(RustParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public InnerAttributeContext[] innerAttribute() {
			return GetRuleContexts<InnerAttributeContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public InnerAttributeContext innerAttribute(int i) {
			return GetRuleContext<InnerAttributeContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TupleElementsContext tupleElements() {
			return GetRuleContext<TupleElementsContext>(0);
		}
		public TupleExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRustParserListener typedListener = listener as IRustParserListener;
			if (typedListener != null) typedListener.EnterTupleExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRustParserListener typedListener = listener as IRustParserListener;
			if (typedListener != null) typedListener.ExitTupleExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRustParserVisitor<TResult> typedVisitor = visitor as IRustParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTupleExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class IndexExpressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LSQUAREBRACKET() { return GetToken(RustParser.LSQUAREBRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RSQUAREBRACKET() { return GetToken(RustParser.RSQUAREBRACKET, 0); }
		public IndexExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRustParserListener typedListener = listener as IRustParserListener;
			if (typedListener != null) typedListener.EnterIndexExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRustParserListener typedListener = listener as IRustParserListener;
			if (typedListener != null) typedListener.ExitIndexExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRustParserVisitor<TResult> typedVisitor = visitor as IRustParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIndexExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class RangeExpressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOTDOT() { return GetToken(RustParser.DOTDOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOTDOTEQ() { return GetToken(RustParser.DOTDOTEQ, 0); }
		public RangeExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRustParserListener typedListener = listener as IRustParserListener;
			if (typedListener != null) typedListener.EnterRangeExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRustParserListener typedListener = listener as IRustParserListener;
			if (typedListener != null) typedListener.ExitRangeExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRustParserVisitor<TResult> typedVisitor = visitor as IRustParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRangeExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class MacroInvocationAsExpressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public MacroInvocationContext macroInvocation() {
			return GetRuleContext<MacroInvocationContext>(0);
		}
		public MacroInvocationAsExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRustParserListener typedListener = listener as IRustParserListener;
			if (typedListener != null) typedListener.EnterMacroInvocationAsExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRustParserListener typedListener = listener as IRustParserListener;
			if (typedListener != null) typedListener.ExitMacroInvocationAsExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRustParserVisitor<TResult> typedVisitor = visitor as IRustParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMacroInvocationAsExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ReturnExpressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_RETURN() { return GetToken(RustParser.KW_RETURN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ReturnExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRustParserListener typedListener = listener as IRustParserListener;
			if (typedListener != null) typedListener.EnterReturnExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRustParserListener typedListener = listener as IRustParserListener;
			if (typedListener != null) typedListener.ExitReturnExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRustParserVisitor<TResult> typedVisitor = visitor as IRustParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReturnExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AwaitExpressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT() { return GetToken(RustParser.DOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_AWAIT() { return GetToken(RustParser.KW_AWAIT, 0); }
		public AwaitExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRustParserListener typedListener = listener as IRustParserListener;
			if (typedListener != null) typedListener.EnterAwaitExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRustParserListener typedListener = listener as IRustParserListener;
			if (typedListener != null) typedListener.ExitAwaitExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRustParserVisitor<TResult> typedVisitor = visitor as IRustParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAwaitExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ErrorPropagationExpressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode QUESTION() { return GetToken(RustParser.QUESTION, 0); }
		public ErrorPropagationExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRustParserListener typedListener = listener as IRustParserListener;
			if (typedListener != null) typedListener.EnterErrorPropagationExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRustParserListener typedListener = listener as IRustParserListener;
			if (typedListener != null) typedListener.ExitErrorPropagationExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRustParserVisitor<TResult> typedVisitor = visitor as IRustParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitErrorPropagationExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ContinueExpressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_CONTINUE() { return GetToken(RustParser.KW_CONTINUE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LIFETIME_OR_LABEL() { return GetToken(RustParser.LIFETIME_OR_LABEL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ContinueExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRustParserListener typedListener = listener as IRustParserListener;
			if (typedListener != null) typedListener.EnterContinueExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRustParserListener typedListener = listener as IRustParserListener;
			if (typedListener != null) typedListener.ExitContinueExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRustParserVisitor<TResult> typedVisitor = visitor as IRustParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitContinueExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AssignmentExpressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQ() { return GetToken(RustParser.EQ, 0); }
		public AssignmentExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRustParserListener typedListener = listener as IRustParserListener;
			if (typedListener != null) typedListener.EnterAssignmentExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRustParserListener typedListener = listener as IRustParserListener;
			if (typedListener != null) typedListener.ExitAssignmentExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRustParserVisitor<TResult> typedVisitor = visitor as IRustParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssignmentExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class MethodCallExpressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT() { return GetToken(RustParser.DOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public PathExprSegmentContext pathExprSegment() {
			return GetRuleContext<PathExprSegmentContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(RustParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(RustParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public CallParamsContext callParams() {
			return GetRuleContext<CallParamsContext>(0);
		}
		public MethodCallExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRustParserListener typedListener = listener as IRustParserListener;
			if (typedListener != null) typedListener.EnterMethodCallExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRustParserListener typedListener = listener as IRustParserListener;
			if (typedListener != null) typedListener.ExitMethodCallExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRustParserVisitor<TResult> typedVisitor = visitor as IRustParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMethodCallExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class LiteralExpression_Context : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public LiteralExpressionContext literalExpression() {
			return GetRuleContext<LiteralExpressionContext>(0);
		}
		public LiteralExpression_Context(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRustParserListener typedListener = listener as IRustParserListener;
			if (typedListener != null) typedListener.EnterLiteralExpression_(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRustParserListener typedListener = listener as IRustParserListener;
			if (typedListener != null) typedListener.ExitLiteralExpression_(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRustParserVisitor<TResult> typedVisitor = visitor as IRustParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLiteralExpression_(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class StructExpression_Context : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public StructExpressionContext structExpression() {
			return GetRuleContext<StructExpressionContext>(0);
		}
		public StructExpression_Context(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRustParserListener typedListener = listener as IRustParserListener;
			if (typedListener != null) typedListener.EnterStructExpression_(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRustParserListener typedListener = listener as IRustParserListener;
			if (typedListener != null) typedListener.ExitStructExpression_(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRustParserVisitor<TResult> typedVisitor = visitor as IRustParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStructExpression_(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class TupleIndexingExpressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT() { return GetToken(RustParser.DOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TupleIndexContext tupleIndex() {
			return GetRuleContext<TupleIndexContext>(0);
		}
		public TupleIndexingExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRustParserListener typedListener = listener as IRustParserListener;
			if (typedListener != null) typedListener.EnterTupleIndexingExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRustParserListener typedListener = listener as IRustParserListener;
			if (typedListener != null) typedListener.ExitTupleIndexingExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRustParserVisitor<TResult> typedVisitor = visitor as IRustParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTupleIndexingExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class NegationExpressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUS() { return GetToken(RustParser.MINUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT() { return GetToken(RustParser.NOT, 0); }
		public NegationExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRustParserListener typedListener = listener as IRustParserListener;
			if (typedListener != null) typedListener.EnterNegationExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRustParserListener typedListener = listener as IRustParserListener;
			if (typedListener != null) typedListener.ExitNegationExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRustParserVisitor<TResult> typedVisitor = visitor as IRustParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNegationExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class CallExpressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(RustParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(RustParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public CallParamsContext callParams() {
			return GetRuleContext<CallParamsContext>(0);
		}
		public CallExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRustParserListener typedListener = listener as IRustParserListener;
			if (typedListener != null) typedListener.EnterCallExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRustParserListener typedListener = listener as IRustParserListener;
			if (typedListener != null) typedListener.ExitCallExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRustParserVisitor<TResult> typedVisitor = visitor as IRustParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCallExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class LazyBooleanExpressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ANDAND() { return GetToken(RustParser.ANDAND, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OROR() { return GetToken(RustParser.OROR, 0); }
		public LazyBooleanExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRustParserListener typedListener = listener as IRustParserListener;
			if (typedListener != null) typedListener.EnterLazyBooleanExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRustParserListener typedListener = listener as IRustParserListener;
			if (typedListener != null) typedListener.ExitLazyBooleanExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRustParserVisitor<TResult> typedVisitor = visitor as IRustParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLazyBooleanExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class DereferenceExpressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STAR() { return GetToken(RustParser.STAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public DereferenceExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRustParserListener typedListener = listener as IRustParserListener;
			if (typedListener != null) typedListener.EnterDereferenceExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRustParserListener typedListener = listener as IRustParserListener;
			if (typedListener != null) typedListener.ExitDereferenceExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRustParserVisitor<TResult> typedVisitor = visitor as IRustParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDereferenceExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ExpressionWithBlock_Context : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionWithBlockContext expressionWithBlock() {
			return GetRuleContext<ExpressionWithBlockContext>(0);
		}
		public ExpressionWithBlock_Context(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRustParserListener typedListener = listener as IRustParserListener;
			if (typedListener != null) typedListener.EnterExpressionWithBlock_(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRustParserListener typedListener = listener as IRustParserListener;
			if (typedListener != null) typedListener.ExitExpressionWithBlock_(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRustParserVisitor<TResult> typedVisitor = visitor as IRustParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpressionWithBlock_(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class GroupedExpressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(RustParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(RustParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public InnerAttributeContext[] innerAttribute() {
			return GetRuleContexts<InnerAttributeContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public InnerAttributeContext innerAttribute(int i) {
			return GetRuleContext<InnerAttributeContext>(i);
		}
		public GroupedExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRustParserListener typedListener = listener as IRustParserListener;
			if (typedListener != null) typedListener.EnterGroupedExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRustParserListener typedListener = listener as IRustParserListener;
			if (typedListener != null) typedListener.ExitGroupedExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRustParserVisitor<TResult> typedVisitor = visitor as IRustParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGroupedExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class BreakExpressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_BREAK() { return GetToken(RustParser.KW_BREAK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LIFETIME_OR_LABEL() { return GetToken(RustParser.LIFETIME_OR_LABEL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public BreakExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRustParserListener typedListener = listener as IRustParserListener;
			if (typedListener != null) typedListener.EnterBreakExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRustParserListener typedListener = listener as IRustParserListener;
			if (typedListener != null) typedListener.ExitBreakExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRustParserVisitor<TResult> typedVisitor = visitor as IRustParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBreakExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ArithmeticOrLogicalExpressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STAR() { return GetToken(RustParser.STAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SLASH() { return GetToken(RustParser.SLASH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PERCENT() { return GetToken(RustParser.PERCENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PLUS() { return GetToken(RustParser.PLUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUS() { return GetToken(RustParser.MINUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ShlContext shl() {
			return GetRuleContext<ShlContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ShrContext shr() {
			return GetRuleContext<ShrContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AND() { return GetToken(RustParser.AND, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CARET() { return GetToken(RustParser.CARET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OR() { return GetToken(RustParser.OR, 0); }
		public ArithmeticOrLogicalExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRustParserListener typedListener = listener as IRustParserListener;
			if (typedListener != null) typedListener.EnterArithmeticOrLogicalExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRustParserListener typedListener = listener as IRustParserListener;
			if (typedListener != null) typedListener.ExitArithmeticOrLogicalExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRustParserVisitor<TResult> typedVisitor = visitor as IRustParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArithmeticOrLogicalExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class FieldExpressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT() { return GetToken(RustParser.DOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public FieldExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRustParserListener typedListener = listener as IRustParserListener;
			if (typedListener != null) typedListener.EnterFieldExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRustParserListener typedListener = listener as IRustParserListener;
			if (typedListener != null) typedListener.ExitFieldExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRustParserVisitor<TResult> typedVisitor = visitor as IRustParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFieldExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class EnumerationVariantExpression_Context : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public EnumerationVariantExpressionContext enumerationVariantExpression() {
			return GetRuleContext<EnumerationVariantExpressionContext>(0);
		}
		public EnumerationVariantExpression_Context(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRustParserListener typedListener = listener as IRustParserListener;
			if (typedListener != null) typedListener.EnterEnumerationVariantExpression_(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRustParserListener typedListener = listener as IRustParserListener;
			if (typedListener != null) typedListener.ExitEnumerationVariantExpression_(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRustParserVisitor<TResult> typedVisitor = visitor as IRustParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEnumerationVariantExpression_(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ComparisonExpressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ComparisonOperatorContext comparisonOperator() {
			return GetRuleContext<ComparisonOperatorContext>(0);
		}
		public ComparisonExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRustParserListener typedListener = listener as IRustParserListener;
			if (typedListener != null) typedListener.EnterComparisonExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRustParserListener typedListener = listener as IRustParserListener;
			if (typedListener != null) typedListener.ExitComparisonExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRustParserVisitor<TResult> typedVisitor = visitor as IRustParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitComparisonExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AttributedExpressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public OuterAttributeContext[] outerAttribute() {
			return GetRuleContexts<OuterAttributeContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public OuterAttributeContext outerAttribute(int i) {
			return GetRuleContext<OuterAttributeContext>(i);
		}
		public AttributedExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRustParserListener typedListener = listener as IRustParserListener;
			if (typedListener != null) typedListener.EnterAttributedExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRustParserListener typedListener = listener as IRustParserListener;
			if (typedListener != null) typedListener.ExitAttributedExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRustParserVisitor<TResult> typedVisitor = visitor as IRustParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAttributedExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class BorrowExpressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AND() { return GetToken(RustParser.AND, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ANDAND() { return GetToken(RustParser.ANDAND, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_MUT() { return GetToken(RustParser.KW_MUT, 0); }
		public BorrowExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRustParserListener typedListener = listener as IRustParserListener;
			if (typedListener != null) typedListener.EnterBorrowExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRustParserListener typedListener = listener as IRustParserListener;
			if (typedListener != null) typedListener.ExitBorrowExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRustParserVisitor<TResult> typedVisitor = visitor as IRustParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBorrowExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class CompoundAssignmentExpressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CompoundAssignOperatorContext compoundAssignOperator() {
			return GetRuleContext<CompoundAssignOperatorContext>(0);
		}
		public CompoundAssignmentExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRustParserListener typedListener = listener as IRustParserListener;
			if (typedListener != null) typedListener.EnterCompoundAssignmentExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRustParserListener typedListener = listener as IRustParserListener;
			if (typedListener != null) typedListener.ExitCompoundAssignmentExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRustParserVisitor<TResult> typedVisitor = visitor as IRustParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCompoundAssignmentExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ClosureExpression_Context : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ClosureExpressionContext closureExpression() {
			return GetRuleContext<ClosureExpressionContext>(0);
		}
		public ClosureExpression_Context(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRustParserListener typedListener = listener as IRustParserListener;
			if (typedListener != null) typedListener.EnterClosureExpression_(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRustParserListener typedListener = listener as IRustParserListener;
			if (typedListener != null) typedListener.ExitClosureExpression_(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRustParserVisitor<TResult> typedVisitor = visitor as IRustParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClosureExpression_(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ArrayExpressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LSQUAREBRACKET() { return GetToken(RustParser.LSQUAREBRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RSQUAREBRACKET() { return GetToken(RustParser.RSQUAREBRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public InnerAttributeContext[] innerAttribute() {
			return GetRuleContexts<InnerAttributeContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public InnerAttributeContext innerAttribute(int i) {
			return GetRuleContext<InnerAttributeContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArrayElementsContext arrayElements() {
			return GetRuleContext<ArrayElementsContext>(0);
		}
		public ArrayExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRustParserListener typedListener = listener as IRustParserListener;
			if (typedListener != null) typedListener.EnterArrayExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRustParserListener typedListener = listener as IRustParserListener;
			if (typedListener != null) typedListener.ExitArrayExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRustParserVisitor<TResult> typedVisitor = visitor as IRustParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArrayExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		return expression(0);
	}

	private ExpressionContext expression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ExpressionContext _localctx = new ExpressionContext(Context, _parentState);
		ExpressionContext _prevctx = _localctx;
		int _startState = 154;
		EnterRecursionRule(_localctx, 154, RULE_expression, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1366;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,174,Context) ) {
			case 1:
				{
				_localctx = new AttributedExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;

				State = 1288;
				ErrorHandler.Sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						State = 1287;
						outerAttribute();
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 1290;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,161,Context);
				} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
				State = 1292;
				expression(40);
				}
				break;
			case 2:
				{
				_localctx = new LiteralExpression_Context(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 1294;
				literalExpression();
				}
				break;
			case 3:
				{
				_localctx = new PathExpression_Context(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 1295;
				pathExpression();
				}
				break;
			case 4:
				{
				_localctx = new BorrowExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 1296;
				_la = TokenStream.LA(1);
				if ( !(_la==AND || _la==ANDAND) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 1298;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==KW_MUT) {
					{
					State = 1297;
					Match(KW_MUT);
					}
				}

				State = 1300;
				expression(30);
				}
				break;
			case 5:
				{
				_localctx = new DereferenceExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 1301;
				Match(STAR);
				State = 1302;
				expression(29);
				}
				break;
			case 6:
				{
				_localctx = new NegationExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 1303;
				_la = TokenStream.LA(1);
				if ( !(_la==MINUS || _la==NOT) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 1304;
				expression(28);
				}
				break;
			case 7:
				{
				_localctx = new RangeExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 1305;
				Match(DOTDOT);
				State = 1307;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,163,Context) ) {
				case 1:
					{
					State = 1306;
					expression(0);
					}
					break;
				}
				}
				break;
			case 8:
				{
				_localctx = new RangeExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 1309;
				Match(DOTDOTEQ);
				State = 1310;
				expression(15);
				}
				break;
			case 9:
				{
				_localctx = new ContinueExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 1311;
				Match(KW_CONTINUE);
				State = 1313;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,164,Context) ) {
				case 1:
					{
					State = 1312;
					Match(LIFETIME_OR_LABEL);
					}
					break;
				}
				State = 1316;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,165,Context) ) {
				case 1:
					{
					State = 1315;
					expression(0);
					}
					break;
				}
				}
				break;
			case 10:
				{
				_localctx = new BreakExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 1318;
				Match(KW_BREAK);
				State = 1320;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,166,Context) ) {
				case 1:
					{
					State = 1319;
					Match(LIFETIME_OR_LABEL);
					}
					break;
				}
				State = 1323;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,167,Context) ) {
				case 1:
					{
					State = 1322;
					expression(0);
					}
					break;
				}
				}
				break;
			case 11:
				{
				_localctx = new ReturnExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 1325;
				Match(KW_RETURN);
				State = 1327;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,168,Context) ) {
				case 1:
					{
					State = 1326;
					expression(0);
					}
					break;
				}
				}
				break;
			case 12:
				{
				_localctx = new GroupedExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 1329;
				Match(LPAREN);
				State = 1333;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,169,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 1330;
						innerAttribute();
						}
						} 
					}
					State = 1335;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,169,Context);
				}
				State = 1336;
				expression(0);
				State = 1337;
				Match(RPAREN);
				}
				break;
			case 13:
				{
				_localctx = new ArrayExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 1339;
				Match(LSQUAREBRACKET);
				State = 1343;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,170,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 1340;
						innerAttribute();
						}
						} 
					}
					State = 1345;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,170,Context);
				}
				State = 1347;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << KW_BREAK) | (1L << KW_CONTINUE) | (1L << KW_CRATE) | (1L << KW_FALSE) | (1L << KW_FOR) | (1L << KW_IF) | (1L << KW_LOOP) | (1L << KW_MATCH) | (1L << KW_MOVE) | (1L << KW_RETURN) | (1L << KW_SELFVALUE) | (1L << KW_SELFTYPE) | (1L << KW_SUPER) | (1L << KW_TRUE) | (1L << KW_UNSAFE) | (1L << KW_WHILE) | (1L << KW_ASYNC) | (1L << KW_MACRORULES) | (1L << KW_DOLLARCRATE) | (1L << NON_KEYWORD_IDENTIFIER) | (1L << RAW_IDENTIFIER))) != 0) || ((((_la - 69)) & ~0x3f) == 0 && ((1L << (_la - 69)) & ((1L << (CHAR_LITERAL - 69)) | (1L << (STRING_LITERAL - 69)) | (1L << (RAW_STRING_LITERAL - 69)) | (1L << (BYTE_LITERAL - 69)) | (1L << (BYTE_STRING_LITERAL - 69)) | (1L << (RAW_BYTE_STRING_LITERAL - 69)) | (1L << (INTEGER_LITERAL - 69)) | (1L << (FLOAT_LITERAL - 69)) | (1L << (LIFETIME_OR_LABEL - 69)) | (1L << (MINUS - 69)) | (1L << (STAR - 69)) | (1L << (NOT - 69)) | (1L << (AND - 69)) | (1L << (OR - 69)) | (1L << (ANDAND - 69)) | (1L << (OROR - 69)) | (1L << (LT - 69)) | (1L << (DOTDOT - 69)) | (1L << (DOTDOTEQ - 69)) | (1L << (PATHSEP - 69)) | (1L << (POUND - 69)) | (1L << (LCURLYBRACE - 69)) | (1L << (LSQUAREBRACKET - 69)) | (1L << (LPAREN - 69)))) != 0)) {
					{
					State = 1346;
					arrayElements();
					}
				}

				State = 1349;
				Match(RSQUAREBRACKET);
				}
				break;
			case 14:
				{
				_localctx = new TupleExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 1350;
				Match(LPAREN);
				State = 1354;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,172,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 1351;
						innerAttribute();
						}
						} 
					}
					State = 1356;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,172,Context);
				}
				State = 1358;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << KW_BREAK) | (1L << KW_CONTINUE) | (1L << KW_CRATE) | (1L << KW_FALSE) | (1L << KW_FOR) | (1L << KW_IF) | (1L << KW_LOOP) | (1L << KW_MATCH) | (1L << KW_MOVE) | (1L << KW_RETURN) | (1L << KW_SELFVALUE) | (1L << KW_SELFTYPE) | (1L << KW_SUPER) | (1L << KW_TRUE) | (1L << KW_UNSAFE) | (1L << KW_WHILE) | (1L << KW_ASYNC) | (1L << KW_MACRORULES) | (1L << KW_DOLLARCRATE) | (1L << NON_KEYWORD_IDENTIFIER) | (1L << RAW_IDENTIFIER))) != 0) || ((((_la - 69)) & ~0x3f) == 0 && ((1L << (_la - 69)) & ((1L << (CHAR_LITERAL - 69)) | (1L << (STRING_LITERAL - 69)) | (1L << (RAW_STRING_LITERAL - 69)) | (1L << (BYTE_LITERAL - 69)) | (1L << (BYTE_STRING_LITERAL - 69)) | (1L << (RAW_BYTE_STRING_LITERAL - 69)) | (1L << (INTEGER_LITERAL - 69)) | (1L << (FLOAT_LITERAL - 69)) | (1L << (LIFETIME_OR_LABEL - 69)) | (1L << (MINUS - 69)) | (1L << (STAR - 69)) | (1L << (NOT - 69)) | (1L << (AND - 69)) | (1L << (OR - 69)) | (1L << (ANDAND - 69)) | (1L << (OROR - 69)) | (1L << (LT - 69)) | (1L << (DOTDOT - 69)) | (1L << (DOTDOTEQ - 69)) | (1L << (PATHSEP - 69)) | (1L << (POUND - 69)) | (1L << (LCURLYBRACE - 69)) | (1L << (LSQUAREBRACKET - 69)) | (1L << (LPAREN - 69)))) != 0)) {
					{
					State = 1357;
					tupleElements();
					}
				}

				State = 1360;
				Match(RPAREN);
				}
				break;
			case 15:
				{
				_localctx = new StructExpression_Context(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 1361;
				structExpression();
				}
				break;
			case 16:
				{
				_localctx = new EnumerationVariantExpression_Context(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 1362;
				enumerationVariantExpression();
				}
				break;
			case 17:
				{
				_localctx = new ClosureExpression_Context(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 1363;
				closureExpression();
				}
				break;
			case 18:
				{
				_localctx = new ExpressionWithBlock_Context(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 1364;
				expressionWithBlock();
				}
				break;
			case 19:
				{
				_localctx = new MacroInvocationAsExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 1365;
				macroInvocation();
				}
				break;
			}
			Context.Stop = TokenStream.LT(-1);
			State = 1451;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,180,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 1449;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,179,Context) ) {
					case 1:
						{
						_localctx = new ArithmeticOrLogicalExpressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 1368;
						if (!(Precpred(Context, 26))) throw new FailedPredicateException(this, "Precpred(Context, 26)");
						State = 1369;
						_la = TokenStream.LA(1);
						if ( !(((((_la - 84)) & ~0x3f) == 0 && ((1L << (_la - 84)) & ((1L << (STAR - 84)) | (1L << (SLASH - 84)) | (1L << (PERCENT - 84)))) != 0)) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 1370;
						expression(27);
						}
						break;
					case 2:
						{
						_localctx = new ArithmeticOrLogicalExpressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 1371;
						if (!(Precpred(Context, 25))) throw new FailedPredicateException(this, "Precpred(Context, 25)");
						State = 1372;
						_la = TokenStream.LA(1);
						if ( !(_la==PLUS || _la==MINUS) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 1373;
						expression(26);
						}
						break;
					case 3:
						{
						_localctx = new ArithmeticOrLogicalExpressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 1374;
						if (!(Precpred(Context, 24))) throw new FailedPredicateException(this, "Precpred(Context, 24)");
						State = 1377;
						ErrorHandler.Sync(this);
						switch (TokenStream.LA(1)) {
						case LT:
							{
							State = 1375;
							shl();
							}
							break;
						case GT:
							{
							State = 1376;
							shr();
							}
							break;
						default:
							throw new NoViableAltException(this);
						}
						State = 1379;
						expression(25);
						}
						break;
					case 4:
						{
						_localctx = new ArithmeticOrLogicalExpressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 1381;
						if (!(Precpred(Context, 23))) throw new FailedPredicateException(this, "Precpred(Context, 23)");
						State = 1382;
						Match(AND);
						State = 1383;
						expression(24);
						}
						break;
					case 5:
						{
						_localctx = new ArithmeticOrLogicalExpressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 1384;
						if (!(Precpred(Context, 22))) throw new FailedPredicateException(this, "Precpred(Context, 22)");
						State = 1385;
						Match(CARET);
						State = 1386;
						expression(23);
						}
						break;
					case 6:
						{
						_localctx = new ArithmeticOrLogicalExpressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 1387;
						if (!(Precpred(Context, 21))) throw new FailedPredicateException(this, "Precpred(Context, 21)");
						State = 1388;
						Match(OR);
						State = 1389;
						expression(22);
						}
						break;
					case 7:
						{
						_localctx = new ComparisonExpressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 1390;
						if (!(Precpred(Context, 20))) throw new FailedPredicateException(this, "Precpred(Context, 20)");
						State = 1391;
						comparisonOperator();
						State = 1392;
						expression(21);
						}
						break;
					case 8:
						{
						_localctx = new LazyBooleanExpressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 1394;
						if (!(Precpred(Context, 19))) throw new FailedPredicateException(this, "Precpred(Context, 19)");
						State = 1395;
						Match(ANDAND);
						State = 1396;
						expression(20);
						}
						break;
					case 9:
						{
						_localctx = new LazyBooleanExpressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 1397;
						if (!(Precpred(Context, 18))) throw new FailedPredicateException(this, "Precpred(Context, 18)");
						State = 1398;
						Match(OROR);
						State = 1399;
						expression(19);
						}
						break;
					case 10:
						{
						_localctx = new RangeExpressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 1400;
						if (!(Precpred(Context, 14))) throw new FailedPredicateException(this, "Precpred(Context, 14)");
						State = 1401;
						Match(DOTDOTEQ);
						State = 1402;
						expression(15);
						}
						break;
					case 11:
						{
						_localctx = new AssignmentExpressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 1403;
						if (!(Precpred(Context, 13))) throw new FailedPredicateException(this, "Precpred(Context, 13)");
						State = 1404;
						Match(EQ);
						State = 1405;
						expression(14);
						}
						break;
					case 12:
						{
						_localctx = new CompoundAssignmentExpressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 1406;
						if (!(Precpred(Context, 12))) throw new FailedPredicateException(this, "Precpred(Context, 12)");
						State = 1407;
						compoundAssignOperator();
						State = 1408;
						expression(13);
						}
						break;
					case 13:
						{
						_localctx = new MethodCallExpressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 1410;
						if (!(Precpred(Context, 37))) throw new FailedPredicateException(this, "Precpred(Context, 37)");
						State = 1411;
						Match(DOT);
						State = 1412;
						pathExprSegment();
						State = 1413;
						Match(LPAREN);
						State = 1415;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << KW_BREAK) | (1L << KW_CONTINUE) | (1L << KW_CRATE) | (1L << KW_FALSE) | (1L << KW_FOR) | (1L << KW_IF) | (1L << KW_LOOP) | (1L << KW_MATCH) | (1L << KW_MOVE) | (1L << KW_RETURN) | (1L << KW_SELFVALUE) | (1L << KW_SELFTYPE) | (1L << KW_SUPER) | (1L << KW_TRUE) | (1L << KW_UNSAFE) | (1L << KW_WHILE) | (1L << KW_ASYNC) | (1L << KW_MACRORULES) | (1L << KW_DOLLARCRATE) | (1L << NON_KEYWORD_IDENTIFIER) | (1L << RAW_IDENTIFIER))) != 0) || ((((_la - 69)) & ~0x3f) == 0 && ((1L << (_la - 69)) & ((1L << (CHAR_LITERAL - 69)) | (1L << (STRING_LITERAL - 69)) | (1L << (RAW_STRING_LITERAL - 69)) | (1L << (BYTE_LITERAL - 69)) | (1L << (BYTE_STRING_LITERAL - 69)) | (1L << (RAW_BYTE_STRING_LITERAL - 69)) | (1L << (INTEGER_LITERAL - 69)) | (1L << (FLOAT_LITERAL - 69)) | (1L << (LIFETIME_OR_LABEL - 69)) | (1L << (MINUS - 69)) | (1L << (STAR - 69)) | (1L << (NOT - 69)) | (1L << (AND - 69)) | (1L << (OR - 69)) | (1L << (ANDAND - 69)) | (1L << (OROR - 69)) | (1L << (LT - 69)) | (1L << (DOTDOT - 69)) | (1L << (DOTDOTEQ - 69)) | (1L << (PATHSEP - 69)) | (1L << (POUND - 69)) | (1L << (LCURLYBRACE - 69)) | (1L << (LSQUAREBRACKET - 69)) | (1L << (LPAREN - 69)))) != 0)) {
							{
							State = 1414;
							callParams();
							}
						}

						State = 1417;
						Match(RPAREN);
						}
						break;
					case 14:
						{
						_localctx = new FieldExpressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 1419;
						if (!(Precpred(Context, 36))) throw new FailedPredicateException(this, "Precpred(Context, 36)");
						State = 1420;
						Match(DOT);
						State = 1421;
						identifier();
						}
						break;
					case 15:
						{
						_localctx = new TupleIndexingExpressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 1422;
						if (!(Precpred(Context, 35))) throw new FailedPredicateException(this, "Precpred(Context, 35)");
						State = 1423;
						Match(DOT);
						State = 1424;
						tupleIndex();
						}
						break;
					case 16:
						{
						_localctx = new AwaitExpressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 1425;
						if (!(Precpred(Context, 34))) throw new FailedPredicateException(this, "Precpred(Context, 34)");
						State = 1426;
						Match(DOT);
						State = 1427;
						Match(KW_AWAIT);
						}
						break;
					case 17:
						{
						_localctx = new CallExpressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 1428;
						if (!(Precpred(Context, 33))) throw new FailedPredicateException(this, "Precpred(Context, 33)");
						State = 1429;
						Match(LPAREN);
						State = 1431;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << KW_BREAK) | (1L << KW_CONTINUE) | (1L << KW_CRATE) | (1L << KW_FALSE) | (1L << KW_FOR) | (1L << KW_IF) | (1L << KW_LOOP) | (1L << KW_MATCH) | (1L << KW_MOVE) | (1L << KW_RETURN) | (1L << KW_SELFVALUE) | (1L << KW_SELFTYPE) | (1L << KW_SUPER) | (1L << KW_TRUE) | (1L << KW_UNSAFE) | (1L << KW_WHILE) | (1L << KW_ASYNC) | (1L << KW_MACRORULES) | (1L << KW_DOLLARCRATE) | (1L << NON_KEYWORD_IDENTIFIER) | (1L << RAW_IDENTIFIER))) != 0) || ((((_la - 69)) & ~0x3f) == 0 && ((1L << (_la - 69)) & ((1L << (CHAR_LITERAL - 69)) | (1L << (STRING_LITERAL - 69)) | (1L << (RAW_STRING_LITERAL - 69)) | (1L << (BYTE_LITERAL - 69)) | (1L << (BYTE_STRING_LITERAL - 69)) | (1L << (RAW_BYTE_STRING_LITERAL - 69)) | (1L << (INTEGER_LITERAL - 69)) | (1L << (FLOAT_LITERAL - 69)) | (1L << (LIFETIME_OR_LABEL - 69)) | (1L << (MINUS - 69)) | (1L << (STAR - 69)) | (1L << (NOT - 69)) | (1L << (AND - 69)) | (1L << (OR - 69)) | (1L << (ANDAND - 69)) | (1L << (OROR - 69)) | (1L << (LT - 69)) | (1L << (DOTDOT - 69)) | (1L << (DOTDOTEQ - 69)) | (1L << (PATHSEP - 69)) | (1L << (POUND - 69)) | (1L << (LCURLYBRACE - 69)) | (1L << (LSQUAREBRACKET - 69)) | (1L << (LPAREN - 69)))) != 0)) {
							{
							State = 1430;
							callParams();
							}
						}

						State = 1433;
						Match(RPAREN);
						}
						break;
					case 18:
						{
						_localctx = new IndexExpressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 1434;
						if (!(Precpred(Context, 32))) throw new FailedPredicateException(this, "Precpred(Context, 32)");
						State = 1435;
						Match(LSQUAREBRACKET);
						State = 1436;
						expression(0);
						State = 1437;
						Match(RSQUAREBRACKET);
						}
						break;
					case 19:
						{
						_localctx = new ErrorPropagationExpressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 1439;
						if (!(Precpred(Context, 31))) throw new FailedPredicateException(this, "Precpred(Context, 31)");
						State = 1440;
						Match(QUESTION);
						}
						break;
					case 20:
						{
						_localctx = new TypeCastExpressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 1441;
						if (!(Precpred(Context, 27))) throw new FailedPredicateException(this, "Precpred(Context, 27)");
						State = 1442;
						Match(KW_AS);
						State = 1443;
						typeNoBounds();
						}
						break;
					case 21:
						{
						_localctx = new RangeExpressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 1444;
						if (!(Precpred(Context, 17))) throw new FailedPredicateException(this, "Precpred(Context, 17)");
						State = 1445;
						Match(DOTDOT);
						State = 1447;
						ErrorHandler.Sync(this);
						switch ( Interpreter.AdaptivePredict(TokenStream,178,Context) ) {
						case 1:
							{
							State = 1446;
							expression(0);
							}
							break;
						}
						}
						break;
					}
					} 
				}
				State = 1453;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,180,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class ComparisonOperatorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQEQ() { return GetToken(RustParser.EQEQ, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NE() { return GetToken(RustParser.NE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GT() { return GetToken(RustParser.GT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LT() { return GetToken(RustParser.LT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GE() { return GetToken(RustParser.GE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LE() { return GetToken(RustParser.LE, 0); }
		public ComparisonOperatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_comparisonOperator; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRustParserListener typedListener = listener as IRustParserListener;
			if (typedListener != null) typedListener.EnterComparisonOperator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRustParserListener typedListener = listener as IRustParserListener;
			if (typedListener != null) typedListener.ExitComparisonOperator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRustParserVisitor<TResult> typedVisitor = visitor as IRustParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitComparisonOperator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ComparisonOperatorContext comparisonOperator() {
		ComparisonOperatorContext _localctx = new ComparisonOperatorContext(Context, State);
		EnterRule(_localctx, 156, RULE_comparisonOperator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1454;
			_la = TokenStream.LA(1);
			if ( !(((((_la - 104)) & ~0x3f) == 0 && ((1L << (_la - 104)) & ((1L << (EQEQ - 104)) | (1L << (NE - 104)) | (1L << (GT - 104)) | (1L << (LT - 104)) | (1L << (GE - 104)) | (1L << (LE - 104)))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CompoundAssignOperatorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PLUSEQ() { return GetToken(RustParser.PLUSEQ, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUSEQ() { return GetToken(RustParser.MINUSEQ, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STAREQ() { return GetToken(RustParser.STAREQ, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SLASHEQ() { return GetToken(RustParser.SLASHEQ, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PERCENTEQ() { return GetToken(RustParser.PERCENTEQ, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ANDEQ() { return GetToken(RustParser.ANDEQ, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OREQ() { return GetToken(RustParser.OREQ, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CARETEQ() { return GetToken(RustParser.CARETEQ, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SHLEQ() { return GetToken(RustParser.SHLEQ, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SHREQ() { return GetToken(RustParser.SHREQ, 0); }
		public CompoundAssignOperatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_compoundAssignOperator; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRustParserListener typedListener = listener as IRustParserListener;
			if (typedListener != null) typedListener.EnterCompoundAssignOperator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRustParserListener typedListener = listener as IRustParserListener;
			if (typedListener != null) typedListener.ExitCompoundAssignOperator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRustParserVisitor<TResult> typedVisitor = visitor as IRustParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCompoundAssignOperator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CompoundAssignOperatorContext compoundAssignOperator() {
		CompoundAssignOperatorContext _localctx = new CompoundAssignOperatorContext(Context, State);
		EnterRule(_localctx, 158, RULE_compoundAssignOperator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1456;
			_la = TokenStream.LA(1);
			if ( !(((((_la - 93)) & ~0x3f) == 0 && ((1L << (_la - 93)) & ((1L << (PLUSEQ - 93)) | (1L << (MINUSEQ - 93)) | (1L << (STAREQ - 93)) | (1L << (SLASHEQ - 93)) | (1L << (PERCENTEQ - 93)) | (1L << (CARETEQ - 93)) | (1L << (ANDEQ - 93)) | (1L << (OREQ - 93)) | (1L << (SHLEQ - 93)) | (1L << (SHREQ - 93)))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionWithBlockContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionWithBlockContext expressionWithBlock() {
			return GetRuleContext<ExpressionWithBlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public OuterAttributeContext[] outerAttribute() {
			return GetRuleContexts<OuterAttributeContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public OuterAttributeContext outerAttribute(int i) {
			return GetRuleContext<OuterAttributeContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BlockExpressionContext blockExpression() {
			return GetRuleContext<BlockExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AsyncBlockExpressionContext asyncBlockExpression() {
			return GetRuleContext<AsyncBlockExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public UnsafeBlockExpressionContext unsafeBlockExpression() {
			return GetRuleContext<UnsafeBlockExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LoopExpressionContext loopExpression() {
			return GetRuleContext<LoopExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IfExpressionContext ifExpression() {
			return GetRuleContext<IfExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IfLetExpressionContext ifLetExpression() {
			return GetRuleContext<IfLetExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MatchExpressionContext matchExpression() {
			return GetRuleContext<MatchExpressionContext>(0);
		}
		public ExpressionWithBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expressionWithBlock; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRustParserListener typedListener = listener as IRustParserListener;
			if (typedListener != null) typedListener.EnterExpressionWithBlock(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRustParserListener typedListener = listener as IRustParserListener;
			if (typedListener != null) typedListener.ExitExpressionWithBlock(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRustParserVisitor<TResult> typedVisitor = visitor as IRustParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpressionWithBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionWithBlockContext expressionWithBlock() {
		ExpressionWithBlockContext _localctx = new ExpressionWithBlockContext(Context, State);
		EnterRule(_localctx, 160, RULE_expressionWithBlock);
		try {
			int _alt;
			State = 1472;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,182,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1459;
				ErrorHandler.Sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						State = 1458;
						outerAttribute();
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 1461;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,181,Context);
				} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
				State = 1463;
				expressionWithBlock();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1465;
				blockExpression();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1466;
				asyncBlockExpression();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1467;
				unsafeBlockExpression();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 1468;
				loopExpression();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 1469;
				ifExpression();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 1470;
				ifLetExpression();
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 1471;
				matchExpression();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LiteralExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CHAR_LITERAL() { return GetToken(RustParser.CHAR_LITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_LITERAL() { return GetToken(RustParser.STRING_LITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RAW_STRING_LITERAL() { return GetToken(RustParser.RAW_STRING_LITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BYTE_LITERAL() { return GetToken(RustParser.BYTE_LITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BYTE_STRING_LITERAL() { return GetToken(RustParser.BYTE_STRING_LITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RAW_BYTE_STRING_LITERAL() { return GetToken(RustParser.RAW_BYTE_STRING_LITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTEGER_LITERAL() { return GetToken(RustParser.INTEGER_LITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FLOAT_LITERAL() { return GetToken(RustParser.FLOAT_LITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_TRUE() { return GetToken(RustParser.KW_TRUE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_FALSE() { return GetToken(RustParser.KW_FALSE, 0); }
		public LiteralExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_literalExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRustParserListener typedListener = listener as IRustParserListener;
			if (typedListener != null) typedListener.EnterLiteralExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRustParserListener typedListener = listener as IRustParserListener;
			if (typedListener != null) typedListener.ExitLiteralExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRustParserVisitor<TResult> typedVisitor = visitor as IRustParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLiteralExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LiteralExpressionContext literalExpression() {
		LiteralExpressionContext _localctx = new LiteralExpressionContext(Context, State);
		EnterRule(_localctx, 162, RULE_literalExpression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1474;
			_la = TokenStream.LA(1);
			if ( !(_la==KW_FALSE || _la==KW_TRUE || ((((_la - 69)) & ~0x3f) == 0 && ((1L << (_la - 69)) & ((1L << (CHAR_LITERAL - 69)) | (1L << (STRING_LITERAL - 69)) | (1L << (RAW_STRING_LITERAL - 69)) | (1L << (BYTE_LITERAL - 69)) | (1L << (BYTE_STRING_LITERAL - 69)) | (1L << (RAW_BYTE_STRING_LITERAL - 69)) | (1L << (INTEGER_LITERAL - 69)) | (1L << (FLOAT_LITERAL - 69)))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PathExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public PathInExpressionContext pathInExpression() {
			return GetRuleContext<PathInExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public QualifiedPathInExpressionContext qualifiedPathInExpression() {
			return GetRuleContext<QualifiedPathInExpressionContext>(0);
		}
		public PathExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pathExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRustParserListener typedListener = listener as IRustParserListener;
			if (typedListener != null) typedListener.EnterPathExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRustParserListener typedListener = listener as IRustParserListener;
			if (typedListener != null) typedListener.ExitPathExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRustParserVisitor<TResult> typedVisitor = visitor as IRustParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPathExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PathExpressionContext pathExpression() {
		PathExpressionContext _localctx = new PathExpressionContext(Context, State);
		EnterRule(_localctx, 164, RULE_pathExpression);
		try {
			State = 1478;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case KW_CRATE:
			case KW_SELFVALUE:
			case KW_SELFTYPE:
			case KW_SUPER:
			case KW_MACRORULES:
			case KW_DOLLARCRATE:
			case NON_KEYWORD_IDENTIFIER:
			case RAW_IDENTIFIER:
			case PATHSEP:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1476;
				pathInExpression();
				}
				break;
			case LT:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1477;
				qualifiedPathInExpression();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlockExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LCURLYBRACE() { return GetToken(RustParser.LCURLYBRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RCURLYBRACE() { return GetToken(RustParser.RCURLYBRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public InnerAttributeContext[] innerAttribute() {
			return GetRuleContexts<InnerAttributeContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public InnerAttributeContext innerAttribute(int i) {
			return GetRuleContext<InnerAttributeContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementsContext statements() {
			return GetRuleContext<StatementsContext>(0);
		}
		public BlockExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_blockExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRustParserListener typedListener = listener as IRustParserListener;
			if (typedListener != null) typedListener.EnterBlockExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRustParserListener typedListener = listener as IRustParserListener;
			if (typedListener != null) typedListener.ExitBlockExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRustParserVisitor<TResult> typedVisitor = visitor as IRustParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBlockExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BlockExpressionContext blockExpression() {
		BlockExpressionContext _localctx = new BlockExpressionContext(Context, State);
		EnterRule(_localctx, 166, RULE_blockExpression);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1480;
			Match(LCURLYBRACE);
			State = 1484;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,184,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 1481;
					innerAttribute();
					}
					} 
				}
				State = 1486;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,184,Context);
			}
			State = 1488;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << KW_BREAK) | (1L << KW_CONST) | (1L << KW_CONTINUE) | (1L << KW_CRATE) | (1L << KW_ENUM) | (1L << KW_EXTERN) | (1L << KW_FALSE) | (1L << KW_FN) | (1L << KW_FOR) | (1L << KW_IF) | (1L << KW_IMPL) | (1L << KW_LET) | (1L << KW_LOOP) | (1L << KW_MATCH) | (1L << KW_MOD) | (1L << KW_MOVE) | (1L << KW_PUB) | (1L << KW_RETURN) | (1L << KW_SELFVALUE) | (1L << KW_SELFTYPE) | (1L << KW_STATIC) | (1L << KW_STRUCT) | (1L << KW_SUPER) | (1L << KW_TRAIT) | (1L << KW_TRUE) | (1L << KW_TYPE) | (1L << KW_UNSAFE) | (1L << KW_USE) | (1L << KW_WHILE) | (1L << KW_ASYNC) | (1L << KW_UNION) | (1L << KW_MACRORULES) | (1L << KW_DOLLARCRATE) | (1L << NON_KEYWORD_IDENTIFIER) | (1L << RAW_IDENTIFIER))) != 0) || ((((_la - 69)) & ~0x3f) == 0 && ((1L << (_la - 69)) & ((1L << (CHAR_LITERAL - 69)) | (1L << (STRING_LITERAL - 69)) | (1L << (RAW_STRING_LITERAL - 69)) | (1L << (BYTE_LITERAL - 69)) | (1L << (BYTE_STRING_LITERAL - 69)) | (1L << (RAW_BYTE_STRING_LITERAL - 69)) | (1L << (INTEGER_LITERAL - 69)) | (1L << (FLOAT_LITERAL - 69)) | (1L << (LIFETIME_OR_LABEL - 69)) | (1L << (MINUS - 69)) | (1L << (STAR - 69)) | (1L << (NOT - 69)) | (1L << (AND - 69)) | (1L << (OR - 69)) | (1L << (ANDAND - 69)) | (1L << (OROR - 69)) | (1L << (LT - 69)) | (1L << (DOTDOT - 69)) | (1L << (DOTDOTEQ - 69)) | (1L << (SEMI - 69)) | (1L << (PATHSEP - 69)) | (1L << (POUND - 69)) | (1L << (LCURLYBRACE - 69)) | (1L << (LSQUAREBRACKET - 69)) | (1L << (LPAREN - 69)))) != 0)) {
				{
				State = 1487;
				statements();
				}
			}

			State = 1490;
			Match(RCURLYBRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public StatementsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statements; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRustParserListener typedListener = listener as IRustParserListener;
			if (typedListener != null) typedListener.EnterStatements(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRustParserListener typedListener = listener as IRustParserListener;
			if (typedListener != null) typedListener.ExitStatements(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRustParserVisitor<TResult> typedVisitor = visitor as IRustParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatements(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementsContext statements() {
		StatementsContext _localctx = new StatementsContext(Context, State);
		EnterRule(_localctx, 168, RULE_statements);
		int _la;
		try {
			int _alt;
			State = 1501;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,188,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1493;
				ErrorHandler.Sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						State = 1492;
						statement();
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 1495;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,186,Context);
				} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
				State = 1498;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << KW_BREAK) | (1L << KW_CONTINUE) | (1L << KW_CRATE) | (1L << KW_FALSE) | (1L << KW_FOR) | (1L << KW_IF) | (1L << KW_LOOP) | (1L << KW_MATCH) | (1L << KW_MOVE) | (1L << KW_RETURN) | (1L << KW_SELFVALUE) | (1L << KW_SELFTYPE) | (1L << KW_SUPER) | (1L << KW_TRUE) | (1L << KW_UNSAFE) | (1L << KW_WHILE) | (1L << KW_ASYNC) | (1L << KW_MACRORULES) | (1L << KW_DOLLARCRATE) | (1L << NON_KEYWORD_IDENTIFIER) | (1L << RAW_IDENTIFIER))) != 0) || ((((_la - 69)) & ~0x3f) == 0 && ((1L << (_la - 69)) & ((1L << (CHAR_LITERAL - 69)) | (1L << (STRING_LITERAL - 69)) | (1L << (RAW_STRING_LITERAL - 69)) | (1L << (BYTE_LITERAL - 69)) | (1L << (BYTE_STRING_LITERAL - 69)) | (1L << (RAW_BYTE_STRING_LITERAL - 69)) | (1L << (INTEGER_LITERAL - 69)) | (1L << (FLOAT_LITERAL - 69)) | (1L << (LIFETIME_OR_LABEL - 69)) | (1L << (MINUS - 69)) | (1L << (STAR - 69)) | (1L << (NOT - 69)) | (1L << (AND - 69)) | (1L << (OR - 69)) | (1L << (ANDAND - 69)) | (1L << (OROR - 69)) | (1L << (LT - 69)) | (1L << (DOTDOT - 69)) | (1L << (DOTDOTEQ - 69)) | (1L << (PATHSEP - 69)) | (1L << (POUND - 69)) | (1L << (LCURLYBRACE - 69)) | (1L << (LSQUAREBRACKET - 69)) | (1L << (LPAREN - 69)))) != 0)) {
					{
					State = 1497;
					expression(0);
					}
				}

				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1500;
				expression(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AsyncBlockExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_ASYNC() { return GetToken(RustParser.KW_ASYNC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BlockExpressionContext blockExpression() {
			return GetRuleContext<BlockExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_MOVE() { return GetToken(RustParser.KW_MOVE, 0); }
		public AsyncBlockExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_asyncBlockExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRustParserListener typedListener = listener as IRustParserListener;
			if (typedListener != null) typedListener.EnterAsyncBlockExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRustParserListener typedListener = listener as IRustParserListener;
			if (typedListener != null) typedListener.ExitAsyncBlockExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRustParserVisitor<TResult> typedVisitor = visitor as IRustParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAsyncBlockExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AsyncBlockExpressionContext asyncBlockExpression() {
		AsyncBlockExpressionContext _localctx = new AsyncBlockExpressionContext(Context, State);
		EnterRule(_localctx, 170, RULE_asyncBlockExpression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1503;
			Match(KW_ASYNC);
			State = 1505;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==KW_MOVE) {
				{
				State = 1504;
				Match(KW_MOVE);
				}
			}

			State = 1507;
			blockExpression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UnsafeBlockExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_UNSAFE() { return GetToken(RustParser.KW_UNSAFE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BlockExpressionContext blockExpression() {
			return GetRuleContext<BlockExpressionContext>(0);
		}
		public UnsafeBlockExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unsafeBlockExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRustParserListener typedListener = listener as IRustParserListener;
			if (typedListener != null) typedListener.EnterUnsafeBlockExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRustParserListener typedListener = listener as IRustParserListener;
			if (typedListener != null) typedListener.ExitUnsafeBlockExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRustParserVisitor<TResult> typedVisitor = visitor as IRustParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnsafeBlockExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UnsafeBlockExpressionContext unsafeBlockExpression() {
		UnsafeBlockExpressionContext _localctx = new UnsafeBlockExpressionContext(Context, State);
		EnterRule(_localctx, 172, RULE_unsafeBlockExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1509;
			Match(KW_UNSAFE);
			State = 1510;
			blockExpression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArrayElementsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(RustParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(RustParser.COMMA, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(RustParser.SEMI, 0); }
		public ArrayElementsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arrayElements; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRustParserListener typedListener = listener as IRustParserListener;
			if (typedListener != null) typedListener.EnterArrayElements(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRustParserListener typedListener = listener as IRustParserListener;
			if (typedListener != null) typedListener.ExitArrayElements(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRustParserVisitor<TResult> typedVisitor = visitor as IRustParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArrayElements(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArrayElementsContext arrayElements() {
		ArrayElementsContext _localctx = new ArrayElementsContext(Context, State);
		EnterRule(_localctx, 174, RULE_arrayElements);
		int _la;
		try {
			int _alt;
			State = 1527;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,192,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1512;
				expression(0);
				State = 1517;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,190,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 1513;
						Match(COMMA);
						State = 1514;
						expression(0);
						}
						} 
					}
					State = 1519;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,190,Context);
				}
				State = 1521;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==COMMA) {
					{
					State = 1520;
					Match(COMMA);
					}
				}

				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1523;
				expression(0);
				State = 1524;
				Match(SEMI);
				State = 1525;
				expression(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TupleElementsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(RustParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(RustParser.COMMA, i);
		}
		public TupleElementsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tupleElements; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRustParserListener typedListener = listener as IRustParserListener;
			if (typedListener != null) typedListener.EnterTupleElements(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRustParserListener typedListener = listener as IRustParserListener;
			if (typedListener != null) typedListener.ExitTupleElements(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRustParserVisitor<TResult> typedVisitor = visitor as IRustParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTupleElements(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TupleElementsContext tupleElements() {
		TupleElementsContext _localctx = new TupleElementsContext(Context, State);
		EnterRule(_localctx, 176, RULE_tupleElements);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1532;
			ErrorHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 1529;
					expression(0);
					State = 1530;
					Match(COMMA);
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 1534;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,193,Context);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
			State = 1537;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << KW_BREAK) | (1L << KW_CONTINUE) | (1L << KW_CRATE) | (1L << KW_FALSE) | (1L << KW_FOR) | (1L << KW_IF) | (1L << KW_LOOP) | (1L << KW_MATCH) | (1L << KW_MOVE) | (1L << KW_RETURN) | (1L << KW_SELFVALUE) | (1L << KW_SELFTYPE) | (1L << KW_SUPER) | (1L << KW_TRUE) | (1L << KW_UNSAFE) | (1L << KW_WHILE) | (1L << KW_ASYNC) | (1L << KW_MACRORULES) | (1L << KW_DOLLARCRATE) | (1L << NON_KEYWORD_IDENTIFIER) | (1L << RAW_IDENTIFIER))) != 0) || ((((_la - 69)) & ~0x3f) == 0 && ((1L << (_la - 69)) & ((1L << (CHAR_LITERAL - 69)) | (1L << (STRING_LITERAL - 69)) | (1L << (RAW_STRING_LITERAL - 69)) | (1L << (BYTE_LITERAL - 69)) | (1L << (BYTE_STRING_LITERAL - 69)) | (1L << (RAW_BYTE_STRING_LITERAL - 69)) | (1L << (INTEGER_LITERAL - 69)) | (1L << (FLOAT_LITERAL - 69)) | (1L << (LIFETIME_OR_LABEL - 69)) | (1L << (MINUS - 69)) | (1L << (STAR - 69)) | (1L << (NOT - 69)) | (1L << (AND - 69)) | (1L << (OR - 69)) | (1L << (ANDAND - 69)) | (1L << (OROR - 69)) | (1L << (LT - 69)) | (1L << (DOTDOT - 69)) | (1L << (DOTDOTEQ - 69)) | (1L << (PATHSEP - 69)) | (1L << (POUND - 69)) | (1L << (LCURLYBRACE - 69)) | (1L << (LSQUAREBRACKET - 69)) | (1L << (LPAREN - 69)))) != 0)) {
				{
				State = 1536;
				expression(0);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TupleIndexContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTEGER_LITERAL() { return GetToken(RustParser.INTEGER_LITERAL, 0); }
		public TupleIndexContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tupleIndex; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRustParserListener typedListener = listener as IRustParserListener;
			if (typedListener != null) typedListener.EnterTupleIndex(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRustParserListener typedListener = listener as IRustParserListener;
			if (typedListener != null) typedListener.ExitTupleIndex(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRustParserVisitor<TResult> typedVisitor = visitor as IRustParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTupleIndex(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TupleIndexContext tupleIndex() {
		TupleIndexContext _localctx = new TupleIndexContext(Context, State);
		EnterRule(_localctx, 178, RULE_tupleIndex);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1539;
			Match(INTEGER_LITERAL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StructExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StructExprStructContext structExprStruct() {
			return GetRuleContext<StructExprStructContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StructExprTupleContext structExprTuple() {
			return GetRuleContext<StructExprTupleContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StructExprUnitContext structExprUnit() {
			return GetRuleContext<StructExprUnitContext>(0);
		}
		public StructExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_structExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRustParserListener typedListener = listener as IRustParserListener;
			if (typedListener != null) typedListener.EnterStructExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRustParserListener typedListener = listener as IRustParserListener;
			if (typedListener != null) typedListener.ExitStructExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRustParserVisitor<TResult> typedVisitor = visitor as IRustParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStructExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StructExpressionContext structExpression() {
		StructExpressionContext _localctx = new StructExpressionContext(Context, State);
		EnterRule(_localctx, 180, RULE_structExpression);
		try {
			State = 1544;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,195,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1541;
				structExprStruct();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1542;
				structExprTuple();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1543;
				structExprUnit();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StructExprStructContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public PathInExpressionContext pathInExpression() {
			return GetRuleContext<PathInExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LCURLYBRACE() { return GetToken(RustParser.LCURLYBRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RCURLYBRACE() { return GetToken(RustParser.RCURLYBRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public InnerAttributeContext[] innerAttribute() {
			return GetRuleContexts<InnerAttributeContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public InnerAttributeContext innerAttribute(int i) {
			return GetRuleContext<InnerAttributeContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StructExprFieldsContext structExprFields() {
			return GetRuleContext<StructExprFieldsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StructBaseContext structBase() {
			return GetRuleContext<StructBaseContext>(0);
		}
		public StructExprStructContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_structExprStruct; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRustParserListener typedListener = listener as IRustParserListener;
			if (typedListener != null) typedListener.EnterStructExprStruct(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRustParserListener typedListener = listener as IRustParserListener;
			if (typedListener != null) typedListener.ExitStructExprStruct(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRustParserVisitor<TResult> typedVisitor = visitor as IRustParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStructExprStruct(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StructExprStructContext structExprStruct() {
		StructExprStructContext _localctx = new StructExprStructContext(Context, State);
		EnterRule(_localctx, 182, RULE_structExprStruct);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1546;
			pathInExpression();
			State = 1547;
			Match(LCURLYBRACE);
			State = 1551;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,196,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 1548;
					innerAttribute();
					}
					} 
				}
				State = 1553;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,196,Context);
			}
			State = 1556;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case KW_MACRORULES:
			case NON_KEYWORD_IDENTIFIER:
			case RAW_IDENTIFIER:
			case INTEGER_LITERAL:
			case POUND:
				{
				State = 1554;
				structExprFields();
				}
				break;
			case DOTDOT:
				{
				State = 1555;
				structBase();
				}
				break;
			case RCURLYBRACE:
				break;
			default:
				break;
			}
			State = 1558;
			Match(RCURLYBRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StructExprFieldsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StructExprFieldContext[] structExprField() {
			return GetRuleContexts<StructExprFieldContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StructExprFieldContext structExprField(int i) {
			return GetRuleContext<StructExprFieldContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(RustParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(RustParser.COMMA, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StructBaseContext structBase() {
			return GetRuleContext<StructBaseContext>(0);
		}
		public StructExprFieldsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_structExprFields; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRustParserListener typedListener = listener as IRustParserListener;
			if (typedListener != null) typedListener.EnterStructExprFields(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRustParserListener typedListener = listener as IRustParserListener;
			if (typedListener != null) typedListener.ExitStructExprFields(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRustParserVisitor<TResult> typedVisitor = visitor as IRustParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStructExprFields(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StructExprFieldsContext structExprFields() {
		StructExprFieldsContext _localctx = new StructExprFieldsContext(Context, State);
		EnterRule(_localctx, 184, RULE_structExprFields);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1560;
			structExprField();
			State = 1565;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,198,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 1561;
					Match(COMMA);
					State = 1562;
					structExprField();
					}
					} 
				}
				State = 1567;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,198,Context);
			}
			State = 1573;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,200,Context) ) {
			case 1:
				{
				State = 1568;
				Match(COMMA);
				State = 1569;
				structBase();
				}
				break;
			case 2:
				{
				State = 1571;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==COMMA) {
					{
					State = 1570;
					Match(COMMA);
					}
				}

				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StructExprFieldContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(RustParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public OuterAttributeContext[] outerAttribute() {
			return GetRuleContexts<OuterAttributeContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public OuterAttributeContext outerAttribute(int i) {
			return GetRuleContext<OuterAttributeContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TupleIndexContext tupleIndex() {
			return GetRuleContext<TupleIndexContext>(0);
		}
		public StructExprFieldContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_structExprField; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRustParserListener typedListener = listener as IRustParserListener;
			if (typedListener != null) typedListener.EnterStructExprField(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRustParserListener typedListener = listener as IRustParserListener;
			if (typedListener != null) typedListener.ExitStructExprField(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRustParserVisitor<TResult> typedVisitor = visitor as IRustParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStructExprField(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StructExprFieldContext structExprField() {
		StructExprFieldContext _localctx = new StructExprFieldContext(Context, State);
		EnterRule(_localctx, 186, RULE_structExprField);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1578;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==POUND) {
				{
				{
				State = 1575;
				outerAttribute();
				}
				}
				State = 1580;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 1589;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,203,Context) ) {
			case 1:
				{
				State = 1581;
				identifier();
				}
				break;
			case 2:
				{
				State = 1584;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case KW_MACRORULES:
				case NON_KEYWORD_IDENTIFIER:
				case RAW_IDENTIFIER:
					{
					State = 1582;
					identifier();
					}
					break;
				case INTEGER_LITERAL:
					{
					State = 1583;
					tupleIndex();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 1586;
				Match(COLON);
				State = 1587;
				expression(0);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StructBaseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOTDOT() { return GetToken(RustParser.DOTDOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public StructBaseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_structBase; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRustParserListener typedListener = listener as IRustParserListener;
			if (typedListener != null) typedListener.EnterStructBase(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRustParserListener typedListener = listener as IRustParserListener;
			if (typedListener != null) typedListener.ExitStructBase(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRustParserVisitor<TResult> typedVisitor = visitor as IRustParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStructBase(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StructBaseContext structBase() {
		StructBaseContext _localctx = new StructBaseContext(Context, State);
		EnterRule(_localctx, 188, RULE_structBase);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1591;
			Match(DOTDOT);
			State = 1592;
			expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StructExprTupleContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public PathInExpressionContext pathInExpression() {
			return GetRuleContext<PathInExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(RustParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(RustParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public InnerAttributeContext[] innerAttribute() {
			return GetRuleContexts<InnerAttributeContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public InnerAttributeContext innerAttribute(int i) {
			return GetRuleContext<InnerAttributeContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(RustParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(RustParser.COMMA, i);
		}
		public StructExprTupleContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_structExprTuple; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRustParserListener typedListener = listener as IRustParserListener;
			if (typedListener != null) typedListener.EnterStructExprTuple(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRustParserListener typedListener = listener as IRustParserListener;
			if (typedListener != null) typedListener.ExitStructExprTuple(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRustParserVisitor<TResult> typedVisitor = visitor as IRustParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStructExprTuple(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StructExprTupleContext structExprTuple() {
		StructExprTupleContext _localctx = new StructExprTupleContext(Context, State);
		EnterRule(_localctx, 190, RULE_structExprTuple);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1594;
			pathInExpression();
			State = 1595;
			Match(LPAREN);
			State = 1599;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,204,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 1596;
					innerAttribute();
					}
					} 
				}
				State = 1601;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,204,Context);
			}
			State = 1613;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << KW_BREAK) | (1L << KW_CONTINUE) | (1L << KW_CRATE) | (1L << KW_FALSE) | (1L << KW_FOR) | (1L << KW_IF) | (1L << KW_LOOP) | (1L << KW_MATCH) | (1L << KW_MOVE) | (1L << KW_RETURN) | (1L << KW_SELFVALUE) | (1L << KW_SELFTYPE) | (1L << KW_SUPER) | (1L << KW_TRUE) | (1L << KW_UNSAFE) | (1L << KW_WHILE) | (1L << KW_ASYNC) | (1L << KW_MACRORULES) | (1L << KW_DOLLARCRATE) | (1L << NON_KEYWORD_IDENTIFIER) | (1L << RAW_IDENTIFIER))) != 0) || ((((_la - 69)) & ~0x3f) == 0 && ((1L << (_la - 69)) & ((1L << (CHAR_LITERAL - 69)) | (1L << (STRING_LITERAL - 69)) | (1L << (RAW_STRING_LITERAL - 69)) | (1L << (BYTE_LITERAL - 69)) | (1L << (BYTE_STRING_LITERAL - 69)) | (1L << (RAW_BYTE_STRING_LITERAL - 69)) | (1L << (INTEGER_LITERAL - 69)) | (1L << (FLOAT_LITERAL - 69)) | (1L << (LIFETIME_OR_LABEL - 69)) | (1L << (MINUS - 69)) | (1L << (STAR - 69)) | (1L << (NOT - 69)) | (1L << (AND - 69)) | (1L << (OR - 69)) | (1L << (ANDAND - 69)) | (1L << (OROR - 69)) | (1L << (LT - 69)) | (1L << (DOTDOT - 69)) | (1L << (DOTDOTEQ - 69)) | (1L << (PATHSEP - 69)) | (1L << (POUND - 69)) | (1L << (LCURLYBRACE - 69)) | (1L << (LSQUAREBRACKET - 69)) | (1L << (LPAREN - 69)))) != 0)) {
				{
				State = 1602;
				expression(0);
				State = 1607;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,205,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 1603;
						Match(COMMA);
						State = 1604;
						expression(0);
						}
						} 
					}
					State = 1609;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,205,Context);
				}
				State = 1611;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==COMMA) {
					{
					State = 1610;
					Match(COMMA);
					}
				}

				}
			}

			State = 1615;
			Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StructExprUnitContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public PathInExpressionContext pathInExpression() {
			return GetRuleContext<PathInExpressionContext>(0);
		}
		public StructExprUnitContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_structExprUnit; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRustParserListener typedListener = listener as IRustParserListener;
			if (typedListener != null) typedListener.EnterStructExprUnit(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRustParserListener typedListener = listener as IRustParserListener;
			if (typedListener != null) typedListener.ExitStructExprUnit(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRustParserVisitor<TResult> typedVisitor = visitor as IRustParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStructExprUnit(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StructExprUnitContext structExprUnit() {
		StructExprUnitContext _localctx = new StructExprUnitContext(Context, State);
		EnterRule(_localctx, 192, RULE_structExprUnit);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1617;
			pathInExpression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EnumerationVariantExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public EnumExprStructContext enumExprStruct() {
			return GetRuleContext<EnumExprStructContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public EnumExprTupleContext enumExprTuple() {
			return GetRuleContext<EnumExprTupleContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public EnumExprFieldlessContext enumExprFieldless() {
			return GetRuleContext<EnumExprFieldlessContext>(0);
		}
		public EnumerationVariantExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enumerationVariantExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRustParserListener typedListener = listener as IRustParserListener;
			if (typedListener != null) typedListener.EnterEnumerationVariantExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRustParserListener typedListener = listener as IRustParserListener;
			if (typedListener != null) typedListener.ExitEnumerationVariantExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRustParserVisitor<TResult> typedVisitor = visitor as IRustParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEnumerationVariantExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EnumerationVariantExpressionContext enumerationVariantExpression() {
		EnumerationVariantExpressionContext _localctx = new EnumerationVariantExpressionContext(Context, State);
		EnterRule(_localctx, 194, RULE_enumerationVariantExpression);
		try {
			State = 1622;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,208,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1619;
				enumExprStruct();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1620;
				enumExprTuple();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1621;
				enumExprFieldless();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EnumExprStructContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public PathInExpressionContext pathInExpression() {
			return GetRuleContext<PathInExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LCURLYBRACE() { return GetToken(RustParser.LCURLYBRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RCURLYBRACE() { return GetToken(RustParser.RCURLYBRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public EnumExprFieldsContext enumExprFields() {
			return GetRuleContext<EnumExprFieldsContext>(0);
		}
		public EnumExprStructContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enumExprStruct; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRustParserListener typedListener = listener as IRustParserListener;
			if (typedListener != null) typedListener.EnterEnumExprStruct(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRustParserListener typedListener = listener as IRustParserListener;
			if (typedListener != null) typedListener.ExitEnumExprStruct(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRustParserVisitor<TResult> typedVisitor = visitor as IRustParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEnumExprStruct(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EnumExprStructContext enumExprStruct() {
		EnumExprStructContext _localctx = new EnumExprStructContext(Context, State);
		EnterRule(_localctx, 196, RULE_enumExprStruct);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1624;
			pathInExpression();
			State = 1625;
			Match(LCURLYBRACE);
			State = 1627;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (((((_la - 54)) & ~0x3f) == 0 && ((1L << (_la - 54)) & ((1L << (KW_MACRORULES - 54)) | (1L << (NON_KEYWORD_IDENTIFIER - 54)) | (1L << (RAW_IDENTIFIER - 54)) | (1L << (INTEGER_LITERAL - 54)))) != 0)) {
				{
				State = 1626;
				enumExprFields();
				}
			}

			State = 1629;
			Match(RCURLYBRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EnumExprFieldsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public EnumExprFieldContext[] enumExprField() {
			return GetRuleContexts<EnumExprFieldContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public EnumExprFieldContext enumExprField(int i) {
			return GetRuleContext<EnumExprFieldContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(RustParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(RustParser.COMMA, i);
		}
		public EnumExprFieldsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enumExprFields; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRustParserListener typedListener = listener as IRustParserListener;
			if (typedListener != null) typedListener.EnterEnumExprFields(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRustParserListener typedListener = listener as IRustParserListener;
			if (typedListener != null) typedListener.ExitEnumExprFields(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRustParserVisitor<TResult> typedVisitor = visitor as IRustParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEnumExprFields(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EnumExprFieldsContext enumExprFields() {
		EnumExprFieldsContext _localctx = new EnumExprFieldsContext(Context, State);
		EnterRule(_localctx, 198, RULE_enumExprFields);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1631;
			enumExprField();
			State = 1636;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,210,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 1632;
					Match(COMMA);
					State = 1633;
					enumExprField();
					}
					} 
				}
				State = 1638;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,210,Context);
			}
			State = 1640;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==COMMA) {
				{
				State = 1639;
				Match(COMMA);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EnumExprFieldContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(RustParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TupleIndexContext tupleIndex() {
			return GetRuleContext<TupleIndexContext>(0);
		}
		public EnumExprFieldContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enumExprField; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRustParserListener typedListener = listener as IRustParserListener;
			if (typedListener != null) typedListener.EnterEnumExprField(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRustParserListener typedListener = listener as IRustParserListener;
			if (typedListener != null) typedListener.ExitEnumExprField(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRustParserVisitor<TResult> typedVisitor = visitor as IRustParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEnumExprField(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EnumExprFieldContext enumExprField() {
		EnumExprFieldContext _localctx = new EnumExprFieldContext(Context, State);
		EnterRule(_localctx, 200, RULE_enumExprField);
		try {
			State = 1650;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,213,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1642;
				identifier();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1645;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case KW_MACRORULES:
				case NON_KEYWORD_IDENTIFIER:
				case RAW_IDENTIFIER:
					{
					State = 1643;
					identifier();
					}
					break;
				case INTEGER_LITERAL:
					{
					State = 1644;
					tupleIndex();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 1647;
				Match(COLON);
				State = 1648;
				expression(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EnumExprTupleContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public PathInExpressionContext pathInExpression() {
			return GetRuleContext<PathInExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(RustParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(RustParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(RustParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(RustParser.COMMA, i);
		}
		public EnumExprTupleContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enumExprTuple; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRustParserListener typedListener = listener as IRustParserListener;
			if (typedListener != null) typedListener.EnterEnumExprTuple(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRustParserListener typedListener = listener as IRustParserListener;
			if (typedListener != null) typedListener.ExitEnumExprTuple(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRustParserVisitor<TResult> typedVisitor = visitor as IRustParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEnumExprTuple(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EnumExprTupleContext enumExprTuple() {
		EnumExprTupleContext _localctx = new EnumExprTupleContext(Context, State);
		EnterRule(_localctx, 202, RULE_enumExprTuple);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1652;
			pathInExpression();
			State = 1653;
			Match(LPAREN);
			State = 1665;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << KW_BREAK) | (1L << KW_CONTINUE) | (1L << KW_CRATE) | (1L << KW_FALSE) | (1L << KW_FOR) | (1L << KW_IF) | (1L << KW_LOOP) | (1L << KW_MATCH) | (1L << KW_MOVE) | (1L << KW_RETURN) | (1L << KW_SELFVALUE) | (1L << KW_SELFTYPE) | (1L << KW_SUPER) | (1L << KW_TRUE) | (1L << KW_UNSAFE) | (1L << KW_WHILE) | (1L << KW_ASYNC) | (1L << KW_MACRORULES) | (1L << KW_DOLLARCRATE) | (1L << NON_KEYWORD_IDENTIFIER) | (1L << RAW_IDENTIFIER))) != 0) || ((((_la - 69)) & ~0x3f) == 0 && ((1L << (_la - 69)) & ((1L << (CHAR_LITERAL - 69)) | (1L << (STRING_LITERAL - 69)) | (1L << (RAW_STRING_LITERAL - 69)) | (1L << (BYTE_LITERAL - 69)) | (1L << (BYTE_STRING_LITERAL - 69)) | (1L << (RAW_BYTE_STRING_LITERAL - 69)) | (1L << (INTEGER_LITERAL - 69)) | (1L << (FLOAT_LITERAL - 69)) | (1L << (LIFETIME_OR_LABEL - 69)) | (1L << (MINUS - 69)) | (1L << (STAR - 69)) | (1L << (NOT - 69)) | (1L << (AND - 69)) | (1L << (OR - 69)) | (1L << (ANDAND - 69)) | (1L << (OROR - 69)) | (1L << (LT - 69)) | (1L << (DOTDOT - 69)) | (1L << (DOTDOTEQ - 69)) | (1L << (PATHSEP - 69)) | (1L << (POUND - 69)) | (1L << (LCURLYBRACE - 69)) | (1L << (LSQUAREBRACKET - 69)) | (1L << (LPAREN - 69)))) != 0)) {
				{
				State = 1654;
				expression(0);
				State = 1659;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,214,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 1655;
						Match(COMMA);
						State = 1656;
						expression(0);
						}
						} 
					}
					State = 1661;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,214,Context);
				}
				State = 1663;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==COMMA) {
					{
					State = 1662;
					Match(COMMA);
					}
				}

				}
			}

			State = 1667;
			Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EnumExprFieldlessContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public PathInExpressionContext pathInExpression() {
			return GetRuleContext<PathInExpressionContext>(0);
		}
		public EnumExprFieldlessContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enumExprFieldless; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRustParserListener typedListener = listener as IRustParserListener;
			if (typedListener != null) typedListener.EnterEnumExprFieldless(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRustParserListener typedListener = listener as IRustParserListener;
			if (typedListener != null) typedListener.ExitEnumExprFieldless(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRustParserVisitor<TResult> typedVisitor = visitor as IRustParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEnumExprFieldless(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EnumExprFieldlessContext enumExprFieldless() {
		EnumExprFieldlessContext _localctx = new EnumExprFieldlessContext(Context, State);
		EnterRule(_localctx, 204, RULE_enumExprFieldless);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1669;
			pathInExpression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CallParamsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(RustParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(RustParser.COMMA, i);
		}
		public CallParamsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_callParams; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRustParserListener typedListener = listener as IRustParserListener;
			if (typedListener != null) typedListener.EnterCallParams(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRustParserListener typedListener = listener as IRustParserListener;
			if (typedListener != null) typedListener.ExitCallParams(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRustParserVisitor<TResult> typedVisitor = visitor as IRustParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCallParams(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CallParamsContext callParams() {
		CallParamsContext _localctx = new CallParamsContext(Context, State);
		EnterRule(_localctx, 206, RULE_callParams);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1671;
			expression(0);
			State = 1676;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,217,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 1672;
					Match(COMMA);
					State = 1673;
					expression(0);
					}
					} 
				}
				State = 1678;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,217,Context);
			}
			State = 1680;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==COMMA) {
				{
				State = 1679;
				Match(COMMA);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClosureExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OROR() { return GetToken(RustParser.OROR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] OR() { return GetTokens(RustParser.OR); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OR(int i) {
			return GetToken(RustParser.OR, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RARROW() { return GetToken(RustParser.RARROW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeNoBoundsContext typeNoBounds() {
			return GetRuleContext<TypeNoBoundsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BlockExpressionContext blockExpression() {
			return GetRuleContext<BlockExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_MOVE() { return GetToken(RustParser.KW_MOVE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ClosureParametersContext closureParameters() {
			return GetRuleContext<ClosureParametersContext>(0);
		}
		public ClosureExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_closureExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRustParserListener typedListener = listener as IRustParserListener;
			if (typedListener != null) typedListener.EnterClosureExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRustParserListener typedListener = listener as IRustParserListener;
			if (typedListener != null) typedListener.ExitClosureExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRustParserVisitor<TResult> typedVisitor = visitor as IRustParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClosureExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ClosureExpressionContext closureExpression() {
		ClosureExpressionContext _localctx = new ClosureExpressionContext(Context, State);
		EnterRule(_localctx, 208, RULE_closureExpression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1683;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==KW_MOVE) {
				{
				State = 1682;
				Match(KW_MOVE);
				}
			}

			State = 1691;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case OROR:
				{
				State = 1685;
				Match(OROR);
				}
				break;
			case OR:
				{
				State = 1686;
				Match(OR);
				State = 1688;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,220,Context) ) {
				case 1:
					{
					State = 1687;
					closureParameters();
					}
					break;
				}
				State = 1690;
				Match(OR);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 1698;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case KW_BREAK:
			case KW_CONTINUE:
			case KW_CRATE:
			case KW_FALSE:
			case KW_FOR:
			case KW_IF:
			case KW_LOOP:
			case KW_MATCH:
			case KW_MOVE:
			case KW_RETURN:
			case KW_SELFVALUE:
			case KW_SELFTYPE:
			case KW_SUPER:
			case KW_TRUE:
			case KW_UNSAFE:
			case KW_WHILE:
			case KW_ASYNC:
			case KW_MACRORULES:
			case KW_DOLLARCRATE:
			case NON_KEYWORD_IDENTIFIER:
			case RAW_IDENTIFIER:
			case CHAR_LITERAL:
			case STRING_LITERAL:
			case RAW_STRING_LITERAL:
			case BYTE_LITERAL:
			case BYTE_STRING_LITERAL:
			case RAW_BYTE_STRING_LITERAL:
			case INTEGER_LITERAL:
			case FLOAT_LITERAL:
			case LIFETIME_OR_LABEL:
			case MINUS:
			case STAR:
			case NOT:
			case AND:
			case OR:
			case ANDAND:
			case OROR:
			case LT:
			case DOTDOT:
			case DOTDOTEQ:
			case PATHSEP:
			case POUND:
			case LCURLYBRACE:
			case LSQUAREBRACKET:
			case LPAREN:
				{
				State = 1693;
				expression(0);
				}
				break;
			case RARROW:
				{
				State = 1694;
				Match(RARROW);
				State = 1695;
				typeNoBounds();
				State = 1696;
				blockExpression();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClosureParametersContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ClosureParamContext[] closureParam() {
			return GetRuleContexts<ClosureParamContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ClosureParamContext closureParam(int i) {
			return GetRuleContext<ClosureParamContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(RustParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(RustParser.COMMA, i);
		}
		public ClosureParametersContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_closureParameters; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRustParserListener typedListener = listener as IRustParserListener;
			if (typedListener != null) typedListener.EnterClosureParameters(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRustParserListener typedListener = listener as IRustParserListener;
			if (typedListener != null) typedListener.ExitClosureParameters(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRustParserVisitor<TResult> typedVisitor = visitor as IRustParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClosureParameters(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ClosureParametersContext closureParameters() {
		ClosureParametersContext _localctx = new ClosureParametersContext(Context, State);
		EnterRule(_localctx, 210, RULE_closureParameters);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1700;
			closureParam();
			State = 1705;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,223,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 1701;
					Match(COMMA);
					State = 1702;
					closureParam();
					}
					} 
				}
				State = 1707;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,223,Context);
			}
			State = 1709;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==COMMA) {
				{
				State = 1708;
				Match(COMMA);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClosureParamContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public PatternContext pattern() {
			return GetRuleContext<PatternContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public OuterAttributeContext[] outerAttribute() {
			return GetRuleContexts<OuterAttributeContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public OuterAttributeContext outerAttribute(int i) {
			return GetRuleContext<OuterAttributeContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(RustParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Type_Context type_() {
			return GetRuleContext<Type_Context>(0);
		}
		public ClosureParamContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_closureParam; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRustParserListener typedListener = listener as IRustParserListener;
			if (typedListener != null) typedListener.EnterClosureParam(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRustParserListener typedListener = listener as IRustParserListener;
			if (typedListener != null) typedListener.ExitClosureParam(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRustParserVisitor<TResult> typedVisitor = visitor as IRustParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClosureParam(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ClosureParamContext closureParam() {
		ClosureParamContext _localctx = new ClosureParamContext(Context, State);
		EnterRule(_localctx, 212, RULE_closureParam);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1714;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==POUND) {
				{
				{
				State = 1711;
				outerAttribute();
				}
				}
				State = 1716;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 1717;
			pattern();
			State = 1720;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==COLON) {
				{
				State = 1718;
				Match(COLON);
				State = 1719;
				type_();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LoopExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public InfiniteLoopExpressionContext infiniteLoopExpression() {
			return GetRuleContext<InfiniteLoopExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PredicateLoopExpressionContext predicateLoopExpression() {
			return GetRuleContext<PredicateLoopExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PredicatePatternLoopExpressionContext predicatePatternLoopExpression() {
			return GetRuleContext<PredicatePatternLoopExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IteratorLoopExpressionContext iteratorLoopExpression() {
			return GetRuleContext<IteratorLoopExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LoopLabelContext loopLabel() {
			return GetRuleContext<LoopLabelContext>(0);
		}
		public LoopExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_loopExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRustParserListener typedListener = listener as IRustParserListener;
			if (typedListener != null) typedListener.EnterLoopExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRustParserListener typedListener = listener as IRustParserListener;
			if (typedListener != null) typedListener.ExitLoopExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRustParserVisitor<TResult> typedVisitor = visitor as IRustParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLoopExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LoopExpressionContext loopExpression() {
		LoopExpressionContext _localctx = new LoopExpressionContext(Context, State);
		EnterRule(_localctx, 214, RULE_loopExpression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1723;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LIFETIME_OR_LABEL) {
				{
				State = 1722;
				loopLabel();
				}
			}

			State = 1729;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,228,Context) ) {
			case 1:
				{
				State = 1725;
				infiniteLoopExpression();
				}
				break;
			case 2:
				{
				State = 1726;
				predicateLoopExpression();
				}
				break;
			case 3:
				{
				State = 1727;
				predicatePatternLoopExpression();
				}
				break;
			case 4:
				{
				State = 1728;
				iteratorLoopExpression();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InfiniteLoopExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_LOOP() { return GetToken(RustParser.KW_LOOP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BlockExpressionContext blockExpression() {
			return GetRuleContext<BlockExpressionContext>(0);
		}
		public InfiniteLoopExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_infiniteLoopExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRustParserListener typedListener = listener as IRustParserListener;
			if (typedListener != null) typedListener.EnterInfiniteLoopExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRustParserListener typedListener = listener as IRustParserListener;
			if (typedListener != null) typedListener.ExitInfiniteLoopExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRustParserVisitor<TResult> typedVisitor = visitor as IRustParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInfiniteLoopExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InfiniteLoopExpressionContext infiniteLoopExpression() {
		InfiniteLoopExpressionContext _localctx = new InfiniteLoopExpressionContext(Context, State);
		EnterRule(_localctx, 216, RULE_infiniteLoopExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1731;
			Match(KW_LOOP);
			State = 1732;
			blockExpression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PredicateLoopExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_WHILE() { return GetToken(RustParser.KW_WHILE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BlockExpressionContext blockExpression() {
			return GetRuleContext<BlockExpressionContext>(0);
		}
		public PredicateLoopExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_predicateLoopExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRustParserListener typedListener = listener as IRustParserListener;
			if (typedListener != null) typedListener.EnterPredicateLoopExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRustParserListener typedListener = listener as IRustParserListener;
			if (typedListener != null) typedListener.ExitPredicateLoopExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRustParserVisitor<TResult> typedVisitor = visitor as IRustParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPredicateLoopExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PredicateLoopExpressionContext predicateLoopExpression() {
		PredicateLoopExpressionContext _localctx = new PredicateLoopExpressionContext(Context, State);
		EnterRule(_localctx, 218, RULE_predicateLoopExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1734;
			Match(KW_WHILE);
			State = 1735;
			expression(0);
			State = 1736;
			blockExpression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PredicatePatternLoopExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_WHILE() { return GetToken(RustParser.KW_WHILE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_LET() { return GetToken(RustParser.KW_LET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public PatternContext pattern() {
			return GetRuleContext<PatternContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQ() { return GetToken(RustParser.EQ, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BlockExpressionContext blockExpression() {
			return GetRuleContext<BlockExpressionContext>(0);
		}
		public PredicatePatternLoopExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_predicatePatternLoopExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRustParserListener typedListener = listener as IRustParserListener;
			if (typedListener != null) typedListener.EnterPredicatePatternLoopExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRustParserListener typedListener = listener as IRustParserListener;
			if (typedListener != null) typedListener.ExitPredicatePatternLoopExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRustParserVisitor<TResult> typedVisitor = visitor as IRustParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPredicatePatternLoopExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PredicatePatternLoopExpressionContext predicatePatternLoopExpression() {
		PredicatePatternLoopExpressionContext _localctx = new PredicatePatternLoopExpressionContext(Context, State);
		EnterRule(_localctx, 220, RULE_predicatePatternLoopExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1738;
			Match(KW_WHILE);
			State = 1739;
			Match(KW_LET);
			State = 1740;
			pattern();
			State = 1741;
			Match(EQ);
			State = 1742;
			expression(0);
			State = 1743;
			blockExpression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IteratorLoopExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_FOR() { return GetToken(RustParser.KW_FOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public PatternContext pattern() {
			return GetRuleContext<PatternContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_IN() { return GetToken(RustParser.KW_IN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BlockExpressionContext blockExpression() {
			return GetRuleContext<BlockExpressionContext>(0);
		}
		public IteratorLoopExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_iteratorLoopExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRustParserListener typedListener = listener as IRustParserListener;
			if (typedListener != null) typedListener.EnterIteratorLoopExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRustParserListener typedListener = listener as IRustParserListener;
			if (typedListener != null) typedListener.ExitIteratorLoopExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRustParserVisitor<TResult> typedVisitor = visitor as IRustParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIteratorLoopExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IteratorLoopExpressionContext iteratorLoopExpression() {
		IteratorLoopExpressionContext _localctx = new IteratorLoopExpressionContext(Context, State);
		EnterRule(_localctx, 222, RULE_iteratorLoopExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1745;
			Match(KW_FOR);
			State = 1746;
			pattern();
			State = 1747;
			Match(KW_IN);
			State = 1748;
			expression(0);
			State = 1749;
			blockExpression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LoopLabelContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LIFETIME_OR_LABEL() { return GetToken(RustParser.LIFETIME_OR_LABEL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(RustParser.COLON, 0); }
		public LoopLabelContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_loopLabel; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRustParserListener typedListener = listener as IRustParserListener;
			if (typedListener != null) typedListener.EnterLoopLabel(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRustParserListener typedListener = listener as IRustParserListener;
			if (typedListener != null) typedListener.ExitLoopLabel(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRustParserVisitor<TResult> typedVisitor = visitor as IRustParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLoopLabel(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LoopLabelContext loopLabel() {
		LoopLabelContext _localctx = new LoopLabelContext(Context, State);
		EnterRule(_localctx, 224, RULE_loopLabel);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1751;
			Match(LIFETIME_OR_LABEL);
			State = 1752;
			Match(COLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IfExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_IF() { return GetToken(RustParser.KW_IF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BlockExpressionContext[] blockExpression() {
			return GetRuleContexts<BlockExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public BlockExpressionContext blockExpression(int i) {
			return GetRuleContext<BlockExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_ELSE() { return GetToken(RustParser.KW_ELSE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IfExpressionContext ifExpression() {
			return GetRuleContext<IfExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IfLetExpressionContext ifLetExpression() {
			return GetRuleContext<IfLetExpressionContext>(0);
		}
		public IfExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ifExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRustParserListener typedListener = listener as IRustParserListener;
			if (typedListener != null) typedListener.EnterIfExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRustParserListener typedListener = listener as IRustParserListener;
			if (typedListener != null) typedListener.ExitIfExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRustParserVisitor<TResult> typedVisitor = visitor as IRustParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIfExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IfExpressionContext ifExpression() {
		IfExpressionContext _localctx = new IfExpressionContext(Context, State);
		EnterRule(_localctx, 226, RULE_ifExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1754;
			Match(KW_IF);
			State = 1755;
			expression(0);
			State = 1756;
			blockExpression();
			State = 1763;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,230,Context) ) {
			case 1:
				{
				State = 1757;
				Match(KW_ELSE);
				State = 1761;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,229,Context) ) {
				case 1:
					{
					State = 1758;
					blockExpression();
					}
					break;
				case 2:
					{
					State = 1759;
					ifExpression();
					}
					break;
				case 3:
					{
					State = 1760;
					ifLetExpression();
					}
					break;
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IfLetExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_IF() { return GetToken(RustParser.KW_IF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_LET() { return GetToken(RustParser.KW_LET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public PatternContext pattern() {
			return GetRuleContext<PatternContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQ() { return GetToken(RustParser.EQ, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BlockExpressionContext[] blockExpression() {
			return GetRuleContexts<BlockExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public BlockExpressionContext blockExpression(int i) {
			return GetRuleContext<BlockExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_ELSE() { return GetToken(RustParser.KW_ELSE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IfExpressionContext ifExpression() {
			return GetRuleContext<IfExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IfLetExpressionContext ifLetExpression() {
			return GetRuleContext<IfLetExpressionContext>(0);
		}
		public IfLetExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ifLetExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRustParserListener typedListener = listener as IRustParserListener;
			if (typedListener != null) typedListener.EnterIfLetExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRustParserListener typedListener = listener as IRustParserListener;
			if (typedListener != null) typedListener.ExitIfLetExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRustParserVisitor<TResult> typedVisitor = visitor as IRustParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIfLetExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IfLetExpressionContext ifLetExpression() {
		IfLetExpressionContext _localctx = new IfLetExpressionContext(Context, State);
		EnterRule(_localctx, 228, RULE_ifLetExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1765;
			Match(KW_IF);
			State = 1766;
			Match(KW_LET);
			State = 1767;
			pattern();
			State = 1768;
			Match(EQ);
			State = 1769;
			expression(0);
			State = 1770;
			blockExpression();
			State = 1777;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,232,Context) ) {
			case 1:
				{
				State = 1771;
				Match(KW_ELSE);
				State = 1775;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,231,Context) ) {
				case 1:
					{
					State = 1772;
					blockExpression();
					}
					break;
				case 2:
					{
					State = 1773;
					ifExpression();
					}
					break;
				case 3:
					{
					State = 1774;
					ifLetExpression();
					}
					break;
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MatchExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_MATCH() { return GetToken(RustParser.KW_MATCH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LCURLYBRACE() { return GetToken(RustParser.LCURLYBRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RCURLYBRACE() { return GetToken(RustParser.RCURLYBRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public InnerAttributeContext[] innerAttribute() {
			return GetRuleContexts<InnerAttributeContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public InnerAttributeContext innerAttribute(int i) {
			return GetRuleContext<InnerAttributeContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MatchArmsContext matchArms() {
			return GetRuleContext<MatchArmsContext>(0);
		}
		public MatchExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_matchExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRustParserListener typedListener = listener as IRustParserListener;
			if (typedListener != null) typedListener.EnterMatchExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRustParserListener typedListener = listener as IRustParserListener;
			if (typedListener != null) typedListener.ExitMatchExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRustParserVisitor<TResult> typedVisitor = visitor as IRustParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMatchExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MatchExpressionContext matchExpression() {
		MatchExpressionContext _localctx = new MatchExpressionContext(Context, State);
		EnterRule(_localctx, 230, RULE_matchExpression);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1779;
			Match(KW_MATCH);
			State = 1780;
			expression(0);
			State = 1781;
			Match(LCURLYBRACE);
			State = 1785;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,233,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 1782;
					innerAttribute();
					}
					} 
				}
				State = 1787;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,233,Context);
			}
			State = 1789;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << KW_CRATE) | (1L << KW_FALSE) | (1L << KW_MUT) | (1L << KW_REF) | (1L << KW_SELFVALUE) | (1L << KW_SELFTYPE) | (1L << KW_SUPER) | (1L << KW_TRUE) | (1L << KW_MACRORULES) | (1L << KW_DOLLARCRATE) | (1L << NON_KEYWORD_IDENTIFIER) | (1L << RAW_IDENTIFIER))) != 0) || ((((_la - 69)) & ~0x3f) == 0 && ((1L << (_la - 69)) & ((1L << (CHAR_LITERAL - 69)) | (1L << (STRING_LITERAL - 69)) | (1L << (RAW_STRING_LITERAL - 69)) | (1L << (BYTE_LITERAL - 69)) | (1L << (BYTE_STRING_LITERAL - 69)) | (1L << (RAW_BYTE_STRING_LITERAL - 69)) | (1L << (INTEGER_LITERAL - 69)) | (1L << (FLOAT_LITERAL - 69)) | (1L << (MINUS - 69)) | (1L << (AND - 69)) | (1L << (OR - 69)) | (1L << (ANDAND - 69)) | (1L << (LT - 69)) | (1L << (UNDERSCORE - 69)) | (1L << (DOTDOT - 69)) | (1L << (PATHSEP - 69)) | (1L << (POUND - 69)) | (1L << (LSQUAREBRACKET - 69)) | (1L << (LPAREN - 69)))) != 0)) {
				{
				State = 1788;
				matchArms();
				}
			}

			State = 1791;
			Match(RCURLYBRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MatchArmsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public MatchArmContext[] matchArm() {
			return GetRuleContexts<MatchArmContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public MatchArmContext matchArm(int i) {
			return GetRuleContext<MatchArmContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] FATARROW() { return GetTokens(RustParser.FATARROW); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FATARROW(int i) {
			return GetToken(RustParser.FATARROW, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MatchArmExpressionContext[] matchArmExpression() {
			return GetRuleContexts<MatchArmExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public MatchArmExpressionContext matchArmExpression(int i) {
			return GetRuleContext<MatchArmExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA() { return GetToken(RustParser.COMMA, 0); }
		public MatchArmsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_matchArms; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRustParserListener typedListener = listener as IRustParserListener;
			if (typedListener != null) typedListener.EnterMatchArms(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRustParserListener typedListener = listener as IRustParserListener;
			if (typedListener != null) typedListener.ExitMatchArms(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRustParserVisitor<TResult> typedVisitor = visitor as IRustParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMatchArms(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MatchArmsContext matchArms() {
		MatchArmsContext _localctx = new MatchArmsContext(Context, State);
		EnterRule(_localctx, 232, RULE_matchArms);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1799;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,235,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 1793;
					matchArm();
					State = 1794;
					Match(FATARROW);
					State = 1795;
					matchArmExpression();
					}
					} 
				}
				State = 1801;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,235,Context);
			}
			State = 1802;
			matchArm();
			State = 1803;
			Match(FATARROW);
			State = 1804;
			expression(0);
			State = 1806;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==COMMA) {
				{
				State = 1805;
				Match(COMMA);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MatchArmExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA() { return GetToken(RustParser.COMMA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionWithBlockContext expressionWithBlock() {
			return GetRuleContext<ExpressionWithBlockContext>(0);
		}
		public MatchArmExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_matchArmExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRustParserListener typedListener = listener as IRustParserListener;
			if (typedListener != null) typedListener.EnterMatchArmExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRustParserListener typedListener = listener as IRustParserListener;
			if (typedListener != null) typedListener.ExitMatchArmExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRustParserVisitor<TResult> typedVisitor = visitor as IRustParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMatchArmExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MatchArmExpressionContext matchArmExpression() {
		MatchArmExpressionContext _localctx = new MatchArmExpressionContext(Context, State);
		EnterRule(_localctx, 234, RULE_matchArmExpression);
		int _la;
		try {
			State = 1815;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,238,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1808;
				expression(0);
				State = 1809;
				Match(COMMA);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1811;
				expressionWithBlock();
				State = 1813;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==COMMA) {
					{
					State = 1812;
					Match(COMMA);
					}
				}

				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MatchArmContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public PatternContext pattern() {
			return GetRuleContext<PatternContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public OuterAttributeContext[] outerAttribute() {
			return GetRuleContexts<OuterAttributeContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public OuterAttributeContext outerAttribute(int i) {
			return GetRuleContext<OuterAttributeContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MatchArmGuardContext matchArmGuard() {
			return GetRuleContext<MatchArmGuardContext>(0);
		}
		public MatchArmContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_matchArm; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRustParserListener typedListener = listener as IRustParserListener;
			if (typedListener != null) typedListener.EnterMatchArm(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRustParserListener typedListener = listener as IRustParserListener;
			if (typedListener != null) typedListener.ExitMatchArm(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRustParserVisitor<TResult> typedVisitor = visitor as IRustParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMatchArm(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MatchArmContext matchArm() {
		MatchArmContext _localctx = new MatchArmContext(Context, State);
		EnterRule(_localctx, 236, RULE_matchArm);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1820;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==POUND) {
				{
				{
				State = 1817;
				outerAttribute();
				}
				}
				State = 1822;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 1823;
			pattern();
			State = 1825;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==KW_IF) {
				{
				State = 1824;
				matchArmGuard();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MatchArmGuardContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_IF() { return GetToken(RustParser.KW_IF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public MatchArmGuardContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_matchArmGuard; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRustParserListener typedListener = listener as IRustParserListener;
			if (typedListener != null) typedListener.EnterMatchArmGuard(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRustParserListener typedListener = listener as IRustParserListener;
			if (typedListener != null) typedListener.ExitMatchArmGuard(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRustParserVisitor<TResult> typedVisitor = visitor as IRustParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMatchArmGuard(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MatchArmGuardContext matchArmGuard() {
		MatchArmGuardContext _localctx = new MatchArmGuardContext(Context, State);
		EnterRule(_localctx, 238, RULE_matchArmGuard);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1827;
			Match(KW_IF);
			State = 1828;
			expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PatternContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public PatternNoTopAltContext[] patternNoTopAlt() {
			return GetRuleContexts<PatternNoTopAltContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public PatternNoTopAltContext patternNoTopAlt(int i) {
			return GetRuleContext<PatternNoTopAltContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] OR() { return GetTokens(RustParser.OR); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OR(int i) {
			return GetToken(RustParser.OR, i);
		}
		public PatternContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pattern; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRustParserListener typedListener = listener as IRustParserListener;
			if (typedListener != null) typedListener.EnterPattern(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRustParserListener typedListener = listener as IRustParserListener;
			if (typedListener != null) typedListener.ExitPattern(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRustParserVisitor<TResult> typedVisitor = visitor as IRustParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPattern(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PatternContext pattern() {
		PatternContext _localctx = new PatternContext(Context, State);
		EnterRule(_localctx, 240, RULE_pattern);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1831;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==OR) {
				{
				State = 1830;
				Match(OR);
				}
			}

			State = 1833;
			patternNoTopAlt();
			State = 1838;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,242,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 1834;
					Match(OR);
					State = 1835;
					patternNoTopAlt();
					}
					} 
				}
				State = 1840;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,242,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PatternNoTopAltContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public PatternWithoutRangeContext patternWithoutRange() {
			return GetRuleContext<PatternWithoutRangeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RangePatternContext rangePattern() {
			return GetRuleContext<RangePatternContext>(0);
		}
		public PatternNoTopAltContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_patternNoTopAlt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRustParserListener typedListener = listener as IRustParserListener;
			if (typedListener != null) typedListener.EnterPatternNoTopAlt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRustParserListener typedListener = listener as IRustParserListener;
			if (typedListener != null) typedListener.ExitPatternNoTopAlt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRustParserVisitor<TResult> typedVisitor = visitor as IRustParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPatternNoTopAlt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PatternNoTopAltContext patternNoTopAlt() {
		PatternNoTopAltContext _localctx = new PatternNoTopAltContext(Context, State);
		EnterRule(_localctx, 242, RULE_patternNoTopAlt);
		try {
			State = 1843;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,243,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1841;
				patternWithoutRange();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1842;
				rangePattern();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PatternWithoutRangeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public LiteralPatternContext literalPattern() {
			return GetRuleContext<LiteralPatternContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierPatternContext identifierPattern() {
			return GetRuleContext<IdentifierPatternContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public WildcardPatternContext wildcardPattern() {
			return GetRuleContext<WildcardPatternContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RestPatternContext restPattern() {
			return GetRuleContext<RestPatternContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ReferencePatternContext referencePattern() {
			return GetRuleContext<ReferencePatternContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StructPatternContext structPattern() {
			return GetRuleContext<StructPatternContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TupleStructPatternContext tupleStructPattern() {
			return GetRuleContext<TupleStructPatternContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TuplePatternContext tuplePattern() {
			return GetRuleContext<TuplePatternContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public GroupedPatternContext groupedPattern() {
			return GetRuleContext<GroupedPatternContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SlicePatternContext slicePattern() {
			return GetRuleContext<SlicePatternContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PathPatternContext pathPattern() {
			return GetRuleContext<PathPatternContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MacroInvocationContext macroInvocation() {
			return GetRuleContext<MacroInvocationContext>(0);
		}
		public PatternWithoutRangeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_patternWithoutRange; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRustParserListener typedListener = listener as IRustParserListener;
			if (typedListener != null) typedListener.EnterPatternWithoutRange(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRustParserListener typedListener = listener as IRustParserListener;
			if (typedListener != null) typedListener.ExitPatternWithoutRange(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRustParserVisitor<TResult> typedVisitor = visitor as IRustParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPatternWithoutRange(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PatternWithoutRangeContext patternWithoutRange() {
		PatternWithoutRangeContext _localctx = new PatternWithoutRangeContext(Context, State);
		EnterRule(_localctx, 244, RULE_patternWithoutRange);
		try {
			State = 1857;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,244,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1845;
				literalPattern();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1846;
				identifierPattern();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1847;
				wildcardPattern();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1848;
				restPattern();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 1849;
				referencePattern();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 1850;
				structPattern();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 1851;
				tupleStructPattern();
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 1852;
				tuplePattern();
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 1853;
				groupedPattern();
				}
				break;
			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 1854;
				slicePattern();
				}
				break;
			case 11:
				EnterOuterAlt(_localctx, 11);
				{
				State = 1855;
				pathPattern();
				}
				break;
			case 12:
				EnterOuterAlt(_localctx, 12);
				{
				State = 1856;
				macroInvocation();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LiteralPatternContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_TRUE() { return GetToken(RustParser.KW_TRUE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_FALSE() { return GetToken(RustParser.KW_FALSE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CHAR_LITERAL() { return GetToken(RustParser.CHAR_LITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BYTE_LITERAL() { return GetToken(RustParser.BYTE_LITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_LITERAL() { return GetToken(RustParser.STRING_LITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RAW_STRING_LITERAL() { return GetToken(RustParser.RAW_STRING_LITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BYTE_STRING_LITERAL() { return GetToken(RustParser.BYTE_STRING_LITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RAW_BYTE_STRING_LITERAL() { return GetToken(RustParser.RAW_BYTE_STRING_LITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTEGER_LITERAL() { return GetToken(RustParser.INTEGER_LITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUS() { return GetToken(RustParser.MINUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FLOAT_LITERAL() { return GetToken(RustParser.FLOAT_LITERAL, 0); }
		public LiteralPatternContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_literalPattern; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRustParserListener typedListener = listener as IRustParserListener;
			if (typedListener != null) typedListener.EnterLiteralPattern(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRustParserListener typedListener = listener as IRustParserListener;
			if (typedListener != null) typedListener.ExitLiteralPattern(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRustParserVisitor<TResult> typedVisitor = visitor as IRustParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLiteralPattern(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LiteralPatternContext literalPattern() {
		LiteralPatternContext _localctx = new LiteralPatternContext(Context, State);
		EnterRule(_localctx, 246, RULE_literalPattern);
		int _la;
		try {
			State = 1875;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,247,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1859;
				Match(KW_TRUE);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1860;
				Match(KW_FALSE);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1861;
				Match(CHAR_LITERAL);
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1862;
				Match(BYTE_LITERAL);
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 1863;
				Match(STRING_LITERAL);
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 1864;
				Match(RAW_STRING_LITERAL);
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 1865;
				Match(BYTE_STRING_LITERAL);
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 1866;
				Match(RAW_BYTE_STRING_LITERAL);
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 1868;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==MINUS) {
					{
					State = 1867;
					Match(MINUS);
					}
				}

				State = 1870;
				Match(INTEGER_LITERAL);
				}
				break;
			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 1872;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==MINUS) {
					{
					State = 1871;
					Match(MINUS);
					}
				}

				State = 1874;
				Match(FLOAT_LITERAL);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IdentifierPatternContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_REF() { return GetToken(RustParser.KW_REF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_MUT() { return GetToken(RustParser.KW_MUT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AT() { return GetToken(RustParser.AT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public PatternContext pattern() {
			return GetRuleContext<PatternContext>(0);
		}
		public IdentifierPatternContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_identifierPattern; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRustParserListener typedListener = listener as IRustParserListener;
			if (typedListener != null) typedListener.EnterIdentifierPattern(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRustParserListener typedListener = listener as IRustParserListener;
			if (typedListener != null) typedListener.ExitIdentifierPattern(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRustParserVisitor<TResult> typedVisitor = visitor as IRustParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIdentifierPattern(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IdentifierPatternContext identifierPattern() {
		IdentifierPatternContext _localctx = new IdentifierPatternContext(Context, State);
		EnterRule(_localctx, 248, RULE_identifierPattern);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1878;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==KW_REF) {
				{
				State = 1877;
				Match(KW_REF);
				}
			}

			State = 1881;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==KW_MUT) {
				{
				State = 1880;
				Match(KW_MUT);
				}
			}

			State = 1883;
			identifier();
			State = 1886;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==AT) {
				{
				State = 1884;
				Match(AT);
				State = 1885;
				pattern();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WildcardPatternContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNDERSCORE() { return GetToken(RustParser.UNDERSCORE, 0); }
		public WildcardPatternContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_wildcardPattern; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRustParserListener typedListener = listener as IRustParserListener;
			if (typedListener != null) typedListener.EnterWildcardPattern(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRustParserListener typedListener = listener as IRustParserListener;
			if (typedListener != null) typedListener.ExitWildcardPattern(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRustParserVisitor<TResult> typedVisitor = visitor as IRustParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWildcardPattern(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public WildcardPatternContext wildcardPattern() {
		WildcardPatternContext _localctx = new WildcardPatternContext(Context, State);
		EnterRule(_localctx, 250, RULE_wildcardPattern);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1888;
			Match(UNDERSCORE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RestPatternContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOTDOT() { return GetToken(RustParser.DOTDOT, 0); }
		public RestPatternContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_restPattern; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRustParserListener typedListener = listener as IRustParserListener;
			if (typedListener != null) typedListener.EnterRestPattern(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRustParserListener typedListener = listener as IRustParserListener;
			if (typedListener != null) typedListener.ExitRestPattern(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRustParserVisitor<TResult> typedVisitor = visitor as IRustParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRestPattern(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RestPatternContext restPattern() {
		RestPatternContext _localctx = new RestPatternContext(Context, State);
		EnterRule(_localctx, 252, RULE_restPattern);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1890;
			Match(DOTDOT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RangePatternContext : ParserRuleContext {
		public RangePatternContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rangePattern; } }
	 
		public RangePatternContext() { }
		public virtual void CopyFrom(RangePatternContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class InclusiveRangePatternContext : RangePatternContext {
		[System.Diagnostics.DebuggerNonUserCode] public RangePatternBoundContext[] rangePatternBound() {
			return GetRuleContexts<RangePatternBoundContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public RangePatternBoundContext rangePatternBound(int i) {
			return GetRuleContext<RangePatternBoundContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOTDOTEQ() { return GetToken(RustParser.DOTDOTEQ, 0); }
		public InclusiveRangePatternContext(RangePatternContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRustParserListener typedListener = listener as IRustParserListener;
			if (typedListener != null) typedListener.EnterInclusiveRangePattern(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRustParserListener typedListener = listener as IRustParserListener;
			if (typedListener != null) typedListener.ExitInclusiveRangePattern(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRustParserVisitor<TResult> typedVisitor = visitor as IRustParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInclusiveRangePattern(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ObsoleteRangePatternContext : RangePatternContext {
		[System.Diagnostics.DebuggerNonUserCode] public RangePatternBoundContext[] rangePatternBound() {
			return GetRuleContexts<RangePatternBoundContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public RangePatternBoundContext rangePatternBound(int i) {
			return GetRuleContext<RangePatternBoundContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOTDOTDOT() { return GetToken(RustParser.DOTDOTDOT, 0); }
		public ObsoleteRangePatternContext(RangePatternContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRustParserListener typedListener = listener as IRustParserListener;
			if (typedListener != null) typedListener.EnterObsoleteRangePattern(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRustParserListener typedListener = listener as IRustParserListener;
			if (typedListener != null) typedListener.ExitObsoleteRangePattern(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRustParserVisitor<TResult> typedVisitor = visitor as IRustParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitObsoleteRangePattern(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class HalfOpenRangePatternContext : RangePatternContext {
		[System.Diagnostics.DebuggerNonUserCode] public RangePatternBoundContext rangePatternBound() {
			return GetRuleContext<RangePatternBoundContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOTDOT() { return GetToken(RustParser.DOTDOT, 0); }
		public HalfOpenRangePatternContext(RangePatternContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRustParserListener typedListener = listener as IRustParserListener;
			if (typedListener != null) typedListener.EnterHalfOpenRangePattern(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRustParserListener typedListener = listener as IRustParserListener;
			if (typedListener != null) typedListener.ExitHalfOpenRangePattern(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRustParserVisitor<TResult> typedVisitor = visitor as IRustParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitHalfOpenRangePattern(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RangePatternContext rangePattern() {
		RangePatternContext _localctx = new RangePatternContext(Context, State);
		EnterRule(_localctx, 254, RULE_rangePattern);
		try {
			State = 1903;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,251,Context) ) {
			case 1:
				_localctx = new InclusiveRangePatternContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 1892;
				rangePatternBound();
				State = 1893;
				Match(DOTDOTEQ);
				State = 1894;
				rangePatternBound();
				}
				break;
			case 2:
				_localctx = new HalfOpenRangePatternContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 1896;
				rangePatternBound();
				State = 1897;
				Match(DOTDOT);
				}
				break;
			case 3:
				_localctx = new ObsoleteRangePatternContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 1899;
				rangePatternBound();
				State = 1900;
				Match(DOTDOTDOT);
				State = 1901;
				rangePatternBound();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RangePatternBoundContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CHAR_LITERAL() { return GetToken(RustParser.CHAR_LITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BYTE_LITERAL() { return GetToken(RustParser.BYTE_LITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTEGER_LITERAL() { return GetToken(RustParser.INTEGER_LITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUS() { return GetToken(RustParser.MINUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FLOAT_LITERAL() { return GetToken(RustParser.FLOAT_LITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public PathPatternContext pathPattern() {
			return GetRuleContext<PathPatternContext>(0);
		}
		public RangePatternBoundContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rangePatternBound; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRustParserListener typedListener = listener as IRustParserListener;
			if (typedListener != null) typedListener.EnterRangePatternBound(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRustParserListener typedListener = listener as IRustParserListener;
			if (typedListener != null) typedListener.ExitRangePatternBound(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRustParserVisitor<TResult> typedVisitor = visitor as IRustParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRangePatternBound(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RangePatternBoundContext rangePatternBound() {
		RangePatternBoundContext _localctx = new RangePatternBoundContext(Context, State);
		EnterRule(_localctx, 256, RULE_rangePatternBound);
		int _la;
		try {
			State = 1916;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,254,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1905;
				Match(CHAR_LITERAL);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1906;
				Match(BYTE_LITERAL);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1908;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==MINUS) {
					{
					State = 1907;
					Match(MINUS);
					}
				}

				State = 1910;
				Match(INTEGER_LITERAL);
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1912;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==MINUS) {
					{
					State = 1911;
					Match(MINUS);
					}
				}

				State = 1914;
				Match(FLOAT_LITERAL);
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 1915;
				pathPattern();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReferencePatternContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public PatternWithoutRangeContext patternWithoutRange() {
			return GetRuleContext<PatternWithoutRangeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AND() { return GetToken(RustParser.AND, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ANDAND() { return GetToken(RustParser.ANDAND, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_MUT() { return GetToken(RustParser.KW_MUT, 0); }
		public ReferencePatternContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_referencePattern; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRustParserListener typedListener = listener as IRustParserListener;
			if (typedListener != null) typedListener.EnterReferencePattern(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRustParserListener typedListener = listener as IRustParserListener;
			if (typedListener != null) typedListener.ExitReferencePattern(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRustParserVisitor<TResult> typedVisitor = visitor as IRustParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReferencePattern(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ReferencePatternContext referencePattern() {
		ReferencePatternContext _localctx = new ReferencePatternContext(Context, State);
		EnterRule(_localctx, 258, RULE_referencePattern);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1918;
			_la = TokenStream.LA(1);
			if ( !(_la==AND || _la==ANDAND) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 1920;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,255,Context) ) {
			case 1:
				{
				State = 1919;
				Match(KW_MUT);
				}
				break;
			}
			State = 1922;
			patternWithoutRange();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StructPatternContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public PathInExpressionContext pathInExpression() {
			return GetRuleContext<PathInExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LCURLYBRACE() { return GetToken(RustParser.LCURLYBRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RCURLYBRACE() { return GetToken(RustParser.RCURLYBRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StructPatternElementsContext structPatternElements() {
			return GetRuleContext<StructPatternElementsContext>(0);
		}
		public StructPatternContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_structPattern; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRustParserListener typedListener = listener as IRustParserListener;
			if (typedListener != null) typedListener.EnterStructPattern(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRustParserListener typedListener = listener as IRustParserListener;
			if (typedListener != null) typedListener.ExitStructPattern(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRustParserVisitor<TResult> typedVisitor = visitor as IRustParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStructPattern(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StructPatternContext structPattern() {
		StructPatternContext _localctx = new StructPatternContext(Context, State);
		EnterRule(_localctx, 260, RULE_structPattern);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1924;
			pathInExpression();
			State = 1925;
			Match(LCURLYBRACE);
			State = 1927;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << KW_MUT) | (1L << KW_REF) | (1L << KW_MACRORULES) | (1L << NON_KEYWORD_IDENTIFIER) | (1L << RAW_IDENTIFIER))) != 0) || ((((_la - 75)) & ~0x3f) == 0 && ((1L << (_la - 75)) & ((1L << (INTEGER_LITERAL - 75)) | (1L << (DOTDOT - 75)) | (1L << (POUND - 75)))) != 0)) {
				{
				State = 1926;
				structPatternElements();
				}
			}

			State = 1929;
			Match(RCURLYBRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StructPatternElementsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StructPatternFieldsContext structPatternFields() {
			return GetRuleContext<StructPatternFieldsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA() { return GetToken(RustParser.COMMA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StructPatternEtCeteraContext structPatternEtCetera() {
			return GetRuleContext<StructPatternEtCeteraContext>(0);
		}
		public StructPatternElementsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_structPatternElements; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRustParserListener typedListener = listener as IRustParserListener;
			if (typedListener != null) typedListener.EnterStructPatternElements(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRustParserListener typedListener = listener as IRustParserListener;
			if (typedListener != null) typedListener.ExitStructPatternElements(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRustParserVisitor<TResult> typedVisitor = visitor as IRustParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStructPatternElements(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StructPatternElementsContext structPatternElements() {
		StructPatternElementsContext _localctx = new StructPatternElementsContext(Context, State);
		EnterRule(_localctx, 262, RULE_structPatternElements);
		int _la;
		try {
			State = 1939;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,259,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1931;
				structPatternFields();
				State = 1936;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==COMMA) {
					{
					State = 1932;
					Match(COMMA);
					State = 1934;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==DOTDOT || _la==POUND) {
						{
						State = 1933;
						structPatternEtCetera();
						}
					}

					}
				}

				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1938;
				structPatternEtCetera();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StructPatternFieldsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StructPatternFieldContext[] structPatternField() {
			return GetRuleContexts<StructPatternFieldContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StructPatternFieldContext structPatternField(int i) {
			return GetRuleContext<StructPatternFieldContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(RustParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(RustParser.COMMA, i);
		}
		public StructPatternFieldsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_structPatternFields; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRustParserListener typedListener = listener as IRustParserListener;
			if (typedListener != null) typedListener.EnterStructPatternFields(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRustParserListener typedListener = listener as IRustParserListener;
			if (typedListener != null) typedListener.ExitStructPatternFields(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRustParserVisitor<TResult> typedVisitor = visitor as IRustParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStructPatternFields(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StructPatternFieldsContext structPatternFields() {
		StructPatternFieldsContext _localctx = new StructPatternFieldsContext(Context, State);
		EnterRule(_localctx, 264, RULE_structPatternFields);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1941;
			structPatternField();
			State = 1946;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,260,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 1942;
					Match(COMMA);
					State = 1943;
					structPatternField();
					}
					} 
				}
				State = 1948;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,260,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StructPatternFieldContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TupleIndexContext tupleIndex() {
			return GetRuleContext<TupleIndexContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(RustParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public PatternContext pattern() {
			return GetRuleContext<PatternContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public OuterAttributeContext[] outerAttribute() {
			return GetRuleContexts<OuterAttributeContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public OuterAttributeContext outerAttribute(int i) {
			return GetRuleContext<OuterAttributeContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_REF() { return GetToken(RustParser.KW_REF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_MUT() { return GetToken(RustParser.KW_MUT, 0); }
		public StructPatternFieldContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_structPatternField; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRustParserListener typedListener = listener as IRustParserListener;
			if (typedListener != null) typedListener.EnterStructPatternField(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRustParserListener typedListener = listener as IRustParserListener;
			if (typedListener != null) typedListener.ExitStructPatternField(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRustParserVisitor<TResult> typedVisitor = visitor as IRustParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStructPatternField(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StructPatternFieldContext structPatternField() {
		StructPatternFieldContext _localctx = new StructPatternFieldContext(Context, State);
		EnterRule(_localctx, 266, RULE_structPatternField);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1952;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==POUND) {
				{
				{
				State = 1949;
				outerAttribute();
				}
				}
				State = 1954;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 1970;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,264,Context) ) {
			case 1:
				{
				State = 1955;
				tupleIndex();
				State = 1956;
				Match(COLON);
				State = 1957;
				pattern();
				}
				break;
			case 2:
				{
				State = 1959;
				identifier();
				State = 1960;
				Match(COLON);
				State = 1961;
				pattern();
				}
				break;
			case 3:
				{
				State = 1964;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==KW_REF) {
					{
					State = 1963;
					Match(KW_REF);
					}
				}

				State = 1967;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==KW_MUT) {
					{
					State = 1966;
					Match(KW_MUT);
					}
				}

				State = 1969;
				identifier();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StructPatternEtCeteraContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOTDOT() { return GetToken(RustParser.DOTDOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public OuterAttributeContext[] outerAttribute() {
			return GetRuleContexts<OuterAttributeContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public OuterAttributeContext outerAttribute(int i) {
			return GetRuleContext<OuterAttributeContext>(i);
		}
		public StructPatternEtCeteraContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_structPatternEtCetera; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRustParserListener typedListener = listener as IRustParserListener;
			if (typedListener != null) typedListener.EnterStructPatternEtCetera(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRustParserListener typedListener = listener as IRustParserListener;
			if (typedListener != null) typedListener.ExitStructPatternEtCetera(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRustParserVisitor<TResult> typedVisitor = visitor as IRustParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStructPatternEtCetera(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StructPatternEtCeteraContext structPatternEtCetera() {
		StructPatternEtCeteraContext _localctx = new StructPatternEtCeteraContext(Context, State);
		EnterRule(_localctx, 268, RULE_structPatternEtCetera);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1975;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==POUND) {
				{
				{
				State = 1972;
				outerAttribute();
				}
				}
				State = 1977;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 1978;
			Match(DOTDOT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TupleStructPatternContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public PathInExpressionContext pathInExpression() {
			return GetRuleContext<PathInExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(RustParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(RustParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TupleStructItemsContext tupleStructItems() {
			return GetRuleContext<TupleStructItemsContext>(0);
		}
		public TupleStructPatternContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tupleStructPattern; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRustParserListener typedListener = listener as IRustParserListener;
			if (typedListener != null) typedListener.EnterTupleStructPattern(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRustParserListener typedListener = listener as IRustParserListener;
			if (typedListener != null) typedListener.ExitTupleStructPattern(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRustParserVisitor<TResult> typedVisitor = visitor as IRustParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTupleStructPattern(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TupleStructPatternContext tupleStructPattern() {
		TupleStructPatternContext _localctx = new TupleStructPatternContext(Context, State);
		EnterRule(_localctx, 270, RULE_tupleStructPattern);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1980;
			pathInExpression();
			State = 1981;
			Match(LPAREN);
			State = 1983;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << KW_CRATE) | (1L << KW_FALSE) | (1L << KW_MUT) | (1L << KW_REF) | (1L << KW_SELFVALUE) | (1L << KW_SELFTYPE) | (1L << KW_SUPER) | (1L << KW_TRUE) | (1L << KW_MACRORULES) | (1L << KW_DOLLARCRATE) | (1L << NON_KEYWORD_IDENTIFIER) | (1L << RAW_IDENTIFIER))) != 0) || ((((_la - 69)) & ~0x3f) == 0 && ((1L << (_la - 69)) & ((1L << (CHAR_LITERAL - 69)) | (1L << (STRING_LITERAL - 69)) | (1L << (RAW_STRING_LITERAL - 69)) | (1L << (BYTE_LITERAL - 69)) | (1L << (BYTE_STRING_LITERAL - 69)) | (1L << (RAW_BYTE_STRING_LITERAL - 69)) | (1L << (INTEGER_LITERAL - 69)) | (1L << (FLOAT_LITERAL - 69)) | (1L << (MINUS - 69)) | (1L << (AND - 69)) | (1L << (OR - 69)) | (1L << (ANDAND - 69)) | (1L << (LT - 69)) | (1L << (UNDERSCORE - 69)) | (1L << (DOTDOT - 69)) | (1L << (PATHSEP - 69)) | (1L << (LSQUAREBRACKET - 69)) | (1L << (LPAREN - 69)))) != 0)) {
				{
				State = 1982;
				tupleStructItems();
				}
			}

			State = 1985;
			Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TupleStructItemsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public PatternContext[] pattern() {
			return GetRuleContexts<PatternContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public PatternContext pattern(int i) {
			return GetRuleContext<PatternContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(RustParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(RustParser.COMMA, i);
		}
		public TupleStructItemsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tupleStructItems; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRustParserListener typedListener = listener as IRustParserListener;
			if (typedListener != null) typedListener.EnterTupleStructItems(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRustParserListener typedListener = listener as IRustParserListener;
			if (typedListener != null) typedListener.ExitTupleStructItems(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRustParserVisitor<TResult> typedVisitor = visitor as IRustParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTupleStructItems(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TupleStructItemsContext tupleStructItems() {
		TupleStructItemsContext _localctx = new TupleStructItemsContext(Context, State);
		EnterRule(_localctx, 272, RULE_tupleStructItems);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1987;
			pattern();
			State = 1992;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,267,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 1988;
					Match(COMMA);
					State = 1989;
					pattern();
					}
					} 
				}
				State = 1994;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,267,Context);
			}
			State = 1996;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==COMMA) {
				{
				State = 1995;
				Match(COMMA);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TuplePatternContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(RustParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(RustParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TuplePatternItemsContext tuplePatternItems() {
			return GetRuleContext<TuplePatternItemsContext>(0);
		}
		public TuplePatternContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tuplePattern; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRustParserListener typedListener = listener as IRustParserListener;
			if (typedListener != null) typedListener.EnterTuplePattern(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRustParserListener typedListener = listener as IRustParserListener;
			if (typedListener != null) typedListener.ExitTuplePattern(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRustParserVisitor<TResult> typedVisitor = visitor as IRustParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTuplePattern(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TuplePatternContext tuplePattern() {
		TuplePatternContext _localctx = new TuplePatternContext(Context, State);
		EnterRule(_localctx, 274, RULE_tuplePattern);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1998;
			Match(LPAREN);
			State = 2000;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << KW_CRATE) | (1L << KW_FALSE) | (1L << KW_MUT) | (1L << KW_REF) | (1L << KW_SELFVALUE) | (1L << KW_SELFTYPE) | (1L << KW_SUPER) | (1L << KW_TRUE) | (1L << KW_MACRORULES) | (1L << KW_DOLLARCRATE) | (1L << NON_KEYWORD_IDENTIFIER) | (1L << RAW_IDENTIFIER))) != 0) || ((((_la - 69)) & ~0x3f) == 0 && ((1L << (_la - 69)) & ((1L << (CHAR_LITERAL - 69)) | (1L << (STRING_LITERAL - 69)) | (1L << (RAW_STRING_LITERAL - 69)) | (1L << (BYTE_LITERAL - 69)) | (1L << (BYTE_STRING_LITERAL - 69)) | (1L << (RAW_BYTE_STRING_LITERAL - 69)) | (1L << (INTEGER_LITERAL - 69)) | (1L << (FLOAT_LITERAL - 69)) | (1L << (MINUS - 69)) | (1L << (AND - 69)) | (1L << (OR - 69)) | (1L << (ANDAND - 69)) | (1L << (LT - 69)) | (1L << (UNDERSCORE - 69)) | (1L << (DOTDOT - 69)) | (1L << (PATHSEP - 69)) | (1L << (LSQUAREBRACKET - 69)) | (1L << (LPAREN - 69)))) != 0)) {
				{
				State = 1999;
				tuplePatternItems();
				}
			}

			State = 2002;
			Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TuplePatternItemsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public PatternContext[] pattern() {
			return GetRuleContexts<PatternContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public PatternContext pattern(int i) {
			return GetRuleContext<PatternContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(RustParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(RustParser.COMMA, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RestPatternContext restPattern() {
			return GetRuleContext<RestPatternContext>(0);
		}
		public TuplePatternItemsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tuplePatternItems; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRustParserListener typedListener = listener as IRustParserListener;
			if (typedListener != null) typedListener.EnterTuplePatternItems(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRustParserListener typedListener = listener as IRustParserListener;
			if (typedListener != null) typedListener.ExitTuplePatternItems(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRustParserVisitor<TResult> typedVisitor = visitor as IRustParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTuplePatternItems(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TuplePatternItemsContext tuplePatternItems() {
		TuplePatternItemsContext _localctx = new TuplePatternItemsContext(Context, State);
		EnterRule(_localctx, 276, RULE_tuplePatternItems);
		int _la;
		try {
			int _alt;
			State = 2018;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,272,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2004;
				pattern();
				State = 2005;
				Match(COMMA);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2007;
				restPattern();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 2008;
				pattern();
				State = 2011;
				ErrorHandler.Sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						State = 2009;
						Match(COMMA);
						State = 2010;
						pattern();
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 2013;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,270,Context);
				} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
				State = 2016;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==COMMA) {
					{
					State = 2015;
					Match(COMMA);
					}
				}

				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GroupedPatternContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(RustParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public PatternContext pattern() {
			return GetRuleContext<PatternContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(RustParser.RPAREN, 0); }
		public GroupedPatternContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_groupedPattern; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRustParserListener typedListener = listener as IRustParserListener;
			if (typedListener != null) typedListener.EnterGroupedPattern(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRustParserListener typedListener = listener as IRustParserListener;
			if (typedListener != null) typedListener.ExitGroupedPattern(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRustParserVisitor<TResult> typedVisitor = visitor as IRustParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGroupedPattern(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public GroupedPatternContext groupedPattern() {
		GroupedPatternContext _localctx = new GroupedPatternContext(Context, State);
		EnterRule(_localctx, 278, RULE_groupedPattern);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2020;
			Match(LPAREN);
			State = 2021;
			pattern();
			State = 2022;
			Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SlicePatternContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LSQUAREBRACKET() { return GetToken(RustParser.LSQUAREBRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RSQUAREBRACKET() { return GetToken(RustParser.RSQUAREBRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SlicePatternItemsContext slicePatternItems() {
			return GetRuleContext<SlicePatternItemsContext>(0);
		}
		public SlicePatternContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_slicePattern; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRustParserListener typedListener = listener as IRustParserListener;
			if (typedListener != null) typedListener.EnterSlicePattern(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRustParserListener typedListener = listener as IRustParserListener;
			if (typedListener != null) typedListener.ExitSlicePattern(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRustParserVisitor<TResult> typedVisitor = visitor as IRustParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSlicePattern(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SlicePatternContext slicePattern() {
		SlicePatternContext _localctx = new SlicePatternContext(Context, State);
		EnterRule(_localctx, 280, RULE_slicePattern);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2024;
			Match(LSQUAREBRACKET);
			State = 2026;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << KW_CRATE) | (1L << KW_FALSE) | (1L << KW_MUT) | (1L << KW_REF) | (1L << KW_SELFVALUE) | (1L << KW_SELFTYPE) | (1L << KW_SUPER) | (1L << KW_TRUE) | (1L << KW_MACRORULES) | (1L << KW_DOLLARCRATE) | (1L << NON_KEYWORD_IDENTIFIER) | (1L << RAW_IDENTIFIER))) != 0) || ((((_la - 69)) & ~0x3f) == 0 && ((1L << (_la - 69)) & ((1L << (CHAR_LITERAL - 69)) | (1L << (STRING_LITERAL - 69)) | (1L << (RAW_STRING_LITERAL - 69)) | (1L << (BYTE_LITERAL - 69)) | (1L << (BYTE_STRING_LITERAL - 69)) | (1L << (RAW_BYTE_STRING_LITERAL - 69)) | (1L << (INTEGER_LITERAL - 69)) | (1L << (FLOAT_LITERAL - 69)) | (1L << (MINUS - 69)) | (1L << (AND - 69)) | (1L << (OR - 69)) | (1L << (ANDAND - 69)) | (1L << (LT - 69)) | (1L << (UNDERSCORE - 69)) | (1L << (DOTDOT - 69)) | (1L << (PATHSEP - 69)) | (1L << (LSQUAREBRACKET - 69)) | (1L << (LPAREN - 69)))) != 0)) {
				{
				State = 2025;
				slicePatternItems();
				}
			}

			State = 2028;
			Match(RSQUAREBRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SlicePatternItemsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public PatternContext[] pattern() {
			return GetRuleContexts<PatternContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public PatternContext pattern(int i) {
			return GetRuleContext<PatternContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(RustParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(RustParser.COMMA, i);
		}
		public SlicePatternItemsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_slicePatternItems; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRustParserListener typedListener = listener as IRustParserListener;
			if (typedListener != null) typedListener.EnterSlicePatternItems(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRustParserListener typedListener = listener as IRustParserListener;
			if (typedListener != null) typedListener.ExitSlicePatternItems(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRustParserVisitor<TResult> typedVisitor = visitor as IRustParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSlicePatternItems(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SlicePatternItemsContext slicePatternItems() {
		SlicePatternItemsContext _localctx = new SlicePatternItemsContext(Context, State);
		EnterRule(_localctx, 282, RULE_slicePatternItems);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 2030;
			pattern();
			State = 2035;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,274,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 2031;
					Match(COMMA);
					State = 2032;
					pattern();
					}
					} 
				}
				State = 2037;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,274,Context);
			}
			State = 2039;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==COMMA) {
				{
				State = 2038;
				Match(COMMA);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PathPatternContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public PathInExpressionContext pathInExpression() {
			return GetRuleContext<PathInExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public QualifiedPathInExpressionContext qualifiedPathInExpression() {
			return GetRuleContext<QualifiedPathInExpressionContext>(0);
		}
		public PathPatternContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pathPattern; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRustParserListener typedListener = listener as IRustParserListener;
			if (typedListener != null) typedListener.EnterPathPattern(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRustParserListener typedListener = listener as IRustParserListener;
			if (typedListener != null) typedListener.ExitPathPattern(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRustParserVisitor<TResult> typedVisitor = visitor as IRustParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPathPattern(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PathPatternContext pathPattern() {
		PathPatternContext _localctx = new PathPatternContext(Context, State);
		EnterRule(_localctx, 284, RULE_pathPattern);
		try {
			State = 2043;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case KW_CRATE:
			case KW_SELFVALUE:
			case KW_SELFTYPE:
			case KW_SUPER:
			case KW_MACRORULES:
			case KW_DOLLARCRATE:
			case NON_KEYWORD_IDENTIFIER:
			case RAW_IDENTIFIER:
			case PATHSEP:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2041;
				pathInExpression();
				}
				break;
			case LT:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2042;
				qualifiedPathInExpression();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Type_Context : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypeNoBoundsContext typeNoBounds() {
			return GetRuleContext<TypeNoBoundsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ImplTraitTypeContext implTraitType() {
			return GetRuleContext<ImplTraitTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TraitObjectTypeContext traitObjectType() {
			return GetRuleContext<TraitObjectTypeContext>(0);
		}
		public Type_Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type_; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRustParserListener typedListener = listener as IRustParserListener;
			if (typedListener != null) typedListener.EnterType_(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRustParserListener typedListener = listener as IRustParserListener;
			if (typedListener != null) typedListener.ExitType_(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRustParserVisitor<TResult> typedVisitor = visitor as IRustParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitType_(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Type_Context type_() {
		Type_Context _localctx = new Type_Context(Context, State);
		EnterRule(_localctx, 286, RULE_type_);
		try {
			State = 2048;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,277,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2045;
				typeNoBounds();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2046;
				implTraitType();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 2047;
				traitObjectType();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeNoBoundsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ParenthesizedTypeContext parenthesizedType() {
			return GetRuleContext<ParenthesizedTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ImplTraitTypeOneBoundContext implTraitTypeOneBound() {
			return GetRuleContext<ImplTraitTypeOneBoundContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TraitObjectTypeOneBoundContext traitObjectTypeOneBound() {
			return GetRuleContext<TraitObjectTypeOneBoundContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypePathContext typePath() {
			return GetRuleContext<TypePathContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TupleTypeContext tupleType() {
			return GetRuleContext<TupleTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NeverTypeContext neverType() {
			return GetRuleContext<NeverTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RawPointerTypeContext rawPointerType() {
			return GetRuleContext<RawPointerTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ReferenceTypeContext referenceType() {
			return GetRuleContext<ReferenceTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArrayTypeContext arrayType() {
			return GetRuleContext<ArrayTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SliceTypeContext sliceType() {
			return GetRuleContext<SliceTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public InferredTypeContext inferredType() {
			return GetRuleContext<InferredTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public QualifiedPathInTypeContext qualifiedPathInType() {
			return GetRuleContext<QualifiedPathInTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BareFunctionTypeContext bareFunctionType() {
			return GetRuleContext<BareFunctionTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MacroInvocationContext macroInvocation() {
			return GetRuleContext<MacroInvocationContext>(0);
		}
		public TypeNoBoundsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeNoBounds; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRustParserListener typedListener = listener as IRustParserListener;
			if (typedListener != null) typedListener.EnterTypeNoBounds(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRustParserListener typedListener = listener as IRustParserListener;
			if (typedListener != null) typedListener.ExitTypeNoBounds(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRustParserVisitor<TResult> typedVisitor = visitor as IRustParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeNoBounds(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeNoBoundsContext typeNoBounds() {
		TypeNoBoundsContext _localctx = new TypeNoBoundsContext(Context, State);
		EnterRule(_localctx, 288, RULE_typeNoBounds);
		try {
			State = 2064;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,278,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2050;
				parenthesizedType();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2051;
				implTraitTypeOneBound();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 2052;
				traitObjectTypeOneBound();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 2053;
				typePath();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 2054;
				tupleType();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 2055;
				neverType();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 2056;
				rawPointerType();
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 2057;
				referenceType();
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 2058;
				arrayType();
				}
				break;
			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 2059;
				sliceType();
				}
				break;
			case 11:
				EnterOuterAlt(_localctx, 11);
				{
				State = 2060;
				inferredType();
				}
				break;
			case 12:
				EnterOuterAlt(_localctx, 12);
				{
				State = 2061;
				qualifiedPathInType();
				}
				break;
			case 13:
				EnterOuterAlt(_localctx, 13);
				{
				State = 2062;
				bareFunctionType();
				}
				break;
			case 14:
				EnterOuterAlt(_localctx, 14);
				{
				State = 2063;
				macroInvocation();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParenthesizedTypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(RustParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Type_Context type_() {
			return GetRuleContext<Type_Context>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(RustParser.RPAREN, 0); }
		public ParenthesizedTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parenthesizedType; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRustParserListener typedListener = listener as IRustParserListener;
			if (typedListener != null) typedListener.EnterParenthesizedType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRustParserListener typedListener = listener as IRustParserListener;
			if (typedListener != null) typedListener.ExitParenthesizedType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRustParserVisitor<TResult> typedVisitor = visitor as IRustParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParenthesizedType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ParenthesizedTypeContext parenthesizedType() {
		ParenthesizedTypeContext _localctx = new ParenthesizedTypeContext(Context, State);
		EnterRule(_localctx, 290, RULE_parenthesizedType);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2066;
			Match(LPAREN);
			State = 2067;
			type_();
			State = 2068;
			Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NeverTypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT() { return GetToken(RustParser.NOT, 0); }
		public NeverTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_neverType; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRustParserListener typedListener = listener as IRustParserListener;
			if (typedListener != null) typedListener.EnterNeverType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRustParserListener typedListener = listener as IRustParserListener;
			if (typedListener != null) typedListener.ExitNeverType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRustParserVisitor<TResult> typedVisitor = visitor as IRustParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNeverType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NeverTypeContext neverType() {
		NeverTypeContext _localctx = new NeverTypeContext(Context, State);
		EnterRule(_localctx, 292, RULE_neverType);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2070;
			Match(NOT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TupleTypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(RustParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(RustParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Type_Context[] type_() {
			return GetRuleContexts<Type_Context>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Type_Context type_(int i) {
			return GetRuleContext<Type_Context>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(RustParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(RustParser.COMMA, i);
		}
		public TupleTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tupleType; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRustParserListener typedListener = listener as IRustParserListener;
			if (typedListener != null) typedListener.EnterTupleType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRustParserListener typedListener = listener as IRustParserListener;
			if (typedListener != null) typedListener.ExitTupleType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRustParserVisitor<TResult> typedVisitor = visitor as IRustParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTupleType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TupleTypeContext tupleType() {
		TupleTypeContext _localctx = new TupleTypeContext(Context, State);
		EnterRule(_localctx, 294, RULE_tupleType);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 2072;
			Match(LPAREN);
			State = 2083;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << KW_CRATE) | (1L << KW_EXTERN) | (1L << KW_FN) | (1L << KW_FOR) | (1L << KW_IMPL) | (1L << KW_SELFVALUE) | (1L << KW_SELFTYPE) | (1L << KW_SUPER) | (1L << KW_UNSAFE) | (1L << KW_DYN) | (1L << KW_STATICLIFETIME) | (1L << KW_MACRORULES) | (1L << KW_UNDERLINELIFETIME) | (1L << KW_DOLLARCRATE) | (1L << NON_KEYWORD_IDENTIFIER) | (1L << RAW_IDENTIFIER))) != 0) || ((((_la - 81)) & ~0x3f) == 0 && ((1L << (_la - 81)) & ((1L << (LIFETIME_OR_LABEL - 81)) | (1L << (STAR - 81)) | (1L << (NOT - 81)) | (1L << (AND - 81)) | (1L << (LT - 81)) | (1L << (UNDERSCORE - 81)) | (1L << (PATHSEP - 81)) | (1L << (QUESTION - 81)) | (1L << (LSQUAREBRACKET - 81)) | (1L << (LPAREN - 81)))) != 0)) {
				{
				State = 2076;
				ErrorHandler.Sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						State = 2073;
						type_();
						State = 2074;
						Match(COMMA);
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 2078;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,279,Context);
				} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
				State = 2081;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << KW_CRATE) | (1L << KW_EXTERN) | (1L << KW_FN) | (1L << KW_FOR) | (1L << KW_IMPL) | (1L << KW_SELFVALUE) | (1L << KW_SELFTYPE) | (1L << KW_SUPER) | (1L << KW_UNSAFE) | (1L << KW_DYN) | (1L << KW_STATICLIFETIME) | (1L << KW_MACRORULES) | (1L << KW_UNDERLINELIFETIME) | (1L << KW_DOLLARCRATE) | (1L << NON_KEYWORD_IDENTIFIER) | (1L << RAW_IDENTIFIER))) != 0) || ((((_la - 81)) & ~0x3f) == 0 && ((1L << (_la - 81)) & ((1L << (LIFETIME_OR_LABEL - 81)) | (1L << (STAR - 81)) | (1L << (NOT - 81)) | (1L << (AND - 81)) | (1L << (LT - 81)) | (1L << (UNDERSCORE - 81)) | (1L << (PATHSEP - 81)) | (1L << (QUESTION - 81)) | (1L << (LSQUAREBRACKET - 81)) | (1L << (LPAREN - 81)))) != 0)) {
					{
					State = 2080;
					type_();
					}
				}

				}
			}

			State = 2085;
			Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArrayTypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LSQUAREBRACKET() { return GetToken(RustParser.LSQUAREBRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Type_Context type_() {
			return GetRuleContext<Type_Context>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(RustParser.SEMI, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RSQUAREBRACKET() { return GetToken(RustParser.RSQUAREBRACKET, 0); }
		public ArrayTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arrayType; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRustParserListener typedListener = listener as IRustParserListener;
			if (typedListener != null) typedListener.EnterArrayType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRustParserListener typedListener = listener as IRustParserListener;
			if (typedListener != null) typedListener.ExitArrayType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRustParserVisitor<TResult> typedVisitor = visitor as IRustParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArrayType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArrayTypeContext arrayType() {
		ArrayTypeContext _localctx = new ArrayTypeContext(Context, State);
		EnterRule(_localctx, 296, RULE_arrayType);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2087;
			Match(LSQUAREBRACKET);
			State = 2088;
			type_();
			State = 2089;
			Match(SEMI);
			State = 2090;
			expression(0);
			State = 2091;
			Match(RSQUAREBRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SliceTypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LSQUAREBRACKET() { return GetToken(RustParser.LSQUAREBRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Type_Context type_() {
			return GetRuleContext<Type_Context>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RSQUAREBRACKET() { return GetToken(RustParser.RSQUAREBRACKET, 0); }
		public SliceTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sliceType; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRustParserListener typedListener = listener as IRustParserListener;
			if (typedListener != null) typedListener.EnterSliceType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRustParserListener typedListener = listener as IRustParserListener;
			if (typedListener != null) typedListener.ExitSliceType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRustParserVisitor<TResult> typedVisitor = visitor as IRustParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSliceType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SliceTypeContext sliceType() {
		SliceTypeContext _localctx = new SliceTypeContext(Context, State);
		EnterRule(_localctx, 298, RULE_sliceType);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2093;
			Match(LSQUAREBRACKET);
			State = 2094;
			type_();
			State = 2095;
			Match(RSQUAREBRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReferenceTypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AND() { return GetToken(RustParser.AND, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeNoBoundsContext typeNoBounds() {
			return GetRuleContext<TypeNoBoundsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LifetimeContext lifetime() {
			return GetRuleContext<LifetimeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_MUT() { return GetToken(RustParser.KW_MUT, 0); }
		public ReferenceTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_referenceType; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRustParserListener typedListener = listener as IRustParserListener;
			if (typedListener != null) typedListener.EnterReferenceType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRustParserListener typedListener = listener as IRustParserListener;
			if (typedListener != null) typedListener.ExitReferenceType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRustParserVisitor<TResult> typedVisitor = visitor as IRustParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReferenceType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ReferenceTypeContext referenceType() {
		ReferenceTypeContext _localctx = new ReferenceTypeContext(Context, State);
		EnterRule(_localctx, 300, RULE_referenceType);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2097;
			Match(AND);
			State = 2099;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (((((_la - 53)) & ~0x3f) == 0 && ((1L << (_la - 53)) & ((1L << (KW_STATICLIFETIME - 53)) | (1L << (KW_UNDERLINELIFETIME - 53)) | (1L << (LIFETIME_OR_LABEL - 53)))) != 0)) {
				{
				State = 2098;
				lifetime();
				}
			}

			State = 2102;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==KW_MUT) {
				{
				State = 2101;
				Match(KW_MUT);
				}
			}

			State = 2104;
			typeNoBounds();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RawPointerTypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STAR() { return GetToken(RustParser.STAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeNoBoundsContext typeNoBounds() {
			return GetRuleContext<TypeNoBoundsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_MUT() { return GetToken(RustParser.KW_MUT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_CONST() { return GetToken(RustParser.KW_CONST, 0); }
		public RawPointerTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rawPointerType; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRustParserListener typedListener = listener as IRustParserListener;
			if (typedListener != null) typedListener.EnterRawPointerType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRustParserListener typedListener = listener as IRustParserListener;
			if (typedListener != null) typedListener.ExitRawPointerType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRustParserVisitor<TResult> typedVisitor = visitor as IRustParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRawPointerType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RawPointerTypeContext rawPointerType() {
		RawPointerTypeContext _localctx = new RawPointerTypeContext(Context, State);
		EnterRule(_localctx, 302, RULE_rawPointerType);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2106;
			Match(STAR);
			State = 2107;
			_la = TokenStream.LA(1);
			if ( !(_la==KW_CONST || _la==KW_MUT) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 2108;
			typeNoBounds();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BareFunctionTypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FunctionTypeQualifiersContext functionTypeQualifiers() {
			return GetRuleContext<FunctionTypeQualifiersContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_FN() { return GetToken(RustParser.KW_FN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(RustParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(RustParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ForLifetimesContext forLifetimes() {
			return GetRuleContext<ForLifetimesContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionParametersMaybeNamedVariadicContext functionParametersMaybeNamedVariadic() {
			return GetRuleContext<FunctionParametersMaybeNamedVariadicContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BareFunctionReturnTypeContext bareFunctionReturnType() {
			return GetRuleContext<BareFunctionReturnTypeContext>(0);
		}
		public BareFunctionTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_bareFunctionType; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRustParserListener typedListener = listener as IRustParserListener;
			if (typedListener != null) typedListener.EnterBareFunctionType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRustParserListener typedListener = listener as IRustParserListener;
			if (typedListener != null) typedListener.ExitBareFunctionType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRustParserVisitor<TResult> typedVisitor = visitor as IRustParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBareFunctionType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BareFunctionTypeContext bareFunctionType() {
		BareFunctionTypeContext _localctx = new BareFunctionTypeContext(Context, State);
		EnterRule(_localctx, 304, RULE_bareFunctionType);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2111;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==KW_FOR) {
				{
				State = 2110;
				forLifetimes();
				}
			}

			State = 2113;
			functionTypeQualifiers();
			State = 2114;
			Match(KW_FN);
			State = 2115;
			Match(LPAREN);
			State = 2117;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << KW_CRATE) | (1L << KW_EXTERN) | (1L << KW_FN) | (1L << KW_FOR) | (1L << KW_IMPL) | (1L << KW_SELFVALUE) | (1L << KW_SELFTYPE) | (1L << KW_SUPER) | (1L << KW_UNSAFE) | (1L << KW_DYN) | (1L << KW_STATICLIFETIME) | (1L << KW_MACRORULES) | (1L << KW_UNDERLINELIFETIME) | (1L << KW_DOLLARCRATE) | (1L << NON_KEYWORD_IDENTIFIER) | (1L << RAW_IDENTIFIER))) != 0) || ((((_la - 81)) & ~0x3f) == 0 && ((1L << (_la - 81)) & ((1L << (LIFETIME_OR_LABEL - 81)) | (1L << (STAR - 81)) | (1L << (NOT - 81)) | (1L << (AND - 81)) | (1L << (LT - 81)) | (1L << (UNDERSCORE - 81)) | (1L << (PATHSEP - 81)) | (1L << (POUND - 81)) | (1L << (QUESTION - 81)) | (1L << (LSQUAREBRACKET - 81)) | (1L << (LPAREN - 81)))) != 0)) {
				{
				State = 2116;
				functionParametersMaybeNamedVariadic();
				}
			}

			State = 2119;
			Match(RPAREN);
			State = 2121;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,286,Context) ) {
			case 1:
				{
				State = 2120;
				bareFunctionReturnType();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionTypeQualifiersContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_UNSAFE() { return GetToken(RustParser.KW_UNSAFE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_EXTERN() { return GetToken(RustParser.KW_EXTERN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public AbiContext abi() {
			return GetRuleContext<AbiContext>(0);
		}
		public FunctionTypeQualifiersContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionTypeQualifiers; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRustParserListener typedListener = listener as IRustParserListener;
			if (typedListener != null) typedListener.EnterFunctionTypeQualifiers(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRustParserListener typedListener = listener as IRustParserListener;
			if (typedListener != null) typedListener.ExitFunctionTypeQualifiers(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRustParserVisitor<TResult> typedVisitor = visitor as IRustParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionTypeQualifiers(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionTypeQualifiersContext functionTypeQualifiers() {
		FunctionTypeQualifiersContext _localctx = new FunctionTypeQualifiersContext(Context, State);
		EnterRule(_localctx, 306, RULE_functionTypeQualifiers);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2124;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==KW_UNSAFE) {
				{
				State = 2123;
				Match(KW_UNSAFE);
				}
			}

			State = 2130;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==KW_EXTERN) {
				{
				State = 2126;
				Match(KW_EXTERN);
				State = 2128;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==STRING_LITERAL || _la==RAW_STRING_LITERAL) {
					{
					State = 2127;
					abi();
					}
				}

				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BareFunctionReturnTypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RARROW() { return GetToken(RustParser.RARROW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeNoBoundsContext typeNoBounds() {
			return GetRuleContext<TypeNoBoundsContext>(0);
		}
		public BareFunctionReturnTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_bareFunctionReturnType; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRustParserListener typedListener = listener as IRustParserListener;
			if (typedListener != null) typedListener.EnterBareFunctionReturnType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRustParserListener typedListener = listener as IRustParserListener;
			if (typedListener != null) typedListener.ExitBareFunctionReturnType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRustParserVisitor<TResult> typedVisitor = visitor as IRustParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBareFunctionReturnType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BareFunctionReturnTypeContext bareFunctionReturnType() {
		BareFunctionReturnTypeContext _localctx = new BareFunctionReturnTypeContext(Context, State);
		EnterRule(_localctx, 308, RULE_bareFunctionReturnType);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2132;
			Match(RARROW);
			State = 2133;
			typeNoBounds();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionParametersMaybeNamedVariadicContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public MaybeNamedFunctionParametersContext maybeNamedFunctionParameters() {
			return GetRuleContext<MaybeNamedFunctionParametersContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MaybeNamedFunctionParametersVariadicContext maybeNamedFunctionParametersVariadic() {
			return GetRuleContext<MaybeNamedFunctionParametersVariadicContext>(0);
		}
		public FunctionParametersMaybeNamedVariadicContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionParametersMaybeNamedVariadic; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRustParserListener typedListener = listener as IRustParserListener;
			if (typedListener != null) typedListener.EnterFunctionParametersMaybeNamedVariadic(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRustParserListener typedListener = listener as IRustParserListener;
			if (typedListener != null) typedListener.ExitFunctionParametersMaybeNamedVariadic(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRustParserVisitor<TResult> typedVisitor = visitor as IRustParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionParametersMaybeNamedVariadic(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionParametersMaybeNamedVariadicContext functionParametersMaybeNamedVariadic() {
		FunctionParametersMaybeNamedVariadicContext _localctx = new FunctionParametersMaybeNamedVariadicContext(Context, State);
		EnterRule(_localctx, 310, RULE_functionParametersMaybeNamedVariadic);
		try {
			State = 2137;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,290,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2135;
				maybeNamedFunctionParameters();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2136;
				maybeNamedFunctionParametersVariadic();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MaybeNamedFunctionParametersContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public MaybeNamedParamContext[] maybeNamedParam() {
			return GetRuleContexts<MaybeNamedParamContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public MaybeNamedParamContext maybeNamedParam(int i) {
			return GetRuleContext<MaybeNamedParamContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(RustParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(RustParser.COMMA, i);
		}
		public MaybeNamedFunctionParametersContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_maybeNamedFunctionParameters; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRustParserListener typedListener = listener as IRustParserListener;
			if (typedListener != null) typedListener.EnterMaybeNamedFunctionParameters(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRustParserListener typedListener = listener as IRustParserListener;
			if (typedListener != null) typedListener.ExitMaybeNamedFunctionParameters(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRustParserVisitor<TResult> typedVisitor = visitor as IRustParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMaybeNamedFunctionParameters(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MaybeNamedFunctionParametersContext maybeNamedFunctionParameters() {
		MaybeNamedFunctionParametersContext _localctx = new MaybeNamedFunctionParametersContext(Context, State);
		EnterRule(_localctx, 312, RULE_maybeNamedFunctionParameters);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 2139;
			maybeNamedParam();
			State = 2144;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,291,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 2140;
					Match(COMMA);
					State = 2141;
					maybeNamedParam();
					}
					} 
				}
				State = 2146;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,291,Context);
			}
			State = 2148;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==COMMA) {
				{
				State = 2147;
				Match(COMMA);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MaybeNamedParamContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Type_Context type_() {
			return GetRuleContext<Type_Context>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public OuterAttributeContext[] outerAttribute() {
			return GetRuleContexts<OuterAttributeContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public OuterAttributeContext outerAttribute(int i) {
			return GetRuleContext<OuterAttributeContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(RustParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNDERSCORE() { return GetToken(RustParser.UNDERSCORE, 0); }
		public MaybeNamedParamContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_maybeNamedParam; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRustParserListener typedListener = listener as IRustParserListener;
			if (typedListener != null) typedListener.EnterMaybeNamedParam(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRustParserListener typedListener = listener as IRustParserListener;
			if (typedListener != null) typedListener.ExitMaybeNamedParam(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRustParserVisitor<TResult> typedVisitor = visitor as IRustParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMaybeNamedParam(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MaybeNamedParamContext maybeNamedParam() {
		MaybeNamedParamContext _localctx = new MaybeNamedParamContext(Context, State);
		EnterRule(_localctx, 314, RULE_maybeNamedParam);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2153;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==POUND) {
				{
				{
				State = 2150;
				outerAttribute();
				}
				}
				State = 2155;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 2161;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,295,Context) ) {
			case 1:
				{
				State = 2158;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case KW_MACRORULES:
				case NON_KEYWORD_IDENTIFIER:
				case RAW_IDENTIFIER:
					{
					State = 2156;
					identifier();
					}
					break;
				case UNDERSCORE:
					{
					State = 2157;
					Match(UNDERSCORE);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 2160;
				Match(COLON);
				}
				break;
			}
			State = 2163;
			type_();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MaybeNamedFunctionParametersVariadicContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public MaybeNamedParamContext[] maybeNamedParam() {
			return GetRuleContexts<MaybeNamedParamContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public MaybeNamedParamContext maybeNamedParam(int i) {
			return GetRuleContext<MaybeNamedParamContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(RustParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(RustParser.COMMA, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOTDOTDOT() { return GetToken(RustParser.DOTDOTDOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public OuterAttributeContext[] outerAttribute() {
			return GetRuleContexts<OuterAttributeContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public OuterAttributeContext outerAttribute(int i) {
			return GetRuleContext<OuterAttributeContext>(i);
		}
		public MaybeNamedFunctionParametersVariadicContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_maybeNamedFunctionParametersVariadic; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRustParserListener typedListener = listener as IRustParserListener;
			if (typedListener != null) typedListener.EnterMaybeNamedFunctionParametersVariadic(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRustParserListener typedListener = listener as IRustParserListener;
			if (typedListener != null) typedListener.ExitMaybeNamedFunctionParametersVariadic(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRustParserVisitor<TResult> typedVisitor = visitor as IRustParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMaybeNamedFunctionParametersVariadic(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MaybeNamedFunctionParametersVariadicContext maybeNamedFunctionParametersVariadic() {
		MaybeNamedFunctionParametersVariadicContext _localctx = new MaybeNamedFunctionParametersVariadicContext(Context, State);
		EnterRule(_localctx, 316, RULE_maybeNamedFunctionParametersVariadic);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 2170;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,296,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 2165;
					maybeNamedParam();
					State = 2166;
					Match(COMMA);
					}
					} 
				}
				State = 2172;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,296,Context);
			}
			State = 2173;
			maybeNamedParam();
			State = 2174;
			Match(COMMA);
			State = 2178;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==POUND) {
				{
				{
				State = 2175;
				outerAttribute();
				}
				}
				State = 2180;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 2181;
			Match(DOTDOTDOT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TraitObjectTypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypeParamBoundsContext typeParamBounds() {
			return GetRuleContext<TypeParamBoundsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_DYN() { return GetToken(RustParser.KW_DYN, 0); }
		public TraitObjectTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_traitObjectType; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRustParserListener typedListener = listener as IRustParserListener;
			if (typedListener != null) typedListener.EnterTraitObjectType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRustParserListener typedListener = listener as IRustParserListener;
			if (typedListener != null) typedListener.ExitTraitObjectType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRustParserVisitor<TResult> typedVisitor = visitor as IRustParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTraitObjectType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TraitObjectTypeContext traitObjectType() {
		TraitObjectTypeContext _localctx = new TraitObjectTypeContext(Context, State);
		EnterRule(_localctx, 318, RULE_traitObjectType);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2184;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==KW_DYN) {
				{
				State = 2183;
				Match(KW_DYN);
				}
			}

			State = 2186;
			typeParamBounds();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TraitObjectTypeOneBoundContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TraitBoundContext traitBound() {
			return GetRuleContext<TraitBoundContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_DYN() { return GetToken(RustParser.KW_DYN, 0); }
		public TraitObjectTypeOneBoundContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_traitObjectTypeOneBound; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRustParserListener typedListener = listener as IRustParserListener;
			if (typedListener != null) typedListener.EnterTraitObjectTypeOneBound(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRustParserListener typedListener = listener as IRustParserListener;
			if (typedListener != null) typedListener.ExitTraitObjectTypeOneBound(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRustParserVisitor<TResult> typedVisitor = visitor as IRustParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTraitObjectTypeOneBound(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TraitObjectTypeOneBoundContext traitObjectTypeOneBound() {
		TraitObjectTypeOneBoundContext _localctx = new TraitObjectTypeOneBoundContext(Context, State);
		EnterRule(_localctx, 320, RULE_traitObjectTypeOneBound);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2189;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==KW_DYN) {
				{
				State = 2188;
				Match(KW_DYN);
				}
			}

			State = 2191;
			traitBound();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ImplTraitTypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_IMPL() { return GetToken(RustParser.KW_IMPL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeParamBoundsContext typeParamBounds() {
			return GetRuleContext<TypeParamBoundsContext>(0);
		}
		public ImplTraitTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_implTraitType; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRustParserListener typedListener = listener as IRustParserListener;
			if (typedListener != null) typedListener.EnterImplTraitType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRustParserListener typedListener = listener as IRustParserListener;
			if (typedListener != null) typedListener.ExitImplTraitType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRustParserVisitor<TResult> typedVisitor = visitor as IRustParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitImplTraitType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ImplTraitTypeContext implTraitType() {
		ImplTraitTypeContext _localctx = new ImplTraitTypeContext(Context, State);
		EnterRule(_localctx, 322, RULE_implTraitType);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2193;
			Match(KW_IMPL);
			State = 2194;
			typeParamBounds();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ImplTraitTypeOneBoundContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_IMPL() { return GetToken(RustParser.KW_IMPL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TraitBoundContext traitBound() {
			return GetRuleContext<TraitBoundContext>(0);
		}
		public ImplTraitTypeOneBoundContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_implTraitTypeOneBound; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRustParserListener typedListener = listener as IRustParserListener;
			if (typedListener != null) typedListener.EnterImplTraitTypeOneBound(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRustParserListener typedListener = listener as IRustParserListener;
			if (typedListener != null) typedListener.ExitImplTraitTypeOneBound(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRustParserVisitor<TResult> typedVisitor = visitor as IRustParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitImplTraitTypeOneBound(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ImplTraitTypeOneBoundContext implTraitTypeOneBound() {
		ImplTraitTypeOneBoundContext _localctx = new ImplTraitTypeOneBoundContext(Context, State);
		EnterRule(_localctx, 324, RULE_implTraitTypeOneBound);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2196;
			Match(KW_IMPL);
			State = 2197;
			traitBound();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InferredTypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNDERSCORE() { return GetToken(RustParser.UNDERSCORE, 0); }
		public InferredTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_inferredType; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRustParserListener typedListener = listener as IRustParserListener;
			if (typedListener != null) typedListener.EnterInferredType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRustParserListener typedListener = listener as IRustParserListener;
			if (typedListener != null) typedListener.ExitInferredType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRustParserVisitor<TResult> typedVisitor = visitor as IRustParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInferredType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InferredTypeContext inferredType() {
		InferredTypeContext _localctx = new InferredTypeContext(Context, State);
		EnterRule(_localctx, 326, RULE_inferredType);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2199;
			Match(UNDERSCORE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeParamBoundsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypeParamBoundContext[] typeParamBound() {
			return GetRuleContexts<TypeParamBoundContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeParamBoundContext typeParamBound(int i) {
			return GetRuleContext<TypeParamBoundContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] PLUS() { return GetTokens(RustParser.PLUS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PLUS(int i) {
			return GetToken(RustParser.PLUS, i);
		}
		public TypeParamBoundsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeParamBounds; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRustParserListener typedListener = listener as IRustParserListener;
			if (typedListener != null) typedListener.EnterTypeParamBounds(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRustParserListener typedListener = listener as IRustParserListener;
			if (typedListener != null) typedListener.ExitTypeParamBounds(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRustParserVisitor<TResult> typedVisitor = visitor as IRustParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeParamBounds(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeParamBoundsContext typeParamBounds() {
		TypeParamBoundsContext _localctx = new TypeParamBoundsContext(Context, State);
		EnterRule(_localctx, 328, RULE_typeParamBounds);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 2201;
			typeParamBound();
			State = 2206;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,300,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 2202;
					Match(PLUS);
					State = 2203;
					typeParamBound();
					}
					} 
				}
				State = 2208;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,300,Context);
			}
			State = 2210;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,301,Context) ) {
			case 1:
				{
				State = 2209;
				Match(PLUS);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeParamBoundContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public LifetimeContext lifetime() {
			return GetRuleContext<LifetimeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TraitBoundContext traitBound() {
			return GetRuleContext<TraitBoundContext>(0);
		}
		public TypeParamBoundContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeParamBound; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRustParserListener typedListener = listener as IRustParserListener;
			if (typedListener != null) typedListener.EnterTypeParamBound(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRustParserListener typedListener = listener as IRustParserListener;
			if (typedListener != null) typedListener.ExitTypeParamBound(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRustParserVisitor<TResult> typedVisitor = visitor as IRustParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeParamBound(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeParamBoundContext typeParamBound() {
		TypeParamBoundContext _localctx = new TypeParamBoundContext(Context, State);
		EnterRule(_localctx, 330, RULE_typeParamBound);
		try {
			State = 2214;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case KW_STATICLIFETIME:
			case KW_UNDERLINELIFETIME:
			case LIFETIME_OR_LABEL:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2212;
				lifetime();
				}
				break;
			case KW_CRATE:
			case KW_FOR:
			case KW_SELFVALUE:
			case KW_SELFTYPE:
			case KW_SUPER:
			case KW_MACRORULES:
			case KW_DOLLARCRATE:
			case NON_KEYWORD_IDENTIFIER:
			case RAW_IDENTIFIER:
			case PATHSEP:
			case QUESTION:
			case LPAREN:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2213;
				traitBound();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TraitBoundContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypePathContext typePath() {
			return GetRuleContext<TypePathContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode QUESTION() { return GetToken(RustParser.QUESTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ForLifetimesContext forLifetimes() {
			return GetRuleContext<ForLifetimesContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(RustParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(RustParser.RPAREN, 0); }
		public TraitBoundContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_traitBound; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRustParserListener typedListener = listener as IRustParserListener;
			if (typedListener != null) typedListener.EnterTraitBound(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRustParserListener typedListener = listener as IRustParserListener;
			if (typedListener != null) typedListener.ExitTraitBound(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRustParserVisitor<TResult> typedVisitor = visitor as IRustParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTraitBound(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TraitBoundContext traitBound() {
		TraitBoundContext _localctx = new TraitBoundContext(Context, State);
		EnterRule(_localctx, 332, RULE_traitBound);
		int _la;
		try {
			State = 2233;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case KW_CRATE:
			case KW_FOR:
			case KW_SELFVALUE:
			case KW_SELFTYPE:
			case KW_SUPER:
			case KW_MACRORULES:
			case KW_DOLLARCRATE:
			case NON_KEYWORD_IDENTIFIER:
			case RAW_IDENTIFIER:
			case PATHSEP:
			case QUESTION:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2217;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==QUESTION) {
					{
					State = 2216;
					Match(QUESTION);
					}
				}

				State = 2220;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==KW_FOR) {
					{
					State = 2219;
					forLifetimes();
					}
				}

				State = 2222;
				typePath();
				}
				break;
			case LPAREN:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2223;
				Match(LPAREN);
				State = 2225;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==QUESTION) {
					{
					State = 2224;
					Match(QUESTION);
					}
				}

				State = 2228;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==KW_FOR) {
					{
					State = 2227;
					forLifetimes();
					}
				}

				State = 2230;
				typePath();
				State = 2231;
				Match(RPAREN);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LifetimeBoundsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public LifetimeContext[] lifetime() {
			return GetRuleContexts<LifetimeContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public LifetimeContext lifetime(int i) {
			return GetRuleContext<LifetimeContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] PLUS() { return GetTokens(RustParser.PLUS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PLUS(int i) {
			return GetToken(RustParser.PLUS, i);
		}
		public LifetimeBoundsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lifetimeBounds; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRustParserListener typedListener = listener as IRustParserListener;
			if (typedListener != null) typedListener.EnterLifetimeBounds(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRustParserListener typedListener = listener as IRustParserListener;
			if (typedListener != null) typedListener.ExitLifetimeBounds(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRustParserVisitor<TResult> typedVisitor = visitor as IRustParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLifetimeBounds(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LifetimeBoundsContext lifetimeBounds() {
		LifetimeBoundsContext _localctx = new LifetimeBoundsContext(Context, State);
		EnterRule(_localctx, 334, RULE_lifetimeBounds);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 2240;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,308,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 2235;
					lifetime();
					State = 2236;
					Match(PLUS);
					}
					} 
				}
				State = 2242;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,308,Context);
			}
			State = 2244;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (((((_la - 53)) & ~0x3f) == 0 && ((1L << (_la - 53)) & ((1L << (KW_STATICLIFETIME - 53)) | (1L << (KW_UNDERLINELIFETIME - 53)) | (1L << (LIFETIME_OR_LABEL - 53)))) != 0)) {
				{
				State = 2243;
				lifetime();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LifetimeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LIFETIME_OR_LABEL() { return GetToken(RustParser.LIFETIME_OR_LABEL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_STATICLIFETIME() { return GetToken(RustParser.KW_STATICLIFETIME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_UNDERLINELIFETIME() { return GetToken(RustParser.KW_UNDERLINELIFETIME, 0); }
		public LifetimeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lifetime; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRustParserListener typedListener = listener as IRustParserListener;
			if (typedListener != null) typedListener.EnterLifetime(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRustParserListener typedListener = listener as IRustParserListener;
			if (typedListener != null) typedListener.ExitLifetime(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRustParserVisitor<TResult> typedVisitor = visitor as IRustParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLifetime(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LifetimeContext lifetime() {
		LifetimeContext _localctx = new LifetimeContext(Context, State);
		EnterRule(_localctx, 336, RULE_lifetime);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2246;
			_la = TokenStream.LA(1);
			if ( !(((((_la - 53)) & ~0x3f) == 0 && ((1L << (_la - 53)) & ((1L << (KW_STATICLIFETIME - 53)) | (1L << (KW_UNDERLINELIFETIME - 53)) | (1L << (LIFETIME_OR_LABEL - 53)))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SimplePathContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SimplePathSegmentContext[] simplePathSegment() {
			return GetRuleContexts<SimplePathSegmentContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SimplePathSegmentContext simplePathSegment(int i) {
			return GetRuleContext<SimplePathSegmentContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] PATHSEP() { return GetTokens(RustParser.PATHSEP); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PATHSEP(int i) {
			return GetToken(RustParser.PATHSEP, i);
		}
		public SimplePathContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_simplePath; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRustParserListener typedListener = listener as IRustParserListener;
			if (typedListener != null) typedListener.EnterSimplePath(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRustParserListener typedListener = listener as IRustParserListener;
			if (typedListener != null) typedListener.ExitSimplePath(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRustParserVisitor<TResult> typedVisitor = visitor as IRustParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSimplePath(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SimplePathContext simplePath() {
		SimplePathContext _localctx = new SimplePathContext(Context, State);
		EnterRule(_localctx, 338, RULE_simplePath);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 2249;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==PATHSEP) {
				{
				State = 2248;
				Match(PATHSEP);
				}
			}

			State = 2251;
			simplePathSegment();
			State = 2256;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,311,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 2252;
					Match(PATHSEP);
					State = 2253;
					simplePathSegment();
					}
					} 
				}
				State = 2258;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,311,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SimplePathSegmentContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_SUPER() { return GetToken(RustParser.KW_SUPER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_SELFVALUE() { return GetToken(RustParser.KW_SELFVALUE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_CRATE() { return GetToken(RustParser.KW_CRATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_DOLLARCRATE() { return GetToken(RustParser.KW_DOLLARCRATE, 0); }
		public SimplePathSegmentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_simplePathSegment; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRustParserListener typedListener = listener as IRustParserListener;
			if (typedListener != null) typedListener.EnterSimplePathSegment(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRustParserListener typedListener = listener as IRustParserListener;
			if (typedListener != null) typedListener.ExitSimplePathSegment(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRustParserVisitor<TResult> typedVisitor = visitor as IRustParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSimplePathSegment(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SimplePathSegmentContext simplePathSegment() {
		SimplePathSegmentContext _localctx = new SimplePathSegmentContext(Context, State);
		EnterRule(_localctx, 340, RULE_simplePathSegment);
		try {
			State = 2264;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case KW_MACRORULES:
			case NON_KEYWORD_IDENTIFIER:
			case RAW_IDENTIFIER:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2259;
				identifier();
				}
				break;
			case KW_SUPER:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2260;
				Match(KW_SUPER);
				}
				break;
			case KW_SELFVALUE:
				EnterOuterAlt(_localctx, 3);
				{
				State = 2261;
				Match(KW_SELFVALUE);
				}
				break;
			case KW_CRATE:
				EnterOuterAlt(_localctx, 4);
				{
				State = 2262;
				Match(KW_CRATE);
				}
				break;
			case KW_DOLLARCRATE:
				EnterOuterAlt(_localctx, 5);
				{
				State = 2263;
				Match(KW_DOLLARCRATE);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PathInExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public PathExprSegmentContext[] pathExprSegment() {
			return GetRuleContexts<PathExprSegmentContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public PathExprSegmentContext pathExprSegment(int i) {
			return GetRuleContext<PathExprSegmentContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] PATHSEP() { return GetTokens(RustParser.PATHSEP); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PATHSEP(int i) {
			return GetToken(RustParser.PATHSEP, i);
		}
		public PathInExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pathInExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRustParserListener typedListener = listener as IRustParserListener;
			if (typedListener != null) typedListener.EnterPathInExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRustParserListener typedListener = listener as IRustParserListener;
			if (typedListener != null) typedListener.ExitPathInExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRustParserVisitor<TResult> typedVisitor = visitor as IRustParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPathInExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PathInExpressionContext pathInExpression() {
		PathInExpressionContext _localctx = new PathInExpressionContext(Context, State);
		EnterRule(_localctx, 342, RULE_pathInExpression);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 2267;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==PATHSEP) {
				{
				State = 2266;
				Match(PATHSEP);
				}
			}

			State = 2269;
			pathExprSegment();
			State = 2274;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,314,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 2270;
					Match(PATHSEP);
					State = 2271;
					pathExprSegment();
					}
					} 
				}
				State = 2276;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,314,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PathExprSegmentContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public PathIdentSegmentContext pathIdentSegment() {
			return GetRuleContext<PathIdentSegmentContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PATHSEP() { return GetToken(RustParser.PATHSEP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public GenericArgsContext genericArgs() {
			return GetRuleContext<GenericArgsContext>(0);
		}
		public PathExprSegmentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pathExprSegment; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRustParserListener typedListener = listener as IRustParserListener;
			if (typedListener != null) typedListener.EnterPathExprSegment(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRustParserListener typedListener = listener as IRustParserListener;
			if (typedListener != null) typedListener.ExitPathExprSegment(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRustParserVisitor<TResult> typedVisitor = visitor as IRustParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPathExprSegment(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PathExprSegmentContext pathExprSegment() {
		PathExprSegmentContext _localctx = new PathExprSegmentContext(Context, State);
		EnterRule(_localctx, 344, RULE_pathExprSegment);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2277;
			pathIdentSegment();
			State = 2280;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,315,Context) ) {
			case 1:
				{
				State = 2278;
				Match(PATHSEP);
				State = 2279;
				genericArgs();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PathIdentSegmentContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_SUPER() { return GetToken(RustParser.KW_SUPER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_SELFVALUE() { return GetToken(RustParser.KW_SELFVALUE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_SELFTYPE() { return GetToken(RustParser.KW_SELFTYPE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_CRATE() { return GetToken(RustParser.KW_CRATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_DOLLARCRATE() { return GetToken(RustParser.KW_DOLLARCRATE, 0); }
		public PathIdentSegmentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pathIdentSegment; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRustParserListener typedListener = listener as IRustParserListener;
			if (typedListener != null) typedListener.EnterPathIdentSegment(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRustParserListener typedListener = listener as IRustParserListener;
			if (typedListener != null) typedListener.ExitPathIdentSegment(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRustParserVisitor<TResult> typedVisitor = visitor as IRustParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPathIdentSegment(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PathIdentSegmentContext pathIdentSegment() {
		PathIdentSegmentContext _localctx = new PathIdentSegmentContext(Context, State);
		EnterRule(_localctx, 346, RULE_pathIdentSegment);
		try {
			State = 2288;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case KW_MACRORULES:
			case NON_KEYWORD_IDENTIFIER:
			case RAW_IDENTIFIER:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2282;
				identifier();
				}
				break;
			case KW_SUPER:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2283;
				Match(KW_SUPER);
				}
				break;
			case KW_SELFVALUE:
				EnterOuterAlt(_localctx, 3);
				{
				State = 2284;
				Match(KW_SELFVALUE);
				}
				break;
			case KW_SELFTYPE:
				EnterOuterAlt(_localctx, 4);
				{
				State = 2285;
				Match(KW_SELFTYPE);
				}
				break;
			case KW_CRATE:
				EnterOuterAlt(_localctx, 5);
				{
				State = 2286;
				Match(KW_CRATE);
				}
				break;
			case KW_DOLLARCRATE:
				EnterOuterAlt(_localctx, 6);
				{
				State = 2287;
				Match(KW_DOLLARCRATE);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GenericArgsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LT() { return GetToken(RustParser.LT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GT() { return GetToken(RustParser.GT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public GenericArgsLifetimesContext genericArgsLifetimes() {
			return GetRuleContext<GenericArgsLifetimesContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(RustParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(RustParser.COMMA, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public GenericArgsTypesContext genericArgsTypes() {
			return GetRuleContext<GenericArgsTypesContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public GenericArgsBindingsContext genericArgsBindings() {
			return GetRuleContext<GenericArgsBindingsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public GenericArgContext[] genericArg() {
			return GetRuleContexts<GenericArgContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public GenericArgContext genericArg(int i) {
			return GetRuleContext<GenericArgContext>(i);
		}
		public GenericArgsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_genericArgs; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRustParserListener typedListener = listener as IRustParserListener;
			if (typedListener != null) typedListener.EnterGenericArgs(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRustParserListener typedListener = listener as IRustParserListener;
			if (typedListener != null) typedListener.ExitGenericArgs(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRustParserVisitor<TResult> typedVisitor = visitor as IRustParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGenericArgs(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public GenericArgsContext genericArgs() {
		GenericArgsContext _localctx = new GenericArgsContext(Context, State);
		EnterRule(_localctx, 348, RULE_genericArgs);
		int _la;
		try {
			int _alt;
			State = 2333;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,324,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2290;
				Match(LT);
				State = 2291;
				Match(GT);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2292;
				Match(LT);
				State = 2293;
				genericArgsLifetimes();
				State = 2296;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,317,Context) ) {
				case 1:
					{
					State = 2294;
					Match(COMMA);
					State = 2295;
					genericArgsTypes();
					}
					break;
				}
				State = 2300;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,318,Context) ) {
				case 1:
					{
					State = 2298;
					Match(COMMA);
					State = 2299;
					genericArgsBindings();
					}
					break;
				}
				State = 2303;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==COMMA) {
					{
					State = 2302;
					Match(COMMA);
					}
				}

				State = 2305;
				Match(GT);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 2307;
				Match(LT);
				State = 2308;
				genericArgsTypes();
				State = 2311;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,320,Context) ) {
				case 1:
					{
					State = 2309;
					Match(COMMA);
					State = 2310;
					genericArgsBindings();
					}
					break;
				}
				State = 2314;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==COMMA) {
					{
					State = 2313;
					Match(COMMA);
					}
				}

				State = 2316;
				Match(GT);
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 2318;
				Match(LT);
				State = 2324;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,322,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 2319;
						genericArg();
						State = 2320;
						Match(COMMA);
						}
						} 
					}
					State = 2326;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,322,Context);
				}
				State = 2327;
				genericArg();
				State = 2329;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==COMMA) {
					{
					State = 2328;
					Match(COMMA);
					}
				}

				State = 2331;
				Match(GT);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GenericArgContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public LifetimeContext lifetime() {
			return GetRuleContext<LifetimeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Type_Context type_() {
			return GetRuleContext<Type_Context>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public GenericArgsConstContext genericArgsConst() {
			return GetRuleContext<GenericArgsConstContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public GenericArgsBindingContext genericArgsBinding() {
			return GetRuleContext<GenericArgsBindingContext>(0);
		}
		public GenericArgContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_genericArg; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRustParserListener typedListener = listener as IRustParserListener;
			if (typedListener != null) typedListener.EnterGenericArg(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRustParserListener typedListener = listener as IRustParserListener;
			if (typedListener != null) typedListener.ExitGenericArg(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRustParserVisitor<TResult> typedVisitor = visitor as IRustParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGenericArg(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public GenericArgContext genericArg() {
		GenericArgContext _localctx = new GenericArgContext(Context, State);
		EnterRule(_localctx, 350, RULE_genericArg);
		try {
			State = 2339;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,325,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2335;
				lifetime();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2336;
				type_();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 2337;
				genericArgsConst();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 2338;
				genericArgsBinding();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GenericArgsConstContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public BlockExpressionContext blockExpression() {
			return GetRuleContext<BlockExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LiteralExpressionContext literalExpression() {
			return GetRuleContext<LiteralExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUS() { return GetToken(RustParser.MINUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SimplePathSegmentContext simplePathSegment() {
			return GetRuleContext<SimplePathSegmentContext>(0);
		}
		public GenericArgsConstContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_genericArgsConst; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRustParserListener typedListener = listener as IRustParserListener;
			if (typedListener != null) typedListener.EnterGenericArgsConst(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRustParserListener typedListener = listener as IRustParserListener;
			if (typedListener != null) typedListener.ExitGenericArgsConst(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRustParserVisitor<TResult> typedVisitor = visitor as IRustParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGenericArgsConst(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public GenericArgsConstContext genericArgsConst() {
		GenericArgsConstContext _localctx = new GenericArgsConstContext(Context, State);
		EnterRule(_localctx, 352, RULE_genericArgsConst);
		int _la;
		try {
			State = 2347;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case LCURLYBRACE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2341;
				blockExpression();
				}
				break;
			case KW_FALSE:
			case KW_TRUE:
			case CHAR_LITERAL:
			case STRING_LITERAL:
			case RAW_STRING_LITERAL:
			case BYTE_LITERAL:
			case BYTE_STRING_LITERAL:
			case RAW_BYTE_STRING_LITERAL:
			case INTEGER_LITERAL:
			case FLOAT_LITERAL:
			case MINUS:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2343;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==MINUS) {
					{
					State = 2342;
					Match(MINUS);
					}
				}

				State = 2345;
				literalExpression();
				}
				break;
			case KW_CRATE:
			case KW_SELFVALUE:
			case KW_SUPER:
			case KW_MACRORULES:
			case KW_DOLLARCRATE:
			case NON_KEYWORD_IDENTIFIER:
			case RAW_IDENTIFIER:
				EnterOuterAlt(_localctx, 3);
				{
				State = 2346;
				simplePathSegment();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GenericArgsLifetimesContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public LifetimeContext[] lifetime() {
			return GetRuleContexts<LifetimeContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public LifetimeContext lifetime(int i) {
			return GetRuleContext<LifetimeContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(RustParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(RustParser.COMMA, i);
		}
		public GenericArgsLifetimesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_genericArgsLifetimes; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRustParserListener typedListener = listener as IRustParserListener;
			if (typedListener != null) typedListener.EnterGenericArgsLifetimes(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRustParserListener typedListener = listener as IRustParserListener;
			if (typedListener != null) typedListener.ExitGenericArgsLifetimes(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRustParserVisitor<TResult> typedVisitor = visitor as IRustParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGenericArgsLifetimes(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public GenericArgsLifetimesContext genericArgsLifetimes() {
		GenericArgsLifetimesContext _localctx = new GenericArgsLifetimesContext(Context, State);
		EnterRule(_localctx, 354, RULE_genericArgsLifetimes);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 2349;
			lifetime();
			State = 2354;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,328,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 2350;
					Match(COMMA);
					State = 2351;
					lifetime();
					}
					} 
				}
				State = 2356;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,328,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GenericArgsTypesContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Type_Context[] type_() {
			return GetRuleContexts<Type_Context>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Type_Context type_(int i) {
			return GetRuleContext<Type_Context>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(RustParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(RustParser.COMMA, i);
		}
		public GenericArgsTypesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_genericArgsTypes; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRustParserListener typedListener = listener as IRustParserListener;
			if (typedListener != null) typedListener.EnterGenericArgsTypes(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRustParserListener typedListener = listener as IRustParserListener;
			if (typedListener != null) typedListener.ExitGenericArgsTypes(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRustParserVisitor<TResult> typedVisitor = visitor as IRustParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGenericArgsTypes(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public GenericArgsTypesContext genericArgsTypes() {
		GenericArgsTypesContext _localctx = new GenericArgsTypesContext(Context, State);
		EnterRule(_localctx, 356, RULE_genericArgsTypes);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 2357;
			type_();
			State = 2362;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,329,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 2358;
					Match(COMMA);
					State = 2359;
					type_();
					}
					} 
				}
				State = 2364;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,329,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GenericArgsBindingsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public GenericArgsBindingContext[] genericArgsBinding() {
			return GetRuleContexts<GenericArgsBindingContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public GenericArgsBindingContext genericArgsBinding(int i) {
			return GetRuleContext<GenericArgsBindingContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(RustParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(RustParser.COMMA, i);
		}
		public GenericArgsBindingsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_genericArgsBindings; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRustParserListener typedListener = listener as IRustParserListener;
			if (typedListener != null) typedListener.EnterGenericArgsBindings(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRustParserListener typedListener = listener as IRustParserListener;
			if (typedListener != null) typedListener.ExitGenericArgsBindings(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRustParserVisitor<TResult> typedVisitor = visitor as IRustParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGenericArgsBindings(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public GenericArgsBindingsContext genericArgsBindings() {
		GenericArgsBindingsContext _localctx = new GenericArgsBindingsContext(Context, State);
		EnterRule(_localctx, 358, RULE_genericArgsBindings);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 2365;
			genericArgsBinding();
			State = 2370;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,330,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 2366;
					Match(COMMA);
					State = 2367;
					genericArgsBinding();
					}
					} 
				}
				State = 2372;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,330,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GenericArgsBindingContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQ() { return GetToken(RustParser.EQ, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Type_Context type_() {
			return GetRuleContext<Type_Context>(0);
		}
		public GenericArgsBindingContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_genericArgsBinding; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRustParserListener typedListener = listener as IRustParserListener;
			if (typedListener != null) typedListener.EnterGenericArgsBinding(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRustParserListener typedListener = listener as IRustParserListener;
			if (typedListener != null) typedListener.ExitGenericArgsBinding(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRustParserVisitor<TResult> typedVisitor = visitor as IRustParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGenericArgsBinding(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public GenericArgsBindingContext genericArgsBinding() {
		GenericArgsBindingContext _localctx = new GenericArgsBindingContext(Context, State);
		EnterRule(_localctx, 360, RULE_genericArgsBinding);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2373;
			identifier();
			State = 2374;
			Match(EQ);
			State = 2375;
			type_();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class QualifiedPathInExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public QualifiedPathTypeContext qualifiedPathType() {
			return GetRuleContext<QualifiedPathTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] PATHSEP() { return GetTokens(RustParser.PATHSEP); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PATHSEP(int i) {
			return GetToken(RustParser.PATHSEP, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PathExprSegmentContext[] pathExprSegment() {
			return GetRuleContexts<PathExprSegmentContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public PathExprSegmentContext pathExprSegment(int i) {
			return GetRuleContext<PathExprSegmentContext>(i);
		}
		public QualifiedPathInExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_qualifiedPathInExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRustParserListener typedListener = listener as IRustParserListener;
			if (typedListener != null) typedListener.EnterQualifiedPathInExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRustParserListener typedListener = listener as IRustParserListener;
			if (typedListener != null) typedListener.ExitQualifiedPathInExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRustParserVisitor<TResult> typedVisitor = visitor as IRustParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitQualifiedPathInExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public QualifiedPathInExpressionContext qualifiedPathInExpression() {
		QualifiedPathInExpressionContext _localctx = new QualifiedPathInExpressionContext(Context, State);
		EnterRule(_localctx, 362, RULE_qualifiedPathInExpression);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 2377;
			qualifiedPathType();
			State = 2380;
			ErrorHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 2378;
					Match(PATHSEP);
					State = 2379;
					pathExprSegment();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 2382;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,331,Context);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class QualifiedPathTypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LT() { return GetToken(RustParser.LT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Type_Context type_() {
			return GetRuleContext<Type_Context>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GT() { return GetToken(RustParser.GT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_AS() { return GetToken(RustParser.KW_AS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypePathContext typePath() {
			return GetRuleContext<TypePathContext>(0);
		}
		public QualifiedPathTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_qualifiedPathType; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRustParserListener typedListener = listener as IRustParserListener;
			if (typedListener != null) typedListener.EnterQualifiedPathType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRustParserListener typedListener = listener as IRustParserListener;
			if (typedListener != null) typedListener.ExitQualifiedPathType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRustParserVisitor<TResult> typedVisitor = visitor as IRustParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitQualifiedPathType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public QualifiedPathTypeContext qualifiedPathType() {
		QualifiedPathTypeContext _localctx = new QualifiedPathTypeContext(Context, State);
		EnterRule(_localctx, 364, RULE_qualifiedPathType);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2384;
			Match(LT);
			State = 2385;
			type_();
			State = 2388;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==KW_AS) {
				{
				State = 2386;
				Match(KW_AS);
				State = 2387;
				typePath();
				}
			}

			State = 2390;
			Match(GT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class QualifiedPathInTypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public QualifiedPathTypeContext qualifiedPathType() {
			return GetRuleContext<QualifiedPathTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] PATHSEP() { return GetTokens(RustParser.PATHSEP); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PATHSEP(int i) {
			return GetToken(RustParser.PATHSEP, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypePathSegmentContext[] typePathSegment() {
			return GetRuleContexts<TypePathSegmentContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypePathSegmentContext typePathSegment(int i) {
			return GetRuleContext<TypePathSegmentContext>(i);
		}
		public QualifiedPathInTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_qualifiedPathInType; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRustParserListener typedListener = listener as IRustParserListener;
			if (typedListener != null) typedListener.EnterQualifiedPathInType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRustParserListener typedListener = listener as IRustParserListener;
			if (typedListener != null) typedListener.ExitQualifiedPathInType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRustParserVisitor<TResult> typedVisitor = visitor as IRustParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitQualifiedPathInType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public QualifiedPathInTypeContext qualifiedPathInType() {
		QualifiedPathInTypeContext _localctx = new QualifiedPathInTypeContext(Context, State);
		EnterRule(_localctx, 366, RULE_qualifiedPathInType);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 2392;
			qualifiedPathType();
			State = 2395;
			ErrorHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 2393;
					Match(PATHSEP);
					State = 2394;
					typePathSegment();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 2397;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,333,Context);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypePathContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypePathSegmentContext[] typePathSegment() {
			return GetRuleContexts<TypePathSegmentContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypePathSegmentContext typePathSegment(int i) {
			return GetRuleContext<TypePathSegmentContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] PATHSEP() { return GetTokens(RustParser.PATHSEP); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PATHSEP(int i) {
			return GetToken(RustParser.PATHSEP, i);
		}
		public TypePathContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typePath; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRustParserListener typedListener = listener as IRustParserListener;
			if (typedListener != null) typedListener.EnterTypePath(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRustParserListener typedListener = listener as IRustParserListener;
			if (typedListener != null) typedListener.ExitTypePath(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRustParserVisitor<TResult> typedVisitor = visitor as IRustParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypePath(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypePathContext typePath() {
		TypePathContext _localctx = new TypePathContext(Context, State);
		EnterRule(_localctx, 368, RULE_typePath);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 2400;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==PATHSEP) {
				{
				State = 2399;
				Match(PATHSEP);
				}
			}

			State = 2402;
			typePathSegment();
			State = 2407;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,335,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 2403;
					Match(PATHSEP);
					State = 2404;
					typePathSegment();
					}
					} 
				}
				State = 2409;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,335,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypePathSegmentContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public PathIdentSegmentContext pathIdentSegment() {
			return GetRuleContext<PathIdentSegmentContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PATHSEP() { return GetToken(RustParser.PATHSEP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public GenericArgsContext genericArgs() {
			return GetRuleContext<GenericArgsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypePathFnContext typePathFn() {
			return GetRuleContext<TypePathFnContext>(0);
		}
		public TypePathSegmentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typePathSegment; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRustParserListener typedListener = listener as IRustParserListener;
			if (typedListener != null) typedListener.EnterTypePathSegment(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRustParserListener typedListener = listener as IRustParserListener;
			if (typedListener != null) typedListener.ExitTypePathSegment(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRustParserVisitor<TResult> typedVisitor = visitor as IRustParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypePathSegment(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypePathSegmentContext typePathSegment() {
		TypePathSegmentContext _localctx = new TypePathSegmentContext(Context, State);
		EnterRule(_localctx, 370, RULE_typePathSegment);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2410;
			pathIdentSegment();
			State = 2412;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,336,Context) ) {
			case 1:
				{
				State = 2411;
				Match(PATHSEP);
				}
				break;
			}
			State = 2416;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,337,Context) ) {
			case 1:
				{
				State = 2414;
				genericArgs();
				}
				break;
			case 2:
				{
				State = 2415;
				typePathFn();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypePathFnContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(RustParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(RustParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypePathInputsContext typePathInputs() {
			return GetRuleContext<TypePathInputsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RARROW() { return GetToken(RustParser.RARROW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Type_Context type_() {
			return GetRuleContext<Type_Context>(0);
		}
		public TypePathFnContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typePathFn; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRustParserListener typedListener = listener as IRustParserListener;
			if (typedListener != null) typedListener.EnterTypePathFn(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRustParserListener typedListener = listener as IRustParserListener;
			if (typedListener != null) typedListener.ExitTypePathFn(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRustParserVisitor<TResult> typedVisitor = visitor as IRustParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypePathFn(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypePathFnContext typePathFn() {
		TypePathFnContext _localctx = new TypePathFnContext(Context, State);
		EnterRule(_localctx, 372, RULE_typePathFn);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2418;
			Match(LPAREN);
			State = 2420;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << KW_CRATE) | (1L << KW_EXTERN) | (1L << KW_FN) | (1L << KW_FOR) | (1L << KW_IMPL) | (1L << KW_SELFVALUE) | (1L << KW_SELFTYPE) | (1L << KW_SUPER) | (1L << KW_UNSAFE) | (1L << KW_DYN) | (1L << KW_STATICLIFETIME) | (1L << KW_MACRORULES) | (1L << KW_UNDERLINELIFETIME) | (1L << KW_DOLLARCRATE) | (1L << NON_KEYWORD_IDENTIFIER) | (1L << RAW_IDENTIFIER))) != 0) || ((((_la - 81)) & ~0x3f) == 0 && ((1L << (_la - 81)) & ((1L << (LIFETIME_OR_LABEL - 81)) | (1L << (STAR - 81)) | (1L << (NOT - 81)) | (1L << (AND - 81)) | (1L << (LT - 81)) | (1L << (UNDERSCORE - 81)) | (1L << (PATHSEP - 81)) | (1L << (QUESTION - 81)) | (1L << (LSQUAREBRACKET - 81)) | (1L << (LPAREN - 81)))) != 0)) {
				{
				State = 2419;
				typePathInputs();
				}
			}

			State = 2422;
			Match(RPAREN);
			State = 2425;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,339,Context) ) {
			case 1:
				{
				State = 2423;
				Match(RARROW);
				State = 2424;
				type_();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypePathInputsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Type_Context[] type_() {
			return GetRuleContexts<Type_Context>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Type_Context type_(int i) {
			return GetRuleContext<Type_Context>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(RustParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(RustParser.COMMA, i);
		}
		public TypePathInputsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typePathInputs; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRustParserListener typedListener = listener as IRustParserListener;
			if (typedListener != null) typedListener.EnterTypePathInputs(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRustParserListener typedListener = listener as IRustParserListener;
			if (typedListener != null) typedListener.ExitTypePathInputs(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRustParserVisitor<TResult> typedVisitor = visitor as IRustParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypePathInputs(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypePathInputsContext typePathInputs() {
		TypePathInputsContext _localctx = new TypePathInputsContext(Context, State);
		EnterRule(_localctx, 374, RULE_typePathInputs);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 2427;
			type_();
			State = 2432;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,340,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 2428;
					Match(COMMA);
					State = 2429;
					type_();
					}
					} 
				}
				State = 2434;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,340,Context);
			}
			State = 2436;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==COMMA) {
				{
				State = 2435;
				Match(COMMA);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VisibilityContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_PUB() { return GetToken(RustParser.KW_PUB, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(RustParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(RustParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_CRATE() { return GetToken(RustParser.KW_CRATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_SELFVALUE() { return GetToken(RustParser.KW_SELFVALUE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_SUPER() { return GetToken(RustParser.KW_SUPER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_IN() { return GetToken(RustParser.KW_IN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SimplePathContext simplePath() {
			return GetRuleContext<SimplePathContext>(0);
		}
		public VisibilityContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_visibility; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRustParserListener typedListener = listener as IRustParserListener;
			if (typedListener != null) typedListener.EnterVisibility(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRustParserListener typedListener = listener as IRustParserListener;
			if (typedListener != null) typedListener.ExitVisibility(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRustParserVisitor<TResult> typedVisitor = visitor as IRustParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVisibility(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VisibilityContext visibility() {
		VisibilityContext _localctx = new VisibilityContext(Context, State);
		EnterRule(_localctx, 376, RULE_visibility);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2438;
			Match(KW_PUB);
			State = 2448;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,343,Context) ) {
			case 1:
				{
				State = 2439;
				Match(LPAREN);
				State = 2445;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case KW_CRATE:
					{
					State = 2440;
					Match(KW_CRATE);
					}
					break;
				case KW_SELFVALUE:
					{
					State = 2441;
					Match(KW_SELFVALUE);
					}
					break;
				case KW_SUPER:
					{
					State = 2442;
					Match(KW_SUPER);
					}
					break;
				case KW_IN:
					{
					State = 2443;
					Match(KW_IN);
					State = 2444;
					simplePath();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 2447;
				Match(RPAREN);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IdentifierContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NON_KEYWORD_IDENTIFIER() { return GetToken(RustParser.NON_KEYWORD_IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RAW_IDENTIFIER() { return GetToken(RustParser.RAW_IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_MACRORULES() { return GetToken(RustParser.KW_MACRORULES, 0); }
		public IdentifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_identifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRustParserListener typedListener = listener as IRustParserListener;
			if (typedListener != null) typedListener.EnterIdentifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRustParserListener typedListener = listener as IRustParserListener;
			if (typedListener != null) typedListener.ExitIdentifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRustParserVisitor<TResult> typedVisitor = visitor as IRustParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIdentifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IdentifierContext identifier() {
		IdentifierContext _localctx = new IdentifierContext(Context, State);
		EnterRule(_localctx, 378, RULE_identifier);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2450;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << KW_MACRORULES) | (1L << NON_KEYWORD_IDENTIFIER) | (1L << RAW_IDENTIFIER))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class KeywordContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_AS() { return GetToken(RustParser.KW_AS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_BREAK() { return GetToken(RustParser.KW_BREAK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_CONST() { return GetToken(RustParser.KW_CONST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_CONTINUE() { return GetToken(RustParser.KW_CONTINUE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_CRATE() { return GetToken(RustParser.KW_CRATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_ELSE() { return GetToken(RustParser.KW_ELSE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_ENUM() { return GetToken(RustParser.KW_ENUM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_EXTERN() { return GetToken(RustParser.KW_EXTERN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_FALSE() { return GetToken(RustParser.KW_FALSE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_FN() { return GetToken(RustParser.KW_FN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_FOR() { return GetToken(RustParser.KW_FOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_IF() { return GetToken(RustParser.KW_IF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_IMPL() { return GetToken(RustParser.KW_IMPL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_IN() { return GetToken(RustParser.KW_IN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_LET() { return GetToken(RustParser.KW_LET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_LOOP() { return GetToken(RustParser.KW_LOOP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_MATCH() { return GetToken(RustParser.KW_MATCH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_MOD() { return GetToken(RustParser.KW_MOD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_MOVE() { return GetToken(RustParser.KW_MOVE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_MUT() { return GetToken(RustParser.KW_MUT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_PUB() { return GetToken(RustParser.KW_PUB, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_REF() { return GetToken(RustParser.KW_REF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_RETURN() { return GetToken(RustParser.KW_RETURN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_SELFVALUE() { return GetToken(RustParser.KW_SELFVALUE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_SELFTYPE() { return GetToken(RustParser.KW_SELFTYPE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_STATIC() { return GetToken(RustParser.KW_STATIC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_STRUCT() { return GetToken(RustParser.KW_STRUCT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_SUPER() { return GetToken(RustParser.KW_SUPER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_TRAIT() { return GetToken(RustParser.KW_TRAIT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_TRUE() { return GetToken(RustParser.KW_TRUE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_TYPE() { return GetToken(RustParser.KW_TYPE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_UNSAFE() { return GetToken(RustParser.KW_UNSAFE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_USE() { return GetToken(RustParser.KW_USE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_WHERE() { return GetToken(RustParser.KW_WHERE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_WHILE() { return GetToken(RustParser.KW_WHILE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_ASYNC() { return GetToken(RustParser.KW_ASYNC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_AWAIT() { return GetToken(RustParser.KW_AWAIT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_DYN() { return GetToken(RustParser.KW_DYN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_ABSTRACT() { return GetToken(RustParser.KW_ABSTRACT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_BECOME() { return GetToken(RustParser.KW_BECOME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_BOX() { return GetToken(RustParser.KW_BOX, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_DO() { return GetToken(RustParser.KW_DO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_FINAL() { return GetToken(RustParser.KW_FINAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_MACRO() { return GetToken(RustParser.KW_MACRO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_OVERRIDE() { return GetToken(RustParser.KW_OVERRIDE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_PRIV() { return GetToken(RustParser.KW_PRIV, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_TYPEOF() { return GetToken(RustParser.KW_TYPEOF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_UNSIZED() { return GetToken(RustParser.KW_UNSIZED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_VIRTUAL() { return GetToken(RustParser.KW_VIRTUAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_YIELD() { return GetToken(RustParser.KW_YIELD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_TRY() { return GetToken(RustParser.KW_TRY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_UNION() { return GetToken(RustParser.KW_UNION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_STATICLIFETIME() { return GetToken(RustParser.KW_STATICLIFETIME, 0); }
		public KeywordContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_keyword; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRustParserListener typedListener = listener as IRustParserListener;
			if (typedListener != null) typedListener.EnterKeyword(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRustParserListener typedListener = listener as IRustParserListener;
			if (typedListener != null) typedListener.ExitKeyword(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRustParserVisitor<TResult> typedVisitor = visitor as IRustParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitKeyword(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public KeywordContext keyword() {
		KeywordContext _localctx = new KeywordContext(Context, State);
		EnterRule(_localctx, 380, RULE_keyword);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2452;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << KW_AS) | (1L << KW_BREAK) | (1L << KW_CONST) | (1L << KW_CONTINUE) | (1L << KW_CRATE) | (1L << KW_ELSE) | (1L << KW_ENUM) | (1L << KW_EXTERN) | (1L << KW_FALSE) | (1L << KW_FN) | (1L << KW_FOR) | (1L << KW_IF) | (1L << KW_IMPL) | (1L << KW_IN) | (1L << KW_LET) | (1L << KW_LOOP) | (1L << KW_MATCH) | (1L << KW_MOD) | (1L << KW_MOVE) | (1L << KW_MUT) | (1L << KW_PUB) | (1L << KW_REF) | (1L << KW_RETURN) | (1L << KW_SELFVALUE) | (1L << KW_SELFTYPE) | (1L << KW_STATIC) | (1L << KW_STRUCT) | (1L << KW_SUPER) | (1L << KW_TRAIT) | (1L << KW_TRUE) | (1L << KW_TYPE) | (1L << KW_UNSAFE) | (1L << KW_USE) | (1L << KW_WHERE) | (1L << KW_WHILE) | (1L << KW_ASYNC) | (1L << KW_AWAIT) | (1L << KW_DYN) | (1L << KW_ABSTRACT) | (1L << KW_BECOME) | (1L << KW_BOX) | (1L << KW_DO) | (1L << KW_FINAL) | (1L << KW_MACRO) | (1L << KW_OVERRIDE) | (1L << KW_PRIV) | (1L << KW_TYPEOF) | (1L << KW_UNSIZED) | (1L << KW_VIRTUAL) | (1L << KW_YIELD) | (1L << KW_TRY) | (1L << KW_UNION) | (1L << KW_STATICLIFETIME))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MacroIdentifierLikeTokenContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public KeywordContext keyword() {
			return GetRuleContext<KeywordContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_MACRORULES() { return GetToken(RustParser.KW_MACRORULES, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_UNDERLINELIFETIME() { return GetToken(RustParser.KW_UNDERLINELIFETIME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_DOLLARCRATE() { return GetToken(RustParser.KW_DOLLARCRATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LIFETIME_OR_LABEL() { return GetToken(RustParser.LIFETIME_OR_LABEL, 0); }
		public MacroIdentifierLikeTokenContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_macroIdentifierLikeToken; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRustParserListener typedListener = listener as IRustParserListener;
			if (typedListener != null) typedListener.EnterMacroIdentifierLikeToken(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRustParserListener typedListener = listener as IRustParserListener;
			if (typedListener != null) typedListener.ExitMacroIdentifierLikeToken(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRustParserVisitor<TResult> typedVisitor = visitor as IRustParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMacroIdentifierLikeToken(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MacroIdentifierLikeTokenContext macroIdentifierLikeToken() {
		MacroIdentifierLikeTokenContext _localctx = new MacroIdentifierLikeTokenContext(Context, State);
		EnterRule(_localctx, 382, RULE_macroIdentifierLikeToken);
		try {
			State = 2460;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,344,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2454;
				keyword();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2455;
				identifier();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 2456;
				Match(KW_MACRORULES);
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 2457;
				Match(KW_UNDERLINELIFETIME);
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 2458;
				Match(KW_DOLLARCRATE);
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 2459;
				Match(LIFETIME_OR_LABEL);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MacroLiteralTokenContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public LiteralExpressionContext literalExpression() {
			return GetRuleContext<LiteralExpressionContext>(0);
		}
		public MacroLiteralTokenContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_macroLiteralToken; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRustParserListener typedListener = listener as IRustParserListener;
			if (typedListener != null) typedListener.EnterMacroLiteralToken(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRustParserListener typedListener = listener as IRustParserListener;
			if (typedListener != null) typedListener.ExitMacroLiteralToken(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRustParserVisitor<TResult> typedVisitor = visitor as IRustParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMacroLiteralToken(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MacroLiteralTokenContext macroLiteralToken() {
		MacroLiteralTokenContext _localctx = new MacroLiteralTokenContext(Context, State);
		EnterRule(_localctx, 384, RULE_macroLiteralToken);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2462;
			literalExpression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MacroPunctuationTokenContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUS() { return GetToken(RustParser.MINUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SLASH() { return GetToken(RustParser.SLASH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PERCENT() { return GetToken(RustParser.PERCENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CARET() { return GetToken(RustParser.CARET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT() { return GetToken(RustParser.NOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AND() { return GetToken(RustParser.AND, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OR() { return GetToken(RustParser.OR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ANDAND() { return GetToken(RustParser.ANDAND, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OROR() { return GetToken(RustParser.OROR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PLUSEQ() { return GetToken(RustParser.PLUSEQ, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUSEQ() { return GetToken(RustParser.MINUSEQ, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STAREQ() { return GetToken(RustParser.STAREQ, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SLASHEQ() { return GetToken(RustParser.SLASHEQ, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PERCENTEQ() { return GetToken(RustParser.PERCENTEQ, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CARETEQ() { return GetToken(RustParser.CARETEQ, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ANDEQ() { return GetToken(RustParser.ANDEQ, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OREQ() { return GetToken(RustParser.OREQ, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SHLEQ() { return GetToken(RustParser.SHLEQ, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SHREQ() { return GetToken(RustParser.SHREQ, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQ() { return GetToken(RustParser.EQ, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQEQ() { return GetToken(RustParser.EQEQ, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NE() { return GetToken(RustParser.NE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GT() { return GetToken(RustParser.GT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LT() { return GetToken(RustParser.LT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GE() { return GetToken(RustParser.GE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LE() { return GetToken(RustParser.LE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AT() { return GetToken(RustParser.AT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNDERSCORE() { return GetToken(RustParser.UNDERSCORE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT() { return GetToken(RustParser.DOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOTDOT() { return GetToken(RustParser.DOTDOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOTDOTDOT() { return GetToken(RustParser.DOTDOTDOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOTDOTEQ() { return GetToken(RustParser.DOTDOTEQ, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA() { return GetToken(RustParser.COMMA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(RustParser.SEMI, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(RustParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PATHSEP() { return GetToken(RustParser.PATHSEP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RARROW() { return GetToken(RustParser.RARROW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FATARROW() { return GetToken(RustParser.FATARROW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode POUND() { return GetToken(RustParser.POUND, 0); }
		public MacroPunctuationTokenContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_macroPunctuationToken; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRustParserListener typedListener = listener as IRustParserListener;
			if (typedListener != null) typedListener.EnterMacroPunctuationToken(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRustParserListener typedListener = listener as IRustParserListener;
			if (typedListener != null) typedListener.ExitMacroPunctuationToken(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRustParserVisitor<TResult> typedVisitor = visitor as IRustParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMacroPunctuationToken(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MacroPunctuationTokenContext macroPunctuationToken() {
		MacroPunctuationTokenContext _localctx = new MacroPunctuationTokenContext(Context, State);
		EnterRule(_localctx, 386, RULE_macroPunctuationToken);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2464;
			_la = TokenStream.LA(1);
			if ( !(((((_la - 83)) & ~0x3f) == 0 && ((1L << (_la - 83)) & ((1L << (MINUS - 83)) | (1L << (SLASH - 83)) | (1L << (PERCENT - 83)) | (1L << (CARET - 83)) | (1L << (NOT - 83)) | (1L << (AND - 83)) | (1L << (OR - 83)) | (1L << (ANDAND - 83)) | (1L << (OROR - 83)) | (1L << (PLUSEQ - 83)) | (1L << (MINUSEQ - 83)) | (1L << (STAREQ - 83)) | (1L << (SLASHEQ - 83)) | (1L << (PERCENTEQ - 83)) | (1L << (CARETEQ - 83)) | (1L << (ANDEQ - 83)) | (1L << (OREQ - 83)) | (1L << (SHLEQ - 83)) | (1L << (SHREQ - 83)) | (1L << (EQ - 83)) | (1L << (EQEQ - 83)) | (1L << (NE - 83)) | (1L << (GT - 83)) | (1L << (LT - 83)) | (1L << (GE - 83)) | (1L << (LE - 83)) | (1L << (AT - 83)) | (1L << (UNDERSCORE - 83)) | (1L << (DOT - 83)) | (1L << (DOTDOT - 83)) | (1L << (DOTDOTDOT - 83)) | (1L << (DOTDOTEQ - 83)) | (1L << (COMMA - 83)) | (1L << (SEMI - 83)) | (1L << (COLON - 83)) | (1L << (PATHSEP - 83)) | (1L << (RARROW - 83)) | (1L << (FATARROW - 83)) | (1L << (POUND - 83)))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ShlContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] LT() { return GetTokens(RustParser.LT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LT(int i) {
			return GetToken(RustParser.LT, i);
		}
		public ShlContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_shl; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRustParserListener typedListener = listener as IRustParserListener;
			if (typedListener != null) typedListener.EnterShl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRustParserListener typedListener = listener as IRustParserListener;
			if (typedListener != null) typedListener.ExitShl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRustParserVisitor<TResult> typedVisitor = visitor as IRustParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitShl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ShlContext shl() {
		ShlContext _localctx = new ShlContext(Context, State);
		EnterRule(_localctx, 388, RULE_shl);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2466;
			Match(LT);
			State = 2467;
			if (!(this.next('<'))) throw new FailedPredicateException(this, "this.next('<')");
			State = 2468;
			Match(LT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ShrContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] GT() { return GetTokens(RustParser.GT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GT(int i) {
			return GetToken(RustParser.GT, i);
		}
		public ShrContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_shr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRustParserListener typedListener = listener as IRustParserListener;
			if (typedListener != null) typedListener.EnterShr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRustParserListener typedListener = listener as IRustParserListener;
			if (typedListener != null) typedListener.ExitShr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRustParserVisitor<TResult> typedVisitor = visitor as IRustParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitShr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ShrContext shr() {
		ShrContext _localctx = new ShrContext(Context, State);
		EnterRule(_localctx, 390, RULE_shr);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2470;
			Match(GT);
			State = 2471;
			if (!(this.next('>'))) throw new FailedPredicateException(this, "this.next('>')");
			State = 2472;
			Match(GT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 77: return expression_sempred((ExpressionContext)_localctx, predIndex);
		case 194: return shl_sempred((ShlContext)_localctx, predIndex);
		case 195: return shr_sempred((ShrContext)_localctx, predIndex);
		}
		return true;
	}
	private bool expression_sempred(ExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 26);
		case 1: return Precpred(Context, 25);
		case 2: return Precpred(Context, 24);
		case 3: return Precpred(Context, 23);
		case 4: return Precpred(Context, 22);
		case 5: return Precpred(Context, 21);
		case 6: return Precpred(Context, 20);
		case 7: return Precpred(Context, 19);
		case 8: return Precpred(Context, 18);
		case 9: return Precpred(Context, 14);
		case 10: return Precpred(Context, 13);
		case 11: return Precpred(Context, 12);
		case 12: return Precpred(Context, 37);
		case 13: return Precpred(Context, 36);
		case 14: return Precpred(Context, 35);
		case 15: return Precpred(Context, 34);
		case 16: return Precpred(Context, 33);
		case 17: return Precpred(Context, 32);
		case 18: return Precpred(Context, 31);
		case 19: return Precpred(Context, 27);
		case 20: return Precpred(Context, 17);
		}
		return true;
	}
	private bool shl_sempred(ShlContext _localctx, int predIndex) {
		switch (predIndex) {
		case 21: return this.next('<');
		}
		return true;
	}
	private bool shr_sempred(ShrContext _localctx, int predIndex) {
		switch (predIndex) {
		case 22: return this.next('>');
		}
		return true;
	}

	private static int[] _serializedATN = {
		4,1,130,2475,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,
		7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,7,14,
		2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,7,21,
		2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,7,28,
		2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,2,35,7,35,
		2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,2,42,7,42,
		2,43,7,43,2,44,7,44,2,45,7,45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,
		2,50,7,50,2,51,7,51,2,52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,7,56,
		2,57,7,57,2,58,7,58,2,59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,7,63,
		2,64,7,64,2,65,7,65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,2,70,7,70,
		2,71,7,71,2,72,7,72,2,73,7,73,2,74,7,74,2,75,7,75,2,76,7,76,2,77,7,77,
		2,78,7,78,2,79,7,79,2,80,7,80,2,81,7,81,2,82,7,82,2,83,7,83,2,84,7,84,
		2,85,7,85,2,86,7,86,2,87,7,87,2,88,7,88,2,89,7,89,2,90,7,90,2,91,7,91,
		2,92,7,92,2,93,7,93,2,94,7,94,2,95,7,95,2,96,7,96,2,97,7,97,2,98,7,98,
		2,99,7,99,2,100,7,100,2,101,7,101,2,102,7,102,2,103,7,103,2,104,7,104,
		2,105,7,105,2,106,7,106,2,107,7,107,2,108,7,108,2,109,7,109,2,110,7,110,
		2,111,7,111,2,112,7,112,2,113,7,113,2,114,7,114,2,115,7,115,2,116,7,116,
		2,117,7,117,2,118,7,118,2,119,7,119,2,120,7,120,2,121,7,121,2,122,7,122,
		2,123,7,123,2,124,7,124,2,125,7,125,2,126,7,126,2,127,7,127,2,128,7,128,
		2,129,7,129,2,130,7,130,2,131,7,131,2,132,7,132,2,133,7,133,2,134,7,134,
		2,135,7,135,2,136,7,136,2,137,7,137,2,138,7,138,2,139,7,139,2,140,7,140,
		2,141,7,141,2,142,7,142,2,143,7,143,2,144,7,144,2,145,7,145,2,146,7,146,
		2,147,7,147,2,148,7,148,2,149,7,149,2,150,7,150,2,151,7,151,2,152,7,152,
		2,153,7,153,2,154,7,154,2,155,7,155,2,156,7,156,2,157,7,157,2,158,7,158,
		2,159,7,159,2,160,7,160,2,161,7,161,2,162,7,162,2,163,7,163,2,164,7,164,
		2,165,7,165,2,166,7,166,2,167,7,167,2,168,7,168,2,169,7,169,2,170,7,170,
		2,171,7,171,2,172,7,172,2,173,7,173,2,174,7,174,2,175,7,175,2,176,7,176,
		2,177,7,177,2,178,7,178,2,179,7,179,2,180,7,180,2,181,7,181,2,182,7,182,
		2,183,7,183,2,184,7,184,2,185,7,185,2,186,7,186,2,187,7,187,2,188,7,188,
		2,189,7,189,2,190,7,190,2,191,7,191,2,192,7,192,2,193,7,193,2,194,7,194,
		2,195,7,195,1,0,5,0,394,8,0,10,0,12,0,397,9,0,1,0,5,0,400,8,0,10,0,12,
		0,403,9,0,1,0,1,0,1,1,1,1,1,1,1,1,1,2,1,2,5,2,413,8,2,10,2,12,2,416,9,
		2,1,2,1,2,1,2,5,2,421,8,2,10,2,12,2,424,9,2,1,2,1,2,1,2,5,2,429,8,2,10,
		2,12,2,432,9,2,1,2,3,2,435,8,2,1,3,4,3,438,8,3,11,3,12,3,439,1,3,3,3,443,
		8,3,1,4,1,4,1,4,1,4,1,4,3,4,450,8,4,1,5,1,5,1,5,1,5,5,5,456,8,5,10,5,12,
		5,459,9,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,5,5,468,8,5,10,5,12,5,471,9,5,1,
		5,1,5,1,5,1,5,1,5,1,5,1,5,5,5,480,8,5,10,5,12,5,483,9,5,1,5,1,5,3,5,487,
		8,5,1,6,1,6,1,6,1,6,1,6,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,
		7,1,7,1,7,3,7,508,8,7,1,8,1,8,1,8,5,8,513,8,8,10,8,12,8,516,9,8,1,8,3,
		8,519,8,8,1,9,1,9,1,9,1,9,1,10,1,10,5,10,527,8,10,10,10,12,10,530,9,10,
		1,10,1,10,1,10,5,10,535,8,10,10,10,12,10,538,9,10,1,10,1,10,1,10,5,10,
		543,8,10,10,10,12,10,546,9,10,1,10,3,10,549,8,10,1,11,4,11,552,8,11,11,
		11,12,11,553,1,11,1,11,1,11,1,11,3,11,560,8,11,1,11,1,11,1,11,1,11,1,11,
		4,11,567,8,11,11,11,12,11,568,1,11,1,11,3,11,573,8,11,1,11,1,11,3,11,577,
		8,11,1,12,1,12,1,12,1,12,3,12,583,8,12,1,13,1,13,1,14,1,14,1,14,1,14,3,
		14,591,8,14,1,15,1,15,1,16,1,16,1,17,5,17,598,8,17,10,17,12,17,601,9,17,
		1,17,1,17,3,17,605,8,17,1,18,3,18,608,8,18,1,18,1,18,1,18,1,18,1,18,1,
		18,1,18,1,18,1,18,1,18,1,18,1,18,1,18,3,18,623,8,18,1,19,1,19,3,19,627,
		8,19,1,20,3,20,630,8,20,1,20,1,20,1,20,1,20,1,20,5,20,637,8,20,10,20,12,
		20,640,9,20,1,20,5,20,643,8,20,10,20,12,20,646,9,20,1,20,3,20,649,8,20,
		1,21,1,21,1,21,1,21,3,21,655,8,21,1,21,1,21,1,22,1,22,3,22,661,8,22,1,
		23,1,23,1,23,3,23,666,8,23,1,24,1,24,1,24,1,24,1,25,3,25,673,8,25,1,25,
		3,25,676,8,25,1,25,1,25,1,25,1,25,1,25,5,25,683,8,25,10,25,12,25,686,9,
		25,1,25,3,25,689,8,25,3,25,691,8,25,1,25,3,25,694,8,25,1,25,1,25,1,25,
		1,25,3,25,700,8,25,3,25,702,8,25,3,25,704,8,25,1,26,1,26,1,26,1,26,3,26,
		710,8,26,1,26,1,26,3,26,714,8,26,1,26,1,26,3,26,718,8,26,1,26,3,26,721,
		8,26,1,26,1,26,3,26,725,8,26,1,27,3,27,728,8,27,1,27,3,27,731,8,27,1,27,
		3,27,734,8,27,1,27,1,27,3,27,738,8,27,3,27,740,8,27,1,28,1,28,1,29,1,29,
		3,29,746,8,29,1,29,1,29,1,29,3,29,751,8,29,1,29,1,29,1,29,5,29,756,8,29,
		10,29,12,29,759,9,29,1,29,3,29,762,8,29,3,29,764,8,29,1,30,5,30,767,8,
		30,10,30,12,30,770,9,30,1,30,1,30,3,30,774,8,30,1,31,1,31,3,31,778,8,31,
		3,31,780,8,31,1,31,3,31,783,8,31,1,31,1,31,1,32,3,32,788,8,32,1,32,1,32,
		1,32,1,32,1,33,5,33,795,8,33,10,33,12,33,798,9,33,1,33,1,33,1,33,3,33,
		803,8,33,1,34,1,34,1,34,1,34,3,34,809,8,34,1,35,1,35,1,35,1,36,1,36,1,
		36,3,36,817,8,36,1,36,3,36,820,8,36,1,36,1,36,3,36,824,8,36,1,36,1,36,
		1,37,1,37,3,37,830,8,37,1,38,1,38,1,38,3,38,835,8,38,1,38,3,38,838,8,38,
		1,38,1,38,3,38,842,8,38,1,38,1,38,3,38,846,8,38,1,39,1,39,1,39,3,39,851,
		8,39,1,39,1,39,3,39,855,8,39,1,39,1,39,3,39,859,8,39,1,39,1,39,1,40,1,
		40,1,40,5,40,866,8,40,10,40,12,40,869,9,40,1,40,3,40,872,8,40,1,41,5,41,
		875,8,41,10,41,12,41,878,9,41,1,41,3,41,881,8,41,1,41,1,41,1,41,1,41,1,
		42,1,42,1,42,5,42,890,8,42,10,42,12,42,893,9,42,1,42,3,42,896,8,42,1,43,
		5,43,899,8,43,10,43,12,43,902,9,43,1,43,3,43,905,8,43,1,43,1,43,1,44,1,
		44,1,44,3,44,912,8,44,1,44,3,44,915,8,44,1,44,1,44,3,44,919,8,44,1,44,
		1,44,1,45,1,45,1,45,5,45,926,8,45,10,45,12,45,929,9,45,1,45,3,45,932,8,
		45,1,46,5,46,935,8,46,10,46,12,46,938,9,46,1,46,3,46,941,8,46,1,46,1,46,
		1,46,1,46,3,46,947,8,46,1,47,1,47,3,47,951,8,47,1,47,1,47,1,48,1,48,3,
		48,957,8,48,1,48,1,48,1,49,1,49,1,49,1,50,1,50,1,50,3,50,967,8,50,1,50,
		3,50,970,8,50,1,50,1,50,1,50,1,50,1,51,1,51,1,51,3,51,979,8,51,1,51,1,
		51,1,51,1,51,3,51,985,8,51,1,51,1,51,1,52,1,52,3,52,991,8,52,1,52,1,52,
		1,52,1,52,1,52,3,52,998,8,52,1,52,1,52,1,53,3,53,1003,8,53,1,53,1,53,1,
		53,3,53,1008,8,53,1,53,1,53,3,53,1012,8,53,3,53,1014,8,53,1,53,3,53,1017,
		8,53,1,53,1,53,5,53,1021,8,53,10,53,12,53,1024,9,53,1,53,5,53,1027,8,53,
		10,53,12,53,1030,9,53,1,53,1,53,1,54,1,54,3,54,1036,8,54,1,55,1,55,3,55,
		1040,8,55,1,55,1,55,3,55,1044,8,55,1,55,1,55,5,55,1048,8,55,10,55,12,55,
		1051,9,55,1,55,5,55,1054,8,55,10,55,12,55,1057,9,55,1,55,1,55,1,56,3,56,
		1062,8,56,1,56,1,56,3,56,1066,8,56,1,56,3,56,1069,8,56,1,56,1,56,1,56,
		1,56,3,56,1075,8,56,1,56,1,56,5,56,1079,8,56,10,56,12,56,1082,9,56,1,56,
		5,56,1085,8,56,10,56,12,56,1088,9,56,1,56,1,56,1,57,3,57,1093,8,57,1,57,
		1,57,3,57,1097,8,57,1,57,1,57,5,57,1101,8,57,10,57,12,57,1104,9,57,1,57,
		5,57,1107,8,57,10,57,12,57,1110,9,57,1,57,1,57,1,58,5,58,1115,8,58,10,
		58,12,58,1118,9,58,1,58,1,58,3,58,1122,8,58,1,58,1,58,3,58,1126,8,58,3,
		58,1128,8,58,1,59,1,59,1,59,1,59,5,59,1134,8,59,10,59,12,59,1137,9,59,
		1,59,1,59,3,59,1141,8,59,3,59,1143,8,59,1,59,1,59,1,60,5,60,1148,8,60,
		10,60,12,60,1151,9,60,1,60,1,60,1,60,3,60,1156,8,60,1,61,3,61,1159,8,61,
		1,61,1,61,1,61,3,61,1164,8,61,1,62,3,62,1167,8,62,1,62,1,62,1,62,3,62,
		1172,8,62,3,62,1174,8,62,1,62,1,62,3,62,1178,8,62,1,63,1,63,1,63,1,63,
		1,63,1,64,1,64,1,64,1,64,5,64,1189,8,64,10,64,12,64,1192,9,64,1,64,3,64,
		1195,8,64,1,65,1,65,3,65,1199,8,65,1,66,1,66,1,66,1,66,1,67,3,67,1206,
		8,67,1,67,1,67,1,67,3,67,1211,8,67,1,68,1,68,1,68,1,69,5,69,1217,8,69,
		10,69,12,69,1220,9,69,1,69,1,69,3,69,1224,8,69,1,69,1,69,1,69,3,69,1229,
		8,69,3,69,1231,8,69,1,70,1,70,1,70,1,70,1,70,1,70,1,71,1,71,1,71,1,71,
		1,71,1,72,1,72,3,72,1246,8,72,1,73,1,73,1,73,3,73,1251,8,73,1,74,1,74,
		1,74,1,74,1,74,3,74,1258,8,74,1,75,5,75,1261,8,75,10,75,12,75,1264,9,75,
		1,75,1,75,1,75,1,75,3,75,1270,8,75,1,75,1,75,3,75,1274,8,75,1,75,1,75,
		1,76,1,76,1,76,1,76,1,76,3,76,1283,8,76,3,76,1285,8,76,1,77,1,77,4,77,
		1289,8,77,11,77,12,77,1290,1,77,1,77,1,77,1,77,1,77,1,77,3,77,1299,8,77,
		1,77,1,77,1,77,1,77,1,77,1,77,1,77,3,77,1308,8,77,1,77,1,77,1,77,1,77,
		3,77,1314,8,77,1,77,3,77,1317,8,77,1,77,1,77,3,77,1321,8,77,1,77,3,77,
		1324,8,77,1,77,1,77,3,77,1328,8,77,1,77,1,77,5,77,1332,8,77,10,77,12,77,
		1335,9,77,1,77,1,77,1,77,1,77,1,77,5,77,1342,8,77,10,77,12,77,1345,9,77,
		1,77,3,77,1348,8,77,1,77,1,77,1,77,5,77,1353,8,77,10,77,12,77,1356,9,77,
		1,77,3,77,1359,8,77,1,77,1,77,1,77,1,77,1,77,1,77,3,77,1367,8,77,1,77,
		1,77,1,77,1,77,1,77,1,77,1,77,1,77,1,77,3,77,1378,8,77,1,77,1,77,1,77,
		1,77,1,77,1,77,1,77,1,77,1,77,1,77,1,77,1,77,1,77,1,77,1,77,1,77,1,77,
		1,77,1,77,1,77,1,77,1,77,1,77,1,77,1,77,1,77,1,77,1,77,1,77,1,77,1,77,
		1,77,1,77,1,77,1,77,1,77,3,77,1416,8,77,1,77,1,77,1,77,1,77,1,77,1,77,
		1,77,1,77,1,77,1,77,1,77,1,77,1,77,1,77,3,77,1432,8,77,1,77,1,77,1,77,
		1,77,1,77,1,77,1,77,1,77,1,77,1,77,1,77,1,77,1,77,1,77,3,77,1448,8,77,
		5,77,1450,8,77,10,77,12,77,1453,9,77,1,78,1,78,1,79,1,79,1,80,4,80,1460,
		8,80,11,80,12,80,1461,1,80,1,80,1,80,1,80,1,80,1,80,1,80,1,80,1,80,3,80,
		1473,8,80,1,81,1,81,1,82,1,82,3,82,1479,8,82,1,83,1,83,5,83,1483,8,83,
		10,83,12,83,1486,9,83,1,83,3,83,1489,8,83,1,83,1,83,1,84,4,84,1494,8,84,
		11,84,12,84,1495,1,84,3,84,1499,8,84,1,84,3,84,1502,8,84,1,85,1,85,3,85,
		1506,8,85,1,85,1,85,1,86,1,86,1,86,1,87,1,87,1,87,5,87,1516,8,87,10,87,
		12,87,1519,9,87,1,87,3,87,1522,8,87,1,87,1,87,1,87,1,87,3,87,1528,8,87,
		1,88,1,88,1,88,4,88,1533,8,88,11,88,12,88,1534,1,88,3,88,1538,8,88,1,89,
		1,89,1,90,1,90,1,90,3,90,1545,8,90,1,91,1,91,1,91,5,91,1550,8,91,10,91,
		12,91,1553,9,91,1,91,1,91,3,91,1557,8,91,1,91,1,91,1,92,1,92,1,92,5,92,
		1564,8,92,10,92,12,92,1567,9,92,1,92,1,92,1,92,3,92,1572,8,92,3,92,1574,
		8,92,1,93,5,93,1577,8,93,10,93,12,93,1580,9,93,1,93,1,93,1,93,3,93,1585,
		8,93,1,93,1,93,1,93,3,93,1590,8,93,1,94,1,94,1,94,1,95,1,95,1,95,5,95,
		1598,8,95,10,95,12,95,1601,9,95,1,95,1,95,1,95,5,95,1606,8,95,10,95,12,
		95,1609,9,95,1,95,3,95,1612,8,95,3,95,1614,8,95,1,95,1,95,1,96,1,96,1,
		97,1,97,1,97,3,97,1623,8,97,1,98,1,98,1,98,3,98,1628,8,98,1,98,1,98,1,
		99,1,99,1,99,5,99,1635,8,99,10,99,12,99,1638,9,99,1,99,3,99,1641,8,99,
		1,100,1,100,1,100,3,100,1646,8,100,1,100,1,100,1,100,3,100,1651,8,100,
		1,101,1,101,1,101,1,101,1,101,5,101,1658,8,101,10,101,12,101,1661,9,101,
		1,101,3,101,1664,8,101,3,101,1666,8,101,1,101,1,101,1,102,1,102,1,103,
		1,103,1,103,5,103,1675,8,103,10,103,12,103,1678,9,103,1,103,3,103,1681,
		8,103,1,104,3,104,1684,8,104,1,104,1,104,1,104,3,104,1689,8,104,1,104,
		3,104,1692,8,104,1,104,1,104,1,104,1,104,1,104,3,104,1699,8,104,1,105,
		1,105,1,105,5,105,1704,8,105,10,105,12,105,1707,9,105,1,105,3,105,1710,
		8,105,1,106,5,106,1713,8,106,10,106,12,106,1716,9,106,1,106,1,106,1,106,
		3,106,1721,8,106,1,107,3,107,1724,8,107,1,107,1,107,1,107,1,107,3,107,
		1730,8,107,1,108,1,108,1,108,1,109,1,109,1,109,1,109,1,110,1,110,1,110,
		1,110,1,110,1,110,1,110,1,111,1,111,1,111,1,111,1,111,1,111,1,112,1,112,
		1,112,1,113,1,113,1,113,1,113,1,113,1,113,1,113,3,113,1762,8,113,3,113,
		1764,8,113,1,114,1,114,1,114,1,114,1,114,1,114,1,114,1,114,1,114,1,114,
		3,114,1776,8,114,3,114,1778,8,114,1,115,1,115,1,115,1,115,5,115,1784,8,
		115,10,115,12,115,1787,9,115,1,115,3,115,1790,8,115,1,115,1,115,1,116,
		1,116,1,116,1,116,5,116,1798,8,116,10,116,12,116,1801,9,116,1,116,1,116,
		1,116,1,116,3,116,1807,8,116,1,117,1,117,1,117,1,117,1,117,3,117,1814,
		8,117,3,117,1816,8,117,1,118,5,118,1819,8,118,10,118,12,118,1822,9,118,
		1,118,1,118,3,118,1826,8,118,1,119,1,119,1,119,1,120,3,120,1832,8,120,
		1,120,1,120,1,120,5,120,1837,8,120,10,120,12,120,1840,9,120,1,121,1,121,
		3,121,1844,8,121,1,122,1,122,1,122,1,122,1,122,1,122,1,122,1,122,1,122,
		1,122,1,122,1,122,3,122,1858,8,122,1,123,1,123,1,123,1,123,1,123,1,123,
		1,123,1,123,1,123,3,123,1869,8,123,1,123,1,123,3,123,1873,8,123,1,123,
		3,123,1876,8,123,1,124,3,124,1879,8,124,1,124,3,124,1882,8,124,1,124,1,
		124,1,124,3,124,1887,8,124,1,125,1,125,1,126,1,126,1,127,1,127,1,127,1,
		127,1,127,1,127,1,127,1,127,1,127,1,127,1,127,3,127,1904,8,127,1,128,1,
		128,1,128,3,128,1909,8,128,1,128,1,128,3,128,1913,8,128,1,128,1,128,3,
		128,1917,8,128,1,129,1,129,3,129,1921,8,129,1,129,1,129,1,130,1,130,1,
		130,3,130,1928,8,130,1,130,1,130,1,131,1,131,1,131,3,131,1935,8,131,3,
		131,1937,8,131,1,131,3,131,1940,8,131,1,132,1,132,1,132,5,132,1945,8,132,
		10,132,12,132,1948,9,132,1,133,5,133,1951,8,133,10,133,12,133,1954,9,133,
		1,133,1,133,1,133,1,133,1,133,1,133,1,133,1,133,1,133,3,133,1965,8,133,
		1,133,3,133,1968,8,133,1,133,3,133,1971,8,133,1,134,5,134,1974,8,134,10,
		134,12,134,1977,9,134,1,134,1,134,1,135,1,135,1,135,3,135,1984,8,135,1,
		135,1,135,1,136,1,136,1,136,5,136,1991,8,136,10,136,12,136,1994,9,136,
		1,136,3,136,1997,8,136,1,137,1,137,3,137,2001,8,137,1,137,1,137,1,138,
		1,138,1,138,1,138,1,138,1,138,1,138,4,138,2012,8,138,11,138,12,138,2013,
		1,138,3,138,2017,8,138,3,138,2019,8,138,1,139,1,139,1,139,1,139,1,140,
		1,140,3,140,2027,8,140,1,140,1,140,1,141,1,141,1,141,5,141,2034,8,141,
		10,141,12,141,2037,9,141,1,141,3,141,2040,8,141,1,142,1,142,3,142,2044,
		8,142,1,143,1,143,1,143,3,143,2049,8,143,1,144,1,144,1,144,1,144,1,144,
		1,144,1,144,1,144,1,144,1,144,1,144,1,144,1,144,1,144,3,144,2065,8,144,
		1,145,1,145,1,145,1,145,1,146,1,146,1,147,1,147,1,147,1,147,4,147,2077,
		8,147,11,147,12,147,2078,1,147,3,147,2082,8,147,3,147,2084,8,147,1,147,
		1,147,1,148,1,148,1,148,1,148,1,148,1,148,1,149,1,149,1,149,1,149,1,150,
		1,150,3,150,2100,8,150,1,150,3,150,2103,8,150,1,150,1,150,1,151,1,151,
		1,151,1,151,1,152,3,152,2112,8,152,1,152,1,152,1,152,1,152,3,152,2118,
		8,152,1,152,1,152,3,152,2122,8,152,1,153,3,153,2125,8,153,1,153,1,153,
		3,153,2129,8,153,3,153,2131,8,153,1,154,1,154,1,154,1,155,1,155,3,155,
		2138,8,155,1,156,1,156,1,156,5,156,2143,8,156,10,156,12,156,2146,9,156,
		1,156,3,156,2149,8,156,1,157,5,157,2152,8,157,10,157,12,157,2155,9,157,
		1,157,1,157,3,157,2159,8,157,1,157,3,157,2162,8,157,1,157,1,157,1,158,
		1,158,1,158,5,158,2169,8,158,10,158,12,158,2172,9,158,1,158,1,158,1,158,
		5,158,2177,8,158,10,158,12,158,2180,9,158,1,158,1,158,1,159,3,159,2185,
		8,159,1,159,1,159,1,160,3,160,2190,8,160,1,160,1,160,1,161,1,161,1,161,
		1,162,1,162,1,162,1,163,1,163,1,164,1,164,1,164,5,164,2205,8,164,10,164,
		12,164,2208,9,164,1,164,3,164,2211,8,164,1,165,1,165,3,165,2215,8,165,
		1,166,3,166,2218,8,166,1,166,3,166,2221,8,166,1,166,1,166,1,166,3,166,
		2226,8,166,1,166,3,166,2229,8,166,1,166,1,166,1,166,3,166,2234,8,166,1,
		167,1,167,1,167,5,167,2239,8,167,10,167,12,167,2242,9,167,1,167,3,167,
		2245,8,167,1,168,1,168,1,169,3,169,2250,8,169,1,169,1,169,1,169,5,169,
		2255,8,169,10,169,12,169,2258,9,169,1,170,1,170,1,170,1,170,1,170,3,170,
		2265,8,170,1,171,3,171,2268,8,171,1,171,1,171,1,171,5,171,2273,8,171,10,
		171,12,171,2276,9,171,1,172,1,172,1,172,3,172,2281,8,172,1,173,1,173,1,
		173,1,173,1,173,1,173,3,173,2289,8,173,1,174,1,174,1,174,1,174,1,174,1,
		174,3,174,2297,8,174,1,174,1,174,3,174,2301,8,174,1,174,3,174,2304,8,174,
		1,174,1,174,1,174,1,174,1,174,1,174,3,174,2312,8,174,1,174,3,174,2315,
		8,174,1,174,1,174,1,174,1,174,1,174,1,174,5,174,2323,8,174,10,174,12,174,
		2326,9,174,1,174,1,174,3,174,2330,8,174,1,174,1,174,3,174,2334,8,174,1,
		175,1,175,1,175,1,175,3,175,2340,8,175,1,176,1,176,3,176,2344,8,176,1,
		176,1,176,3,176,2348,8,176,1,177,1,177,1,177,5,177,2353,8,177,10,177,12,
		177,2356,9,177,1,178,1,178,1,178,5,178,2361,8,178,10,178,12,178,2364,9,
		178,1,179,1,179,1,179,5,179,2369,8,179,10,179,12,179,2372,9,179,1,180,
		1,180,1,180,1,180,1,181,1,181,1,181,4,181,2381,8,181,11,181,12,181,2382,
		1,182,1,182,1,182,1,182,3,182,2389,8,182,1,182,1,182,1,183,1,183,1,183,
		4,183,2396,8,183,11,183,12,183,2397,1,184,3,184,2401,8,184,1,184,1,184,
		1,184,5,184,2406,8,184,10,184,12,184,2409,9,184,1,185,1,185,3,185,2413,
		8,185,1,185,1,185,3,185,2417,8,185,1,186,1,186,3,186,2421,8,186,1,186,
		1,186,1,186,3,186,2426,8,186,1,187,1,187,1,187,5,187,2431,8,187,10,187,
		12,187,2434,9,187,1,187,3,187,2437,8,187,1,188,1,188,1,188,1,188,1,188,
		1,188,1,188,3,188,2446,8,188,1,188,3,188,2449,8,188,1,189,1,189,1,190,
		1,190,1,191,1,191,1,191,1,191,1,191,1,191,3,191,2461,8,191,1,192,1,192,
		1,193,1,193,1,194,1,194,1,194,1,194,1,195,1,195,1,195,1,195,1,195,0,1,
		154,196,0,2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32,34,36,38,40,42,44,
		46,48,50,52,54,56,58,60,62,64,66,68,70,72,74,76,78,80,82,84,86,88,90,92,
		94,96,98,100,102,104,106,108,110,112,114,116,118,120,122,124,126,128,130,
		132,134,136,138,140,142,144,146,148,150,152,154,156,158,160,162,164,166,
		168,170,172,174,176,178,180,182,184,186,188,190,192,194,196,198,200,202,
		204,206,208,210,212,214,216,218,220,222,224,226,228,230,232,234,236,238,
		240,242,244,246,248,250,252,254,256,258,260,262,264,266,268,270,272,274,
		276,278,280,282,284,286,288,290,292,294,296,298,300,302,304,306,308,310,
		312,314,316,318,320,322,324,326,328,330,332,334,336,338,340,342,344,346,
		348,350,352,354,356,358,360,362,364,366,368,370,372,374,376,378,380,382,
		384,386,388,390,0,14,3,0,82,82,84,84,124,124,1,0,70,71,2,0,89,89,91,91,
		2,0,83,83,88,88,1,0,84,86,1,0,82,83,1,0,104,109,1,0,93,102,4,0,9,9,30,
		30,69,75,80,80,2,0,3,3,20,20,3,0,53,53,55,55,81,81,2,0,54,54,57,58,1,0,
		1,53,2,0,83,83,85,122,2760,0,395,1,0,0,0,2,406,1,0,0,0,4,434,1,0,0,0,6,
		442,1,0,0,0,8,449,1,0,0,0,10,486,1,0,0,0,12,488,1,0,0,0,14,507,1,0,0,0,
		16,509,1,0,0,0,18,520,1,0,0,0,20,548,1,0,0,0,22,576,1,0,0,0,24,582,1,0,
		0,0,26,584,1,0,0,0,28,590,1,0,0,0,30,592,1,0,0,0,32,594,1,0,0,0,34,599,
		1,0,0,0,36,607,1,0,0,0,38,626,1,0,0,0,40,629,1,0,0,0,42,650,1,0,0,0,44,
		660,1,0,0,0,46,662,1,0,0,0,48,667,1,0,0,0,50,703,1,0,0,0,52,705,1,0,0,
		0,54,727,1,0,0,0,56,741,1,0,0,0,58,763,1,0,0,0,60,768,1,0,0,0,62,779,1,
		0,0,0,64,787,1,0,0,0,66,796,1,0,0,0,68,804,1,0,0,0,70,810,1,0,0,0,72,813,
		1,0,0,0,74,829,1,0,0,0,76,831,1,0,0,0,78,847,1,0,0,0,80,862,1,0,0,0,82,
		876,1,0,0,0,84,886,1,0,0,0,86,900,1,0,0,0,88,908,1,0,0,0,90,922,1,0,0,
		0,92,936,1,0,0,0,94,948,1,0,0,0,96,954,1,0,0,0,98,960,1,0,0,0,100,963,
		1,0,0,0,102,975,1,0,0,0,104,988,1,0,0,0,106,1002,1,0,0,0,108,1035,1,0,
		0,0,110,1037,1,0,0,0,112,1061,1,0,0,0,114,1092,1,0,0,0,116,1116,1,0,0,
		0,118,1129,1,0,0,0,120,1149,1,0,0,0,122,1158,1,0,0,0,124,1166,1,0,0,0,
		126,1179,1,0,0,0,128,1184,1,0,0,0,130,1198,1,0,0,0,132,1200,1,0,0,0,134,
		1205,1,0,0,0,136,1212,1,0,0,0,138,1218,1,0,0,0,140,1232,1,0,0,0,142,1238,
		1,0,0,0,144,1243,1,0,0,0,146,1250,1,0,0,0,148,1257,1,0,0,0,150,1262,1,
		0,0,0,152,1284,1,0,0,0,154,1366,1,0,0,0,156,1454,1,0,0,0,158,1456,1,0,
		0,0,160,1472,1,0,0,0,162,1474,1,0,0,0,164,1478,1,0,0,0,166,1480,1,0,0,
		0,168,1501,1,0,0,0,170,1503,1,0,0,0,172,1509,1,0,0,0,174,1527,1,0,0,0,
		176,1532,1,0,0,0,178,1539,1,0,0,0,180,1544,1,0,0,0,182,1546,1,0,0,0,184,
		1560,1,0,0,0,186,1578,1,0,0,0,188,1591,1,0,0,0,190,1594,1,0,0,0,192,1617,
		1,0,0,0,194,1622,1,0,0,0,196,1624,1,0,0,0,198,1631,1,0,0,0,200,1650,1,
		0,0,0,202,1652,1,0,0,0,204,1669,1,0,0,0,206,1671,1,0,0,0,208,1683,1,0,
		0,0,210,1700,1,0,0,0,212,1714,1,0,0,0,214,1723,1,0,0,0,216,1731,1,0,0,
		0,218,1734,1,0,0,0,220,1738,1,0,0,0,222,1745,1,0,0,0,224,1751,1,0,0,0,
		226,1754,1,0,0,0,228,1765,1,0,0,0,230,1779,1,0,0,0,232,1799,1,0,0,0,234,
		1815,1,0,0,0,236,1820,1,0,0,0,238,1827,1,0,0,0,240,1831,1,0,0,0,242,1843,
		1,0,0,0,244,1857,1,0,0,0,246,1875,1,0,0,0,248,1878,1,0,0,0,250,1888,1,
		0,0,0,252,1890,1,0,0,0,254,1903,1,0,0,0,256,1916,1,0,0,0,258,1918,1,0,
		0,0,260,1924,1,0,0,0,262,1939,1,0,0,0,264,1941,1,0,0,0,266,1952,1,0,0,
		0,268,1975,1,0,0,0,270,1980,1,0,0,0,272,1987,1,0,0,0,274,1998,1,0,0,0,
		276,2018,1,0,0,0,278,2020,1,0,0,0,280,2024,1,0,0,0,282,2030,1,0,0,0,284,
		2043,1,0,0,0,286,2048,1,0,0,0,288,2064,1,0,0,0,290,2066,1,0,0,0,292,2070,
		1,0,0,0,294,2072,1,0,0,0,296,2087,1,0,0,0,298,2093,1,0,0,0,300,2097,1,
		0,0,0,302,2106,1,0,0,0,304,2111,1,0,0,0,306,2124,1,0,0,0,308,2132,1,0,
		0,0,310,2137,1,0,0,0,312,2139,1,0,0,0,314,2153,1,0,0,0,316,2170,1,0,0,
		0,318,2184,1,0,0,0,320,2189,1,0,0,0,322,2193,1,0,0,0,324,2196,1,0,0,0,
		326,2199,1,0,0,0,328,2201,1,0,0,0,330,2214,1,0,0,0,332,2233,1,0,0,0,334,
		2240,1,0,0,0,336,2246,1,0,0,0,338,2249,1,0,0,0,340,2264,1,0,0,0,342,2267,
		1,0,0,0,344,2277,1,0,0,0,346,2288,1,0,0,0,348,2333,1,0,0,0,350,2339,1,
		0,0,0,352,2347,1,0,0,0,354,2349,1,0,0,0,356,2357,1,0,0,0,358,2365,1,0,
		0,0,360,2373,1,0,0,0,362,2377,1,0,0,0,364,2384,1,0,0,0,366,2392,1,0,0,
		0,368,2400,1,0,0,0,370,2410,1,0,0,0,372,2418,1,0,0,0,374,2427,1,0,0,0,
		376,2438,1,0,0,0,378,2450,1,0,0,0,380,2452,1,0,0,0,382,2460,1,0,0,0,384,
		2462,1,0,0,0,386,2464,1,0,0,0,388,2466,1,0,0,0,390,2470,1,0,0,0,392,394,
		3,140,70,0,393,392,1,0,0,0,394,397,1,0,0,0,395,393,1,0,0,0,395,396,1,0,
		0,0,396,401,1,0,0,0,397,395,1,0,0,0,398,400,3,34,17,0,399,398,1,0,0,0,
		400,403,1,0,0,0,401,399,1,0,0,0,401,402,1,0,0,0,402,404,1,0,0,0,403,401,
		1,0,0,0,404,405,5,0,0,1,405,1,1,0,0,0,406,407,3,338,169,0,407,408,5,88,
		0,0,408,409,3,4,2,0,409,3,1,0,0,0,410,414,5,129,0,0,411,413,3,6,3,0,412,
		411,1,0,0,0,413,416,1,0,0,0,414,412,1,0,0,0,414,415,1,0,0,0,415,417,1,
		0,0,0,416,414,1,0,0,0,417,435,5,130,0,0,418,422,5,127,0,0,419,421,3,6,
		3,0,420,419,1,0,0,0,421,424,1,0,0,0,422,420,1,0,0,0,422,423,1,0,0,0,423,
		425,1,0,0,0,424,422,1,0,0,0,425,435,5,128,0,0,426,430,5,125,0,0,427,429,
		3,6,3,0,428,427,1,0,0,0,429,432,1,0,0,0,430,428,1,0,0,0,430,431,1,0,0,
		0,431,433,1,0,0,0,432,430,1,0,0,0,433,435,5,126,0,0,434,410,1,0,0,0,434,
		418,1,0,0,0,434,426,1,0,0,0,435,5,1,0,0,0,436,438,3,8,4,0,437,436,1,0,
		0,0,438,439,1,0,0,0,439,437,1,0,0,0,439,440,1,0,0,0,440,443,1,0,0,0,441,
		443,3,4,2,0,442,437,1,0,0,0,442,441,1,0,0,0,443,7,1,0,0,0,444,450,3,382,
		191,0,445,450,3,384,192,0,446,450,3,386,193,0,447,450,3,30,15,0,448,450,
		5,123,0,0,449,444,1,0,0,0,449,445,1,0,0,0,449,446,1,0,0,0,449,447,1,0,
		0,0,449,448,1,0,0,0,450,9,1,0,0,0,451,452,3,338,169,0,452,453,5,88,0,0,
		453,457,5,129,0,0,454,456,3,6,3,0,455,454,1,0,0,0,456,459,1,0,0,0,457,
		455,1,0,0,0,457,458,1,0,0,0,458,460,1,0,0,0,459,457,1,0,0,0,460,461,5,
		130,0,0,461,462,5,117,0,0,462,487,1,0,0,0,463,464,3,338,169,0,464,465,
		5,88,0,0,465,469,5,127,0,0,466,468,3,6,3,0,467,466,1,0,0,0,468,471,1,0,
		0,0,469,467,1,0,0,0,469,470,1,0,0,0,470,472,1,0,0,0,471,469,1,0,0,0,472,
		473,5,128,0,0,473,474,5,117,0,0,474,487,1,0,0,0,475,476,3,338,169,0,476,
		477,5,88,0,0,477,481,5,125,0,0,478,480,3,6,3,0,479,478,1,0,0,0,480,483,
		1,0,0,0,481,479,1,0,0,0,481,482,1,0,0,0,482,484,1,0,0,0,483,481,1,0,0,
		0,484,485,5,126,0,0,485,487,1,0,0,0,486,451,1,0,0,0,486,463,1,0,0,0,486,
		475,1,0,0,0,487,11,1,0,0,0,488,489,5,54,0,0,489,490,5,88,0,0,490,491,3,
		378,189,0,491,492,3,14,7,0,492,13,1,0,0,0,493,494,5,129,0,0,494,495,3,
		16,8,0,495,496,5,130,0,0,496,497,5,117,0,0,497,508,1,0,0,0,498,499,5,127,
		0,0,499,500,3,16,8,0,500,501,5,128,0,0,501,502,5,117,0,0,502,508,1,0,0,
		0,503,504,5,125,0,0,504,505,3,16,8,0,505,506,5,126,0,0,506,508,1,0,0,0,
		507,493,1,0,0,0,507,498,1,0,0,0,507,503,1,0,0,0,508,15,1,0,0,0,509,514,
		3,18,9,0,510,511,5,117,0,0,511,513,3,18,9,0,512,510,1,0,0,0,513,516,1,
		0,0,0,514,512,1,0,0,0,514,515,1,0,0,0,515,518,1,0,0,0,516,514,1,0,0,0,
		517,519,5,117,0,0,518,517,1,0,0,0,518,519,1,0,0,0,519,17,1,0,0,0,520,521,
		3,20,10,0,521,522,5,121,0,0,522,523,3,32,16,0,523,19,1,0,0,0,524,528,5,
		129,0,0,525,527,3,22,11,0,526,525,1,0,0,0,527,530,1,0,0,0,528,526,1,0,
		0,0,528,529,1,0,0,0,529,531,1,0,0,0,530,528,1,0,0,0,531,549,5,130,0,0,
		532,536,5,127,0,0,533,535,3,22,11,0,534,533,1,0,0,0,535,538,1,0,0,0,536,
		534,1,0,0,0,536,537,1,0,0,0,537,539,1,0,0,0,538,536,1,0,0,0,539,549,5,
		128,0,0,540,544,5,125,0,0,541,543,3,22,11,0,542,541,1,0,0,0,543,546,1,
		0,0,0,544,542,1,0,0,0,544,545,1,0,0,0,545,547,1,0,0,0,546,544,1,0,0,0,
		547,549,5,126,0,0,548,524,1,0,0,0,548,532,1,0,0,0,548,540,1,0,0,0,549,
		21,1,0,0,0,550,552,3,24,12,0,551,550,1,0,0,0,552,553,1,0,0,0,553,551,1,
		0,0,0,553,554,1,0,0,0,554,577,1,0,0,0,555,577,3,20,10,0,556,559,5,123,
		0,0,557,560,3,378,189,0,558,560,5,24,0,0,559,557,1,0,0,0,559,558,1,0,0,
		0,560,561,1,0,0,0,561,562,5,118,0,0,562,577,3,26,13,0,563,564,5,123,0,
		0,564,566,5,129,0,0,565,567,3,22,11,0,566,565,1,0,0,0,567,568,1,0,0,0,
		568,566,1,0,0,0,568,569,1,0,0,0,569,570,1,0,0,0,570,572,5,130,0,0,571,
		573,3,28,14,0,572,571,1,0,0,0,572,573,1,0,0,0,573,574,1,0,0,0,574,575,
		3,30,15,0,575,577,1,0,0,0,576,551,1,0,0,0,576,555,1,0,0,0,576,556,1,0,
		0,0,576,563,1,0,0,0,577,23,1,0,0,0,578,583,3,382,191,0,579,583,3,384,192,
		0,580,583,3,386,193,0,581,583,3,30,15,0,582,578,1,0,0,0,582,579,1,0,0,
		0,582,580,1,0,0,0,582,581,1,0,0,0,583,25,1,0,0,0,584,585,3,378,189,0,585,
		27,1,0,0,0,586,591,3,382,191,0,587,591,3,384,192,0,588,591,3,386,193,0,
		589,591,5,123,0,0,590,586,1,0,0,0,590,587,1,0,0,0,590,588,1,0,0,0,590,
		589,1,0,0,0,591,29,1,0,0,0,592,593,7,0,0,0,593,31,1,0,0,0,594,595,3,4,
		2,0,595,33,1,0,0,0,596,598,3,142,71,0,597,596,1,0,0,0,598,601,1,0,0,0,
		599,597,1,0,0,0,599,600,1,0,0,0,600,604,1,0,0,0,601,599,1,0,0,0,602,605,
		3,36,18,0,603,605,3,38,19,0,604,602,1,0,0,0,604,603,1,0,0,0,605,35,1,0,
		0,0,606,608,3,376,188,0,607,606,1,0,0,0,607,608,1,0,0,0,608,622,1,0,0,
		0,609,623,3,40,20,0,610,623,3,42,21,0,611,623,3,48,24,0,612,623,3,52,26,
		0,613,623,3,72,36,0,614,623,3,74,37,0,615,623,3,88,44,0,616,623,3,100,
		50,0,617,623,3,102,51,0,618,623,3,104,52,0,619,623,3,106,53,0,620,623,
		3,108,54,0,621,623,3,114,57,0,622,609,1,0,0,0,622,610,1,0,0,0,622,611,
		1,0,0,0,622,612,1,0,0,0,622,613,1,0,0,0,622,614,1,0,0,0,622,615,1,0,0,
		0,622,616,1,0,0,0,622,617,1,0,0,0,622,618,1,0,0,0,622,619,1,0,0,0,622,
		620,1,0,0,0,622,621,1,0,0,0,623,37,1,0,0,0,624,627,3,10,5,0,625,627,3,
		12,6,0,626,624,1,0,0,0,626,625,1,0,0,0,627,39,1,0,0,0,628,630,5,32,0,0,
		629,628,1,0,0,0,629,630,1,0,0,0,630,631,1,0,0,0,631,632,5,18,0,0,632,648,
		3,378,189,0,633,649,5,117,0,0,634,638,5,125,0,0,635,637,3,140,70,0,636,
		635,1,0,0,0,637,640,1,0,0,0,638,636,1,0,0,0,638,639,1,0,0,0,639,644,1,
		0,0,0,640,638,1,0,0,0,641,643,3,34,17,0,642,641,1,0,0,0,643,646,1,0,0,
		0,644,642,1,0,0,0,644,645,1,0,0,0,645,647,1,0,0,0,646,644,1,0,0,0,647,
		649,5,126,0,0,648,633,1,0,0,0,648,634,1,0,0,0,649,41,1,0,0,0,650,651,5,
		8,0,0,651,652,5,5,0,0,652,654,3,44,22,0,653,655,3,46,23,0,654,653,1,0,
		0,0,654,655,1,0,0,0,655,656,1,0,0,0,656,657,5,117,0,0,657,43,1,0,0,0,658,
		661,3,378,189,0,659,661,5,24,0,0,660,658,1,0,0,0,660,659,1,0,0,0,661,45,
		1,0,0,0,662,665,5,1,0,0,663,666,3,378,189,0,664,666,5,111,0,0,665,663,
		1,0,0,0,665,664,1,0,0,0,666,47,1,0,0,0,667,668,5,33,0,0,668,669,3,50,25,
		0,669,670,5,117,0,0,670,49,1,0,0,0,671,673,3,338,169,0,672,671,1,0,0,0,
		672,673,1,0,0,0,673,674,1,0,0,0,674,676,5,119,0,0,675,672,1,0,0,0,675,
		676,1,0,0,0,676,693,1,0,0,0,677,694,5,84,0,0,678,690,5,125,0,0,679,684,
		3,50,25,0,680,681,5,116,0,0,681,683,3,50,25,0,682,680,1,0,0,0,683,686,
		1,0,0,0,684,682,1,0,0,0,684,685,1,0,0,0,685,688,1,0,0,0,686,684,1,0,0,
		0,687,689,5,116,0,0,688,687,1,0,0,0,688,689,1,0,0,0,689,691,1,0,0,0,690,
		679,1,0,0,0,690,691,1,0,0,0,691,692,1,0,0,0,692,694,5,126,0,0,693,677,
		1,0,0,0,693,678,1,0,0,0,694,704,1,0,0,0,695,701,3,338,169,0,696,699,5,
		1,0,0,697,700,3,378,189,0,698,700,5,111,0,0,699,697,1,0,0,0,699,698,1,
		0,0,0,700,702,1,0,0,0,701,696,1,0,0,0,701,702,1,0,0,0,702,704,1,0,0,0,
		703,675,1,0,0,0,703,695,1,0,0,0,704,51,1,0,0,0,705,706,3,54,27,0,706,707,
		5,10,0,0,707,709,3,378,189,0,708,710,3,118,59,0,709,708,1,0,0,0,709,710,
		1,0,0,0,710,711,1,0,0,0,711,713,5,129,0,0,712,714,3,58,29,0,713,712,1,
		0,0,0,713,714,1,0,0,0,714,715,1,0,0,0,715,717,5,130,0,0,716,718,3,70,35,
		0,717,716,1,0,0,0,717,718,1,0,0,0,718,720,1,0,0,0,719,721,3,128,64,0,720,
		719,1,0,0,0,720,721,1,0,0,0,721,724,1,0,0,0,722,725,3,166,83,0,723,725,
		5,117,0,0,724,722,1,0,0,0,724,723,1,0,0,0,725,53,1,0,0,0,726,728,5,3,0,
		0,727,726,1,0,0,0,727,728,1,0,0,0,728,730,1,0,0,0,729,731,5,36,0,0,730,
		729,1,0,0,0,730,731,1,0,0,0,731,733,1,0,0,0,732,734,5,32,0,0,733,732,1,
		0,0,0,733,734,1,0,0,0,734,739,1,0,0,0,735,737,5,8,0,0,736,738,3,56,28,
		0,737,736,1,0,0,0,737,738,1,0,0,0,738,740,1,0,0,0,739,735,1,0,0,0,739,
		740,1,0,0,0,740,55,1,0,0,0,741,742,7,1,0,0,742,57,1,0,0,0,743,745,3,60,
		30,0,744,746,5,116,0,0,745,744,1,0,0,0,745,746,1,0,0,0,746,764,1,0,0,0,
		747,748,3,60,30,0,748,749,5,116,0,0,749,751,1,0,0,0,750,747,1,0,0,0,750,
		751,1,0,0,0,751,752,1,0,0,0,752,757,3,66,33,0,753,754,5,116,0,0,754,756,
		3,66,33,0,755,753,1,0,0,0,756,759,1,0,0,0,757,755,1,0,0,0,757,758,1,0,
		0,0,758,761,1,0,0,0,759,757,1,0,0,0,760,762,5,116,0,0,761,760,1,0,0,0,
		761,762,1,0,0,0,762,764,1,0,0,0,763,743,1,0,0,0,763,750,1,0,0,0,764,59,
		1,0,0,0,765,767,3,142,71,0,766,765,1,0,0,0,767,770,1,0,0,0,768,766,1,0,
		0,0,768,769,1,0,0,0,769,773,1,0,0,0,770,768,1,0,0,0,771,774,3,62,31,0,
		772,774,3,64,32,0,773,771,1,0,0,0,773,772,1,0,0,0,774,61,1,0,0,0,775,777,
		5,89,0,0,776,778,3,336,168,0,777,776,1,0,0,0,777,778,1,0,0,0,778,780,1,
		0,0,0,779,775,1,0,0,0,779,780,1,0,0,0,780,782,1,0,0,0,781,783,5,20,0,0,
		782,781,1,0,0,0,782,783,1,0,0,0,783,784,1,0,0,0,784,785,5,24,0,0,785,63,
		1,0,0,0,786,788,5,20,0,0,787,786,1,0,0,0,787,788,1,0,0,0,788,789,1,0,0,
		0,789,790,5,24,0,0,790,791,5,118,0,0,791,792,3,286,143,0,792,65,1,0,0,
		0,793,795,3,142,71,0,794,793,1,0,0,0,795,798,1,0,0,0,796,794,1,0,0,0,796,
		797,1,0,0,0,797,802,1,0,0,0,798,796,1,0,0,0,799,803,3,68,34,0,800,803,
		5,114,0,0,801,803,3,286,143,0,802,799,1,0,0,0,802,800,1,0,0,0,802,801,
		1,0,0,0,803,67,1,0,0,0,804,805,3,240,120,0,805,808,5,118,0,0,806,809,3,
		286,143,0,807,809,5,114,0,0,808,806,1,0,0,0,808,807,1,0,0,0,809,69,1,0,
		0,0,810,811,5,120,0,0,811,812,3,286,143,0,812,71,1,0,0,0,813,814,5,31,
		0,0,814,816,3,378,189,0,815,817,3,118,59,0,816,815,1,0,0,0,816,817,1,0,
		0,0,817,819,1,0,0,0,818,820,3,128,64,0,819,818,1,0,0,0,819,820,1,0,0,0,
		820,823,1,0,0,0,821,822,5,103,0,0,822,824,3,286,143,0,823,821,1,0,0,0,
		823,824,1,0,0,0,824,825,1,0,0,0,825,826,5,117,0,0,826,73,1,0,0,0,827,830,
		3,76,38,0,828,830,3,78,39,0,829,827,1,0,0,0,829,828,1,0,0,0,830,75,1,0,
		0,0,831,832,5,27,0,0,832,834,3,378,189,0,833,835,3,118,59,0,834,833,1,
		0,0,0,834,835,1,0,0,0,835,837,1,0,0,0,836,838,3,128,64,0,837,836,1,0,0,
		0,837,838,1,0,0,0,838,845,1,0,0,0,839,841,5,125,0,0,840,842,3,80,40,0,
		841,840,1,0,0,0,841,842,1,0,0,0,842,843,1,0,0,0,843,846,5,126,0,0,844,
		846,5,117,0,0,845,839,1,0,0,0,845,844,1,0,0,0,846,77,1,0,0,0,847,848,5,
		27,0,0,848,850,3,378,189,0,849,851,3,118,59,0,850,849,1,0,0,0,850,851,
		1,0,0,0,851,852,1,0,0,0,852,854,5,129,0,0,853,855,3,84,42,0,854,853,1,
		0,0,0,854,855,1,0,0,0,855,856,1,0,0,0,856,858,5,130,0,0,857,859,3,128,
		64,0,858,857,1,0,0,0,858,859,1,0,0,0,859,860,1,0,0,0,860,861,5,117,0,0,
		861,79,1,0,0,0,862,867,3,82,41,0,863,864,5,116,0,0,864,866,3,82,41,0,865,
		863,1,0,0,0,866,869,1,0,0,0,867,865,1,0,0,0,867,868,1,0,0,0,868,871,1,
		0,0,0,869,867,1,0,0,0,870,872,5,116,0,0,871,870,1,0,0,0,871,872,1,0,0,
		0,872,81,1,0,0,0,873,875,3,142,71,0,874,873,1,0,0,0,875,878,1,0,0,0,876,
		874,1,0,0,0,876,877,1,0,0,0,877,880,1,0,0,0,878,876,1,0,0,0,879,881,3,
		376,188,0,880,879,1,0,0,0,880,881,1,0,0,0,881,882,1,0,0,0,882,883,3,378,
		189,0,883,884,5,118,0,0,884,885,3,286,143,0,885,83,1,0,0,0,886,891,3,86,
		43,0,887,888,5,116,0,0,888,890,3,86,43,0,889,887,1,0,0,0,890,893,1,0,0,
		0,891,889,1,0,0,0,891,892,1,0,0,0,892,895,1,0,0,0,893,891,1,0,0,0,894,
		896,5,116,0,0,895,894,1,0,0,0,895,896,1,0,0,0,896,85,1,0,0,0,897,899,3,
		142,71,0,898,897,1,0,0,0,899,902,1,0,0,0,900,898,1,0,0,0,900,901,1,0,0,
		0,901,904,1,0,0,0,902,900,1,0,0,0,903,905,3,376,188,0,904,903,1,0,0,0,
		904,905,1,0,0,0,905,906,1,0,0,0,906,907,3,286,143,0,907,87,1,0,0,0,908,
		909,5,7,0,0,909,911,3,378,189,0,910,912,3,118,59,0,911,910,1,0,0,0,911,
		912,1,0,0,0,912,914,1,0,0,0,913,915,3,128,64,0,914,913,1,0,0,0,914,915,
		1,0,0,0,915,916,1,0,0,0,916,918,5,125,0,0,917,919,3,90,45,0,918,917,1,
		0,0,0,918,919,1,0,0,0,919,920,1,0,0,0,920,921,5,126,0,0,921,89,1,0,0,0,
		922,927,3,92,46,0,923,924,5,116,0,0,924,926,3,92,46,0,925,923,1,0,0,0,
		926,929,1,0,0,0,927,925,1,0,0,0,927,928,1,0,0,0,928,931,1,0,0,0,929,927,
		1,0,0,0,930,932,5,116,0,0,931,930,1,0,0,0,931,932,1,0,0,0,932,91,1,0,0,
		0,933,935,3,142,71,0,934,933,1,0,0,0,935,938,1,0,0,0,936,934,1,0,0,0,936,
		937,1,0,0,0,937,940,1,0,0,0,938,936,1,0,0,0,939,941,3,376,188,0,940,939,
		1,0,0,0,940,941,1,0,0,0,941,942,1,0,0,0,942,946,3,378,189,0,943,947,3,
		94,47,0,944,947,3,96,48,0,945,947,3,98,49,0,946,943,1,0,0,0,946,944,1,
		0,0,0,946,945,1,0,0,0,946,947,1,0,0,0,947,93,1,0,0,0,948,950,5,129,0,0,
		949,951,3,84,42,0,950,949,1,0,0,0,950,951,1,0,0,0,951,952,1,0,0,0,952,
		953,5,130,0,0,953,95,1,0,0,0,954,956,5,125,0,0,955,957,3,80,40,0,956,955,
		1,0,0,0,956,957,1,0,0,0,957,958,1,0,0,0,958,959,5,126,0,0,959,97,1,0,0,
		0,960,961,5,103,0,0,961,962,3,154,77,0,962,99,1,0,0,0,963,964,5,52,0,0,
		964,966,3,378,189,0,965,967,3,118,59,0,966,965,1,0,0,0,966,967,1,0,0,0,
		967,969,1,0,0,0,968,970,3,128,64,0,969,968,1,0,0,0,969,970,1,0,0,0,970,
		971,1,0,0,0,971,972,5,125,0,0,972,973,3,80,40,0,973,974,5,126,0,0,974,
		101,1,0,0,0,975,978,5,3,0,0,976,979,3,378,189,0,977,979,5,111,0,0,978,
		976,1,0,0,0,978,977,1,0,0,0,979,980,1,0,0,0,980,981,5,118,0,0,981,984,
		3,286,143,0,982,983,5,103,0,0,983,985,3,154,77,0,984,982,1,0,0,0,984,985,
		1,0,0,0,985,986,1,0,0,0,986,987,5,117,0,0,987,103,1,0,0,0,988,990,5,26,
		0,0,989,991,5,20,0,0,990,989,1,0,0,0,990,991,1,0,0,0,991,992,1,0,0,0,992,
		993,3,378,189,0,993,994,5,118,0,0,994,997,3,286,143,0,995,996,5,103,0,
		0,996,998,3,154,77,0,997,995,1,0,0,0,997,998,1,0,0,0,998,999,1,0,0,0,999,
		1000,5,117,0,0,1000,105,1,0,0,0,1001,1003,5,32,0,0,1002,1001,1,0,0,0,1002,
		1003,1,0,0,0,1003,1004,1,0,0,0,1004,1005,5,29,0,0,1005,1007,3,378,189,
		0,1006,1008,3,118,59,0,1007,1006,1,0,0,0,1007,1008,1,0,0,0,1008,1013,1,
		0,0,0,1009,1011,5,118,0,0,1010,1012,3,328,164,0,1011,1010,1,0,0,0,1011,
		1012,1,0,0,0,1012,1014,1,0,0,0,1013,1009,1,0,0,0,1013,1014,1,0,0,0,1014,
		1016,1,0,0,0,1015,1017,3,128,64,0,1016,1015,1,0,0,0,1016,1017,1,0,0,0,
		1017,1018,1,0,0,0,1018,1022,5,125,0,0,1019,1021,3,140,70,0,1020,1019,1,
		0,0,0,1021,1024,1,0,0,0,1022,1020,1,0,0,0,1022,1023,1,0,0,0,1023,1028,
		1,0,0,0,1024,1022,1,0,0,0,1025,1027,3,138,69,0,1026,1025,1,0,0,0,1027,
		1030,1,0,0,0,1028,1026,1,0,0,0,1028,1029,1,0,0,0,1029,1031,1,0,0,0,1030,
		1028,1,0,0,0,1031,1032,5,126,0,0,1032,107,1,0,0,0,1033,1036,3,110,55,0,
		1034,1036,3,112,56,0,1035,1033,1,0,0,0,1035,1034,1,0,0,0,1036,109,1,0,
		0,0,1037,1039,5,13,0,0,1038,1040,3,118,59,0,1039,1038,1,0,0,0,1039,1040,
		1,0,0,0,1040,1041,1,0,0,0,1041,1043,3,286,143,0,1042,1044,3,128,64,0,1043,
		1042,1,0,0,0,1043,1044,1,0,0,0,1044,1045,1,0,0,0,1045,1049,5,125,0,0,1046,
		1048,3,140,70,0,1047,1046,1,0,0,0,1048,1051,1,0,0,0,1049,1047,1,0,0,0,
		1049,1050,1,0,0,0,1050,1055,1,0,0,0,1051,1049,1,0,0,0,1052,1054,3,138,
		69,0,1053,1052,1,0,0,0,1054,1057,1,0,0,0,1055,1053,1,0,0,0,1055,1056,1,
		0,0,0,1056,1058,1,0,0,0,1057,1055,1,0,0,0,1058,1059,5,126,0,0,1059,111,
		1,0,0,0,1060,1062,5,32,0,0,1061,1060,1,0,0,0,1061,1062,1,0,0,0,1062,1063,
		1,0,0,0,1063,1065,5,13,0,0,1064,1066,3,118,59,0,1065,1064,1,0,0,0,1065,
		1066,1,0,0,0,1066,1068,1,0,0,0,1067,1069,5,88,0,0,1068,1067,1,0,0,0,1068,
		1069,1,0,0,0,1069,1070,1,0,0,0,1070,1071,3,368,184,0,1071,1072,5,11,0,
		0,1072,1074,3,286,143,0,1073,1075,3,128,64,0,1074,1073,1,0,0,0,1074,1075,
		1,0,0,0,1075,1076,1,0,0,0,1076,1080,5,125,0,0,1077,1079,3,140,70,0,1078,
		1077,1,0,0,0,1079,1082,1,0,0,0,1080,1078,1,0,0,0,1080,1081,1,0,0,0,1081,
		1086,1,0,0,0,1082,1080,1,0,0,0,1083,1085,3,138,69,0,1084,1083,1,0,0,0,
		1085,1088,1,0,0,0,1086,1084,1,0,0,0,1086,1087,1,0,0,0,1087,1089,1,0,0,
		0,1088,1086,1,0,0,0,1089,1090,5,126,0,0,1090,113,1,0,0,0,1091,1093,5,32,
		0,0,1092,1091,1,0,0,0,1092,1093,1,0,0,0,1093,1094,1,0,0,0,1094,1096,5,
		8,0,0,1095,1097,3,56,28,0,1096,1095,1,0,0,0,1096,1097,1,0,0,0,1097,1098,
		1,0,0,0,1098,1102,5,125,0,0,1099,1101,3,140,70,0,1100,1099,1,0,0,0,1101,
		1104,1,0,0,0,1102,1100,1,0,0,0,1102,1103,1,0,0,0,1103,1108,1,0,0,0,1104,
		1102,1,0,0,0,1105,1107,3,116,58,0,1106,1105,1,0,0,0,1107,1110,1,0,0,0,
		1108,1106,1,0,0,0,1108,1109,1,0,0,0,1109,1111,1,0,0,0,1110,1108,1,0,0,
		0,1111,1112,5,126,0,0,1112,115,1,0,0,0,1113,1115,3,142,71,0,1114,1113,
		1,0,0,0,1115,1118,1,0,0,0,1116,1114,1,0,0,0,1116,1117,1,0,0,0,1117,1127,
		1,0,0,0,1118,1116,1,0,0,0,1119,1128,3,10,5,0,1120,1122,3,376,188,0,1121,
		1120,1,0,0,0,1121,1122,1,0,0,0,1122,1125,1,0,0,0,1123,1126,3,104,52,0,
		1124,1126,3,52,26,0,1125,1123,1,0,0,0,1125,1124,1,0,0,0,1126,1128,1,0,
		0,0,1127,1119,1,0,0,0,1127,1121,1,0,0,0,1128,117,1,0,0,0,1129,1142,5,107,
		0,0,1130,1131,3,120,60,0,1131,1132,5,116,0,0,1132,1134,1,0,0,0,1133,1130,
		1,0,0,0,1134,1137,1,0,0,0,1135,1133,1,0,0,0,1135,1136,1,0,0,0,1136,1138,
		1,0,0,0,1137,1135,1,0,0,0,1138,1140,3,120,60,0,1139,1141,5,116,0,0,1140,
		1139,1,0,0,0,1140,1141,1,0,0,0,1141,1143,1,0,0,0,1142,1135,1,0,0,0,1142,
		1143,1,0,0,0,1143,1144,1,0,0,0,1144,1145,5,106,0,0,1145,119,1,0,0,0,1146,
		1148,3,142,71,0,1147,1146,1,0,0,0,1148,1151,1,0,0,0,1149,1147,1,0,0,0,
		1149,1150,1,0,0,0,1150,1155,1,0,0,0,1151,1149,1,0,0,0,1152,1156,3,122,
		61,0,1153,1156,3,124,62,0,1154,1156,3,126,63,0,1155,1152,1,0,0,0,1155,
		1153,1,0,0,0,1155,1154,1,0,0,0,1156,121,1,0,0,0,1157,1159,3,142,71,0,1158,
		1157,1,0,0,0,1158,1159,1,0,0,0,1159,1160,1,0,0,0,1160,1163,5,81,0,0,1161,
		1162,5,118,0,0,1162,1164,3,334,167,0,1163,1161,1,0,0,0,1163,1164,1,0,0,
		0,1164,123,1,0,0,0,1165,1167,3,142,71,0,1166,1165,1,0,0,0,1166,1167,1,
		0,0,0,1167,1168,1,0,0,0,1168,1173,3,378,189,0,1169,1171,5,118,0,0,1170,
		1172,3,328,164,0,1171,1170,1,0,0,0,1171,1172,1,0,0,0,1172,1174,1,0,0,0,
		1173,1169,1,0,0,0,1173,1174,1,0,0,0,1174,1177,1,0,0,0,1175,1176,5,103,
		0,0,1176,1178,3,286,143,0,1177,1175,1,0,0,0,1177,1178,1,0,0,0,1178,125,
		1,0,0,0,1179,1180,5,3,0,0,1180,1181,3,378,189,0,1181,1182,5,118,0,0,1182,
		1183,3,286,143,0,1183,127,1,0,0,0,1184,1190,5,34,0,0,1185,1186,3,130,65,
		0,1186,1187,5,116,0,0,1187,1189,1,0,0,0,1188,1185,1,0,0,0,1189,1192,1,
		0,0,0,1190,1188,1,0,0,0,1190,1191,1,0,0,0,1191,1194,1,0,0,0,1192,1190,
		1,0,0,0,1193,1195,3,130,65,0,1194,1193,1,0,0,0,1194,1195,1,0,0,0,1195,
		129,1,0,0,0,1196,1199,3,132,66,0,1197,1199,3,134,67,0,1198,1196,1,0,0,
		0,1198,1197,1,0,0,0,1199,131,1,0,0,0,1200,1201,3,336,168,0,1201,1202,5,
		118,0,0,1202,1203,3,334,167,0,1203,133,1,0,0,0,1204,1206,3,136,68,0,1205,
		1204,1,0,0,0,1205,1206,1,0,0,0,1206,1207,1,0,0,0,1207,1208,3,286,143,0,
		1208,1210,5,118,0,0,1209,1211,3,328,164,0,1210,1209,1,0,0,0,1210,1211,
		1,0,0,0,1211,135,1,0,0,0,1212,1213,5,11,0,0,1213,1214,3,118,59,0,1214,
		137,1,0,0,0,1215,1217,3,142,71,0,1216,1215,1,0,0,0,1217,1220,1,0,0,0,1218,
		1216,1,0,0,0,1218,1219,1,0,0,0,1219,1230,1,0,0,0,1220,1218,1,0,0,0,1221,
		1231,3,10,5,0,1222,1224,3,376,188,0,1223,1222,1,0,0,0,1223,1224,1,0,0,
		0,1224,1228,1,0,0,0,1225,1229,3,72,36,0,1226,1229,3,102,51,0,1227,1229,
		3,52,26,0,1228,1225,1,0,0,0,1228,1226,1,0,0,0,1228,1227,1,0,0,0,1229,1231,
		1,0,0,0,1230,1221,1,0,0,0,1230,1223,1,0,0,0,1231,139,1,0,0,0,1232,1233,
		5,122,0,0,1233,1234,5,88,0,0,1234,1235,5,127,0,0,1235,1236,3,144,72,0,
		1236,1237,5,128,0,0,1237,141,1,0,0,0,1238,1239,5,122,0,0,1239,1240,5,127,
		0,0,1240,1241,3,144,72,0,1241,1242,5,128,0,0,1242,143,1,0,0,0,1243,1245,
		3,338,169,0,1244,1246,3,146,73,0,1245,1244,1,0,0,0,1245,1246,1,0,0,0,1246,
		145,1,0,0,0,1247,1251,3,4,2,0,1248,1249,5,103,0,0,1249,1251,3,162,81,0,
		1250,1247,1,0,0,0,1250,1248,1,0,0,0,1251,147,1,0,0,0,1252,1258,5,117,0,
		0,1253,1258,3,34,17,0,1254,1258,3,150,75,0,1255,1258,3,152,76,0,1256,1258,
		3,10,5,0,1257,1252,1,0,0,0,1257,1253,1,0,0,0,1257,1254,1,0,0,0,1257,1255,
		1,0,0,0,1257,1256,1,0,0,0,1258,149,1,0,0,0,1259,1261,3,142,71,0,1260,1259,
		1,0,0,0,1261,1264,1,0,0,0,1262,1260,1,0,0,0,1262,1263,1,0,0,0,1263,1265,
		1,0,0,0,1264,1262,1,0,0,0,1265,1266,5,15,0,0,1266,1269,3,242,121,0,1267,
		1268,5,118,0,0,1268,1270,3,286,143,0,1269,1267,1,0,0,0,1269,1270,1,0,0,
		0,1270,1273,1,0,0,0,1271,1272,5,103,0,0,1272,1274,3,154,77,0,1273,1271,
		1,0,0,0,1273,1274,1,0,0,0,1274,1275,1,0,0,0,1275,1276,5,117,0,0,1276,151,
		1,0,0,0,1277,1278,3,154,77,0,1278,1279,5,117,0,0,1279,1285,1,0,0,0,1280,
		1282,3,160,80,0,1281,1283,5,117,0,0,1282,1281,1,0,0,0,1282,1283,1,0,0,
		0,1283,1285,1,0,0,0,1284,1277,1,0,0,0,1284,1280,1,0,0,0,1285,153,1,0,0,
		0,1286,1288,6,77,-1,0,1287,1289,3,142,71,0,1288,1287,1,0,0,0,1289,1290,
		1,0,0,0,1290,1288,1,0,0,0,1290,1291,1,0,0,0,1291,1292,1,0,0,0,1292,1293,
		3,154,77,40,1293,1367,1,0,0,0,1294,1367,3,162,81,0,1295,1367,3,164,82,
		0,1296,1298,7,2,0,0,1297,1299,5,20,0,0,1298,1297,1,0,0,0,1298,1299,1,0,
		0,0,1299,1300,1,0,0,0,1300,1367,3,154,77,30,1301,1302,5,84,0,0,1302,1367,
		3,154,77,29,1303,1304,7,3,0,0,1304,1367,3,154,77,28,1305,1307,5,113,0,
		0,1306,1308,3,154,77,0,1307,1306,1,0,0,0,1307,1308,1,0,0,0,1308,1367,1,
		0,0,0,1309,1310,5,115,0,0,1310,1367,3,154,77,15,1311,1313,5,4,0,0,1312,
		1314,5,81,0,0,1313,1312,1,0,0,0,1313,1314,1,0,0,0,1314,1316,1,0,0,0,1315,
		1317,3,154,77,0,1316,1315,1,0,0,0,1316,1317,1,0,0,0,1317,1367,1,0,0,0,
		1318,1320,5,2,0,0,1319,1321,5,81,0,0,1320,1319,1,0,0,0,1320,1321,1,0,0,
		0,1321,1323,1,0,0,0,1322,1324,3,154,77,0,1323,1322,1,0,0,0,1323,1324,1,
		0,0,0,1324,1367,1,0,0,0,1325,1327,5,23,0,0,1326,1328,3,154,77,0,1327,1326,
		1,0,0,0,1327,1328,1,0,0,0,1328,1367,1,0,0,0,1329,1333,5,129,0,0,1330,1332,
		3,140,70,0,1331,1330,1,0,0,0,1332,1335,1,0,0,0,1333,1331,1,0,0,0,1333,
		1334,1,0,0,0,1334,1336,1,0,0,0,1335,1333,1,0,0,0,1336,1337,3,154,77,0,
		1337,1338,5,130,0,0,1338,1367,1,0,0,0,1339,1343,5,127,0,0,1340,1342,3,
		140,70,0,1341,1340,1,0,0,0,1342,1345,1,0,0,0,1343,1341,1,0,0,0,1343,1344,
		1,0,0,0,1344,1347,1,0,0,0,1345,1343,1,0,0,0,1346,1348,3,174,87,0,1347,
		1346,1,0,0,0,1347,1348,1,0,0,0,1348,1349,1,0,0,0,1349,1367,5,128,0,0,1350,
		1354,5,129,0,0,1351,1353,3,140,70,0,1352,1351,1,0,0,0,1353,1356,1,0,0,
		0,1354,1352,1,0,0,0,1354,1355,1,0,0,0,1355,1358,1,0,0,0,1356,1354,1,0,
		0,0,1357,1359,3,176,88,0,1358,1357,1,0,0,0,1358,1359,1,0,0,0,1359,1360,
		1,0,0,0,1360,1367,5,130,0,0,1361,1367,3,180,90,0,1362,1367,3,194,97,0,
		1363,1367,3,208,104,0,1364,1367,3,160,80,0,1365,1367,3,2,1,0,1366,1286,
		1,0,0,0,1366,1294,1,0,0,0,1366,1295,1,0,0,0,1366,1296,1,0,0,0,1366,1301,
		1,0,0,0,1366,1303,1,0,0,0,1366,1305,1,0,0,0,1366,1309,1,0,0,0,1366,1311,
		1,0,0,0,1366,1318,1,0,0,0,1366,1325,1,0,0,0,1366,1329,1,0,0,0,1366,1339,
		1,0,0,0,1366,1350,1,0,0,0,1366,1361,1,0,0,0,1366,1362,1,0,0,0,1366,1363,
		1,0,0,0,1366,1364,1,0,0,0,1366,1365,1,0,0,0,1367,1451,1,0,0,0,1368,1369,
		10,26,0,0,1369,1370,7,4,0,0,1370,1450,3,154,77,27,1371,1372,10,25,0,0,
		1372,1373,7,5,0,0,1373,1450,3,154,77,26,1374,1377,10,24,0,0,1375,1378,
		3,388,194,0,1376,1378,3,390,195,0,1377,1375,1,0,0,0,1377,1376,1,0,0,0,
		1378,1379,1,0,0,0,1379,1380,3,154,77,25,1380,1450,1,0,0,0,1381,1382,10,
		23,0,0,1382,1383,5,89,0,0,1383,1450,3,154,77,24,1384,1385,10,22,0,0,1385,
		1386,5,87,0,0,1386,1450,3,154,77,23,1387,1388,10,21,0,0,1388,1389,5,90,
		0,0,1389,1450,3,154,77,22,1390,1391,10,20,0,0,1391,1392,3,156,78,0,1392,
		1393,3,154,77,21,1393,1450,1,0,0,0,1394,1395,10,19,0,0,1395,1396,5,91,
		0,0,1396,1450,3,154,77,20,1397,1398,10,18,0,0,1398,1399,5,92,0,0,1399,
		1450,3,154,77,19,1400,1401,10,14,0,0,1401,1402,5,115,0,0,1402,1450,3,154,
		77,15,1403,1404,10,13,0,0,1404,1405,5,103,0,0,1405,1450,3,154,77,14,1406,
		1407,10,12,0,0,1407,1408,3,158,79,0,1408,1409,3,154,77,13,1409,1450,1,
		0,0,0,1410,1411,10,37,0,0,1411,1412,5,112,0,0,1412,1413,3,344,172,0,1413,
		1415,5,129,0,0,1414,1416,3,206,103,0,1415,1414,1,0,0,0,1415,1416,1,0,0,
		0,1416,1417,1,0,0,0,1417,1418,5,130,0,0,1418,1450,1,0,0,0,1419,1420,10,
		36,0,0,1420,1421,5,112,0,0,1421,1450,3,378,189,0,1422,1423,10,35,0,0,1423,
		1424,5,112,0,0,1424,1450,3,178,89,0,1425,1426,10,34,0,0,1426,1427,5,112,
		0,0,1427,1450,5,37,0,0,1428,1429,10,33,0,0,1429,1431,5,129,0,0,1430,1432,
		3,206,103,0,1431,1430,1,0,0,0,1431,1432,1,0,0,0,1432,1433,1,0,0,0,1433,
		1450,5,130,0,0,1434,1435,10,32,0,0,1435,1436,5,127,0,0,1436,1437,3,154,
		77,0,1437,1438,5,128,0,0,1438,1450,1,0,0,0,1439,1440,10,31,0,0,1440,1450,
		5,124,0,0,1441,1442,10,27,0,0,1442,1443,5,1,0,0,1443,1450,3,288,144,0,
		1444,1445,10,17,0,0,1445,1447,5,113,0,0,1446,1448,3,154,77,0,1447,1446,
		1,0,0,0,1447,1448,1,0,0,0,1448,1450,1,0,0,0,1449,1368,1,0,0,0,1449,1371,
		1,0,0,0,1449,1374,1,0,0,0,1449,1381,1,0,0,0,1449,1384,1,0,0,0,1449,1387,
		1,0,0,0,1449,1390,1,0,0,0,1449,1394,1,0,0,0,1449,1397,1,0,0,0,1449,1400,
		1,0,0,0,1449,1403,1,0,0,0,1449,1406,1,0,0,0,1449,1410,1,0,0,0,1449,1419,
		1,0,0,0,1449,1422,1,0,0,0,1449,1425,1,0,0,0,1449,1428,1,0,0,0,1449,1434,
		1,0,0,0,1449,1439,1,0,0,0,1449,1441,1,0,0,0,1449,1444,1,0,0,0,1450,1453,
		1,0,0,0,1451,1449,1,0,0,0,1451,1452,1,0,0,0,1452,155,1,0,0,0,1453,1451,
		1,0,0,0,1454,1455,7,6,0,0,1455,157,1,0,0,0,1456,1457,7,7,0,0,1457,159,
		1,0,0,0,1458,1460,3,142,71,0,1459,1458,1,0,0,0,1460,1461,1,0,0,0,1461,
		1459,1,0,0,0,1461,1462,1,0,0,0,1462,1463,1,0,0,0,1463,1464,3,160,80,0,
		1464,1473,1,0,0,0,1465,1473,3,166,83,0,1466,1473,3,170,85,0,1467,1473,
		3,172,86,0,1468,1473,3,214,107,0,1469,1473,3,226,113,0,1470,1473,3,228,
		114,0,1471,1473,3,230,115,0,1472,1459,1,0,0,0,1472,1465,1,0,0,0,1472,1466,
		1,0,0,0,1472,1467,1,0,0,0,1472,1468,1,0,0,0,1472,1469,1,0,0,0,1472,1470,
		1,0,0,0,1472,1471,1,0,0,0,1473,161,1,0,0,0,1474,1475,7,8,0,0,1475,163,
		1,0,0,0,1476,1479,3,342,171,0,1477,1479,3,362,181,0,1478,1476,1,0,0,0,
		1478,1477,1,0,0,0,1479,165,1,0,0,0,1480,1484,5,125,0,0,1481,1483,3,140,
		70,0,1482,1481,1,0,0,0,1483,1486,1,0,0,0,1484,1482,1,0,0,0,1484,1485,1,
		0,0,0,1485,1488,1,0,0,0,1486,1484,1,0,0,0,1487,1489,3,168,84,0,1488,1487,
		1,0,0,0,1488,1489,1,0,0,0,1489,1490,1,0,0,0,1490,1491,5,126,0,0,1491,167,
		1,0,0,0,1492,1494,3,148,74,0,1493,1492,1,0,0,0,1494,1495,1,0,0,0,1495,
		1493,1,0,0,0,1495,1496,1,0,0,0,1496,1498,1,0,0,0,1497,1499,3,154,77,0,
		1498,1497,1,0,0,0,1498,1499,1,0,0,0,1499,1502,1,0,0,0,1500,1502,3,154,
		77,0,1501,1493,1,0,0,0,1501,1500,1,0,0,0,1502,169,1,0,0,0,1503,1505,5,
		36,0,0,1504,1506,5,19,0,0,1505,1504,1,0,0,0,1505,1506,1,0,0,0,1506,1507,
		1,0,0,0,1507,1508,3,166,83,0,1508,171,1,0,0,0,1509,1510,5,32,0,0,1510,
		1511,3,166,83,0,1511,173,1,0,0,0,1512,1517,3,154,77,0,1513,1514,5,116,
		0,0,1514,1516,3,154,77,0,1515,1513,1,0,0,0,1516,1519,1,0,0,0,1517,1515,
		1,0,0,0,1517,1518,1,0,0,0,1518,1521,1,0,0,0,1519,1517,1,0,0,0,1520,1522,
		5,116,0,0,1521,1520,1,0,0,0,1521,1522,1,0,0,0,1522,1528,1,0,0,0,1523,1524,
		3,154,77,0,1524,1525,5,117,0,0,1525,1526,3,154,77,0,1526,1528,1,0,0,0,
		1527,1512,1,0,0,0,1527,1523,1,0,0,0,1528,175,1,0,0,0,1529,1530,3,154,77,
		0,1530,1531,5,116,0,0,1531,1533,1,0,0,0,1532,1529,1,0,0,0,1533,1534,1,
		0,0,0,1534,1532,1,0,0,0,1534,1535,1,0,0,0,1535,1537,1,0,0,0,1536,1538,
		3,154,77,0,1537,1536,1,0,0,0,1537,1538,1,0,0,0,1538,177,1,0,0,0,1539,1540,
		5,75,0,0,1540,179,1,0,0,0,1541,1545,3,182,91,0,1542,1545,3,190,95,0,1543,
		1545,3,192,96,0,1544,1541,1,0,0,0,1544,1542,1,0,0,0,1544,1543,1,0,0,0,
		1545,181,1,0,0,0,1546,1547,3,342,171,0,1547,1551,5,125,0,0,1548,1550,3,
		140,70,0,1549,1548,1,0,0,0,1550,1553,1,0,0,0,1551,1549,1,0,0,0,1551,1552,
		1,0,0,0,1552,1556,1,0,0,0,1553,1551,1,0,0,0,1554,1557,3,184,92,0,1555,
		1557,3,188,94,0,1556,1554,1,0,0,0,1556,1555,1,0,0,0,1556,1557,1,0,0,0,
		1557,1558,1,0,0,0,1558,1559,5,126,0,0,1559,183,1,0,0,0,1560,1565,3,186,
		93,0,1561,1562,5,116,0,0,1562,1564,3,186,93,0,1563,1561,1,0,0,0,1564,1567,
		1,0,0,0,1565,1563,1,0,0,0,1565,1566,1,0,0,0,1566,1573,1,0,0,0,1567,1565,
		1,0,0,0,1568,1569,5,116,0,0,1569,1574,3,188,94,0,1570,1572,5,116,0,0,1571,
		1570,1,0,0,0,1571,1572,1,0,0,0,1572,1574,1,0,0,0,1573,1568,1,0,0,0,1573,
		1571,1,0,0,0,1574,185,1,0,0,0,1575,1577,3,142,71,0,1576,1575,1,0,0,0,1577,
		1580,1,0,0,0,1578,1576,1,0,0,0,1578,1579,1,0,0,0,1579,1589,1,0,0,0,1580,
		1578,1,0,0,0,1581,1590,3,378,189,0,1582,1585,3,378,189,0,1583,1585,3,178,
		89,0,1584,1582,1,0,0,0,1584,1583,1,0,0,0,1585,1586,1,0,0,0,1586,1587,5,
		118,0,0,1587,1588,3,154,77,0,1588,1590,1,0,0,0,1589,1581,1,0,0,0,1589,
		1584,1,0,0,0,1590,187,1,0,0,0,1591,1592,5,113,0,0,1592,1593,3,154,77,0,
		1593,189,1,0,0,0,1594,1595,3,342,171,0,1595,1599,5,129,0,0,1596,1598,3,
		140,70,0,1597,1596,1,0,0,0,1598,1601,1,0,0,0,1599,1597,1,0,0,0,1599,1600,
		1,0,0,0,1600,1613,1,0,0,0,1601,1599,1,0,0,0,1602,1607,3,154,77,0,1603,
		1604,5,116,0,0,1604,1606,3,154,77,0,1605,1603,1,0,0,0,1606,1609,1,0,0,
		0,1607,1605,1,0,0,0,1607,1608,1,0,0,0,1608,1611,1,0,0,0,1609,1607,1,0,
		0,0,1610,1612,5,116,0,0,1611,1610,1,0,0,0,1611,1612,1,0,0,0,1612,1614,
		1,0,0,0,1613,1602,1,0,0,0,1613,1614,1,0,0,0,1614,1615,1,0,0,0,1615,1616,
		5,130,0,0,1616,191,1,0,0,0,1617,1618,3,342,171,0,1618,193,1,0,0,0,1619,
		1623,3,196,98,0,1620,1623,3,202,101,0,1621,1623,3,204,102,0,1622,1619,
		1,0,0,0,1622,1620,1,0,0,0,1622,1621,1,0,0,0,1623,195,1,0,0,0,1624,1625,
		3,342,171,0,1625,1627,5,125,0,0,1626,1628,3,198,99,0,1627,1626,1,0,0,0,
		1627,1628,1,0,0,0,1628,1629,1,0,0,0,1629,1630,5,126,0,0,1630,197,1,0,0,
		0,1631,1636,3,200,100,0,1632,1633,5,116,0,0,1633,1635,3,200,100,0,1634,
		1632,1,0,0,0,1635,1638,1,0,0,0,1636,1634,1,0,0,0,1636,1637,1,0,0,0,1637,
		1640,1,0,0,0,1638,1636,1,0,0,0,1639,1641,5,116,0,0,1640,1639,1,0,0,0,1640,
		1641,1,0,0,0,1641,199,1,0,0,0,1642,1651,3,378,189,0,1643,1646,3,378,189,
		0,1644,1646,3,178,89,0,1645,1643,1,0,0,0,1645,1644,1,0,0,0,1646,1647,1,
		0,0,0,1647,1648,5,118,0,0,1648,1649,3,154,77,0,1649,1651,1,0,0,0,1650,
		1642,1,0,0,0,1650,1645,1,0,0,0,1651,201,1,0,0,0,1652,1653,3,342,171,0,
		1653,1665,5,129,0,0,1654,1659,3,154,77,0,1655,1656,5,116,0,0,1656,1658,
		3,154,77,0,1657,1655,1,0,0,0,1658,1661,1,0,0,0,1659,1657,1,0,0,0,1659,
		1660,1,0,0,0,1660,1663,1,0,0,0,1661,1659,1,0,0,0,1662,1664,5,116,0,0,1663,
		1662,1,0,0,0,1663,1664,1,0,0,0,1664,1666,1,0,0,0,1665,1654,1,0,0,0,1665,
		1666,1,0,0,0,1666,1667,1,0,0,0,1667,1668,5,130,0,0,1668,203,1,0,0,0,1669,
		1670,3,342,171,0,1670,205,1,0,0,0,1671,1676,3,154,77,0,1672,1673,5,116,
		0,0,1673,1675,3,154,77,0,1674,1672,1,0,0,0,1675,1678,1,0,0,0,1676,1674,
		1,0,0,0,1676,1677,1,0,0,0,1677,1680,1,0,0,0,1678,1676,1,0,0,0,1679,1681,
		5,116,0,0,1680,1679,1,0,0,0,1680,1681,1,0,0,0,1681,207,1,0,0,0,1682,1684,
		5,19,0,0,1683,1682,1,0,0,0,1683,1684,1,0,0,0,1684,1691,1,0,0,0,1685,1692,
		5,92,0,0,1686,1688,5,90,0,0,1687,1689,3,210,105,0,1688,1687,1,0,0,0,1688,
		1689,1,0,0,0,1689,1690,1,0,0,0,1690,1692,5,90,0,0,1691,1685,1,0,0,0,1691,
		1686,1,0,0,0,1692,1698,1,0,0,0,1693,1699,3,154,77,0,1694,1695,5,120,0,
		0,1695,1696,3,288,144,0,1696,1697,3,166,83,0,1697,1699,1,0,0,0,1698,1693,
		1,0,0,0,1698,1694,1,0,0,0,1699,209,1,0,0,0,1700,1705,3,212,106,0,1701,
		1702,5,116,0,0,1702,1704,3,212,106,0,1703,1701,1,0,0,0,1704,1707,1,0,0,
		0,1705,1703,1,0,0,0,1705,1706,1,0,0,0,1706,1709,1,0,0,0,1707,1705,1,0,
		0,0,1708,1710,5,116,0,0,1709,1708,1,0,0,0,1709,1710,1,0,0,0,1710,211,1,
		0,0,0,1711,1713,3,142,71,0,1712,1711,1,0,0,0,1713,1716,1,0,0,0,1714,1712,
		1,0,0,0,1714,1715,1,0,0,0,1715,1717,1,0,0,0,1716,1714,1,0,0,0,1717,1720,
		3,240,120,0,1718,1719,5,118,0,0,1719,1721,3,286,143,0,1720,1718,1,0,0,
		0,1720,1721,1,0,0,0,1721,213,1,0,0,0,1722,1724,3,224,112,0,1723,1722,1,
		0,0,0,1723,1724,1,0,0,0,1724,1729,1,0,0,0,1725,1730,3,216,108,0,1726,1730,
		3,218,109,0,1727,1730,3,220,110,0,1728,1730,3,222,111,0,1729,1725,1,0,
		0,0,1729,1726,1,0,0,0,1729,1727,1,0,0,0,1729,1728,1,0,0,0,1730,215,1,0,
		0,0,1731,1732,5,16,0,0,1732,1733,3,166,83,0,1733,217,1,0,0,0,1734,1735,
		5,35,0,0,1735,1736,3,154,77,0,1736,1737,3,166,83,0,1737,219,1,0,0,0,1738,
		1739,5,35,0,0,1739,1740,5,15,0,0,1740,1741,3,240,120,0,1741,1742,5,103,
		0,0,1742,1743,3,154,77,0,1743,1744,3,166,83,0,1744,221,1,0,0,0,1745,1746,
		5,11,0,0,1746,1747,3,240,120,0,1747,1748,5,14,0,0,1748,1749,3,154,77,0,
		1749,1750,3,166,83,0,1750,223,1,0,0,0,1751,1752,5,81,0,0,1752,1753,5,118,
		0,0,1753,225,1,0,0,0,1754,1755,5,12,0,0,1755,1756,3,154,77,0,1756,1763,
		3,166,83,0,1757,1761,5,6,0,0,1758,1762,3,166,83,0,1759,1762,3,226,113,
		0,1760,1762,3,228,114,0,1761,1758,1,0,0,0,1761,1759,1,0,0,0,1761,1760,
		1,0,0,0,1762,1764,1,0,0,0,1763,1757,1,0,0,0,1763,1764,1,0,0,0,1764,227,
		1,0,0,0,1765,1766,5,12,0,0,1766,1767,5,15,0,0,1767,1768,3,240,120,0,1768,
		1769,5,103,0,0,1769,1770,3,154,77,0,1770,1777,3,166,83,0,1771,1775,5,6,
		0,0,1772,1776,3,166,83,0,1773,1776,3,226,113,0,1774,1776,3,228,114,0,1775,
		1772,1,0,0,0,1775,1773,1,0,0,0,1775,1774,1,0,0,0,1776,1778,1,0,0,0,1777,
		1771,1,0,0,0,1777,1778,1,0,0,0,1778,229,1,0,0,0,1779,1780,5,17,0,0,1780,
		1781,3,154,77,0,1781,1785,5,125,0,0,1782,1784,3,140,70,0,1783,1782,1,0,
		0,0,1784,1787,1,0,0,0,1785,1783,1,0,0,0,1785,1786,1,0,0,0,1786,1789,1,
		0,0,0,1787,1785,1,0,0,0,1788,1790,3,232,116,0,1789,1788,1,0,0,0,1789,1790,
		1,0,0,0,1790,1791,1,0,0,0,1791,1792,5,126,0,0,1792,231,1,0,0,0,1793,1794,
		3,236,118,0,1794,1795,5,121,0,0,1795,1796,3,234,117,0,1796,1798,1,0,0,
		0,1797,1793,1,0,0,0,1798,1801,1,0,0,0,1799,1797,1,0,0,0,1799,1800,1,0,
		0,0,1800,1802,1,0,0,0,1801,1799,1,0,0,0,1802,1803,3,236,118,0,1803,1804,
		5,121,0,0,1804,1806,3,154,77,0,1805,1807,5,116,0,0,1806,1805,1,0,0,0,1806,
		1807,1,0,0,0,1807,233,1,0,0,0,1808,1809,3,154,77,0,1809,1810,5,116,0,0,
		1810,1816,1,0,0,0,1811,1813,3,160,80,0,1812,1814,5,116,0,0,1813,1812,1,
		0,0,0,1813,1814,1,0,0,0,1814,1816,1,0,0,0,1815,1808,1,0,0,0,1815,1811,
		1,0,0,0,1816,235,1,0,0,0,1817,1819,3,142,71,0,1818,1817,1,0,0,0,1819,1822,
		1,0,0,0,1820,1818,1,0,0,0,1820,1821,1,0,0,0,1821,1823,1,0,0,0,1822,1820,
		1,0,0,0,1823,1825,3,240,120,0,1824,1826,3,238,119,0,1825,1824,1,0,0,0,
		1825,1826,1,0,0,0,1826,237,1,0,0,0,1827,1828,5,12,0,0,1828,1829,3,154,
		77,0,1829,239,1,0,0,0,1830,1832,5,90,0,0,1831,1830,1,0,0,0,1831,1832,1,
		0,0,0,1832,1833,1,0,0,0,1833,1838,3,242,121,0,1834,1835,5,90,0,0,1835,
		1837,3,242,121,0,1836,1834,1,0,0,0,1837,1840,1,0,0,0,1838,1836,1,0,0,0,
		1838,1839,1,0,0,0,1839,241,1,0,0,0,1840,1838,1,0,0,0,1841,1844,3,244,122,
		0,1842,1844,3,254,127,0,1843,1841,1,0,0,0,1843,1842,1,0,0,0,1844,243,1,
		0,0,0,1845,1858,3,246,123,0,1846,1858,3,248,124,0,1847,1858,3,250,125,
		0,1848,1858,3,252,126,0,1849,1858,3,258,129,0,1850,1858,3,260,130,0,1851,
		1858,3,270,135,0,1852,1858,3,274,137,0,1853,1858,3,278,139,0,1854,1858,
		3,280,140,0,1855,1858,3,284,142,0,1856,1858,3,2,1,0,1857,1845,1,0,0,0,
		1857,1846,1,0,0,0,1857,1847,1,0,0,0,1857,1848,1,0,0,0,1857,1849,1,0,0,
		0,1857,1850,1,0,0,0,1857,1851,1,0,0,0,1857,1852,1,0,0,0,1857,1853,1,0,
		0,0,1857,1854,1,0,0,0,1857,1855,1,0,0,0,1857,1856,1,0,0,0,1858,245,1,0,
		0,0,1859,1876,5,30,0,0,1860,1876,5,9,0,0,1861,1876,5,69,0,0,1862,1876,
		5,72,0,0,1863,1876,5,70,0,0,1864,1876,5,71,0,0,1865,1876,5,73,0,0,1866,
		1876,5,74,0,0,1867,1869,5,83,0,0,1868,1867,1,0,0,0,1868,1869,1,0,0,0,1869,
		1870,1,0,0,0,1870,1876,5,75,0,0,1871,1873,5,83,0,0,1872,1871,1,0,0,0,1872,
		1873,1,0,0,0,1873,1874,1,0,0,0,1874,1876,5,80,0,0,1875,1859,1,0,0,0,1875,
		1860,1,0,0,0,1875,1861,1,0,0,0,1875,1862,1,0,0,0,1875,1863,1,0,0,0,1875,
		1864,1,0,0,0,1875,1865,1,0,0,0,1875,1866,1,0,0,0,1875,1868,1,0,0,0,1875,
		1872,1,0,0,0,1876,247,1,0,0,0,1877,1879,5,22,0,0,1878,1877,1,0,0,0,1878,
		1879,1,0,0,0,1879,1881,1,0,0,0,1880,1882,5,20,0,0,1881,1880,1,0,0,0,1881,
		1882,1,0,0,0,1882,1883,1,0,0,0,1883,1886,3,378,189,0,1884,1885,5,110,0,
		0,1885,1887,3,240,120,0,1886,1884,1,0,0,0,1886,1887,1,0,0,0,1887,249,1,
		0,0,0,1888,1889,5,111,0,0,1889,251,1,0,0,0,1890,1891,5,113,0,0,1891,253,
		1,0,0,0,1892,1893,3,256,128,0,1893,1894,5,115,0,0,1894,1895,3,256,128,
		0,1895,1904,1,0,0,0,1896,1897,3,256,128,0,1897,1898,5,113,0,0,1898,1904,
		1,0,0,0,1899,1900,3,256,128,0,1900,1901,5,114,0,0,1901,1902,3,256,128,
		0,1902,1904,1,0,0,0,1903,1892,1,0,0,0,1903,1896,1,0,0,0,1903,1899,1,0,
		0,0,1904,255,1,0,0,0,1905,1917,5,69,0,0,1906,1917,5,72,0,0,1907,1909,5,
		83,0,0,1908,1907,1,0,0,0,1908,1909,1,0,0,0,1909,1910,1,0,0,0,1910,1917,
		5,75,0,0,1911,1913,5,83,0,0,1912,1911,1,0,0,0,1912,1913,1,0,0,0,1913,1914,
		1,0,0,0,1914,1917,5,80,0,0,1915,1917,3,284,142,0,1916,1905,1,0,0,0,1916,
		1906,1,0,0,0,1916,1908,1,0,0,0,1916,1912,1,0,0,0,1916,1915,1,0,0,0,1917,
		257,1,0,0,0,1918,1920,7,2,0,0,1919,1921,5,20,0,0,1920,1919,1,0,0,0,1920,
		1921,1,0,0,0,1921,1922,1,0,0,0,1922,1923,3,244,122,0,1923,259,1,0,0,0,
		1924,1925,3,342,171,0,1925,1927,5,125,0,0,1926,1928,3,262,131,0,1927,1926,
		1,0,0,0,1927,1928,1,0,0,0,1928,1929,1,0,0,0,1929,1930,5,126,0,0,1930,261,
		1,0,0,0,1931,1936,3,264,132,0,1932,1934,5,116,0,0,1933,1935,3,268,134,
		0,1934,1933,1,0,0,0,1934,1935,1,0,0,0,1935,1937,1,0,0,0,1936,1932,1,0,
		0,0,1936,1937,1,0,0,0,1937,1940,1,0,0,0,1938,1940,3,268,134,0,1939,1931,
		1,0,0,0,1939,1938,1,0,0,0,1940,263,1,0,0,0,1941,1946,3,266,133,0,1942,
		1943,5,116,0,0,1943,1945,3,266,133,0,1944,1942,1,0,0,0,1945,1948,1,0,0,
		0,1946,1944,1,0,0,0,1946,1947,1,0,0,0,1947,265,1,0,0,0,1948,1946,1,0,0,
		0,1949,1951,3,142,71,0,1950,1949,1,0,0,0,1951,1954,1,0,0,0,1952,1950,1,
		0,0,0,1952,1953,1,0,0,0,1953,1970,1,0,0,0,1954,1952,1,0,0,0,1955,1956,
		3,178,89,0,1956,1957,5,118,0,0,1957,1958,3,240,120,0,1958,1971,1,0,0,0,
		1959,1960,3,378,189,0,1960,1961,5,118,0,0,1961,1962,3,240,120,0,1962,1971,
		1,0,0,0,1963,1965,5,22,0,0,1964,1963,1,0,0,0,1964,1965,1,0,0,0,1965,1967,
		1,0,0,0,1966,1968,5,20,0,0,1967,1966,1,0,0,0,1967,1968,1,0,0,0,1968,1969,
		1,0,0,0,1969,1971,3,378,189,0,1970,1955,1,0,0,0,1970,1959,1,0,0,0,1970,
		1964,1,0,0,0,1971,267,1,0,0,0,1972,1974,3,142,71,0,1973,1972,1,0,0,0,1974,
		1977,1,0,0,0,1975,1973,1,0,0,0,1975,1976,1,0,0,0,1976,1978,1,0,0,0,1977,
		1975,1,0,0,0,1978,1979,5,113,0,0,1979,269,1,0,0,0,1980,1981,3,342,171,
		0,1981,1983,5,129,0,0,1982,1984,3,272,136,0,1983,1982,1,0,0,0,1983,1984,
		1,0,0,0,1984,1985,1,0,0,0,1985,1986,5,130,0,0,1986,271,1,0,0,0,1987,1992,
		3,240,120,0,1988,1989,5,116,0,0,1989,1991,3,240,120,0,1990,1988,1,0,0,
		0,1991,1994,1,0,0,0,1992,1990,1,0,0,0,1992,1993,1,0,0,0,1993,1996,1,0,
		0,0,1994,1992,1,0,0,0,1995,1997,5,116,0,0,1996,1995,1,0,0,0,1996,1997,
		1,0,0,0,1997,273,1,0,0,0,1998,2000,5,129,0,0,1999,2001,3,276,138,0,2000,
		1999,1,0,0,0,2000,2001,1,0,0,0,2001,2002,1,0,0,0,2002,2003,5,130,0,0,2003,
		275,1,0,0,0,2004,2005,3,240,120,0,2005,2006,5,116,0,0,2006,2019,1,0,0,
		0,2007,2019,3,252,126,0,2008,2011,3,240,120,0,2009,2010,5,116,0,0,2010,
		2012,3,240,120,0,2011,2009,1,0,0,0,2012,2013,1,0,0,0,2013,2011,1,0,0,0,
		2013,2014,1,0,0,0,2014,2016,1,0,0,0,2015,2017,5,116,0,0,2016,2015,1,0,
		0,0,2016,2017,1,0,0,0,2017,2019,1,0,0,0,2018,2004,1,0,0,0,2018,2007,1,
		0,0,0,2018,2008,1,0,0,0,2019,277,1,0,0,0,2020,2021,5,129,0,0,2021,2022,
		3,240,120,0,2022,2023,5,130,0,0,2023,279,1,0,0,0,2024,2026,5,127,0,0,2025,
		2027,3,282,141,0,2026,2025,1,0,0,0,2026,2027,1,0,0,0,2027,2028,1,0,0,0,
		2028,2029,5,128,0,0,2029,281,1,0,0,0,2030,2035,3,240,120,0,2031,2032,5,
		116,0,0,2032,2034,3,240,120,0,2033,2031,1,0,0,0,2034,2037,1,0,0,0,2035,
		2033,1,0,0,0,2035,2036,1,0,0,0,2036,2039,1,0,0,0,2037,2035,1,0,0,0,2038,
		2040,5,116,0,0,2039,2038,1,0,0,0,2039,2040,1,0,0,0,2040,283,1,0,0,0,2041,
		2044,3,342,171,0,2042,2044,3,362,181,0,2043,2041,1,0,0,0,2043,2042,1,0,
		0,0,2044,285,1,0,0,0,2045,2049,3,288,144,0,2046,2049,3,322,161,0,2047,
		2049,3,318,159,0,2048,2045,1,0,0,0,2048,2046,1,0,0,0,2048,2047,1,0,0,0,
		2049,287,1,0,0,0,2050,2065,3,290,145,0,2051,2065,3,324,162,0,2052,2065,
		3,320,160,0,2053,2065,3,368,184,0,2054,2065,3,294,147,0,2055,2065,3,292,
		146,0,2056,2065,3,302,151,0,2057,2065,3,300,150,0,2058,2065,3,296,148,
		0,2059,2065,3,298,149,0,2060,2065,3,326,163,0,2061,2065,3,366,183,0,2062,
		2065,3,304,152,0,2063,2065,3,2,1,0,2064,2050,1,0,0,0,2064,2051,1,0,0,0,
		2064,2052,1,0,0,0,2064,2053,1,0,0,0,2064,2054,1,0,0,0,2064,2055,1,0,0,
		0,2064,2056,1,0,0,0,2064,2057,1,0,0,0,2064,2058,1,0,0,0,2064,2059,1,0,
		0,0,2064,2060,1,0,0,0,2064,2061,1,0,0,0,2064,2062,1,0,0,0,2064,2063,1,
		0,0,0,2065,289,1,0,0,0,2066,2067,5,129,0,0,2067,2068,3,286,143,0,2068,
		2069,5,130,0,0,2069,291,1,0,0,0,2070,2071,5,88,0,0,2071,293,1,0,0,0,2072,
		2083,5,129,0,0,2073,2074,3,286,143,0,2074,2075,5,116,0,0,2075,2077,1,0,
		0,0,2076,2073,1,0,0,0,2077,2078,1,0,0,0,2078,2076,1,0,0,0,2078,2079,1,
		0,0,0,2079,2081,1,0,0,0,2080,2082,3,286,143,0,2081,2080,1,0,0,0,2081,2082,
		1,0,0,0,2082,2084,1,0,0,0,2083,2076,1,0,0,0,2083,2084,1,0,0,0,2084,2085,
		1,0,0,0,2085,2086,5,130,0,0,2086,295,1,0,0,0,2087,2088,5,127,0,0,2088,
		2089,3,286,143,0,2089,2090,5,117,0,0,2090,2091,3,154,77,0,2091,2092,5,
		128,0,0,2092,297,1,0,0,0,2093,2094,5,127,0,0,2094,2095,3,286,143,0,2095,
		2096,5,128,0,0,2096,299,1,0,0,0,2097,2099,5,89,0,0,2098,2100,3,336,168,
		0,2099,2098,1,0,0,0,2099,2100,1,0,0,0,2100,2102,1,0,0,0,2101,2103,5,20,
		0,0,2102,2101,1,0,0,0,2102,2103,1,0,0,0,2103,2104,1,0,0,0,2104,2105,3,
		288,144,0,2105,301,1,0,0,0,2106,2107,5,84,0,0,2107,2108,7,9,0,0,2108,2109,
		3,288,144,0,2109,303,1,0,0,0,2110,2112,3,136,68,0,2111,2110,1,0,0,0,2111,
		2112,1,0,0,0,2112,2113,1,0,0,0,2113,2114,3,306,153,0,2114,2115,5,10,0,
		0,2115,2117,5,129,0,0,2116,2118,3,310,155,0,2117,2116,1,0,0,0,2117,2118,
		1,0,0,0,2118,2119,1,0,0,0,2119,2121,5,130,0,0,2120,2122,3,308,154,0,2121,
		2120,1,0,0,0,2121,2122,1,0,0,0,2122,305,1,0,0,0,2123,2125,5,32,0,0,2124,
		2123,1,0,0,0,2124,2125,1,0,0,0,2125,2130,1,0,0,0,2126,2128,5,8,0,0,2127,
		2129,3,56,28,0,2128,2127,1,0,0,0,2128,2129,1,0,0,0,2129,2131,1,0,0,0,2130,
		2126,1,0,0,0,2130,2131,1,0,0,0,2131,307,1,0,0,0,2132,2133,5,120,0,0,2133,
		2134,3,288,144,0,2134,309,1,0,0,0,2135,2138,3,312,156,0,2136,2138,3,316,
		158,0,2137,2135,1,0,0,0,2137,2136,1,0,0,0,2138,311,1,0,0,0,2139,2144,3,
		314,157,0,2140,2141,5,116,0,0,2141,2143,3,314,157,0,2142,2140,1,0,0,0,
		2143,2146,1,0,0,0,2144,2142,1,0,0,0,2144,2145,1,0,0,0,2145,2148,1,0,0,
		0,2146,2144,1,0,0,0,2147,2149,5,116,0,0,2148,2147,1,0,0,0,2148,2149,1,
		0,0,0,2149,313,1,0,0,0,2150,2152,3,142,71,0,2151,2150,1,0,0,0,2152,2155,
		1,0,0,0,2153,2151,1,0,0,0,2153,2154,1,0,0,0,2154,2161,1,0,0,0,2155,2153,
		1,0,0,0,2156,2159,3,378,189,0,2157,2159,5,111,0,0,2158,2156,1,0,0,0,2158,
		2157,1,0,0,0,2159,2160,1,0,0,0,2160,2162,5,118,0,0,2161,2158,1,0,0,0,2161,
		2162,1,0,0,0,2162,2163,1,0,0,0,2163,2164,3,286,143,0,2164,315,1,0,0,0,
		2165,2166,3,314,157,0,2166,2167,5,116,0,0,2167,2169,1,0,0,0,2168,2165,
		1,0,0,0,2169,2172,1,0,0,0,2170,2168,1,0,0,0,2170,2171,1,0,0,0,2171,2173,
		1,0,0,0,2172,2170,1,0,0,0,2173,2174,3,314,157,0,2174,2178,5,116,0,0,2175,
		2177,3,142,71,0,2176,2175,1,0,0,0,2177,2180,1,0,0,0,2178,2176,1,0,0,0,
		2178,2179,1,0,0,0,2179,2181,1,0,0,0,2180,2178,1,0,0,0,2181,2182,5,114,
		0,0,2182,317,1,0,0,0,2183,2185,5,38,0,0,2184,2183,1,0,0,0,2184,2185,1,
		0,0,0,2185,2186,1,0,0,0,2186,2187,3,328,164,0,2187,319,1,0,0,0,2188,2190,
		5,38,0,0,2189,2188,1,0,0,0,2189,2190,1,0,0,0,2190,2191,1,0,0,0,2191,2192,
		3,332,166,0,2192,321,1,0,0,0,2193,2194,5,13,0,0,2194,2195,3,328,164,0,
		2195,323,1,0,0,0,2196,2197,5,13,0,0,2197,2198,3,332,166,0,2198,325,1,0,
		0,0,2199,2200,5,111,0,0,2200,327,1,0,0,0,2201,2206,3,330,165,0,2202,2203,
		5,82,0,0,2203,2205,3,330,165,0,2204,2202,1,0,0,0,2205,2208,1,0,0,0,2206,
		2204,1,0,0,0,2206,2207,1,0,0,0,2207,2210,1,0,0,0,2208,2206,1,0,0,0,2209,
		2211,5,82,0,0,2210,2209,1,0,0,0,2210,2211,1,0,0,0,2211,329,1,0,0,0,2212,
		2215,3,336,168,0,2213,2215,3,332,166,0,2214,2212,1,0,0,0,2214,2213,1,0,
		0,0,2215,331,1,0,0,0,2216,2218,5,124,0,0,2217,2216,1,0,0,0,2217,2218,1,
		0,0,0,2218,2220,1,0,0,0,2219,2221,3,136,68,0,2220,2219,1,0,0,0,2220,2221,
		1,0,0,0,2221,2222,1,0,0,0,2222,2234,3,368,184,0,2223,2225,5,129,0,0,2224,
		2226,5,124,0,0,2225,2224,1,0,0,0,2225,2226,1,0,0,0,2226,2228,1,0,0,0,2227,
		2229,3,136,68,0,2228,2227,1,0,0,0,2228,2229,1,0,0,0,2229,2230,1,0,0,0,
		2230,2231,3,368,184,0,2231,2232,5,130,0,0,2232,2234,1,0,0,0,2233,2217,
		1,0,0,0,2233,2223,1,0,0,0,2234,333,1,0,0,0,2235,2236,3,336,168,0,2236,
		2237,5,82,0,0,2237,2239,1,0,0,0,2238,2235,1,0,0,0,2239,2242,1,0,0,0,2240,
		2238,1,0,0,0,2240,2241,1,0,0,0,2241,2244,1,0,0,0,2242,2240,1,0,0,0,2243,
		2245,3,336,168,0,2244,2243,1,0,0,0,2244,2245,1,0,0,0,2245,335,1,0,0,0,
		2246,2247,7,10,0,0,2247,337,1,0,0,0,2248,2250,5,119,0,0,2249,2248,1,0,
		0,0,2249,2250,1,0,0,0,2250,2251,1,0,0,0,2251,2256,3,340,170,0,2252,2253,
		5,119,0,0,2253,2255,3,340,170,0,2254,2252,1,0,0,0,2255,2258,1,0,0,0,2256,
		2254,1,0,0,0,2256,2257,1,0,0,0,2257,339,1,0,0,0,2258,2256,1,0,0,0,2259,
		2265,3,378,189,0,2260,2265,5,28,0,0,2261,2265,5,24,0,0,2262,2265,5,5,0,
		0,2263,2265,5,56,0,0,2264,2259,1,0,0,0,2264,2260,1,0,0,0,2264,2261,1,0,
		0,0,2264,2262,1,0,0,0,2264,2263,1,0,0,0,2265,341,1,0,0,0,2266,2268,5,119,
		0,0,2267,2266,1,0,0,0,2267,2268,1,0,0,0,2268,2269,1,0,0,0,2269,2274,3,
		344,172,0,2270,2271,5,119,0,0,2271,2273,3,344,172,0,2272,2270,1,0,0,0,
		2273,2276,1,0,0,0,2274,2272,1,0,0,0,2274,2275,1,0,0,0,2275,343,1,0,0,0,
		2276,2274,1,0,0,0,2277,2280,3,346,173,0,2278,2279,5,119,0,0,2279,2281,
		3,348,174,0,2280,2278,1,0,0,0,2280,2281,1,0,0,0,2281,345,1,0,0,0,2282,
		2289,3,378,189,0,2283,2289,5,28,0,0,2284,2289,5,24,0,0,2285,2289,5,25,
		0,0,2286,2289,5,5,0,0,2287,2289,5,56,0,0,2288,2282,1,0,0,0,2288,2283,1,
		0,0,0,2288,2284,1,0,0,0,2288,2285,1,0,0,0,2288,2286,1,0,0,0,2288,2287,
		1,0,0,0,2289,347,1,0,0,0,2290,2291,5,107,0,0,2291,2334,5,106,0,0,2292,
		2293,5,107,0,0,2293,2296,3,354,177,0,2294,2295,5,116,0,0,2295,2297,3,356,
		178,0,2296,2294,1,0,0,0,2296,2297,1,0,0,0,2297,2300,1,0,0,0,2298,2299,
		5,116,0,0,2299,2301,3,358,179,0,2300,2298,1,0,0,0,2300,2301,1,0,0,0,2301,
		2303,1,0,0,0,2302,2304,5,116,0,0,2303,2302,1,0,0,0,2303,2304,1,0,0,0,2304,
		2305,1,0,0,0,2305,2306,5,106,0,0,2306,2334,1,0,0,0,2307,2308,5,107,0,0,
		2308,2311,3,356,178,0,2309,2310,5,116,0,0,2310,2312,3,358,179,0,2311,2309,
		1,0,0,0,2311,2312,1,0,0,0,2312,2314,1,0,0,0,2313,2315,5,116,0,0,2314,2313,
		1,0,0,0,2314,2315,1,0,0,0,2315,2316,1,0,0,0,2316,2317,5,106,0,0,2317,2334,
		1,0,0,0,2318,2324,5,107,0,0,2319,2320,3,350,175,0,2320,2321,5,116,0,0,
		2321,2323,1,0,0,0,2322,2319,1,0,0,0,2323,2326,1,0,0,0,2324,2322,1,0,0,
		0,2324,2325,1,0,0,0,2325,2327,1,0,0,0,2326,2324,1,0,0,0,2327,2329,3,350,
		175,0,2328,2330,5,116,0,0,2329,2328,1,0,0,0,2329,2330,1,0,0,0,2330,2331,
		1,0,0,0,2331,2332,5,106,0,0,2332,2334,1,0,0,0,2333,2290,1,0,0,0,2333,2292,
		1,0,0,0,2333,2307,1,0,0,0,2333,2318,1,0,0,0,2334,349,1,0,0,0,2335,2340,
		3,336,168,0,2336,2340,3,286,143,0,2337,2340,3,352,176,0,2338,2340,3,360,
		180,0,2339,2335,1,0,0,0,2339,2336,1,0,0,0,2339,2337,1,0,0,0,2339,2338,
		1,0,0,0,2340,351,1,0,0,0,2341,2348,3,166,83,0,2342,2344,5,83,0,0,2343,
		2342,1,0,0,0,2343,2344,1,0,0,0,2344,2345,1,0,0,0,2345,2348,3,162,81,0,
		2346,2348,3,340,170,0,2347,2341,1,0,0,0,2347,2343,1,0,0,0,2347,2346,1,
		0,0,0,2348,353,1,0,0,0,2349,2354,3,336,168,0,2350,2351,5,116,0,0,2351,
		2353,3,336,168,0,2352,2350,1,0,0,0,2353,2356,1,0,0,0,2354,2352,1,0,0,0,
		2354,2355,1,0,0,0,2355,355,1,0,0,0,2356,2354,1,0,0,0,2357,2362,3,286,143,
		0,2358,2359,5,116,0,0,2359,2361,3,286,143,0,2360,2358,1,0,0,0,2361,2364,
		1,0,0,0,2362,2360,1,0,0,0,2362,2363,1,0,0,0,2363,357,1,0,0,0,2364,2362,
		1,0,0,0,2365,2370,3,360,180,0,2366,2367,5,116,0,0,2367,2369,3,360,180,
		0,2368,2366,1,0,0,0,2369,2372,1,0,0,0,2370,2368,1,0,0,0,2370,2371,1,0,
		0,0,2371,359,1,0,0,0,2372,2370,1,0,0,0,2373,2374,3,378,189,0,2374,2375,
		5,103,0,0,2375,2376,3,286,143,0,2376,361,1,0,0,0,2377,2380,3,364,182,0,
		2378,2379,5,119,0,0,2379,2381,3,344,172,0,2380,2378,1,0,0,0,2381,2382,
		1,0,0,0,2382,2380,1,0,0,0,2382,2383,1,0,0,0,2383,363,1,0,0,0,2384,2385,
		5,107,0,0,2385,2388,3,286,143,0,2386,2387,5,1,0,0,2387,2389,3,368,184,
		0,2388,2386,1,0,0,0,2388,2389,1,0,0,0,2389,2390,1,0,0,0,2390,2391,5,106,
		0,0,2391,365,1,0,0,0,2392,2395,3,364,182,0,2393,2394,5,119,0,0,2394,2396,
		3,370,185,0,2395,2393,1,0,0,0,2396,2397,1,0,0,0,2397,2395,1,0,0,0,2397,
		2398,1,0,0,0,2398,367,1,0,0,0,2399,2401,5,119,0,0,2400,2399,1,0,0,0,2400,
		2401,1,0,0,0,2401,2402,1,0,0,0,2402,2407,3,370,185,0,2403,2404,5,119,0,
		0,2404,2406,3,370,185,0,2405,2403,1,0,0,0,2406,2409,1,0,0,0,2407,2405,
		1,0,0,0,2407,2408,1,0,0,0,2408,369,1,0,0,0,2409,2407,1,0,0,0,2410,2412,
		3,346,173,0,2411,2413,5,119,0,0,2412,2411,1,0,0,0,2412,2413,1,0,0,0,2413,
		2416,1,0,0,0,2414,2417,3,348,174,0,2415,2417,3,372,186,0,2416,2414,1,0,
		0,0,2416,2415,1,0,0,0,2416,2417,1,0,0,0,2417,371,1,0,0,0,2418,2420,5,129,
		0,0,2419,2421,3,374,187,0,2420,2419,1,0,0,0,2420,2421,1,0,0,0,2421,2422,
		1,0,0,0,2422,2425,5,130,0,0,2423,2424,5,120,0,0,2424,2426,3,286,143,0,
		2425,2423,1,0,0,0,2425,2426,1,0,0,0,2426,373,1,0,0,0,2427,2432,3,286,143,
		0,2428,2429,5,116,0,0,2429,2431,3,286,143,0,2430,2428,1,0,0,0,2431,2434,
		1,0,0,0,2432,2430,1,0,0,0,2432,2433,1,0,0,0,2433,2436,1,0,0,0,2434,2432,
		1,0,0,0,2435,2437,5,116,0,0,2436,2435,1,0,0,0,2436,2437,1,0,0,0,2437,375,
		1,0,0,0,2438,2448,5,21,0,0,2439,2445,5,129,0,0,2440,2446,5,5,0,0,2441,
		2446,5,24,0,0,2442,2446,5,28,0,0,2443,2444,5,14,0,0,2444,2446,3,338,169,
		0,2445,2440,1,0,0,0,2445,2441,1,0,0,0,2445,2442,1,0,0,0,2445,2443,1,0,
		0,0,2446,2447,1,0,0,0,2447,2449,5,130,0,0,2448,2439,1,0,0,0,2448,2449,
		1,0,0,0,2449,377,1,0,0,0,2450,2451,7,11,0,0,2451,379,1,0,0,0,2452,2453,
		7,12,0,0,2453,381,1,0,0,0,2454,2461,3,380,190,0,2455,2461,3,378,189,0,
		2456,2461,5,54,0,0,2457,2461,5,55,0,0,2458,2461,5,56,0,0,2459,2461,5,81,
		0,0,2460,2454,1,0,0,0,2460,2455,1,0,0,0,2460,2456,1,0,0,0,2460,2457,1,
		0,0,0,2460,2458,1,0,0,0,2460,2459,1,0,0,0,2461,383,1,0,0,0,2462,2463,3,
		162,81,0,2463,385,1,0,0,0,2464,2465,7,13,0,0,2465,387,1,0,0,0,2466,2467,
		5,107,0,0,2467,2468,4,194,21,0,2468,2469,5,107,0,0,2469,389,1,0,0,0,2470,
		2471,5,106,0,0,2471,2472,4,195,22,0,2472,2473,5,106,0,0,2473,391,1,0,0,
		0,345,395,401,414,422,430,434,439,442,449,457,469,481,486,507,514,518,
		528,536,544,548,553,559,568,572,576,582,590,599,604,607,622,626,629,638,
		644,648,654,660,665,672,675,684,688,690,693,699,701,703,709,713,717,720,
		724,727,730,733,737,739,745,750,757,761,763,768,773,777,779,782,787,796,
		802,808,816,819,823,829,834,837,841,845,850,854,858,867,871,876,880,891,
		895,900,904,911,914,918,927,931,936,940,946,950,956,966,969,978,984,990,
		997,1002,1007,1011,1013,1016,1022,1028,1035,1039,1043,1049,1055,1061,1065,
		1068,1074,1080,1086,1092,1096,1102,1108,1116,1121,1125,1127,1135,1140,
		1142,1149,1155,1158,1163,1166,1171,1173,1177,1190,1194,1198,1205,1210,
		1218,1223,1228,1230,1245,1250,1257,1262,1269,1273,1282,1284,1290,1298,
		1307,1313,1316,1320,1323,1327,1333,1343,1347,1354,1358,1366,1377,1415,
		1431,1447,1449,1451,1461,1472,1478,1484,1488,1495,1498,1501,1505,1517,
		1521,1527,1534,1537,1544,1551,1556,1565,1571,1573,1578,1584,1589,1599,
		1607,1611,1613,1622,1627,1636,1640,1645,1650,1659,1663,1665,1676,1680,
		1683,1688,1691,1698,1705,1709,1714,1720,1723,1729,1761,1763,1775,1777,
		1785,1789,1799,1806,1813,1815,1820,1825,1831,1838,1843,1857,1868,1872,
		1875,1878,1881,1886,1903,1908,1912,1916,1920,1927,1934,1936,1939,1946,
		1952,1964,1967,1970,1975,1983,1992,1996,2000,2013,2016,2018,2026,2035,
		2039,2043,2048,2064,2078,2081,2083,2099,2102,2111,2117,2121,2124,2128,
		2130,2137,2144,2148,2153,2158,2161,2170,2178,2184,2189,2206,2210,2214,
		2217,2220,2225,2228,2233,2240,2244,2249,2256,2264,2267,2274,2280,2288,
		2296,2300,2303,2311,2314,2324,2329,2333,2339,2343,2347,2354,2362,2370,
		2382,2388,2397,2400,2407,2412,2416,2420,2425,2432,2436,2445,2448,2460
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
