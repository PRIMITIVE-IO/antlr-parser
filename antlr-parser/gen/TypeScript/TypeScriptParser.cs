//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.10.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from /Users/maxfarsikov/IdeaProjects/antlr-parser/antlr-parser/grammars/TypeScriptParser.g4 by ANTLR 4.10.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.10.1")]
[System.CLSCompliant(false)]
public partial class TypeScriptParser : TypeScriptParserBase {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		MultiLineComment=1, SingleLineComment=2, RegularExpressionLiteral=3, OpenBracket=4, 
		CloseBracket=5, OpenParen=6, CloseParen=7, OpenBrace=8, CloseBrace=9, 
		SemiColon=10, Comma=11, Assign=12, QuestionMark=13, Colon=14, Ellipsis=15, 
		Dot=16, PlusPlus=17, MinusMinus=18, Plus=19, Minus=20, BitNot=21, Not=22, 
		Multiply=23, Divide=24, Modulus=25, RightShiftArithmetic=26, LeftShiftArithmetic=27, 
		RightShiftLogical=28, LessThan=29, MoreThan=30, LessThanEquals=31, GreaterThanEquals=32, 
		Equals_=33, NotEquals=34, IdentityEquals=35, IdentityNotEquals=36, BitAnd=37, 
		BitXOr=38, BitOr=39, And=40, Or=41, MultiplyAssign=42, DivideAssign=43, 
		ModulusAssign=44, PlusAssign=45, MinusAssign=46, LeftShiftArithmeticAssign=47, 
		RightShiftArithmeticAssign=48, RightShiftLogicalAssign=49, BitAndAssign=50, 
		BitXorAssign=51, BitOrAssign=52, ARROW=53, NullLiteral=54, BooleanLiteral=55, 
		DecimalLiteral=56, HexIntegerLiteral=57, OctalIntegerLiteral=58, OctalIntegerLiteral2=59, 
		BinaryIntegerLiteral=60, Break=61, Do=62, Instanceof=63, Typeof=64, Case=65, 
		Else=66, New=67, Var=68, Catch=69, Finally=70, Return=71, Void=72, Continue=73, 
		For=74, Switch=75, While=76, Debugger=77, Function=78, This=79, With=80, 
		Default=81, If=82, Throw=83, Delete=84, In=85, Try=86, As=87, From=88, 
		ReadOnly=89, Async=90, Class=91, Enum=92, Extends=93, Super=94, Const=95, 
		Export=96, Import=97, Implements=98, Let=99, Private=100, Public=101, 
		Interface=102, Package=103, Protected=104, Static=105, Yield=106, Any=107, 
		Number=108, Boolean=109, String=110, Symbol=111, TypeAlias=112, Get=113, 
		Set=114, Constructor=115, Namespace=116, Require=117, Module=118, Declare=119, 
		Abstract=120, Is=121, At=122, Identifier=123, StringLiteral=124, TemplateStringLiteral=125, 
		WhiteSpaces=126, LineTerminator=127, HtmlComment=128, CDataComment=129, 
		UnexpectedCharacter=130;
	public const int
		RULE_initializer = 0, RULE_bindingPattern = 1, RULE_typeParameters = 2, 
		RULE_typeParameterList = 3, RULE_typeParameter = 4, RULE_constraint = 5, 
		RULE_typeArguments = 6, RULE_typeArgumentList = 7, RULE_typeArgument = 8, 
		RULE_type_ = 9, RULE_unionOrIntersectionOrPrimaryType = 10, RULE_primaryType = 11, 
		RULE_predefinedType = 12, RULE_typeReference = 13, RULE_nestedTypeGeneric = 14, 
		RULE_typeGeneric = 15, RULE_typeIncludeGeneric = 16, RULE_typeName = 17, 
		RULE_objectType = 18, RULE_typeBody = 19, RULE_typeMemberList = 20, RULE_typeMember = 21, 
		RULE_arrayType = 22, RULE_tupleType = 23, RULE_tupleElementTypes = 24, 
		RULE_functionType = 25, RULE_constructorType = 26, RULE_typeQuery = 27, 
		RULE_typeQueryExpression = 28, RULE_propertySignatur = 29, RULE_typeAnnotation = 30, 
		RULE_callSignature = 31, RULE_parameterList = 32, RULE_requiredParameterList = 33, 
		RULE_parameter = 34, RULE_optionalParameter = 35, RULE_restParameter = 36, 
		RULE_requiredParameter = 37, RULE_accessibilityModifier = 38, RULE_identifierOrPattern = 39, 
		RULE_constructSignature = 40, RULE_indexSignature = 41, RULE_methodSignature = 42, 
		RULE_typeAliasDeclaration = 43, RULE_constructorDeclaration = 44, RULE_interfaceDeclaration = 45, 
		RULE_interfaceExtendsClause = 46, RULE_classOrInterfaceTypeList = 47, 
		RULE_enumDeclaration = 48, RULE_enumBody = 49, RULE_enumMemberList = 50, 
		RULE_enumMember = 51, RULE_namespaceDeclaration = 52, RULE_namespaceName = 53, 
		RULE_importAliasDeclaration = 54, RULE_decoratorList = 55, RULE_decorator = 56, 
		RULE_decoratorMemberExpression = 57, RULE_decoratorCallExpression = 58, 
		RULE_program = 59, RULE_sourceElement = 60, RULE_statement = 61, RULE_block = 62, 
		RULE_statementList = 63, RULE_abstractDeclaration = 64, RULE_importStatement = 65, 
		RULE_fromBlock = 66, RULE_multipleImportStatement = 67, RULE_exportStatement = 68, 
		RULE_variableStatement = 69, RULE_variableDeclarationList = 70, RULE_variableDeclaration = 71, 
		RULE_emptyStatement = 72, RULE_expressionStatement = 73, RULE_ifStatement = 74, 
		RULE_iterationStatement = 75, RULE_varModifier = 76, RULE_continueStatement = 77, 
		RULE_breakStatement = 78, RULE_returnStatement = 79, RULE_yieldStatement = 80, 
		RULE_withStatement = 81, RULE_switchStatement = 82, RULE_caseBlock = 83, 
		RULE_caseClauses = 84, RULE_caseClause = 85, RULE_defaultClause = 86, 
		RULE_labelledStatement = 87, RULE_throwStatement = 88, RULE_tryStatement = 89, 
		RULE_catchProduction = 90, RULE_finallyProduction = 91, RULE_debuggerStatement = 92, 
		RULE_functionDeclaration = 93, RULE_classDeclaration = 94, RULE_classHeritage = 95, 
		RULE_classTail = 96, RULE_classExtendsClause = 97, RULE_implementsClause = 98, 
		RULE_classElement = 99, RULE_propertyMemberDeclaration = 100, RULE_propertyMemberBase = 101, 
		RULE_indexMemberDeclaration = 102, RULE_generatorMethod = 103, RULE_generatorFunctionDeclaration = 104, 
		RULE_generatorBlock = 105, RULE_generatorDefinition = 106, RULE_iteratorBlock = 107, 
		RULE_iteratorDefinition = 108, RULE_formalParameterList = 109, RULE_formalParameterArg = 110, 
		RULE_lastFormalParameterArg = 111, RULE_functionBody = 112, RULE_sourceElements = 113, 
		RULE_arrayLiteral = 114, RULE_elementList = 115, RULE_arrayElement = 116, 
		RULE_objectLiteral = 117, RULE_propertyAssignment = 118, RULE_getAccessor = 119, 
		RULE_setAccessor = 120, RULE_propertyName = 121, RULE_arguments = 122, 
		RULE_argumentList = 123, RULE_argument = 124, RULE_expressionSequence = 125, 
		RULE_functionExpressionDeclaration = 126, RULE_singleExpression = 127, 
		RULE_asExpression = 128, RULE_arrowFunctionDeclaration = 129, RULE_arrowFunctionParameters = 130, 
		RULE_arrowFunctionBody = 131, RULE_assignmentOperator = 132, RULE_literal = 133, 
		RULE_numericLiteral = 134, RULE_identifierName = 135, RULE_identifierOrKeyWord = 136, 
		RULE_reservedWord = 137, RULE_keyword = 138, RULE_getter = 139, RULE_setter = 140, 
		RULE_eos = 141;
	public static readonly string[] ruleNames = {
		"initializer", "bindingPattern", "typeParameters", "typeParameterList", 
		"typeParameter", "constraint", "typeArguments", "typeArgumentList", "typeArgument", 
		"type_", "unionOrIntersectionOrPrimaryType", "primaryType", "predefinedType", 
		"typeReference", "nestedTypeGeneric", "typeGeneric", "typeIncludeGeneric", 
		"typeName", "objectType", "typeBody", "typeMemberList", "typeMember", 
		"arrayType", "tupleType", "tupleElementTypes", "functionType", "constructorType", 
		"typeQuery", "typeQueryExpression", "propertySignatur", "typeAnnotation", 
		"callSignature", "parameterList", "requiredParameterList", "parameter", 
		"optionalParameter", "restParameter", "requiredParameter", "accessibilityModifier", 
		"identifierOrPattern", "constructSignature", "indexSignature", "methodSignature", 
		"typeAliasDeclaration", "constructorDeclaration", "interfaceDeclaration", 
		"interfaceExtendsClause", "classOrInterfaceTypeList", "enumDeclaration", 
		"enumBody", "enumMemberList", "enumMember", "namespaceDeclaration", "namespaceName", 
		"importAliasDeclaration", "decoratorList", "decorator", "decoratorMemberExpression", 
		"decoratorCallExpression", "program", "sourceElement", "statement", "block", 
		"statementList", "abstractDeclaration", "importStatement", "fromBlock", 
		"multipleImportStatement", "exportStatement", "variableStatement", "variableDeclarationList", 
		"variableDeclaration", "emptyStatement", "expressionStatement", "ifStatement", 
		"iterationStatement", "varModifier", "continueStatement", "breakStatement", 
		"returnStatement", "yieldStatement", "withStatement", "switchStatement", 
		"caseBlock", "caseClauses", "caseClause", "defaultClause", "labelledStatement", 
		"throwStatement", "tryStatement", "catchProduction", "finallyProduction", 
		"debuggerStatement", "functionDeclaration", "classDeclaration", "classHeritage", 
		"classTail", "classExtendsClause", "implementsClause", "classElement", 
		"propertyMemberDeclaration", "propertyMemberBase", "indexMemberDeclaration", 
		"generatorMethod", "generatorFunctionDeclaration", "generatorBlock", "generatorDefinition", 
		"iteratorBlock", "iteratorDefinition", "formalParameterList", "formalParameterArg", 
		"lastFormalParameterArg", "functionBody", "sourceElements", "arrayLiteral", 
		"elementList", "arrayElement", "objectLiteral", "propertyAssignment", 
		"getAccessor", "setAccessor", "propertyName", "arguments", "argumentList", 
		"argument", "expressionSequence", "functionExpressionDeclaration", "singleExpression", 
		"asExpression", "arrowFunctionDeclaration", "arrowFunctionParameters", 
		"arrowFunctionBody", "assignmentOperator", "literal", "numericLiteral", 
		"identifierName", "identifierOrKeyWord", "reservedWord", "keyword", "getter", 
		"setter", "eos"
	};

	private static readonly string[] _LiteralNames = {
		null, null, null, null, "'['", "']'", "'('", "')'", "'{'", "'}'", "';'", 
		"','", "'='", "'?'", "':'", "'...'", "'.'", "'++'", "'--'", "'+'", "'-'", 
		"'~'", "'!'", "'*'", "'/'", "'%'", "'>>'", "'<<'", "'>>>'", "'<'", "'>'", 
		"'<='", "'>='", "'=='", "'!='", "'==='", "'!=='", "'&'", "'^'", "'|'", 
		"'&&'", "'||'", "'*='", "'/='", "'%='", "'+='", "'-='", "'<<='", "'>>='", 
		"'>>>='", "'&='", "'^='", "'|='", "'=>'", "'null'", null, null, null, 
		null, null, null, "'break'", "'do'", "'instanceof'", "'typeof'", "'case'", 
		"'else'", "'new'", "'var'", "'catch'", "'finally'", "'return'", "'void'", 
		"'continue'", "'for'", "'switch'", "'while'", "'debugger'", "'function'", 
		"'this'", "'with'", "'default'", "'if'", "'throw'", "'delete'", "'in'", 
		"'try'", "'as'", "'from'", "'readonly'", "'async'", "'class'", "'enum'", 
		"'extends'", "'super'", "'const'", "'export'", "'import'", "'implements'", 
		"'let'", "'private'", "'public'", "'interface'", "'package'", "'protected'", 
		"'static'", "'yield'", "'any'", "'number'", "'boolean'", "'string'", "'symbol'", 
		"'type'", "'get'", "'set'", "'constructor'", "'namespace'", "'require'", 
		"'module'", "'declare'", "'abstract'", "'is'", "'@'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "MultiLineComment", "SingleLineComment", "RegularExpressionLiteral", 
		"OpenBracket", "CloseBracket", "OpenParen", "CloseParen", "OpenBrace", 
		"CloseBrace", "SemiColon", "Comma", "Assign", "QuestionMark", "Colon", 
		"Ellipsis", "Dot", "PlusPlus", "MinusMinus", "Plus", "Minus", "BitNot", 
		"Not", "Multiply", "Divide", "Modulus", "RightShiftArithmetic", "LeftShiftArithmetic", 
		"RightShiftLogical", "LessThan", "MoreThan", "LessThanEquals", "GreaterThanEquals", 
		"Equals_", "NotEquals", "IdentityEquals", "IdentityNotEquals", "BitAnd", 
		"BitXOr", "BitOr", "And", "Or", "MultiplyAssign", "DivideAssign", "ModulusAssign", 
		"PlusAssign", "MinusAssign", "LeftShiftArithmeticAssign", "RightShiftArithmeticAssign", 
		"RightShiftLogicalAssign", "BitAndAssign", "BitXorAssign", "BitOrAssign", 
		"ARROW", "NullLiteral", "BooleanLiteral", "DecimalLiteral", "HexIntegerLiteral", 
		"OctalIntegerLiteral", "OctalIntegerLiteral2", "BinaryIntegerLiteral", 
		"Break", "Do", "Instanceof", "Typeof", "Case", "Else", "New", "Var", "Catch", 
		"Finally", "Return", "Void", "Continue", "For", "Switch", "While", "Debugger", 
		"Function", "This", "With", "Default", "If", "Throw", "Delete", "In", 
		"Try", "As", "From", "ReadOnly", "Async", "Class", "Enum", "Extends", 
		"Super", "Const", "Export", "Import", "Implements", "Let", "Private", 
		"Public", "Interface", "Package", "Protected", "Static", "Yield", "Any", 
		"Number", "Boolean", "String", "Symbol", "TypeAlias", "Get", "Set", "Constructor", 
		"Namespace", "Require", "Module", "Declare", "Abstract", "Is", "At", "Identifier", 
		"StringLiteral", "TemplateStringLiteral", "WhiteSpaces", "LineTerminator", 
		"HtmlComment", "CDataComment", "UnexpectedCharacter"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "TypeScriptParser.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static TypeScriptParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public TypeScriptParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public TypeScriptParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class InitializerContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Assign() { return GetToken(TypeScriptParser.Assign, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SingleExpressionContext singleExpression() {
			return GetRuleContext<SingleExpressionContext>(0);
		}
		public InitializerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_initializer; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.EnterInitializer(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.ExitInitializer(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypeScriptParserVisitor<TResult> typedVisitor = visitor as ITypeScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInitializer(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InitializerContext initializer() {
		InitializerContext _localctx = new InitializerContext(Context, State);
		EnterRule(_localctx, 0, RULE_initializer);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 284;
			Match(Assign);
			State = 285;
			singleExpression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BindingPatternContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ArrayLiteralContext arrayLiteral() {
			return GetRuleContext<ArrayLiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ObjectLiteralContext objectLiteral() {
			return GetRuleContext<ObjectLiteralContext>(0);
		}
		public BindingPatternContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_bindingPattern; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.EnterBindingPattern(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.ExitBindingPattern(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypeScriptParserVisitor<TResult> typedVisitor = visitor as ITypeScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBindingPattern(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BindingPatternContext bindingPattern() {
		BindingPatternContext _localctx = new BindingPatternContext(Context, State);
		EnterRule(_localctx, 2, RULE_bindingPattern);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 289;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case OpenBracket:
				{
				State = 287;
				arrayLiteral();
				}
				break;
			case OpenBrace:
				{
				State = 288;
				objectLiteral();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeParametersContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LessThan() { return GetToken(TypeScriptParser.LessThan, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MoreThan() { return GetToken(TypeScriptParser.MoreThan, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeParameterListContext typeParameterList() {
			return GetRuleContext<TypeParameterListContext>(0);
		}
		public TypeParametersContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeParameters; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.EnterTypeParameters(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.ExitTypeParameters(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypeScriptParserVisitor<TResult> typedVisitor = visitor as ITypeScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeParameters(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeParametersContext typeParameters() {
		TypeParametersContext _localctx = new TypeParametersContext(Context, State);
		EnterRule(_localctx, 4, RULE_typeParameters);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 291;
			Match(LessThan);
			State = 293;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LessThan || _la==Identifier) {
				{
				State = 292;
				typeParameterList();
				}
			}

			State = 295;
			Match(MoreThan);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeParameterListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypeParameterContext[] typeParameter() {
			return GetRuleContexts<TypeParameterContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeParameterContext typeParameter(int i) {
			return GetRuleContext<TypeParameterContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Comma() { return GetTokens(TypeScriptParser.Comma); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comma(int i) {
			return GetToken(TypeScriptParser.Comma, i);
		}
		public TypeParameterListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeParameterList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.EnterTypeParameterList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.ExitTypeParameterList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypeScriptParserVisitor<TResult> typedVisitor = visitor as ITypeScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeParameterList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeParameterListContext typeParameterList() {
		TypeParameterListContext _localctx = new TypeParameterListContext(Context, State);
		EnterRule(_localctx, 6, RULE_typeParameterList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 297;
			typeParameter();
			State = 302;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==Comma) {
				{
				{
				State = 298;
				Match(Comma);
				State = 299;
				typeParameter();
				}
				}
				State = 304;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeParameterContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(TypeScriptParser.Identifier, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ConstraintContext constraint() {
			return GetRuleContext<ConstraintContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeParametersContext typeParameters() {
			return GetRuleContext<TypeParametersContext>(0);
		}
		public TypeParameterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeParameter; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.EnterTypeParameter(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.ExitTypeParameter(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypeScriptParserVisitor<TResult> typedVisitor = visitor as ITypeScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeParameter(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeParameterContext typeParameter() {
		TypeParameterContext _localctx = new TypeParameterContext(Context, State);
		EnterRule(_localctx, 8, RULE_typeParameter);
		int _la;
		try {
			State = 310;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case Identifier:
				EnterOuterAlt(_localctx, 1);
				{
				State = 305;
				Match(Identifier);
				State = 307;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==Extends) {
					{
					State = 306;
					constraint();
					}
				}

				}
				break;
			case LessThan:
				EnterOuterAlt(_localctx, 2);
				{
				State = 309;
				typeParameters();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConstraintContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Extends() { return GetToken(TypeScriptParser.Extends, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Type_Context type_() {
			return GetRuleContext<Type_Context>(0);
		}
		public ConstraintContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constraint; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.EnterConstraint(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.ExitConstraint(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypeScriptParserVisitor<TResult> typedVisitor = visitor as ITypeScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConstraint(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConstraintContext constraint() {
		ConstraintContext _localctx = new ConstraintContext(Context, State);
		EnterRule(_localctx, 10, RULE_constraint);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 312;
			Match(Extends);
			State = 313;
			type_();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeArgumentsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LessThan() { return GetToken(TypeScriptParser.LessThan, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MoreThan() { return GetToken(TypeScriptParser.MoreThan, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeArgumentListContext typeArgumentList() {
			return GetRuleContext<TypeArgumentListContext>(0);
		}
		public TypeArgumentsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeArguments; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.EnterTypeArguments(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.ExitTypeArguments(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypeScriptParserVisitor<TResult> typedVisitor = visitor as ITypeScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeArguments(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeArgumentsContext typeArguments() {
		TypeArgumentsContext _localctx = new TypeArgumentsContext(Context, State);
		EnterRule(_localctx, 12, RULE_typeArguments);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 315;
			Match(LessThan);
			State = 317;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << OpenBracket) | (1L << OpenParen) | (1L << OpenBrace) | (1L << LessThan))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (Typeof - 64)) | (1L << (New - 64)) | (1L << (Void - 64)) | (1L << (This - 64)) | (1L << (Any - 64)) | (1L << (Number - 64)) | (1L << (Boolean - 64)) | (1L << (String - 64)) | (1L << (Symbol - 64)) | (1L << (Identifier - 64)) | (1L << (StringLiteral - 64)))) != 0)) {
				{
				State = 316;
				typeArgumentList();
				}
			}

			State = 319;
			Match(MoreThan);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeArgumentListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypeArgumentContext[] typeArgument() {
			return GetRuleContexts<TypeArgumentContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeArgumentContext typeArgument(int i) {
			return GetRuleContext<TypeArgumentContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Comma() { return GetTokens(TypeScriptParser.Comma); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comma(int i) {
			return GetToken(TypeScriptParser.Comma, i);
		}
		public TypeArgumentListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeArgumentList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.EnterTypeArgumentList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.ExitTypeArgumentList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypeScriptParserVisitor<TResult> typedVisitor = visitor as ITypeScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeArgumentList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeArgumentListContext typeArgumentList() {
		TypeArgumentListContext _localctx = new TypeArgumentListContext(Context, State);
		EnterRule(_localctx, 14, RULE_typeArgumentList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 321;
			typeArgument();
			State = 326;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==Comma) {
				{
				{
				State = 322;
				Match(Comma);
				State = 323;
				typeArgument();
				}
				}
				State = 328;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeArgumentContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Type_Context type_() {
			return GetRuleContext<Type_Context>(0);
		}
		public TypeArgumentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeArgument; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.EnterTypeArgument(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.ExitTypeArgument(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypeScriptParserVisitor<TResult> typedVisitor = visitor as ITypeScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeArgument(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeArgumentContext typeArgument() {
		TypeArgumentContext _localctx = new TypeArgumentContext(Context, State);
		EnterRule(_localctx, 16, RULE_typeArgument);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 329;
			type_();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Type_Context : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public UnionOrIntersectionOrPrimaryTypeContext unionOrIntersectionOrPrimaryType() {
			return GetRuleContext<UnionOrIntersectionOrPrimaryTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionTypeContext functionType() {
			return GetRuleContext<FunctionTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ConstructorTypeContext constructorType() {
			return GetRuleContext<ConstructorTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeGenericContext typeGeneric() {
			return GetRuleContext<TypeGenericContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode StringLiteral() { return GetToken(TypeScriptParser.StringLiteral, 0); }
		public Type_Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type_; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.EnterType_(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.ExitType_(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypeScriptParserVisitor<TResult> typedVisitor = visitor as ITypeScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitType_(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Type_Context type_() {
		Type_Context _localctx = new Type_Context(Context, State);
		EnterRule(_localctx, 18, RULE_type_);
		try {
			State = 336;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,7,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 331;
				unionOrIntersectionOrPrimaryType(0);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 332;
				functionType();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 333;
				constructorType();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 334;
				typeGeneric();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 335;
				Match(StringLiteral);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UnionOrIntersectionOrPrimaryTypeContext : ParserRuleContext {
		public UnionOrIntersectionOrPrimaryTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unionOrIntersectionOrPrimaryType; } }
	 
		public UnionOrIntersectionOrPrimaryTypeContext() { }
		public virtual void CopyFrom(UnionOrIntersectionOrPrimaryTypeContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class IntersectionContext : UnionOrIntersectionOrPrimaryTypeContext {
		[System.Diagnostics.DebuggerNonUserCode] public UnionOrIntersectionOrPrimaryTypeContext[] unionOrIntersectionOrPrimaryType() {
			return GetRuleContexts<UnionOrIntersectionOrPrimaryTypeContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public UnionOrIntersectionOrPrimaryTypeContext unionOrIntersectionOrPrimaryType(int i) {
			return GetRuleContext<UnionOrIntersectionOrPrimaryTypeContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BitAnd() { return GetToken(TypeScriptParser.BitAnd, 0); }
		public IntersectionContext(UnionOrIntersectionOrPrimaryTypeContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.EnterIntersection(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.ExitIntersection(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypeScriptParserVisitor<TResult> typedVisitor = visitor as ITypeScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIntersection(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class PrimaryContext : UnionOrIntersectionOrPrimaryTypeContext {
		[System.Diagnostics.DebuggerNonUserCode] public PrimaryTypeContext primaryType() {
			return GetRuleContext<PrimaryTypeContext>(0);
		}
		public PrimaryContext(UnionOrIntersectionOrPrimaryTypeContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.EnterPrimary(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.ExitPrimary(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypeScriptParserVisitor<TResult> typedVisitor = visitor as ITypeScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrimary(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class UnionContext : UnionOrIntersectionOrPrimaryTypeContext {
		[System.Diagnostics.DebuggerNonUserCode] public UnionOrIntersectionOrPrimaryTypeContext[] unionOrIntersectionOrPrimaryType() {
			return GetRuleContexts<UnionOrIntersectionOrPrimaryTypeContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public UnionOrIntersectionOrPrimaryTypeContext unionOrIntersectionOrPrimaryType(int i) {
			return GetRuleContext<UnionOrIntersectionOrPrimaryTypeContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BitOr() { return GetToken(TypeScriptParser.BitOr, 0); }
		public UnionContext(UnionOrIntersectionOrPrimaryTypeContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.EnterUnion(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.ExitUnion(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypeScriptParserVisitor<TResult> typedVisitor = visitor as ITypeScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnion(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UnionOrIntersectionOrPrimaryTypeContext unionOrIntersectionOrPrimaryType() {
		return unionOrIntersectionOrPrimaryType(0);
	}

	private UnionOrIntersectionOrPrimaryTypeContext unionOrIntersectionOrPrimaryType(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		UnionOrIntersectionOrPrimaryTypeContext _localctx = new UnionOrIntersectionOrPrimaryTypeContext(Context, _parentState);
		UnionOrIntersectionOrPrimaryTypeContext _prevctx = _localctx;
		int _startState = 20;
		EnterRecursionRule(_localctx, 20, RULE_unionOrIntersectionOrPrimaryType, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			_localctx = new PrimaryContext(_localctx);
			Context = _localctx;
			_prevctx = _localctx;

			State = 339;
			primaryType(0);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 349;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,9,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 347;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,8,Context) ) {
					case 1:
						{
						_localctx = new UnionContext(new UnionOrIntersectionOrPrimaryTypeContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_unionOrIntersectionOrPrimaryType);
						State = 341;
						if (!(Precpred(Context, 3))) throw new FailedPredicateException(this, "Precpred(Context, 3)");
						State = 342;
						Match(BitOr);
						State = 343;
						unionOrIntersectionOrPrimaryType(4);
						}
						break;
					case 2:
						{
						_localctx = new IntersectionContext(new UnionOrIntersectionOrPrimaryTypeContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_unionOrIntersectionOrPrimaryType);
						State = 344;
						if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
						State = 345;
						Match(BitAnd);
						State = 346;
						unionOrIntersectionOrPrimaryType(3);
						}
						break;
					}
					} 
				}
				State = 351;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,9,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class PrimaryTypeContext : ParserRuleContext {
		public PrimaryTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_primaryType; } }
	 
		public PrimaryTypeContext() { }
		public virtual void CopyFrom(PrimaryTypeContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class RedefinitionOfTypeContext : PrimaryTypeContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypeReferenceContext typeReference() {
			return GetRuleContext<TypeReferenceContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Is() { return GetToken(TypeScriptParser.Is, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public PrimaryTypeContext primaryType() {
			return GetRuleContext<PrimaryTypeContext>(0);
		}
		public RedefinitionOfTypeContext(PrimaryTypeContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.EnterRedefinitionOfType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.ExitRedefinitionOfType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypeScriptParserVisitor<TResult> typedVisitor = visitor as ITypeScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRedefinitionOfType(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class PredefinedPrimTypeContext : PrimaryTypeContext {
		[System.Diagnostics.DebuggerNonUserCode] public PredefinedTypeContext predefinedType() {
			return GetRuleContext<PredefinedTypeContext>(0);
		}
		public PredefinedPrimTypeContext(PrimaryTypeContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.EnterPredefinedPrimType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.ExitPredefinedPrimType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypeScriptParserVisitor<TResult> typedVisitor = visitor as ITypeScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPredefinedPrimType(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ArrayPrimTypeContext : PrimaryTypeContext {
		[System.Diagnostics.DebuggerNonUserCode] public PrimaryTypeContext primaryType() {
			return GetRuleContext<PrimaryTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OpenBracket() { return GetToken(TypeScriptParser.OpenBracket, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CloseBracket() { return GetToken(TypeScriptParser.CloseBracket, 0); }
		public ArrayPrimTypeContext(PrimaryTypeContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.EnterArrayPrimType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.ExitArrayPrimType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypeScriptParserVisitor<TResult> typedVisitor = visitor as ITypeScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArrayPrimType(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ParenthesizedPrimTypeContext : PrimaryTypeContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OpenParen() { return GetToken(TypeScriptParser.OpenParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Type_Context type_() {
			return GetRuleContext<Type_Context>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CloseParen() { return GetToken(TypeScriptParser.CloseParen, 0); }
		public ParenthesizedPrimTypeContext(PrimaryTypeContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.EnterParenthesizedPrimType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.ExitParenthesizedPrimType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypeScriptParserVisitor<TResult> typedVisitor = visitor as ITypeScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParenthesizedPrimType(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ThisPrimTypeContext : PrimaryTypeContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode This() { return GetToken(TypeScriptParser.This, 0); }
		public ThisPrimTypeContext(PrimaryTypeContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.EnterThisPrimType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.ExitThisPrimType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypeScriptParserVisitor<TResult> typedVisitor = visitor as ITypeScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitThisPrimType(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class TuplePrimTypeContext : PrimaryTypeContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OpenBracket() { return GetToken(TypeScriptParser.OpenBracket, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TupleElementTypesContext tupleElementTypes() {
			return GetRuleContext<TupleElementTypesContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CloseBracket() { return GetToken(TypeScriptParser.CloseBracket, 0); }
		public TuplePrimTypeContext(PrimaryTypeContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.EnterTuplePrimType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.ExitTuplePrimType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypeScriptParserVisitor<TResult> typedVisitor = visitor as ITypeScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTuplePrimType(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ObjectPrimTypeContext : PrimaryTypeContext {
		[System.Diagnostics.DebuggerNonUserCode] public ObjectTypeContext objectType() {
			return GetRuleContext<ObjectTypeContext>(0);
		}
		public ObjectPrimTypeContext(PrimaryTypeContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.EnterObjectPrimType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.ExitObjectPrimType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypeScriptParserVisitor<TResult> typedVisitor = visitor as ITypeScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitObjectPrimType(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ReferencePrimTypeContext : PrimaryTypeContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypeReferenceContext typeReference() {
			return GetRuleContext<TypeReferenceContext>(0);
		}
		public ReferencePrimTypeContext(PrimaryTypeContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.EnterReferencePrimType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.ExitReferencePrimType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypeScriptParserVisitor<TResult> typedVisitor = visitor as ITypeScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReferencePrimType(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class QueryPrimTypeContext : PrimaryTypeContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypeQueryContext typeQuery() {
			return GetRuleContext<TypeQueryContext>(0);
		}
		public QueryPrimTypeContext(PrimaryTypeContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.EnterQueryPrimType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.ExitQueryPrimType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypeScriptParserVisitor<TResult> typedVisitor = visitor as ITypeScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitQueryPrimType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PrimaryTypeContext primaryType() {
		return primaryType(0);
	}

	private PrimaryTypeContext primaryType(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		PrimaryTypeContext _localctx = new PrimaryTypeContext(Context, _parentState);
		PrimaryTypeContext _prevctx = _localctx;
		int _startState = 22;
		EnterRecursionRule(_localctx, 22, RULE_primaryType, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 370;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,10,Context) ) {
			case 1:
				{
				_localctx = new ParenthesizedPrimTypeContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;

				State = 353;
				Match(OpenParen);
				State = 354;
				type_();
				State = 355;
				Match(CloseParen);
				}
				break;
			case 2:
				{
				_localctx = new PredefinedPrimTypeContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 357;
				predefinedType();
				}
				break;
			case 3:
				{
				_localctx = new ReferencePrimTypeContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 358;
				typeReference();
				}
				break;
			case 4:
				{
				_localctx = new ObjectPrimTypeContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 359;
				objectType();
				}
				break;
			case 5:
				{
				_localctx = new TuplePrimTypeContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 360;
				Match(OpenBracket);
				State = 361;
				tupleElementTypes();
				State = 362;
				Match(CloseBracket);
				}
				break;
			case 6:
				{
				_localctx = new QueryPrimTypeContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 364;
				typeQuery();
				}
				break;
			case 7:
				{
				_localctx = new ThisPrimTypeContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 365;
				Match(This);
				}
				break;
			case 8:
				{
				_localctx = new RedefinitionOfTypeContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 366;
				typeReference();
				State = 367;
				Match(Is);
				State = 368;
				primaryType(1);
				}
				break;
			}
			Context.Stop = TokenStream.LT(-1);
			State = 378;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,11,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new ArrayPrimTypeContext(new PrimaryTypeContext(_parentctx, _parentState));
					PushNewRecursionContext(_localctx, _startState, RULE_primaryType);
					State = 372;
					if (!(Precpred(Context, 5))) throw new FailedPredicateException(this, "Precpred(Context, 5)");
					State = 373;
					if (!(notLineTerminator())) throw new FailedPredicateException(this, "notLineTerminator()");
					State = 374;
					Match(OpenBracket);
					State = 375;
					Match(CloseBracket);
					}
					} 
				}
				State = 380;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,11,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class PredefinedTypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Any() { return GetToken(TypeScriptParser.Any, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Number() { return GetToken(TypeScriptParser.Number, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Boolean() { return GetToken(TypeScriptParser.Boolean, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode String() { return GetToken(TypeScriptParser.String, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Symbol() { return GetToken(TypeScriptParser.Symbol, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Void() { return GetToken(TypeScriptParser.Void, 0); }
		public PredefinedTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_predefinedType; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.EnterPredefinedType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.ExitPredefinedType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypeScriptParserVisitor<TResult> typedVisitor = visitor as ITypeScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPredefinedType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PredefinedTypeContext predefinedType() {
		PredefinedTypeContext _localctx = new PredefinedTypeContext(Context, State);
		EnterRule(_localctx, 24, RULE_predefinedType);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 381;
			_la = TokenStream.LA(1);
			if ( !(((((_la - 72)) & ~0x3f) == 0 && ((1L << (_la - 72)) & ((1L << (Void - 72)) | (1L << (Any - 72)) | (1L << (Number - 72)) | (1L << (Boolean - 72)) | (1L << (String - 72)) | (1L << (Symbol - 72)))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeReferenceContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypeNameContext typeName() {
			return GetRuleContext<TypeNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NestedTypeGenericContext nestedTypeGeneric() {
			return GetRuleContext<NestedTypeGenericContext>(0);
		}
		public TypeReferenceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeReference; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.EnterTypeReference(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.ExitTypeReference(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypeScriptParserVisitor<TResult> typedVisitor = visitor as ITypeScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeReference(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeReferenceContext typeReference() {
		TypeReferenceContext _localctx = new TypeReferenceContext(Context, State);
		EnterRule(_localctx, 26, RULE_typeReference);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 383;
			typeName();
			State = 385;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,12,Context) ) {
			case 1:
				{
				State = 384;
				nestedTypeGeneric();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NestedTypeGenericContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypeIncludeGenericContext typeIncludeGeneric() {
			return GetRuleContext<TypeIncludeGenericContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeGenericContext typeGeneric() {
			return GetRuleContext<TypeGenericContext>(0);
		}
		public NestedTypeGenericContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_nestedTypeGeneric; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.EnterNestedTypeGeneric(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.ExitNestedTypeGeneric(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypeScriptParserVisitor<TResult> typedVisitor = visitor as ITypeScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNestedTypeGeneric(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NestedTypeGenericContext nestedTypeGeneric() {
		NestedTypeGenericContext _localctx = new NestedTypeGenericContext(Context, State);
		EnterRule(_localctx, 28, RULE_nestedTypeGeneric);
		try {
			State = 389;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,13,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 387;
				typeIncludeGeneric();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 388;
				typeGeneric();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeGenericContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LessThan() { return GetToken(TypeScriptParser.LessThan, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeArgumentListContext typeArgumentList() {
			return GetRuleContext<TypeArgumentListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MoreThan() { return GetToken(TypeScriptParser.MoreThan, 0); }
		public TypeGenericContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeGeneric; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.EnterTypeGeneric(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.ExitTypeGeneric(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypeScriptParserVisitor<TResult> typedVisitor = visitor as ITypeScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeGeneric(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeGenericContext typeGeneric() {
		TypeGenericContext _localctx = new TypeGenericContext(Context, State);
		EnterRule(_localctx, 30, RULE_typeGeneric);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 391;
			Match(LessThan);
			State = 392;
			typeArgumentList();
			State = 393;
			Match(MoreThan);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeIncludeGenericContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] LessThan() { return GetTokens(TypeScriptParser.LessThan); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LessThan(int i) {
			return GetToken(TypeScriptParser.LessThan, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeArgumentListContext[] typeArgumentList() {
			return GetRuleContexts<TypeArgumentListContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeArgumentListContext typeArgumentList(int i) {
			return GetRuleContext<TypeArgumentListContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] MoreThan() { return GetTokens(TypeScriptParser.MoreThan); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MoreThan(int i) {
			return GetToken(TypeScriptParser.MoreThan, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BindingPatternContext bindingPattern() {
			return GetRuleContext<BindingPatternContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RightShiftArithmetic() { return GetToken(TypeScriptParser.RightShiftArithmetic, 0); }
		public TypeIncludeGenericContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeIncludeGeneric; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.EnterTypeIncludeGeneric(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.ExitTypeIncludeGeneric(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypeScriptParserVisitor<TResult> typedVisitor = visitor as ITypeScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeIncludeGeneric(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeIncludeGenericContext typeIncludeGeneric() {
		TypeIncludeGenericContext _localctx = new TypeIncludeGenericContext(Context, State);
		EnterRule(_localctx, 32, RULE_typeIncludeGeneric);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 395;
			Match(LessThan);
			State = 396;
			typeArgumentList();
			State = 397;
			Match(LessThan);
			State = 398;
			typeArgumentList();
			State = 404;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case MoreThan:
				{
				State = 399;
				Match(MoreThan);
				State = 400;
				bindingPattern();
				State = 401;
				Match(MoreThan);
				}
				break;
			case RightShiftArithmetic:
				{
				State = 403;
				Match(RightShiftArithmetic);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(TypeScriptParser.Identifier, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NamespaceNameContext namespaceName() {
			return GetRuleContext<NamespaceNameContext>(0);
		}
		public TypeNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeName; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.EnterTypeName(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.ExitTypeName(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypeScriptParserVisitor<TResult> typedVisitor = visitor as ITypeScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeNameContext typeName() {
		TypeNameContext _localctx = new TypeNameContext(Context, State);
		EnterRule(_localctx, 34, RULE_typeName);
		try {
			State = 408;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,15,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 406;
				Match(Identifier);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 407;
				namespaceName();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ObjectTypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OpenBrace() { return GetToken(TypeScriptParser.OpenBrace, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CloseBrace() { return GetToken(TypeScriptParser.CloseBrace, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeBodyContext typeBody() {
			return GetRuleContext<TypeBodyContext>(0);
		}
		public ObjectTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_objectType; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.EnterObjectType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.ExitObjectType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypeScriptParserVisitor<TResult> typedVisitor = visitor as ITypeScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitObjectType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ObjectTypeContext objectType() {
		ObjectTypeContext _localctx = new ObjectTypeContext(Context, State);
		EnterRule(_localctx, 36, RULE_objectType);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 410;
			Match(OpenBrace);
			State = 412;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << OpenBracket) | (1L << OpenParen) | (1L << LessThan) | (1L << NullLiteral) | (1L << BooleanLiteral) | (1L << DecimalLiteral) | (1L << HexIntegerLiteral) | (1L << OctalIntegerLiteral) | (1L << OctalIntegerLiteral2) | (1L << BinaryIntegerLiteral) | (1L << Break) | (1L << Do) | (1L << Instanceof))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (Typeof - 64)) | (1L << (Case - 64)) | (1L << (Else - 64)) | (1L << (New - 64)) | (1L << (Var - 64)) | (1L << (Catch - 64)) | (1L << (Finally - 64)) | (1L << (Return - 64)) | (1L << (Void - 64)) | (1L << (Continue - 64)) | (1L << (For - 64)) | (1L << (Switch - 64)) | (1L << (While - 64)) | (1L << (Debugger - 64)) | (1L << (Function - 64)) | (1L << (This - 64)) | (1L << (With - 64)) | (1L << (Default - 64)) | (1L << (If - 64)) | (1L << (Throw - 64)) | (1L << (Delete - 64)) | (1L << (In - 64)) | (1L << (Try - 64)) | (1L << (From - 64)) | (1L << (ReadOnly - 64)) | (1L << (Async - 64)) | (1L << (Class - 64)) | (1L << (Enum - 64)) | (1L << (Extends - 64)) | (1L << (Super - 64)) | (1L << (Const - 64)) | (1L << (Export - 64)) | (1L << (Import - 64)) | (1L << (Implements - 64)) | (1L << (Let - 64)) | (1L << (Private - 64)) | (1L << (Public - 64)) | (1L << (Interface - 64)) | (1L << (Package - 64)) | (1L << (Protected - 64)) | (1L << (Static - 64)) | (1L << (Yield - 64)) | (1L << (String - 64)) | (1L << (TypeAlias - 64)) | (1L << (Get - 64)) | (1L << (Set - 64)) | (1L << (Require - 64)) | (1L << (Identifier - 64)) | (1L << (StringLiteral - 64)))) != 0)) {
				{
				State = 411;
				typeBody();
				}
			}

			State = 414;
			Match(CloseBrace);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeBodyContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypeMemberListContext typeMemberList() {
			return GetRuleContext<TypeMemberListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SemiColon() { return GetToken(TypeScriptParser.SemiColon, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comma() { return GetToken(TypeScriptParser.Comma, 0); }
		public TypeBodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeBody; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.EnterTypeBody(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.ExitTypeBody(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypeScriptParserVisitor<TResult> typedVisitor = visitor as ITypeScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeBody(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeBodyContext typeBody() {
		TypeBodyContext _localctx = new TypeBodyContext(Context, State);
		EnterRule(_localctx, 38, RULE_typeBody);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 416;
			typeMemberList();
			State = 418;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==SemiColon || _la==Comma) {
				{
				State = 417;
				_la = TokenStream.LA(1);
				if ( !(_la==SemiColon || _la==Comma) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeMemberListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypeMemberContext[] typeMember() {
			return GetRuleContexts<TypeMemberContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeMemberContext typeMember(int i) {
			return GetRuleContext<TypeMemberContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SemiColon() { return GetTokens(TypeScriptParser.SemiColon); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SemiColon(int i) {
			return GetToken(TypeScriptParser.SemiColon, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Comma() { return GetTokens(TypeScriptParser.Comma); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comma(int i) {
			return GetToken(TypeScriptParser.Comma, i);
		}
		public TypeMemberListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeMemberList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.EnterTypeMemberList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.ExitTypeMemberList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypeScriptParserVisitor<TResult> typedVisitor = visitor as ITypeScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeMemberList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeMemberListContext typeMemberList() {
		TypeMemberListContext _localctx = new TypeMemberListContext(Context, State);
		EnterRule(_localctx, 40, RULE_typeMemberList);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 420;
			typeMember();
			State = 425;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,18,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 421;
					_la = TokenStream.LA(1);
					if ( !(_la==SemiColon || _la==Comma) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					State = 422;
					typeMember();
					}
					} 
				}
				State = 427;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,18,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeMemberContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public PropertySignaturContext propertySignatur() {
			return GetRuleContext<PropertySignaturContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CallSignatureContext callSignature() {
			return GetRuleContext<CallSignatureContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ConstructSignatureContext constructSignature() {
			return GetRuleContext<ConstructSignatureContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IndexSignatureContext indexSignature() {
			return GetRuleContext<IndexSignatureContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MethodSignatureContext methodSignature() {
			return GetRuleContext<MethodSignatureContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ARROW() { return GetToken(TypeScriptParser.ARROW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Type_Context type_() {
			return GetRuleContext<Type_Context>(0);
		}
		public TypeMemberContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeMember; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.EnterTypeMember(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.ExitTypeMember(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypeScriptParserVisitor<TResult> typedVisitor = visitor as ITypeScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeMember(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeMemberContext typeMember() {
		TypeMemberContext _localctx = new TypeMemberContext(Context, State);
		EnterRule(_localctx, 42, RULE_typeMember);
		int _la;
		try {
			State = 437;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,20,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 428;
				propertySignatur();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 429;
				callSignature();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 430;
				constructSignature();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 431;
				indexSignature();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 432;
				methodSignature();
				State = 435;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==ARROW) {
					{
					State = 433;
					Match(ARROW);
					State = 434;
					type_();
					}
				}

				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArrayTypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public PrimaryTypeContext primaryType() {
			return GetRuleContext<PrimaryTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OpenBracket() { return GetToken(TypeScriptParser.OpenBracket, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CloseBracket() { return GetToken(TypeScriptParser.CloseBracket, 0); }
		public ArrayTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arrayType; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.EnterArrayType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.ExitArrayType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypeScriptParserVisitor<TResult> typedVisitor = visitor as ITypeScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArrayType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArrayTypeContext arrayType() {
		ArrayTypeContext _localctx = new ArrayTypeContext(Context, State);
		EnterRule(_localctx, 44, RULE_arrayType);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 439;
			primaryType(0);
			State = 440;
			if (!(notLineTerminator())) throw new FailedPredicateException(this, "notLineTerminator()");
			State = 441;
			Match(OpenBracket);
			State = 442;
			Match(CloseBracket);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TupleTypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OpenBracket() { return GetToken(TypeScriptParser.OpenBracket, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TupleElementTypesContext tupleElementTypes() {
			return GetRuleContext<TupleElementTypesContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CloseBracket() { return GetToken(TypeScriptParser.CloseBracket, 0); }
		public TupleTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tupleType; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.EnterTupleType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.ExitTupleType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypeScriptParserVisitor<TResult> typedVisitor = visitor as ITypeScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTupleType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TupleTypeContext tupleType() {
		TupleTypeContext _localctx = new TupleTypeContext(Context, State);
		EnterRule(_localctx, 46, RULE_tupleType);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 444;
			Match(OpenBracket);
			State = 445;
			tupleElementTypes();
			State = 446;
			Match(CloseBracket);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TupleElementTypesContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Type_Context[] type_() {
			return GetRuleContexts<Type_Context>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Type_Context type_(int i) {
			return GetRuleContext<Type_Context>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Comma() { return GetTokens(TypeScriptParser.Comma); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comma(int i) {
			return GetToken(TypeScriptParser.Comma, i);
		}
		public TupleElementTypesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tupleElementTypes; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.EnterTupleElementTypes(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.ExitTupleElementTypes(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypeScriptParserVisitor<TResult> typedVisitor = visitor as ITypeScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTupleElementTypes(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TupleElementTypesContext tupleElementTypes() {
		TupleElementTypesContext _localctx = new TupleElementTypesContext(Context, State);
		EnterRule(_localctx, 48, RULE_tupleElementTypes);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 448;
			type_();
			State = 453;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==Comma) {
				{
				{
				State = 449;
				Match(Comma);
				State = 450;
				type_();
				}
				}
				State = 455;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionTypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OpenParen() { return GetToken(TypeScriptParser.OpenParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CloseParen() { return GetToken(TypeScriptParser.CloseParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ARROW() { return GetToken(TypeScriptParser.ARROW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Type_Context type_() {
			return GetRuleContext<Type_Context>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeParametersContext typeParameters() {
			return GetRuleContext<TypeParametersContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ParameterListContext parameterList() {
			return GetRuleContext<ParameterListContext>(0);
		}
		public FunctionTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionType; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.EnterFunctionType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.ExitFunctionType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypeScriptParserVisitor<TResult> typedVisitor = visitor as ITypeScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionTypeContext functionType() {
		FunctionTypeContext _localctx = new FunctionTypeContext(Context, State);
		EnterRule(_localctx, 50, RULE_functionType);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 457;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LessThan) {
				{
				State = 456;
				typeParameters();
				}
			}

			State = 459;
			Match(OpenParen);
			State = 461;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << OpenBracket) | (1L << OpenBrace) | (1L << Ellipsis) | (1L << NullLiteral) | (1L << BooleanLiteral) | (1L << Break) | (1L << Do) | (1L << Instanceof))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (Typeof - 64)) | (1L << (Case - 64)) | (1L << (Else - 64)) | (1L << (New - 64)) | (1L << (Var - 64)) | (1L << (Catch - 64)) | (1L << (Finally - 64)) | (1L << (Return - 64)) | (1L << (Void - 64)) | (1L << (Continue - 64)) | (1L << (For - 64)) | (1L << (Switch - 64)) | (1L << (While - 64)) | (1L << (Debugger - 64)) | (1L << (Function - 64)) | (1L << (This - 64)) | (1L << (With - 64)) | (1L << (Default - 64)) | (1L << (If - 64)) | (1L << (Throw - 64)) | (1L << (Delete - 64)) | (1L << (In - 64)) | (1L << (Try - 64)) | (1L << (From - 64)) | (1L << (ReadOnly - 64)) | (1L << (Async - 64)) | (1L << (Class - 64)) | (1L << (Enum - 64)) | (1L << (Extends - 64)) | (1L << (Super - 64)) | (1L << (Const - 64)) | (1L << (Export - 64)) | (1L << (Import - 64)) | (1L << (Implements - 64)) | (1L << (Let - 64)) | (1L << (Private - 64)) | (1L << (Public - 64)) | (1L << (Interface - 64)) | (1L << (Package - 64)) | (1L << (Protected - 64)) | (1L << (Static - 64)) | (1L << (Yield - 64)) | (1L << (String - 64)) | (1L << (TypeAlias - 64)) | (1L << (Get - 64)) | (1L << (Set - 64)) | (1L << (Require - 64)) | (1L << (At - 64)) | (1L << (Identifier - 64)))) != 0)) {
				{
				State = 460;
				parameterList();
				}
			}

			State = 463;
			Match(CloseParen);
			State = 464;
			Match(ARROW);
			State = 465;
			type_();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConstructorTypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode New() { return GetToken(TypeScriptParser.New, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OpenParen() { return GetToken(TypeScriptParser.OpenParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CloseParen() { return GetToken(TypeScriptParser.CloseParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ARROW() { return GetToken(TypeScriptParser.ARROW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Type_Context type_() {
			return GetRuleContext<Type_Context>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeParametersContext typeParameters() {
			return GetRuleContext<TypeParametersContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ParameterListContext parameterList() {
			return GetRuleContext<ParameterListContext>(0);
		}
		public ConstructorTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constructorType; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.EnterConstructorType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.ExitConstructorType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypeScriptParserVisitor<TResult> typedVisitor = visitor as ITypeScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConstructorType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConstructorTypeContext constructorType() {
		ConstructorTypeContext _localctx = new ConstructorTypeContext(Context, State);
		EnterRule(_localctx, 52, RULE_constructorType);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 467;
			Match(New);
			State = 469;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LessThan) {
				{
				State = 468;
				typeParameters();
				}
			}

			State = 471;
			Match(OpenParen);
			State = 473;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << OpenBracket) | (1L << OpenBrace) | (1L << Ellipsis) | (1L << NullLiteral) | (1L << BooleanLiteral) | (1L << Break) | (1L << Do) | (1L << Instanceof))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (Typeof - 64)) | (1L << (Case - 64)) | (1L << (Else - 64)) | (1L << (New - 64)) | (1L << (Var - 64)) | (1L << (Catch - 64)) | (1L << (Finally - 64)) | (1L << (Return - 64)) | (1L << (Void - 64)) | (1L << (Continue - 64)) | (1L << (For - 64)) | (1L << (Switch - 64)) | (1L << (While - 64)) | (1L << (Debugger - 64)) | (1L << (Function - 64)) | (1L << (This - 64)) | (1L << (With - 64)) | (1L << (Default - 64)) | (1L << (If - 64)) | (1L << (Throw - 64)) | (1L << (Delete - 64)) | (1L << (In - 64)) | (1L << (Try - 64)) | (1L << (From - 64)) | (1L << (ReadOnly - 64)) | (1L << (Async - 64)) | (1L << (Class - 64)) | (1L << (Enum - 64)) | (1L << (Extends - 64)) | (1L << (Super - 64)) | (1L << (Const - 64)) | (1L << (Export - 64)) | (1L << (Import - 64)) | (1L << (Implements - 64)) | (1L << (Let - 64)) | (1L << (Private - 64)) | (1L << (Public - 64)) | (1L << (Interface - 64)) | (1L << (Package - 64)) | (1L << (Protected - 64)) | (1L << (Static - 64)) | (1L << (Yield - 64)) | (1L << (String - 64)) | (1L << (TypeAlias - 64)) | (1L << (Get - 64)) | (1L << (Set - 64)) | (1L << (Require - 64)) | (1L << (At - 64)) | (1L << (Identifier - 64)))) != 0)) {
				{
				State = 472;
				parameterList();
				}
			}

			State = 475;
			Match(CloseParen);
			State = 476;
			Match(ARROW);
			State = 477;
			type_();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeQueryContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Typeof() { return GetToken(TypeScriptParser.Typeof, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeQueryExpressionContext typeQueryExpression() {
			return GetRuleContext<TypeQueryExpressionContext>(0);
		}
		public TypeQueryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeQuery; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.EnterTypeQuery(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.ExitTypeQuery(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypeScriptParserVisitor<TResult> typedVisitor = visitor as ITypeScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeQuery(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeQueryContext typeQuery() {
		TypeQueryContext _localctx = new TypeQueryContext(Context, State);
		EnterRule(_localctx, 54, RULE_typeQuery);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 479;
			Match(Typeof);
			State = 480;
			typeQueryExpression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeQueryExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(TypeScriptParser.Identifier, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierNameContext[] identifierName() {
			return GetRuleContexts<IdentifierNameContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierNameContext identifierName(int i) {
			return GetRuleContext<IdentifierNameContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Dot() { return GetTokens(TypeScriptParser.Dot); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Dot(int i) {
			return GetToken(TypeScriptParser.Dot, i);
		}
		public TypeQueryExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeQueryExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.EnterTypeQueryExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.ExitTypeQueryExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypeScriptParserVisitor<TResult> typedVisitor = visitor as ITypeScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeQueryExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeQueryExpressionContext typeQueryExpression() {
		TypeQueryExpressionContext _localctx = new TypeQueryExpressionContext(Context, State);
		EnterRule(_localctx, 56, RULE_typeQueryExpression);
		try {
			int _alt;
			State = 492;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,27,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 482;
				Match(Identifier);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 486;
				ErrorHandler.Sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						State = 483;
						identifierName();
						State = 484;
						Match(Dot);
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 488;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,26,Context);
				} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
				State = 490;
				identifierName();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PropertySignaturContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public PropertyNameContext propertyName() {
			return GetRuleContext<PropertyNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ReadOnly() { return GetToken(TypeScriptParser.ReadOnly, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode QuestionMark() { return GetToken(TypeScriptParser.QuestionMark, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeAnnotationContext typeAnnotation() {
			return GetRuleContext<TypeAnnotationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ARROW() { return GetToken(TypeScriptParser.ARROW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Type_Context type_() {
			return GetRuleContext<Type_Context>(0);
		}
		public PropertySignaturContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_propertySignatur; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.EnterPropertySignatur(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.ExitPropertySignatur(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypeScriptParserVisitor<TResult> typedVisitor = visitor as ITypeScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPropertySignatur(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PropertySignaturContext propertySignatur() {
		PropertySignaturContext _localctx = new PropertySignaturContext(Context, State);
		EnterRule(_localctx, 58, RULE_propertySignatur);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 495;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,28,Context) ) {
			case 1:
				{
				State = 494;
				Match(ReadOnly);
				}
				break;
			}
			State = 497;
			propertyName();
			State = 499;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==QuestionMark) {
				{
				State = 498;
				Match(QuestionMark);
				}
			}

			State = 502;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Colon) {
				{
				State = 501;
				typeAnnotation();
				}
			}

			State = 506;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ARROW) {
				{
				State = 504;
				Match(ARROW);
				State = 505;
				type_();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeAnnotationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Colon() { return GetToken(TypeScriptParser.Colon, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Type_Context type_() {
			return GetRuleContext<Type_Context>(0);
		}
		public TypeAnnotationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeAnnotation; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.EnterTypeAnnotation(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.ExitTypeAnnotation(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypeScriptParserVisitor<TResult> typedVisitor = visitor as ITypeScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeAnnotation(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeAnnotationContext typeAnnotation() {
		TypeAnnotationContext _localctx = new TypeAnnotationContext(Context, State);
		EnterRule(_localctx, 60, RULE_typeAnnotation);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 508;
			Match(Colon);
			State = 509;
			type_();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CallSignatureContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OpenParen() { return GetToken(TypeScriptParser.OpenParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CloseParen() { return GetToken(TypeScriptParser.CloseParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeParametersContext typeParameters() {
			return GetRuleContext<TypeParametersContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ParameterListContext parameterList() {
			return GetRuleContext<ParameterListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeAnnotationContext typeAnnotation() {
			return GetRuleContext<TypeAnnotationContext>(0);
		}
		public CallSignatureContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_callSignature; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.EnterCallSignature(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.ExitCallSignature(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypeScriptParserVisitor<TResult> typedVisitor = visitor as ITypeScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCallSignature(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CallSignatureContext callSignature() {
		CallSignatureContext _localctx = new CallSignatureContext(Context, State);
		EnterRule(_localctx, 62, RULE_callSignature);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 512;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LessThan) {
				{
				State = 511;
				typeParameters();
				}
			}

			State = 514;
			Match(OpenParen);
			State = 516;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << OpenBracket) | (1L << OpenBrace) | (1L << Ellipsis) | (1L << NullLiteral) | (1L << BooleanLiteral) | (1L << Break) | (1L << Do) | (1L << Instanceof))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (Typeof - 64)) | (1L << (Case - 64)) | (1L << (Else - 64)) | (1L << (New - 64)) | (1L << (Var - 64)) | (1L << (Catch - 64)) | (1L << (Finally - 64)) | (1L << (Return - 64)) | (1L << (Void - 64)) | (1L << (Continue - 64)) | (1L << (For - 64)) | (1L << (Switch - 64)) | (1L << (While - 64)) | (1L << (Debugger - 64)) | (1L << (Function - 64)) | (1L << (This - 64)) | (1L << (With - 64)) | (1L << (Default - 64)) | (1L << (If - 64)) | (1L << (Throw - 64)) | (1L << (Delete - 64)) | (1L << (In - 64)) | (1L << (Try - 64)) | (1L << (From - 64)) | (1L << (ReadOnly - 64)) | (1L << (Async - 64)) | (1L << (Class - 64)) | (1L << (Enum - 64)) | (1L << (Extends - 64)) | (1L << (Super - 64)) | (1L << (Const - 64)) | (1L << (Export - 64)) | (1L << (Import - 64)) | (1L << (Implements - 64)) | (1L << (Let - 64)) | (1L << (Private - 64)) | (1L << (Public - 64)) | (1L << (Interface - 64)) | (1L << (Package - 64)) | (1L << (Protected - 64)) | (1L << (Static - 64)) | (1L << (Yield - 64)) | (1L << (String - 64)) | (1L << (TypeAlias - 64)) | (1L << (Get - 64)) | (1L << (Set - 64)) | (1L << (Require - 64)) | (1L << (At - 64)) | (1L << (Identifier - 64)))) != 0)) {
				{
				State = 515;
				parameterList();
				}
			}

			State = 518;
			Match(CloseParen);
			State = 520;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,34,Context) ) {
			case 1:
				{
				State = 519;
				typeAnnotation();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParameterListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public RestParameterContext restParameter() {
			return GetRuleContext<RestParameterContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ParameterContext[] parameter() {
			return GetRuleContexts<ParameterContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ParameterContext parameter(int i) {
			return GetRuleContext<ParameterContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Comma() { return GetTokens(TypeScriptParser.Comma); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comma(int i) {
			return GetToken(TypeScriptParser.Comma, i);
		}
		public ParameterListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parameterList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.EnterParameterList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.ExitParameterList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypeScriptParserVisitor<TResult> typedVisitor = visitor as ITypeScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParameterList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ParameterListContext parameterList() {
		ParameterListContext _localctx = new ParameterListContext(Context, State);
		EnterRule(_localctx, 64, RULE_parameterList);
		int _la;
		try {
			int _alt;
			State = 535;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case Ellipsis:
				EnterOuterAlt(_localctx, 1);
				{
				State = 522;
				restParameter();
				}
				break;
			case OpenBracket:
			case OpenBrace:
			case NullLiteral:
			case BooleanLiteral:
			case Break:
			case Do:
			case Instanceof:
			case Typeof:
			case Case:
			case Else:
			case New:
			case Var:
			case Catch:
			case Finally:
			case Return:
			case Void:
			case Continue:
			case For:
			case Switch:
			case While:
			case Debugger:
			case Function:
			case This:
			case With:
			case Default:
			case If:
			case Throw:
			case Delete:
			case In:
			case Try:
			case From:
			case ReadOnly:
			case Async:
			case Class:
			case Enum:
			case Extends:
			case Super:
			case Const:
			case Export:
			case Import:
			case Implements:
			case Let:
			case Private:
			case Public:
			case Interface:
			case Package:
			case Protected:
			case Static:
			case Yield:
			case String:
			case TypeAlias:
			case Get:
			case Set:
			case Require:
			case At:
			case Identifier:
				EnterOuterAlt(_localctx, 2);
				{
				State = 523;
				parameter();
				State = 528;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,35,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 524;
						Match(Comma);
						State = 525;
						parameter();
						}
						} 
					}
					State = 530;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,35,Context);
				}
				State = 533;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==Comma) {
					{
					State = 531;
					Match(Comma);
					State = 532;
					restParameter();
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RequiredParameterListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public RequiredParameterContext[] requiredParameter() {
			return GetRuleContexts<RequiredParameterContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public RequiredParameterContext requiredParameter(int i) {
			return GetRuleContext<RequiredParameterContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Comma() { return GetTokens(TypeScriptParser.Comma); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comma(int i) {
			return GetToken(TypeScriptParser.Comma, i);
		}
		public RequiredParameterListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_requiredParameterList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.EnterRequiredParameterList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.ExitRequiredParameterList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypeScriptParserVisitor<TResult> typedVisitor = visitor as ITypeScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRequiredParameterList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RequiredParameterListContext requiredParameterList() {
		RequiredParameterListContext _localctx = new RequiredParameterListContext(Context, State);
		EnterRule(_localctx, 66, RULE_requiredParameterList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 537;
			requiredParameter();
			State = 542;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==Comma) {
				{
				{
				State = 538;
				Match(Comma);
				State = 539;
				requiredParameter();
				}
				}
				State = 544;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParameterContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public RequiredParameterContext requiredParameter() {
			return GetRuleContext<RequiredParameterContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public OptionalParameterContext optionalParameter() {
			return GetRuleContext<OptionalParameterContext>(0);
		}
		public ParameterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parameter; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.EnterParameter(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.ExitParameter(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypeScriptParserVisitor<TResult> typedVisitor = visitor as ITypeScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParameter(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ParameterContext parameter() {
		ParameterContext _localctx = new ParameterContext(Context, State);
		EnterRule(_localctx, 68, RULE_parameter);
		try {
			State = 547;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,39,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 545;
				requiredParameter();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 546;
				optionalParameter();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OptionalParameterContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierOrPatternContext identifierOrPattern() {
			return GetRuleContext<IdentifierOrPatternContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DecoratorListContext decoratorList() {
			return GetRuleContext<DecoratorListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode QuestionMark() { return GetToken(TypeScriptParser.QuestionMark, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public InitializerContext initializer() {
			return GetRuleContext<InitializerContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AccessibilityModifierContext accessibilityModifier() {
			return GetRuleContext<AccessibilityModifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeAnnotationContext typeAnnotation() {
			return GetRuleContext<TypeAnnotationContext>(0);
		}
		public OptionalParameterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_optionalParameter; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.EnterOptionalParameter(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.ExitOptionalParameter(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypeScriptParserVisitor<TResult> typedVisitor = visitor as ITypeScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOptionalParameter(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OptionalParameterContext optionalParameter() {
		OptionalParameterContext _localctx = new OptionalParameterContext(Context, State);
		EnterRule(_localctx, 70, RULE_optionalParameter);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 550;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==At) {
				{
				State = 549;
				decoratorList();
				}
			}

			{
			State = 553;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,41,Context) ) {
			case 1:
				{
				State = 552;
				accessibilityModifier();
				}
				break;
			}
			State = 555;
			identifierOrPattern();
			State = 564;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case QuestionMark:
				{
				State = 556;
				Match(QuestionMark);
				State = 558;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==Colon) {
					{
					State = 557;
					typeAnnotation();
					}
				}

				}
				break;
			case Assign:
			case Colon:
				{
				State = 561;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==Colon) {
					{
					State = 560;
					typeAnnotation();
					}
				}

				State = 563;
				initializer();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RestParameterContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Ellipsis() { return GetToken(TypeScriptParser.Ellipsis, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SingleExpressionContext singleExpression() {
			return GetRuleContext<SingleExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeAnnotationContext typeAnnotation() {
			return GetRuleContext<TypeAnnotationContext>(0);
		}
		public RestParameterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_restParameter; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.EnterRestParameter(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.ExitRestParameter(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypeScriptParserVisitor<TResult> typedVisitor = visitor as ITypeScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRestParameter(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RestParameterContext restParameter() {
		RestParameterContext _localctx = new RestParameterContext(Context, State);
		EnterRule(_localctx, 72, RULE_restParameter);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 566;
			Match(Ellipsis);
			State = 567;
			singleExpression(0);
			State = 569;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Colon) {
				{
				State = 568;
				typeAnnotation();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RequiredParameterContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierOrPatternContext identifierOrPattern() {
			return GetRuleContext<IdentifierOrPatternContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DecoratorListContext decoratorList() {
			return GetRuleContext<DecoratorListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AccessibilityModifierContext accessibilityModifier() {
			return GetRuleContext<AccessibilityModifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeAnnotationContext typeAnnotation() {
			return GetRuleContext<TypeAnnotationContext>(0);
		}
		public RequiredParameterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_requiredParameter; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.EnterRequiredParameter(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.ExitRequiredParameter(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypeScriptParserVisitor<TResult> typedVisitor = visitor as ITypeScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRequiredParameter(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RequiredParameterContext requiredParameter() {
		RequiredParameterContext _localctx = new RequiredParameterContext(Context, State);
		EnterRule(_localctx, 74, RULE_requiredParameter);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 572;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==At) {
				{
				State = 571;
				decoratorList();
				}
			}

			State = 575;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,47,Context) ) {
			case 1:
				{
				State = 574;
				accessibilityModifier();
				}
				break;
			}
			State = 577;
			identifierOrPattern();
			State = 579;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Colon) {
				{
				State = 578;
				typeAnnotation();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AccessibilityModifierContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Public() { return GetToken(TypeScriptParser.Public, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Private() { return GetToken(TypeScriptParser.Private, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Protected() { return GetToken(TypeScriptParser.Protected, 0); }
		public AccessibilityModifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_accessibilityModifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.EnterAccessibilityModifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.ExitAccessibilityModifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypeScriptParserVisitor<TResult> typedVisitor = visitor as ITypeScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAccessibilityModifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AccessibilityModifierContext accessibilityModifier() {
		AccessibilityModifierContext _localctx = new AccessibilityModifierContext(Context, State);
		EnterRule(_localctx, 76, RULE_accessibilityModifier);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 581;
			_la = TokenStream.LA(1);
			if ( !(((((_la - 100)) & ~0x3f) == 0 && ((1L << (_la - 100)) & ((1L << (Private - 100)) | (1L << (Public - 100)) | (1L << (Protected - 100)))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IdentifierOrPatternContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierNameContext identifierName() {
			return GetRuleContext<IdentifierNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BindingPatternContext bindingPattern() {
			return GetRuleContext<BindingPatternContext>(0);
		}
		public IdentifierOrPatternContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_identifierOrPattern; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.EnterIdentifierOrPattern(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.ExitIdentifierOrPattern(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypeScriptParserVisitor<TResult> typedVisitor = visitor as ITypeScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIdentifierOrPattern(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IdentifierOrPatternContext identifierOrPattern() {
		IdentifierOrPatternContext _localctx = new IdentifierOrPatternContext(Context, State);
		EnterRule(_localctx, 78, RULE_identifierOrPattern);
		try {
			State = 585;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case NullLiteral:
			case BooleanLiteral:
			case Break:
			case Do:
			case Instanceof:
			case Typeof:
			case Case:
			case Else:
			case New:
			case Var:
			case Catch:
			case Finally:
			case Return:
			case Void:
			case Continue:
			case For:
			case Switch:
			case While:
			case Debugger:
			case Function:
			case This:
			case With:
			case Default:
			case If:
			case Throw:
			case Delete:
			case In:
			case Try:
			case From:
			case ReadOnly:
			case Async:
			case Class:
			case Enum:
			case Extends:
			case Super:
			case Const:
			case Export:
			case Import:
			case Implements:
			case Let:
			case Private:
			case Public:
			case Interface:
			case Package:
			case Protected:
			case Static:
			case Yield:
			case String:
			case TypeAlias:
			case Get:
			case Set:
			case Require:
			case Identifier:
				EnterOuterAlt(_localctx, 1);
				{
				State = 583;
				identifierName();
				}
				break;
			case OpenBracket:
			case OpenBrace:
				EnterOuterAlt(_localctx, 2);
				{
				State = 584;
				bindingPattern();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConstructSignatureContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode New() { return GetToken(TypeScriptParser.New, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OpenParen() { return GetToken(TypeScriptParser.OpenParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CloseParen() { return GetToken(TypeScriptParser.CloseParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeParametersContext typeParameters() {
			return GetRuleContext<TypeParametersContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ParameterListContext parameterList() {
			return GetRuleContext<ParameterListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeAnnotationContext typeAnnotation() {
			return GetRuleContext<TypeAnnotationContext>(0);
		}
		public ConstructSignatureContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constructSignature; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.EnterConstructSignature(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.ExitConstructSignature(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypeScriptParserVisitor<TResult> typedVisitor = visitor as ITypeScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConstructSignature(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConstructSignatureContext constructSignature() {
		ConstructSignatureContext _localctx = new ConstructSignatureContext(Context, State);
		EnterRule(_localctx, 80, RULE_constructSignature);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 587;
			Match(New);
			State = 589;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LessThan) {
				{
				State = 588;
				typeParameters();
				}
			}

			State = 591;
			Match(OpenParen);
			State = 593;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << OpenBracket) | (1L << OpenBrace) | (1L << Ellipsis) | (1L << NullLiteral) | (1L << BooleanLiteral) | (1L << Break) | (1L << Do) | (1L << Instanceof))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (Typeof - 64)) | (1L << (Case - 64)) | (1L << (Else - 64)) | (1L << (New - 64)) | (1L << (Var - 64)) | (1L << (Catch - 64)) | (1L << (Finally - 64)) | (1L << (Return - 64)) | (1L << (Void - 64)) | (1L << (Continue - 64)) | (1L << (For - 64)) | (1L << (Switch - 64)) | (1L << (While - 64)) | (1L << (Debugger - 64)) | (1L << (Function - 64)) | (1L << (This - 64)) | (1L << (With - 64)) | (1L << (Default - 64)) | (1L << (If - 64)) | (1L << (Throw - 64)) | (1L << (Delete - 64)) | (1L << (In - 64)) | (1L << (Try - 64)) | (1L << (From - 64)) | (1L << (ReadOnly - 64)) | (1L << (Async - 64)) | (1L << (Class - 64)) | (1L << (Enum - 64)) | (1L << (Extends - 64)) | (1L << (Super - 64)) | (1L << (Const - 64)) | (1L << (Export - 64)) | (1L << (Import - 64)) | (1L << (Implements - 64)) | (1L << (Let - 64)) | (1L << (Private - 64)) | (1L << (Public - 64)) | (1L << (Interface - 64)) | (1L << (Package - 64)) | (1L << (Protected - 64)) | (1L << (Static - 64)) | (1L << (Yield - 64)) | (1L << (String - 64)) | (1L << (TypeAlias - 64)) | (1L << (Get - 64)) | (1L << (Set - 64)) | (1L << (Require - 64)) | (1L << (At - 64)) | (1L << (Identifier - 64)))) != 0)) {
				{
				State = 592;
				parameterList();
				}
			}

			State = 595;
			Match(CloseParen);
			State = 597;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Colon) {
				{
				State = 596;
				typeAnnotation();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IndexSignatureContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OpenBracket() { return GetToken(TypeScriptParser.OpenBracket, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(TypeScriptParser.Identifier, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Colon() { return GetToken(TypeScriptParser.Colon, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CloseBracket() { return GetToken(TypeScriptParser.CloseBracket, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeAnnotationContext typeAnnotation() {
			return GetRuleContext<TypeAnnotationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Number() { return GetToken(TypeScriptParser.Number, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode String() { return GetToken(TypeScriptParser.String, 0); }
		public IndexSignatureContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_indexSignature; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.EnterIndexSignature(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.ExitIndexSignature(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypeScriptParserVisitor<TResult> typedVisitor = visitor as ITypeScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIndexSignature(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IndexSignatureContext indexSignature() {
		IndexSignatureContext _localctx = new IndexSignatureContext(Context, State);
		EnterRule(_localctx, 82, RULE_indexSignature);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 599;
			Match(OpenBracket);
			State = 600;
			Match(Identifier);
			State = 601;
			Match(Colon);
			State = 602;
			_la = TokenStream.LA(1);
			if ( !(_la==Number || _la==String) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 603;
			Match(CloseBracket);
			State = 604;
			typeAnnotation();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MethodSignatureContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public PropertyNameContext propertyName() {
			return GetRuleContext<PropertyNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CallSignatureContext callSignature() {
			return GetRuleContext<CallSignatureContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode QuestionMark() { return GetToken(TypeScriptParser.QuestionMark, 0); }
		public MethodSignatureContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_methodSignature; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.EnterMethodSignature(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.ExitMethodSignature(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypeScriptParserVisitor<TResult> typedVisitor = visitor as ITypeScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMethodSignature(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MethodSignatureContext methodSignature() {
		MethodSignatureContext _localctx = new MethodSignatureContext(Context, State);
		EnterRule(_localctx, 84, RULE_methodSignature);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 606;
			propertyName();
			State = 608;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==QuestionMark) {
				{
				State = 607;
				Match(QuestionMark);
				}
			}

			State = 610;
			callSignature();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeAliasDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TypeAlias() { return GetToken(TypeScriptParser.TypeAlias, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(TypeScriptParser.Identifier, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Assign() { return GetToken(TypeScriptParser.Assign, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Type_Context type_() {
			return GetRuleContext<Type_Context>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SemiColon() { return GetToken(TypeScriptParser.SemiColon, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeParametersContext typeParameters() {
			return GetRuleContext<TypeParametersContext>(0);
		}
		public TypeAliasDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeAliasDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.EnterTypeAliasDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.ExitTypeAliasDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypeScriptParserVisitor<TResult> typedVisitor = visitor as ITypeScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeAliasDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeAliasDeclarationContext typeAliasDeclaration() {
		TypeAliasDeclarationContext _localctx = new TypeAliasDeclarationContext(Context, State);
		EnterRule(_localctx, 86, RULE_typeAliasDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 612;
			Match(TypeAlias);
			State = 613;
			Match(Identifier);
			State = 615;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LessThan) {
				{
				State = 614;
				typeParameters();
				}
			}

			State = 617;
			Match(Assign);
			State = 618;
			type_();
			State = 619;
			Match(SemiColon);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConstructorDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Constructor() { return GetToken(TypeScriptParser.Constructor, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OpenParen() { return GetToken(TypeScriptParser.OpenParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CloseParen() { return GetToken(TypeScriptParser.CloseParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public AccessibilityModifierContext accessibilityModifier() {
			return GetRuleContext<AccessibilityModifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FormalParameterListContext formalParameterList() {
			return GetRuleContext<FormalParameterListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SemiColon() { return GetToken(TypeScriptParser.SemiColon, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OpenBrace() { return GetToken(TypeScriptParser.OpenBrace, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FunctionBodyContext functionBody() {
			return GetRuleContext<FunctionBodyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CloseBrace() { return GetToken(TypeScriptParser.CloseBrace, 0); }
		public ConstructorDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constructorDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.EnterConstructorDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.ExitConstructorDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypeScriptParserVisitor<TResult> typedVisitor = visitor as ITypeScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConstructorDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConstructorDeclarationContext constructorDeclaration() {
		ConstructorDeclarationContext _localctx = new ConstructorDeclarationContext(Context, State);
		EnterRule(_localctx, 88, RULE_constructorDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 622;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (((((_la - 100)) & ~0x3f) == 0 && ((1L << (_la - 100)) & ((1L << (Private - 100)) | (1L << (Public - 100)) | (1L << (Protected - 100)))) != 0)) {
				{
				State = 621;
				accessibilityModifier();
				}
			}

			State = 624;
			Match(Constructor);
			State = 625;
			Match(OpenParen);
			State = 627;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << OpenBracket) | (1L << OpenBrace) | (1L << Ellipsis))) != 0) || ((((_la - 100)) & ~0x3f) == 0 && ((1L << (_la - 100)) & ((1L << (Private - 100)) | (1L << (Public - 100)) | (1L << (Protected - 100)) | (1L << (TypeAlias - 100)) | (1L << (Require - 100)) | (1L << (At - 100)) | (1L << (Identifier - 100)))) != 0)) {
				{
				State = 626;
				formalParameterList();
				}
			}

			State = 629;
			Match(CloseParen);
			State = 635;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,57,Context) ) {
			case 1:
				{
				{
				State = 630;
				Match(OpenBrace);
				State = 631;
				functionBody();
				State = 632;
				Match(CloseBrace);
				}
				}
				break;
			case 2:
				{
				State = 634;
				Match(SemiColon);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InterfaceDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Interface() { return GetToken(TypeScriptParser.Interface, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(TypeScriptParser.Identifier, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ObjectTypeContext objectType() {
			return GetRuleContext<ObjectTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Export() { return GetToken(TypeScriptParser.Export, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Declare() { return GetToken(TypeScriptParser.Declare, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeParametersContext typeParameters() {
			return GetRuleContext<TypeParametersContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public InterfaceExtendsClauseContext interfaceExtendsClause() {
			return GetRuleContext<InterfaceExtendsClauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SemiColon() { return GetToken(TypeScriptParser.SemiColon, 0); }
		public InterfaceDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_interfaceDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.EnterInterfaceDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.ExitInterfaceDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypeScriptParserVisitor<TResult> typedVisitor = visitor as ITypeScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInterfaceDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InterfaceDeclarationContext interfaceDeclaration() {
		InterfaceDeclarationContext _localctx = new InterfaceDeclarationContext(Context, State);
		EnterRule(_localctx, 90, RULE_interfaceDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 638;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Export) {
				{
				State = 637;
				Match(Export);
				}
			}

			State = 641;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Declare) {
				{
				State = 640;
				Match(Declare);
				}
			}

			State = 643;
			Match(Interface);
			State = 644;
			Match(Identifier);
			State = 646;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LessThan) {
				{
				State = 645;
				typeParameters();
				}
			}

			State = 649;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Extends) {
				{
				State = 648;
				interfaceExtendsClause();
				}
			}

			State = 651;
			objectType();
			State = 653;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,62,Context) ) {
			case 1:
				{
				State = 652;
				Match(SemiColon);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InterfaceExtendsClauseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Extends() { return GetToken(TypeScriptParser.Extends, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ClassOrInterfaceTypeListContext classOrInterfaceTypeList() {
			return GetRuleContext<ClassOrInterfaceTypeListContext>(0);
		}
		public InterfaceExtendsClauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_interfaceExtendsClause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.EnterInterfaceExtendsClause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.ExitInterfaceExtendsClause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypeScriptParserVisitor<TResult> typedVisitor = visitor as ITypeScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInterfaceExtendsClause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InterfaceExtendsClauseContext interfaceExtendsClause() {
		InterfaceExtendsClauseContext _localctx = new InterfaceExtendsClauseContext(Context, State);
		EnterRule(_localctx, 92, RULE_interfaceExtendsClause);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 655;
			Match(Extends);
			State = 656;
			classOrInterfaceTypeList();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClassOrInterfaceTypeListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypeReferenceContext[] typeReference() {
			return GetRuleContexts<TypeReferenceContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeReferenceContext typeReference(int i) {
			return GetRuleContext<TypeReferenceContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Comma() { return GetTokens(TypeScriptParser.Comma); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comma(int i) {
			return GetToken(TypeScriptParser.Comma, i);
		}
		public ClassOrInterfaceTypeListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_classOrInterfaceTypeList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.EnterClassOrInterfaceTypeList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.ExitClassOrInterfaceTypeList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypeScriptParserVisitor<TResult> typedVisitor = visitor as ITypeScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClassOrInterfaceTypeList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ClassOrInterfaceTypeListContext classOrInterfaceTypeList() {
		ClassOrInterfaceTypeListContext _localctx = new ClassOrInterfaceTypeListContext(Context, State);
		EnterRule(_localctx, 94, RULE_classOrInterfaceTypeList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 658;
			typeReference();
			State = 663;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==Comma) {
				{
				{
				State = 659;
				Match(Comma);
				State = 660;
				typeReference();
				}
				}
				State = 665;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EnumDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Enum() { return GetToken(TypeScriptParser.Enum, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(TypeScriptParser.Identifier, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OpenBrace() { return GetToken(TypeScriptParser.OpenBrace, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CloseBrace() { return GetToken(TypeScriptParser.CloseBrace, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Const() { return GetToken(TypeScriptParser.Const, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public EnumBodyContext enumBody() {
			return GetRuleContext<EnumBodyContext>(0);
		}
		public EnumDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enumDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.EnterEnumDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.ExitEnumDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypeScriptParserVisitor<TResult> typedVisitor = visitor as ITypeScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEnumDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EnumDeclarationContext enumDeclaration() {
		EnumDeclarationContext _localctx = new EnumDeclarationContext(Context, State);
		EnterRule(_localctx, 96, RULE_enumDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 667;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Const) {
				{
				State = 666;
				Match(Const);
				}
			}

			State = 669;
			Match(Enum);
			State = 670;
			Match(Identifier);
			State = 671;
			Match(OpenBrace);
			State = 673;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << NullLiteral) | (1L << BooleanLiteral) | (1L << DecimalLiteral) | (1L << HexIntegerLiteral) | (1L << OctalIntegerLiteral) | (1L << OctalIntegerLiteral2) | (1L << BinaryIntegerLiteral) | (1L << Break) | (1L << Do) | (1L << Instanceof))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (Typeof - 64)) | (1L << (Case - 64)) | (1L << (Else - 64)) | (1L << (New - 64)) | (1L << (Var - 64)) | (1L << (Catch - 64)) | (1L << (Finally - 64)) | (1L << (Return - 64)) | (1L << (Void - 64)) | (1L << (Continue - 64)) | (1L << (For - 64)) | (1L << (Switch - 64)) | (1L << (While - 64)) | (1L << (Debugger - 64)) | (1L << (Function - 64)) | (1L << (This - 64)) | (1L << (With - 64)) | (1L << (Default - 64)) | (1L << (If - 64)) | (1L << (Throw - 64)) | (1L << (Delete - 64)) | (1L << (In - 64)) | (1L << (Try - 64)) | (1L << (From - 64)) | (1L << (ReadOnly - 64)) | (1L << (Async - 64)) | (1L << (Class - 64)) | (1L << (Enum - 64)) | (1L << (Extends - 64)) | (1L << (Super - 64)) | (1L << (Const - 64)) | (1L << (Export - 64)) | (1L << (Import - 64)) | (1L << (Implements - 64)) | (1L << (Let - 64)) | (1L << (Private - 64)) | (1L << (Public - 64)) | (1L << (Interface - 64)) | (1L << (Package - 64)) | (1L << (Protected - 64)) | (1L << (Static - 64)) | (1L << (Yield - 64)) | (1L << (String - 64)) | (1L << (TypeAlias - 64)) | (1L << (Get - 64)) | (1L << (Set - 64)) | (1L << (Require - 64)) | (1L << (Identifier - 64)) | (1L << (StringLiteral - 64)))) != 0)) {
				{
				State = 672;
				enumBody();
				}
			}

			State = 675;
			Match(CloseBrace);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EnumBodyContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public EnumMemberListContext enumMemberList() {
			return GetRuleContext<EnumMemberListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comma() { return GetToken(TypeScriptParser.Comma, 0); }
		public EnumBodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enumBody; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.EnterEnumBody(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.ExitEnumBody(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypeScriptParserVisitor<TResult> typedVisitor = visitor as ITypeScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEnumBody(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EnumBodyContext enumBody() {
		EnumBodyContext _localctx = new EnumBodyContext(Context, State);
		EnterRule(_localctx, 98, RULE_enumBody);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 677;
			enumMemberList();
			State = 679;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Comma) {
				{
				State = 678;
				Match(Comma);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EnumMemberListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public EnumMemberContext[] enumMember() {
			return GetRuleContexts<EnumMemberContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public EnumMemberContext enumMember(int i) {
			return GetRuleContext<EnumMemberContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Comma() { return GetTokens(TypeScriptParser.Comma); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comma(int i) {
			return GetToken(TypeScriptParser.Comma, i);
		}
		public EnumMemberListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enumMemberList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.EnterEnumMemberList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.ExitEnumMemberList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypeScriptParserVisitor<TResult> typedVisitor = visitor as ITypeScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEnumMemberList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EnumMemberListContext enumMemberList() {
		EnumMemberListContext _localctx = new EnumMemberListContext(Context, State);
		EnterRule(_localctx, 100, RULE_enumMemberList);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 681;
			enumMember();
			State = 686;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,67,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 682;
					Match(Comma);
					State = 683;
					enumMember();
					}
					} 
				}
				State = 688;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,67,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EnumMemberContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public PropertyNameContext propertyName() {
			return GetRuleContext<PropertyNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Assign() { return GetToken(TypeScriptParser.Assign, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SingleExpressionContext singleExpression() {
			return GetRuleContext<SingleExpressionContext>(0);
		}
		public EnumMemberContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enumMember; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.EnterEnumMember(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.ExitEnumMember(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypeScriptParserVisitor<TResult> typedVisitor = visitor as ITypeScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEnumMember(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EnumMemberContext enumMember() {
		EnumMemberContext _localctx = new EnumMemberContext(Context, State);
		EnterRule(_localctx, 102, RULE_enumMember);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 689;
			propertyName();
			State = 692;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Assign) {
				{
				State = 690;
				Match(Assign);
				State = 691;
				singleExpression(0);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NamespaceDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Namespace() { return GetToken(TypeScriptParser.Namespace, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NamespaceNameContext namespaceName() {
			return GetRuleContext<NamespaceNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OpenBrace() { return GetToken(TypeScriptParser.OpenBrace, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CloseBrace() { return GetToken(TypeScriptParser.CloseBrace, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementListContext statementList() {
			return GetRuleContext<StatementListContext>(0);
		}
		public NamespaceDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_namespaceDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.EnterNamespaceDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.ExitNamespaceDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypeScriptParserVisitor<TResult> typedVisitor = visitor as ITypeScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNamespaceDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NamespaceDeclarationContext namespaceDeclaration() {
		NamespaceDeclarationContext _localctx = new NamespaceDeclarationContext(Context, State);
		EnterRule(_localctx, 104, RULE_namespaceDeclaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 694;
			Match(Namespace);
			State = 695;
			namespaceName();
			State = 696;
			Match(OpenBrace);
			State = 698;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,69,Context) ) {
			case 1:
				{
				State = 697;
				statementList();
				}
				break;
			}
			State = 700;
			Match(CloseBrace);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NamespaceNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Identifier() { return GetTokens(TypeScriptParser.Identifier); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier(int i) {
			return GetToken(TypeScriptParser.Identifier, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Dot() { return GetTokens(TypeScriptParser.Dot); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Dot(int i) {
			return GetToken(TypeScriptParser.Dot, i);
		}
		public NamespaceNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_namespaceName; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.EnterNamespaceName(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.ExitNamespaceName(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypeScriptParserVisitor<TResult> typedVisitor = visitor as ITypeScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNamespaceName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NamespaceNameContext namespaceName() {
		NamespaceNameContext _localctx = new NamespaceNameContext(Context, State);
		EnterRule(_localctx, 106, RULE_namespaceName);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 702;
			Match(Identifier);
			State = 711;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,71,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 704;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					do {
						{
						{
						State = 703;
						Match(Dot);
						}
						}
						State = 706;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					} while ( _la==Dot );
					State = 708;
					Match(Identifier);
					}
					} 
				}
				State = 713;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,71,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ImportAliasDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(TypeScriptParser.Identifier, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Assign() { return GetToken(TypeScriptParser.Assign, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NamespaceNameContext namespaceName() {
			return GetRuleContext<NamespaceNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SemiColon() { return GetToken(TypeScriptParser.SemiColon, 0); }
		public ImportAliasDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_importAliasDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.EnterImportAliasDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.ExitImportAliasDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypeScriptParserVisitor<TResult> typedVisitor = visitor as ITypeScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitImportAliasDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ImportAliasDeclarationContext importAliasDeclaration() {
		ImportAliasDeclarationContext _localctx = new ImportAliasDeclarationContext(Context, State);
		EnterRule(_localctx, 108, RULE_importAliasDeclaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 714;
			Match(Identifier);
			State = 715;
			Match(Assign);
			State = 716;
			namespaceName();
			State = 717;
			Match(SemiColon);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DecoratorListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public DecoratorContext[] decorator() {
			return GetRuleContexts<DecoratorContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public DecoratorContext decorator(int i) {
			return GetRuleContext<DecoratorContext>(i);
		}
		public DecoratorListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_decoratorList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.EnterDecoratorList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.ExitDecoratorList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypeScriptParserVisitor<TResult> typedVisitor = visitor as ITypeScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDecoratorList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DecoratorListContext decoratorList() {
		DecoratorListContext _localctx = new DecoratorListContext(Context, State);
		EnterRule(_localctx, 110, RULE_decoratorList);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 720;
			ErrorHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 719;
					decorator();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 722;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,72,Context);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DecoratorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode At() { return GetToken(TypeScriptParser.At, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public DecoratorMemberExpressionContext decoratorMemberExpression() {
			return GetRuleContext<DecoratorMemberExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DecoratorCallExpressionContext decoratorCallExpression() {
			return GetRuleContext<DecoratorCallExpressionContext>(0);
		}
		public DecoratorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_decorator; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.EnterDecorator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.ExitDecorator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypeScriptParserVisitor<TResult> typedVisitor = visitor as ITypeScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDecorator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DecoratorContext decorator() {
		DecoratorContext _localctx = new DecoratorContext(Context, State);
		EnterRule(_localctx, 112, RULE_decorator);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 724;
			Match(At);
			State = 727;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,73,Context) ) {
			case 1:
				{
				State = 725;
				decoratorMemberExpression(0);
				}
				break;
			case 2:
				{
				State = 726;
				decoratorCallExpression();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DecoratorMemberExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(TypeScriptParser.Identifier, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OpenParen() { return GetToken(TypeScriptParser.OpenParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SingleExpressionContext singleExpression() {
			return GetRuleContext<SingleExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CloseParen() { return GetToken(TypeScriptParser.CloseParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public DecoratorMemberExpressionContext decoratorMemberExpression() {
			return GetRuleContext<DecoratorMemberExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Dot() { return GetToken(TypeScriptParser.Dot, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierNameContext identifierName() {
			return GetRuleContext<IdentifierNameContext>(0);
		}
		public DecoratorMemberExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_decoratorMemberExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.EnterDecoratorMemberExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.ExitDecoratorMemberExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypeScriptParserVisitor<TResult> typedVisitor = visitor as ITypeScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDecoratorMemberExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DecoratorMemberExpressionContext decoratorMemberExpression() {
		return decoratorMemberExpression(0);
	}

	private DecoratorMemberExpressionContext decoratorMemberExpression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		DecoratorMemberExpressionContext _localctx = new DecoratorMemberExpressionContext(Context, _parentState);
		DecoratorMemberExpressionContext _prevctx = _localctx;
		int _startState = 114;
		EnterRecursionRule(_localctx, 114, RULE_decoratorMemberExpression, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 735;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case Identifier:
				{
				State = 730;
				Match(Identifier);
				}
				break;
			case OpenParen:
				{
				State = 731;
				Match(OpenParen);
				State = 732;
				singleExpression(0);
				State = 733;
				Match(CloseParen);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 742;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,75,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new DecoratorMemberExpressionContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_decoratorMemberExpression);
					State = 737;
					if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
					State = 738;
					Match(Dot);
					State = 739;
					identifierName();
					}
					} 
				}
				State = 744;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,75,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class DecoratorCallExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public DecoratorMemberExpressionContext decoratorMemberExpression() {
			return GetRuleContext<DecoratorMemberExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArgumentsContext arguments() {
			return GetRuleContext<ArgumentsContext>(0);
		}
		public DecoratorCallExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_decoratorCallExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.EnterDecoratorCallExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.ExitDecoratorCallExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypeScriptParserVisitor<TResult> typedVisitor = visitor as ITypeScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDecoratorCallExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DecoratorCallExpressionContext decoratorCallExpression() {
		DecoratorCallExpressionContext _localctx = new DecoratorCallExpressionContext(Context, State);
		EnterRule(_localctx, 116, RULE_decoratorCallExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 745;
			decoratorMemberExpression(0);
			State = 746;
			arguments();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ProgramContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(TypeScriptParser.Eof, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SourceElementsContext sourceElements() {
			return GetRuleContext<SourceElementsContext>(0);
		}
		public ProgramContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_program; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.EnterProgram(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.ExitProgram(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypeScriptParserVisitor<TResult> typedVisitor = visitor as ITypeScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProgram(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ProgramContext program() {
		ProgramContext _localctx = new ProgramContext(Context, State);
		EnterRule(_localctx, 118, RULE_program);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 749;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,76,Context) ) {
			case 1:
				{
				State = 748;
				sourceElements();
				}
				break;
			}
			State = 751;
			Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SourceElementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Export() { return GetToken(TypeScriptParser.Export, 0); }
		public SourceElementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sourceElement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.EnterSourceElement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.ExitSourceElement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypeScriptParserVisitor<TResult> typedVisitor = visitor as ITypeScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSourceElement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SourceElementContext sourceElement() {
		SourceElementContext _localctx = new SourceElementContext(Context, State);
		EnterRule(_localctx, 120, RULE_sourceElement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 754;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,77,Context) ) {
			case 1:
				{
				State = 753;
				Match(Export);
				}
				break;
			}
			State = 756;
			statement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ImportStatementContext importStatement() {
			return GetRuleContext<ImportStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExportStatementContext exportStatement() {
			return GetRuleContext<ExportStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public EmptyStatementContext emptyStatement() {
			return GetRuleContext<EmptyStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AbstractDeclarationContext abstractDeclaration() {
			return GetRuleContext<AbstractDeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DecoratorListContext decoratorList() {
			return GetRuleContext<DecoratorListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ClassDeclarationContext classDeclaration() {
			return GetRuleContext<ClassDeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public InterfaceDeclarationContext interfaceDeclaration() {
			return GetRuleContext<InterfaceDeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NamespaceDeclarationContext namespaceDeclaration() {
			return GetRuleContext<NamespaceDeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IfStatementContext ifStatement() {
			return GetRuleContext<IfStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IterationStatementContext iterationStatement() {
			return GetRuleContext<IterationStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ContinueStatementContext continueStatement() {
			return GetRuleContext<ContinueStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BreakStatementContext breakStatement() {
			return GetRuleContext<BreakStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ReturnStatementContext returnStatement() {
			return GetRuleContext<ReturnStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public YieldStatementContext yieldStatement() {
			return GetRuleContext<YieldStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public WithStatementContext withStatement() {
			return GetRuleContext<WithStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LabelledStatementContext labelledStatement() {
			return GetRuleContext<LabelledStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SwitchStatementContext switchStatement() {
			return GetRuleContext<SwitchStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ThrowStatementContext throwStatement() {
			return GetRuleContext<ThrowStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TryStatementContext tryStatement() {
			return GetRuleContext<TryStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DebuggerStatementContext debuggerStatement() {
			return GetRuleContext<DebuggerStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionDeclarationContext functionDeclaration() {
			return GetRuleContext<FunctionDeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArrowFunctionDeclarationContext arrowFunctionDeclaration() {
			return GetRuleContext<ArrowFunctionDeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public GeneratorFunctionDeclarationContext generatorFunctionDeclaration() {
			return GetRuleContext<GeneratorFunctionDeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public VariableStatementContext variableStatement() {
			return GetRuleContext<VariableStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeAliasDeclarationContext typeAliasDeclaration() {
			return GetRuleContext<TypeAliasDeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public EnumDeclarationContext enumDeclaration() {
			return GetRuleContext<EnumDeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionStatementContext expressionStatement() {
			return GetRuleContext<ExpressionStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Export() { return GetToken(TypeScriptParser.Export, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.EnterStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.ExitStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypeScriptParserVisitor<TResult> typedVisitor = visitor as ITypeScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		StatementContext _localctx = new StatementContext(Context, State);
		EnterRule(_localctx, 122, RULE_statement);
		try {
			State = 788;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,78,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 758;
				block();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 759;
				importStatement();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 760;
				exportStatement();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 761;
				emptyStatement();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 762;
				abstractDeclaration();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 763;
				decoratorList();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 764;
				classDeclaration();
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 765;
				interfaceDeclaration();
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 766;
				namespaceDeclaration();
				}
				break;
			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 767;
				ifStatement();
				}
				break;
			case 11:
				EnterOuterAlt(_localctx, 11);
				{
				State = 768;
				iterationStatement();
				}
				break;
			case 12:
				EnterOuterAlt(_localctx, 12);
				{
				State = 769;
				continueStatement();
				}
				break;
			case 13:
				EnterOuterAlt(_localctx, 13);
				{
				State = 770;
				breakStatement();
				}
				break;
			case 14:
				EnterOuterAlt(_localctx, 14);
				{
				State = 771;
				returnStatement();
				}
				break;
			case 15:
				EnterOuterAlt(_localctx, 15);
				{
				State = 772;
				yieldStatement();
				}
				break;
			case 16:
				EnterOuterAlt(_localctx, 16);
				{
				State = 773;
				withStatement();
				}
				break;
			case 17:
				EnterOuterAlt(_localctx, 17);
				{
				State = 774;
				labelledStatement();
				}
				break;
			case 18:
				EnterOuterAlt(_localctx, 18);
				{
				State = 775;
				switchStatement();
				}
				break;
			case 19:
				EnterOuterAlt(_localctx, 19);
				{
				State = 776;
				throwStatement();
				}
				break;
			case 20:
				EnterOuterAlt(_localctx, 20);
				{
				State = 777;
				tryStatement();
				}
				break;
			case 21:
				EnterOuterAlt(_localctx, 21);
				{
				State = 778;
				debuggerStatement();
				}
				break;
			case 22:
				EnterOuterAlt(_localctx, 22);
				{
				State = 779;
				functionDeclaration();
				}
				break;
			case 23:
				EnterOuterAlt(_localctx, 23);
				{
				State = 780;
				arrowFunctionDeclaration();
				}
				break;
			case 24:
				EnterOuterAlt(_localctx, 24);
				{
				State = 781;
				generatorFunctionDeclaration();
				}
				break;
			case 25:
				EnterOuterAlt(_localctx, 25);
				{
				State = 782;
				variableStatement();
				}
				break;
			case 26:
				EnterOuterAlt(_localctx, 26);
				{
				State = 783;
				typeAliasDeclaration();
				}
				break;
			case 27:
				EnterOuterAlt(_localctx, 27);
				{
				State = 784;
				enumDeclaration();
				}
				break;
			case 28:
				EnterOuterAlt(_localctx, 28);
				{
				State = 785;
				expressionStatement();
				}
				break;
			case 29:
				EnterOuterAlt(_localctx, 29);
				{
				State = 786;
				Match(Export);
				State = 787;
				statement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlockContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OpenBrace() { return GetToken(TypeScriptParser.OpenBrace, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CloseBrace() { return GetToken(TypeScriptParser.CloseBrace, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementListContext statementList() {
			return GetRuleContext<StatementListContext>(0);
		}
		public BlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_block; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.EnterBlock(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.ExitBlock(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypeScriptParserVisitor<TResult> typedVisitor = visitor as ITypeScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BlockContext block() {
		BlockContext _localctx = new BlockContext(Context, State);
		EnterRule(_localctx, 124, RULE_block);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 790;
			Match(OpenBrace);
			State = 792;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,79,Context) ) {
			case 1:
				{
				State = 791;
				statementList();
				}
				break;
			}
			State = 794;
			Match(CloseBrace);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public StatementListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statementList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.EnterStatementList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.ExitStatementList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypeScriptParserVisitor<TResult> typedVisitor = visitor as ITypeScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatementList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementListContext statementList() {
		StatementListContext _localctx = new StatementListContext(Context, State);
		EnterRule(_localctx, 126, RULE_statementList);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 797;
			ErrorHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 796;
					statement();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 799;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,80,Context);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AbstractDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Abstract() { return GetToken(TypeScriptParser.Abstract, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public EosContext eos() {
			return GetRuleContext<EosContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(TypeScriptParser.Identifier, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public CallSignatureContext callSignature() {
			return GetRuleContext<CallSignatureContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public VariableStatementContext variableStatement() {
			return GetRuleContext<VariableStatementContext>(0);
		}
		public AbstractDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_abstractDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.EnterAbstractDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.ExitAbstractDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypeScriptParserVisitor<TResult> typedVisitor = visitor as ITypeScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAbstractDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AbstractDeclarationContext abstractDeclaration() {
		AbstractDeclarationContext _localctx = new AbstractDeclarationContext(Context, State);
		EnterRule(_localctx, 128, RULE_abstractDeclaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 801;
			Match(Abstract);
			State = 805;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,81,Context) ) {
			case 1:
				{
				State = 802;
				Match(Identifier);
				State = 803;
				callSignature();
				}
				break;
			case 2:
				{
				State = 804;
				variableStatement();
				}
				break;
			}
			State = 807;
			eos();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ImportStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Import() { return GetToken(TypeScriptParser.Import, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FromBlockContext fromBlock() {
			return GetRuleContext<FromBlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ImportAliasDeclarationContext importAliasDeclaration() {
			return GetRuleContext<ImportAliasDeclarationContext>(0);
		}
		public ImportStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_importStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.EnterImportStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.ExitImportStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypeScriptParserVisitor<TResult> typedVisitor = visitor as ITypeScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitImportStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ImportStatementContext importStatement() {
		ImportStatementContext _localctx = new ImportStatementContext(Context, State);
		EnterRule(_localctx, 130, RULE_importStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 809;
			Match(Import);
			State = 812;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,82,Context) ) {
			case 1:
				{
				State = 810;
				fromBlock();
				}
				break;
			case 2:
				{
				State = 811;
				importAliasDeclaration();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FromBlockContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode From() { return GetToken(TypeScriptParser.From, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode StringLiteral() { return GetToken(TypeScriptParser.StringLiteral, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public EosContext eos() {
			return GetRuleContext<EosContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Multiply() { return GetToken(TypeScriptParser.Multiply, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public MultipleImportStatementContext multipleImportStatement() {
			return GetRuleContext<MultipleImportStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode As() { return GetToken(TypeScriptParser.As, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierNameContext identifierName() {
			return GetRuleContext<IdentifierNameContext>(0);
		}
		public FromBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fromBlock; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.EnterFromBlock(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.ExitFromBlock(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypeScriptParserVisitor<TResult> typedVisitor = visitor as ITypeScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFromBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FromBlockContext fromBlock() {
		FromBlockContext _localctx = new FromBlockContext(Context, State);
		EnterRule(_localctx, 132, RULE_fromBlock);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 816;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case Multiply:
				{
				State = 814;
				Match(Multiply);
				}
				break;
			case OpenBrace:
			case NullLiteral:
			case BooleanLiteral:
			case Break:
			case Do:
			case Instanceof:
			case Typeof:
			case Case:
			case Else:
			case New:
			case Var:
			case Catch:
			case Finally:
			case Return:
			case Void:
			case Continue:
			case For:
			case Switch:
			case While:
			case Debugger:
			case Function:
			case This:
			case With:
			case Default:
			case If:
			case Throw:
			case Delete:
			case In:
			case Try:
			case From:
			case ReadOnly:
			case Async:
			case Class:
			case Enum:
			case Extends:
			case Super:
			case Const:
			case Export:
			case Import:
			case Implements:
			case Let:
			case Private:
			case Public:
			case Interface:
			case Package:
			case Protected:
			case Static:
			case Yield:
			case String:
			case TypeAlias:
			case Get:
			case Set:
			case Require:
			case Identifier:
				{
				State = 815;
				multipleImportStatement();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 820;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==As) {
				{
				State = 818;
				Match(As);
				State = 819;
				identifierName();
				}
			}

			State = 822;
			Match(From);
			State = 823;
			Match(StringLiteral);
			State = 824;
			eos();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MultipleImportStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OpenBrace() { return GetToken(TypeScriptParser.OpenBrace, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierNameContext[] identifierName() {
			return GetRuleContexts<IdentifierNameContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierNameContext identifierName(int i) {
			return GetRuleContext<IdentifierNameContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CloseBrace() { return GetToken(TypeScriptParser.CloseBrace, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Comma() { return GetTokens(TypeScriptParser.Comma); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comma(int i) {
			return GetToken(TypeScriptParser.Comma, i);
		}
		public MultipleImportStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_multipleImportStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.EnterMultipleImportStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.ExitMultipleImportStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypeScriptParserVisitor<TResult> typedVisitor = visitor as ITypeScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMultipleImportStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MultipleImportStatementContext multipleImportStatement() {
		MultipleImportStatementContext _localctx = new MultipleImportStatementContext(Context, State);
		EnterRule(_localctx, 134, RULE_multipleImportStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 829;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << NullLiteral) | (1L << BooleanLiteral) | (1L << Break) | (1L << Do) | (1L << Instanceof))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (Typeof - 64)) | (1L << (Case - 64)) | (1L << (Else - 64)) | (1L << (New - 64)) | (1L << (Var - 64)) | (1L << (Catch - 64)) | (1L << (Finally - 64)) | (1L << (Return - 64)) | (1L << (Void - 64)) | (1L << (Continue - 64)) | (1L << (For - 64)) | (1L << (Switch - 64)) | (1L << (While - 64)) | (1L << (Debugger - 64)) | (1L << (Function - 64)) | (1L << (This - 64)) | (1L << (With - 64)) | (1L << (Default - 64)) | (1L << (If - 64)) | (1L << (Throw - 64)) | (1L << (Delete - 64)) | (1L << (In - 64)) | (1L << (Try - 64)) | (1L << (From - 64)) | (1L << (ReadOnly - 64)) | (1L << (Async - 64)) | (1L << (Class - 64)) | (1L << (Enum - 64)) | (1L << (Extends - 64)) | (1L << (Super - 64)) | (1L << (Const - 64)) | (1L << (Export - 64)) | (1L << (Import - 64)) | (1L << (Implements - 64)) | (1L << (Let - 64)) | (1L << (Private - 64)) | (1L << (Public - 64)) | (1L << (Interface - 64)) | (1L << (Package - 64)) | (1L << (Protected - 64)) | (1L << (Static - 64)) | (1L << (Yield - 64)) | (1L << (String - 64)) | (1L << (TypeAlias - 64)) | (1L << (Get - 64)) | (1L << (Set - 64)) | (1L << (Require - 64)) | (1L << (Identifier - 64)))) != 0)) {
				{
				State = 826;
				identifierName();
				State = 827;
				Match(Comma);
				}
			}

			State = 831;
			Match(OpenBrace);
			State = 832;
			identifierName();
			State = 837;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==Comma) {
				{
				{
				State = 833;
				Match(Comma);
				State = 834;
				identifierName();
				}
				}
				State = 839;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 840;
			Match(CloseBrace);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExportStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Export() { return GetToken(TypeScriptParser.Export, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FromBlockContext fromBlock() {
			return GetRuleContext<FromBlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Default() { return GetToken(TypeScriptParser.Default, 0); }
		public ExportStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_exportStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.EnterExportStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.ExitExportStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypeScriptParserVisitor<TResult> typedVisitor = visitor as ITypeScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExportStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExportStatementContext exportStatement() {
		ExportStatementContext _localctx = new ExportStatementContext(Context, State);
		EnterRule(_localctx, 136, RULE_exportStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 842;
			Match(Export);
			State = 844;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,87,Context) ) {
			case 1:
				{
				State = 843;
				Match(Default);
				}
				break;
			}
			State = 848;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,88,Context) ) {
			case 1:
				{
				State = 846;
				fromBlock();
				}
				break;
			case 2:
				{
				State = 847;
				statement();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariableStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public BindingPatternContext bindingPattern() {
			return GetRuleContext<BindingPatternContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public InitializerContext initializer() {
			return GetRuleContext<InitializerContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeAnnotationContext typeAnnotation() {
			return GetRuleContext<TypeAnnotationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SemiColon() { return GetToken(TypeScriptParser.SemiColon, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public VariableDeclarationListContext variableDeclarationList() {
			return GetRuleContext<VariableDeclarationListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AccessibilityModifierContext accessibilityModifier() {
			return GetRuleContext<AccessibilityModifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public VarModifierContext varModifier() {
			return GetRuleContext<VarModifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ReadOnly() { return GetToken(TypeScriptParser.ReadOnly, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Declare() { return GetToken(TypeScriptParser.Declare, 0); }
		public VariableStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variableStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.EnterVariableStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.ExitVariableStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypeScriptParserVisitor<TResult> typedVisitor = visitor as ITypeScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariableStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VariableStatementContext variableStatement() {
		VariableStatementContext _localctx = new VariableStatementContext(Context, State);
		EnterRule(_localctx, 138, RULE_variableStatement);
		int _la;
		try {
			State = 879;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,97,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 850;
				bindingPattern();
				State = 852;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==Colon) {
					{
					State = 851;
					typeAnnotation();
					}
				}

				State = 854;
				initializer();
				State = 856;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,90,Context) ) {
				case 1:
					{
					State = 855;
					Match(SemiColon);
					}
					break;
				}
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 859;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (((((_la - 100)) & ~0x3f) == 0 && ((1L << (_la - 100)) & ((1L << (Private - 100)) | (1L << (Public - 100)) | (1L << (Protected - 100)))) != 0)) {
					{
					State = 858;
					accessibilityModifier();
					}
				}

				State = 862;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (((((_la - 68)) & ~0x3f) == 0 && ((1L << (_la - 68)) & ((1L << (Var - 68)) | (1L << (Const - 68)) | (1L << (Let - 68)))) != 0)) {
					{
					State = 861;
					varModifier();
					}
				}

				State = 865;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==ReadOnly) {
					{
					State = 864;
					Match(ReadOnly);
					}
				}

				State = 867;
				variableDeclarationList();
				State = 869;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,94,Context) ) {
				case 1:
					{
					State = 868;
					Match(SemiColon);
					}
					break;
				}
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 871;
				Match(Declare);
				State = 873;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (((((_la - 68)) & ~0x3f) == 0 && ((1L << (_la - 68)) & ((1L << (Var - 68)) | (1L << (Const - 68)) | (1L << (Let - 68)))) != 0)) {
					{
					State = 872;
					varModifier();
					}
				}

				State = 875;
				variableDeclarationList();
				State = 877;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,96,Context) ) {
				case 1:
					{
					State = 876;
					Match(SemiColon);
					}
					break;
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariableDeclarationListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public VariableDeclarationContext[] variableDeclaration() {
			return GetRuleContexts<VariableDeclarationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public VariableDeclarationContext variableDeclaration(int i) {
			return GetRuleContext<VariableDeclarationContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Comma() { return GetTokens(TypeScriptParser.Comma); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comma(int i) {
			return GetToken(TypeScriptParser.Comma, i);
		}
		public VariableDeclarationListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variableDeclarationList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.EnterVariableDeclarationList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.ExitVariableDeclarationList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypeScriptParserVisitor<TResult> typedVisitor = visitor as ITypeScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariableDeclarationList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VariableDeclarationListContext variableDeclarationList() {
		VariableDeclarationListContext _localctx = new VariableDeclarationListContext(Context, State);
		EnterRule(_localctx, 140, RULE_variableDeclarationList);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 881;
			variableDeclaration();
			State = 886;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,98,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 882;
					Match(Comma);
					State = 883;
					variableDeclaration();
					}
					} 
				}
				State = 888;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,98,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariableDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierOrKeyWordContext identifierOrKeyWord() {
			return GetRuleContext<IdentifierOrKeyWordContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArrayLiteralContext arrayLiteral() {
			return GetRuleContext<ArrayLiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ObjectLiteralContext objectLiteral() {
			return GetRuleContext<ObjectLiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeAnnotationContext typeAnnotation() {
			return GetRuleContext<TypeAnnotationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SingleExpressionContext[] singleExpression() {
			return GetRuleContexts<SingleExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SingleExpressionContext singleExpression(int i) {
			return GetRuleContext<SingleExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Assign() { return GetToken(TypeScriptParser.Assign, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeParametersContext typeParameters() {
			return GetRuleContext<TypeParametersContext>(0);
		}
		public VariableDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variableDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.EnterVariableDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.ExitVariableDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypeScriptParserVisitor<TResult> typedVisitor = visitor as ITypeScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariableDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VariableDeclarationContext variableDeclaration() {
		VariableDeclarationContext _localctx = new VariableDeclarationContext(Context, State);
		EnterRule(_localctx, 142, RULE_variableDeclaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 892;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case TypeAlias:
			case Require:
			case Identifier:
				{
				State = 889;
				identifierOrKeyWord();
				}
				break;
			case OpenBracket:
				{
				State = 890;
				arrayLiteral();
				}
				break;
			case OpenBrace:
				{
				State = 891;
				objectLiteral();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 895;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,100,Context) ) {
			case 1:
				{
				State = 894;
				typeAnnotation();
				}
				break;
			}
			State = 898;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,101,Context) ) {
			case 1:
				{
				State = 897;
				singleExpression(0);
				}
				break;
			}
			State = 905;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,103,Context) ) {
			case 1:
				{
				State = 900;
				Match(Assign);
				State = 902;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,102,Context) ) {
				case 1:
					{
					State = 901;
					typeParameters();
					}
					break;
				}
				State = 904;
				singleExpression(0);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EmptyStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SemiColon() { return GetToken(TypeScriptParser.SemiColon, 0); }
		public EmptyStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_emptyStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.EnterEmptyStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.ExitEmptyStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypeScriptParserVisitor<TResult> typedVisitor = visitor as ITypeScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEmptyStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EmptyStatementContext emptyStatement() {
		EmptyStatementContext _localctx = new EmptyStatementContext(Context, State);
		EnterRule(_localctx, 144, RULE_emptyStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 907;
			Match(SemiColon);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionSequenceContext expressionSequence() {
			return GetRuleContext<ExpressionSequenceContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SemiColon() { return GetToken(TypeScriptParser.SemiColon, 0); }
		public ExpressionStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expressionStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.EnterExpressionStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.ExitExpressionStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypeScriptParserVisitor<TResult> typedVisitor = visitor as ITypeScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpressionStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionStatementContext expressionStatement() {
		ExpressionStatementContext _localctx = new ExpressionStatementContext(Context, State);
		EnterRule(_localctx, 146, RULE_expressionStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 909;
			if (!(this.notOpenBraceAndNotFunction())) throw new FailedPredicateException(this, "this.notOpenBraceAndNotFunction()");
			State = 910;
			expressionSequence();
			State = 912;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,104,Context) ) {
			case 1:
				{
				State = 911;
				Match(SemiColon);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IfStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode If() { return GetToken(TypeScriptParser.If, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OpenParen() { return GetToken(TypeScriptParser.OpenParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionSequenceContext expressionSequence() {
			return GetRuleContext<ExpressionSequenceContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CloseParen() { return GetToken(TypeScriptParser.CloseParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Else() { return GetToken(TypeScriptParser.Else, 0); }
		public IfStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ifStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.EnterIfStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.ExitIfStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypeScriptParserVisitor<TResult> typedVisitor = visitor as ITypeScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIfStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IfStatementContext ifStatement() {
		IfStatementContext _localctx = new IfStatementContext(Context, State);
		EnterRule(_localctx, 148, RULE_ifStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 914;
			Match(If);
			State = 915;
			Match(OpenParen);
			State = 916;
			expressionSequence();
			State = 917;
			Match(CloseParen);
			State = 918;
			statement();
			State = 921;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,105,Context) ) {
			case 1:
				{
				State = 919;
				Match(Else);
				State = 920;
				statement();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IterationStatementContext : ParserRuleContext {
		public IterationStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_iterationStatement; } }
	 
		public IterationStatementContext() { }
		public virtual void CopyFrom(IterationStatementContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class DoStatementContext : IterationStatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Do() { return GetToken(TypeScriptParser.Do, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode While() { return GetToken(TypeScriptParser.While, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OpenParen() { return GetToken(TypeScriptParser.OpenParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionSequenceContext expressionSequence() {
			return GetRuleContext<ExpressionSequenceContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CloseParen() { return GetToken(TypeScriptParser.CloseParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public EosContext eos() {
			return GetRuleContext<EosContext>(0);
		}
		public DoStatementContext(IterationStatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.EnterDoStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.ExitDoStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypeScriptParserVisitor<TResult> typedVisitor = visitor as ITypeScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDoStatement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ForVarStatementContext : IterationStatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode For() { return GetToken(TypeScriptParser.For, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OpenParen() { return GetToken(TypeScriptParser.OpenParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public VarModifierContext varModifier() {
			return GetRuleContext<VarModifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public VariableDeclarationListContext variableDeclarationList() {
			return GetRuleContext<VariableDeclarationListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SemiColon() { return GetTokens(TypeScriptParser.SemiColon); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SemiColon(int i) {
			return GetToken(TypeScriptParser.SemiColon, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CloseParen() { return GetToken(TypeScriptParser.CloseParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionSequenceContext[] expressionSequence() {
			return GetRuleContexts<ExpressionSequenceContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionSequenceContext expressionSequence(int i) {
			return GetRuleContext<ExpressionSequenceContext>(i);
		}
		public ForVarStatementContext(IterationStatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.EnterForVarStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.ExitForVarStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypeScriptParserVisitor<TResult> typedVisitor = visitor as ITypeScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForVarStatement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ForVarInStatementContext : IterationStatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode For() { return GetToken(TypeScriptParser.For, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OpenParen() { return GetToken(TypeScriptParser.OpenParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public VarModifierContext varModifier() {
			return GetRuleContext<VarModifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public VariableDeclarationContext variableDeclaration() {
			return GetRuleContext<VariableDeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionSequenceContext expressionSequence() {
			return GetRuleContext<ExpressionSequenceContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CloseParen() { return GetToken(TypeScriptParser.CloseParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode In() { return GetToken(TypeScriptParser.In, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(TypeScriptParser.Identifier, 0); }
		public ForVarInStatementContext(IterationStatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.EnterForVarInStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.ExitForVarInStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypeScriptParserVisitor<TResult> typedVisitor = visitor as ITypeScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForVarInStatement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class WhileStatementContext : IterationStatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode While() { return GetToken(TypeScriptParser.While, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OpenParen() { return GetToken(TypeScriptParser.OpenParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionSequenceContext expressionSequence() {
			return GetRuleContext<ExpressionSequenceContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CloseParen() { return GetToken(TypeScriptParser.CloseParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		public WhileStatementContext(IterationStatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.EnterWhileStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.ExitWhileStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypeScriptParserVisitor<TResult> typedVisitor = visitor as ITypeScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWhileStatement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ForStatementContext : IterationStatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode For() { return GetToken(TypeScriptParser.For, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OpenParen() { return GetToken(TypeScriptParser.OpenParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SemiColon() { return GetTokens(TypeScriptParser.SemiColon); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SemiColon(int i) {
			return GetToken(TypeScriptParser.SemiColon, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CloseParen() { return GetToken(TypeScriptParser.CloseParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionSequenceContext[] expressionSequence() {
			return GetRuleContexts<ExpressionSequenceContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionSequenceContext expressionSequence(int i) {
			return GetRuleContext<ExpressionSequenceContext>(i);
		}
		public ForStatementContext(IterationStatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.EnterForStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.ExitForStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypeScriptParserVisitor<TResult> typedVisitor = visitor as ITypeScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForStatement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ForInStatementContext : IterationStatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode For() { return GetToken(TypeScriptParser.For, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OpenParen() { return GetToken(TypeScriptParser.OpenParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SingleExpressionContext singleExpression() {
			return GetRuleContext<SingleExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionSequenceContext expressionSequence() {
			return GetRuleContext<ExpressionSequenceContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CloseParen() { return GetToken(TypeScriptParser.CloseParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode In() { return GetToken(TypeScriptParser.In, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(TypeScriptParser.Identifier, 0); }
		public ForInStatementContext(IterationStatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.EnterForInStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.ExitForInStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypeScriptParserVisitor<TResult> typedVisitor = visitor as ITypeScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForInStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IterationStatementContext iterationStatement() {
		IterationStatementContext _localctx = new IterationStatementContext(Context, State);
		EnterRule(_localctx, 150, RULE_iterationStatement);
		int _la;
		try {
			State = 992;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,113,Context) ) {
			case 1:
				_localctx = new DoStatementContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 923;
				Match(Do);
				State = 924;
				statement();
				State = 925;
				Match(While);
				State = 926;
				Match(OpenParen);
				State = 927;
				expressionSequence();
				State = 928;
				Match(CloseParen);
				State = 929;
				eos();
				}
				break;
			case 2:
				_localctx = new WhileStatementContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 931;
				Match(While);
				State = 932;
				Match(OpenParen);
				State = 933;
				expressionSequence();
				State = 934;
				Match(CloseParen);
				State = 935;
				statement();
				}
				break;
			case 3:
				_localctx = new ForStatementContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 937;
				Match(For);
				State = 938;
				Match(OpenParen);
				State = 940;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << RegularExpressionLiteral) | (1L << OpenBracket) | (1L << OpenParen) | (1L << OpenBrace) | (1L << PlusPlus) | (1L << MinusMinus) | (1L << Plus) | (1L << Minus) | (1L << BitNot) | (1L << Not) | (1L << LessThan) | (1L << NullLiteral) | (1L << BooleanLiteral) | (1L << DecimalLiteral) | (1L << HexIntegerLiteral) | (1L << OctalIntegerLiteral) | (1L << OctalIntegerLiteral2) | (1L << BinaryIntegerLiteral) | (1L << Break) | (1L << Do) | (1L << Instanceof))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (Typeof - 64)) | (1L << (Case - 64)) | (1L << (Else - 64)) | (1L << (New - 64)) | (1L << (Var - 64)) | (1L << (Catch - 64)) | (1L << (Finally - 64)) | (1L << (Return - 64)) | (1L << (Void - 64)) | (1L << (Continue - 64)) | (1L << (For - 64)) | (1L << (Switch - 64)) | (1L << (While - 64)) | (1L << (Debugger - 64)) | (1L << (Function - 64)) | (1L << (This - 64)) | (1L << (With - 64)) | (1L << (Default - 64)) | (1L << (If - 64)) | (1L << (Throw - 64)) | (1L << (Delete - 64)) | (1L << (In - 64)) | (1L << (Try - 64)) | (1L << (From - 64)) | (1L << (ReadOnly - 64)) | (1L << (Async - 64)) | (1L << (Class - 64)) | (1L << (Enum - 64)) | (1L << (Extends - 64)) | (1L << (Super - 64)) | (1L << (Const - 64)) | (1L << (Export - 64)) | (1L << (Import - 64)) | (1L << (Implements - 64)) | (1L << (Let - 64)) | (1L << (Private - 64)) | (1L << (Public - 64)) | (1L << (Interface - 64)) | (1L << (Package - 64)) | (1L << (Protected - 64)) | (1L << (Static - 64)) | (1L << (Yield - 64)) | (1L << (String - 64)) | (1L << (TypeAlias - 64)) | (1L << (Get - 64)) | (1L << (Set - 64)) | (1L << (Require - 64)) | (1L << (Identifier - 64)) | (1L << (StringLiteral - 64)) | (1L << (TemplateStringLiteral - 64)))) != 0)) {
					{
					State = 939;
					expressionSequence();
					}
				}

				State = 942;
				Match(SemiColon);
				State = 944;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << RegularExpressionLiteral) | (1L << OpenBracket) | (1L << OpenParen) | (1L << OpenBrace) | (1L << PlusPlus) | (1L << MinusMinus) | (1L << Plus) | (1L << Minus) | (1L << BitNot) | (1L << Not) | (1L << LessThan) | (1L << NullLiteral) | (1L << BooleanLiteral) | (1L << DecimalLiteral) | (1L << HexIntegerLiteral) | (1L << OctalIntegerLiteral) | (1L << OctalIntegerLiteral2) | (1L << BinaryIntegerLiteral) | (1L << Break) | (1L << Do) | (1L << Instanceof))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (Typeof - 64)) | (1L << (Case - 64)) | (1L << (Else - 64)) | (1L << (New - 64)) | (1L << (Var - 64)) | (1L << (Catch - 64)) | (1L << (Finally - 64)) | (1L << (Return - 64)) | (1L << (Void - 64)) | (1L << (Continue - 64)) | (1L << (For - 64)) | (1L << (Switch - 64)) | (1L << (While - 64)) | (1L << (Debugger - 64)) | (1L << (Function - 64)) | (1L << (This - 64)) | (1L << (With - 64)) | (1L << (Default - 64)) | (1L << (If - 64)) | (1L << (Throw - 64)) | (1L << (Delete - 64)) | (1L << (In - 64)) | (1L << (Try - 64)) | (1L << (From - 64)) | (1L << (ReadOnly - 64)) | (1L << (Async - 64)) | (1L << (Class - 64)) | (1L << (Enum - 64)) | (1L << (Extends - 64)) | (1L << (Super - 64)) | (1L << (Const - 64)) | (1L << (Export - 64)) | (1L << (Import - 64)) | (1L << (Implements - 64)) | (1L << (Let - 64)) | (1L << (Private - 64)) | (1L << (Public - 64)) | (1L << (Interface - 64)) | (1L << (Package - 64)) | (1L << (Protected - 64)) | (1L << (Static - 64)) | (1L << (Yield - 64)) | (1L << (String - 64)) | (1L << (TypeAlias - 64)) | (1L << (Get - 64)) | (1L << (Set - 64)) | (1L << (Require - 64)) | (1L << (Identifier - 64)) | (1L << (StringLiteral - 64)) | (1L << (TemplateStringLiteral - 64)))) != 0)) {
					{
					State = 943;
					expressionSequence();
					}
				}

				State = 946;
				Match(SemiColon);
				State = 948;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << RegularExpressionLiteral) | (1L << OpenBracket) | (1L << OpenParen) | (1L << OpenBrace) | (1L << PlusPlus) | (1L << MinusMinus) | (1L << Plus) | (1L << Minus) | (1L << BitNot) | (1L << Not) | (1L << LessThan) | (1L << NullLiteral) | (1L << BooleanLiteral) | (1L << DecimalLiteral) | (1L << HexIntegerLiteral) | (1L << OctalIntegerLiteral) | (1L << OctalIntegerLiteral2) | (1L << BinaryIntegerLiteral) | (1L << Break) | (1L << Do) | (1L << Instanceof))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (Typeof - 64)) | (1L << (Case - 64)) | (1L << (Else - 64)) | (1L << (New - 64)) | (1L << (Var - 64)) | (1L << (Catch - 64)) | (1L << (Finally - 64)) | (1L << (Return - 64)) | (1L << (Void - 64)) | (1L << (Continue - 64)) | (1L << (For - 64)) | (1L << (Switch - 64)) | (1L << (While - 64)) | (1L << (Debugger - 64)) | (1L << (Function - 64)) | (1L << (This - 64)) | (1L << (With - 64)) | (1L << (Default - 64)) | (1L << (If - 64)) | (1L << (Throw - 64)) | (1L << (Delete - 64)) | (1L << (In - 64)) | (1L << (Try - 64)) | (1L << (From - 64)) | (1L << (ReadOnly - 64)) | (1L << (Async - 64)) | (1L << (Class - 64)) | (1L << (Enum - 64)) | (1L << (Extends - 64)) | (1L << (Super - 64)) | (1L << (Const - 64)) | (1L << (Export - 64)) | (1L << (Import - 64)) | (1L << (Implements - 64)) | (1L << (Let - 64)) | (1L << (Private - 64)) | (1L << (Public - 64)) | (1L << (Interface - 64)) | (1L << (Package - 64)) | (1L << (Protected - 64)) | (1L << (Static - 64)) | (1L << (Yield - 64)) | (1L << (String - 64)) | (1L << (TypeAlias - 64)) | (1L << (Get - 64)) | (1L << (Set - 64)) | (1L << (Require - 64)) | (1L << (Identifier - 64)) | (1L << (StringLiteral - 64)) | (1L << (TemplateStringLiteral - 64)))) != 0)) {
					{
					State = 947;
					expressionSequence();
					}
				}

				State = 950;
				Match(CloseParen);
				State = 951;
				statement();
				}
				break;
			case 4:
				_localctx = new ForVarStatementContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 952;
				Match(For);
				State = 953;
				Match(OpenParen);
				State = 954;
				varModifier();
				State = 955;
				variableDeclarationList();
				State = 956;
				Match(SemiColon);
				State = 958;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << RegularExpressionLiteral) | (1L << OpenBracket) | (1L << OpenParen) | (1L << OpenBrace) | (1L << PlusPlus) | (1L << MinusMinus) | (1L << Plus) | (1L << Minus) | (1L << BitNot) | (1L << Not) | (1L << LessThan) | (1L << NullLiteral) | (1L << BooleanLiteral) | (1L << DecimalLiteral) | (1L << HexIntegerLiteral) | (1L << OctalIntegerLiteral) | (1L << OctalIntegerLiteral2) | (1L << BinaryIntegerLiteral) | (1L << Break) | (1L << Do) | (1L << Instanceof))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (Typeof - 64)) | (1L << (Case - 64)) | (1L << (Else - 64)) | (1L << (New - 64)) | (1L << (Var - 64)) | (1L << (Catch - 64)) | (1L << (Finally - 64)) | (1L << (Return - 64)) | (1L << (Void - 64)) | (1L << (Continue - 64)) | (1L << (For - 64)) | (1L << (Switch - 64)) | (1L << (While - 64)) | (1L << (Debugger - 64)) | (1L << (Function - 64)) | (1L << (This - 64)) | (1L << (With - 64)) | (1L << (Default - 64)) | (1L << (If - 64)) | (1L << (Throw - 64)) | (1L << (Delete - 64)) | (1L << (In - 64)) | (1L << (Try - 64)) | (1L << (From - 64)) | (1L << (ReadOnly - 64)) | (1L << (Async - 64)) | (1L << (Class - 64)) | (1L << (Enum - 64)) | (1L << (Extends - 64)) | (1L << (Super - 64)) | (1L << (Const - 64)) | (1L << (Export - 64)) | (1L << (Import - 64)) | (1L << (Implements - 64)) | (1L << (Let - 64)) | (1L << (Private - 64)) | (1L << (Public - 64)) | (1L << (Interface - 64)) | (1L << (Package - 64)) | (1L << (Protected - 64)) | (1L << (Static - 64)) | (1L << (Yield - 64)) | (1L << (String - 64)) | (1L << (TypeAlias - 64)) | (1L << (Get - 64)) | (1L << (Set - 64)) | (1L << (Require - 64)) | (1L << (Identifier - 64)) | (1L << (StringLiteral - 64)) | (1L << (TemplateStringLiteral - 64)))) != 0)) {
					{
					State = 957;
					expressionSequence();
					}
				}

				State = 960;
				Match(SemiColon);
				State = 962;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << RegularExpressionLiteral) | (1L << OpenBracket) | (1L << OpenParen) | (1L << OpenBrace) | (1L << PlusPlus) | (1L << MinusMinus) | (1L << Plus) | (1L << Minus) | (1L << BitNot) | (1L << Not) | (1L << LessThan) | (1L << NullLiteral) | (1L << BooleanLiteral) | (1L << DecimalLiteral) | (1L << HexIntegerLiteral) | (1L << OctalIntegerLiteral) | (1L << OctalIntegerLiteral2) | (1L << BinaryIntegerLiteral) | (1L << Break) | (1L << Do) | (1L << Instanceof))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (Typeof - 64)) | (1L << (Case - 64)) | (1L << (Else - 64)) | (1L << (New - 64)) | (1L << (Var - 64)) | (1L << (Catch - 64)) | (1L << (Finally - 64)) | (1L << (Return - 64)) | (1L << (Void - 64)) | (1L << (Continue - 64)) | (1L << (For - 64)) | (1L << (Switch - 64)) | (1L << (While - 64)) | (1L << (Debugger - 64)) | (1L << (Function - 64)) | (1L << (This - 64)) | (1L << (With - 64)) | (1L << (Default - 64)) | (1L << (If - 64)) | (1L << (Throw - 64)) | (1L << (Delete - 64)) | (1L << (In - 64)) | (1L << (Try - 64)) | (1L << (From - 64)) | (1L << (ReadOnly - 64)) | (1L << (Async - 64)) | (1L << (Class - 64)) | (1L << (Enum - 64)) | (1L << (Extends - 64)) | (1L << (Super - 64)) | (1L << (Const - 64)) | (1L << (Export - 64)) | (1L << (Import - 64)) | (1L << (Implements - 64)) | (1L << (Let - 64)) | (1L << (Private - 64)) | (1L << (Public - 64)) | (1L << (Interface - 64)) | (1L << (Package - 64)) | (1L << (Protected - 64)) | (1L << (Static - 64)) | (1L << (Yield - 64)) | (1L << (String - 64)) | (1L << (TypeAlias - 64)) | (1L << (Get - 64)) | (1L << (Set - 64)) | (1L << (Require - 64)) | (1L << (Identifier - 64)) | (1L << (StringLiteral - 64)) | (1L << (TemplateStringLiteral - 64)))) != 0)) {
					{
					State = 961;
					expressionSequence();
					}
				}

				State = 964;
				Match(CloseParen);
				State = 965;
				statement();
				}
				break;
			case 5:
				_localctx = new ForInStatementContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 967;
				Match(For);
				State = 968;
				Match(OpenParen);
				State = 969;
				singleExpression(0);
				State = 973;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case In:
					{
					State = 970;
					Match(In);
					}
					break;
				case Identifier:
					{
					State = 971;
					Match(Identifier);
					State = 972;
					if (!(this.p("of"))) throw new FailedPredicateException(this, "this.p(\"of\")");
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 975;
				expressionSequence();
				State = 976;
				Match(CloseParen);
				State = 977;
				statement();
				}
				break;
			case 6:
				_localctx = new ForVarInStatementContext(_localctx);
				EnterOuterAlt(_localctx, 6);
				{
				State = 979;
				Match(For);
				State = 980;
				Match(OpenParen);
				State = 981;
				varModifier();
				State = 982;
				variableDeclaration();
				State = 986;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case In:
					{
					State = 983;
					Match(In);
					}
					break;
				case Identifier:
					{
					State = 984;
					Match(Identifier);
					State = 985;
					if (!(this.p("of"))) throw new FailedPredicateException(this, "this.p(\"of\")");
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 988;
				expressionSequence();
				State = 989;
				Match(CloseParen);
				State = 990;
				statement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VarModifierContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Var() { return GetToken(TypeScriptParser.Var, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Let() { return GetToken(TypeScriptParser.Let, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Const() { return GetToken(TypeScriptParser.Const, 0); }
		public VarModifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_varModifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.EnterVarModifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.ExitVarModifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypeScriptParserVisitor<TResult> typedVisitor = visitor as ITypeScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVarModifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VarModifierContext varModifier() {
		VarModifierContext _localctx = new VarModifierContext(Context, State);
		EnterRule(_localctx, 152, RULE_varModifier);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 994;
			_la = TokenStream.LA(1);
			if ( !(((((_la - 68)) & ~0x3f) == 0 && ((1L << (_la - 68)) & ((1L << (Var - 68)) | (1L << (Const - 68)) | (1L << (Let - 68)))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ContinueStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Continue() { return GetToken(TypeScriptParser.Continue, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public EosContext eos() {
			return GetRuleContext<EosContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(TypeScriptParser.Identifier, 0); }
		public ContinueStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_continueStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.EnterContinueStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.ExitContinueStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypeScriptParserVisitor<TResult> typedVisitor = visitor as ITypeScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitContinueStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ContinueStatementContext continueStatement() {
		ContinueStatementContext _localctx = new ContinueStatementContext(Context, State);
		EnterRule(_localctx, 154, RULE_continueStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 996;
			Match(Continue);
			State = 999;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,114,Context) ) {
			case 1:
				{
				State = 997;
				if (!(this.notLineTerminator())) throw new FailedPredicateException(this, "this.notLineTerminator()");
				State = 998;
				Match(Identifier);
				}
				break;
			}
			State = 1001;
			eos();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BreakStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Break() { return GetToken(TypeScriptParser.Break, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public EosContext eos() {
			return GetRuleContext<EosContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(TypeScriptParser.Identifier, 0); }
		public BreakStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_breakStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.EnterBreakStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.ExitBreakStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypeScriptParserVisitor<TResult> typedVisitor = visitor as ITypeScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBreakStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BreakStatementContext breakStatement() {
		BreakStatementContext _localctx = new BreakStatementContext(Context, State);
		EnterRule(_localctx, 156, RULE_breakStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1003;
			Match(Break);
			State = 1006;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,115,Context) ) {
			case 1:
				{
				State = 1004;
				if (!(this.notLineTerminator())) throw new FailedPredicateException(this, "this.notLineTerminator()");
				State = 1005;
				Match(Identifier);
				}
				break;
			}
			State = 1008;
			eos();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReturnStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Return() { return GetToken(TypeScriptParser.Return, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public EosContext eos() {
			return GetRuleContext<EosContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionSequenceContext expressionSequence() {
			return GetRuleContext<ExpressionSequenceContext>(0);
		}
		public ReturnStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_returnStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.EnterReturnStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.ExitReturnStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypeScriptParserVisitor<TResult> typedVisitor = visitor as ITypeScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReturnStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ReturnStatementContext returnStatement() {
		ReturnStatementContext _localctx = new ReturnStatementContext(Context, State);
		EnterRule(_localctx, 158, RULE_returnStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1010;
			Match(Return);
			State = 1013;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,116,Context) ) {
			case 1:
				{
				State = 1011;
				if (!(this.notLineTerminator())) throw new FailedPredicateException(this, "this.notLineTerminator()");
				State = 1012;
				expressionSequence();
				}
				break;
			}
			State = 1015;
			eos();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class YieldStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Yield() { return GetToken(TypeScriptParser.Yield, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public EosContext eos() {
			return GetRuleContext<EosContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionSequenceContext expressionSequence() {
			return GetRuleContext<ExpressionSequenceContext>(0);
		}
		public YieldStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_yieldStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.EnterYieldStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.ExitYieldStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypeScriptParserVisitor<TResult> typedVisitor = visitor as ITypeScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitYieldStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public YieldStatementContext yieldStatement() {
		YieldStatementContext _localctx = new YieldStatementContext(Context, State);
		EnterRule(_localctx, 160, RULE_yieldStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1017;
			Match(Yield);
			State = 1020;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,117,Context) ) {
			case 1:
				{
				State = 1018;
				if (!(this.notLineTerminator())) throw new FailedPredicateException(this, "this.notLineTerminator()");
				State = 1019;
				expressionSequence();
				}
				break;
			}
			State = 1022;
			eos();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WithStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode With() { return GetToken(TypeScriptParser.With, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OpenParen() { return GetToken(TypeScriptParser.OpenParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionSequenceContext expressionSequence() {
			return GetRuleContext<ExpressionSequenceContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CloseParen() { return GetToken(TypeScriptParser.CloseParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		public WithStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_withStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.EnterWithStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.ExitWithStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypeScriptParserVisitor<TResult> typedVisitor = visitor as ITypeScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWithStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public WithStatementContext withStatement() {
		WithStatementContext _localctx = new WithStatementContext(Context, State);
		EnterRule(_localctx, 162, RULE_withStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1024;
			Match(With);
			State = 1025;
			Match(OpenParen);
			State = 1026;
			expressionSequence();
			State = 1027;
			Match(CloseParen);
			State = 1028;
			statement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SwitchStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Switch() { return GetToken(TypeScriptParser.Switch, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OpenParen() { return GetToken(TypeScriptParser.OpenParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionSequenceContext expressionSequence() {
			return GetRuleContext<ExpressionSequenceContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CloseParen() { return GetToken(TypeScriptParser.CloseParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public CaseBlockContext caseBlock() {
			return GetRuleContext<CaseBlockContext>(0);
		}
		public SwitchStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_switchStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.EnterSwitchStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.ExitSwitchStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypeScriptParserVisitor<TResult> typedVisitor = visitor as ITypeScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSwitchStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SwitchStatementContext switchStatement() {
		SwitchStatementContext _localctx = new SwitchStatementContext(Context, State);
		EnterRule(_localctx, 164, RULE_switchStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1030;
			Match(Switch);
			State = 1031;
			Match(OpenParen);
			State = 1032;
			expressionSequence();
			State = 1033;
			Match(CloseParen);
			State = 1034;
			caseBlock();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CaseBlockContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OpenBrace() { return GetToken(TypeScriptParser.OpenBrace, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CloseBrace() { return GetToken(TypeScriptParser.CloseBrace, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public CaseClausesContext[] caseClauses() {
			return GetRuleContexts<CaseClausesContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public CaseClausesContext caseClauses(int i) {
			return GetRuleContext<CaseClausesContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DefaultClauseContext defaultClause() {
			return GetRuleContext<DefaultClauseContext>(0);
		}
		public CaseBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_caseBlock; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.EnterCaseBlock(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.ExitCaseBlock(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypeScriptParserVisitor<TResult> typedVisitor = visitor as ITypeScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCaseBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CaseBlockContext caseBlock() {
		CaseBlockContext _localctx = new CaseBlockContext(Context, State);
		EnterRule(_localctx, 166, RULE_caseBlock);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1036;
			Match(OpenBrace);
			State = 1038;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Case) {
				{
				State = 1037;
				caseClauses();
				}
			}

			State = 1044;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Default) {
				{
				State = 1040;
				defaultClause();
				State = 1042;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==Case) {
					{
					State = 1041;
					caseClauses();
					}
				}

				}
			}

			State = 1046;
			Match(CloseBrace);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CaseClausesContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public CaseClauseContext[] caseClause() {
			return GetRuleContexts<CaseClauseContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public CaseClauseContext caseClause(int i) {
			return GetRuleContext<CaseClauseContext>(i);
		}
		public CaseClausesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_caseClauses; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.EnterCaseClauses(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.ExitCaseClauses(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypeScriptParserVisitor<TResult> typedVisitor = visitor as ITypeScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCaseClauses(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CaseClausesContext caseClauses() {
		CaseClausesContext _localctx = new CaseClausesContext(Context, State);
		EnterRule(_localctx, 168, RULE_caseClauses);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1049;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 1048;
				caseClause();
				}
				}
				State = 1051;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==Case );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CaseClauseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Case() { return GetToken(TypeScriptParser.Case, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionSequenceContext expressionSequence() {
			return GetRuleContext<ExpressionSequenceContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Colon() { return GetToken(TypeScriptParser.Colon, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementListContext statementList() {
			return GetRuleContext<StatementListContext>(0);
		}
		public CaseClauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_caseClause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.EnterCaseClause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.ExitCaseClause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypeScriptParserVisitor<TResult> typedVisitor = visitor as ITypeScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCaseClause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CaseClauseContext caseClause() {
		CaseClauseContext _localctx = new CaseClauseContext(Context, State);
		EnterRule(_localctx, 170, RULE_caseClause);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1053;
			Match(Case);
			State = 1054;
			expressionSequence();
			State = 1055;
			Match(Colon);
			State = 1057;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,122,Context) ) {
			case 1:
				{
				State = 1056;
				statementList();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DefaultClauseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Default() { return GetToken(TypeScriptParser.Default, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Colon() { return GetToken(TypeScriptParser.Colon, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementListContext statementList() {
			return GetRuleContext<StatementListContext>(0);
		}
		public DefaultClauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_defaultClause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.EnterDefaultClause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.ExitDefaultClause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypeScriptParserVisitor<TResult> typedVisitor = visitor as ITypeScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDefaultClause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DefaultClauseContext defaultClause() {
		DefaultClauseContext _localctx = new DefaultClauseContext(Context, State);
		EnterRule(_localctx, 172, RULE_defaultClause);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1059;
			Match(Default);
			State = 1060;
			Match(Colon);
			State = 1062;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,123,Context) ) {
			case 1:
				{
				State = 1061;
				statementList();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LabelledStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(TypeScriptParser.Identifier, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Colon() { return GetToken(TypeScriptParser.Colon, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		public LabelledStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_labelledStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.EnterLabelledStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.ExitLabelledStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypeScriptParserVisitor<TResult> typedVisitor = visitor as ITypeScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLabelledStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LabelledStatementContext labelledStatement() {
		LabelledStatementContext _localctx = new LabelledStatementContext(Context, State);
		EnterRule(_localctx, 174, RULE_labelledStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1064;
			Match(Identifier);
			State = 1065;
			Match(Colon);
			State = 1066;
			statement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ThrowStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Throw() { return GetToken(TypeScriptParser.Throw, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionSequenceContext expressionSequence() {
			return GetRuleContext<ExpressionSequenceContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public EosContext eos() {
			return GetRuleContext<EosContext>(0);
		}
		public ThrowStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_throwStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.EnterThrowStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.ExitThrowStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypeScriptParserVisitor<TResult> typedVisitor = visitor as ITypeScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitThrowStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ThrowStatementContext throwStatement() {
		ThrowStatementContext _localctx = new ThrowStatementContext(Context, State);
		EnterRule(_localctx, 176, RULE_throwStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1068;
			Match(Throw);
			State = 1069;
			if (!(this.notLineTerminator())) throw new FailedPredicateException(this, "this.notLineTerminator()");
			State = 1070;
			expressionSequence();
			State = 1071;
			eos();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TryStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Try() { return GetToken(TypeScriptParser.Try, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CatchProductionContext catchProduction() {
			return GetRuleContext<CatchProductionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FinallyProductionContext finallyProduction() {
			return GetRuleContext<FinallyProductionContext>(0);
		}
		public TryStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tryStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.EnterTryStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.ExitTryStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypeScriptParserVisitor<TResult> typedVisitor = visitor as ITypeScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTryStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TryStatementContext tryStatement() {
		TryStatementContext _localctx = new TryStatementContext(Context, State);
		EnterRule(_localctx, 178, RULE_tryStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1073;
			Match(Try);
			State = 1074;
			block();
			State = 1080;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case Catch:
				{
				State = 1075;
				catchProduction();
				State = 1077;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,124,Context) ) {
				case 1:
					{
					State = 1076;
					finallyProduction();
					}
					break;
				}
				}
				break;
			case Finally:
				{
				State = 1079;
				finallyProduction();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CatchProductionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Catch() { return GetToken(TypeScriptParser.Catch, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OpenParen() { return GetToken(TypeScriptParser.OpenParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(TypeScriptParser.Identifier, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CloseParen() { return GetToken(TypeScriptParser.CloseParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public CatchProductionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_catchProduction; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.EnterCatchProduction(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.ExitCatchProduction(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypeScriptParserVisitor<TResult> typedVisitor = visitor as ITypeScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCatchProduction(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CatchProductionContext catchProduction() {
		CatchProductionContext _localctx = new CatchProductionContext(Context, State);
		EnterRule(_localctx, 180, RULE_catchProduction);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1082;
			Match(Catch);
			State = 1083;
			Match(OpenParen);
			State = 1084;
			Match(Identifier);
			State = 1085;
			Match(CloseParen);
			State = 1086;
			block();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FinallyProductionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Finally() { return GetToken(TypeScriptParser.Finally, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public FinallyProductionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_finallyProduction; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.EnterFinallyProduction(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.ExitFinallyProduction(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypeScriptParserVisitor<TResult> typedVisitor = visitor as ITypeScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFinallyProduction(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FinallyProductionContext finallyProduction() {
		FinallyProductionContext _localctx = new FinallyProductionContext(Context, State);
		EnterRule(_localctx, 182, RULE_finallyProduction);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1088;
			Match(Finally);
			State = 1089;
			block();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DebuggerStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Debugger() { return GetToken(TypeScriptParser.Debugger, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public EosContext eos() {
			return GetRuleContext<EosContext>(0);
		}
		public DebuggerStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_debuggerStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.EnterDebuggerStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.ExitDebuggerStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypeScriptParserVisitor<TResult> typedVisitor = visitor as ITypeScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDebuggerStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DebuggerStatementContext debuggerStatement() {
		DebuggerStatementContext _localctx = new DebuggerStatementContext(Context, State);
		EnterRule(_localctx, 184, RULE_debuggerStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1091;
			Match(Debugger);
			State = 1092;
			eos();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Function() { return GetToken(TypeScriptParser.Function, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(TypeScriptParser.Identifier, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public CallSignatureContext callSignature() {
			return GetRuleContext<CallSignatureContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SemiColon() { return GetToken(TypeScriptParser.SemiColon, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OpenBrace() { return GetToken(TypeScriptParser.OpenBrace, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FunctionBodyContext functionBody() {
			return GetRuleContext<FunctionBodyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CloseBrace() { return GetToken(TypeScriptParser.CloseBrace, 0); }
		public FunctionDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.EnterFunctionDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.ExitFunctionDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypeScriptParserVisitor<TResult> typedVisitor = visitor as ITypeScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionDeclarationContext functionDeclaration() {
		FunctionDeclarationContext _localctx = new FunctionDeclarationContext(Context, State);
		EnterRule(_localctx, 186, RULE_functionDeclaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1094;
			Match(Function);
			State = 1095;
			Match(Identifier);
			State = 1096;
			callSignature();
			State = 1102;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case OpenBrace:
				{
				{
				State = 1097;
				Match(OpenBrace);
				State = 1098;
				functionBody();
				State = 1099;
				Match(CloseBrace);
				}
				}
				break;
			case SemiColon:
				{
				State = 1101;
				Match(SemiColon);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClassDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Class() { return GetToken(TypeScriptParser.Class, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(TypeScriptParser.Identifier, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ClassHeritageContext classHeritage() {
			return GetRuleContext<ClassHeritageContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ClassTailContext classTail() {
			return GetRuleContext<ClassTailContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Abstract() { return GetToken(TypeScriptParser.Abstract, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeParametersContext typeParameters() {
			return GetRuleContext<TypeParametersContext>(0);
		}
		public ClassDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_classDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.EnterClassDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.ExitClassDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypeScriptParserVisitor<TResult> typedVisitor = visitor as ITypeScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClassDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ClassDeclarationContext classDeclaration() {
		ClassDeclarationContext _localctx = new ClassDeclarationContext(Context, State);
		EnterRule(_localctx, 188, RULE_classDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1105;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Abstract) {
				{
				State = 1104;
				Match(Abstract);
				}
			}

			State = 1107;
			Match(Class);
			State = 1108;
			Match(Identifier);
			State = 1110;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LessThan) {
				{
				State = 1109;
				typeParameters();
				}
			}

			State = 1112;
			classHeritage();
			State = 1113;
			classTail();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClassHeritageContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ClassExtendsClauseContext classExtendsClause() {
			return GetRuleContext<ClassExtendsClauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ImplementsClauseContext implementsClause() {
			return GetRuleContext<ImplementsClauseContext>(0);
		}
		public ClassHeritageContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_classHeritage; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.EnterClassHeritage(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.ExitClassHeritage(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypeScriptParserVisitor<TResult> typedVisitor = visitor as ITypeScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClassHeritage(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ClassHeritageContext classHeritage() {
		ClassHeritageContext _localctx = new ClassHeritageContext(Context, State);
		EnterRule(_localctx, 190, RULE_classHeritage);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1116;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Extends) {
				{
				State = 1115;
				classExtendsClause();
				}
			}

			State = 1119;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Implements) {
				{
				State = 1118;
				implementsClause();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClassTailContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OpenBrace() { return GetToken(TypeScriptParser.OpenBrace, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CloseBrace() { return GetToken(TypeScriptParser.CloseBrace, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ClassElementContext[] classElement() {
			return GetRuleContexts<ClassElementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ClassElementContext classElement(int i) {
			return GetRuleContext<ClassElementContext>(i);
		}
		public ClassTailContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_classTail; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.EnterClassTail(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.ExitClassTail(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypeScriptParserVisitor<TResult> typedVisitor = visitor as ITypeScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClassTail(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ClassTailContext classTail() {
		ClassTailContext _localctx = new ClassTailContext(Context, State);
		EnterRule(_localctx, 192, RULE_classTail);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1121;
			Match(OpenBrace);
			State = 1125;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,131,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 1122;
					classElement();
					}
					} 
				}
				State = 1127;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,131,Context);
			}
			State = 1128;
			Match(CloseBrace);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClassExtendsClauseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Extends() { return GetToken(TypeScriptParser.Extends, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeReferenceContext typeReference() {
			return GetRuleContext<TypeReferenceContext>(0);
		}
		public ClassExtendsClauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_classExtendsClause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.EnterClassExtendsClause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.ExitClassExtendsClause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypeScriptParserVisitor<TResult> typedVisitor = visitor as ITypeScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClassExtendsClause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ClassExtendsClauseContext classExtendsClause() {
		ClassExtendsClauseContext _localctx = new ClassExtendsClauseContext(Context, State);
		EnterRule(_localctx, 194, RULE_classExtendsClause);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1130;
			Match(Extends);
			State = 1131;
			typeReference();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ImplementsClauseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Implements() { return GetToken(TypeScriptParser.Implements, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ClassOrInterfaceTypeListContext classOrInterfaceTypeList() {
			return GetRuleContext<ClassOrInterfaceTypeListContext>(0);
		}
		public ImplementsClauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_implementsClause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.EnterImplementsClause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.ExitImplementsClause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypeScriptParserVisitor<TResult> typedVisitor = visitor as ITypeScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitImplementsClause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ImplementsClauseContext implementsClause() {
		ImplementsClauseContext _localctx = new ImplementsClauseContext(Context, State);
		EnterRule(_localctx, 196, RULE_implementsClause);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1133;
			Match(Implements);
			State = 1134;
			classOrInterfaceTypeList();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClassElementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ConstructorDeclarationContext constructorDeclaration() {
			return GetRuleContext<ConstructorDeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PropertyMemberDeclarationContext propertyMemberDeclaration() {
			return GetRuleContext<PropertyMemberDeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DecoratorListContext decoratorList() {
			return GetRuleContext<DecoratorListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IndexMemberDeclarationContext indexMemberDeclaration() {
			return GetRuleContext<IndexMemberDeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		public ClassElementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_classElement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.EnterClassElement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.ExitClassElement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypeScriptParserVisitor<TResult> typedVisitor = visitor as ITypeScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClassElement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ClassElementContext classElement() {
		ClassElementContext _localctx = new ClassElementContext(Context, State);
		EnterRule(_localctx, 198, RULE_classElement);
		int _la;
		try {
			State = 1143;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,133,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1136;
				constructorDeclaration();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1138;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==At) {
					{
					State = 1137;
					decoratorList();
					}
				}

				State = 1140;
				propertyMemberDeclaration();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1141;
				indexMemberDeclaration();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1142;
				statement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PropertyMemberDeclarationContext : ParserRuleContext {
		public PropertyMemberDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_propertyMemberDeclaration; } }
	 
		public PropertyMemberDeclarationContext() { }
		public virtual void CopyFrom(PropertyMemberDeclarationContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class PropertyDeclarationExpressionContext : PropertyMemberDeclarationContext {
		[System.Diagnostics.DebuggerNonUserCode] public PropertyMemberBaseContext propertyMemberBase() {
			return GetRuleContext<PropertyMemberBaseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PropertyNameContext propertyName() {
			return GetRuleContext<PropertyNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SemiColon() { return GetToken(TypeScriptParser.SemiColon, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode QuestionMark() { return GetToken(TypeScriptParser.QuestionMark, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeAnnotationContext typeAnnotation() {
			return GetRuleContext<TypeAnnotationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public InitializerContext initializer() {
			return GetRuleContext<InitializerContext>(0);
		}
		public PropertyDeclarationExpressionContext(PropertyMemberDeclarationContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.EnterPropertyDeclarationExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.ExitPropertyDeclarationExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypeScriptParserVisitor<TResult> typedVisitor = visitor as ITypeScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPropertyDeclarationExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class MethodDeclarationExpressionContext : PropertyMemberDeclarationContext {
		[System.Diagnostics.DebuggerNonUserCode] public PropertyMemberBaseContext propertyMemberBase() {
			return GetRuleContext<PropertyMemberBaseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PropertyNameContext propertyName() {
			return GetRuleContext<PropertyNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CallSignatureContext callSignature() {
			return GetRuleContext<CallSignatureContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SemiColon() { return GetToken(TypeScriptParser.SemiColon, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OpenBrace() { return GetToken(TypeScriptParser.OpenBrace, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FunctionBodyContext functionBody() {
			return GetRuleContext<FunctionBodyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CloseBrace() { return GetToken(TypeScriptParser.CloseBrace, 0); }
		public MethodDeclarationExpressionContext(PropertyMemberDeclarationContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.EnterMethodDeclarationExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.ExitMethodDeclarationExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypeScriptParserVisitor<TResult> typedVisitor = visitor as ITypeScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMethodDeclarationExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class GetterSetterDeclarationExpressionContext : PropertyMemberDeclarationContext {
		[System.Diagnostics.DebuggerNonUserCode] public PropertyMemberBaseContext propertyMemberBase() {
			return GetRuleContext<PropertyMemberBaseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public GetAccessorContext getAccessor() {
			return GetRuleContext<GetAccessorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SetAccessorContext setAccessor() {
			return GetRuleContext<SetAccessorContext>(0);
		}
		public GetterSetterDeclarationExpressionContext(PropertyMemberDeclarationContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.EnterGetterSetterDeclarationExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.ExitGetterSetterDeclarationExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypeScriptParserVisitor<TResult> typedVisitor = visitor as ITypeScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGetterSetterDeclarationExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AbstractMemberDeclarationContext : PropertyMemberDeclarationContext {
		[System.Diagnostics.DebuggerNonUserCode] public AbstractDeclarationContext abstractDeclaration() {
			return GetRuleContext<AbstractDeclarationContext>(0);
		}
		public AbstractMemberDeclarationContext(PropertyMemberDeclarationContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.EnterAbstractMemberDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.ExitAbstractMemberDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypeScriptParserVisitor<TResult> typedVisitor = visitor as ITypeScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAbstractMemberDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PropertyMemberDeclarationContext propertyMemberDeclaration() {
		PropertyMemberDeclarationContext _localctx = new PropertyMemberDeclarationContext(Context, State);
		EnterRule(_localctx, 200, RULE_propertyMemberDeclaration);
		int _la;
		try {
			State = 1174;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,139,Context) ) {
			case 1:
				_localctx = new PropertyDeclarationExpressionContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 1145;
				propertyMemberBase();
				State = 1146;
				propertyName();
				State = 1148;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==QuestionMark) {
					{
					State = 1147;
					Match(QuestionMark);
					}
				}

				State = 1151;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==Colon) {
					{
					State = 1150;
					typeAnnotation();
					}
				}

				State = 1154;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==Assign) {
					{
					State = 1153;
					initializer();
					}
				}

				State = 1156;
				Match(SemiColon);
				}
				break;
			case 2:
				_localctx = new MethodDeclarationExpressionContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 1158;
				propertyMemberBase();
				State = 1159;
				propertyName();
				State = 1160;
				callSignature();
				State = 1166;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case OpenBrace:
					{
					{
					State = 1161;
					Match(OpenBrace);
					State = 1162;
					functionBody();
					State = 1163;
					Match(CloseBrace);
					}
					}
					break;
				case SemiColon:
					{
					State = 1165;
					Match(SemiColon);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 3:
				_localctx = new GetterSetterDeclarationExpressionContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 1168;
				propertyMemberBase();
				State = 1171;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case Get:
					{
					State = 1169;
					getAccessor();
					}
					break;
				case Set:
					{
					State = 1170;
					setAccessor();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 4:
				_localctx = new AbstractMemberDeclarationContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 1173;
				abstractDeclaration();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PropertyMemberBaseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Async() { return GetToken(TypeScriptParser.Async, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public AccessibilityModifierContext accessibilityModifier() {
			return GetRuleContext<AccessibilityModifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Static() { return GetToken(TypeScriptParser.Static, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ReadOnly() { return GetToken(TypeScriptParser.ReadOnly, 0); }
		public PropertyMemberBaseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_propertyMemberBase; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.EnterPropertyMemberBase(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.ExitPropertyMemberBase(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypeScriptParserVisitor<TResult> typedVisitor = visitor as ITypeScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPropertyMemberBase(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PropertyMemberBaseContext propertyMemberBase() {
		PropertyMemberBaseContext _localctx = new PropertyMemberBaseContext(Context, State);
		EnterRule(_localctx, 202, RULE_propertyMemberBase);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1177;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,140,Context) ) {
			case 1:
				{
				State = 1176;
				Match(Async);
				}
				break;
			}
			State = 1180;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,141,Context) ) {
			case 1:
				{
				State = 1179;
				accessibilityModifier();
				}
				break;
			}
			State = 1183;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,142,Context) ) {
			case 1:
				{
				State = 1182;
				Match(Static);
				}
				break;
			}
			State = 1186;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,143,Context) ) {
			case 1:
				{
				State = 1185;
				Match(ReadOnly);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IndexMemberDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IndexSignatureContext indexSignature() {
			return GetRuleContext<IndexSignatureContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SemiColon() { return GetToken(TypeScriptParser.SemiColon, 0); }
		public IndexMemberDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_indexMemberDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.EnterIndexMemberDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.ExitIndexMemberDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypeScriptParserVisitor<TResult> typedVisitor = visitor as ITypeScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIndexMemberDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IndexMemberDeclarationContext indexMemberDeclaration() {
		IndexMemberDeclarationContext _localctx = new IndexMemberDeclarationContext(Context, State);
		EnterRule(_localctx, 204, RULE_indexMemberDeclaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1188;
			indexSignature();
			State = 1189;
			Match(SemiColon);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GeneratorMethodContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(TypeScriptParser.Identifier, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OpenParen() { return GetToken(TypeScriptParser.OpenParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CloseParen() { return GetToken(TypeScriptParser.CloseParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OpenBrace() { return GetToken(TypeScriptParser.OpenBrace, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FunctionBodyContext functionBody() {
			return GetRuleContext<FunctionBodyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CloseBrace() { return GetToken(TypeScriptParser.CloseBrace, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Multiply() { return GetToken(TypeScriptParser.Multiply, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FormalParameterListContext formalParameterList() {
			return GetRuleContext<FormalParameterListContext>(0);
		}
		public GeneratorMethodContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_generatorMethod; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.EnterGeneratorMethod(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.ExitGeneratorMethod(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypeScriptParserVisitor<TResult> typedVisitor = visitor as ITypeScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGeneratorMethod(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public GeneratorMethodContext generatorMethod() {
		GeneratorMethodContext _localctx = new GeneratorMethodContext(Context, State);
		EnterRule(_localctx, 206, RULE_generatorMethod);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1192;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Multiply) {
				{
				State = 1191;
				Match(Multiply);
				}
			}

			State = 1194;
			Match(Identifier);
			State = 1195;
			Match(OpenParen);
			State = 1197;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << OpenBracket) | (1L << OpenBrace) | (1L << Ellipsis))) != 0) || ((((_la - 100)) & ~0x3f) == 0 && ((1L << (_la - 100)) & ((1L << (Private - 100)) | (1L << (Public - 100)) | (1L << (Protected - 100)) | (1L << (TypeAlias - 100)) | (1L << (Require - 100)) | (1L << (At - 100)) | (1L << (Identifier - 100)))) != 0)) {
				{
				State = 1196;
				formalParameterList();
				}
			}

			State = 1199;
			Match(CloseParen);
			State = 1200;
			Match(OpenBrace);
			State = 1201;
			functionBody();
			State = 1202;
			Match(CloseBrace);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GeneratorFunctionDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Function() { return GetToken(TypeScriptParser.Function, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Multiply() { return GetToken(TypeScriptParser.Multiply, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OpenParen() { return GetToken(TypeScriptParser.OpenParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CloseParen() { return GetToken(TypeScriptParser.CloseParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OpenBrace() { return GetToken(TypeScriptParser.OpenBrace, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FunctionBodyContext functionBody() {
			return GetRuleContext<FunctionBodyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CloseBrace() { return GetToken(TypeScriptParser.CloseBrace, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(TypeScriptParser.Identifier, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FormalParameterListContext formalParameterList() {
			return GetRuleContext<FormalParameterListContext>(0);
		}
		public GeneratorFunctionDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_generatorFunctionDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.EnterGeneratorFunctionDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.ExitGeneratorFunctionDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypeScriptParserVisitor<TResult> typedVisitor = visitor as ITypeScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGeneratorFunctionDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public GeneratorFunctionDeclarationContext generatorFunctionDeclaration() {
		GeneratorFunctionDeclarationContext _localctx = new GeneratorFunctionDeclarationContext(Context, State);
		EnterRule(_localctx, 208, RULE_generatorFunctionDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1204;
			Match(Function);
			State = 1205;
			Match(Multiply);
			State = 1207;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Identifier) {
				{
				State = 1206;
				Match(Identifier);
				}
			}

			State = 1209;
			Match(OpenParen);
			State = 1211;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << OpenBracket) | (1L << OpenBrace) | (1L << Ellipsis))) != 0) || ((((_la - 100)) & ~0x3f) == 0 && ((1L << (_la - 100)) & ((1L << (Private - 100)) | (1L << (Public - 100)) | (1L << (Protected - 100)) | (1L << (TypeAlias - 100)) | (1L << (Require - 100)) | (1L << (At - 100)) | (1L << (Identifier - 100)))) != 0)) {
				{
				State = 1210;
				formalParameterList();
				}
			}

			State = 1213;
			Match(CloseParen);
			State = 1214;
			Match(OpenBrace);
			State = 1215;
			functionBody();
			State = 1216;
			Match(CloseBrace);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GeneratorBlockContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OpenBrace() { return GetToken(TypeScriptParser.OpenBrace, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public GeneratorDefinitionContext[] generatorDefinition() {
			return GetRuleContexts<GeneratorDefinitionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public GeneratorDefinitionContext generatorDefinition(int i) {
			return GetRuleContext<GeneratorDefinitionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CloseBrace() { return GetToken(TypeScriptParser.CloseBrace, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Comma() { return GetTokens(TypeScriptParser.Comma); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comma(int i) {
			return GetToken(TypeScriptParser.Comma, i);
		}
		public GeneratorBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_generatorBlock; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.EnterGeneratorBlock(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.ExitGeneratorBlock(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypeScriptParserVisitor<TResult> typedVisitor = visitor as ITypeScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGeneratorBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public GeneratorBlockContext generatorBlock() {
		GeneratorBlockContext _localctx = new GeneratorBlockContext(Context, State);
		EnterRule(_localctx, 210, RULE_generatorBlock);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1218;
			Match(OpenBrace);
			State = 1219;
			generatorDefinition();
			State = 1224;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,148,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 1220;
					Match(Comma);
					State = 1221;
					generatorDefinition();
					}
					} 
				}
				State = 1226;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,148,Context);
			}
			State = 1228;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Comma) {
				{
				State = 1227;
				Match(Comma);
				}
			}

			State = 1230;
			Match(CloseBrace);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GeneratorDefinitionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Multiply() { return GetToken(TypeScriptParser.Multiply, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IteratorDefinitionContext iteratorDefinition() {
			return GetRuleContext<IteratorDefinitionContext>(0);
		}
		public GeneratorDefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_generatorDefinition; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.EnterGeneratorDefinition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.ExitGeneratorDefinition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypeScriptParserVisitor<TResult> typedVisitor = visitor as ITypeScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGeneratorDefinition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public GeneratorDefinitionContext generatorDefinition() {
		GeneratorDefinitionContext _localctx = new GeneratorDefinitionContext(Context, State);
		EnterRule(_localctx, 212, RULE_generatorDefinition);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1232;
			Match(Multiply);
			State = 1233;
			iteratorDefinition();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IteratorBlockContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OpenBrace() { return GetToken(TypeScriptParser.OpenBrace, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IteratorDefinitionContext[] iteratorDefinition() {
			return GetRuleContexts<IteratorDefinitionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IteratorDefinitionContext iteratorDefinition(int i) {
			return GetRuleContext<IteratorDefinitionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CloseBrace() { return GetToken(TypeScriptParser.CloseBrace, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Comma() { return GetTokens(TypeScriptParser.Comma); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comma(int i) {
			return GetToken(TypeScriptParser.Comma, i);
		}
		public IteratorBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_iteratorBlock; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.EnterIteratorBlock(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.ExitIteratorBlock(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypeScriptParserVisitor<TResult> typedVisitor = visitor as ITypeScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIteratorBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IteratorBlockContext iteratorBlock() {
		IteratorBlockContext _localctx = new IteratorBlockContext(Context, State);
		EnterRule(_localctx, 214, RULE_iteratorBlock);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1235;
			Match(OpenBrace);
			State = 1236;
			iteratorDefinition();
			State = 1241;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,150,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 1237;
					Match(Comma);
					State = 1238;
					iteratorDefinition();
					}
					} 
				}
				State = 1243;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,150,Context);
			}
			State = 1245;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Comma) {
				{
				State = 1244;
				Match(Comma);
				}
			}

			State = 1247;
			Match(CloseBrace);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IteratorDefinitionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OpenBracket() { return GetToken(TypeScriptParser.OpenBracket, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SingleExpressionContext singleExpression() {
			return GetRuleContext<SingleExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CloseBracket() { return GetToken(TypeScriptParser.CloseBracket, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OpenParen() { return GetToken(TypeScriptParser.OpenParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CloseParen() { return GetToken(TypeScriptParser.CloseParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OpenBrace() { return GetToken(TypeScriptParser.OpenBrace, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FunctionBodyContext functionBody() {
			return GetRuleContext<FunctionBodyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CloseBrace() { return GetToken(TypeScriptParser.CloseBrace, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FormalParameterListContext formalParameterList() {
			return GetRuleContext<FormalParameterListContext>(0);
		}
		public IteratorDefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_iteratorDefinition; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.EnterIteratorDefinition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.ExitIteratorDefinition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypeScriptParserVisitor<TResult> typedVisitor = visitor as ITypeScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIteratorDefinition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IteratorDefinitionContext iteratorDefinition() {
		IteratorDefinitionContext _localctx = new IteratorDefinitionContext(Context, State);
		EnterRule(_localctx, 216, RULE_iteratorDefinition);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1249;
			Match(OpenBracket);
			State = 1250;
			singleExpression(0);
			State = 1251;
			Match(CloseBracket);
			State = 1252;
			Match(OpenParen);
			State = 1254;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << OpenBracket) | (1L << OpenBrace) | (1L << Ellipsis))) != 0) || ((((_la - 100)) & ~0x3f) == 0 && ((1L << (_la - 100)) & ((1L << (Private - 100)) | (1L << (Public - 100)) | (1L << (Protected - 100)) | (1L << (TypeAlias - 100)) | (1L << (Require - 100)) | (1L << (At - 100)) | (1L << (Identifier - 100)))) != 0)) {
				{
				State = 1253;
				formalParameterList();
				}
			}

			State = 1256;
			Match(CloseParen);
			State = 1257;
			Match(OpenBrace);
			State = 1258;
			functionBody();
			State = 1259;
			Match(CloseBrace);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FormalParameterListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FormalParameterArgContext[] formalParameterArg() {
			return GetRuleContexts<FormalParameterArgContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public FormalParameterArgContext formalParameterArg(int i) {
			return GetRuleContext<FormalParameterArgContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Comma() { return GetTokens(TypeScriptParser.Comma); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comma(int i) {
			return GetToken(TypeScriptParser.Comma, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LastFormalParameterArgContext lastFormalParameterArg() {
			return GetRuleContext<LastFormalParameterArgContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArrayLiteralContext arrayLiteral() {
			return GetRuleContext<ArrayLiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ObjectLiteralContext objectLiteral() {
			return GetRuleContext<ObjectLiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Colon() { return GetToken(TypeScriptParser.Colon, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FormalParameterListContext formalParameterList() {
			return GetRuleContext<FormalParameterListContext>(0);
		}
		public FormalParameterListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_formalParameterList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.EnterFormalParameterList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.ExitFormalParameterList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypeScriptParserVisitor<TResult> typedVisitor = visitor as ITypeScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFormalParameterList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FormalParameterListContext formalParameterList() {
		FormalParameterListContext _localctx = new FormalParameterListContext(Context, State);
		EnterRule(_localctx, 218, RULE_formalParameterList);
		int _la;
		try {
			int _alt;
			State = 1280;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case Private:
			case Public:
			case Protected:
			case TypeAlias:
			case Require:
			case At:
			case Identifier:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1261;
				formalParameterArg();
				State = 1266;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,153,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 1262;
						Match(Comma);
						State = 1263;
						formalParameterArg();
						}
						} 
					}
					State = 1268;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,153,Context);
				}
				State = 1271;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==Comma) {
					{
					State = 1269;
					Match(Comma);
					State = 1270;
					lastFormalParameterArg();
					}
				}

				}
				break;
			case Ellipsis:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1273;
				lastFormalParameterArg();
				}
				break;
			case OpenBracket:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1274;
				arrayLiteral();
				}
				break;
			case OpenBrace:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1275;
				objectLiteral();
				State = 1278;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==Colon) {
					{
					State = 1276;
					Match(Colon);
					State = 1277;
					formalParameterList();
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FormalParameterArgContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierOrKeyWordContext identifierOrKeyWord() {
			return GetRuleContext<IdentifierOrKeyWordContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DecoratorContext decorator() {
			return GetRuleContext<DecoratorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AccessibilityModifierContext accessibilityModifier() {
			return GetRuleContext<AccessibilityModifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode QuestionMark() { return GetToken(TypeScriptParser.QuestionMark, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeAnnotationContext typeAnnotation() {
			return GetRuleContext<TypeAnnotationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Assign() { return GetToken(TypeScriptParser.Assign, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SingleExpressionContext singleExpression() {
			return GetRuleContext<SingleExpressionContext>(0);
		}
		public FormalParameterArgContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_formalParameterArg; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.EnterFormalParameterArg(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.ExitFormalParameterArg(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypeScriptParserVisitor<TResult> typedVisitor = visitor as ITypeScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFormalParameterArg(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FormalParameterArgContext formalParameterArg() {
		FormalParameterArgContext _localctx = new FormalParameterArgContext(Context, State);
		EnterRule(_localctx, 220, RULE_formalParameterArg);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1283;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==At) {
				{
				State = 1282;
				decorator();
				}
			}

			State = 1286;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (((((_la - 100)) & ~0x3f) == 0 && ((1L << (_la - 100)) & ((1L << (Private - 100)) | (1L << (Public - 100)) | (1L << (Protected - 100)))) != 0)) {
				{
				State = 1285;
				accessibilityModifier();
				}
			}

			State = 1288;
			identifierOrKeyWord();
			State = 1290;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==QuestionMark) {
				{
				State = 1289;
				Match(QuestionMark);
				}
			}

			State = 1293;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Colon) {
				{
				State = 1292;
				typeAnnotation();
				}
			}

			State = 1297;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Assign) {
				{
				State = 1295;
				Match(Assign);
				State = 1296;
				singleExpression(0);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LastFormalParameterArgContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Ellipsis() { return GetToken(TypeScriptParser.Ellipsis, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(TypeScriptParser.Identifier, 0); }
		public LastFormalParameterArgContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lastFormalParameterArg; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.EnterLastFormalParameterArg(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.ExitLastFormalParameterArg(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypeScriptParserVisitor<TResult> typedVisitor = visitor as ITypeScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLastFormalParameterArg(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LastFormalParameterArgContext lastFormalParameterArg() {
		LastFormalParameterArgContext _localctx = new LastFormalParameterArgContext(Context, State);
		EnterRule(_localctx, 222, RULE_lastFormalParameterArg);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1299;
			Match(Ellipsis);
			State = 1300;
			Match(Identifier);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionBodyContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SourceElementsContext sourceElements() {
			return GetRuleContext<SourceElementsContext>(0);
		}
		public FunctionBodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionBody; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.EnterFunctionBody(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.ExitFunctionBody(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypeScriptParserVisitor<TResult> typedVisitor = visitor as ITypeScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionBody(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionBodyContext functionBody() {
		FunctionBodyContext _localctx = new FunctionBodyContext(Context, State);
		EnterRule(_localctx, 224, RULE_functionBody);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1303;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,162,Context) ) {
			case 1:
				{
				State = 1302;
				sourceElements();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SourceElementsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SourceElementContext[] sourceElement() {
			return GetRuleContexts<SourceElementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SourceElementContext sourceElement(int i) {
			return GetRuleContext<SourceElementContext>(i);
		}
		public SourceElementsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sourceElements; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.EnterSourceElements(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.ExitSourceElements(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypeScriptParserVisitor<TResult> typedVisitor = visitor as ITypeScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSourceElements(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SourceElementsContext sourceElements() {
		SourceElementsContext _localctx = new SourceElementsContext(Context, State);
		EnterRule(_localctx, 226, RULE_sourceElements);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1306;
			ErrorHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 1305;
					sourceElement();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 1308;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,163,Context);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArrayLiteralContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OpenBracket() { return GetToken(TypeScriptParser.OpenBracket, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CloseBracket() { return GetToken(TypeScriptParser.CloseBracket, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ElementListContext elementList() {
			return GetRuleContext<ElementListContext>(0);
		}
		public ArrayLiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arrayLiteral; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.EnterArrayLiteral(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.ExitArrayLiteral(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypeScriptParserVisitor<TResult> typedVisitor = visitor as ITypeScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArrayLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArrayLiteralContext arrayLiteral() {
		ArrayLiteralContext _localctx = new ArrayLiteralContext(Context, State);
		EnterRule(_localctx, 228, RULE_arrayLiteral);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 1310;
			Match(OpenBracket);
			State = 1312;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << RegularExpressionLiteral) | (1L << OpenBracket) | (1L << OpenParen) | (1L << OpenBrace) | (1L << Ellipsis) | (1L << PlusPlus) | (1L << MinusMinus) | (1L << Plus) | (1L << Minus) | (1L << BitNot) | (1L << Not) | (1L << LessThan) | (1L << NullLiteral) | (1L << BooleanLiteral) | (1L << DecimalLiteral) | (1L << HexIntegerLiteral) | (1L << OctalIntegerLiteral) | (1L << OctalIntegerLiteral2) | (1L << BinaryIntegerLiteral) | (1L << Break) | (1L << Do) | (1L << Instanceof))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (Typeof - 64)) | (1L << (Case - 64)) | (1L << (Else - 64)) | (1L << (New - 64)) | (1L << (Var - 64)) | (1L << (Catch - 64)) | (1L << (Finally - 64)) | (1L << (Return - 64)) | (1L << (Void - 64)) | (1L << (Continue - 64)) | (1L << (For - 64)) | (1L << (Switch - 64)) | (1L << (While - 64)) | (1L << (Debugger - 64)) | (1L << (Function - 64)) | (1L << (This - 64)) | (1L << (With - 64)) | (1L << (Default - 64)) | (1L << (If - 64)) | (1L << (Throw - 64)) | (1L << (Delete - 64)) | (1L << (In - 64)) | (1L << (Try - 64)) | (1L << (From - 64)) | (1L << (ReadOnly - 64)) | (1L << (Async - 64)) | (1L << (Class - 64)) | (1L << (Enum - 64)) | (1L << (Extends - 64)) | (1L << (Super - 64)) | (1L << (Const - 64)) | (1L << (Export - 64)) | (1L << (Import - 64)) | (1L << (Implements - 64)) | (1L << (Let - 64)) | (1L << (Private - 64)) | (1L << (Public - 64)) | (1L << (Interface - 64)) | (1L << (Package - 64)) | (1L << (Protected - 64)) | (1L << (Static - 64)) | (1L << (Yield - 64)) | (1L << (String - 64)) | (1L << (TypeAlias - 64)) | (1L << (Get - 64)) | (1L << (Set - 64)) | (1L << (Require - 64)) | (1L << (Identifier - 64)) | (1L << (StringLiteral - 64)) | (1L << (TemplateStringLiteral - 64)))) != 0)) {
				{
				State = 1311;
				elementList();
				}
			}

			State = 1314;
			Match(CloseBracket);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ElementListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ArrayElementContext[] arrayElement() {
			return GetRuleContexts<ArrayElementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArrayElementContext arrayElement(int i) {
			return GetRuleContext<ArrayElementContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Comma() { return GetTokens(TypeScriptParser.Comma); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comma(int i) {
			return GetToken(TypeScriptParser.Comma, i);
		}
		public ElementListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_elementList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.EnterElementList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.ExitElementList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypeScriptParserVisitor<TResult> typedVisitor = visitor as ITypeScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitElementList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ElementListContext elementList() {
		ElementListContext _localctx = new ElementListContext(Context, State);
		EnterRule(_localctx, 230, RULE_elementList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1316;
			arrayElement();
			State = 1325;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==Comma) {
				{
				{
				State = 1318;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 1317;
					Match(Comma);
					}
					}
					State = 1320;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( _la==Comma );
				State = 1322;
				arrayElement();
				}
				}
				State = 1327;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArrayElementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SingleExpressionContext singleExpression() {
			return GetRuleContext<SingleExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(TypeScriptParser.Identifier, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Ellipsis() { return GetToken(TypeScriptParser.Ellipsis, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comma() { return GetToken(TypeScriptParser.Comma, 0); }
		public ArrayElementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arrayElement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.EnterArrayElement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.ExitArrayElement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypeScriptParserVisitor<TResult> typedVisitor = visitor as ITypeScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArrayElement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArrayElementContext arrayElement() {
		ArrayElementContext _localctx = new ArrayElementContext(Context, State);
		EnterRule(_localctx, 232, RULE_arrayElement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1329;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Ellipsis) {
				{
				State = 1328;
				Match(Ellipsis);
				}
			}

			State = 1333;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,168,Context) ) {
			case 1:
				{
				State = 1331;
				singleExpression(0);
				}
				break;
			case 2:
				{
				State = 1332;
				Match(Identifier);
				}
				break;
			}
			State = 1336;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,169,Context) ) {
			case 1:
				{
				State = 1335;
				Match(Comma);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ObjectLiteralContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OpenBrace() { return GetToken(TypeScriptParser.OpenBrace, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CloseBrace() { return GetToken(TypeScriptParser.CloseBrace, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public PropertyAssignmentContext[] propertyAssignment() {
			return GetRuleContexts<PropertyAssignmentContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public PropertyAssignmentContext propertyAssignment(int i) {
			return GetRuleContext<PropertyAssignmentContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Comma() { return GetTokens(TypeScriptParser.Comma); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comma(int i) {
			return GetToken(TypeScriptParser.Comma, i);
		}
		public ObjectLiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_objectLiteral; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.EnterObjectLiteral(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.ExitObjectLiteral(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypeScriptParserVisitor<TResult> typedVisitor = visitor as ITypeScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitObjectLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ObjectLiteralContext objectLiteral() {
		ObjectLiteralContext _localctx = new ObjectLiteralContext(Context, State);
		EnterRule(_localctx, 234, RULE_objectLiteral);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1338;
			Match(OpenBrace);
			State = 1347;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << OpenBracket) | (1L << Ellipsis) | (1L << Multiply) | (1L << NullLiteral) | (1L << BooleanLiteral) | (1L << DecimalLiteral) | (1L << HexIntegerLiteral) | (1L << OctalIntegerLiteral) | (1L << OctalIntegerLiteral2) | (1L << BinaryIntegerLiteral) | (1L << Break) | (1L << Do) | (1L << Instanceof))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (Typeof - 64)) | (1L << (Case - 64)) | (1L << (Else - 64)) | (1L << (New - 64)) | (1L << (Var - 64)) | (1L << (Catch - 64)) | (1L << (Finally - 64)) | (1L << (Return - 64)) | (1L << (Void - 64)) | (1L << (Continue - 64)) | (1L << (For - 64)) | (1L << (Switch - 64)) | (1L << (While - 64)) | (1L << (Debugger - 64)) | (1L << (Function - 64)) | (1L << (This - 64)) | (1L << (With - 64)) | (1L << (Default - 64)) | (1L << (If - 64)) | (1L << (Throw - 64)) | (1L << (Delete - 64)) | (1L << (In - 64)) | (1L << (Try - 64)) | (1L << (From - 64)) | (1L << (ReadOnly - 64)) | (1L << (Async - 64)) | (1L << (Class - 64)) | (1L << (Enum - 64)) | (1L << (Extends - 64)) | (1L << (Super - 64)) | (1L << (Const - 64)) | (1L << (Export - 64)) | (1L << (Import - 64)) | (1L << (Implements - 64)) | (1L << (Let - 64)) | (1L << (Private - 64)) | (1L << (Public - 64)) | (1L << (Interface - 64)) | (1L << (Package - 64)) | (1L << (Protected - 64)) | (1L << (Static - 64)) | (1L << (Yield - 64)) | (1L << (String - 64)) | (1L << (TypeAlias - 64)) | (1L << (Get - 64)) | (1L << (Set - 64)) | (1L << (Require - 64)) | (1L << (Identifier - 64)) | (1L << (StringLiteral - 64)))) != 0)) {
				{
				State = 1339;
				propertyAssignment();
				State = 1344;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,170,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 1340;
						Match(Comma);
						State = 1341;
						propertyAssignment();
						}
						} 
					}
					State = 1346;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,170,Context);
				}
				}
			}

			State = 1350;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Comma) {
				{
				State = 1349;
				Match(Comma);
				}
			}

			State = 1352;
			Match(CloseBrace);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PropertyAssignmentContext : ParserRuleContext {
		public PropertyAssignmentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_propertyAssignment; } }
	 
		public PropertyAssignmentContext() { }
		public virtual void CopyFrom(PropertyAssignmentContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class PropertyExpressionAssignmentContext : PropertyAssignmentContext {
		[System.Diagnostics.DebuggerNonUserCode] public PropertyNameContext propertyName() {
			return GetRuleContext<PropertyNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SingleExpressionContext singleExpression() {
			return GetRuleContext<SingleExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Colon() { return GetToken(TypeScriptParser.Colon, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Assign() { return GetToken(TypeScriptParser.Assign, 0); }
		public PropertyExpressionAssignmentContext(PropertyAssignmentContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.EnterPropertyExpressionAssignment(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.ExitPropertyExpressionAssignment(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypeScriptParserVisitor<TResult> typedVisitor = visitor as ITypeScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPropertyExpressionAssignment(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ComputedPropertyExpressionAssignmentContext : PropertyAssignmentContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OpenBracket() { return GetToken(TypeScriptParser.OpenBracket, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SingleExpressionContext[] singleExpression() {
			return GetRuleContexts<SingleExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SingleExpressionContext singleExpression(int i) {
			return GetRuleContext<SingleExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CloseBracket() { return GetToken(TypeScriptParser.CloseBracket, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Colon() { return GetToken(TypeScriptParser.Colon, 0); }
		public ComputedPropertyExpressionAssignmentContext(PropertyAssignmentContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.EnterComputedPropertyExpressionAssignment(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.ExitComputedPropertyExpressionAssignment(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypeScriptParserVisitor<TResult> typedVisitor = visitor as ITypeScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitComputedPropertyExpressionAssignment(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class PropertyShorthandContext : PropertyAssignmentContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierOrKeyWordContext identifierOrKeyWord() {
			return GetRuleContext<IdentifierOrKeyWordContext>(0);
		}
		public PropertyShorthandContext(PropertyAssignmentContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.EnterPropertyShorthand(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.ExitPropertyShorthand(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypeScriptParserVisitor<TResult> typedVisitor = visitor as ITypeScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPropertyShorthand(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class PropertySetterContext : PropertyAssignmentContext {
		[System.Diagnostics.DebuggerNonUserCode] public SetAccessorContext setAccessor() {
			return GetRuleContext<SetAccessorContext>(0);
		}
		public PropertySetterContext(PropertyAssignmentContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.EnterPropertySetter(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.ExitPropertySetter(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypeScriptParserVisitor<TResult> typedVisitor = visitor as ITypeScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPropertySetter(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class PropertyGetterContext : PropertyAssignmentContext {
		[System.Diagnostics.DebuggerNonUserCode] public GetAccessorContext getAccessor() {
			return GetRuleContext<GetAccessorContext>(0);
		}
		public PropertyGetterContext(PropertyAssignmentContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.EnterPropertyGetter(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.ExitPropertyGetter(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypeScriptParserVisitor<TResult> typedVisitor = visitor as ITypeScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPropertyGetter(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class RestParameterInObjectContext : PropertyAssignmentContext {
		[System.Diagnostics.DebuggerNonUserCode] public RestParameterContext restParameter() {
			return GetRuleContext<RestParameterContext>(0);
		}
		public RestParameterInObjectContext(PropertyAssignmentContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.EnterRestParameterInObject(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.ExitRestParameterInObject(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypeScriptParserVisitor<TResult> typedVisitor = visitor as ITypeScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRestParameterInObject(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class MethodPropertyContext : PropertyAssignmentContext {
		[System.Diagnostics.DebuggerNonUserCode] public GeneratorMethodContext generatorMethod() {
			return GetRuleContext<GeneratorMethodContext>(0);
		}
		public MethodPropertyContext(PropertyAssignmentContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.EnterMethodProperty(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.ExitMethodProperty(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypeScriptParserVisitor<TResult> typedVisitor = visitor as ITypeScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMethodProperty(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PropertyAssignmentContext propertyAssignment() {
		PropertyAssignmentContext _localctx = new PropertyAssignmentContext(Context, State);
		EnterRule(_localctx, 236, RULE_propertyAssignment);
		int _la;
		try {
			State = 1369;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,173,Context) ) {
			case 1:
				_localctx = new PropertyExpressionAssignmentContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 1354;
				propertyName();
				State = 1355;
				_la = TokenStream.LA(1);
				if ( !(_la==Assign || _la==Colon) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 1356;
				singleExpression(0);
				}
				break;
			case 2:
				_localctx = new ComputedPropertyExpressionAssignmentContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 1358;
				Match(OpenBracket);
				State = 1359;
				singleExpression(0);
				State = 1360;
				Match(CloseBracket);
				State = 1361;
				Match(Colon);
				State = 1362;
				singleExpression(0);
				}
				break;
			case 3:
				_localctx = new PropertyGetterContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 1364;
				getAccessor();
				}
				break;
			case 4:
				_localctx = new PropertySetterContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 1365;
				setAccessor();
				}
				break;
			case 5:
				_localctx = new MethodPropertyContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 1366;
				generatorMethod();
				}
				break;
			case 6:
				_localctx = new PropertyShorthandContext(_localctx);
				EnterOuterAlt(_localctx, 6);
				{
				State = 1367;
				identifierOrKeyWord();
				}
				break;
			case 7:
				_localctx = new RestParameterInObjectContext(_localctx);
				EnterOuterAlt(_localctx, 7);
				{
				State = 1368;
				restParameter();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GetAccessorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public GetterContext getter() {
			return GetRuleContext<GetterContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OpenParen() { return GetToken(TypeScriptParser.OpenParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CloseParen() { return GetToken(TypeScriptParser.CloseParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OpenBrace() { return GetToken(TypeScriptParser.OpenBrace, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FunctionBodyContext functionBody() {
			return GetRuleContext<FunctionBodyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CloseBrace() { return GetToken(TypeScriptParser.CloseBrace, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeAnnotationContext typeAnnotation() {
			return GetRuleContext<TypeAnnotationContext>(0);
		}
		public GetAccessorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_getAccessor; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.EnterGetAccessor(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.ExitGetAccessor(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypeScriptParserVisitor<TResult> typedVisitor = visitor as ITypeScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGetAccessor(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public GetAccessorContext getAccessor() {
		GetAccessorContext _localctx = new GetAccessorContext(Context, State);
		EnterRule(_localctx, 238, RULE_getAccessor);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1371;
			getter();
			State = 1372;
			Match(OpenParen);
			State = 1373;
			Match(CloseParen);
			State = 1375;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Colon) {
				{
				State = 1374;
				typeAnnotation();
				}
			}

			State = 1377;
			Match(OpenBrace);
			State = 1378;
			functionBody();
			State = 1379;
			Match(CloseBrace);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SetAccessorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SetterContext setter() {
			return GetRuleContext<SetterContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OpenParen() { return GetToken(TypeScriptParser.OpenParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CloseParen() { return GetToken(TypeScriptParser.CloseParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OpenBrace() { return GetToken(TypeScriptParser.OpenBrace, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FunctionBodyContext functionBody() {
			return GetRuleContext<FunctionBodyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CloseBrace() { return GetToken(TypeScriptParser.CloseBrace, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(TypeScriptParser.Identifier, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BindingPatternContext bindingPattern() {
			return GetRuleContext<BindingPatternContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeAnnotationContext typeAnnotation() {
			return GetRuleContext<TypeAnnotationContext>(0);
		}
		public SetAccessorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_setAccessor; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.EnterSetAccessor(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.ExitSetAccessor(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypeScriptParserVisitor<TResult> typedVisitor = visitor as ITypeScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSetAccessor(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SetAccessorContext setAccessor() {
		SetAccessorContext _localctx = new SetAccessorContext(Context, State);
		EnterRule(_localctx, 240, RULE_setAccessor);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1381;
			setter();
			State = 1382;
			Match(OpenParen);
			State = 1385;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case Identifier:
				{
				State = 1383;
				Match(Identifier);
				}
				break;
			case OpenBracket:
			case OpenBrace:
				{
				State = 1384;
				bindingPattern();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 1388;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Colon) {
				{
				State = 1387;
				typeAnnotation();
				}
			}

			State = 1390;
			Match(CloseParen);
			State = 1391;
			Match(OpenBrace);
			State = 1392;
			functionBody();
			State = 1393;
			Match(CloseBrace);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PropertyNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierNameContext identifierName() {
			return GetRuleContext<IdentifierNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode StringLiteral() { return GetToken(TypeScriptParser.StringLiteral, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NumericLiteralContext numericLiteral() {
			return GetRuleContext<NumericLiteralContext>(0);
		}
		public PropertyNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_propertyName; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.EnterPropertyName(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.ExitPropertyName(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypeScriptParserVisitor<TResult> typedVisitor = visitor as ITypeScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPropertyName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PropertyNameContext propertyName() {
		PropertyNameContext _localctx = new PropertyNameContext(Context, State);
		EnterRule(_localctx, 242, RULE_propertyName);
		try {
			State = 1398;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case NullLiteral:
			case BooleanLiteral:
			case Break:
			case Do:
			case Instanceof:
			case Typeof:
			case Case:
			case Else:
			case New:
			case Var:
			case Catch:
			case Finally:
			case Return:
			case Void:
			case Continue:
			case For:
			case Switch:
			case While:
			case Debugger:
			case Function:
			case This:
			case With:
			case Default:
			case If:
			case Throw:
			case Delete:
			case In:
			case Try:
			case From:
			case ReadOnly:
			case Async:
			case Class:
			case Enum:
			case Extends:
			case Super:
			case Const:
			case Export:
			case Import:
			case Implements:
			case Let:
			case Private:
			case Public:
			case Interface:
			case Package:
			case Protected:
			case Static:
			case Yield:
			case String:
			case TypeAlias:
			case Get:
			case Set:
			case Require:
			case Identifier:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1395;
				identifierName();
				}
				break;
			case StringLiteral:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1396;
				Match(StringLiteral);
				}
				break;
			case DecimalLiteral:
			case HexIntegerLiteral:
			case OctalIntegerLiteral:
			case OctalIntegerLiteral2:
			case BinaryIntegerLiteral:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1397;
				numericLiteral();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArgumentsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OpenParen() { return GetToken(TypeScriptParser.OpenParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CloseParen() { return GetToken(TypeScriptParser.CloseParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ArgumentListContext argumentList() {
			return GetRuleContext<ArgumentListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comma() { return GetToken(TypeScriptParser.Comma, 0); }
		public ArgumentsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arguments; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.EnterArguments(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.ExitArguments(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypeScriptParserVisitor<TResult> typedVisitor = visitor as ITypeScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArguments(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArgumentsContext arguments() {
		ArgumentsContext _localctx = new ArgumentsContext(Context, State);
		EnterRule(_localctx, 244, RULE_arguments);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1400;
			Match(OpenParen);
			State = 1405;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << RegularExpressionLiteral) | (1L << OpenBracket) | (1L << OpenParen) | (1L << OpenBrace) | (1L << Ellipsis) | (1L << PlusPlus) | (1L << MinusMinus) | (1L << Plus) | (1L << Minus) | (1L << BitNot) | (1L << Not) | (1L << LessThan) | (1L << NullLiteral) | (1L << BooleanLiteral) | (1L << DecimalLiteral) | (1L << HexIntegerLiteral) | (1L << OctalIntegerLiteral) | (1L << OctalIntegerLiteral2) | (1L << BinaryIntegerLiteral) | (1L << Break) | (1L << Do) | (1L << Instanceof))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (Typeof - 64)) | (1L << (Case - 64)) | (1L << (Else - 64)) | (1L << (New - 64)) | (1L << (Var - 64)) | (1L << (Catch - 64)) | (1L << (Finally - 64)) | (1L << (Return - 64)) | (1L << (Void - 64)) | (1L << (Continue - 64)) | (1L << (For - 64)) | (1L << (Switch - 64)) | (1L << (While - 64)) | (1L << (Debugger - 64)) | (1L << (Function - 64)) | (1L << (This - 64)) | (1L << (With - 64)) | (1L << (Default - 64)) | (1L << (If - 64)) | (1L << (Throw - 64)) | (1L << (Delete - 64)) | (1L << (In - 64)) | (1L << (Try - 64)) | (1L << (From - 64)) | (1L << (ReadOnly - 64)) | (1L << (Async - 64)) | (1L << (Class - 64)) | (1L << (Enum - 64)) | (1L << (Extends - 64)) | (1L << (Super - 64)) | (1L << (Const - 64)) | (1L << (Export - 64)) | (1L << (Import - 64)) | (1L << (Implements - 64)) | (1L << (Let - 64)) | (1L << (Private - 64)) | (1L << (Public - 64)) | (1L << (Interface - 64)) | (1L << (Package - 64)) | (1L << (Protected - 64)) | (1L << (Static - 64)) | (1L << (Yield - 64)) | (1L << (String - 64)) | (1L << (TypeAlias - 64)) | (1L << (Get - 64)) | (1L << (Set - 64)) | (1L << (Require - 64)) | (1L << (Identifier - 64)) | (1L << (StringLiteral - 64)) | (1L << (TemplateStringLiteral - 64)))) != 0)) {
				{
				State = 1401;
				argumentList();
				State = 1403;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==Comma) {
					{
					State = 1402;
					Match(Comma);
					}
				}

				}
			}

			State = 1407;
			Match(CloseParen);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArgumentListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ArgumentContext[] argument() {
			return GetRuleContexts<ArgumentContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArgumentContext argument(int i) {
			return GetRuleContext<ArgumentContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Comma() { return GetTokens(TypeScriptParser.Comma); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comma(int i) {
			return GetToken(TypeScriptParser.Comma, i);
		}
		public ArgumentListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_argumentList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.EnterArgumentList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.ExitArgumentList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypeScriptParserVisitor<TResult> typedVisitor = visitor as ITypeScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArgumentList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArgumentListContext argumentList() {
		ArgumentListContext _localctx = new ArgumentListContext(Context, State);
		EnterRule(_localctx, 246, RULE_argumentList);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1409;
			argument();
			State = 1414;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,180,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 1410;
					Match(Comma);
					State = 1411;
					argument();
					}
					} 
				}
				State = 1416;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,180,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArgumentContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SingleExpressionContext singleExpression() {
			return GetRuleContext<SingleExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(TypeScriptParser.Identifier, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Ellipsis() { return GetToken(TypeScriptParser.Ellipsis, 0); }
		public ArgumentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_argument; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.EnterArgument(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.ExitArgument(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypeScriptParserVisitor<TResult> typedVisitor = visitor as ITypeScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArgument(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArgumentContext argument() {
		ArgumentContext _localctx = new ArgumentContext(Context, State);
		EnterRule(_localctx, 248, RULE_argument);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1418;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Ellipsis) {
				{
				State = 1417;
				Match(Ellipsis);
				}
			}

			State = 1422;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,182,Context) ) {
			case 1:
				{
				State = 1420;
				singleExpression(0);
				}
				break;
			case 2:
				{
				State = 1421;
				Match(Identifier);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionSequenceContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SingleExpressionContext[] singleExpression() {
			return GetRuleContexts<SingleExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SingleExpressionContext singleExpression(int i) {
			return GetRuleContext<SingleExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Comma() { return GetTokens(TypeScriptParser.Comma); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comma(int i) {
			return GetToken(TypeScriptParser.Comma, i);
		}
		public ExpressionSequenceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expressionSequence; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.EnterExpressionSequence(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.ExitExpressionSequence(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypeScriptParserVisitor<TResult> typedVisitor = visitor as ITypeScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpressionSequence(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionSequenceContext expressionSequence() {
		ExpressionSequenceContext _localctx = new ExpressionSequenceContext(Context, State);
		EnterRule(_localctx, 250, RULE_expressionSequence);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1424;
			singleExpression(0);
			State = 1429;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,183,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 1425;
					Match(Comma);
					State = 1426;
					singleExpression(0);
					}
					} 
				}
				State = 1431;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,183,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionExpressionDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Function() { return GetToken(TypeScriptParser.Function, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OpenParen() { return GetToken(TypeScriptParser.OpenParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CloseParen() { return GetToken(TypeScriptParser.CloseParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OpenBrace() { return GetToken(TypeScriptParser.OpenBrace, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FunctionBodyContext functionBody() {
			return GetRuleContext<FunctionBodyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CloseBrace() { return GetToken(TypeScriptParser.CloseBrace, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(TypeScriptParser.Identifier, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FormalParameterListContext formalParameterList() {
			return GetRuleContext<FormalParameterListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeAnnotationContext typeAnnotation() {
			return GetRuleContext<TypeAnnotationContext>(0);
		}
		public FunctionExpressionDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionExpressionDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.EnterFunctionExpressionDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.ExitFunctionExpressionDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypeScriptParserVisitor<TResult> typedVisitor = visitor as ITypeScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionExpressionDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionExpressionDeclarationContext functionExpressionDeclaration() {
		FunctionExpressionDeclarationContext _localctx = new FunctionExpressionDeclarationContext(Context, State);
		EnterRule(_localctx, 252, RULE_functionExpressionDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1432;
			Match(Function);
			State = 1434;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Identifier) {
				{
				State = 1433;
				Match(Identifier);
				}
			}

			State = 1436;
			Match(OpenParen);
			State = 1438;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << OpenBracket) | (1L << OpenBrace) | (1L << Ellipsis))) != 0) || ((((_la - 100)) & ~0x3f) == 0 && ((1L << (_la - 100)) & ((1L << (Private - 100)) | (1L << (Public - 100)) | (1L << (Protected - 100)) | (1L << (TypeAlias - 100)) | (1L << (Require - 100)) | (1L << (At - 100)) | (1L << (Identifier - 100)))) != 0)) {
				{
				State = 1437;
				formalParameterList();
				}
			}

			State = 1440;
			Match(CloseParen);
			State = 1442;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Colon) {
				{
				State = 1441;
				typeAnnotation();
				}
			}

			State = 1444;
			Match(OpenBrace);
			State = 1445;
			functionBody();
			State = 1446;
			Match(CloseBrace);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SingleExpressionContext : ParserRuleContext {
		public SingleExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_singleExpression; } }
	 
		public SingleExpressionContext() { }
		public virtual void CopyFrom(SingleExpressionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class TemplateStringExpressionContext : SingleExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public SingleExpressionContext singleExpression() {
			return GetRuleContext<SingleExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TemplateStringLiteral() { return GetToken(TypeScriptParser.TemplateStringLiteral, 0); }
		public TemplateStringExpressionContext(SingleExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.EnterTemplateStringExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.ExitTemplateStringExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypeScriptParserVisitor<TResult> typedVisitor = visitor as ITypeScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTemplateStringExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class TernaryExpressionContext : SingleExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public SingleExpressionContext[] singleExpression() {
			return GetRuleContexts<SingleExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SingleExpressionContext singleExpression(int i) {
			return GetRuleContext<SingleExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode QuestionMark() { return GetToken(TypeScriptParser.QuestionMark, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Colon() { return GetToken(TypeScriptParser.Colon, 0); }
		public TernaryExpressionContext(SingleExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.EnterTernaryExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.ExitTernaryExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypeScriptParserVisitor<TResult> typedVisitor = visitor as ITypeScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTernaryExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class LogicalAndExpressionContext : SingleExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public SingleExpressionContext[] singleExpression() {
			return GetRuleContexts<SingleExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SingleExpressionContext singleExpression(int i) {
			return GetRuleContext<SingleExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode And() { return GetToken(TypeScriptParser.And, 0); }
		public LogicalAndExpressionContext(SingleExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.EnterLogicalAndExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.ExitLogicalAndExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypeScriptParserVisitor<TResult> typedVisitor = visitor as ITypeScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLogicalAndExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class GeneratorsExpressionContext : SingleExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public GeneratorBlockContext generatorBlock() {
			return GetRuleContext<GeneratorBlockContext>(0);
		}
		public GeneratorsExpressionContext(SingleExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.EnterGeneratorsExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.ExitGeneratorsExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypeScriptParserVisitor<TResult> typedVisitor = visitor as ITypeScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGeneratorsExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class PreIncrementExpressionContext : SingleExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PlusPlus() { return GetToken(TypeScriptParser.PlusPlus, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SingleExpressionContext singleExpression() {
			return GetRuleContext<SingleExpressionContext>(0);
		}
		public PreIncrementExpressionContext(SingleExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.EnterPreIncrementExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.ExitPreIncrementExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypeScriptParserVisitor<TResult> typedVisitor = visitor as ITypeScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPreIncrementExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ObjectLiteralExpressionContext : SingleExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ObjectLiteralContext objectLiteral() {
			return GetRuleContext<ObjectLiteralContext>(0);
		}
		public ObjectLiteralExpressionContext(SingleExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.EnterObjectLiteralExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.ExitObjectLiteralExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypeScriptParserVisitor<TResult> typedVisitor = visitor as ITypeScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitObjectLiteralExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class InExpressionContext : SingleExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public SingleExpressionContext[] singleExpression() {
			return GetRuleContexts<SingleExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SingleExpressionContext singleExpression(int i) {
			return GetRuleContext<SingleExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode In() { return GetToken(TypeScriptParser.In, 0); }
		public InExpressionContext(SingleExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.EnterInExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.ExitInExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypeScriptParserVisitor<TResult> typedVisitor = visitor as ITypeScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class LogicalOrExpressionContext : SingleExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public SingleExpressionContext[] singleExpression() {
			return GetRuleContexts<SingleExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SingleExpressionContext singleExpression(int i) {
			return GetRuleContext<SingleExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Or() { return GetToken(TypeScriptParser.Or, 0); }
		public LogicalOrExpressionContext(SingleExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.EnterLogicalOrExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.ExitLogicalOrExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypeScriptParserVisitor<TResult> typedVisitor = visitor as ITypeScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLogicalOrExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class GenericTypesContext : SingleExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypeArgumentsContext typeArguments() {
			return GetRuleContext<TypeArgumentsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionSequenceContext expressionSequence() {
			return GetRuleContext<ExpressionSequenceContext>(0);
		}
		public GenericTypesContext(SingleExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.EnterGenericTypes(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.ExitGenericTypes(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypeScriptParserVisitor<TResult> typedVisitor = visitor as ITypeScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGenericTypes(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class NotExpressionContext : SingleExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Not() { return GetToken(TypeScriptParser.Not, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SingleExpressionContext singleExpression() {
			return GetRuleContext<SingleExpressionContext>(0);
		}
		public NotExpressionContext(SingleExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.EnterNotExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.ExitNotExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypeScriptParserVisitor<TResult> typedVisitor = visitor as ITypeScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNotExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class PreDecreaseExpressionContext : SingleExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MinusMinus() { return GetToken(TypeScriptParser.MinusMinus, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SingleExpressionContext singleExpression() {
			return GetRuleContext<SingleExpressionContext>(0);
		}
		public PreDecreaseExpressionContext(SingleExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.EnterPreDecreaseExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.ExitPreDecreaseExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypeScriptParserVisitor<TResult> typedVisitor = visitor as ITypeScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPreDecreaseExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ArgumentsExpressionContext : SingleExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public SingleExpressionContext singleExpression() {
			return GetRuleContext<SingleExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArgumentsContext arguments() {
			return GetRuleContext<ArgumentsContext>(0);
		}
		public ArgumentsExpressionContext(SingleExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.EnterArgumentsExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.ExitArgumentsExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypeScriptParserVisitor<TResult> typedVisitor = visitor as ITypeScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArgumentsExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ThisExpressionContext : SingleExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode This() { return GetToken(TypeScriptParser.This, 0); }
		public ThisExpressionContext(SingleExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.EnterThisExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.ExitThisExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypeScriptParserVisitor<TResult> typedVisitor = visitor as ITypeScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitThisExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class FunctionExpressionContext : SingleExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public FunctionExpressionDeclarationContext functionExpressionDeclaration() {
			return GetRuleContext<FunctionExpressionDeclarationContext>(0);
		}
		public FunctionExpressionContext(SingleExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.EnterFunctionExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.ExitFunctionExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypeScriptParserVisitor<TResult> typedVisitor = visitor as ITypeScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class UnaryMinusExpressionContext : SingleExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Minus() { return GetToken(TypeScriptParser.Minus, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SingleExpressionContext singleExpression() {
			return GetRuleContext<SingleExpressionContext>(0);
		}
		public UnaryMinusExpressionContext(SingleExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.EnterUnaryMinusExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.ExitUnaryMinusExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypeScriptParserVisitor<TResult> typedVisitor = visitor as ITypeScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnaryMinusExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AssignmentExpressionContext : SingleExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public SingleExpressionContext[] singleExpression() {
			return GetRuleContexts<SingleExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SingleExpressionContext singleExpression(int i) {
			return GetRuleContext<SingleExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Assign() { return GetToken(TypeScriptParser.Assign, 0); }
		public AssignmentExpressionContext(SingleExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.EnterAssignmentExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.ExitAssignmentExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypeScriptParserVisitor<TResult> typedVisitor = visitor as ITypeScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssignmentExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class PostDecreaseExpressionContext : SingleExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public SingleExpressionContext singleExpression() {
			return GetRuleContext<SingleExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MinusMinus() { return GetToken(TypeScriptParser.MinusMinus, 0); }
		public PostDecreaseExpressionContext(SingleExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.EnterPostDecreaseExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.ExitPostDecreaseExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypeScriptParserVisitor<TResult> typedVisitor = visitor as ITypeScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPostDecreaseExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class TypeofExpressionContext : SingleExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Typeof() { return GetToken(TypeScriptParser.Typeof, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SingleExpressionContext singleExpression() {
			return GetRuleContext<SingleExpressionContext>(0);
		}
		public TypeofExpressionContext(SingleExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.EnterTypeofExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.ExitTypeofExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypeScriptParserVisitor<TResult> typedVisitor = visitor as ITypeScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeofExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class InstanceofExpressionContext : SingleExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public SingleExpressionContext[] singleExpression() {
			return GetRuleContexts<SingleExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SingleExpressionContext singleExpression(int i) {
			return GetRuleContext<SingleExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Instanceof() { return GetToken(TypeScriptParser.Instanceof, 0); }
		public InstanceofExpressionContext(SingleExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.EnterInstanceofExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.ExitInstanceofExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypeScriptParserVisitor<TResult> typedVisitor = visitor as ITypeScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInstanceofExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class UnaryPlusExpressionContext : SingleExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Plus() { return GetToken(TypeScriptParser.Plus, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SingleExpressionContext singleExpression() {
			return GetRuleContext<SingleExpressionContext>(0);
		}
		public UnaryPlusExpressionContext(SingleExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.EnterUnaryPlusExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.ExitUnaryPlusExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypeScriptParserVisitor<TResult> typedVisitor = visitor as ITypeScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnaryPlusExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class DeleteExpressionContext : SingleExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Delete() { return GetToken(TypeScriptParser.Delete, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SingleExpressionContext singleExpression() {
			return GetRuleContext<SingleExpressionContext>(0);
		}
		public DeleteExpressionContext(SingleExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.EnterDeleteExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.ExitDeleteExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypeScriptParserVisitor<TResult> typedVisitor = visitor as ITypeScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeleteExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class GeneratorsFunctionExpressionContext : SingleExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public GeneratorFunctionDeclarationContext generatorFunctionDeclaration() {
			return GetRuleContext<GeneratorFunctionDeclarationContext>(0);
		}
		public GeneratorsFunctionExpressionContext(SingleExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.EnterGeneratorsFunctionExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.ExitGeneratorsFunctionExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypeScriptParserVisitor<TResult> typedVisitor = visitor as ITypeScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGeneratorsFunctionExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ArrowFunctionExpressionContext : SingleExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ArrowFunctionDeclarationContext arrowFunctionDeclaration() {
			return GetRuleContext<ArrowFunctionDeclarationContext>(0);
		}
		public ArrowFunctionExpressionContext(SingleExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.EnterArrowFunctionExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.ExitArrowFunctionExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypeScriptParserVisitor<TResult> typedVisitor = visitor as ITypeScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArrowFunctionExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class IteratorsExpressionContext : SingleExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public IteratorBlockContext iteratorBlock() {
			return GetRuleContext<IteratorBlockContext>(0);
		}
		public IteratorsExpressionContext(SingleExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.EnterIteratorsExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.ExitIteratorsExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypeScriptParserVisitor<TResult> typedVisitor = visitor as ITypeScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIteratorsExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class EqualityExpressionContext : SingleExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public SingleExpressionContext[] singleExpression() {
			return GetRuleContexts<SingleExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SingleExpressionContext singleExpression(int i) {
			return GetRuleContext<SingleExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Equals_() { return GetToken(TypeScriptParser.Equals_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NotEquals() { return GetToken(TypeScriptParser.NotEquals, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IdentityEquals() { return GetToken(TypeScriptParser.IdentityEquals, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IdentityNotEquals() { return GetToken(TypeScriptParser.IdentityNotEquals, 0); }
		public EqualityExpressionContext(SingleExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.EnterEqualityExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.ExitEqualityExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypeScriptParserVisitor<TResult> typedVisitor = visitor as ITypeScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEqualityExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class BitXOrExpressionContext : SingleExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public SingleExpressionContext[] singleExpression() {
			return GetRuleContexts<SingleExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SingleExpressionContext singleExpression(int i) {
			return GetRuleContext<SingleExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BitXOr() { return GetToken(TypeScriptParser.BitXOr, 0); }
		public BitXOrExpressionContext(SingleExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.EnterBitXOrExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.ExitBitXOrExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypeScriptParserVisitor<TResult> typedVisitor = visitor as ITypeScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBitXOrExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class CastAsExpressionContext : SingleExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public SingleExpressionContext singleExpression() {
			return GetRuleContext<SingleExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode As() { return GetToken(TypeScriptParser.As, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public AsExpressionContext asExpression() {
			return GetRuleContext<AsExpressionContext>(0);
		}
		public CastAsExpressionContext(SingleExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.EnterCastAsExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.ExitCastAsExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypeScriptParserVisitor<TResult> typedVisitor = visitor as ITypeScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCastAsExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class SuperExpressionContext : SingleExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Super() { return GetToken(TypeScriptParser.Super, 0); }
		public SuperExpressionContext(SingleExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.EnterSuperExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.ExitSuperExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypeScriptParserVisitor<TResult> typedVisitor = visitor as ITypeScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSuperExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class MultiplicativeExpressionContext : SingleExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public SingleExpressionContext[] singleExpression() {
			return GetRuleContexts<SingleExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SingleExpressionContext singleExpression(int i) {
			return GetRuleContext<SingleExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Multiply() { return GetToken(TypeScriptParser.Multiply, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Divide() { return GetToken(TypeScriptParser.Divide, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Modulus() { return GetToken(TypeScriptParser.Modulus, 0); }
		public MultiplicativeExpressionContext(SingleExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.EnterMultiplicativeExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.ExitMultiplicativeExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypeScriptParserVisitor<TResult> typedVisitor = visitor as ITypeScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMultiplicativeExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class BitShiftExpressionContext : SingleExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public SingleExpressionContext[] singleExpression() {
			return GetRuleContexts<SingleExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SingleExpressionContext singleExpression(int i) {
			return GetRuleContext<SingleExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LeftShiftArithmetic() { return GetToken(TypeScriptParser.LeftShiftArithmetic, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RightShiftArithmetic() { return GetToken(TypeScriptParser.RightShiftArithmetic, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RightShiftLogical() { return GetToken(TypeScriptParser.RightShiftLogical, 0); }
		public BitShiftExpressionContext(SingleExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.EnterBitShiftExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.ExitBitShiftExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypeScriptParserVisitor<TResult> typedVisitor = visitor as ITypeScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBitShiftExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ParenthesizedExpressionContext : SingleExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OpenParen() { return GetToken(TypeScriptParser.OpenParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionSequenceContext expressionSequence() {
			return GetRuleContext<ExpressionSequenceContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CloseParen() { return GetToken(TypeScriptParser.CloseParen, 0); }
		public ParenthesizedExpressionContext(SingleExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.EnterParenthesizedExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.ExitParenthesizedExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypeScriptParserVisitor<TResult> typedVisitor = visitor as ITypeScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParenthesizedExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AdditiveExpressionContext : SingleExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public SingleExpressionContext[] singleExpression() {
			return GetRuleContexts<SingleExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SingleExpressionContext singleExpression(int i) {
			return GetRuleContext<SingleExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Plus() { return GetToken(TypeScriptParser.Plus, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Minus() { return GetToken(TypeScriptParser.Minus, 0); }
		public AdditiveExpressionContext(SingleExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.EnterAdditiveExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.ExitAdditiveExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypeScriptParserVisitor<TResult> typedVisitor = visitor as ITypeScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAdditiveExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class RelationalExpressionContext : SingleExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public SingleExpressionContext[] singleExpression() {
			return GetRuleContexts<SingleExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SingleExpressionContext singleExpression(int i) {
			return GetRuleContext<SingleExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LessThan() { return GetToken(TypeScriptParser.LessThan, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MoreThan() { return GetToken(TypeScriptParser.MoreThan, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LessThanEquals() { return GetToken(TypeScriptParser.LessThanEquals, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GreaterThanEquals() { return GetToken(TypeScriptParser.GreaterThanEquals, 0); }
		public RelationalExpressionContext(SingleExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.EnterRelationalExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.ExitRelationalExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypeScriptParserVisitor<TResult> typedVisitor = visitor as ITypeScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRelationalExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class PostIncrementExpressionContext : SingleExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public SingleExpressionContext singleExpression() {
			return GetRuleContext<SingleExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PlusPlus() { return GetToken(TypeScriptParser.PlusPlus, 0); }
		public PostIncrementExpressionContext(SingleExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.EnterPostIncrementExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.ExitPostIncrementExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypeScriptParserVisitor<TResult> typedVisitor = visitor as ITypeScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPostIncrementExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class YieldExpressionContext : SingleExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public YieldStatementContext yieldStatement() {
			return GetRuleContext<YieldStatementContext>(0);
		}
		public YieldExpressionContext(SingleExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.EnterYieldExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.ExitYieldExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypeScriptParserVisitor<TResult> typedVisitor = visitor as ITypeScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitYieldExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class BitNotExpressionContext : SingleExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BitNot() { return GetToken(TypeScriptParser.BitNot, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SingleExpressionContext singleExpression() {
			return GetRuleContext<SingleExpressionContext>(0);
		}
		public BitNotExpressionContext(SingleExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.EnterBitNotExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.ExitBitNotExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypeScriptParserVisitor<TResult> typedVisitor = visitor as ITypeScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBitNotExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class NewExpressionContext : SingleExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode New() { return GetToken(TypeScriptParser.New, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SingleExpressionContext singleExpression() {
			return GetRuleContext<SingleExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeArgumentsContext typeArguments() {
			return GetRuleContext<TypeArgumentsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArgumentsContext arguments() {
			return GetRuleContext<ArgumentsContext>(0);
		}
		public NewExpressionContext(SingleExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.EnterNewExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.ExitNewExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypeScriptParserVisitor<TResult> typedVisitor = visitor as ITypeScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNewExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class LiteralExpressionContext : SingleExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public LiteralContext literal() {
			return GetRuleContext<LiteralContext>(0);
		}
		public LiteralExpressionContext(SingleExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.EnterLiteralExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.ExitLiteralExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypeScriptParserVisitor<TResult> typedVisitor = visitor as ITypeScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLiteralExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ArrayLiteralExpressionContext : SingleExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ArrayLiteralContext arrayLiteral() {
			return GetRuleContext<ArrayLiteralContext>(0);
		}
		public ArrayLiteralExpressionContext(SingleExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.EnterArrayLiteralExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.ExitArrayLiteralExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypeScriptParserVisitor<TResult> typedVisitor = visitor as ITypeScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArrayLiteralExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class MemberDotExpressionContext : SingleExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public SingleExpressionContext singleExpression() {
			return GetRuleContext<SingleExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Dot() { return GetToken(TypeScriptParser.Dot, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierNameContext identifierName() {
			return GetRuleContext<IdentifierNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NestedTypeGenericContext nestedTypeGeneric() {
			return GetRuleContext<NestedTypeGenericContext>(0);
		}
		public MemberDotExpressionContext(SingleExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.EnterMemberDotExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.ExitMemberDotExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypeScriptParserVisitor<TResult> typedVisitor = visitor as ITypeScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMemberDotExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ClassExpressionContext : SingleExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Class() { return GetToken(TypeScriptParser.Class, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ClassTailContext classTail() {
			return GetRuleContext<ClassTailContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(TypeScriptParser.Identifier, 0); }
		public ClassExpressionContext(SingleExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.EnterClassExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.ExitClassExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypeScriptParserVisitor<TResult> typedVisitor = visitor as ITypeScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClassExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class MemberIndexExpressionContext : SingleExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public SingleExpressionContext singleExpression() {
			return GetRuleContext<SingleExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OpenBracket() { return GetToken(TypeScriptParser.OpenBracket, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionSequenceContext expressionSequence() {
			return GetRuleContext<ExpressionSequenceContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CloseBracket() { return GetToken(TypeScriptParser.CloseBracket, 0); }
		public MemberIndexExpressionContext(SingleExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.EnterMemberIndexExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.ExitMemberIndexExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypeScriptParserVisitor<TResult> typedVisitor = visitor as ITypeScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMemberIndexExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class IdentifierExpressionContext : SingleExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierNameContext identifierName() {
			return GetRuleContext<IdentifierNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SingleExpressionContext singleExpression() {
			return GetRuleContext<SingleExpressionContext>(0);
		}
		public IdentifierExpressionContext(SingleExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.EnterIdentifierExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.ExitIdentifierExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypeScriptParserVisitor<TResult> typedVisitor = visitor as ITypeScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIdentifierExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class BitAndExpressionContext : SingleExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public SingleExpressionContext[] singleExpression() {
			return GetRuleContexts<SingleExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SingleExpressionContext singleExpression(int i) {
			return GetRuleContext<SingleExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BitAnd() { return GetToken(TypeScriptParser.BitAnd, 0); }
		public BitAndExpressionContext(SingleExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.EnterBitAndExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.ExitBitAndExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypeScriptParserVisitor<TResult> typedVisitor = visitor as ITypeScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBitAndExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class BitOrExpressionContext : SingleExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public SingleExpressionContext[] singleExpression() {
			return GetRuleContexts<SingleExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SingleExpressionContext singleExpression(int i) {
			return GetRuleContext<SingleExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BitOr() { return GetToken(TypeScriptParser.BitOr, 0); }
		public BitOrExpressionContext(SingleExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.EnterBitOrExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.ExitBitOrExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypeScriptParserVisitor<TResult> typedVisitor = visitor as ITypeScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBitOrExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AssignmentOperatorExpressionContext : SingleExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public SingleExpressionContext[] singleExpression() {
			return GetRuleContexts<SingleExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SingleExpressionContext singleExpression(int i) {
			return GetRuleContext<SingleExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AssignmentOperatorContext assignmentOperator() {
			return GetRuleContext<AssignmentOperatorContext>(0);
		}
		public AssignmentOperatorExpressionContext(SingleExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.EnterAssignmentOperatorExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.ExitAssignmentOperatorExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypeScriptParserVisitor<TResult> typedVisitor = visitor as ITypeScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssignmentOperatorExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class VoidExpressionContext : SingleExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Void() { return GetToken(TypeScriptParser.Void, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SingleExpressionContext singleExpression() {
			return GetRuleContext<SingleExpressionContext>(0);
		}
		public VoidExpressionContext(SingleExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.EnterVoidExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.ExitVoidExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypeScriptParserVisitor<TResult> typedVisitor = visitor as ITypeScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVoidExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SingleExpressionContext singleExpression() {
		return singleExpression(0);
	}

	private SingleExpressionContext singleExpression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		SingleExpressionContext _localctx = new SingleExpressionContext(Context, _parentState);
		SingleExpressionContext _prevctx = _localctx;
		int _startState = 254;
		EnterRecursionRule(_localctx, 254, RULE_singleExpression, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1503;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,192,Context) ) {
			case 1:
				{
				_localctx = new FunctionExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;

				State = 1449;
				functionExpressionDeclaration();
				}
				break;
			case 2:
				{
				_localctx = new ArrowFunctionExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 1450;
				arrowFunctionDeclaration();
				}
				break;
			case 3:
				{
				_localctx = new ClassExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 1451;
				Match(Class);
				State = 1453;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==Identifier) {
					{
					State = 1452;
					Match(Identifier);
					}
				}

				State = 1455;
				classTail();
				}
				break;
			case 4:
				{
				_localctx = new NewExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 1456;
				Match(New);
				State = 1457;
				singleExpression(0);
				State = 1459;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,188,Context) ) {
				case 1:
					{
					State = 1458;
					typeArguments();
					}
					break;
				}
				State = 1462;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,189,Context) ) {
				case 1:
					{
					State = 1461;
					arguments();
					}
					break;
				}
				}
				break;
			case 5:
				{
				_localctx = new DeleteExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 1464;
				Match(Delete);
				State = 1465;
				singleExpression(38);
				}
				break;
			case 6:
				{
				_localctx = new VoidExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 1466;
				Match(Void);
				State = 1467;
				singleExpression(37);
				}
				break;
			case 7:
				{
				_localctx = new TypeofExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 1468;
				Match(Typeof);
				State = 1469;
				singleExpression(36);
				}
				break;
			case 8:
				{
				_localctx = new PreIncrementExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 1470;
				Match(PlusPlus);
				State = 1471;
				singleExpression(35);
				}
				break;
			case 9:
				{
				_localctx = new PreDecreaseExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 1472;
				Match(MinusMinus);
				State = 1473;
				singleExpression(34);
				}
				break;
			case 10:
				{
				_localctx = new UnaryPlusExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 1474;
				Match(Plus);
				State = 1475;
				singleExpression(33);
				}
				break;
			case 11:
				{
				_localctx = new UnaryMinusExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 1476;
				Match(Minus);
				State = 1477;
				singleExpression(32);
				}
				break;
			case 12:
				{
				_localctx = new BitNotExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 1478;
				Match(BitNot);
				State = 1479;
				singleExpression(31);
				}
				break;
			case 13:
				{
				_localctx = new NotExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 1480;
				Match(Not);
				State = 1481;
				singleExpression(30);
				}
				break;
			case 14:
				{
				_localctx = new IteratorsExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 1482;
				iteratorBlock();
				}
				break;
			case 15:
				{
				_localctx = new GeneratorsExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 1483;
				generatorBlock();
				}
				break;
			case 16:
				{
				_localctx = new GeneratorsFunctionExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 1484;
				generatorFunctionDeclaration();
				}
				break;
			case 17:
				{
				_localctx = new YieldExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 1485;
				yieldStatement();
				}
				break;
			case 18:
				{
				_localctx = new ThisExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 1486;
				Match(This);
				}
				break;
			case 19:
				{
				_localctx = new IdentifierExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 1487;
				identifierName();
				State = 1489;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,190,Context) ) {
				case 1:
					{
					State = 1488;
					singleExpression(0);
					}
					break;
				}
				}
				break;
			case 20:
				{
				_localctx = new SuperExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 1491;
				Match(Super);
				}
				break;
			case 21:
				{
				_localctx = new LiteralExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 1492;
				literal();
				}
				break;
			case 22:
				{
				_localctx = new ArrayLiteralExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 1493;
				arrayLiteral();
				}
				break;
			case 23:
				{
				_localctx = new ObjectLiteralExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 1494;
				objectLiteral();
				}
				break;
			case 24:
				{
				_localctx = new ParenthesizedExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 1495;
				Match(OpenParen);
				State = 1496;
				expressionSequence();
				State = 1497;
				Match(CloseParen);
				}
				break;
			case 25:
				{
				_localctx = new GenericTypesContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 1499;
				typeArguments();
				State = 1501;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,191,Context) ) {
				case 1:
					{
					State = 1500;
					expressionSequence();
					}
					break;
				}
				}
				break;
			}
			Context.Stop = TokenStream.LT(-1);
			State = 1580;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,195,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 1578;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,194,Context) ) {
					case 1:
						{
						_localctx = new MultiplicativeExpressionContext(new SingleExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_singleExpression);
						State = 1505;
						if (!(Precpred(Context, 29))) throw new FailedPredicateException(this, "Precpred(Context, 29)");
						State = 1506;
						_la = TokenStream.LA(1);
						if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << Multiply) | (1L << Divide) | (1L << Modulus))) != 0)) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 1507;
						singleExpression(30);
						}
						break;
					case 2:
						{
						_localctx = new AdditiveExpressionContext(new SingleExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_singleExpression);
						State = 1508;
						if (!(Precpred(Context, 28))) throw new FailedPredicateException(this, "Precpred(Context, 28)");
						State = 1509;
						_la = TokenStream.LA(1);
						if ( !(_la==Plus || _la==Minus) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 1510;
						singleExpression(29);
						}
						break;
					case 3:
						{
						_localctx = new BitShiftExpressionContext(new SingleExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_singleExpression);
						State = 1511;
						if (!(Precpred(Context, 27))) throw new FailedPredicateException(this, "Precpred(Context, 27)");
						State = 1512;
						_la = TokenStream.LA(1);
						if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << RightShiftArithmetic) | (1L << LeftShiftArithmetic) | (1L << RightShiftLogical))) != 0)) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 1513;
						singleExpression(28);
						}
						break;
					case 4:
						{
						_localctx = new RelationalExpressionContext(new SingleExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_singleExpression);
						State = 1514;
						if (!(Precpred(Context, 26))) throw new FailedPredicateException(this, "Precpred(Context, 26)");
						State = 1515;
						_la = TokenStream.LA(1);
						if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << LessThan) | (1L << MoreThan) | (1L << LessThanEquals) | (1L << GreaterThanEquals))) != 0)) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 1516;
						singleExpression(27);
						}
						break;
					case 5:
						{
						_localctx = new InstanceofExpressionContext(new SingleExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_singleExpression);
						State = 1517;
						if (!(Precpred(Context, 25))) throw new FailedPredicateException(this, "Precpred(Context, 25)");
						State = 1518;
						Match(Instanceof);
						State = 1519;
						singleExpression(26);
						}
						break;
					case 6:
						{
						_localctx = new InExpressionContext(new SingleExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_singleExpression);
						State = 1520;
						if (!(Precpred(Context, 24))) throw new FailedPredicateException(this, "Precpred(Context, 24)");
						State = 1521;
						Match(In);
						State = 1522;
						singleExpression(25);
						}
						break;
					case 7:
						{
						_localctx = new EqualityExpressionContext(new SingleExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_singleExpression);
						State = 1523;
						if (!(Precpred(Context, 23))) throw new FailedPredicateException(this, "Precpred(Context, 23)");
						State = 1524;
						_la = TokenStream.LA(1);
						if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << Equals_) | (1L << NotEquals) | (1L << IdentityEquals) | (1L << IdentityNotEquals))) != 0)) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 1525;
						singleExpression(24);
						}
						break;
					case 8:
						{
						_localctx = new BitAndExpressionContext(new SingleExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_singleExpression);
						State = 1526;
						if (!(Precpred(Context, 22))) throw new FailedPredicateException(this, "Precpred(Context, 22)");
						State = 1527;
						Match(BitAnd);
						State = 1528;
						singleExpression(23);
						}
						break;
					case 9:
						{
						_localctx = new BitXOrExpressionContext(new SingleExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_singleExpression);
						State = 1529;
						if (!(Precpred(Context, 21))) throw new FailedPredicateException(this, "Precpred(Context, 21)");
						State = 1530;
						Match(BitXOr);
						State = 1531;
						singleExpression(22);
						}
						break;
					case 10:
						{
						_localctx = new BitOrExpressionContext(new SingleExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_singleExpression);
						State = 1532;
						if (!(Precpred(Context, 20))) throw new FailedPredicateException(this, "Precpred(Context, 20)");
						State = 1533;
						Match(BitOr);
						State = 1534;
						singleExpression(21);
						}
						break;
					case 11:
						{
						_localctx = new LogicalAndExpressionContext(new SingleExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_singleExpression);
						State = 1535;
						if (!(Precpred(Context, 19))) throw new FailedPredicateException(this, "Precpred(Context, 19)");
						State = 1536;
						Match(And);
						State = 1537;
						singleExpression(20);
						}
						break;
					case 12:
						{
						_localctx = new LogicalOrExpressionContext(new SingleExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_singleExpression);
						State = 1538;
						if (!(Precpred(Context, 18))) throw new FailedPredicateException(this, "Precpred(Context, 18)");
						State = 1539;
						Match(Or);
						State = 1540;
						singleExpression(19);
						}
						break;
					case 13:
						{
						_localctx = new TernaryExpressionContext(new SingleExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_singleExpression);
						State = 1541;
						if (!(Precpred(Context, 17))) throw new FailedPredicateException(this, "Precpred(Context, 17)");
						State = 1542;
						Match(QuestionMark);
						State = 1543;
						singleExpression(0);
						State = 1544;
						Match(Colon);
						State = 1545;
						singleExpression(18);
						}
						break;
					case 14:
						{
						_localctx = new AssignmentExpressionContext(new SingleExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_singleExpression);
						State = 1547;
						if (!(Precpred(Context, 16))) throw new FailedPredicateException(this, "Precpred(Context, 16)");
						State = 1548;
						Match(Assign);
						State = 1549;
						singleExpression(17);
						}
						break;
					case 15:
						{
						_localctx = new AssignmentOperatorExpressionContext(new SingleExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_singleExpression);
						State = 1550;
						if (!(Precpred(Context, 15))) throw new FailedPredicateException(this, "Precpred(Context, 15)");
						State = 1551;
						assignmentOperator();
						State = 1552;
						singleExpression(16);
						}
						break;
					case 16:
						{
						_localctx = new MemberIndexExpressionContext(new SingleExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_singleExpression);
						State = 1554;
						if (!(Precpred(Context, 44))) throw new FailedPredicateException(this, "Precpred(Context, 44)");
						State = 1555;
						Match(OpenBracket);
						State = 1556;
						expressionSequence();
						State = 1557;
						Match(CloseBracket);
						}
						break;
					case 17:
						{
						_localctx = new MemberDotExpressionContext(new SingleExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_singleExpression);
						State = 1559;
						if (!(Precpred(Context, 43))) throw new FailedPredicateException(this, "Precpred(Context, 43)");
						State = 1560;
						Match(Dot);
						State = 1561;
						identifierName();
						State = 1563;
						ErrorHandler.Sync(this);
						switch ( Interpreter.AdaptivePredict(TokenStream,193,Context) ) {
						case 1:
							{
							State = 1562;
							nestedTypeGeneric();
							}
							break;
						}
						}
						break;
					case 18:
						{
						_localctx = new ArgumentsExpressionContext(new SingleExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_singleExpression);
						State = 1565;
						if (!(Precpred(Context, 42))) throw new FailedPredicateException(this, "Precpred(Context, 42)");
						State = 1566;
						arguments();
						}
						break;
					case 19:
						{
						_localctx = new PostIncrementExpressionContext(new SingleExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_singleExpression);
						State = 1567;
						if (!(Precpred(Context, 40))) throw new FailedPredicateException(this, "Precpred(Context, 40)");
						State = 1568;
						if (!(this.notLineTerminator())) throw new FailedPredicateException(this, "this.notLineTerminator()");
						State = 1569;
						Match(PlusPlus);
						}
						break;
					case 20:
						{
						_localctx = new PostDecreaseExpressionContext(new SingleExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_singleExpression);
						State = 1570;
						if (!(Precpred(Context, 39))) throw new FailedPredicateException(this, "Precpred(Context, 39)");
						State = 1571;
						if (!(this.notLineTerminator())) throw new FailedPredicateException(this, "this.notLineTerminator()");
						State = 1572;
						Match(MinusMinus);
						}
						break;
					case 21:
						{
						_localctx = new TemplateStringExpressionContext(new SingleExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_singleExpression);
						State = 1573;
						if (!(Precpred(Context, 14))) throw new FailedPredicateException(this, "Precpred(Context, 14)");
						State = 1574;
						Match(TemplateStringLiteral);
						}
						break;
					case 22:
						{
						_localctx = new CastAsExpressionContext(new SingleExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_singleExpression);
						State = 1575;
						if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
						State = 1576;
						Match(As);
						State = 1577;
						asExpression();
						}
						break;
					}
					} 
				}
				State = 1582;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,195,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class AsExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public PredefinedTypeContext predefinedType() {
			return GetRuleContext<PredefinedTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OpenBracket() { return GetToken(TypeScriptParser.OpenBracket, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CloseBracket() { return GetToken(TypeScriptParser.CloseBracket, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SingleExpressionContext singleExpression() {
			return GetRuleContext<SingleExpressionContext>(0);
		}
		public AsExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_asExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.EnterAsExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.ExitAsExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypeScriptParserVisitor<TResult> typedVisitor = visitor as ITypeScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAsExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AsExpressionContext asExpression() {
		AsExpressionContext _localctx = new AsExpressionContext(Context, State);
		EnterRule(_localctx, 256, RULE_asExpression);
		try {
			State = 1589;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,197,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1583;
				predefinedType();
				State = 1586;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,196,Context) ) {
				case 1:
					{
					State = 1584;
					Match(OpenBracket);
					State = 1585;
					Match(CloseBracket);
					}
					break;
				}
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1588;
				singleExpression(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArrowFunctionDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ArrowFunctionParametersContext arrowFunctionParameters() {
			return GetRuleContext<ArrowFunctionParametersContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ARROW() { return GetToken(TypeScriptParser.ARROW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ArrowFunctionBodyContext arrowFunctionBody() {
			return GetRuleContext<ArrowFunctionBodyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Async() { return GetToken(TypeScriptParser.Async, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeAnnotationContext typeAnnotation() {
			return GetRuleContext<TypeAnnotationContext>(0);
		}
		public ArrowFunctionDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arrowFunctionDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.EnterArrowFunctionDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.ExitArrowFunctionDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypeScriptParserVisitor<TResult> typedVisitor = visitor as ITypeScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArrowFunctionDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArrowFunctionDeclarationContext arrowFunctionDeclaration() {
		ArrowFunctionDeclarationContext _localctx = new ArrowFunctionDeclarationContext(Context, State);
		EnterRule(_localctx, 258, RULE_arrowFunctionDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1592;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Async) {
				{
				State = 1591;
				Match(Async);
				}
			}

			State = 1594;
			arrowFunctionParameters();
			State = 1596;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Colon) {
				{
				State = 1595;
				typeAnnotation();
				}
			}

			State = 1598;
			Match(ARROW);
			State = 1599;
			arrowFunctionBody();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArrowFunctionParametersContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(TypeScriptParser.Identifier, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OpenParen() { return GetToken(TypeScriptParser.OpenParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CloseParen() { return GetToken(TypeScriptParser.CloseParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FormalParameterListContext formalParameterList() {
			return GetRuleContext<FormalParameterListContext>(0);
		}
		public ArrowFunctionParametersContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arrowFunctionParameters; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.EnterArrowFunctionParameters(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.ExitArrowFunctionParameters(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypeScriptParserVisitor<TResult> typedVisitor = visitor as ITypeScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArrowFunctionParameters(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArrowFunctionParametersContext arrowFunctionParameters() {
		ArrowFunctionParametersContext _localctx = new ArrowFunctionParametersContext(Context, State);
		EnterRule(_localctx, 260, RULE_arrowFunctionParameters);
		int _la;
		try {
			State = 1607;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case Identifier:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1601;
				Match(Identifier);
				}
				break;
			case OpenParen:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1602;
				Match(OpenParen);
				State = 1604;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << OpenBracket) | (1L << OpenBrace) | (1L << Ellipsis))) != 0) || ((((_la - 100)) & ~0x3f) == 0 && ((1L << (_la - 100)) & ((1L << (Private - 100)) | (1L << (Public - 100)) | (1L << (Protected - 100)) | (1L << (TypeAlias - 100)) | (1L << (Require - 100)) | (1L << (At - 100)) | (1L << (Identifier - 100)))) != 0)) {
					{
					State = 1603;
					formalParameterList();
					}
				}

				State = 1606;
				Match(CloseParen);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArrowFunctionBodyContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SingleExpressionContext singleExpression() {
			return GetRuleContext<SingleExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OpenBrace() { return GetToken(TypeScriptParser.OpenBrace, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FunctionBodyContext functionBody() {
			return GetRuleContext<FunctionBodyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CloseBrace() { return GetToken(TypeScriptParser.CloseBrace, 0); }
		public ArrowFunctionBodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arrowFunctionBody; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.EnterArrowFunctionBody(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.ExitArrowFunctionBody(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypeScriptParserVisitor<TResult> typedVisitor = visitor as ITypeScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArrowFunctionBody(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArrowFunctionBodyContext arrowFunctionBody() {
		ArrowFunctionBodyContext _localctx = new ArrowFunctionBodyContext(Context, State);
		EnterRule(_localctx, 262, RULE_arrowFunctionBody);
		try {
			State = 1614;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,202,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1609;
				singleExpression(0);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1610;
				Match(OpenBrace);
				State = 1611;
				functionBody();
				State = 1612;
				Match(CloseBrace);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssignmentOperatorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MultiplyAssign() { return GetToken(TypeScriptParser.MultiplyAssign, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DivideAssign() { return GetToken(TypeScriptParser.DivideAssign, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ModulusAssign() { return GetToken(TypeScriptParser.ModulusAssign, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PlusAssign() { return GetToken(TypeScriptParser.PlusAssign, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MinusAssign() { return GetToken(TypeScriptParser.MinusAssign, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LeftShiftArithmeticAssign() { return GetToken(TypeScriptParser.LeftShiftArithmeticAssign, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RightShiftArithmeticAssign() { return GetToken(TypeScriptParser.RightShiftArithmeticAssign, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RightShiftLogicalAssign() { return GetToken(TypeScriptParser.RightShiftLogicalAssign, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BitAndAssign() { return GetToken(TypeScriptParser.BitAndAssign, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BitXorAssign() { return GetToken(TypeScriptParser.BitXorAssign, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BitOrAssign() { return GetToken(TypeScriptParser.BitOrAssign, 0); }
		public AssignmentOperatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assignmentOperator; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.EnterAssignmentOperator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.ExitAssignmentOperator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypeScriptParserVisitor<TResult> typedVisitor = visitor as ITypeScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssignmentOperator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AssignmentOperatorContext assignmentOperator() {
		AssignmentOperatorContext _localctx = new AssignmentOperatorContext(Context, State);
		EnterRule(_localctx, 264, RULE_assignmentOperator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1616;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << MultiplyAssign) | (1L << DivideAssign) | (1L << ModulusAssign) | (1L << PlusAssign) | (1L << MinusAssign) | (1L << LeftShiftArithmeticAssign) | (1L << RightShiftArithmeticAssign) | (1L << RightShiftLogicalAssign) | (1L << BitAndAssign) | (1L << BitXorAssign) | (1L << BitOrAssign))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LiteralContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NullLiteral() { return GetToken(TypeScriptParser.NullLiteral, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BooleanLiteral() { return GetToken(TypeScriptParser.BooleanLiteral, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode StringLiteral() { return GetToken(TypeScriptParser.StringLiteral, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TemplateStringLiteral() { return GetToken(TypeScriptParser.TemplateStringLiteral, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RegularExpressionLiteral() { return GetToken(TypeScriptParser.RegularExpressionLiteral, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NumericLiteralContext numericLiteral() {
			return GetRuleContext<NumericLiteralContext>(0);
		}
		public LiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_literal; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.EnterLiteral(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.ExitLiteral(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypeScriptParserVisitor<TResult> typedVisitor = visitor as ITypeScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LiteralContext literal() {
		LiteralContext _localctx = new LiteralContext(Context, State);
		EnterRule(_localctx, 266, RULE_literal);
		try {
			State = 1624;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case NullLiteral:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1618;
				Match(NullLiteral);
				}
				break;
			case BooleanLiteral:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1619;
				Match(BooleanLiteral);
				}
				break;
			case StringLiteral:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1620;
				Match(StringLiteral);
				}
				break;
			case TemplateStringLiteral:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1621;
				Match(TemplateStringLiteral);
				}
				break;
			case RegularExpressionLiteral:
				EnterOuterAlt(_localctx, 5);
				{
				State = 1622;
				Match(RegularExpressionLiteral);
				}
				break;
			case DecimalLiteral:
			case HexIntegerLiteral:
			case OctalIntegerLiteral:
			case OctalIntegerLiteral2:
			case BinaryIntegerLiteral:
				EnterOuterAlt(_localctx, 6);
				{
				State = 1623;
				numericLiteral();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NumericLiteralContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DecimalLiteral() { return GetToken(TypeScriptParser.DecimalLiteral, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HexIntegerLiteral() { return GetToken(TypeScriptParser.HexIntegerLiteral, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OctalIntegerLiteral() { return GetToken(TypeScriptParser.OctalIntegerLiteral, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OctalIntegerLiteral2() { return GetToken(TypeScriptParser.OctalIntegerLiteral2, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BinaryIntegerLiteral() { return GetToken(TypeScriptParser.BinaryIntegerLiteral, 0); }
		public NumericLiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_numericLiteral; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.EnterNumericLiteral(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.ExitNumericLiteral(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypeScriptParserVisitor<TResult> typedVisitor = visitor as ITypeScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNumericLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NumericLiteralContext numericLiteral() {
		NumericLiteralContext _localctx = new NumericLiteralContext(Context, State);
		EnterRule(_localctx, 268, RULE_numericLiteral);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1626;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << DecimalLiteral) | (1L << HexIntegerLiteral) | (1L << OctalIntegerLiteral) | (1L << OctalIntegerLiteral2) | (1L << BinaryIntegerLiteral))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IdentifierNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(TypeScriptParser.Identifier, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ReservedWordContext reservedWord() {
			return GetRuleContext<ReservedWordContext>(0);
		}
		public IdentifierNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_identifierName; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.EnterIdentifierName(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.ExitIdentifierName(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypeScriptParserVisitor<TResult> typedVisitor = visitor as ITypeScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIdentifierName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IdentifierNameContext identifierName() {
		IdentifierNameContext _localctx = new IdentifierNameContext(Context, State);
		EnterRule(_localctx, 270, RULE_identifierName);
		try {
			State = 1630;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case Identifier:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1628;
				Match(Identifier);
				}
				break;
			case NullLiteral:
			case BooleanLiteral:
			case Break:
			case Do:
			case Instanceof:
			case Typeof:
			case Case:
			case Else:
			case New:
			case Var:
			case Catch:
			case Finally:
			case Return:
			case Void:
			case Continue:
			case For:
			case Switch:
			case While:
			case Debugger:
			case Function:
			case This:
			case With:
			case Default:
			case If:
			case Throw:
			case Delete:
			case In:
			case Try:
			case From:
			case ReadOnly:
			case Async:
			case Class:
			case Enum:
			case Extends:
			case Super:
			case Const:
			case Export:
			case Import:
			case Implements:
			case Let:
			case Private:
			case Public:
			case Interface:
			case Package:
			case Protected:
			case Static:
			case Yield:
			case String:
			case TypeAlias:
			case Get:
			case Set:
			case Require:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1629;
				reservedWord();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IdentifierOrKeyWordContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(TypeScriptParser.Identifier, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TypeAlias() { return GetToken(TypeScriptParser.TypeAlias, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Require() { return GetToken(TypeScriptParser.Require, 0); }
		public IdentifierOrKeyWordContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_identifierOrKeyWord; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.EnterIdentifierOrKeyWord(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.ExitIdentifierOrKeyWord(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypeScriptParserVisitor<TResult> typedVisitor = visitor as ITypeScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIdentifierOrKeyWord(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IdentifierOrKeyWordContext identifierOrKeyWord() {
		IdentifierOrKeyWordContext _localctx = new IdentifierOrKeyWordContext(Context, State);
		EnterRule(_localctx, 272, RULE_identifierOrKeyWord);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1632;
			_la = TokenStream.LA(1);
			if ( !(((((_la - 112)) & ~0x3f) == 0 && ((1L << (_la - 112)) & ((1L << (TypeAlias - 112)) | (1L << (Require - 112)) | (1L << (Identifier - 112)))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReservedWordContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public KeywordContext keyword() {
			return GetRuleContext<KeywordContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NullLiteral() { return GetToken(TypeScriptParser.NullLiteral, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BooleanLiteral() { return GetToken(TypeScriptParser.BooleanLiteral, 0); }
		public ReservedWordContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_reservedWord; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.EnterReservedWord(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.ExitReservedWord(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypeScriptParserVisitor<TResult> typedVisitor = visitor as ITypeScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReservedWord(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ReservedWordContext reservedWord() {
		ReservedWordContext _localctx = new ReservedWordContext(Context, State);
		EnterRule(_localctx, 274, RULE_reservedWord);
		try {
			State = 1637;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case Break:
			case Do:
			case Instanceof:
			case Typeof:
			case Case:
			case Else:
			case New:
			case Var:
			case Catch:
			case Finally:
			case Return:
			case Void:
			case Continue:
			case For:
			case Switch:
			case While:
			case Debugger:
			case Function:
			case This:
			case With:
			case Default:
			case If:
			case Throw:
			case Delete:
			case In:
			case Try:
			case From:
			case ReadOnly:
			case Async:
			case Class:
			case Enum:
			case Extends:
			case Super:
			case Const:
			case Export:
			case Import:
			case Implements:
			case Let:
			case Private:
			case Public:
			case Interface:
			case Package:
			case Protected:
			case Static:
			case Yield:
			case String:
			case TypeAlias:
			case Get:
			case Set:
			case Require:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1634;
				keyword();
				}
				break;
			case NullLiteral:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1635;
				Match(NullLiteral);
				}
				break;
			case BooleanLiteral:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1636;
				Match(BooleanLiteral);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class KeywordContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Break() { return GetToken(TypeScriptParser.Break, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Do() { return GetToken(TypeScriptParser.Do, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Instanceof() { return GetToken(TypeScriptParser.Instanceof, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Typeof() { return GetToken(TypeScriptParser.Typeof, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Case() { return GetToken(TypeScriptParser.Case, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Else() { return GetToken(TypeScriptParser.Else, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode New() { return GetToken(TypeScriptParser.New, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Var() { return GetToken(TypeScriptParser.Var, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Catch() { return GetToken(TypeScriptParser.Catch, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Finally() { return GetToken(TypeScriptParser.Finally, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Return() { return GetToken(TypeScriptParser.Return, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Void() { return GetToken(TypeScriptParser.Void, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Continue() { return GetToken(TypeScriptParser.Continue, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode For() { return GetToken(TypeScriptParser.For, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Switch() { return GetToken(TypeScriptParser.Switch, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode While() { return GetToken(TypeScriptParser.While, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Debugger() { return GetToken(TypeScriptParser.Debugger, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Function() { return GetToken(TypeScriptParser.Function, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode This() { return GetToken(TypeScriptParser.This, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode With() { return GetToken(TypeScriptParser.With, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Default() { return GetToken(TypeScriptParser.Default, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode If() { return GetToken(TypeScriptParser.If, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Throw() { return GetToken(TypeScriptParser.Throw, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Delete() { return GetToken(TypeScriptParser.Delete, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode In() { return GetToken(TypeScriptParser.In, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Try() { return GetToken(TypeScriptParser.Try, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ReadOnly() { return GetToken(TypeScriptParser.ReadOnly, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Async() { return GetToken(TypeScriptParser.Async, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode From() { return GetToken(TypeScriptParser.From, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Class() { return GetToken(TypeScriptParser.Class, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Enum() { return GetToken(TypeScriptParser.Enum, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Extends() { return GetToken(TypeScriptParser.Extends, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Super() { return GetToken(TypeScriptParser.Super, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Const() { return GetToken(TypeScriptParser.Const, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Export() { return GetToken(TypeScriptParser.Export, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Import() { return GetToken(TypeScriptParser.Import, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Implements() { return GetToken(TypeScriptParser.Implements, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Let() { return GetToken(TypeScriptParser.Let, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Private() { return GetToken(TypeScriptParser.Private, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Public() { return GetToken(TypeScriptParser.Public, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Interface() { return GetToken(TypeScriptParser.Interface, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Package() { return GetToken(TypeScriptParser.Package, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Protected() { return GetToken(TypeScriptParser.Protected, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Static() { return GetToken(TypeScriptParser.Static, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Yield() { return GetToken(TypeScriptParser.Yield, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Get() { return GetToken(TypeScriptParser.Get, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Set() { return GetToken(TypeScriptParser.Set, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Require() { return GetToken(TypeScriptParser.Require, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TypeAlias() { return GetToken(TypeScriptParser.TypeAlias, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode String() { return GetToken(TypeScriptParser.String, 0); }
		public KeywordContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_keyword; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.EnterKeyword(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.ExitKeyword(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypeScriptParserVisitor<TResult> typedVisitor = visitor as ITypeScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitKeyword(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public KeywordContext keyword() {
		KeywordContext _localctx = new KeywordContext(Context, State);
		EnterRule(_localctx, 276, RULE_keyword);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1639;
			_la = TokenStream.LA(1);
			if ( !(((((_la - 61)) & ~0x3f) == 0 && ((1L << (_la - 61)) & ((1L << (Break - 61)) | (1L << (Do - 61)) | (1L << (Instanceof - 61)) | (1L << (Typeof - 61)) | (1L << (Case - 61)) | (1L << (Else - 61)) | (1L << (New - 61)) | (1L << (Var - 61)) | (1L << (Catch - 61)) | (1L << (Finally - 61)) | (1L << (Return - 61)) | (1L << (Void - 61)) | (1L << (Continue - 61)) | (1L << (For - 61)) | (1L << (Switch - 61)) | (1L << (While - 61)) | (1L << (Debugger - 61)) | (1L << (Function - 61)) | (1L << (This - 61)) | (1L << (With - 61)) | (1L << (Default - 61)) | (1L << (If - 61)) | (1L << (Throw - 61)) | (1L << (Delete - 61)) | (1L << (In - 61)) | (1L << (Try - 61)) | (1L << (From - 61)) | (1L << (ReadOnly - 61)) | (1L << (Async - 61)) | (1L << (Class - 61)) | (1L << (Enum - 61)) | (1L << (Extends - 61)) | (1L << (Super - 61)) | (1L << (Const - 61)) | (1L << (Export - 61)) | (1L << (Import - 61)) | (1L << (Implements - 61)) | (1L << (Let - 61)) | (1L << (Private - 61)) | (1L << (Public - 61)) | (1L << (Interface - 61)) | (1L << (Package - 61)) | (1L << (Protected - 61)) | (1L << (Static - 61)) | (1L << (Yield - 61)) | (1L << (String - 61)) | (1L << (TypeAlias - 61)) | (1L << (Get - 61)) | (1L << (Set - 61)) | (1L << (Require - 61)))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GetterContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Get() { return GetToken(TypeScriptParser.Get, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public PropertyNameContext propertyName() {
			return GetRuleContext<PropertyNameContext>(0);
		}
		public GetterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_getter; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.EnterGetter(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.ExitGetter(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypeScriptParserVisitor<TResult> typedVisitor = visitor as ITypeScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGetter(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public GetterContext getter() {
		GetterContext _localctx = new GetterContext(Context, State);
		EnterRule(_localctx, 278, RULE_getter);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1641;
			Match(Get);
			State = 1642;
			propertyName();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SetterContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Set() { return GetToken(TypeScriptParser.Set, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public PropertyNameContext propertyName() {
			return GetRuleContext<PropertyNameContext>(0);
		}
		public SetterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_setter; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.EnterSetter(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.ExitSetter(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypeScriptParserVisitor<TResult> typedVisitor = visitor as ITypeScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSetter(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SetterContext setter() {
		SetterContext _localctx = new SetterContext(Context, State);
		EnterRule(_localctx, 280, RULE_setter);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1644;
			Match(Set);
			State = 1645;
			propertyName();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EosContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SemiColon() { return GetToken(TypeScriptParser.SemiColon, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(TypeScriptParser.Eof, 0); }
		public EosContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_eos; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.EnterEos(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.ExitEos(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypeScriptParserVisitor<TResult> typedVisitor = visitor as ITypeScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEos(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EosContext eos() {
		EosContext _localctx = new EosContext(Context, State);
		EnterRule(_localctx, 282, RULE_eos);
		try {
			State = 1651;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,206,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1647;
				Match(SemiColon);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1648;
				Match(Eof);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1649;
				if (!(this.lineTerminatorAhead())) throw new FailedPredicateException(this, "this.lineTerminatorAhead()");
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1650;
				if (!(this.closeBrace())) throw new FailedPredicateException(this, "this.closeBrace()");
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 10: return unionOrIntersectionOrPrimaryType_sempred((UnionOrIntersectionOrPrimaryTypeContext)_localctx, predIndex);
		case 11: return primaryType_sempred((PrimaryTypeContext)_localctx, predIndex);
		case 22: return arrayType_sempred((ArrayTypeContext)_localctx, predIndex);
		case 57: return decoratorMemberExpression_sempred((DecoratorMemberExpressionContext)_localctx, predIndex);
		case 73: return expressionStatement_sempred((ExpressionStatementContext)_localctx, predIndex);
		case 75: return iterationStatement_sempred((IterationStatementContext)_localctx, predIndex);
		case 77: return continueStatement_sempred((ContinueStatementContext)_localctx, predIndex);
		case 78: return breakStatement_sempred((BreakStatementContext)_localctx, predIndex);
		case 79: return returnStatement_sempred((ReturnStatementContext)_localctx, predIndex);
		case 80: return yieldStatement_sempred((YieldStatementContext)_localctx, predIndex);
		case 88: return throwStatement_sempred((ThrowStatementContext)_localctx, predIndex);
		case 127: return singleExpression_sempred((SingleExpressionContext)_localctx, predIndex);
		case 141: return eos_sempred((EosContext)_localctx, predIndex);
		}
		return true;
	}
	private bool unionOrIntersectionOrPrimaryType_sempred(UnionOrIntersectionOrPrimaryTypeContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 3);
		case 1: return Precpred(Context, 2);
		}
		return true;
	}
	private bool primaryType_sempred(PrimaryTypeContext _localctx, int predIndex) {
		switch (predIndex) {
		case 2: return Precpred(Context, 5);
		case 3: return notLineTerminator();
		}
		return true;
	}
	private bool arrayType_sempred(ArrayTypeContext _localctx, int predIndex) {
		switch (predIndex) {
		case 4: return notLineTerminator();
		}
		return true;
	}
	private bool decoratorMemberExpression_sempred(DecoratorMemberExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 5: return Precpred(Context, 2);
		}
		return true;
	}
	private bool expressionStatement_sempred(ExpressionStatementContext _localctx, int predIndex) {
		switch (predIndex) {
		case 6: return this.notOpenBraceAndNotFunction();
		}
		return true;
	}
	private bool iterationStatement_sempred(IterationStatementContext _localctx, int predIndex) {
		switch (predIndex) {
		case 7: return this.p("of");
		case 8: return this.p("of");
		}
		return true;
	}
	private bool continueStatement_sempred(ContinueStatementContext _localctx, int predIndex) {
		switch (predIndex) {
		case 9: return this.notLineTerminator();
		}
		return true;
	}
	private bool breakStatement_sempred(BreakStatementContext _localctx, int predIndex) {
		switch (predIndex) {
		case 10: return this.notLineTerminator();
		}
		return true;
	}
	private bool returnStatement_sempred(ReturnStatementContext _localctx, int predIndex) {
		switch (predIndex) {
		case 11: return this.notLineTerminator();
		}
		return true;
	}
	private bool yieldStatement_sempred(YieldStatementContext _localctx, int predIndex) {
		switch (predIndex) {
		case 12: return this.notLineTerminator();
		}
		return true;
	}
	private bool throwStatement_sempred(ThrowStatementContext _localctx, int predIndex) {
		switch (predIndex) {
		case 13: return this.notLineTerminator();
		}
		return true;
	}
	private bool singleExpression_sempred(SingleExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 14: return Precpred(Context, 29);
		case 15: return Precpred(Context, 28);
		case 16: return Precpred(Context, 27);
		case 17: return Precpred(Context, 26);
		case 18: return Precpred(Context, 25);
		case 19: return Precpred(Context, 24);
		case 20: return Precpred(Context, 23);
		case 21: return Precpred(Context, 22);
		case 22: return Precpred(Context, 21);
		case 23: return Precpred(Context, 20);
		case 24: return Precpred(Context, 19);
		case 25: return Precpred(Context, 18);
		case 26: return Precpred(Context, 17);
		case 27: return Precpred(Context, 16);
		case 28: return Precpred(Context, 15);
		case 29: return Precpred(Context, 44);
		case 30: return Precpred(Context, 43);
		case 31: return Precpred(Context, 42);
		case 32: return Precpred(Context, 40);
		case 33: return this.notLineTerminator();
		case 34: return Precpred(Context, 39);
		case 35: return this.notLineTerminator();
		case 36: return Precpred(Context, 14);
		case 37: return Precpred(Context, 1);
		}
		return true;
	}
	private bool eos_sempred(EosContext _localctx, int predIndex) {
		switch (predIndex) {
		case 38: return this.lineTerminatorAhead();
		case 39: return this.closeBrace();
		}
		return true;
	}

	private static int[] _serializedATN = {
		4,1,130,1654,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,
		7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,7,14,
		2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,7,21,
		2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,7,28,
		2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,2,35,7,35,
		2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,2,42,7,42,
		2,43,7,43,2,44,7,44,2,45,7,45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,
		2,50,7,50,2,51,7,51,2,52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,7,56,
		2,57,7,57,2,58,7,58,2,59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,7,63,
		2,64,7,64,2,65,7,65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,2,70,7,70,
		2,71,7,71,2,72,7,72,2,73,7,73,2,74,7,74,2,75,7,75,2,76,7,76,2,77,7,77,
		2,78,7,78,2,79,7,79,2,80,7,80,2,81,7,81,2,82,7,82,2,83,7,83,2,84,7,84,
		2,85,7,85,2,86,7,86,2,87,7,87,2,88,7,88,2,89,7,89,2,90,7,90,2,91,7,91,
		2,92,7,92,2,93,7,93,2,94,7,94,2,95,7,95,2,96,7,96,2,97,7,97,2,98,7,98,
		2,99,7,99,2,100,7,100,2,101,7,101,2,102,7,102,2,103,7,103,2,104,7,104,
		2,105,7,105,2,106,7,106,2,107,7,107,2,108,7,108,2,109,7,109,2,110,7,110,
		2,111,7,111,2,112,7,112,2,113,7,113,2,114,7,114,2,115,7,115,2,116,7,116,
		2,117,7,117,2,118,7,118,2,119,7,119,2,120,7,120,2,121,7,121,2,122,7,122,
		2,123,7,123,2,124,7,124,2,125,7,125,2,126,7,126,2,127,7,127,2,128,7,128,
		2,129,7,129,2,130,7,130,2,131,7,131,2,132,7,132,2,133,7,133,2,134,7,134,
		2,135,7,135,2,136,7,136,2,137,7,137,2,138,7,138,2,139,7,139,2,140,7,140,
		2,141,7,141,1,0,1,0,1,0,1,1,1,1,3,1,290,8,1,1,2,1,2,3,2,294,8,2,1,2,1,
		2,1,3,1,3,1,3,5,3,301,8,3,10,3,12,3,304,9,3,1,4,1,4,3,4,308,8,4,1,4,3,
		4,311,8,4,1,5,1,5,1,5,1,6,1,6,3,6,318,8,6,1,6,1,6,1,7,1,7,1,7,5,7,325,
		8,7,10,7,12,7,328,9,7,1,8,1,8,1,9,1,9,1,9,1,9,1,9,3,9,337,8,9,1,10,1,10,
		1,10,1,10,1,10,1,10,1,10,1,10,1,10,5,10,348,8,10,10,10,12,10,351,9,10,
		1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,
		1,11,1,11,1,11,1,11,3,11,371,8,11,1,11,1,11,1,11,1,11,5,11,377,8,11,10,
		11,12,11,380,9,11,1,12,1,12,1,13,1,13,3,13,386,8,13,1,14,1,14,3,14,390,
		8,14,1,15,1,15,1,15,1,15,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,
		3,16,405,8,16,1,17,1,17,3,17,409,8,17,1,18,1,18,3,18,413,8,18,1,18,1,18,
		1,19,1,19,3,19,419,8,19,1,20,1,20,1,20,5,20,424,8,20,10,20,12,20,427,9,
		20,1,21,1,21,1,21,1,21,1,21,1,21,1,21,3,21,436,8,21,3,21,438,8,21,1,22,
		1,22,1,22,1,22,1,22,1,23,1,23,1,23,1,23,1,24,1,24,1,24,5,24,452,8,24,10,
		24,12,24,455,9,24,1,25,3,25,458,8,25,1,25,1,25,3,25,462,8,25,1,25,1,25,
		1,25,1,25,1,26,1,26,3,26,470,8,26,1,26,1,26,3,26,474,8,26,1,26,1,26,1,
		26,1,26,1,27,1,27,1,27,1,28,1,28,1,28,1,28,4,28,487,8,28,11,28,12,28,488,
		1,28,1,28,3,28,493,8,28,1,29,3,29,496,8,29,1,29,1,29,3,29,500,8,29,1,29,
		3,29,503,8,29,1,29,1,29,3,29,507,8,29,1,30,1,30,1,30,1,31,3,31,513,8,31,
		1,31,1,31,3,31,517,8,31,1,31,1,31,3,31,521,8,31,1,32,1,32,1,32,1,32,5,
		32,527,8,32,10,32,12,32,530,9,32,1,32,1,32,3,32,534,8,32,3,32,536,8,32,
		1,33,1,33,1,33,5,33,541,8,33,10,33,12,33,544,9,33,1,34,1,34,3,34,548,8,
		34,1,35,3,35,551,8,35,1,35,3,35,554,8,35,1,35,1,35,1,35,3,35,559,8,35,
		1,35,3,35,562,8,35,1,35,3,35,565,8,35,1,36,1,36,1,36,3,36,570,8,36,1,37,
		3,37,573,8,37,1,37,3,37,576,8,37,1,37,1,37,3,37,580,8,37,1,38,1,38,1,39,
		1,39,3,39,586,8,39,1,40,1,40,3,40,590,8,40,1,40,1,40,3,40,594,8,40,1,40,
		1,40,3,40,598,8,40,1,41,1,41,1,41,1,41,1,41,1,41,1,41,1,42,1,42,3,42,609,
		8,42,1,42,1,42,1,43,1,43,1,43,3,43,616,8,43,1,43,1,43,1,43,1,43,1,44,3,
		44,623,8,44,1,44,1,44,1,44,3,44,628,8,44,1,44,1,44,1,44,1,44,1,44,1,44,
		3,44,636,8,44,1,45,3,45,639,8,45,1,45,3,45,642,8,45,1,45,1,45,1,45,3,45,
		647,8,45,1,45,3,45,650,8,45,1,45,1,45,3,45,654,8,45,1,46,1,46,1,46,1,47,
		1,47,1,47,5,47,662,8,47,10,47,12,47,665,9,47,1,48,3,48,668,8,48,1,48,1,
		48,1,48,1,48,3,48,674,8,48,1,48,1,48,1,49,1,49,3,49,680,8,49,1,50,1,50,
		1,50,5,50,685,8,50,10,50,12,50,688,9,50,1,51,1,51,1,51,3,51,693,8,51,1,
		52,1,52,1,52,1,52,3,52,699,8,52,1,52,1,52,1,53,1,53,4,53,705,8,53,11,53,
		12,53,706,1,53,5,53,710,8,53,10,53,12,53,713,9,53,1,54,1,54,1,54,1,54,
		1,54,1,55,4,55,721,8,55,11,55,12,55,722,1,56,1,56,1,56,3,56,728,8,56,1,
		57,1,57,1,57,1,57,1,57,1,57,3,57,736,8,57,1,57,1,57,1,57,5,57,741,8,57,
		10,57,12,57,744,9,57,1,58,1,58,1,58,1,59,3,59,750,8,59,1,59,1,59,1,60,
		3,60,755,8,60,1,60,1,60,1,61,1,61,1,61,1,61,1,61,1,61,1,61,1,61,1,61,1,
		61,1,61,1,61,1,61,1,61,1,61,1,61,1,61,1,61,1,61,1,61,1,61,1,61,1,61,1,
		61,1,61,1,61,1,61,1,61,1,61,1,61,3,61,789,8,61,1,62,1,62,3,62,793,8,62,
		1,62,1,62,1,63,4,63,798,8,63,11,63,12,63,799,1,64,1,64,1,64,1,64,3,64,
		806,8,64,1,64,1,64,1,65,1,65,1,65,3,65,813,8,65,1,66,1,66,3,66,817,8,66,
		1,66,1,66,3,66,821,8,66,1,66,1,66,1,66,1,66,1,67,1,67,1,67,3,67,830,8,
		67,1,67,1,67,1,67,1,67,5,67,836,8,67,10,67,12,67,839,9,67,1,67,1,67,1,
		68,1,68,3,68,845,8,68,1,68,1,68,3,68,849,8,68,1,69,1,69,3,69,853,8,69,
		1,69,1,69,3,69,857,8,69,1,69,3,69,860,8,69,1,69,3,69,863,8,69,1,69,3,69,
		866,8,69,1,69,1,69,3,69,870,8,69,1,69,1,69,3,69,874,8,69,1,69,1,69,3,69,
		878,8,69,3,69,880,8,69,1,70,1,70,1,70,5,70,885,8,70,10,70,12,70,888,9,
		70,1,71,1,71,1,71,3,71,893,8,71,1,71,3,71,896,8,71,1,71,3,71,899,8,71,
		1,71,1,71,3,71,903,8,71,1,71,3,71,906,8,71,1,72,1,72,1,73,1,73,1,73,3,
		73,913,8,73,1,74,1,74,1,74,1,74,1,74,1,74,1,74,3,74,922,8,74,1,75,1,75,
		1,75,1,75,1,75,1,75,1,75,1,75,1,75,1,75,1,75,1,75,1,75,1,75,1,75,1,75,
		1,75,3,75,941,8,75,1,75,1,75,3,75,945,8,75,1,75,1,75,3,75,949,8,75,1,75,
		1,75,1,75,1,75,1,75,1,75,1,75,1,75,3,75,959,8,75,1,75,1,75,3,75,963,8,
		75,1,75,1,75,1,75,1,75,1,75,1,75,1,75,1,75,1,75,3,75,974,8,75,1,75,1,75,
		1,75,1,75,1,75,1,75,1,75,1,75,1,75,1,75,1,75,3,75,987,8,75,1,75,1,75,1,
		75,1,75,3,75,993,8,75,1,76,1,76,1,77,1,77,1,77,3,77,1000,8,77,1,77,1,77,
		1,78,1,78,1,78,3,78,1007,8,78,1,78,1,78,1,79,1,79,1,79,3,79,1014,8,79,
		1,79,1,79,1,80,1,80,1,80,3,80,1021,8,80,1,80,1,80,1,81,1,81,1,81,1,81,
		1,81,1,81,1,82,1,82,1,82,1,82,1,82,1,82,1,83,1,83,3,83,1039,8,83,1,83,
		1,83,3,83,1043,8,83,3,83,1045,8,83,1,83,1,83,1,84,4,84,1050,8,84,11,84,
		12,84,1051,1,85,1,85,1,85,1,85,3,85,1058,8,85,1,86,1,86,1,86,3,86,1063,
		8,86,1,87,1,87,1,87,1,87,1,88,1,88,1,88,1,88,1,88,1,89,1,89,1,89,1,89,
		3,89,1078,8,89,1,89,3,89,1081,8,89,1,90,1,90,1,90,1,90,1,90,1,90,1,91,
		1,91,1,91,1,92,1,92,1,92,1,93,1,93,1,93,1,93,1,93,1,93,1,93,1,93,3,93,
		1103,8,93,1,94,3,94,1106,8,94,1,94,1,94,1,94,3,94,1111,8,94,1,94,1,94,
		1,94,1,95,3,95,1117,8,95,1,95,3,95,1120,8,95,1,96,1,96,5,96,1124,8,96,
		10,96,12,96,1127,9,96,1,96,1,96,1,97,1,97,1,97,1,98,1,98,1,98,1,99,1,99,
		3,99,1139,8,99,1,99,1,99,1,99,3,99,1144,8,99,1,100,1,100,1,100,3,100,1149,
		8,100,1,100,3,100,1152,8,100,1,100,3,100,1155,8,100,1,100,1,100,1,100,
		1,100,1,100,1,100,1,100,1,100,1,100,1,100,3,100,1167,8,100,1,100,1,100,
		1,100,3,100,1172,8,100,1,100,3,100,1175,8,100,1,101,3,101,1178,8,101,1,
		101,3,101,1181,8,101,1,101,3,101,1184,8,101,1,101,3,101,1187,8,101,1,102,
		1,102,1,102,1,103,3,103,1193,8,103,1,103,1,103,1,103,3,103,1198,8,103,
		1,103,1,103,1,103,1,103,1,103,1,104,1,104,1,104,3,104,1208,8,104,1,104,
		1,104,3,104,1212,8,104,1,104,1,104,1,104,1,104,1,104,1,105,1,105,1,105,
		1,105,5,105,1223,8,105,10,105,12,105,1226,9,105,1,105,3,105,1229,8,105,
		1,105,1,105,1,106,1,106,1,106,1,107,1,107,1,107,1,107,5,107,1240,8,107,
		10,107,12,107,1243,9,107,1,107,3,107,1246,8,107,1,107,1,107,1,108,1,108,
		1,108,1,108,1,108,3,108,1255,8,108,1,108,1,108,1,108,1,108,1,108,1,109,
		1,109,1,109,5,109,1265,8,109,10,109,12,109,1268,9,109,1,109,1,109,3,109,
		1272,8,109,1,109,1,109,1,109,1,109,1,109,3,109,1279,8,109,3,109,1281,8,
		109,1,110,3,110,1284,8,110,1,110,3,110,1287,8,110,1,110,1,110,3,110,1291,
		8,110,1,110,3,110,1294,8,110,1,110,1,110,3,110,1298,8,110,1,111,1,111,
		1,111,1,112,3,112,1304,8,112,1,113,4,113,1307,8,113,11,113,12,113,1308,
		1,114,1,114,3,114,1313,8,114,1,114,1,114,1,115,1,115,4,115,1319,8,115,
		11,115,12,115,1320,1,115,5,115,1324,8,115,10,115,12,115,1327,9,115,1,116,
		3,116,1330,8,116,1,116,1,116,3,116,1334,8,116,1,116,3,116,1337,8,116,1,
		117,1,117,1,117,1,117,5,117,1343,8,117,10,117,12,117,1346,9,117,3,117,
		1348,8,117,1,117,3,117,1351,8,117,1,117,1,117,1,118,1,118,1,118,1,118,
		1,118,1,118,1,118,1,118,1,118,1,118,1,118,1,118,1,118,1,118,1,118,3,118,
		1370,8,118,1,119,1,119,1,119,1,119,3,119,1376,8,119,1,119,1,119,1,119,
		1,119,1,120,1,120,1,120,1,120,3,120,1386,8,120,1,120,3,120,1389,8,120,
		1,120,1,120,1,120,1,120,1,120,1,121,1,121,1,121,3,121,1399,8,121,1,122,
		1,122,1,122,3,122,1404,8,122,3,122,1406,8,122,1,122,1,122,1,123,1,123,
		1,123,5,123,1413,8,123,10,123,12,123,1416,9,123,1,124,3,124,1419,8,124,
		1,124,1,124,3,124,1423,8,124,1,125,1,125,1,125,5,125,1428,8,125,10,125,
		12,125,1431,9,125,1,126,1,126,3,126,1435,8,126,1,126,1,126,3,126,1439,
		8,126,1,126,1,126,3,126,1443,8,126,1,126,1,126,1,126,1,126,1,127,1,127,
		1,127,1,127,1,127,3,127,1454,8,127,1,127,1,127,1,127,1,127,3,127,1460,
		8,127,1,127,3,127,1463,8,127,1,127,1,127,1,127,1,127,1,127,1,127,1,127,
		1,127,1,127,1,127,1,127,1,127,1,127,1,127,1,127,1,127,1,127,1,127,1,127,
		1,127,1,127,1,127,1,127,1,127,1,127,3,127,1490,8,127,1,127,1,127,1,127,
		1,127,1,127,1,127,1,127,1,127,1,127,1,127,3,127,1502,8,127,3,127,1504,
		8,127,1,127,1,127,1,127,1,127,1,127,1,127,1,127,1,127,1,127,1,127,1,127,
		1,127,1,127,1,127,1,127,1,127,1,127,1,127,1,127,1,127,1,127,1,127,1,127,
		1,127,1,127,1,127,1,127,1,127,1,127,1,127,1,127,1,127,1,127,1,127,1,127,
		1,127,1,127,1,127,1,127,1,127,1,127,1,127,1,127,1,127,1,127,1,127,1,127,
		1,127,1,127,1,127,1,127,1,127,1,127,1,127,1,127,1,127,1,127,1,127,3,127,
		1564,8,127,1,127,1,127,1,127,1,127,1,127,1,127,1,127,1,127,1,127,1,127,
		1,127,1,127,1,127,5,127,1579,8,127,10,127,12,127,1582,9,127,1,128,1,128,
		1,128,3,128,1587,8,128,1,128,3,128,1590,8,128,1,129,3,129,1593,8,129,1,
		129,1,129,3,129,1597,8,129,1,129,1,129,1,129,1,130,1,130,1,130,3,130,1605,
		8,130,1,130,3,130,1608,8,130,1,131,1,131,1,131,1,131,1,131,3,131,1615,
		8,131,1,132,1,132,1,133,1,133,1,133,1,133,1,133,1,133,3,133,1625,8,133,
		1,134,1,134,1,135,1,135,3,135,1631,8,135,1,136,1,136,1,137,1,137,1,137,
		3,137,1638,8,137,1,138,1,138,1,139,1,139,1,139,1,140,1,140,1,140,1,141,
		1,141,1,141,1,141,3,141,1652,8,141,1,141,0,4,20,22,114,254,142,0,2,4,6,
		8,10,12,14,16,18,20,22,24,26,28,30,32,34,36,38,40,42,44,46,48,50,52,54,
		56,58,60,62,64,66,68,70,72,74,76,78,80,82,84,86,88,90,92,94,96,98,100,
		102,104,106,108,110,112,114,116,118,120,122,124,126,128,130,132,134,136,
		138,140,142,144,146,148,150,152,154,156,158,160,162,164,166,168,170,172,
		174,176,178,180,182,184,186,188,190,192,194,196,198,200,202,204,206,208,
		210,212,214,216,218,220,222,224,226,228,230,232,234,236,238,240,242,244,
		246,248,250,252,254,256,258,260,262,264,266,268,270,272,274,276,278,280,
		282,0,15,2,0,72,72,107,111,1,0,10,11,2,0,100,101,104,104,2,0,108,108,110,
		110,3,0,68,68,95,95,99,99,2,0,12,12,14,14,1,0,23,25,1,0,19,20,1,0,26,28,
		1,0,29,32,1,0,33,36,1,0,42,52,1,0,56,60,3,0,112,112,117,117,123,123,5,
		0,61,86,88,106,110,110,112,114,117,117,1826,0,284,1,0,0,0,2,289,1,0,0,
		0,4,291,1,0,0,0,6,297,1,0,0,0,8,310,1,0,0,0,10,312,1,0,0,0,12,315,1,0,
		0,0,14,321,1,0,0,0,16,329,1,0,0,0,18,336,1,0,0,0,20,338,1,0,0,0,22,370,
		1,0,0,0,24,381,1,0,0,0,26,383,1,0,0,0,28,389,1,0,0,0,30,391,1,0,0,0,32,
		395,1,0,0,0,34,408,1,0,0,0,36,410,1,0,0,0,38,416,1,0,0,0,40,420,1,0,0,
		0,42,437,1,0,0,0,44,439,1,0,0,0,46,444,1,0,0,0,48,448,1,0,0,0,50,457,1,
		0,0,0,52,467,1,0,0,0,54,479,1,0,0,0,56,492,1,0,0,0,58,495,1,0,0,0,60,508,
		1,0,0,0,62,512,1,0,0,0,64,535,1,0,0,0,66,537,1,0,0,0,68,547,1,0,0,0,70,
		550,1,0,0,0,72,566,1,0,0,0,74,572,1,0,0,0,76,581,1,0,0,0,78,585,1,0,0,
		0,80,587,1,0,0,0,82,599,1,0,0,0,84,606,1,0,0,0,86,612,1,0,0,0,88,622,1,
		0,0,0,90,638,1,0,0,0,92,655,1,0,0,0,94,658,1,0,0,0,96,667,1,0,0,0,98,677,
		1,0,0,0,100,681,1,0,0,0,102,689,1,0,0,0,104,694,1,0,0,0,106,702,1,0,0,
		0,108,714,1,0,0,0,110,720,1,0,0,0,112,724,1,0,0,0,114,735,1,0,0,0,116,
		745,1,0,0,0,118,749,1,0,0,0,120,754,1,0,0,0,122,788,1,0,0,0,124,790,1,
		0,0,0,126,797,1,0,0,0,128,801,1,0,0,0,130,809,1,0,0,0,132,816,1,0,0,0,
		134,829,1,0,0,0,136,842,1,0,0,0,138,879,1,0,0,0,140,881,1,0,0,0,142,892,
		1,0,0,0,144,907,1,0,0,0,146,909,1,0,0,0,148,914,1,0,0,0,150,992,1,0,0,
		0,152,994,1,0,0,0,154,996,1,0,0,0,156,1003,1,0,0,0,158,1010,1,0,0,0,160,
		1017,1,0,0,0,162,1024,1,0,0,0,164,1030,1,0,0,0,166,1036,1,0,0,0,168,1049,
		1,0,0,0,170,1053,1,0,0,0,172,1059,1,0,0,0,174,1064,1,0,0,0,176,1068,1,
		0,0,0,178,1073,1,0,0,0,180,1082,1,0,0,0,182,1088,1,0,0,0,184,1091,1,0,
		0,0,186,1094,1,0,0,0,188,1105,1,0,0,0,190,1116,1,0,0,0,192,1121,1,0,0,
		0,194,1130,1,0,0,0,196,1133,1,0,0,0,198,1143,1,0,0,0,200,1174,1,0,0,0,
		202,1177,1,0,0,0,204,1188,1,0,0,0,206,1192,1,0,0,0,208,1204,1,0,0,0,210,
		1218,1,0,0,0,212,1232,1,0,0,0,214,1235,1,0,0,0,216,1249,1,0,0,0,218,1280,
		1,0,0,0,220,1283,1,0,0,0,222,1299,1,0,0,0,224,1303,1,0,0,0,226,1306,1,
		0,0,0,228,1310,1,0,0,0,230,1316,1,0,0,0,232,1329,1,0,0,0,234,1338,1,0,
		0,0,236,1369,1,0,0,0,238,1371,1,0,0,0,240,1381,1,0,0,0,242,1398,1,0,0,
		0,244,1400,1,0,0,0,246,1409,1,0,0,0,248,1418,1,0,0,0,250,1424,1,0,0,0,
		252,1432,1,0,0,0,254,1503,1,0,0,0,256,1589,1,0,0,0,258,1592,1,0,0,0,260,
		1607,1,0,0,0,262,1614,1,0,0,0,264,1616,1,0,0,0,266,1624,1,0,0,0,268,1626,
		1,0,0,0,270,1630,1,0,0,0,272,1632,1,0,0,0,274,1637,1,0,0,0,276,1639,1,
		0,0,0,278,1641,1,0,0,0,280,1644,1,0,0,0,282,1651,1,0,0,0,284,285,5,12,
		0,0,285,286,3,254,127,0,286,1,1,0,0,0,287,290,3,228,114,0,288,290,3,234,
		117,0,289,287,1,0,0,0,289,288,1,0,0,0,290,3,1,0,0,0,291,293,5,29,0,0,292,
		294,3,6,3,0,293,292,1,0,0,0,293,294,1,0,0,0,294,295,1,0,0,0,295,296,5,
		30,0,0,296,5,1,0,0,0,297,302,3,8,4,0,298,299,5,11,0,0,299,301,3,8,4,0,
		300,298,1,0,0,0,301,304,1,0,0,0,302,300,1,0,0,0,302,303,1,0,0,0,303,7,
		1,0,0,0,304,302,1,0,0,0,305,307,5,123,0,0,306,308,3,10,5,0,307,306,1,0,
		0,0,307,308,1,0,0,0,308,311,1,0,0,0,309,311,3,4,2,0,310,305,1,0,0,0,310,
		309,1,0,0,0,311,9,1,0,0,0,312,313,5,93,0,0,313,314,3,18,9,0,314,11,1,0,
		0,0,315,317,5,29,0,0,316,318,3,14,7,0,317,316,1,0,0,0,317,318,1,0,0,0,
		318,319,1,0,0,0,319,320,5,30,0,0,320,13,1,0,0,0,321,326,3,16,8,0,322,323,
		5,11,0,0,323,325,3,16,8,0,324,322,1,0,0,0,325,328,1,0,0,0,326,324,1,0,
		0,0,326,327,1,0,0,0,327,15,1,0,0,0,328,326,1,0,0,0,329,330,3,18,9,0,330,
		17,1,0,0,0,331,337,3,20,10,0,332,337,3,50,25,0,333,337,3,52,26,0,334,337,
		3,30,15,0,335,337,5,124,0,0,336,331,1,0,0,0,336,332,1,0,0,0,336,333,1,
		0,0,0,336,334,1,0,0,0,336,335,1,0,0,0,337,19,1,0,0,0,338,339,6,10,-1,0,
		339,340,3,22,11,0,340,349,1,0,0,0,341,342,10,3,0,0,342,343,5,39,0,0,343,
		348,3,20,10,4,344,345,10,2,0,0,345,346,5,37,0,0,346,348,3,20,10,3,347,
		341,1,0,0,0,347,344,1,0,0,0,348,351,1,0,0,0,349,347,1,0,0,0,349,350,1,
		0,0,0,350,21,1,0,0,0,351,349,1,0,0,0,352,353,6,11,-1,0,353,354,5,6,0,0,
		354,355,3,18,9,0,355,356,5,7,0,0,356,371,1,0,0,0,357,371,3,24,12,0,358,
		371,3,26,13,0,359,371,3,36,18,0,360,361,5,4,0,0,361,362,3,48,24,0,362,
		363,5,5,0,0,363,371,1,0,0,0,364,371,3,54,27,0,365,371,5,79,0,0,366,367,
		3,26,13,0,367,368,5,121,0,0,368,369,3,22,11,1,369,371,1,0,0,0,370,352,
		1,0,0,0,370,357,1,0,0,0,370,358,1,0,0,0,370,359,1,0,0,0,370,360,1,0,0,
		0,370,364,1,0,0,0,370,365,1,0,0,0,370,366,1,0,0,0,371,378,1,0,0,0,372,
		373,10,5,0,0,373,374,4,11,3,0,374,375,5,4,0,0,375,377,5,5,0,0,376,372,
		1,0,0,0,377,380,1,0,0,0,378,376,1,0,0,0,378,379,1,0,0,0,379,23,1,0,0,0,
		380,378,1,0,0,0,381,382,7,0,0,0,382,25,1,0,0,0,383,385,3,34,17,0,384,386,
		3,28,14,0,385,384,1,0,0,0,385,386,1,0,0,0,386,27,1,0,0,0,387,390,3,32,
		16,0,388,390,3,30,15,0,389,387,1,0,0,0,389,388,1,0,0,0,390,29,1,0,0,0,
		391,392,5,29,0,0,392,393,3,14,7,0,393,394,5,30,0,0,394,31,1,0,0,0,395,
		396,5,29,0,0,396,397,3,14,7,0,397,398,5,29,0,0,398,404,3,14,7,0,399,400,
		5,30,0,0,400,401,3,2,1,0,401,402,5,30,0,0,402,405,1,0,0,0,403,405,5,26,
		0,0,404,399,1,0,0,0,404,403,1,0,0,0,405,33,1,0,0,0,406,409,5,123,0,0,407,
		409,3,106,53,0,408,406,1,0,0,0,408,407,1,0,0,0,409,35,1,0,0,0,410,412,
		5,8,0,0,411,413,3,38,19,0,412,411,1,0,0,0,412,413,1,0,0,0,413,414,1,0,
		0,0,414,415,5,9,0,0,415,37,1,0,0,0,416,418,3,40,20,0,417,419,7,1,0,0,418,
		417,1,0,0,0,418,419,1,0,0,0,419,39,1,0,0,0,420,425,3,42,21,0,421,422,7,
		1,0,0,422,424,3,42,21,0,423,421,1,0,0,0,424,427,1,0,0,0,425,423,1,0,0,
		0,425,426,1,0,0,0,426,41,1,0,0,0,427,425,1,0,0,0,428,438,3,58,29,0,429,
		438,3,62,31,0,430,438,3,80,40,0,431,438,3,82,41,0,432,435,3,84,42,0,433,
		434,5,53,0,0,434,436,3,18,9,0,435,433,1,0,0,0,435,436,1,0,0,0,436,438,
		1,0,0,0,437,428,1,0,0,0,437,429,1,0,0,0,437,430,1,0,0,0,437,431,1,0,0,
		0,437,432,1,0,0,0,438,43,1,0,0,0,439,440,3,22,11,0,440,441,4,22,4,0,441,
		442,5,4,0,0,442,443,5,5,0,0,443,45,1,0,0,0,444,445,5,4,0,0,445,446,3,48,
		24,0,446,447,5,5,0,0,447,47,1,0,0,0,448,453,3,18,9,0,449,450,5,11,0,0,
		450,452,3,18,9,0,451,449,1,0,0,0,452,455,1,0,0,0,453,451,1,0,0,0,453,454,
		1,0,0,0,454,49,1,0,0,0,455,453,1,0,0,0,456,458,3,4,2,0,457,456,1,0,0,0,
		457,458,1,0,0,0,458,459,1,0,0,0,459,461,5,6,0,0,460,462,3,64,32,0,461,
		460,1,0,0,0,461,462,1,0,0,0,462,463,1,0,0,0,463,464,5,7,0,0,464,465,5,
		53,0,0,465,466,3,18,9,0,466,51,1,0,0,0,467,469,5,67,0,0,468,470,3,4,2,
		0,469,468,1,0,0,0,469,470,1,0,0,0,470,471,1,0,0,0,471,473,5,6,0,0,472,
		474,3,64,32,0,473,472,1,0,0,0,473,474,1,0,0,0,474,475,1,0,0,0,475,476,
		5,7,0,0,476,477,5,53,0,0,477,478,3,18,9,0,478,53,1,0,0,0,479,480,5,64,
		0,0,480,481,3,56,28,0,481,55,1,0,0,0,482,493,5,123,0,0,483,484,3,270,135,
		0,484,485,5,16,0,0,485,487,1,0,0,0,486,483,1,0,0,0,487,488,1,0,0,0,488,
		486,1,0,0,0,488,489,1,0,0,0,489,490,1,0,0,0,490,491,3,270,135,0,491,493,
		1,0,0,0,492,482,1,0,0,0,492,486,1,0,0,0,493,57,1,0,0,0,494,496,5,89,0,
		0,495,494,1,0,0,0,495,496,1,0,0,0,496,497,1,0,0,0,497,499,3,242,121,0,
		498,500,5,13,0,0,499,498,1,0,0,0,499,500,1,0,0,0,500,502,1,0,0,0,501,503,
		3,60,30,0,502,501,1,0,0,0,502,503,1,0,0,0,503,506,1,0,0,0,504,505,5,53,
		0,0,505,507,3,18,9,0,506,504,1,0,0,0,506,507,1,0,0,0,507,59,1,0,0,0,508,
		509,5,14,0,0,509,510,3,18,9,0,510,61,1,0,0,0,511,513,3,4,2,0,512,511,1,
		0,0,0,512,513,1,0,0,0,513,514,1,0,0,0,514,516,5,6,0,0,515,517,3,64,32,
		0,516,515,1,0,0,0,516,517,1,0,0,0,517,518,1,0,0,0,518,520,5,7,0,0,519,
		521,3,60,30,0,520,519,1,0,0,0,520,521,1,0,0,0,521,63,1,0,0,0,522,536,3,
		72,36,0,523,528,3,68,34,0,524,525,5,11,0,0,525,527,3,68,34,0,526,524,1,
		0,0,0,527,530,1,0,0,0,528,526,1,0,0,0,528,529,1,0,0,0,529,533,1,0,0,0,
		530,528,1,0,0,0,531,532,5,11,0,0,532,534,3,72,36,0,533,531,1,0,0,0,533,
		534,1,0,0,0,534,536,1,0,0,0,535,522,1,0,0,0,535,523,1,0,0,0,536,65,1,0,
		0,0,537,542,3,74,37,0,538,539,5,11,0,0,539,541,3,74,37,0,540,538,1,0,0,
		0,541,544,1,0,0,0,542,540,1,0,0,0,542,543,1,0,0,0,543,67,1,0,0,0,544,542,
		1,0,0,0,545,548,3,74,37,0,546,548,3,70,35,0,547,545,1,0,0,0,547,546,1,
		0,0,0,548,69,1,0,0,0,549,551,3,110,55,0,550,549,1,0,0,0,550,551,1,0,0,
		0,551,553,1,0,0,0,552,554,3,76,38,0,553,552,1,0,0,0,553,554,1,0,0,0,554,
		555,1,0,0,0,555,564,3,78,39,0,556,558,5,13,0,0,557,559,3,60,30,0,558,557,
		1,0,0,0,558,559,1,0,0,0,559,565,1,0,0,0,560,562,3,60,30,0,561,560,1,0,
		0,0,561,562,1,0,0,0,562,563,1,0,0,0,563,565,3,0,0,0,564,556,1,0,0,0,564,
		561,1,0,0,0,565,71,1,0,0,0,566,567,5,15,0,0,567,569,3,254,127,0,568,570,
		3,60,30,0,569,568,1,0,0,0,569,570,1,0,0,0,570,73,1,0,0,0,571,573,3,110,
		55,0,572,571,1,0,0,0,572,573,1,0,0,0,573,575,1,0,0,0,574,576,3,76,38,0,
		575,574,1,0,0,0,575,576,1,0,0,0,576,577,1,0,0,0,577,579,3,78,39,0,578,
		580,3,60,30,0,579,578,1,0,0,0,579,580,1,0,0,0,580,75,1,0,0,0,581,582,7,
		2,0,0,582,77,1,0,0,0,583,586,3,270,135,0,584,586,3,2,1,0,585,583,1,0,0,
		0,585,584,1,0,0,0,586,79,1,0,0,0,587,589,5,67,0,0,588,590,3,4,2,0,589,
		588,1,0,0,0,589,590,1,0,0,0,590,591,1,0,0,0,591,593,5,6,0,0,592,594,3,
		64,32,0,593,592,1,0,0,0,593,594,1,0,0,0,594,595,1,0,0,0,595,597,5,7,0,
		0,596,598,3,60,30,0,597,596,1,0,0,0,597,598,1,0,0,0,598,81,1,0,0,0,599,
		600,5,4,0,0,600,601,5,123,0,0,601,602,5,14,0,0,602,603,7,3,0,0,603,604,
		5,5,0,0,604,605,3,60,30,0,605,83,1,0,0,0,606,608,3,242,121,0,607,609,5,
		13,0,0,608,607,1,0,0,0,608,609,1,0,0,0,609,610,1,0,0,0,610,611,3,62,31,
		0,611,85,1,0,0,0,612,613,5,112,0,0,613,615,5,123,0,0,614,616,3,4,2,0,615,
		614,1,0,0,0,615,616,1,0,0,0,616,617,1,0,0,0,617,618,5,12,0,0,618,619,3,
		18,9,0,619,620,5,10,0,0,620,87,1,0,0,0,621,623,3,76,38,0,622,621,1,0,0,
		0,622,623,1,0,0,0,623,624,1,0,0,0,624,625,5,115,0,0,625,627,5,6,0,0,626,
		628,3,218,109,0,627,626,1,0,0,0,627,628,1,0,0,0,628,629,1,0,0,0,629,635,
		5,7,0,0,630,631,5,8,0,0,631,632,3,224,112,0,632,633,5,9,0,0,633,636,1,
		0,0,0,634,636,5,10,0,0,635,630,1,0,0,0,635,634,1,0,0,0,635,636,1,0,0,0,
		636,89,1,0,0,0,637,639,5,96,0,0,638,637,1,0,0,0,638,639,1,0,0,0,639,641,
		1,0,0,0,640,642,5,119,0,0,641,640,1,0,0,0,641,642,1,0,0,0,642,643,1,0,
		0,0,643,644,5,102,0,0,644,646,5,123,0,0,645,647,3,4,2,0,646,645,1,0,0,
		0,646,647,1,0,0,0,647,649,1,0,0,0,648,650,3,92,46,0,649,648,1,0,0,0,649,
		650,1,0,0,0,650,651,1,0,0,0,651,653,3,36,18,0,652,654,5,10,0,0,653,652,
		1,0,0,0,653,654,1,0,0,0,654,91,1,0,0,0,655,656,5,93,0,0,656,657,3,94,47,
		0,657,93,1,0,0,0,658,663,3,26,13,0,659,660,5,11,0,0,660,662,3,26,13,0,
		661,659,1,0,0,0,662,665,1,0,0,0,663,661,1,0,0,0,663,664,1,0,0,0,664,95,
		1,0,0,0,665,663,1,0,0,0,666,668,5,95,0,0,667,666,1,0,0,0,667,668,1,0,0,
		0,668,669,1,0,0,0,669,670,5,92,0,0,670,671,5,123,0,0,671,673,5,8,0,0,672,
		674,3,98,49,0,673,672,1,0,0,0,673,674,1,0,0,0,674,675,1,0,0,0,675,676,
		5,9,0,0,676,97,1,0,0,0,677,679,3,100,50,0,678,680,5,11,0,0,679,678,1,0,
		0,0,679,680,1,0,0,0,680,99,1,0,0,0,681,686,3,102,51,0,682,683,5,11,0,0,
		683,685,3,102,51,0,684,682,1,0,0,0,685,688,1,0,0,0,686,684,1,0,0,0,686,
		687,1,0,0,0,687,101,1,0,0,0,688,686,1,0,0,0,689,692,3,242,121,0,690,691,
		5,12,0,0,691,693,3,254,127,0,692,690,1,0,0,0,692,693,1,0,0,0,693,103,1,
		0,0,0,694,695,5,116,0,0,695,696,3,106,53,0,696,698,5,8,0,0,697,699,3,126,
		63,0,698,697,1,0,0,0,698,699,1,0,0,0,699,700,1,0,0,0,700,701,5,9,0,0,701,
		105,1,0,0,0,702,711,5,123,0,0,703,705,5,16,0,0,704,703,1,0,0,0,705,706,
		1,0,0,0,706,704,1,0,0,0,706,707,1,0,0,0,707,708,1,0,0,0,708,710,5,123,
		0,0,709,704,1,0,0,0,710,713,1,0,0,0,711,709,1,0,0,0,711,712,1,0,0,0,712,
		107,1,0,0,0,713,711,1,0,0,0,714,715,5,123,0,0,715,716,5,12,0,0,716,717,
		3,106,53,0,717,718,5,10,0,0,718,109,1,0,0,0,719,721,3,112,56,0,720,719,
		1,0,0,0,721,722,1,0,0,0,722,720,1,0,0,0,722,723,1,0,0,0,723,111,1,0,0,
		0,724,727,5,122,0,0,725,728,3,114,57,0,726,728,3,116,58,0,727,725,1,0,
		0,0,727,726,1,0,0,0,728,113,1,0,0,0,729,730,6,57,-1,0,730,736,5,123,0,
		0,731,732,5,6,0,0,732,733,3,254,127,0,733,734,5,7,0,0,734,736,1,0,0,0,
		735,729,1,0,0,0,735,731,1,0,0,0,736,742,1,0,0,0,737,738,10,2,0,0,738,739,
		5,16,0,0,739,741,3,270,135,0,740,737,1,0,0,0,741,744,1,0,0,0,742,740,1,
		0,0,0,742,743,1,0,0,0,743,115,1,0,0,0,744,742,1,0,0,0,745,746,3,114,57,
		0,746,747,3,244,122,0,747,117,1,0,0,0,748,750,3,226,113,0,749,748,1,0,
		0,0,749,750,1,0,0,0,750,751,1,0,0,0,751,752,5,0,0,1,752,119,1,0,0,0,753,
		755,5,96,0,0,754,753,1,0,0,0,754,755,1,0,0,0,755,756,1,0,0,0,756,757,3,
		122,61,0,757,121,1,0,0,0,758,789,3,124,62,0,759,789,3,130,65,0,760,789,
		3,136,68,0,761,789,3,144,72,0,762,789,3,128,64,0,763,789,3,110,55,0,764,
		789,3,188,94,0,765,789,3,90,45,0,766,789,3,104,52,0,767,789,3,148,74,0,
		768,789,3,150,75,0,769,789,3,154,77,0,770,789,3,156,78,0,771,789,3,158,
		79,0,772,789,3,160,80,0,773,789,3,162,81,0,774,789,3,174,87,0,775,789,
		3,164,82,0,776,789,3,176,88,0,777,789,3,178,89,0,778,789,3,184,92,0,779,
		789,3,186,93,0,780,789,3,258,129,0,781,789,3,208,104,0,782,789,3,138,69,
		0,783,789,3,86,43,0,784,789,3,96,48,0,785,789,3,146,73,0,786,787,5,96,
		0,0,787,789,3,122,61,0,788,758,1,0,0,0,788,759,1,0,0,0,788,760,1,0,0,0,
		788,761,1,0,0,0,788,762,1,0,0,0,788,763,1,0,0,0,788,764,1,0,0,0,788,765,
		1,0,0,0,788,766,1,0,0,0,788,767,1,0,0,0,788,768,1,0,0,0,788,769,1,0,0,
		0,788,770,1,0,0,0,788,771,1,0,0,0,788,772,1,0,0,0,788,773,1,0,0,0,788,
		774,1,0,0,0,788,775,1,0,0,0,788,776,1,0,0,0,788,777,1,0,0,0,788,778,1,
		0,0,0,788,779,1,0,0,0,788,780,1,0,0,0,788,781,1,0,0,0,788,782,1,0,0,0,
		788,783,1,0,0,0,788,784,1,0,0,0,788,785,1,0,0,0,788,786,1,0,0,0,789,123,
		1,0,0,0,790,792,5,8,0,0,791,793,3,126,63,0,792,791,1,0,0,0,792,793,1,0,
		0,0,793,794,1,0,0,0,794,795,5,9,0,0,795,125,1,0,0,0,796,798,3,122,61,0,
		797,796,1,0,0,0,798,799,1,0,0,0,799,797,1,0,0,0,799,800,1,0,0,0,800,127,
		1,0,0,0,801,805,5,120,0,0,802,803,5,123,0,0,803,806,3,62,31,0,804,806,
		3,138,69,0,805,802,1,0,0,0,805,804,1,0,0,0,806,807,1,0,0,0,807,808,3,282,
		141,0,808,129,1,0,0,0,809,812,5,97,0,0,810,813,3,132,66,0,811,813,3,108,
		54,0,812,810,1,0,0,0,812,811,1,0,0,0,813,131,1,0,0,0,814,817,5,23,0,0,
		815,817,3,134,67,0,816,814,1,0,0,0,816,815,1,0,0,0,817,820,1,0,0,0,818,
		819,5,87,0,0,819,821,3,270,135,0,820,818,1,0,0,0,820,821,1,0,0,0,821,822,
		1,0,0,0,822,823,5,88,0,0,823,824,5,124,0,0,824,825,3,282,141,0,825,133,
		1,0,0,0,826,827,3,270,135,0,827,828,5,11,0,0,828,830,1,0,0,0,829,826,1,
		0,0,0,829,830,1,0,0,0,830,831,1,0,0,0,831,832,5,8,0,0,832,837,3,270,135,
		0,833,834,5,11,0,0,834,836,3,270,135,0,835,833,1,0,0,0,836,839,1,0,0,0,
		837,835,1,0,0,0,837,838,1,0,0,0,838,840,1,0,0,0,839,837,1,0,0,0,840,841,
		5,9,0,0,841,135,1,0,0,0,842,844,5,96,0,0,843,845,5,81,0,0,844,843,1,0,
		0,0,844,845,1,0,0,0,845,848,1,0,0,0,846,849,3,132,66,0,847,849,3,122,61,
		0,848,846,1,0,0,0,848,847,1,0,0,0,849,137,1,0,0,0,850,852,3,2,1,0,851,
		853,3,60,30,0,852,851,1,0,0,0,852,853,1,0,0,0,853,854,1,0,0,0,854,856,
		3,0,0,0,855,857,5,10,0,0,856,855,1,0,0,0,856,857,1,0,0,0,857,880,1,0,0,
		0,858,860,3,76,38,0,859,858,1,0,0,0,859,860,1,0,0,0,860,862,1,0,0,0,861,
		863,3,152,76,0,862,861,1,0,0,0,862,863,1,0,0,0,863,865,1,0,0,0,864,866,
		5,89,0,0,865,864,1,0,0,0,865,866,1,0,0,0,866,867,1,0,0,0,867,869,3,140,
		70,0,868,870,5,10,0,0,869,868,1,0,0,0,869,870,1,0,0,0,870,880,1,0,0,0,
		871,873,5,119,0,0,872,874,3,152,76,0,873,872,1,0,0,0,873,874,1,0,0,0,874,
		875,1,0,0,0,875,877,3,140,70,0,876,878,5,10,0,0,877,876,1,0,0,0,877,878,
		1,0,0,0,878,880,1,0,0,0,879,850,1,0,0,0,879,859,1,0,0,0,879,871,1,0,0,
		0,880,139,1,0,0,0,881,886,3,142,71,0,882,883,5,11,0,0,883,885,3,142,71,
		0,884,882,1,0,0,0,885,888,1,0,0,0,886,884,1,0,0,0,886,887,1,0,0,0,887,
		141,1,0,0,0,888,886,1,0,0,0,889,893,3,272,136,0,890,893,3,228,114,0,891,
		893,3,234,117,0,892,889,1,0,0,0,892,890,1,0,0,0,892,891,1,0,0,0,893,895,
		1,0,0,0,894,896,3,60,30,0,895,894,1,0,0,0,895,896,1,0,0,0,896,898,1,0,
		0,0,897,899,3,254,127,0,898,897,1,0,0,0,898,899,1,0,0,0,899,905,1,0,0,
		0,900,902,5,12,0,0,901,903,3,4,2,0,902,901,1,0,0,0,902,903,1,0,0,0,903,
		904,1,0,0,0,904,906,3,254,127,0,905,900,1,0,0,0,905,906,1,0,0,0,906,143,
		1,0,0,0,907,908,5,10,0,0,908,145,1,0,0,0,909,910,4,73,6,0,910,912,3,250,
		125,0,911,913,5,10,0,0,912,911,1,0,0,0,912,913,1,0,0,0,913,147,1,0,0,0,
		914,915,5,82,0,0,915,916,5,6,0,0,916,917,3,250,125,0,917,918,5,7,0,0,918,
		921,3,122,61,0,919,920,5,66,0,0,920,922,3,122,61,0,921,919,1,0,0,0,921,
		922,1,0,0,0,922,149,1,0,0,0,923,924,5,62,0,0,924,925,3,122,61,0,925,926,
		5,76,0,0,926,927,5,6,0,0,927,928,3,250,125,0,928,929,5,7,0,0,929,930,3,
		282,141,0,930,993,1,0,0,0,931,932,5,76,0,0,932,933,5,6,0,0,933,934,3,250,
		125,0,934,935,5,7,0,0,935,936,3,122,61,0,936,993,1,0,0,0,937,938,5,74,
		0,0,938,940,5,6,0,0,939,941,3,250,125,0,940,939,1,0,0,0,940,941,1,0,0,
		0,941,942,1,0,0,0,942,944,5,10,0,0,943,945,3,250,125,0,944,943,1,0,0,0,
		944,945,1,0,0,0,945,946,1,0,0,0,946,948,5,10,0,0,947,949,3,250,125,0,948,
		947,1,0,0,0,948,949,1,0,0,0,949,950,1,0,0,0,950,951,5,7,0,0,951,993,3,
		122,61,0,952,953,5,74,0,0,953,954,5,6,0,0,954,955,3,152,76,0,955,956,3,
		140,70,0,956,958,5,10,0,0,957,959,3,250,125,0,958,957,1,0,0,0,958,959,
		1,0,0,0,959,960,1,0,0,0,960,962,5,10,0,0,961,963,3,250,125,0,962,961,1,
		0,0,0,962,963,1,0,0,0,963,964,1,0,0,0,964,965,5,7,0,0,965,966,3,122,61,
		0,966,993,1,0,0,0,967,968,5,74,0,0,968,969,5,6,0,0,969,973,3,254,127,0,
		970,974,5,85,0,0,971,972,5,123,0,0,972,974,4,75,7,0,973,970,1,0,0,0,973,
		971,1,0,0,0,974,975,1,0,0,0,975,976,3,250,125,0,976,977,5,7,0,0,977,978,
		3,122,61,0,978,993,1,0,0,0,979,980,5,74,0,0,980,981,5,6,0,0,981,982,3,
		152,76,0,982,986,3,142,71,0,983,987,5,85,0,0,984,985,5,123,0,0,985,987,
		4,75,8,0,986,983,1,0,0,0,986,984,1,0,0,0,987,988,1,0,0,0,988,989,3,250,
		125,0,989,990,5,7,0,0,990,991,3,122,61,0,991,993,1,0,0,0,992,923,1,0,0,
		0,992,931,1,0,0,0,992,937,1,0,0,0,992,952,1,0,0,0,992,967,1,0,0,0,992,
		979,1,0,0,0,993,151,1,0,0,0,994,995,7,4,0,0,995,153,1,0,0,0,996,999,5,
		73,0,0,997,998,4,77,9,0,998,1000,5,123,0,0,999,997,1,0,0,0,999,1000,1,
		0,0,0,1000,1001,1,0,0,0,1001,1002,3,282,141,0,1002,155,1,0,0,0,1003,1006,
		5,61,0,0,1004,1005,4,78,10,0,1005,1007,5,123,0,0,1006,1004,1,0,0,0,1006,
		1007,1,0,0,0,1007,1008,1,0,0,0,1008,1009,3,282,141,0,1009,157,1,0,0,0,
		1010,1013,5,71,0,0,1011,1012,4,79,11,0,1012,1014,3,250,125,0,1013,1011,
		1,0,0,0,1013,1014,1,0,0,0,1014,1015,1,0,0,0,1015,1016,3,282,141,0,1016,
		159,1,0,0,0,1017,1020,5,106,0,0,1018,1019,4,80,12,0,1019,1021,3,250,125,
		0,1020,1018,1,0,0,0,1020,1021,1,0,0,0,1021,1022,1,0,0,0,1022,1023,3,282,
		141,0,1023,161,1,0,0,0,1024,1025,5,80,0,0,1025,1026,5,6,0,0,1026,1027,
		3,250,125,0,1027,1028,5,7,0,0,1028,1029,3,122,61,0,1029,163,1,0,0,0,1030,
		1031,5,75,0,0,1031,1032,5,6,0,0,1032,1033,3,250,125,0,1033,1034,5,7,0,
		0,1034,1035,3,166,83,0,1035,165,1,0,0,0,1036,1038,5,8,0,0,1037,1039,3,
		168,84,0,1038,1037,1,0,0,0,1038,1039,1,0,0,0,1039,1044,1,0,0,0,1040,1042,
		3,172,86,0,1041,1043,3,168,84,0,1042,1041,1,0,0,0,1042,1043,1,0,0,0,1043,
		1045,1,0,0,0,1044,1040,1,0,0,0,1044,1045,1,0,0,0,1045,1046,1,0,0,0,1046,
		1047,5,9,0,0,1047,167,1,0,0,0,1048,1050,3,170,85,0,1049,1048,1,0,0,0,1050,
		1051,1,0,0,0,1051,1049,1,0,0,0,1051,1052,1,0,0,0,1052,169,1,0,0,0,1053,
		1054,5,65,0,0,1054,1055,3,250,125,0,1055,1057,5,14,0,0,1056,1058,3,126,
		63,0,1057,1056,1,0,0,0,1057,1058,1,0,0,0,1058,171,1,0,0,0,1059,1060,5,
		81,0,0,1060,1062,5,14,0,0,1061,1063,3,126,63,0,1062,1061,1,0,0,0,1062,
		1063,1,0,0,0,1063,173,1,0,0,0,1064,1065,5,123,0,0,1065,1066,5,14,0,0,1066,
		1067,3,122,61,0,1067,175,1,0,0,0,1068,1069,5,83,0,0,1069,1070,4,88,13,
		0,1070,1071,3,250,125,0,1071,1072,3,282,141,0,1072,177,1,0,0,0,1073,1074,
		5,86,0,0,1074,1080,3,124,62,0,1075,1077,3,180,90,0,1076,1078,3,182,91,
		0,1077,1076,1,0,0,0,1077,1078,1,0,0,0,1078,1081,1,0,0,0,1079,1081,3,182,
		91,0,1080,1075,1,0,0,0,1080,1079,1,0,0,0,1081,179,1,0,0,0,1082,1083,5,
		69,0,0,1083,1084,5,6,0,0,1084,1085,5,123,0,0,1085,1086,5,7,0,0,1086,1087,
		3,124,62,0,1087,181,1,0,0,0,1088,1089,5,70,0,0,1089,1090,3,124,62,0,1090,
		183,1,0,0,0,1091,1092,5,77,0,0,1092,1093,3,282,141,0,1093,185,1,0,0,0,
		1094,1095,5,78,0,0,1095,1096,5,123,0,0,1096,1102,3,62,31,0,1097,1098,5,
		8,0,0,1098,1099,3,224,112,0,1099,1100,5,9,0,0,1100,1103,1,0,0,0,1101,1103,
		5,10,0,0,1102,1097,1,0,0,0,1102,1101,1,0,0,0,1103,187,1,0,0,0,1104,1106,
		5,120,0,0,1105,1104,1,0,0,0,1105,1106,1,0,0,0,1106,1107,1,0,0,0,1107,1108,
		5,91,0,0,1108,1110,5,123,0,0,1109,1111,3,4,2,0,1110,1109,1,0,0,0,1110,
		1111,1,0,0,0,1111,1112,1,0,0,0,1112,1113,3,190,95,0,1113,1114,3,192,96,
		0,1114,189,1,0,0,0,1115,1117,3,194,97,0,1116,1115,1,0,0,0,1116,1117,1,
		0,0,0,1117,1119,1,0,0,0,1118,1120,3,196,98,0,1119,1118,1,0,0,0,1119,1120,
		1,0,0,0,1120,191,1,0,0,0,1121,1125,5,8,0,0,1122,1124,3,198,99,0,1123,1122,
		1,0,0,0,1124,1127,1,0,0,0,1125,1123,1,0,0,0,1125,1126,1,0,0,0,1126,1128,
		1,0,0,0,1127,1125,1,0,0,0,1128,1129,5,9,0,0,1129,193,1,0,0,0,1130,1131,
		5,93,0,0,1131,1132,3,26,13,0,1132,195,1,0,0,0,1133,1134,5,98,0,0,1134,
		1135,3,94,47,0,1135,197,1,0,0,0,1136,1144,3,88,44,0,1137,1139,3,110,55,
		0,1138,1137,1,0,0,0,1138,1139,1,0,0,0,1139,1140,1,0,0,0,1140,1144,3,200,
		100,0,1141,1144,3,204,102,0,1142,1144,3,122,61,0,1143,1136,1,0,0,0,1143,
		1138,1,0,0,0,1143,1141,1,0,0,0,1143,1142,1,0,0,0,1144,199,1,0,0,0,1145,
		1146,3,202,101,0,1146,1148,3,242,121,0,1147,1149,5,13,0,0,1148,1147,1,
		0,0,0,1148,1149,1,0,0,0,1149,1151,1,0,0,0,1150,1152,3,60,30,0,1151,1150,
		1,0,0,0,1151,1152,1,0,0,0,1152,1154,1,0,0,0,1153,1155,3,0,0,0,1154,1153,
		1,0,0,0,1154,1155,1,0,0,0,1155,1156,1,0,0,0,1156,1157,5,10,0,0,1157,1175,
		1,0,0,0,1158,1159,3,202,101,0,1159,1160,3,242,121,0,1160,1166,3,62,31,
		0,1161,1162,5,8,0,0,1162,1163,3,224,112,0,1163,1164,5,9,0,0,1164,1167,
		1,0,0,0,1165,1167,5,10,0,0,1166,1161,1,0,0,0,1166,1165,1,0,0,0,1167,1175,
		1,0,0,0,1168,1171,3,202,101,0,1169,1172,3,238,119,0,1170,1172,3,240,120,
		0,1171,1169,1,0,0,0,1171,1170,1,0,0,0,1172,1175,1,0,0,0,1173,1175,3,128,
		64,0,1174,1145,1,0,0,0,1174,1158,1,0,0,0,1174,1168,1,0,0,0,1174,1173,1,
		0,0,0,1175,201,1,0,0,0,1176,1178,5,90,0,0,1177,1176,1,0,0,0,1177,1178,
		1,0,0,0,1178,1180,1,0,0,0,1179,1181,3,76,38,0,1180,1179,1,0,0,0,1180,1181,
		1,0,0,0,1181,1183,1,0,0,0,1182,1184,5,105,0,0,1183,1182,1,0,0,0,1183,1184,
		1,0,0,0,1184,1186,1,0,0,0,1185,1187,5,89,0,0,1186,1185,1,0,0,0,1186,1187,
		1,0,0,0,1187,203,1,0,0,0,1188,1189,3,82,41,0,1189,1190,5,10,0,0,1190,205,
		1,0,0,0,1191,1193,5,23,0,0,1192,1191,1,0,0,0,1192,1193,1,0,0,0,1193,1194,
		1,0,0,0,1194,1195,5,123,0,0,1195,1197,5,6,0,0,1196,1198,3,218,109,0,1197,
		1196,1,0,0,0,1197,1198,1,0,0,0,1198,1199,1,0,0,0,1199,1200,5,7,0,0,1200,
		1201,5,8,0,0,1201,1202,3,224,112,0,1202,1203,5,9,0,0,1203,207,1,0,0,0,
		1204,1205,5,78,0,0,1205,1207,5,23,0,0,1206,1208,5,123,0,0,1207,1206,1,
		0,0,0,1207,1208,1,0,0,0,1208,1209,1,0,0,0,1209,1211,5,6,0,0,1210,1212,
		3,218,109,0,1211,1210,1,0,0,0,1211,1212,1,0,0,0,1212,1213,1,0,0,0,1213,
		1214,5,7,0,0,1214,1215,5,8,0,0,1215,1216,3,224,112,0,1216,1217,5,9,0,0,
		1217,209,1,0,0,0,1218,1219,5,8,0,0,1219,1224,3,212,106,0,1220,1221,5,11,
		0,0,1221,1223,3,212,106,0,1222,1220,1,0,0,0,1223,1226,1,0,0,0,1224,1222,
		1,0,0,0,1224,1225,1,0,0,0,1225,1228,1,0,0,0,1226,1224,1,0,0,0,1227,1229,
		5,11,0,0,1228,1227,1,0,0,0,1228,1229,1,0,0,0,1229,1230,1,0,0,0,1230,1231,
		5,9,0,0,1231,211,1,0,0,0,1232,1233,5,23,0,0,1233,1234,3,216,108,0,1234,
		213,1,0,0,0,1235,1236,5,8,0,0,1236,1241,3,216,108,0,1237,1238,5,11,0,0,
		1238,1240,3,216,108,0,1239,1237,1,0,0,0,1240,1243,1,0,0,0,1241,1239,1,
		0,0,0,1241,1242,1,0,0,0,1242,1245,1,0,0,0,1243,1241,1,0,0,0,1244,1246,
		5,11,0,0,1245,1244,1,0,0,0,1245,1246,1,0,0,0,1246,1247,1,0,0,0,1247,1248,
		5,9,0,0,1248,215,1,0,0,0,1249,1250,5,4,0,0,1250,1251,3,254,127,0,1251,
		1252,5,5,0,0,1252,1254,5,6,0,0,1253,1255,3,218,109,0,1254,1253,1,0,0,0,
		1254,1255,1,0,0,0,1255,1256,1,0,0,0,1256,1257,5,7,0,0,1257,1258,5,8,0,
		0,1258,1259,3,224,112,0,1259,1260,5,9,0,0,1260,217,1,0,0,0,1261,1266,3,
		220,110,0,1262,1263,5,11,0,0,1263,1265,3,220,110,0,1264,1262,1,0,0,0,1265,
		1268,1,0,0,0,1266,1264,1,0,0,0,1266,1267,1,0,0,0,1267,1271,1,0,0,0,1268,
		1266,1,0,0,0,1269,1270,5,11,0,0,1270,1272,3,222,111,0,1271,1269,1,0,0,
		0,1271,1272,1,0,0,0,1272,1281,1,0,0,0,1273,1281,3,222,111,0,1274,1281,
		3,228,114,0,1275,1278,3,234,117,0,1276,1277,5,14,0,0,1277,1279,3,218,109,
		0,1278,1276,1,0,0,0,1278,1279,1,0,0,0,1279,1281,1,0,0,0,1280,1261,1,0,
		0,0,1280,1273,1,0,0,0,1280,1274,1,0,0,0,1280,1275,1,0,0,0,1281,219,1,0,
		0,0,1282,1284,3,112,56,0,1283,1282,1,0,0,0,1283,1284,1,0,0,0,1284,1286,
		1,0,0,0,1285,1287,3,76,38,0,1286,1285,1,0,0,0,1286,1287,1,0,0,0,1287,1288,
		1,0,0,0,1288,1290,3,272,136,0,1289,1291,5,13,0,0,1290,1289,1,0,0,0,1290,
		1291,1,0,0,0,1291,1293,1,0,0,0,1292,1294,3,60,30,0,1293,1292,1,0,0,0,1293,
		1294,1,0,0,0,1294,1297,1,0,0,0,1295,1296,5,12,0,0,1296,1298,3,254,127,
		0,1297,1295,1,0,0,0,1297,1298,1,0,0,0,1298,221,1,0,0,0,1299,1300,5,15,
		0,0,1300,1301,5,123,0,0,1301,223,1,0,0,0,1302,1304,3,226,113,0,1303,1302,
		1,0,0,0,1303,1304,1,0,0,0,1304,225,1,0,0,0,1305,1307,3,120,60,0,1306,1305,
		1,0,0,0,1307,1308,1,0,0,0,1308,1306,1,0,0,0,1308,1309,1,0,0,0,1309,227,
		1,0,0,0,1310,1312,5,4,0,0,1311,1313,3,230,115,0,1312,1311,1,0,0,0,1312,
		1313,1,0,0,0,1313,1314,1,0,0,0,1314,1315,5,5,0,0,1315,229,1,0,0,0,1316,
		1325,3,232,116,0,1317,1319,5,11,0,0,1318,1317,1,0,0,0,1319,1320,1,0,0,
		0,1320,1318,1,0,0,0,1320,1321,1,0,0,0,1321,1322,1,0,0,0,1322,1324,3,232,
		116,0,1323,1318,1,0,0,0,1324,1327,1,0,0,0,1325,1323,1,0,0,0,1325,1326,
		1,0,0,0,1326,231,1,0,0,0,1327,1325,1,0,0,0,1328,1330,5,15,0,0,1329,1328,
		1,0,0,0,1329,1330,1,0,0,0,1330,1333,1,0,0,0,1331,1334,3,254,127,0,1332,
		1334,5,123,0,0,1333,1331,1,0,0,0,1333,1332,1,0,0,0,1334,1336,1,0,0,0,1335,
		1337,5,11,0,0,1336,1335,1,0,0,0,1336,1337,1,0,0,0,1337,233,1,0,0,0,1338,
		1347,5,8,0,0,1339,1344,3,236,118,0,1340,1341,5,11,0,0,1341,1343,3,236,
		118,0,1342,1340,1,0,0,0,1343,1346,1,0,0,0,1344,1342,1,0,0,0,1344,1345,
		1,0,0,0,1345,1348,1,0,0,0,1346,1344,1,0,0,0,1347,1339,1,0,0,0,1347,1348,
		1,0,0,0,1348,1350,1,0,0,0,1349,1351,5,11,0,0,1350,1349,1,0,0,0,1350,1351,
		1,0,0,0,1351,1352,1,0,0,0,1352,1353,5,9,0,0,1353,235,1,0,0,0,1354,1355,
		3,242,121,0,1355,1356,7,5,0,0,1356,1357,3,254,127,0,1357,1370,1,0,0,0,
		1358,1359,5,4,0,0,1359,1360,3,254,127,0,1360,1361,5,5,0,0,1361,1362,5,
		14,0,0,1362,1363,3,254,127,0,1363,1370,1,0,0,0,1364,1370,3,238,119,0,1365,
		1370,3,240,120,0,1366,1370,3,206,103,0,1367,1370,3,272,136,0,1368,1370,
		3,72,36,0,1369,1354,1,0,0,0,1369,1358,1,0,0,0,1369,1364,1,0,0,0,1369,1365,
		1,0,0,0,1369,1366,1,0,0,0,1369,1367,1,0,0,0,1369,1368,1,0,0,0,1370,237,
		1,0,0,0,1371,1372,3,278,139,0,1372,1373,5,6,0,0,1373,1375,5,7,0,0,1374,
		1376,3,60,30,0,1375,1374,1,0,0,0,1375,1376,1,0,0,0,1376,1377,1,0,0,0,1377,
		1378,5,8,0,0,1378,1379,3,224,112,0,1379,1380,5,9,0,0,1380,239,1,0,0,0,
		1381,1382,3,280,140,0,1382,1385,5,6,0,0,1383,1386,5,123,0,0,1384,1386,
		3,2,1,0,1385,1383,1,0,0,0,1385,1384,1,0,0,0,1386,1388,1,0,0,0,1387,1389,
		3,60,30,0,1388,1387,1,0,0,0,1388,1389,1,0,0,0,1389,1390,1,0,0,0,1390,1391,
		5,7,0,0,1391,1392,5,8,0,0,1392,1393,3,224,112,0,1393,1394,5,9,0,0,1394,
		241,1,0,0,0,1395,1399,3,270,135,0,1396,1399,5,124,0,0,1397,1399,3,268,
		134,0,1398,1395,1,0,0,0,1398,1396,1,0,0,0,1398,1397,1,0,0,0,1399,243,1,
		0,0,0,1400,1405,5,6,0,0,1401,1403,3,246,123,0,1402,1404,5,11,0,0,1403,
		1402,1,0,0,0,1403,1404,1,0,0,0,1404,1406,1,0,0,0,1405,1401,1,0,0,0,1405,
		1406,1,0,0,0,1406,1407,1,0,0,0,1407,1408,5,7,0,0,1408,245,1,0,0,0,1409,
		1414,3,248,124,0,1410,1411,5,11,0,0,1411,1413,3,248,124,0,1412,1410,1,
		0,0,0,1413,1416,1,0,0,0,1414,1412,1,0,0,0,1414,1415,1,0,0,0,1415,247,1,
		0,0,0,1416,1414,1,0,0,0,1417,1419,5,15,0,0,1418,1417,1,0,0,0,1418,1419,
		1,0,0,0,1419,1422,1,0,0,0,1420,1423,3,254,127,0,1421,1423,5,123,0,0,1422,
		1420,1,0,0,0,1422,1421,1,0,0,0,1423,249,1,0,0,0,1424,1429,3,254,127,0,
		1425,1426,5,11,0,0,1426,1428,3,254,127,0,1427,1425,1,0,0,0,1428,1431,1,
		0,0,0,1429,1427,1,0,0,0,1429,1430,1,0,0,0,1430,251,1,0,0,0,1431,1429,1,
		0,0,0,1432,1434,5,78,0,0,1433,1435,5,123,0,0,1434,1433,1,0,0,0,1434,1435,
		1,0,0,0,1435,1436,1,0,0,0,1436,1438,5,6,0,0,1437,1439,3,218,109,0,1438,
		1437,1,0,0,0,1438,1439,1,0,0,0,1439,1440,1,0,0,0,1440,1442,5,7,0,0,1441,
		1443,3,60,30,0,1442,1441,1,0,0,0,1442,1443,1,0,0,0,1443,1444,1,0,0,0,1444,
		1445,5,8,0,0,1445,1446,3,224,112,0,1446,1447,5,9,0,0,1447,253,1,0,0,0,
		1448,1449,6,127,-1,0,1449,1504,3,252,126,0,1450,1504,3,258,129,0,1451,
		1453,5,91,0,0,1452,1454,5,123,0,0,1453,1452,1,0,0,0,1453,1454,1,0,0,0,
		1454,1455,1,0,0,0,1455,1504,3,192,96,0,1456,1457,5,67,0,0,1457,1459,3,
		254,127,0,1458,1460,3,12,6,0,1459,1458,1,0,0,0,1459,1460,1,0,0,0,1460,
		1462,1,0,0,0,1461,1463,3,244,122,0,1462,1461,1,0,0,0,1462,1463,1,0,0,0,
		1463,1504,1,0,0,0,1464,1465,5,84,0,0,1465,1504,3,254,127,38,1466,1467,
		5,72,0,0,1467,1504,3,254,127,37,1468,1469,5,64,0,0,1469,1504,3,254,127,
		36,1470,1471,5,17,0,0,1471,1504,3,254,127,35,1472,1473,5,18,0,0,1473,1504,
		3,254,127,34,1474,1475,5,19,0,0,1475,1504,3,254,127,33,1476,1477,5,20,
		0,0,1477,1504,3,254,127,32,1478,1479,5,21,0,0,1479,1504,3,254,127,31,1480,
		1481,5,22,0,0,1481,1504,3,254,127,30,1482,1504,3,214,107,0,1483,1504,3,
		210,105,0,1484,1504,3,208,104,0,1485,1504,3,160,80,0,1486,1504,5,79,0,
		0,1487,1489,3,270,135,0,1488,1490,3,254,127,0,1489,1488,1,0,0,0,1489,1490,
		1,0,0,0,1490,1504,1,0,0,0,1491,1504,5,94,0,0,1492,1504,3,266,133,0,1493,
		1504,3,228,114,0,1494,1504,3,234,117,0,1495,1496,5,6,0,0,1496,1497,3,250,
		125,0,1497,1498,5,7,0,0,1498,1504,1,0,0,0,1499,1501,3,12,6,0,1500,1502,
		3,250,125,0,1501,1500,1,0,0,0,1501,1502,1,0,0,0,1502,1504,1,0,0,0,1503,
		1448,1,0,0,0,1503,1450,1,0,0,0,1503,1451,1,0,0,0,1503,1456,1,0,0,0,1503,
		1464,1,0,0,0,1503,1466,1,0,0,0,1503,1468,1,0,0,0,1503,1470,1,0,0,0,1503,
		1472,1,0,0,0,1503,1474,1,0,0,0,1503,1476,1,0,0,0,1503,1478,1,0,0,0,1503,
		1480,1,0,0,0,1503,1482,1,0,0,0,1503,1483,1,0,0,0,1503,1484,1,0,0,0,1503,
		1485,1,0,0,0,1503,1486,1,0,0,0,1503,1487,1,0,0,0,1503,1491,1,0,0,0,1503,
		1492,1,0,0,0,1503,1493,1,0,0,0,1503,1494,1,0,0,0,1503,1495,1,0,0,0,1503,
		1499,1,0,0,0,1504,1580,1,0,0,0,1505,1506,10,29,0,0,1506,1507,7,6,0,0,1507,
		1579,3,254,127,30,1508,1509,10,28,0,0,1509,1510,7,7,0,0,1510,1579,3,254,
		127,29,1511,1512,10,27,0,0,1512,1513,7,8,0,0,1513,1579,3,254,127,28,1514,
		1515,10,26,0,0,1515,1516,7,9,0,0,1516,1579,3,254,127,27,1517,1518,10,25,
		0,0,1518,1519,5,63,0,0,1519,1579,3,254,127,26,1520,1521,10,24,0,0,1521,
		1522,5,85,0,0,1522,1579,3,254,127,25,1523,1524,10,23,0,0,1524,1525,7,10,
		0,0,1525,1579,3,254,127,24,1526,1527,10,22,0,0,1527,1528,5,37,0,0,1528,
		1579,3,254,127,23,1529,1530,10,21,0,0,1530,1531,5,38,0,0,1531,1579,3,254,
		127,22,1532,1533,10,20,0,0,1533,1534,5,39,0,0,1534,1579,3,254,127,21,1535,
		1536,10,19,0,0,1536,1537,5,40,0,0,1537,1579,3,254,127,20,1538,1539,10,
		18,0,0,1539,1540,5,41,0,0,1540,1579,3,254,127,19,1541,1542,10,17,0,0,1542,
		1543,5,13,0,0,1543,1544,3,254,127,0,1544,1545,5,14,0,0,1545,1546,3,254,
		127,18,1546,1579,1,0,0,0,1547,1548,10,16,0,0,1548,1549,5,12,0,0,1549,1579,
		3,254,127,17,1550,1551,10,15,0,0,1551,1552,3,264,132,0,1552,1553,3,254,
		127,16,1553,1579,1,0,0,0,1554,1555,10,44,0,0,1555,1556,5,4,0,0,1556,1557,
		3,250,125,0,1557,1558,5,5,0,0,1558,1579,1,0,0,0,1559,1560,10,43,0,0,1560,
		1561,5,16,0,0,1561,1563,3,270,135,0,1562,1564,3,28,14,0,1563,1562,1,0,
		0,0,1563,1564,1,0,0,0,1564,1579,1,0,0,0,1565,1566,10,42,0,0,1566,1579,
		3,244,122,0,1567,1568,10,40,0,0,1568,1569,4,127,33,0,1569,1579,5,17,0,
		0,1570,1571,10,39,0,0,1571,1572,4,127,35,0,1572,1579,5,18,0,0,1573,1574,
		10,14,0,0,1574,1579,5,125,0,0,1575,1576,10,1,0,0,1576,1577,5,87,0,0,1577,
		1579,3,256,128,0,1578,1505,1,0,0,0,1578,1508,1,0,0,0,1578,1511,1,0,0,0,
		1578,1514,1,0,0,0,1578,1517,1,0,0,0,1578,1520,1,0,0,0,1578,1523,1,0,0,
		0,1578,1526,1,0,0,0,1578,1529,1,0,0,0,1578,1532,1,0,0,0,1578,1535,1,0,
		0,0,1578,1538,1,0,0,0,1578,1541,1,0,0,0,1578,1547,1,0,0,0,1578,1550,1,
		0,0,0,1578,1554,1,0,0,0,1578,1559,1,0,0,0,1578,1565,1,0,0,0,1578,1567,
		1,0,0,0,1578,1570,1,0,0,0,1578,1573,1,0,0,0,1578,1575,1,0,0,0,1579,1582,
		1,0,0,0,1580,1578,1,0,0,0,1580,1581,1,0,0,0,1581,255,1,0,0,0,1582,1580,
		1,0,0,0,1583,1586,3,24,12,0,1584,1585,5,4,0,0,1585,1587,5,5,0,0,1586,1584,
		1,0,0,0,1586,1587,1,0,0,0,1587,1590,1,0,0,0,1588,1590,3,254,127,0,1589,
		1583,1,0,0,0,1589,1588,1,0,0,0,1590,257,1,0,0,0,1591,1593,5,90,0,0,1592,
		1591,1,0,0,0,1592,1593,1,0,0,0,1593,1594,1,0,0,0,1594,1596,3,260,130,0,
		1595,1597,3,60,30,0,1596,1595,1,0,0,0,1596,1597,1,0,0,0,1597,1598,1,0,
		0,0,1598,1599,5,53,0,0,1599,1600,3,262,131,0,1600,259,1,0,0,0,1601,1608,
		5,123,0,0,1602,1604,5,6,0,0,1603,1605,3,218,109,0,1604,1603,1,0,0,0,1604,
		1605,1,0,0,0,1605,1606,1,0,0,0,1606,1608,5,7,0,0,1607,1601,1,0,0,0,1607,
		1602,1,0,0,0,1608,261,1,0,0,0,1609,1615,3,254,127,0,1610,1611,5,8,0,0,
		1611,1612,3,224,112,0,1612,1613,5,9,0,0,1613,1615,1,0,0,0,1614,1609,1,
		0,0,0,1614,1610,1,0,0,0,1615,263,1,0,0,0,1616,1617,7,11,0,0,1617,265,1,
		0,0,0,1618,1625,5,54,0,0,1619,1625,5,55,0,0,1620,1625,5,124,0,0,1621,1625,
		5,125,0,0,1622,1625,5,3,0,0,1623,1625,3,268,134,0,1624,1618,1,0,0,0,1624,
		1619,1,0,0,0,1624,1620,1,0,0,0,1624,1621,1,0,0,0,1624,1622,1,0,0,0,1624,
		1623,1,0,0,0,1625,267,1,0,0,0,1626,1627,7,12,0,0,1627,269,1,0,0,0,1628,
		1631,5,123,0,0,1629,1631,3,274,137,0,1630,1628,1,0,0,0,1630,1629,1,0,0,
		0,1631,271,1,0,0,0,1632,1633,7,13,0,0,1633,273,1,0,0,0,1634,1638,3,276,
		138,0,1635,1638,5,54,0,0,1636,1638,5,55,0,0,1637,1634,1,0,0,0,1637,1635,
		1,0,0,0,1637,1636,1,0,0,0,1638,275,1,0,0,0,1639,1640,7,14,0,0,1640,277,
		1,0,0,0,1641,1642,5,113,0,0,1642,1643,3,242,121,0,1643,279,1,0,0,0,1644,
		1645,5,114,0,0,1645,1646,3,242,121,0,1646,281,1,0,0,0,1647,1652,5,10,0,
		0,1648,1652,5,0,0,1,1649,1652,4,141,38,0,1650,1652,4,141,39,0,1651,1647,
		1,0,0,0,1651,1648,1,0,0,0,1651,1649,1,0,0,0,1651,1650,1,0,0,0,1652,283,
		1,0,0,0,207,289,293,302,307,310,317,326,336,347,349,370,378,385,389,404,
		408,412,418,425,435,437,453,457,461,469,473,488,492,495,499,502,506,512,
		516,520,528,533,535,542,547,550,553,558,561,564,569,572,575,579,585,589,
		593,597,608,615,622,627,635,638,641,646,649,653,663,667,673,679,686,692,
		698,706,711,722,727,735,742,749,754,788,792,799,805,812,816,820,829,837,
		844,848,852,856,859,862,865,869,873,877,879,886,892,895,898,902,905,912,
		921,940,944,948,958,962,973,986,992,999,1006,1013,1020,1038,1042,1044,
		1051,1057,1062,1077,1080,1102,1105,1110,1116,1119,1125,1138,1143,1148,
		1151,1154,1166,1171,1174,1177,1180,1183,1186,1192,1197,1207,1211,1224,
		1228,1241,1245,1254,1266,1271,1278,1280,1283,1286,1290,1293,1297,1303,
		1308,1312,1320,1325,1329,1333,1336,1344,1347,1350,1369,1375,1385,1388,
		1398,1403,1405,1414,1418,1422,1429,1434,1438,1442,1453,1459,1462,1489,
		1501,1503,1563,1578,1580,1586,1589,1592,1596,1604,1607,1614,1624,1630,
		1637,1651
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
