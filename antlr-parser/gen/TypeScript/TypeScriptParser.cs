//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.10.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from /Users/max/RiderProjects/antlr-parser/antlr-parser/grammars/TypeScriptParser.g4 by ANTLR 4.10.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.10.1")]
[System.CLSCompliant(false)]
public partial class TypeScriptParser : TypeScriptParserBase {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		MultiLineComment=1, SingleLineComment=2, RegularExpressionLiteral=3, OpenBracket=4, 
		CloseBracket=5, OpenParen=6, CloseParen=7, OpenBrace=8, TemplateCloseBrace=9, 
		CloseBrace=10, SemiColon=11, Comma=12, Assign=13, QuestionMark=14, Colon=15, 
		Ellipsis=16, Dot=17, PlusPlus=18, MinusMinus=19, Plus=20, Minus=21, BitNot=22, 
		Not=23, Multiply=24, Divide=25, Modulus=26, RightShiftArithmetic=27, LeftShiftArithmetic=28, 
		RightShiftLogical=29, LessThan=30, MoreThan=31, LessThanEquals=32, GreaterThanEquals=33, 
		Equals_=34, NotEquals=35, IdentityEquals=36, IdentityNotEquals=37, BitAnd=38, 
		BitXOr=39, BitOr=40, And=41, Or=42, MultiplyAssign=43, DivideAssign=44, 
		ModulusAssign=45, PlusAssign=46, MinusAssign=47, LeftShiftArithmeticAssign=48, 
		RightShiftArithmeticAssign=49, RightShiftLogicalAssign=50, BitAndAssign=51, 
		BitXorAssign=52, BitOrAssign=53, ARROW=54, NullLiteral=55, BooleanLiteral=56, 
		DecimalLiteral=57, HexIntegerLiteral=58, OctalIntegerLiteral=59, OctalIntegerLiteral2=60, 
		BinaryIntegerLiteral=61, Break=62, Do=63, Instanceof=64, Typeof=65, Case=66, 
		Else=67, New=68, Var=69, Catch=70, Finally=71, Return=72, Void=73, Continue=74, 
		For=75, Switch=76, While=77, Debugger=78, Function_=79, This=80, With=81, 
		Default=82, If=83, Throw=84, Delete=85, In=86, Try=87, As=88, From=89, 
		ReadOnly=90, Async=91, Class=92, Enum=93, Extends=94, Super=95, Const=96, 
		Export=97, Import=98, Implements=99, Let=100, Private=101, Public=102, 
		Interface=103, Package=104, Protected=105, Static=106, Yield=107, Any=108, 
		Number=109, Boolean=110, String=111, Symbol=112, TypeAlias=113, Get=114, 
		Set=115, Constructor=116, Namespace=117, Require=118, Module=119, Declare=120, 
		Abstract=121, Is=122, At=123, Identifier=124, StringLiteral=125, BackTick=126, 
		WhiteSpaces=127, LineTerminator=128, HtmlComment=129, CDataComment=130, 
		UnexpectedCharacter=131, TemplateStringStartExpression=132, TemplateStringAtom=133;
	public const int
		RULE_initializer = 0, RULE_bindingPattern = 1, RULE_typeParameters = 2, 
		RULE_typeParameterList = 3, RULE_typeParameter = 4, RULE_constraint = 5, 
		RULE_typeArguments = 6, RULE_typeArgumentList = 7, RULE_typeArgument = 8, 
		RULE_type_ = 9, RULE_unionOrIntersectionOrPrimaryType = 10, RULE_primaryType = 11, 
		RULE_predefinedType = 12, RULE_typeReference = 13, RULE_nestedTypeGeneric = 14, 
		RULE_typeGeneric = 15, RULE_typeIncludeGeneric = 16, RULE_typeName = 17, 
		RULE_objectType = 18, RULE_typeBody = 19, RULE_typeMemberList = 20, RULE_typeMember = 21, 
		RULE_arrayType = 22, RULE_tupleType = 23, RULE_tupleElementTypes = 24, 
		RULE_functionType = 25, RULE_constructorType = 26, RULE_typeQuery = 27, 
		RULE_typeQueryExpression = 28, RULE_propertySignatur = 29, RULE_typeAnnotation = 30, 
		RULE_callSignature = 31, RULE_parameterList = 32, RULE_requiredParameterList = 33, 
		RULE_parameter = 34, RULE_optionalParameter = 35, RULE_restParameter = 36, 
		RULE_requiredParameter = 37, RULE_accessibilityModifier = 38, RULE_identifierOrPattern = 39, 
		RULE_constructSignature = 40, RULE_indexSignature = 41, RULE_methodSignature = 42, 
		RULE_typeAliasDeclaration = 43, RULE_constructorDeclaration = 44, RULE_interfaceDeclaration = 45, 
		RULE_interfaceExtendsClause = 46, RULE_classOrInterfaceTypeList = 47, 
		RULE_enumDeclaration = 48, RULE_enumBody = 49, RULE_enumMemberList = 50, 
		RULE_enumMember = 51, RULE_namespaceDeclaration = 52, RULE_namespaceName = 53, 
		RULE_importAliasDeclaration = 54, RULE_decoratorList = 55, RULE_decorator = 56, 
		RULE_decoratorMemberExpression = 57, RULE_decoratorCallExpression = 58, 
		RULE_program = 59, RULE_sourceElement = 60, RULE_statement = 61, RULE_block = 62, 
		RULE_statementList = 63, RULE_abstractDeclaration = 64, RULE_importStatement = 65, 
		RULE_fromBlock = 66, RULE_multipleImportStatement = 67, RULE_exportStatement = 68, 
		RULE_variableStatement = 69, RULE_variableDeclarationList = 70, RULE_variableDeclaration = 71, 
		RULE_emptyStatement_ = 72, RULE_expressionStatement = 73, RULE_ifStatement = 74, 
		RULE_iterationStatement = 75, RULE_varModifier = 76, RULE_continueStatement = 77, 
		RULE_breakStatement = 78, RULE_returnStatement = 79, RULE_yieldStatement = 80, 
		RULE_withStatement = 81, RULE_switchStatement = 82, RULE_caseBlock = 83, 
		RULE_caseClauses = 84, RULE_caseClause = 85, RULE_defaultClause = 86, 
		RULE_labelledStatement = 87, RULE_throwStatement = 88, RULE_tryStatement = 89, 
		RULE_catchProduction = 90, RULE_finallyProduction = 91, RULE_debuggerStatement = 92, 
		RULE_functionDeclaration = 93, RULE_classDeclaration = 94, RULE_classHeritage = 95, 
		RULE_classTail = 96, RULE_classExtendsClause = 97, RULE_implementsClause = 98, 
		RULE_classElement = 99, RULE_propertyMemberDeclaration = 100, RULE_propertyMemberBase = 101, 
		RULE_indexMemberDeclaration = 102, RULE_generatorMethod = 103, RULE_generatorFunctionDeclaration = 104, 
		RULE_generatorBlock = 105, RULE_generatorDefinition = 106, RULE_iteratorBlock = 107, 
		RULE_iteratorDefinition = 108, RULE_formalParameterList = 109, RULE_formalParameterArg = 110, 
		RULE_lastFormalParameterArg = 111, RULE_functionBody = 112, RULE_sourceElements = 113, 
		RULE_arrayLiteral = 114, RULE_elementList = 115, RULE_arrayElement = 116, 
		RULE_objectLiteral = 117, RULE_propertyAssignment = 118, RULE_getAccessor = 119, 
		RULE_setAccessor = 120, RULE_propertyName = 121, RULE_arguments = 122, 
		RULE_argumentList = 123, RULE_argument = 124, RULE_expressionSequence = 125, 
		RULE_functionExpressionDeclaration = 126, RULE_singleExpression = 127, 
		RULE_asExpression = 128, RULE_arrowFunctionDeclaration = 129, RULE_arrowFunctionParameters = 130, 
		RULE_arrowFunctionBody = 131, RULE_assignmentOperator = 132, RULE_literal = 133, 
		RULE_templateStringLiteral = 134, RULE_templateStringAtom = 135, RULE_numericLiteral = 136, 
		RULE_identifierName = 137, RULE_identifierOrKeyWord = 138, RULE_reservedWord = 139, 
		RULE_keyword = 140, RULE_getter = 141, RULE_setter = 142, RULE_eos = 143;
	public static readonly string[] ruleNames = {
		"initializer", "bindingPattern", "typeParameters", "typeParameterList", 
		"typeParameter", "constraint", "typeArguments", "typeArgumentList", "typeArgument", 
		"type_", "unionOrIntersectionOrPrimaryType", "primaryType", "predefinedType", 
		"typeReference", "nestedTypeGeneric", "typeGeneric", "typeIncludeGeneric", 
		"typeName", "objectType", "typeBody", "typeMemberList", "typeMember", 
		"arrayType", "tupleType", "tupleElementTypes", "functionType", "constructorType", 
		"typeQuery", "typeQueryExpression", "propertySignatur", "typeAnnotation", 
		"callSignature", "parameterList", "requiredParameterList", "parameter", 
		"optionalParameter", "restParameter", "requiredParameter", "accessibilityModifier", 
		"identifierOrPattern", "constructSignature", "indexSignature", "methodSignature", 
		"typeAliasDeclaration", "constructorDeclaration", "interfaceDeclaration", 
		"interfaceExtendsClause", "classOrInterfaceTypeList", "enumDeclaration", 
		"enumBody", "enumMemberList", "enumMember", "namespaceDeclaration", "namespaceName", 
		"importAliasDeclaration", "decoratorList", "decorator", "decoratorMemberExpression", 
		"decoratorCallExpression", "program", "sourceElement", "statement", "block", 
		"statementList", "abstractDeclaration", "importStatement", "fromBlock", 
		"multipleImportStatement", "exportStatement", "variableStatement", "variableDeclarationList", 
		"variableDeclaration", "emptyStatement_", "expressionStatement", "ifStatement", 
		"iterationStatement", "varModifier", "continueStatement", "breakStatement", 
		"returnStatement", "yieldStatement", "withStatement", "switchStatement", 
		"caseBlock", "caseClauses", "caseClause", "defaultClause", "labelledStatement", 
		"throwStatement", "tryStatement", "catchProduction", "finallyProduction", 
		"debuggerStatement", "functionDeclaration", "classDeclaration", "classHeritage", 
		"classTail", "classExtendsClause", "implementsClause", "classElement", 
		"propertyMemberDeclaration", "propertyMemberBase", "indexMemberDeclaration", 
		"generatorMethod", "generatorFunctionDeclaration", "generatorBlock", "generatorDefinition", 
		"iteratorBlock", "iteratorDefinition", "formalParameterList", "formalParameterArg", 
		"lastFormalParameterArg", "functionBody", "sourceElements", "arrayLiteral", 
		"elementList", "arrayElement", "objectLiteral", "propertyAssignment", 
		"getAccessor", "setAccessor", "propertyName", "arguments", "argumentList", 
		"argument", "expressionSequence", "functionExpressionDeclaration", "singleExpression", 
		"asExpression", "arrowFunctionDeclaration", "arrowFunctionParameters", 
		"arrowFunctionBody", "assignmentOperator", "literal", "templateStringLiteral", 
		"templateStringAtom", "numericLiteral", "identifierName", "identifierOrKeyWord", 
		"reservedWord", "keyword", "getter", "setter", "eos"
	};

	private static readonly string[] _LiteralNames = {
		null, null, null, null, "'['", "']'", "'('", "')'", "'{'", null, "'}'", 
		"';'", "','", "'='", "'?'", "':'", "'...'", "'.'", "'++'", "'--'", "'+'", 
		"'-'", "'~'", "'!'", "'*'", "'/'", "'%'", "'>>'", "'<<'", "'>>>'", "'<'", 
		"'>'", "'<='", "'>='", "'=='", "'!='", "'==='", "'!=='", "'&'", "'^'", 
		"'|'", "'&&'", "'||'", "'*='", "'/='", "'%='", "'+='", "'-='", "'<<='", 
		"'>>='", "'>>>='", "'&='", "'^='", "'|='", "'=>'", "'null'", null, null, 
		null, null, null, null, "'break'", "'do'", "'instanceof'", "'typeof'", 
		"'case'", "'else'", "'new'", "'var'", "'catch'", "'finally'", "'return'", 
		"'void'", "'continue'", "'for'", "'switch'", "'while'", "'debugger'", 
		"'function'", "'this'", "'with'", "'default'", "'if'", "'throw'", "'delete'", 
		"'in'", "'try'", "'as'", "'from'", "'readonly'", "'async'", "'class'", 
		"'enum'", "'extends'", "'super'", "'const'", "'export'", "'import'", "'implements'", 
		"'let'", "'private'", "'public'", "'interface'", "'package'", "'protected'", 
		"'static'", "'yield'", "'any'", "'number'", "'boolean'", "'string'", "'symbol'", 
		"'type'", "'get'", "'set'", "'constructor'", "'namespace'", "'require'", 
		"'module'", "'declare'", "'abstract'", "'is'", "'@'", null, null, null, 
		null, null, null, null, null, "'${'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "MultiLineComment", "SingleLineComment", "RegularExpressionLiteral", 
		"OpenBracket", "CloseBracket", "OpenParen", "CloseParen", "OpenBrace", 
		"TemplateCloseBrace", "CloseBrace", "SemiColon", "Comma", "Assign", "QuestionMark", 
		"Colon", "Ellipsis", "Dot", "PlusPlus", "MinusMinus", "Plus", "Minus", 
		"BitNot", "Not", "Multiply", "Divide", "Modulus", "RightShiftArithmetic", 
		"LeftShiftArithmetic", "RightShiftLogical", "LessThan", "MoreThan", "LessThanEquals", 
		"GreaterThanEquals", "Equals_", "NotEquals", "IdentityEquals", "IdentityNotEquals", 
		"BitAnd", "BitXOr", "BitOr", "And", "Or", "MultiplyAssign", "DivideAssign", 
		"ModulusAssign", "PlusAssign", "MinusAssign", "LeftShiftArithmeticAssign", 
		"RightShiftArithmeticAssign", "RightShiftLogicalAssign", "BitAndAssign", 
		"BitXorAssign", "BitOrAssign", "ARROW", "NullLiteral", "BooleanLiteral", 
		"DecimalLiteral", "HexIntegerLiteral", "OctalIntegerLiteral", "OctalIntegerLiteral2", 
		"BinaryIntegerLiteral", "Break", "Do", "Instanceof", "Typeof", "Case", 
		"Else", "New", "Var", "Catch", "Finally", "Return", "Void", "Continue", 
		"For", "Switch", "While", "Debugger", "Function_", "This", "With", "Default", 
		"If", "Throw", "Delete", "In", "Try", "As", "From", "ReadOnly", "Async", 
		"Class", "Enum", "Extends", "Super", "Const", "Export", "Import", "Implements", 
		"Let", "Private", "Public", "Interface", "Package", "Protected", "Static", 
		"Yield", "Any", "Number", "Boolean", "String", "Symbol", "TypeAlias", 
		"Get", "Set", "Constructor", "Namespace", "Require", "Module", "Declare", 
		"Abstract", "Is", "At", "Identifier", "StringLiteral", "BackTick", "WhiteSpaces", 
		"LineTerminator", "HtmlComment", "CDataComment", "UnexpectedCharacter", 
		"TemplateStringStartExpression", "TemplateStringAtom"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "TypeScriptParser.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static TypeScriptParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public TypeScriptParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public TypeScriptParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class InitializerContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Assign() { return GetToken(TypeScriptParser.Assign, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SingleExpressionContext singleExpression() {
			return GetRuleContext<SingleExpressionContext>(0);
		}
		public InitializerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_initializer; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.EnterInitializer(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.ExitInitializer(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypeScriptParserVisitor<TResult> typedVisitor = visitor as ITypeScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInitializer(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InitializerContext initializer() {
		InitializerContext _localctx = new InitializerContext(Context, State);
		EnterRule(_localctx, 0, RULE_initializer);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 288;
			Match(Assign);
			State = 289;
			singleExpression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BindingPatternContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ArrayLiteralContext arrayLiteral() {
			return GetRuleContext<ArrayLiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ObjectLiteralContext objectLiteral() {
			return GetRuleContext<ObjectLiteralContext>(0);
		}
		public BindingPatternContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_bindingPattern; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.EnterBindingPattern(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.ExitBindingPattern(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypeScriptParserVisitor<TResult> typedVisitor = visitor as ITypeScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBindingPattern(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BindingPatternContext bindingPattern() {
		BindingPatternContext _localctx = new BindingPatternContext(Context, State);
		EnterRule(_localctx, 2, RULE_bindingPattern);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 293;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case OpenBracket:
				{
				State = 291;
				arrayLiteral();
				}
				break;
			case OpenBrace:
				{
				State = 292;
				objectLiteral();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeParametersContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LessThan() { return GetToken(TypeScriptParser.LessThan, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MoreThan() { return GetToken(TypeScriptParser.MoreThan, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeParameterListContext typeParameterList() {
			return GetRuleContext<TypeParameterListContext>(0);
		}
		public TypeParametersContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeParameters; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.EnterTypeParameters(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.ExitTypeParameters(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypeScriptParserVisitor<TResult> typedVisitor = visitor as ITypeScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeParameters(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeParametersContext typeParameters() {
		TypeParametersContext _localctx = new TypeParametersContext(Context, State);
		EnterRule(_localctx, 4, RULE_typeParameters);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 295;
			Match(LessThan);
			State = 297;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LessThan || _la==Identifier) {
				{
				State = 296;
				typeParameterList();
				}
			}

			State = 299;
			Match(MoreThan);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeParameterListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypeParameterContext[] typeParameter() {
			return GetRuleContexts<TypeParameterContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeParameterContext typeParameter(int i) {
			return GetRuleContext<TypeParameterContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Comma() { return GetTokens(TypeScriptParser.Comma); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comma(int i) {
			return GetToken(TypeScriptParser.Comma, i);
		}
		public TypeParameterListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeParameterList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.EnterTypeParameterList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.ExitTypeParameterList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypeScriptParserVisitor<TResult> typedVisitor = visitor as ITypeScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeParameterList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeParameterListContext typeParameterList() {
		TypeParameterListContext _localctx = new TypeParameterListContext(Context, State);
		EnterRule(_localctx, 6, RULE_typeParameterList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 301;
			typeParameter();
			State = 306;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==Comma) {
				{
				{
				State = 302;
				Match(Comma);
				State = 303;
				typeParameter();
				}
				}
				State = 308;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeParameterContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(TypeScriptParser.Identifier, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ConstraintContext constraint() {
			return GetRuleContext<ConstraintContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeParametersContext typeParameters() {
			return GetRuleContext<TypeParametersContext>(0);
		}
		public TypeParameterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeParameter; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.EnterTypeParameter(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.ExitTypeParameter(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypeScriptParserVisitor<TResult> typedVisitor = visitor as ITypeScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeParameter(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeParameterContext typeParameter() {
		TypeParameterContext _localctx = new TypeParameterContext(Context, State);
		EnterRule(_localctx, 8, RULE_typeParameter);
		int _la;
		try {
			State = 314;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case Identifier:
				EnterOuterAlt(_localctx, 1);
				{
				State = 309;
				Match(Identifier);
				State = 311;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==Extends) {
					{
					State = 310;
					constraint();
					}
				}

				}
				break;
			case LessThan:
				EnterOuterAlt(_localctx, 2);
				{
				State = 313;
				typeParameters();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConstraintContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Extends() { return GetToken(TypeScriptParser.Extends, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Type_Context type_() {
			return GetRuleContext<Type_Context>(0);
		}
		public ConstraintContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constraint; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.EnterConstraint(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.ExitConstraint(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypeScriptParserVisitor<TResult> typedVisitor = visitor as ITypeScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConstraint(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConstraintContext constraint() {
		ConstraintContext _localctx = new ConstraintContext(Context, State);
		EnterRule(_localctx, 10, RULE_constraint);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 316;
			Match(Extends);
			State = 317;
			type_();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeArgumentsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LessThan() { return GetToken(TypeScriptParser.LessThan, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MoreThan() { return GetToken(TypeScriptParser.MoreThan, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeArgumentListContext typeArgumentList() {
			return GetRuleContext<TypeArgumentListContext>(0);
		}
		public TypeArgumentsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeArguments; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.EnterTypeArguments(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.ExitTypeArguments(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypeScriptParserVisitor<TResult> typedVisitor = visitor as ITypeScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeArguments(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeArgumentsContext typeArguments() {
		TypeArgumentsContext _localctx = new TypeArgumentsContext(Context, State);
		EnterRule(_localctx, 12, RULE_typeArguments);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 319;
			Match(LessThan);
			State = 321;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << OpenBracket) | (1L << OpenParen) | (1L << OpenBrace) | (1L << LessThan))) != 0) || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & ((1L << (Typeof - 65)) | (1L << (New - 65)) | (1L << (Void - 65)) | (1L << (This - 65)) | (1L << (Any - 65)) | (1L << (Number - 65)) | (1L << (Boolean - 65)) | (1L << (String - 65)) | (1L << (Symbol - 65)) | (1L << (Identifier - 65)) | (1L << (StringLiteral - 65)))) != 0)) {
				{
				State = 320;
				typeArgumentList();
				}
			}

			State = 323;
			Match(MoreThan);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeArgumentListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypeArgumentContext[] typeArgument() {
			return GetRuleContexts<TypeArgumentContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeArgumentContext typeArgument(int i) {
			return GetRuleContext<TypeArgumentContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Comma() { return GetTokens(TypeScriptParser.Comma); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comma(int i) {
			return GetToken(TypeScriptParser.Comma, i);
		}
		public TypeArgumentListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeArgumentList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.EnterTypeArgumentList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.ExitTypeArgumentList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypeScriptParserVisitor<TResult> typedVisitor = visitor as ITypeScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeArgumentList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeArgumentListContext typeArgumentList() {
		TypeArgumentListContext _localctx = new TypeArgumentListContext(Context, State);
		EnterRule(_localctx, 14, RULE_typeArgumentList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 325;
			typeArgument();
			State = 330;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==Comma) {
				{
				{
				State = 326;
				Match(Comma);
				State = 327;
				typeArgument();
				}
				}
				State = 332;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeArgumentContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Type_Context type_() {
			return GetRuleContext<Type_Context>(0);
		}
		public TypeArgumentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeArgument; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.EnterTypeArgument(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.ExitTypeArgument(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypeScriptParserVisitor<TResult> typedVisitor = visitor as ITypeScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeArgument(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeArgumentContext typeArgument() {
		TypeArgumentContext _localctx = new TypeArgumentContext(Context, State);
		EnterRule(_localctx, 16, RULE_typeArgument);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 333;
			type_();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Type_Context : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public UnionOrIntersectionOrPrimaryTypeContext unionOrIntersectionOrPrimaryType() {
			return GetRuleContext<UnionOrIntersectionOrPrimaryTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionTypeContext functionType() {
			return GetRuleContext<FunctionTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ConstructorTypeContext constructorType() {
			return GetRuleContext<ConstructorTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeGenericContext typeGeneric() {
			return GetRuleContext<TypeGenericContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode StringLiteral() { return GetToken(TypeScriptParser.StringLiteral, 0); }
		public Type_Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type_; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.EnterType_(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.ExitType_(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypeScriptParserVisitor<TResult> typedVisitor = visitor as ITypeScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitType_(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Type_Context type_() {
		Type_Context _localctx = new Type_Context(Context, State);
		EnterRule(_localctx, 18, RULE_type_);
		try {
			State = 340;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,7,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 335;
				unionOrIntersectionOrPrimaryType(0);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 336;
				functionType();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 337;
				constructorType();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 338;
				typeGeneric();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 339;
				Match(StringLiteral);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UnionOrIntersectionOrPrimaryTypeContext : ParserRuleContext {
		public UnionOrIntersectionOrPrimaryTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unionOrIntersectionOrPrimaryType; } }
	 
		public UnionOrIntersectionOrPrimaryTypeContext() { }
		public virtual void CopyFrom(UnionOrIntersectionOrPrimaryTypeContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class IntersectionContext : UnionOrIntersectionOrPrimaryTypeContext {
		[System.Diagnostics.DebuggerNonUserCode] public UnionOrIntersectionOrPrimaryTypeContext[] unionOrIntersectionOrPrimaryType() {
			return GetRuleContexts<UnionOrIntersectionOrPrimaryTypeContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public UnionOrIntersectionOrPrimaryTypeContext unionOrIntersectionOrPrimaryType(int i) {
			return GetRuleContext<UnionOrIntersectionOrPrimaryTypeContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BitAnd() { return GetToken(TypeScriptParser.BitAnd, 0); }
		public IntersectionContext(UnionOrIntersectionOrPrimaryTypeContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.EnterIntersection(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.ExitIntersection(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypeScriptParserVisitor<TResult> typedVisitor = visitor as ITypeScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIntersection(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class PrimaryContext : UnionOrIntersectionOrPrimaryTypeContext {
		[System.Diagnostics.DebuggerNonUserCode] public PrimaryTypeContext primaryType() {
			return GetRuleContext<PrimaryTypeContext>(0);
		}
		public PrimaryContext(UnionOrIntersectionOrPrimaryTypeContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.EnterPrimary(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.ExitPrimary(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypeScriptParserVisitor<TResult> typedVisitor = visitor as ITypeScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrimary(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class UnionContext : UnionOrIntersectionOrPrimaryTypeContext {
		[System.Diagnostics.DebuggerNonUserCode] public UnionOrIntersectionOrPrimaryTypeContext[] unionOrIntersectionOrPrimaryType() {
			return GetRuleContexts<UnionOrIntersectionOrPrimaryTypeContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public UnionOrIntersectionOrPrimaryTypeContext unionOrIntersectionOrPrimaryType(int i) {
			return GetRuleContext<UnionOrIntersectionOrPrimaryTypeContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BitOr() { return GetToken(TypeScriptParser.BitOr, 0); }
		public UnionContext(UnionOrIntersectionOrPrimaryTypeContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.EnterUnion(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.ExitUnion(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypeScriptParserVisitor<TResult> typedVisitor = visitor as ITypeScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnion(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UnionOrIntersectionOrPrimaryTypeContext unionOrIntersectionOrPrimaryType() {
		return unionOrIntersectionOrPrimaryType(0);
	}

	private UnionOrIntersectionOrPrimaryTypeContext unionOrIntersectionOrPrimaryType(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		UnionOrIntersectionOrPrimaryTypeContext _localctx = new UnionOrIntersectionOrPrimaryTypeContext(Context, _parentState);
		UnionOrIntersectionOrPrimaryTypeContext _prevctx = _localctx;
		int _startState = 20;
		EnterRecursionRule(_localctx, 20, RULE_unionOrIntersectionOrPrimaryType, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			_localctx = new PrimaryContext(_localctx);
			Context = _localctx;
			_prevctx = _localctx;

			State = 343;
			primaryType(0);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 353;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,9,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 351;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,8,Context) ) {
					case 1:
						{
						_localctx = new UnionContext(new UnionOrIntersectionOrPrimaryTypeContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_unionOrIntersectionOrPrimaryType);
						State = 345;
						if (!(Precpred(Context, 3))) throw new FailedPredicateException(this, "Precpred(Context, 3)");
						State = 346;
						Match(BitOr);
						State = 347;
						unionOrIntersectionOrPrimaryType(4);
						}
						break;
					case 2:
						{
						_localctx = new IntersectionContext(new UnionOrIntersectionOrPrimaryTypeContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_unionOrIntersectionOrPrimaryType);
						State = 348;
						if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
						State = 349;
						Match(BitAnd);
						State = 350;
						unionOrIntersectionOrPrimaryType(3);
						}
						break;
					}
					} 
				}
				State = 355;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,9,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class PrimaryTypeContext : ParserRuleContext {
		public PrimaryTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_primaryType; } }
	 
		public PrimaryTypeContext() { }
		public virtual void CopyFrom(PrimaryTypeContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class RedefinitionOfTypeContext : PrimaryTypeContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypeReferenceContext typeReference() {
			return GetRuleContext<TypeReferenceContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Is() { return GetToken(TypeScriptParser.Is, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public PrimaryTypeContext primaryType() {
			return GetRuleContext<PrimaryTypeContext>(0);
		}
		public RedefinitionOfTypeContext(PrimaryTypeContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.EnterRedefinitionOfType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.ExitRedefinitionOfType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypeScriptParserVisitor<TResult> typedVisitor = visitor as ITypeScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRedefinitionOfType(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class PredefinedPrimTypeContext : PrimaryTypeContext {
		[System.Diagnostics.DebuggerNonUserCode] public PredefinedTypeContext predefinedType() {
			return GetRuleContext<PredefinedTypeContext>(0);
		}
		public PredefinedPrimTypeContext(PrimaryTypeContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.EnterPredefinedPrimType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.ExitPredefinedPrimType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypeScriptParserVisitor<TResult> typedVisitor = visitor as ITypeScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPredefinedPrimType(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ArrayPrimTypeContext : PrimaryTypeContext {
		[System.Diagnostics.DebuggerNonUserCode] public PrimaryTypeContext primaryType() {
			return GetRuleContext<PrimaryTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OpenBracket() { return GetToken(TypeScriptParser.OpenBracket, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CloseBracket() { return GetToken(TypeScriptParser.CloseBracket, 0); }
		public ArrayPrimTypeContext(PrimaryTypeContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.EnterArrayPrimType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.ExitArrayPrimType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypeScriptParserVisitor<TResult> typedVisitor = visitor as ITypeScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArrayPrimType(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ParenthesizedPrimTypeContext : PrimaryTypeContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OpenParen() { return GetToken(TypeScriptParser.OpenParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Type_Context type_() {
			return GetRuleContext<Type_Context>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CloseParen() { return GetToken(TypeScriptParser.CloseParen, 0); }
		public ParenthesizedPrimTypeContext(PrimaryTypeContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.EnterParenthesizedPrimType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.ExitParenthesizedPrimType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypeScriptParserVisitor<TResult> typedVisitor = visitor as ITypeScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParenthesizedPrimType(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ThisPrimTypeContext : PrimaryTypeContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode This() { return GetToken(TypeScriptParser.This, 0); }
		public ThisPrimTypeContext(PrimaryTypeContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.EnterThisPrimType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.ExitThisPrimType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypeScriptParserVisitor<TResult> typedVisitor = visitor as ITypeScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitThisPrimType(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class TuplePrimTypeContext : PrimaryTypeContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OpenBracket() { return GetToken(TypeScriptParser.OpenBracket, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TupleElementTypesContext tupleElementTypes() {
			return GetRuleContext<TupleElementTypesContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CloseBracket() { return GetToken(TypeScriptParser.CloseBracket, 0); }
		public TuplePrimTypeContext(PrimaryTypeContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.EnterTuplePrimType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.ExitTuplePrimType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypeScriptParserVisitor<TResult> typedVisitor = visitor as ITypeScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTuplePrimType(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ObjectPrimTypeContext : PrimaryTypeContext {
		[System.Diagnostics.DebuggerNonUserCode] public ObjectTypeContext objectType() {
			return GetRuleContext<ObjectTypeContext>(0);
		}
		public ObjectPrimTypeContext(PrimaryTypeContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.EnterObjectPrimType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.ExitObjectPrimType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypeScriptParserVisitor<TResult> typedVisitor = visitor as ITypeScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitObjectPrimType(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ReferencePrimTypeContext : PrimaryTypeContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypeReferenceContext typeReference() {
			return GetRuleContext<TypeReferenceContext>(0);
		}
		public ReferencePrimTypeContext(PrimaryTypeContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.EnterReferencePrimType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.ExitReferencePrimType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypeScriptParserVisitor<TResult> typedVisitor = visitor as ITypeScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReferencePrimType(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class QueryPrimTypeContext : PrimaryTypeContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypeQueryContext typeQuery() {
			return GetRuleContext<TypeQueryContext>(0);
		}
		public QueryPrimTypeContext(PrimaryTypeContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.EnterQueryPrimType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.ExitQueryPrimType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypeScriptParserVisitor<TResult> typedVisitor = visitor as ITypeScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitQueryPrimType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PrimaryTypeContext primaryType() {
		return primaryType(0);
	}

	private PrimaryTypeContext primaryType(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		PrimaryTypeContext _localctx = new PrimaryTypeContext(Context, _parentState);
		PrimaryTypeContext _prevctx = _localctx;
		int _startState = 22;
		EnterRecursionRule(_localctx, 22, RULE_primaryType, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 374;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,10,Context) ) {
			case 1:
				{
				_localctx = new ParenthesizedPrimTypeContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;

				State = 357;
				Match(OpenParen);
				State = 358;
				type_();
				State = 359;
				Match(CloseParen);
				}
				break;
			case 2:
				{
				_localctx = new PredefinedPrimTypeContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 361;
				predefinedType();
				}
				break;
			case 3:
				{
				_localctx = new ReferencePrimTypeContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 362;
				typeReference();
				}
				break;
			case 4:
				{
				_localctx = new ObjectPrimTypeContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 363;
				objectType();
				}
				break;
			case 5:
				{
				_localctx = new TuplePrimTypeContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 364;
				Match(OpenBracket);
				State = 365;
				tupleElementTypes();
				State = 366;
				Match(CloseBracket);
				}
				break;
			case 6:
				{
				_localctx = new QueryPrimTypeContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 368;
				typeQuery();
				}
				break;
			case 7:
				{
				_localctx = new ThisPrimTypeContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 369;
				Match(This);
				}
				break;
			case 8:
				{
				_localctx = new RedefinitionOfTypeContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 370;
				typeReference();
				State = 371;
				Match(Is);
				State = 372;
				primaryType(1);
				}
				break;
			}
			Context.Stop = TokenStream.LT(-1);
			State = 382;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,11,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new ArrayPrimTypeContext(new PrimaryTypeContext(_parentctx, _parentState));
					PushNewRecursionContext(_localctx, _startState, RULE_primaryType);
					State = 376;
					if (!(Precpred(Context, 5))) throw new FailedPredicateException(this, "Precpred(Context, 5)");
					State = 377;
					if (!(notLineTerminator())) throw new FailedPredicateException(this, "notLineTerminator()");
					State = 378;
					Match(OpenBracket);
					State = 379;
					Match(CloseBracket);
					}
					} 
				}
				State = 384;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,11,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class PredefinedTypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Any() { return GetToken(TypeScriptParser.Any, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Number() { return GetToken(TypeScriptParser.Number, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Boolean() { return GetToken(TypeScriptParser.Boolean, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode String() { return GetToken(TypeScriptParser.String, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Symbol() { return GetToken(TypeScriptParser.Symbol, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Void() { return GetToken(TypeScriptParser.Void, 0); }
		public PredefinedTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_predefinedType; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.EnterPredefinedType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.ExitPredefinedType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypeScriptParserVisitor<TResult> typedVisitor = visitor as ITypeScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPredefinedType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PredefinedTypeContext predefinedType() {
		PredefinedTypeContext _localctx = new PredefinedTypeContext(Context, State);
		EnterRule(_localctx, 24, RULE_predefinedType);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 385;
			_la = TokenStream.LA(1);
			if ( !(((((_la - 73)) & ~0x3f) == 0 && ((1L << (_la - 73)) & ((1L << (Void - 73)) | (1L << (Any - 73)) | (1L << (Number - 73)) | (1L << (Boolean - 73)) | (1L << (String - 73)) | (1L << (Symbol - 73)))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeReferenceContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypeNameContext typeName() {
			return GetRuleContext<TypeNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NestedTypeGenericContext nestedTypeGeneric() {
			return GetRuleContext<NestedTypeGenericContext>(0);
		}
		public TypeReferenceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeReference; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.EnterTypeReference(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.ExitTypeReference(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypeScriptParserVisitor<TResult> typedVisitor = visitor as ITypeScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeReference(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeReferenceContext typeReference() {
		TypeReferenceContext _localctx = new TypeReferenceContext(Context, State);
		EnterRule(_localctx, 26, RULE_typeReference);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 387;
			typeName();
			State = 389;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,12,Context) ) {
			case 1:
				{
				State = 388;
				nestedTypeGeneric();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NestedTypeGenericContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypeIncludeGenericContext typeIncludeGeneric() {
			return GetRuleContext<TypeIncludeGenericContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeGenericContext typeGeneric() {
			return GetRuleContext<TypeGenericContext>(0);
		}
		public NestedTypeGenericContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_nestedTypeGeneric; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.EnterNestedTypeGeneric(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.ExitNestedTypeGeneric(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypeScriptParserVisitor<TResult> typedVisitor = visitor as ITypeScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNestedTypeGeneric(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NestedTypeGenericContext nestedTypeGeneric() {
		NestedTypeGenericContext _localctx = new NestedTypeGenericContext(Context, State);
		EnterRule(_localctx, 28, RULE_nestedTypeGeneric);
		try {
			State = 393;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,13,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 391;
				typeIncludeGeneric();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 392;
				typeGeneric();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeGenericContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LessThan() { return GetToken(TypeScriptParser.LessThan, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeArgumentListContext typeArgumentList() {
			return GetRuleContext<TypeArgumentListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MoreThan() { return GetToken(TypeScriptParser.MoreThan, 0); }
		public TypeGenericContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeGeneric; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.EnterTypeGeneric(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.ExitTypeGeneric(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypeScriptParserVisitor<TResult> typedVisitor = visitor as ITypeScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeGeneric(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeGenericContext typeGeneric() {
		TypeGenericContext _localctx = new TypeGenericContext(Context, State);
		EnterRule(_localctx, 30, RULE_typeGeneric);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 395;
			Match(LessThan);
			State = 396;
			typeArgumentList();
			State = 397;
			Match(MoreThan);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeIncludeGenericContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] LessThan() { return GetTokens(TypeScriptParser.LessThan); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LessThan(int i) {
			return GetToken(TypeScriptParser.LessThan, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeArgumentListContext[] typeArgumentList() {
			return GetRuleContexts<TypeArgumentListContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeArgumentListContext typeArgumentList(int i) {
			return GetRuleContext<TypeArgumentListContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] MoreThan() { return GetTokens(TypeScriptParser.MoreThan); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MoreThan(int i) {
			return GetToken(TypeScriptParser.MoreThan, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BindingPatternContext bindingPattern() {
			return GetRuleContext<BindingPatternContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RightShiftArithmetic() { return GetToken(TypeScriptParser.RightShiftArithmetic, 0); }
		public TypeIncludeGenericContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeIncludeGeneric; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.EnterTypeIncludeGeneric(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.ExitTypeIncludeGeneric(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypeScriptParserVisitor<TResult> typedVisitor = visitor as ITypeScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeIncludeGeneric(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeIncludeGenericContext typeIncludeGeneric() {
		TypeIncludeGenericContext _localctx = new TypeIncludeGenericContext(Context, State);
		EnterRule(_localctx, 32, RULE_typeIncludeGeneric);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 399;
			Match(LessThan);
			State = 400;
			typeArgumentList();
			State = 401;
			Match(LessThan);
			State = 402;
			typeArgumentList();
			State = 408;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case MoreThan:
				{
				State = 403;
				Match(MoreThan);
				State = 404;
				bindingPattern();
				State = 405;
				Match(MoreThan);
				}
				break;
			case RightShiftArithmetic:
				{
				State = 407;
				Match(RightShiftArithmetic);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(TypeScriptParser.Identifier, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NamespaceNameContext namespaceName() {
			return GetRuleContext<NamespaceNameContext>(0);
		}
		public TypeNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeName; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.EnterTypeName(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.ExitTypeName(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypeScriptParserVisitor<TResult> typedVisitor = visitor as ITypeScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeNameContext typeName() {
		TypeNameContext _localctx = new TypeNameContext(Context, State);
		EnterRule(_localctx, 34, RULE_typeName);
		try {
			State = 412;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,15,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 410;
				Match(Identifier);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 411;
				namespaceName();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ObjectTypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OpenBrace() { return GetToken(TypeScriptParser.OpenBrace, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CloseBrace() { return GetToken(TypeScriptParser.CloseBrace, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeBodyContext typeBody() {
			return GetRuleContext<TypeBodyContext>(0);
		}
		public ObjectTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_objectType; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.EnterObjectType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.ExitObjectType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypeScriptParserVisitor<TResult> typedVisitor = visitor as ITypeScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitObjectType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ObjectTypeContext objectType() {
		ObjectTypeContext _localctx = new ObjectTypeContext(Context, State);
		EnterRule(_localctx, 36, RULE_objectType);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 414;
			Match(OpenBrace);
			State = 416;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << OpenBracket) | (1L << OpenParen) | (1L << LessThan) | (1L << NullLiteral) | (1L << BooleanLiteral) | (1L << DecimalLiteral) | (1L << HexIntegerLiteral) | (1L << OctalIntegerLiteral) | (1L << OctalIntegerLiteral2) | (1L << BinaryIntegerLiteral) | (1L << Break) | (1L << Do))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (Instanceof - 64)) | (1L << (Typeof - 64)) | (1L << (Case - 64)) | (1L << (Else - 64)) | (1L << (New - 64)) | (1L << (Var - 64)) | (1L << (Catch - 64)) | (1L << (Finally - 64)) | (1L << (Return - 64)) | (1L << (Void - 64)) | (1L << (Continue - 64)) | (1L << (For - 64)) | (1L << (Switch - 64)) | (1L << (While - 64)) | (1L << (Debugger - 64)) | (1L << (Function_ - 64)) | (1L << (This - 64)) | (1L << (With - 64)) | (1L << (Default - 64)) | (1L << (If - 64)) | (1L << (Throw - 64)) | (1L << (Delete - 64)) | (1L << (In - 64)) | (1L << (Try - 64)) | (1L << (From - 64)) | (1L << (ReadOnly - 64)) | (1L << (Async - 64)) | (1L << (Class - 64)) | (1L << (Enum - 64)) | (1L << (Extends - 64)) | (1L << (Super - 64)) | (1L << (Const - 64)) | (1L << (Export - 64)) | (1L << (Import - 64)) | (1L << (Implements - 64)) | (1L << (Let - 64)) | (1L << (Private - 64)) | (1L << (Public - 64)) | (1L << (Interface - 64)) | (1L << (Package - 64)) | (1L << (Protected - 64)) | (1L << (Static - 64)) | (1L << (Yield - 64)) | (1L << (String - 64)) | (1L << (TypeAlias - 64)) | (1L << (Get - 64)) | (1L << (Set - 64)) | (1L << (Require - 64)) | (1L << (Identifier - 64)) | (1L << (StringLiteral - 64)))) != 0)) {
				{
				State = 415;
				typeBody();
				}
			}

			State = 418;
			Match(CloseBrace);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeBodyContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypeMemberListContext typeMemberList() {
			return GetRuleContext<TypeMemberListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SemiColon() { return GetToken(TypeScriptParser.SemiColon, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comma() { return GetToken(TypeScriptParser.Comma, 0); }
		public TypeBodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeBody; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.EnterTypeBody(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.ExitTypeBody(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypeScriptParserVisitor<TResult> typedVisitor = visitor as ITypeScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeBody(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeBodyContext typeBody() {
		TypeBodyContext _localctx = new TypeBodyContext(Context, State);
		EnterRule(_localctx, 38, RULE_typeBody);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 420;
			typeMemberList();
			State = 422;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==SemiColon || _la==Comma) {
				{
				State = 421;
				_la = TokenStream.LA(1);
				if ( !(_la==SemiColon || _la==Comma) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeMemberListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypeMemberContext[] typeMember() {
			return GetRuleContexts<TypeMemberContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeMemberContext typeMember(int i) {
			return GetRuleContext<TypeMemberContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SemiColon() { return GetTokens(TypeScriptParser.SemiColon); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SemiColon(int i) {
			return GetToken(TypeScriptParser.SemiColon, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Comma() { return GetTokens(TypeScriptParser.Comma); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comma(int i) {
			return GetToken(TypeScriptParser.Comma, i);
		}
		public TypeMemberListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeMemberList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.EnterTypeMemberList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.ExitTypeMemberList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypeScriptParserVisitor<TResult> typedVisitor = visitor as ITypeScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeMemberList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeMemberListContext typeMemberList() {
		TypeMemberListContext _localctx = new TypeMemberListContext(Context, State);
		EnterRule(_localctx, 40, RULE_typeMemberList);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 424;
			typeMember();
			State = 429;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,18,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 425;
					_la = TokenStream.LA(1);
					if ( !(_la==SemiColon || _la==Comma) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					State = 426;
					typeMember();
					}
					} 
				}
				State = 431;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,18,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeMemberContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public PropertySignaturContext propertySignatur() {
			return GetRuleContext<PropertySignaturContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CallSignatureContext callSignature() {
			return GetRuleContext<CallSignatureContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ConstructSignatureContext constructSignature() {
			return GetRuleContext<ConstructSignatureContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IndexSignatureContext indexSignature() {
			return GetRuleContext<IndexSignatureContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MethodSignatureContext methodSignature() {
			return GetRuleContext<MethodSignatureContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ARROW() { return GetToken(TypeScriptParser.ARROW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Type_Context type_() {
			return GetRuleContext<Type_Context>(0);
		}
		public TypeMemberContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeMember; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.EnterTypeMember(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.ExitTypeMember(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypeScriptParserVisitor<TResult> typedVisitor = visitor as ITypeScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeMember(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeMemberContext typeMember() {
		TypeMemberContext _localctx = new TypeMemberContext(Context, State);
		EnterRule(_localctx, 42, RULE_typeMember);
		int _la;
		try {
			State = 441;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,20,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 432;
				propertySignatur();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 433;
				callSignature();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 434;
				constructSignature();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 435;
				indexSignature();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 436;
				methodSignature();
				State = 439;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==ARROW) {
					{
					State = 437;
					Match(ARROW);
					State = 438;
					type_();
					}
				}

				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArrayTypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public PrimaryTypeContext primaryType() {
			return GetRuleContext<PrimaryTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OpenBracket() { return GetToken(TypeScriptParser.OpenBracket, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CloseBracket() { return GetToken(TypeScriptParser.CloseBracket, 0); }
		public ArrayTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arrayType; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.EnterArrayType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.ExitArrayType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypeScriptParserVisitor<TResult> typedVisitor = visitor as ITypeScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArrayType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArrayTypeContext arrayType() {
		ArrayTypeContext _localctx = new ArrayTypeContext(Context, State);
		EnterRule(_localctx, 44, RULE_arrayType);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 443;
			primaryType(0);
			State = 444;
			if (!(notLineTerminator())) throw new FailedPredicateException(this, "notLineTerminator()");
			State = 445;
			Match(OpenBracket);
			State = 446;
			Match(CloseBracket);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TupleTypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OpenBracket() { return GetToken(TypeScriptParser.OpenBracket, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TupleElementTypesContext tupleElementTypes() {
			return GetRuleContext<TupleElementTypesContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CloseBracket() { return GetToken(TypeScriptParser.CloseBracket, 0); }
		public TupleTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tupleType; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.EnterTupleType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.ExitTupleType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypeScriptParserVisitor<TResult> typedVisitor = visitor as ITypeScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTupleType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TupleTypeContext tupleType() {
		TupleTypeContext _localctx = new TupleTypeContext(Context, State);
		EnterRule(_localctx, 46, RULE_tupleType);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 448;
			Match(OpenBracket);
			State = 449;
			tupleElementTypes();
			State = 450;
			Match(CloseBracket);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TupleElementTypesContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Type_Context[] type_() {
			return GetRuleContexts<Type_Context>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Type_Context type_(int i) {
			return GetRuleContext<Type_Context>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Comma() { return GetTokens(TypeScriptParser.Comma); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comma(int i) {
			return GetToken(TypeScriptParser.Comma, i);
		}
		public TupleElementTypesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tupleElementTypes; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.EnterTupleElementTypes(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.ExitTupleElementTypes(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypeScriptParserVisitor<TResult> typedVisitor = visitor as ITypeScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTupleElementTypes(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TupleElementTypesContext tupleElementTypes() {
		TupleElementTypesContext _localctx = new TupleElementTypesContext(Context, State);
		EnterRule(_localctx, 48, RULE_tupleElementTypes);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 452;
			type_();
			State = 457;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==Comma) {
				{
				{
				State = 453;
				Match(Comma);
				State = 454;
				type_();
				}
				}
				State = 459;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionTypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OpenParen() { return GetToken(TypeScriptParser.OpenParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CloseParen() { return GetToken(TypeScriptParser.CloseParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ARROW() { return GetToken(TypeScriptParser.ARROW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Type_Context type_() {
			return GetRuleContext<Type_Context>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeParametersContext typeParameters() {
			return GetRuleContext<TypeParametersContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ParameterListContext parameterList() {
			return GetRuleContext<ParameterListContext>(0);
		}
		public FunctionTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionType; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.EnterFunctionType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.ExitFunctionType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypeScriptParserVisitor<TResult> typedVisitor = visitor as ITypeScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionTypeContext functionType() {
		FunctionTypeContext _localctx = new FunctionTypeContext(Context, State);
		EnterRule(_localctx, 50, RULE_functionType);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 461;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LessThan) {
				{
				State = 460;
				typeParameters();
				}
			}

			State = 463;
			Match(OpenParen);
			State = 465;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << OpenBracket) | (1L << OpenBrace) | (1L << Ellipsis) | (1L << NullLiteral) | (1L << BooleanLiteral) | (1L << Break) | (1L << Do))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (Instanceof - 64)) | (1L << (Typeof - 64)) | (1L << (Case - 64)) | (1L << (Else - 64)) | (1L << (New - 64)) | (1L << (Var - 64)) | (1L << (Catch - 64)) | (1L << (Finally - 64)) | (1L << (Return - 64)) | (1L << (Void - 64)) | (1L << (Continue - 64)) | (1L << (For - 64)) | (1L << (Switch - 64)) | (1L << (While - 64)) | (1L << (Debugger - 64)) | (1L << (Function_ - 64)) | (1L << (This - 64)) | (1L << (With - 64)) | (1L << (Default - 64)) | (1L << (If - 64)) | (1L << (Throw - 64)) | (1L << (Delete - 64)) | (1L << (In - 64)) | (1L << (Try - 64)) | (1L << (From - 64)) | (1L << (ReadOnly - 64)) | (1L << (Async - 64)) | (1L << (Class - 64)) | (1L << (Enum - 64)) | (1L << (Extends - 64)) | (1L << (Super - 64)) | (1L << (Const - 64)) | (1L << (Export - 64)) | (1L << (Import - 64)) | (1L << (Implements - 64)) | (1L << (Let - 64)) | (1L << (Private - 64)) | (1L << (Public - 64)) | (1L << (Interface - 64)) | (1L << (Package - 64)) | (1L << (Protected - 64)) | (1L << (Static - 64)) | (1L << (Yield - 64)) | (1L << (String - 64)) | (1L << (TypeAlias - 64)) | (1L << (Get - 64)) | (1L << (Set - 64)) | (1L << (Require - 64)) | (1L << (At - 64)) | (1L << (Identifier - 64)))) != 0)) {
				{
				State = 464;
				parameterList();
				}
			}

			State = 467;
			Match(CloseParen);
			State = 468;
			Match(ARROW);
			State = 469;
			type_();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConstructorTypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode New() { return GetToken(TypeScriptParser.New, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OpenParen() { return GetToken(TypeScriptParser.OpenParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CloseParen() { return GetToken(TypeScriptParser.CloseParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ARROW() { return GetToken(TypeScriptParser.ARROW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Type_Context type_() {
			return GetRuleContext<Type_Context>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeParametersContext typeParameters() {
			return GetRuleContext<TypeParametersContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ParameterListContext parameterList() {
			return GetRuleContext<ParameterListContext>(0);
		}
		public ConstructorTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constructorType; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.EnterConstructorType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.ExitConstructorType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypeScriptParserVisitor<TResult> typedVisitor = visitor as ITypeScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConstructorType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConstructorTypeContext constructorType() {
		ConstructorTypeContext _localctx = new ConstructorTypeContext(Context, State);
		EnterRule(_localctx, 52, RULE_constructorType);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 471;
			Match(New);
			State = 473;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LessThan) {
				{
				State = 472;
				typeParameters();
				}
			}

			State = 475;
			Match(OpenParen);
			State = 477;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << OpenBracket) | (1L << OpenBrace) | (1L << Ellipsis) | (1L << NullLiteral) | (1L << BooleanLiteral) | (1L << Break) | (1L << Do))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (Instanceof - 64)) | (1L << (Typeof - 64)) | (1L << (Case - 64)) | (1L << (Else - 64)) | (1L << (New - 64)) | (1L << (Var - 64)) | (1L << (Catch - 64)) | (1L << (Finally - 64)) | (1L << (Return - 64)) | (1L << (Void - 64)) | (1L << (Continue - 64)) | (1L << (For - 64)) | (1L << (Switch - 64)) | (1L << (While - 64)) | (1L << (Debugger - 64)) | (1L << (Function_ - 64)) | (1L << (This - 64)) | (1L << (With - 64)) | (1L << (Default - 64)) | (1L << (If - 64)) | (1L << (Throw - 64)) | (1L << (Delete - 64)) | (1L << (In - 64)) | (1L << (Try - 64)) | (1L << (From - 64)) | (1L << (ReadOnly - 64)) | (1L << (Async - 64)) | (1L << (Class - 64)) | (1L << (Enum - 64)) | (1L << (Extends - 64)) | (1L << (Super - 64)) | (1L << (Const - 64)) | (1L << (Export - 64)) | (1L << (Import - 64)) | (1L << (Implements - 64)) | (1L << (Let - 64)) | (1L << (Private - 64)) | (1L << (Public - 64)) | (1L << (Interface - 64)) | (1L << (Package - 64)) | (1L << (Protected - 64)) | (1L << (Static - 64)) | (1L << (Yield - 64)) | (1L << (String - 64)) | (1L << (TypeAlias - 64)) | (1L << (Get - 64)) | (1L << (Set - 64)) | (1L << (Require - 64)) | (1L << (At - 64)) | (1L << (Identifier - 64)))) != 0)) {
				{
				State = 476;
				parameterList();
				}
			}

			State = 479;
			Match(CloseParen);
			State = 480;
			Match(ARROW);
			State = 481;
			type_();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeQueryContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Typeof() { return GetToken(TypeScriptParser.Typeof, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeQueryExpressionContext typeQueryExpression() {
			return GetRuleContext<TypeQueryExpressionContext>(0);
		}
		public TypeQueryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeQuery; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.EnterTypeQuery(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.ExitTypeQuery(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypeScriptParserVisitor<TResult> typedVisitor = visitor as ITypeScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeQuery(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeQueryContext typeQuery() {
		TypeQueryContext _localctx = new TypeQueryContext(Context, State);
		EnterRule(_localctx, 54, RULE_typeQuery);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 483;
			Match(Typeof);
			State = 484;
			typeQueryExpression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeQueryExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(TypeScriptParser.Identifier, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierNameContext[] identifierName() {
			return GetRuleContexts<IdentifierNameContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierNameContext identifierName(int i) {
			return GetRuleContext<IdentifierNameContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Dot() { return GetTokens(TypeScriptParser.Dot); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Dot(int i) {
			return GetToken(TypeScriptParser.Dot, i);
		}
		public TypeQueryExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeQueryExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.EnterTypeQueryExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.ExitTypeQueryExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypeScriptParserVisitor<TResult> typedVisitor = visitor as ITypeScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeQueryExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeQueryExpressionContext typeQueryExpression() {
		TypeQueryExpressionContext _localctx = new TypeQueryExpressionContext(Context, State);
		EnterRule(_localctx, 56, RULE_typeQueryExpression);
		try {
			int _alt;
			State = 496;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,27,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 486;
				Match(Identifier);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 490;
				ErrorHandler.Sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						State = 487;
						identifierName();
						State = 488;
						Match(Dot);
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 492;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,26,Context);
				} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
				State = 494;
				identifierName();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PropertySignaturContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public PropertyNameContext propertyName() {
			return GetRuleContext<PropertyNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ReadOnly() { return GetToken(TypeScriptParser.ReadOnly, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode QuestionMark() { return GetToken(TypeScriptParser.QuestionMark, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeAnnotationContext typeAnnotation() {
			return GetRuleContext<TypeAnnotationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ARROW() { return GetToken(TypeScriptParser.ARROW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Type_Context type_() {
			return GetRuleContext<Type_Context>(0);
		}
		public PropertySignaturContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_propertySignatur; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.EnterPropertySignatur(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.ExitPropertySignatur(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypeScriptParserVisitor<TResult> typedVisitor = visitor as ITypeScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPropertySignatur(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PropertySignaturContext propertySignatur() {
		PropertySignaturContext _localctx = new PropertySignaturContext(Context, State);
		EnterRule(_localctx, 58, RULE_propertySignatur);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 499;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,28,Context) ) {
			case 1:
				{
				State = 498;
				Match(ReadOnly);
				}
				break;
			}
			State = 501;
			propertyName();
			State = 503;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==QuestionMark) {
				{
				State = 502;
				Match(QuestionMark);
				}
			}

			State = 506;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Colon) {
				{
				State = 505;
				typeAnnotation();
				}
			}

			State = 510;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ARROW) {
				{
				State = 508;
				Match(ARROW);
				State = 509;
				type_();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeAnnotationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Colon() { return GetToken(TypeScriptParser.Colon, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Type_Context type_() {
			return GetRuleContext<Type_Context>(0);
		}
		public TypeAnnotationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeAnnotation; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.EnterTypeAnnotation(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.ExitTypeAnnotation(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypeScriptParserVisitor<TResult> typedVisitor = visitor as ITypeScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeAnnotation(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeAnnotationContext typeAnnotation() {
		TypeAnnotationContext _localctx = new TypeAnnotationContext(Context, State);
		EnterRule(_localctx, 60, RULE_typeAnnotation);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 512;
			Match(Colon);
			State = 513;
			type_();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CallSignatureContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OpenParen() { return GetToken(TypeScriptParser.OpenParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CloseParen() { return GetToken(TypeScriptParser.CloseParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeParametersContext typeParameters() {
			return GetRuleContext<TypeParametersContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ParameterListContext parameterList() {
			return GetRuleContext<ParameterListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeAnnotationContext typeAnnotation() {
			return GetRuleContext<TypeAnnotationContext>(0);
		}
		public CallSignatureContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_callSignature; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.EnterCallSignature(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.ExitCallSignature(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypeScriptParserVisitor<TResult> typedVisitor = visitor as ITypeScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCallSignature(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CallSignatureContext callSignature() {
		CallSignatureContext _localctx = new CallSignatureContext(Context, State);
		EnterRule(_localctx, 62, RULE_callSignature);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 516;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LessThan) {
				{
				State = 515;
				typeParameters();
				}
			}

			State = 518;
			Match(OpenParen);
			State = 520;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << OpenBracket) | (1L << OpenBrace) | (1L << Ellipsis) | (1L << NullLiteral) | (1L << BooleanLiteral) | (1L << Break) | (1L << Do))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (Instanceof - 64)) | (1L << (Typeof - 64)) | (1L << (Case - 64)) | (1L << (Else - 64)) | (1L << (New - 64)) | (1L << (Var - 64)) | (1L << (Catch - 64)) | (1L << (Finally - 64)) | (1L << (Return - 64)) | (1L << (Void - 64)) | (1L << (Continue - 64)) | (1L << (For - 64)) | (1L << (Switch - 64)) | (1L << (While - 64)) | (1L << (Debugger - 64)) | (1L << (Function_ - 64)) | (1L << (This - 64)) | (1L << (With - 64)) | (1L << (Default - 64)) | (1L << (If - 64)) | (1L << (Throw - 64)) | (1L << (Delete - 64)) | (1L << (In - 64)) | (1L << (Try - 64)) | (1L << (From - 64)) | (1L << (ReadOnly - 64)) | (1L << (Async - 64)) | (1L << (Class - 64)) | (1L << (Enum - 64)) | (1L << (Extends - 64)) | (1L << (Super - 64)) | (1L << (Const - 64)) | (1L << (Export - 64)) | (1L << (Import - 64)) | (1L << (Implements - 64)) | (1L << (Let - 64)) | (1L << (Private - 64)) | (1L << (Public - 64)) | (1L << (Interface - 64)) | (1L << (Package - 64)) | (1L << (Protected - 64)) | (1L << (Static - 64)) | (1L << (Yield - 64)) | (1L << (String - 64)) | (1L << (TypeAlias - 64)) | (1L << (Get - 64)) | (1L << (Set - 64)) | (1L << (Require - 64)) | (1L << (At - 64)) | (1L << (Identifier - 64)))) != 0)) {
				{
				State = 519;
				parameterList();
				}
			}

			State = 522;
			Match(CloseParen);
			State = 524;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,34,Context) ) {
			case 1:
				{
				State = 523;
				typeAnnotation();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParameterListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public RestParameterContext restParameter() {
			return GetRuleContext<RestParameterContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ParameterContext[] parameter() {
			return GetRuleContexts<ParameterContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ParameterContext parameter(int i) {
			return GetRuleContext<ParameterContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Comma() { return GetTokens(TypeScriptParser.Comma); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comma(int i) {
			return GetToken(TypeScriptParser.Comma, i);
		}
		public ParameterListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parameterList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.EnterParameterList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.ExitParameterList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypeScriptParserVisitor<TResult> typedVisitor = visitor as ITypeScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParameterList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ParameterListContext parameterList() {
		ParameterListContext _localctx = new ParameterListContext(Context, State);
		EnterRule(_localctx, 64, RULE_parameterList);
		int _la;
		try {
			int _alt;
			State = 539;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case Ellipsis:
				EnterOuterAlt(_localctx, 1);
				{
				State = 526;
				restParameter();
				}
				break;
			case OpenBracket:
			case OpenBrace:
			case NullLiteral:
			case BooleanLiteral:
			case Break:
			case Do:
			case Instanceof:
			case Typeof:
			case Case:
			case Else:
			case New:
			case Var:
			case Catch:
			case Finally:
			case Return:
			case Void:
			case Continue:
			case For:
			case Switch:
			case While:
			case Debugger:
			case Function_:
			case This:
			case With:
			case Default:
			case If:
			case Throw:
			case Delete:
			case In:
			case Try:
			case From:
			case ReadOnly:
			case Async:
			case Class:
			case Enum:
			case Extends:
			case Super:
			case Const:
			case Export:
			case Import:
			case Implements:
			case Let:
			case Private:
			case Public:
			case Interface:
			case Package:
			case Protected:
			case Static:
			case Yield:
			case String:
			case TypeAlias:
			case Get:
			case Set:
			case Require:
			case At:
			case Identifier:
				EnterOuterAlt(_localctx, 2);
				{
				State = 527;
				parameter();
				State = 532;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,35,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 528;
						Match(Comma);
						State = 529;
						parameter();
						}
						} 
					}
					State = 534;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,35,Context);
				}
				State = 537;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==Comma) {
					{
					State = 535;
					Match(Comma);
					State = 536;
					restParameter();
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RequiredParameterListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public RequiredParameterContext[] requiredParameter() {
			return GetRuleContexts<RequiredParameterContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public RequiredParameterContext requiredParameter(int i) {
			return GetRuleContext<RequiredParameterContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Comma() { return GetTokens(TypeScriptParser.Comma); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comma(int i) {
			return GetToken(TypeScriptParser.Comma, i);
		}
		public RequiredParameterListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_requiredParameterList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.EnterRequiredParameterList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.ExitRequiredParameterList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypeScriptParserVisitor<TResult> typedVisitor = visitor as ITypeScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRequiredParameterList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RequiredParameterListContext requiredParameterList() {
		RequiredParameterListContext _localctx = new RequiredParameterListContext(Context, State);
		EnterRule(_localctx, 66, RULE_requiredParameterList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 541;
			requiredParameter();
			State = 546;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==Comma) {
				{
				{
				State = 542;
				Match(Comma);
				State = 543;
				requiredParameter();
				}
				}
				State = 548;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParameterContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public RequiredParameterContext requiredParameter() {
			return GetRuleContext<RequiredParameterContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public OptionalParameterContext optionalParameter() {
			return GetRuleContext<OptionalParameterContext>(0);
		}
		public ParameterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parameter; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.EnterParameter(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.ExitParameter(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypeScriptParserVisitor<TResult> typedVisitor = visitor as ITypeScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParameter(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ParameterContext parameter() {
		ParameterContext _localctx = new ParameterContext(Context, State);
		EnterRule(_localctx, 68, RULE_parameter);
		try {
			State = 551;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,39,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 549;
				requiredParameter();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 550;
				optionalParameter();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OptionalParameterContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierOrPatternContext identifierOrPattern() {
			return GetRuleContext<IdentifierOrPatternContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DecoratorListContext decoratorList() {
			return GetRuleContext<DecoratorListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode QuestionMark() { return GetToken(TypeScriptParser.QuestionMark, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public InitializerContext initializer() {
			return GetRuleContext<InitializerContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AccessibilityModifierContext accessibilityModifier() {
			return GetRuleContext<AccessibilityModifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeAnnotationContext typeAnnotation() {
			return GetRuleContext<TypeAnnotationContext>(0);
		}
		public OptionalParameterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_optionalParameter; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.EnterOptionalParameter(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.ExitOptionalParameter(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypeScriptParserVisitor<TResult> typedVisitor = visitor as ITypeScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOptionalParameter(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OptionalParameterContext optionalParameter() {
		OptionalParameterContext _localctx = new OptionalParameterContext(Context, State);
		EnterRule(_localctx, 70, RULE_optionalParameter);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 554;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==At) {
				{
				State = 553;
				decoratorList();
				}
			}

			{
			State = 557;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,41,Context) ) {
			case 1:
				{
				State = 556;
				accessibilityModifier();
				}
				break;
			}
			State = 559;
			identifierOrPattern();
			State = 568;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case QuestionMark:
				{
				State = 560;
				Match(QuestionMark);
				State = 562;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==Colon) {
					{
					State = 561;
					typeAnnotation();
					}
				}

				}
				break;
			case Assign:
			case Colon:
				{
				State = 565;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==Colon) {
					{
					State = 564;
					typeAnnotation();
					}
				}

				State = 567;
				initializer();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RestParameterContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Ellipsis() { return GetToken(TypeScriptParser.Ellipsis, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SingleExpressionContext singleExpression() {
			return GetRuleContext<SingleExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeAnnotationContext typeAnnotation() {
			return GetRuleContext<TypeAnnotationContext>(0);
		}
		public RestParameterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_restParameter; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.EnterRestParameter(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.ExitRestParameter(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypeScriptParserVisitor<TResult> typedVisitor = visitor as ITypeScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRestParameter(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RestParameterContext restParameter() {
		RestParameterContext _localctx = new RestParameterContext(Context, State);
		EnterRule(_localctx, 72, RULE_restParameter);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 570;
			Match(Ellipsis);
			State = 571;
			singleExpression(0);
			State = 573;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Colon) {
				{
				State = 572;
				typeAnnotation();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RequiredParameterContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierOrPatternContext identifierOrPattern() {
			return GetRuleContext<IdentifierOrPatternContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DecoratorListContext decoratorList() {
			return GetRuleContext<DecoratorListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AccessibilityModifierContext accessibilityModifier() {
			return GetRuleContext<AccessibilityModifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeAnnotationContext typeAnnotation() {
			return GetRuleContext<TypeAnnotationContext>(0);
		}
		public RequiredParameterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_requiredParameter; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.EnterRequiredParameter(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.ExitRequiredParameter(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypeScriptParserVisitor<TResult> typedVisitor = visitor as ITypeScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRequiredParameter(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RequiredParameterContext requiredParameter() {
		RequiredParameterContext _localctx = new RequiredParameterContext(Context, State);
		EnterRule(_localctx, 74, RULE_requiredParameter);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 576;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==At) {
				{
				State = 575;
				decoratorList();
				}
			}

			State = 579;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,47,Context) ) {
			case 1:
				{
				State = 578;
				accessibilityModifier();
				}
				break;
			}
			State = 581;
			identifierOrPattern();
			State = 583;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Colon) {
				{
				State = 582;
				typeAnnotation();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AccessibilityModifierContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Public() { return GetToken(TypeScriptParser.Public, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Private() { return GetToken(TypeScriptParser.Private, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Protected() { return GetToken(TypeScriptParser.Protected, 0); }
		public AccessibilityModifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_accessibilityModifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.EnterAccessibilityModifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.ExitAccessibilityModifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypeScriptParserVisitor<TResult> typedVisitor = visitor as ITypeScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAccessibilityModifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AccessibilityModifierContext accessibilityModifier() {
		AccessibilityModifierContext _localctx = new AccessibilityModifierContext(Context, State);
		EnterRule(_localctx, 76, RULE_accessibilityModifier);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 585;
			_la = TokenStream.LA(1);
			if ( !(((((_la - 101)) & ~0x3f) == 0 && ((1L << (_la - 101)) & ((1L << (Private - 101)) | (1L << (Public - 101)) | (1L << (Protected - 101)))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IdentifierOrPatternContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierNameContext identifierName() {
			return GetRuleContext<IdentifierNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BindingPatternContext bindingPattern() {
			return GetRuleContext<BindingPatternContext>(0);
		}
		public IdentifierOrPatternContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_identifierOrPattern; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.EnterIdentifierOrPattern(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.ExitIdentifierOrPattern(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypeScriptParserVisitor<TResult> typedVisitor = visitor as ITypeScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIdentifierOrPattern(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IdentifierOrPatternContext identifierOrPattern() {
		IdentifierOrPatternContext _localctx = new IdentifierOrPatternContext(Context, State);
		EnterRule(_localctx, 78, RULE_identifierOrPattern);
		try {
			State = 589;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case NullLiteral:
			case BooleanLiteral:
			case Break:
			case Do:
			case Instanceof:
			case Typeof:
			case Case:
			case Else:
			case New:
			case Var:
			case Catch:
			case Finally:
			case Return:
			case Void:
			case Continue:
			case For:
			case Switch:
			case While:
			case Debugger:
			case Function_:
			case This:
			case With:
			case Default:
			case If:
			case Throw:
			case Delete:
			case In:
			case Try:
			case From:
			case ReadOnly:
			case Async:
			case Class:
			case Enum:
			case Extends:
			case Super:
			case Const:
			case Export:
			case Import:
			case Implements:
			case Let:
			case Private:
			case Public:
			case Interface:
			case Package:
			case Protected:
			case Static:
			case Yield:
			case String:
			case TypeAlias:
			case Get:
			case Set:
			case Require:
			case Identifier:
				EnterOuterAlt(_localctx, 1);
				{
				State = 587;
				identifierName();
				}
				break;
			case OpenBracket:
			case OpenBrace:
				EnterOuterAlt(_localctx, 2);
				{
				State = 588;
				bindingPattern();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConstructSignatureContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode New() { return GetToken(TypeScriptParser.New, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OpenParen() { return GetToken(TypeScriptParser.OpenParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CloseParen() { return GetToken(TypeScriptParser.CloseParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeParametersContext typeParameters() {
			return GetRuleContext<TypeParametersContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ParameterListContext parameterList() {
			return GetRuleContext<ParameterListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeAnnotationContext typeAnnotation() {
			return GetRuleContext<TypeAnnotationContext>(0);
		}
		public ConstructSignatureContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constructSignature; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.EnterConstructSignature(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.ExitConstructSignature(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypeScriptParserVisitor<TResult> typedVisitor = visitor as ITypeScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConstructSignature(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConstructSignatureContext constructSignature() {
		ConstructSignatureContext _localctx = new ConstructSignatureContext(Context, State);
		EnterRule(_localctx, 80, RULE_constructSignature);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 591;
			Match(New);
			State = 593;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LessThan) {
				{
				State = 592;
				typeParameters();
				}
			}

			State = 595;
			Match(OpenParen);
			State = 597;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << OpenBracket) | (1L << OpenBrace) | (1L << Ellipsis) | (1L << NullLiteral) | (1L << BooleanLiteral) | (1L << Break) | (1L << Do))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (Instanceof - 64)) | (1L << (Typeof - 64)) | (1L << (Case - 64)) | (1L << (Else - 64)) | (1L << (New - 64)) | (1L << (Var - 64)) | (1L << (Catch - 64)) | (1L << (Finally - 64)) | (1L << (Return - 64)) | (1L << (Void - 64)) | (1L << (Continue - 64)) | (1L << (For - 64)) | (1L << (Switch - 64)) | (1L << (While - 64)) | (1L << (Debugger - 64)) | (1L << (Function_ - 64)) | (1L << (This - 64)) | (1L << (With - 64)) | (1L << (Default - 64)) | (1L << (If - 64)) | (1L << (Throw - 64)) | (1L << (Delete - 64)) | (1L << (In - 64)) | (1L << (Try - 64)) | (1L << (From - 64)) | (1L << (ReadOnly - 64)) | (1L << (Async - 64)) | (1L << (Class - 64)) | (1L << (Enum - 64)) | (1L << (Extends - 64)) | (1L << (Super - 64)) | (1L << (Const - 64)) | (1L << (Export - 64)) | (1L << (Import - 64)) | (1L << (Implements - 64)) | (1L << (Let - 64)) | (1L << (Private - 64)) | (1L << (Public - 64)) | (1L << (Interface - 64)) | (1L << (Package - 64)) | (1L << (Protected - 64)) | (1L << (Static - 64)) | (1L << (Yield - 64)) | (1L << (String - 64)) | (1L << (TypeAlias - 64)) | (1L << (Get - 64)) | (1L << (Set - 64)) | (1L << (Require - 64)) | (1L << (At - 64)) | (1L << (Identifier - 64)))) != 0)) {
				{
				State = 596;
				parameterList();
				}
			}

			State = 599;
			Match(CloseParen);
			State = 601;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Colon) {
				{
				State = 600;
				typeAnnotation();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IndexSignatureContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OpenBracket() { return GetToken(TypeScriptParser.OpenBracket, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(TypeScriptParser.Identifier, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Colon() { return GetToken(TypeScriptParser.Colon, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CloseBracket() { return GetToken(TypeScriptParser.CloseBracket, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeAnnotationContext typeAnnotation() {
			return GetRuleContext<TypeAnnotationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Number() { return GetToken(TypeScriptParser.Number, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode String() { return GetToken(TypeScriptParser.String, 0); }
		public IndexSignatureContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_indexSignature; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.EnterIndexSignature(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.ExitIndexSignature(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypeScriptParserVisitor<TResult> typedVisitor = visitor as ITypeScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIndexSignature(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IndexSignatureContext indexSignature() {
		IndexSignatureContext _localctx = new IndexSignatureContext(Context, State);
		EnterRule(_localctx, 82, RULE_indexSignature);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 603;
			Match(OpenBracket);
			State = 604;
			Match(Identifier);
			State = 605;
			Match(Colon);
			State = 606;
			_la = TokenStream.LA(1);
			if ( !(_la==Number || _la==String) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 607;
			Match(CloseBracket);
			State = 608;
			typeAnnotation();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MethodSignatureContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public PropertyNameContext propertyName() {
			return GetRuleContext<PropertyNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CallSignatureContext callSignature() {
			return GetRuleContext<CallSignatureContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode QuestionMark() { return GetToken(TypeScriptParser.QuestionMark, 0); }
		public MethodSignatureContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_methodSignature; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.EnterMethodSignature(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.ExitMethodSignature(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypeScriptParserVisitor<TResult> typedVisitor = visitor as ITypeScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMethodSignature(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MethodSignatureContext methodSignature() {
		MethodSignatureContext _localctx = new MethodSignatureContext(Context, State);
		EnterRule(_localctx, 84, RULE_methodSignature);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 610;
			propertyName();
			State = 612;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==QuestionMark) {
				{
				State = 611;
				Match(QuestionMark);
				}
			}

			State = 614;
			callSignature();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeAliasDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TypeAlias() { return GetToken(TypeScriptParser.TypeAlias, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(TypeScriptParser.Identifier, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Assign() { return GetToken(TypeScriptParser.Assign, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Type_Context type_() {
			return GetRuleContext<Type_Context>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SemiColon() { return GetToken(TypeScriptParser.SemiColon, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeParametersContext typeParameters() {
			return GetRuleContext<TypeParametersContext>(0);
		}
		public TypeAliasDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeAliasDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.EnterTypeAliasDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.ExitTypeAliasDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypeScriptParserVisitor<TResult> typedVisitor = visitor as ITypeScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeAliasDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeAliasDeclarationContext typeAliasDeclaration() {
		TypeAliasDeclarationContext _localctx = new TypeAliasDeclarationContext(Context, State);
		EnterRule(_localctx, 86, RULE_typeAliasDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 616;
			Match(TypeAlias);
			State = 617;
			Match(Identifier);
			State = 619;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LessThan) {
				{
				State = 618;
				typeParameters();
				}
			}

			State = 621;
			Match(Assign);
			State = 622;
			type_();
			State = 623;
			Match(SemiColon);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConstructorDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Constructor() { return GetToken(TypeScriptParser.Constructor, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OpenParen() { return GetToken(TypeScriptParser.OpenParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CloseParen() { return GetToken(TypeScriptParser.CloseParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public AccessibilityModifierContext accessibilityModifier() {
			return GetRuleContext<AccessibilityModifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FormalParameterListContext formalParameterList() {
			return GetRuleContext<FormalParameterListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SemiColon() { return GetToken(TypeScriptParser.SemiColon, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OpenBrace() { return GetToken(TypeScriptParser.OpenBrace, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FunctionBodyContext functionBody() {
			return GetRuleContext<FunctionBodyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CloseBrace() { return GetToken(TypeScriptParser.CloseBrace, 0); }
		public ConstructorDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constructorDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.EnterConstructorDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.ExitConstructorDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypeScriptParserVisitor<TResult> typedVisitor = visitor as ITypeScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConstructorDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConstructorDeclarationContext constructorDeclaration() {
		ConstructorDeclarationContext _localctx = new ConstructorDeclarationContext(Context, State);
		EnterRule(_localctx, 88, RULE_constructorDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 626;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (((((_la - 101)) & ~0x3f) == 0 && ((1L << (_la - 101)) & ((1L << (Private - 101)) | (1L << (Public - 101)) | (1L << (Protected - 101)))) != 0)) {
				{
				State = 625;
				accessibilityModifier();
				}
			}

			State = 628;
			Match(Constructor);
			State = 629;
			Match(OpenParen);
			State = 631;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << OpenBracket) | (1L << OpenBrace) | (1L << Ellipsis))) != 0) || ((((_la - 101)) & ~0x3f) == 0 && ((1L << (_la - 101)) & ((1L << (Private - 101)) | (1L << (Public - 101)) | (1L << (Protected - 101)) | (1L << (TypeAlias - 101)) | (1L << (Require - 101)) | (1L << (At - 101)) | (1L << (Identifier - 101)))) != 0)) {
				{
				State = 630;
				formalParameterList();
				}
			}

			State = 633;
			Match(CloseParen);
			State = 639;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,57,Context) ) {
			case 1:
				{
				{
				State = 634;
				Match(OpenBrace);
				State = 635;
				functionBody();
				State = 636;
				Match(CloseBrace);
				}
				}
				break;
			case 2:
				{
				State = 638;
				Match(SemiColon);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InterfaceDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Interface() { return GetToken(TypeScriptParser.Interface, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(TypeScriptParser.Identifier, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ObjectTypeContext objectType() {
			return GetRuleContext<ObjectTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Export() { return GetToken(TypeScriptParser.Export, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Declare() { return GetToken(TypeScriptParser.Declare, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeParametersContext typeParameters() {
			return GetRuleContext<TypeParametersContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public InterfaceExtendsClauseContext interfaceExtendsClause() {
			return GetRuleContext<InterfaceExtendsClauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SemiColon() { return GetToken(TypeScriptParser.SemiColon, 0); }
		public InterfaceDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_interfaceDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.EnterInterfaceDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.ExitInterfaceDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypeScriptParserVisitor<TResult> typedVisitor = visitor as ITypeScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInterfaceDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InterfaceDeclarationContext interfaceDeclaration() {
		InterfaceDeclarationContext _localctx = new InterfaceDeclarationContext(Context, State);
		EnterRule(_localctx, 90, RULE_interfaceDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 642;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Export) {
				{
				State = 641;
				Match(Export);
				}
			}

			State = 645;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Declare) {
				{
				State = 644;
				Match(Declare);
				}
			}

			State = 647;
			Match(Interface);
			State = 648;
			Match(Identifier);
			State = 650;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LessThan) {
				{
				State = 649;
				typeParameters();
				}
			}

			State = 653;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Extends) {
				{
				State = 652;
				interfaceExtendsClause();
				}
			}

			State = 655;
			objectType();
			State = 657;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,62,Context) ) {
			case 1:
				{
				State = 656;
				Match(SemiColon);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InterfaceExtendsClauseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Extends() { return GetToken(TypeScriptParser.Extends, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ClassOrInterfaceTypeListContext classOrInterfaceTypeList() {
			return GetRuleContext<ClassOrInterfaceTypeListContext>(0);
		}
		public InterfaceExtendsClauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_interfaceExtendsClause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.EnterInterfaceExtendsClause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.ExitInterfaceExtendsClause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypeScriptParserVisitor<TResult> typedVisitor = visitor as ITypeScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInterfaceExtendsClause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InterfaceExtendsClauseContext interfaceExtendsClause() {
		InterfaceExtendsClauseContext _localctx = new InterfaceExtendsClauseContext(Context, State);
		EnterRule(_localctx, 92, RULE_interfaceExtendsClause);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 659;
			Match(Extends);
			State = 660;
			classOrInterfaceTypeList();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClassOrInterfaceTypeListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypeReferenceContext[] typeReference() {
			return GetRuleContexts<TypeReferenceContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeReferenceContext typeReference(int i) {
			return GetRuleContext<TypeReferenceContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Comma() { return GetTokens(TypeScriptParser.Comma); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comma(int i) {
			return GetToken(TypeScriptParser.Comma, i);
		}
		public ClassOrInterfaceTypeListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_classOrInterfaceTypeList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.EnterClassOrInterfaceTypeList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.ExitClassOrInterfaceTypeList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypeScriptParserVisitor<TResult> typedVisitor = visitor as ITypeScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClassOrInterfaceTypeList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ClassOrInterfaceTypeListContext classOrInterfaceTypeList() {
		ClassOrInterfaceTypeListContext _localctx = new ClassOrInterfaceTypeListContext(Context, State);
		EnterRule(_localctx, 94, RULE_classOrInterfaceTypeList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 662;
			typeReference();
			State = 667;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==Comma) {
				{
				{
				State = 663;
				Match(Comma);
				State = 664;
				typeReference();
				}
				}
				State = 669;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EnumDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Enum() { return GetToken(TypeScriptParser.Enum, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(TypeScriptParser.Identifier, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OpenBrace() { return GetToken(TypeScriptParser.OpenBrace, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CloseBrace() { return GetToken(TypeScriptParser.CloseBrace, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Const() { return GetToken(TypeScriptParser.Const, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public EnumBodyContext enumBody() {
			return GetRuleContext<EnumBodyContext>(0);
		}
		public EnumDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enumDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.EnterEnumDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.ExitEnumDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypeScriptParserVisitor<TResult> typedVisitor = visitor as ITypeScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEnumDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EnumDeclarationContext enumDeclaration() {
		EnumDeclarationContext _localctx = new EnumDeclarationContext(Context, State);
		EnterRule(_localctx, 96, RULE_enumDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 671;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Const) {
				{
				State = 670;
				Match(Const);
				}
			}

			State = 673;
			Match(Enum);
			State = 674;
			Match(Identifier);
			State = 675;
			Match(OpenBrace);
			State = 677;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << NullLiteral) | (1L << BooleanLiteral) | (1L << DecimalLiteral) | (1L << HexIntegerLiteral) | (1L << OctalIntegerLiteral) | (1L << OctalIntegerLiteral2) | (1L << BinaryIntegerLiteral) | (1L << Break) | (1L << Do))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (Instanceof - 64)) | (1L << (Typeof - 64)) | (1L << (Case - 64)) | (1L << (Else - 64)) | (1L << (New - 64)) | (1L << (Var - 64)) | (1L << (Catch - 64)) | (1L << (Finally - 64)) | (1L << (Return - 64)) | (1L << (Void - 64)) | (1L << (Continue - 64)) | (1L << (For - 64)) | (1L << (Switch - 64)) | (1L << (While - 64)) | (1L << (Debugger - 64)) | (1L << (Function_ - 64)) | (1L << (This - 64)) | (1L << (With - 64)) | (1L << (Default - 64)) | (1L << (If - 64)) | (1L << (Throw - 64)) | (1L << (Delete - 64)) | (1L << (In - 64)) | (1L << (Try - 64)) | (1L << (From - 64)) | (1L << (ReadOnly - 64)) | (1L << (Async - 64)) | (1L << (Class - 64)) | (1L << (Enum - 64)) | (1L << (Extends - 64)) | (1L << (Super - 64)) | (1L << (Const - 64)) | (1L << (Export - 64)) | (1L << (Import - 64)) | (1L << (Implements - 64)) | (1L << (Let - 64)) | (1L << (Private - 64)) | (1L << (Public - 64)) | (1L << (Interface - 64)) | (1L << (Package - 64)) | (1L << (Protected - 64)) | (1L << (Static - 64)) | (1L << (Yield - 64)) | (1L << (String - 64)) | (1L << (TypeAlias - 64)) | (1L << (Get - 64)) | (1L << (Set - 64)) | (1L << (Require - 64)) | (1L << (Identifier - 64)) | (1L << (StringLiteral - 64)))) != 0)) {
				{
				State = 676;
				enumBody();
				}
			}

			State = 679;
			Match(CloseBrace);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EnumBodyContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public EnumMemberListContext enumMemberList() {
			return GetRuleContext<EnumMemberListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comma() { return GetToken(TypeScriptParser.Comma, 0); }
		public EnumBodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enumBody; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.EnterEnumBody(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.ExitEnumBody(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypeScriptParserVisitor<TResult> typedVisitor = visitor as ITypeScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEnumBody(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EnumBodyContext enumBody() {
		EnumBodyContext _localctx = new EnumBodyContext(Context, State);
		EnterRule(_localctx, 98, RULE_enumBody);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 681;
			enumMemberList();
			State = 683;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Comma) {
				{
				State = 682;
				Match(Comma);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EnumMemberListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public EnumMemberContext[] enumMember() {
			return GetRuleContexts<EnumMemberContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public EnumMemberContext enumMember(int i) {
			return GetRuleContext<EnumMemberContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Comma() { return GetTokens(TypeScriptParser.Comma); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comma(int i) {
			return GetToken(TypeScriptParser.Comma, i);
		}
		public EnumMemberListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enumMemberList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.EnterEnumMemberList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.ExitEnumMemberList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypeScriptParserVisitor<TResult> typedVisitor = visitor as ITypeScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEnumMemberList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EnumMemberListContext enumMemberList() {
		EnumMemberListContext _localctx = new EnumMemberListContext(Context, State);
		EnterRule(_localctx, 100, RULE_enumMemberList);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 685;
			enumMember();
			State = 690;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,67,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 686;
					Match(Comma);
					State = 687;
					enumMember();
					}
					} 
				}
				State = 692;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,67,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EnumMemberContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public PropertyNameContext propertyName() {
			return GetRuleContext<PropertyNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Assign() { return GetToken(TypeScriptParser.Assign, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SingleExpressionContext singleExpression() {
			return GetRuleContext<SingleExpressionContext>(0);
		}
		public EnumMemberContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enumMember; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.EnterEnumMember(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.ExitEnumMember(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypeScriptParserVisitor<TResult> typedVisitor = visitor as ITypeScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEnumMember(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EnumMemberContext enumMember() {
		EnumMemberContext _localctx = new EnumMemberContext(Context, State);
		EnterRule(_localctx, 102, RULE_enumMember);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 693;
			propertyName();
			State = 696;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Assign) {
				{
				State = 694;
				Match(Assign);
				State = 695;
				singleExpression(0);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NamespaceDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Namespace() { return GetToken(TypeScriptParser.Namespace, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NamespaceNameContext namespaceName() {
			return GetRuleContext<NamespaceNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OpenBrace() { return GetToken(TypeScriptParser.OpenBrace, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CloseBrace() { return GetToken(TypeScriptParser.CloseBrace, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementListContext statementList() {
			return GetRuleContext<StatementListContext>(0);
		}
		public NamespaceDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_namespaceDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.EnterNamespaceDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.ExitNamespaceDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypeScriptParserVisitor<TResult> typedVisitor = visitor as ITypeScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNamespaceDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NamespaceDeclarationContext namespaceDeclaration() {
		NamespaceDeclarationContext _localctx = new NamespaceDeclarationContext(Context, State);
		EnterRule(_localctx, 104, RULE_namespaceDeclaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 698;
			Match(Namespace);
			State = 699;
			namespaceName();
			State = 700;
			Match(OpenBrace);
			State = 702;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,69,Context) ) {
			case 1:
				{
				State = 701;
				statementList();
				}
				break;
			}
			State = 704;
			Match(CloseBrace);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NamespaceNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Identifier() { return GetTokens(TypeScriptParser.Identifier); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier(int i) {
			return GetToken(TypeScriptParser.Identifier, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Dot() { return GetTokens(TypeScriptParser.Dot); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Dot(int i) {
			return GetToken(TypeScriptParser.Dot, i);
		}
		public NamespaceNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_namespaceName; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.EnterNamespaceName(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.ExitNamespaceName(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypeScriptParserVisitor<TResult> typedVisitor = visitor as ITypeScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNamespaceName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NamespaceNameContext namespaceName() {
		NamespaceNameContext _localctx = new NamespaceNameContext(Context, State);
		EnterRule(_localctx, 106, RULE_namespaceName);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 706;
			Match(Identifier);
			State = 715;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,71,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 708;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					do {
						{
						{
						State = 707;
						Match(Dot);
						}
						}
						State = 710;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					} while ( _la==Dot );
					State = 712;
					Match(Identifier);
					}
					} 
				}
				State = 717;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,71,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ImportAliasDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(TypeScriptParser.Identifier, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Assign() { return GetToken(TypeScriptParser.Assign, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NamespaceNameContext namespaceName() {
			return GetRuleContext<NamespaceNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SemiColon() { return GetToken(TypeScriptParser.SemiColon, 0); }
		public ImportAliasDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_importAliasDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.EnterImportAliasDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.ExitImportAliasDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypeScriptParserVisitor<TResult> typedVisitor = visitor as ITypeScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitImportAliasDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ImportAliasDeclarationContext importAliasDeclaration() {
		ImportAliasDeclarationContext _localctx = new ImportAliasDeclarationContext(Context, State);
		EnterRule(_localctx, 108, RULE_importAliasDeclaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 718;
			Match(Identifier);
			State = 719;
			Match(Assign);
			State = 720;
			namespaceName();
			State = 721;
			Match(SemiColon);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DecoratorListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public DecoratorContext[] decorator() {
			return GetRuleContexts<DecoratorContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public DecoratorContext decorator(int i) {
			return GetRuleContext<DecoratorContext>(i);
		}
		public DecoratorListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_decoratorList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.EnterDecoratorList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.ExitDecoratorList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypeScriptParserVisitor<TResult> typedVisitor = visitor as ITypeScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDecoratorList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DecoratorListContext decoratorList() {
		DecoratorListContext _localctx = new DecoratorListContext(Context, State);
		EnterRule(_localctx, 110, RULE_decoratorList);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 724;
			ErrorHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 723;
					decorator();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 726;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,72,Context);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DecoratorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode At() { return GetToken(TypeScriptParser.At, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public DecoratorMemberExpressionContext decoratorMemberExpression() {
			return GetRuleContext<DecoratorMemberExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DecoratorCallExpressionContext decoratorCallExpression() {
			return GetRuleContext<DecoratorCallExpressionContext>(0);
		}
		public DecoratorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_decorator; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.EnterDecorator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.ExitDecorator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypeScriptParserVisitor<TResult> typedVisitor = visitor as ITypeScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDecorator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DecoratorContext decorator() {
		DecoratorContext _localctx = new DecoratorContext(Context, State);
		EnterRule(_localctx, 112, RULE_decorator);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 728;
			Match(At);
			State = 731;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,73,Context) ) {
			case 1:
				{
				State = 729;
				decoratorMemberExpression(0);
				}
				break;
			case 2:
				{
				State = 730;
				decoratorCallExpression();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DecoratorMemberExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(TypeScriptParser.Identifier, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OpenParen() { return GetToken(TypeScriptParser.OpenParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SingleExpressionContext singleExpression() {
			return GetRuleContext<SingleExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CloseParen() { return GetToken(TypeScriptParser.CloseParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public DecoratorMemberExpressionContext decoratorMemberExpression() {
			return GetRuleContext<DecoratorMemberExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Dot() { return GetToken(TypeScriptParser.Dot, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierNameContext identifierName() {
			return GetRuleContext<IdentifierNameContext>(0);
		}
		public DecoratorMemberExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_decoratorMemberExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.EnterDecoratorMemberExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.ExitDecoratorMemberExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypeScriptParserVisitor<TResult> typedVisitor = visitor as ITypeScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDecoratorMemberExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DecoratorMemberExpressionContext decoratorMemberExpression() {
		return decoratorMemberExpression(0);
	}

	private DecoratorMemberExpressionContext decoratorMemberExpression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		DecoratorMemberExpressionContext _localctx = new DecoratorMemberExpressionContext(Context, _parentState);
		DecoratorMemberExpressionContext _prevctx = _localctx;
		int _startState = 114;
		EnterRecursionRule(_localctx, 114, RULE_decoratorMemberExpression, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 739;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case Identifier:
				{
				State = 734;
				Match(Identifier);
				}
				break;
			case OpenParen:
				{
				State = 735;
				Match(OpenParen);
				State = 736;
				singleExpression(0);
				State = 737;
				Match(CloseParen);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 746;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,75,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new DecoratorMemberExpressionContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_decoratorMemberExpression);
					State = 741;
					if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
					State = 742;
					Match(Dot);
					State = 743;
					identifierName();
					}
					} 
				}
				State = 748;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,75,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class DecoratorCallExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public DecoratorMemberExpressionContext decoratorMemberExpression() {
			return GetRuleContext<DecoratorMemberExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArgumentsContext arguments() {
			return GetRuleContext<ArgumentsContext>(0);
		}
		public DecoratorCallExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_decoratorCallExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.EnterDecoratorCallExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.ExitDecoratorCallExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypeScriptParserVisitor<TResult> typedVisitor = visitor as ITypeScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDecoratorCallExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DecoratorCallExpressionContext decoratorCallExpression() {
		DecoratorCallExpressionContext _localctx = new DecoratorCallExpressionContext(Context, State);
		EnterRule(_localctx, 116, RULE_decoratorCallExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 749;
			decoratorMemberExpression(0);
			State = 750;
			arguments();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ProgramContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(TypeScriptParser.Eof, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SourceElementsContext sourceElements() {
			return GetRuleContext<SourceElementsContext>(0);
		}
		public ProgramContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_program; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.EnterProgram(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.ExitProgram(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypeScriptParserVisitor<TResult> typedVisitor = visitor as ITypeScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProgram(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ProgramContext program() {
		ProgramContext _localctx = new ProgramContext(Context, State);
		EnterRule(_localctx, 118, RULE_program);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 753;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,76,Context) ) {
			case 1:
				{
				State = 752;
				sourceElements();
				}
				break;
			}
			State = 755;
			Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SourceElementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Export() { return GetToken(TypeScriptParser.Export, 0); }
		public SourceElementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sourceElement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.EnterSourceElement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.ExitSourceElement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypeScriptParserVisitor<TResult> typedVisitor = visitor as ITypeScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSourceElement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SourceElementContext sourceElement() {
		SourceElementContext _localctx = new SourceElementContext(Context, State);
		EnterRule(_localctx, 120, RULE_sourceElement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 758;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,77,Context) ) {
			case 1:
				{
				State = 757;
				Match(Export);
				}
				break;
			}
			State = 760;
			statement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ImportStatementContext importStatement() {
			return GetRuleContext<ImportStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExportStatementContext exportStatement() {
			return GetRuleContext<ExportStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public EmptyStatement_Context emptyStatement_() {
			return GetRuleContext<EmptyStatement_Context>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AbstractDeclarationContext abstractDeclaration() {
			return GetRuleContext<AbstractDeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DecoratorListContext decoratorList() {
			return GetRuleContext<DecoratorListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ClassDeclarationContext classDeclaration() {
			return GetRuleContext<ClassDeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public InterfaceDeclarationContext interfaceDeclaration() {
			return GetRuleContext<InterfaceDeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NamespaceDeclarationContext namespaceDeclaration() {
			return GetRuleContext<NamespaceDeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IfStatementContext ifStatement() {
			return GetRuleContext<IfStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IterationStatementContext iterationStatement() {
			return GetRuleContext<IterationStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ContinueStatementContext continueStatement() {
			return GetRuleContext<ContinueStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BreakStatementContext breakStatement() {
			return GetRuleContext<BreakStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ReturnStatementContext returnStatement() {
			return GetRuleContext<ReturnStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public YieldStatementContext yieldStatement() {
			return GetRuleContext<YieldStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public WithStatementContext withStatement() {
			return GetRuleContext<WithStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LabelledStatementContext labelledStatement() {
			return GetRuleContext<LabelledStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SwitchStatementContext switchStatement() {
			return GetRuleContext<SwitchStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ThrowStatementContext throwStatement() {
			return GetRuleContext<ThrowStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TryStatementContext tryStatement() {
			return GetRuleContext<TryStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DebuggerStatementContext debuggerStatement() {
			return GetRuleContext<DebuggerStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionDeclarationContext functionDeclaration() {
			return GetRuleContext<FunctionDeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArrowFunctionDeclarationContext arrowFunctionDeclaration() {
			return GetRuleContext<ArrowFunctionDeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public GeneratorFunctionDeclarationContext generatorFunctionDeclaration() {
			return GetRuleContext<GeneratorFunctionDeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public VariableStatementContext variableStatement() {
			return GetRuleContext<VariableStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeAliasDeclarationContext typeAliasDeclaration() {
			return GetRuleContext<TypeAliasDeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public EnumDeclarationContext enumDeclaration() {
			return GetRuleContext<EnumDeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionStatementContext expressionStatement() {
			return GetRuleContext<ExpressionStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Export() { return GetToken(TypeScriptParser.Export, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.EnterStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.ExitStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypeScriptParserVisitor<TResult> typedVisitor = visitor as ITypeScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		StatementContext _localctx = new StatementContext(Context, State);
		EnterRule(_localctx, 122, RULE_statement);
		try {
			State = 792;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,78,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 762;
				block();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 763;
				importStatement();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 764;
				exportStatement();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 765;
				emptyStatement_();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 766;
				abstractDeclaration();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 767;
				decoratorList();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 768;
				classDeclaration();
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 769;
				interfaceDeclaration();
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 770;
				namespaceDeclaration();
				}
				break;
			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 771;
				ifStatement();
				}
				break;
			case 11:
				EnterOuterAlt(_localctx, 11);
				{
				State = 772;
				iterationStatement();
				}
				break;
			case 12:
				EnterOuterAlt(_localctx, 12);
				{
				State = 773;
				continueStatement();
				}
				break;
			case 13:
				EnterOuterAlt(_localctx, 13);
				{
				State = 774;
				breakStatement();
				}
				break;
			case 14:
				EnterOuterAlt(_localctx, 14);
				{
				State = 775;
				returnStatement();
				}
				break;
			case 15:
				EnterOuterAlt(_localctx, 15);
				{
				State = 776;
				yieldStatement();
				}
				break;
			case 16:
				EnterOuterAlt(_localctx, 16);
				{
				State = 777;
				withStatement();
				}
				break;
			case 17:
				EnterOuterAlt(_localctx, 17);
				{
				State = 778;
				labelledStatement();
				}
				break;
			case 18:
				EnterOuterAlt(_localctx, 18);
				{
				State = 779;
				switchStatement();
				}
				break;
			case 19:
				EnterOuterAlt(_localctx, 19);
				{
				State = 780;
				throwStatement();
				}
				break;
			case 20:
				EnterOuterAlt(_localctx, 20);
				{
				State = 781;
				tryStatement();
				}
				break;
			case 21:
				EnterOuterAlt(_localctx, 21);
				{
				State = 782;
				debuggerStatement();
				}
				break;
			case 22:
				EnterOuterAlt(_localctx, 22);
				{
				State = 783;
				functionDeclaration();
				}
				break;
			case 23:
				EnterOuterAlt(_localctx, 23);
				{
				State = 784;
				arrowFunctionDeclaration();
				}
				break;
			case 24:
				EnterOuterAlt(_localctx, 24);
				{
				State = 785;
				generatorFunctionDeclaration();
				}
				break;
			case 25:
				EnterOuterAlt(_localctx, 25);
				{
				State = 786;
				variableStatement();
				}
				break;
			case 26:
				EnterOuterAlt(_localctx, 26);
				{
				State = 787;
				typeAliasDeclaration();
				}
				break;
			case 27:
				EnterOuterAlt(_localctx, 27);
				{
				State = 788;
				enumDeclaration();
				}
				break;
			case 28:
				EnterOuterAlt(_localctx, 28);
				{
				State = 789;
				expressionStatement();
				}
				break;
			case 29:
				EnterOuterAlt(_localctx, 29);
				{
				State = 790;
				Match(Export);
				State = 791;
				statement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlockContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OpenBrace() { return GetToken(TypeScriptParser.OpenBrace, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CloseBrace() { return GetToken(TypeScriptParser.CloseBrace, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementListContext statementList() {
			return GetRuleContext<StatementListContext>(0);
		}
		public BlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_block; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.EnterBlock(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.ExitBlock(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypeScriptParserVisitor<TResult> typedVisitor = visitor as ITypeScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BlockContext block() {
		BlockContext _localctx = new BlockContext(Context, State);
		EnterRule(_localctx, 124, RULE_block);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 794;
			Match(OpenBrace);
			State = 796;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,79,Context) ) {
			case 1:
				{
				State = 795;
				statementList();
				}
				break;
			}
			State = 798;
			Match(CloseBrace);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public StatementListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statementList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.EnterStatementList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.ExitStatementList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypeScriptParserVisitor<TResult> typedVisitor = visitor as ITypeScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatementList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementListContext statementList() {
		StatementListContext _localctx = new StatementListContext(Context, State);
		EnterRule(_localctx, 126, RULE_statementList);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 801;
			ErrorHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 800;
					statement();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 803;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,80,Context);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AbstractDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Abstract() { return GetToken(TypeScriptParser.Abstract, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public EosContext eos() {
			return GetRuleContext<EosContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(TypeScriptParser.Identifier, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public CallSignatureContext callSignature() {
			return GetRuleContext<CallSignatureContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public VariableStatementContext variableStatement() {
			return GetRuleContext<VariableStatementContext>(0);
		}
		public AbstractDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_abstractDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.EnterAbstractDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.ExitAbstractDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypeScriptParserVisitor<TResult> typedVisitor = visitor as ITypeScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAbstractDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AbstractDeclarationContext abstractDeclaration() {
		AbstractDeclarationContext _localctx = new AbstractDeclarationContext(Context, State);
		EnterRule(_localctx, 128, RULE_abstractDeclaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 805;
			Match(Abstract);
			State = 809;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,81,Context) ) {
			case 1:
				{
				State = 806;
				Match(Identifier);
				State = 807;
				callSignature();
				}
				break;
			case 2:
				{
				State = 808;
				variableStatement();
				}
				break;
			}
			State = 811;
			eos();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ImportStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Import() { return GetToken(TypeScriptParser.Import, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FromBlockContext fromBlock() {
			return GetRuleContext<FromBlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ImportAliasDeclarationContext importAliasDeclaration() {
			return GetRuleContext<ImportAliasDeclarationContext>(0);
		}
		public ImportStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_importStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.EnterImportStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.ExitImportStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypeScriptParserVisitor<TResult> typedVisitor = visitor as ITypeScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitImportStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ImportStatementContext importStatement() {
		ImportStatementContext _localctx = new ImportStatementContext(Context, State);
		EnterRule(_localctx, 130, RULE_importStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 813;
			Match(Import);
			State = 816;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,82,Context) ) {
			case 1:
				{
				State = 814;
				fromBlock();
				}
				break;
			case 2:
				{
				State = 815;
				importAliasDeclaration();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FromBlockContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode From() { return GetToken(TypeScriptParser.From, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode StringLiteral() { return GetToken(TypeScriptParser.StringLiteral, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public EosContext eos() {
			return GetRuleContext<EosContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Multiply() { return GetToken(TypeScriptParser.Multiply, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public MultipleImportStatementContext multipleImportStatement() {
			return GetRuleContext<MultipleImportStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode As() { return GetToken(TypeScriptParser.As, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierNameContext identifierName() {
			return GetRuleContext<IdentifierNameContext>(0);
		}
		public FromBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fromBlock; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.EnterFromBlock(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.ExitFromBlock(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypeScriptParserVisitor<TResult> typedVisitor = visitor as ITypeScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFromBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FromBlockContext fromBlock() {
		FromBlockContext _localctx = new FromBlockContext(Context, State);
		EnterRule(_localctx, 132, RULE_fromBlock);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 820;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case Multiply:
				{
				State = 818;
				Match(Multiply);
				}
				break;
			case OpenBrace:
			case NullLiteral:
			case BooleanLiteral:
			case Break:
			case Do:
			case Instanceof:
			case Typeof:
			case Case:
			case Else:
			case New:
			case Var:
			case Catch:
			case Finally:
			case Return:
			case Void:
			case Continue:
			case For:
			case Switch:
			case While:
			case Debugger:
			case Function_:
			case This:
			case With:
			case Default:
			case If:
			case Throw:
			case Delete:
			case In:
			case Try:
			case From:
			case ReadOnly:
			case Async:
			case Class:
			case Enum:
			case Extends:
			case Super:
			case Const:
			case Export:
			case Import:
			case Implements:
			case Let:
			case Private:
			case Public:
			case Interface:
			case Package:
			case Protected:
			case Static:
			case Yield:
			case String:
			case TypeAlias:
			case Get:
			case Set:
			case Require:
			case Identifier:
				{
				State = 819;
				multipleImportStatement();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 824;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==As) {
				{
				State = 822;
				Match(As);
				State = 823;
				identifierName();
				}
			}

			State = 826;
			Match(From);
			State = 827;
			Match(StringLiteral);
			State = 828;
			eos();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MultipleImportStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OpenBrace() { return GetToken(TypeScriptParser.OpenBrace, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierNameContext[] identifierName() {
			return GetRuleContexts<IdentifierNameContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierNameContext identifierName(int i) {
			return GetRuleContext<IdentifierNameContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CloseBrace() { return GetToken(TypeScriptParser.CloseBrace, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Comma() { return GetTokens(TypeScriptParser.Comma); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comma(int i) {
			return GetToken(TypeScriptParser.Comma, i);
		}
		public MultipleImportStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_multipleImportStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.EnterMultipleImportStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.ExitMultipleImportStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypeScriptParserVisitor<TResult> typedVisitor = visitor as ITypeScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMultipleImportStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MultipleImportStatementContext multipleImportStatement() {
		MultipleImportStatementContext _localctx = new MultipleImportStatementContext(Context, State);
		EnterRule(_localctx, 134, RULE_multipleImportStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 833;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << NullLiteral) | (1L << BooleanLiteral) | (1L << Break) | (1L << Do))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (Instanceof - 64)) | (1L << (Typeof - 64)) | (1L << (Case - 64)) | (1L << (Else - 64)) | (1L << (New - 64)) | (1L << (Var - 64)) | (1L << (Catch - 64)) | (1L << (Finally - 64)) | (1L << (Return - 64)) | (1L << (Void - 64)) | (1L << (Continue - 64)) | (1L << (For - 64)) | (1L << (Switch - 64)) | (1L << (While - 64)) | (1L << (Debugger - 64)) | (1L << (Function_ - 64)) | (1L << (This - 64)) | (1L << (With - 64)) | (1L << (Default - 64)) | (1L << (If - 64)) | (1L << (Throw - 64)) | (1L << (Delete - 64)) | (1L << (In - 64)) | (1L << (Try - 64)) | (1L << (From - 64)) | (1L << (ReadOnly - 64)) | (1L << (Async - 64)) | (1L << (Class - 64)) | (1L << (Enum - 64)) | (1L << (Extends - 64)) | (1L << (Super - 64)) | (1L << (Const - 64)) | (1L << (Export - 64)) | (1L << (Import - 64)) | (1L << (Implements - 64)) | (1L << (Let - 64)) | (1L << (Private - 64)) | (1L << (Public - 64)) | (1L << (Interface - 64)) | (1L << (Package - 64)) | (1L << (Protected - 64)) | (1L << (Static - 64)) | (1L << (Yield - 64)) | (1L << (String - 64)) | (1L << (TypeAlias - 64)) | (1L << (Get - 64)) | (1L << (Set - 64)) | (1L << (Require - 64)) | (1L << (Identifier - 64)))) != 0)) {
				{
				State = 830;
				identifierName();
				State = 831;
				Match(Comma);
				}
			}

			State = 835;
			Match(OpenBrace);
			State = 836;
			identifierName();
			State = 841;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==Comma) {
				{
				{
				State = 837;
				Match(Comma);
				State = 838;
				identifierName();
				}
				}
				State = 843;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 844;
			Match(CloseBrace);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExportStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Export() { return GetToken(TypeScriptParser.Export, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FromBlockContext fromBlock() {
			return GetRuleContext<FromBlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Default() { return GetToken(TypeScriptParser.Default, 0); }
		public ExportStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_exportStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.EnterExportStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.ExitExportStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypeScriptParserVisitor<TResult> typedVisitor = visitor as ITypeScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExportStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExportStatementContext exportStatement() {
		ExportStatementContext _localctx = new ExportStatementContext(Context, State);
		EnterRule(_localctx, 136, RULE_exportStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 846;
			Match(Export);
			State = 848;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,87,Context) ) {
			case 1:
				{
				State = 847;
				Match(Default);
				}
				break;
			}
			State = 852;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,88,Context) ) {
			case 1:
				{
				State = 850;
				fromBlock();
				}
				break;
			case 2:
				{
				State = 851;
				statement();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariableStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public BindingPatternContext bindingPattern() {
			return GetRuleContext<BindingPatternContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public InitializerContext initializer() {
			return GetRuleContext<InitializerContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeAnnotationContext typeAnnotation() {
			return GetRuleContext<TypeAnnotationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SemiColon() { return GetToken(TypeScriptParser.SemiColon, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public VariableDeclarationListContext variableDeclarationList() {
			return GetRuleContext<VariableDeclarationListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AccessibilityModifierContext accessibilityModifier() {
			return GetRuleContext<AccessibilityModifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public VarModifierContext varModifier() {
			return GetRuleContext<VarModifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ReadOnly() { return GetToken(TypeScriptParser.ReadOnly, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Declare() { return GetToken(TypeScriptParser.Declare, 0); }
		public VariableStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variableStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.EnterVariableStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.ExitVariableStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypeScriptParserVisitor<TResult> typedVisitor = visitor as ITypeScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariableStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VariableStatementContext variableStatement() {
		VariableStatementContext _localctx = new VariableStatementContext(Context, State);
		EnterRule(_localctx, 138, RULE_variableStatement);
		int _la;
		try {
			State = 883;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,97,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 854;
				bindingPattern();
				State = 856;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==Colon) {
					{
					State = 855;
					typeAnnotation();
					}
				}

				State = 858;
				initializer();
				State = 860;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,90,Context) ) {
				case 1:
					{
					State = 859;
					Match(SemiColon);
					}
					break;
				}
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 863;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (((((_la - 101)) & ~0x3f) == 0 && ((1L << (_la - 101)) & ((1L << (Private - 101)) | (1L << (Public - 101)) | (1L << (Protected - 101)))) != 0)) {
					{
					State = 862;
					accessibilityModifier();
					}
				}

				State = 866;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (((((_la - 69)) & ~0x3f) == 0 && ((1L << (_la - 69)) & ((1L << (Var - 69)) | (1L << (Const - 69)) | (1L << (Let - 69)))) != 0)) {
					{
					State = 865;
					varModifier();
					}
				}

				State = 869;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==ReadOnly) {
					{
					State = 868;
					Match(ReadOnly);
					}
				}

				State = 871;
				variableDeclarationList();
				State = 873;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,94,Context) ) {
				case 1:
					{
					State = 872;
					Match(SemiColon);
					}
					break;
				}
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 875;
				Match(Declare);
				State = 877;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (((((_la - 69)) & ~0x3f) == 0 && ((1L << (_la - 69)) & ((1L << (Var - 69)) | (1L << (Const - 69)) | (1L << (Let - 69)))) != 0)) {
					{
					State = 876;
					varModifier();
					}
				}

				State = 879;
				variableDeclarationList();
				State = 881;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,96,Context) ) {
				case 1:
					{
					State = 880;
					Match(SemiColon);
					}
					break;
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariableDeclarationListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public VariableDeclarationContext[] variableDeclaration() {
			return GetRuleContexts<VariableDeclarationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public VariableDeclarationContext variableDeclaration(int i) {
			return GetRuleContext<VariableDeclarationContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Comma() { return GetTokens(TypeScriptParser.Comma); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comma(int i) {
			return GetToken(TypeScriptParser.Comma, i);
		}
		public VariableDeclarationListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variableDeclarationList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.EnterVariableDeclarationList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.ExitVariableDeclarationList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypeScriptParserVisitor<TResult> typedVisitor = visitor as ITypeScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariableDeclarationList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VariableDeclarationListContext variableDeclarationList() {
		VariableDeclarationListContext _localctx = new VariableDeclarationListContext(Context, State);
		EnterRule(_localctx, 140, RULE_variableDeclarationList);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 885;
			variableDeclaration();
			State = 890;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,98,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 886;
					Match(Comma);
					State = 887;
					variableDeclaration();
					}
					} 
				}
				State = 892;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,98,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariableDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierOrKeyWordContext identifierOrKeyWord() {
			return GetRuleContext<IdentifierOrKeyWordContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArrayLiteralContext arrayLiteral() {
			return GetRuleContext<ArrayLiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ObjectLiteralContext objectLiteral() {
			return GetRuleContext<ObjectLiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeAnnotationContext typeAnnotation() {
			return GetRuleContext<TypeAnnotationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SingleExpressionContext[] singleExpression() {
			return GetRuleContexts<SingleExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SingleExpressionContext singleExpression(int i) {
			return GetRuleContext<SingleExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Assign() { return GetToken(TypeScriptParser.Assign, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeParametersContext typeParameters() {
			return GetRuleContext<TypeParametersContext>(0);
		}
		public VariableDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variableDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.EnterVariableDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.ExitVariableDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypeScriptParserVisitor<TResult> typedVisitor = visitor as ITypeScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariableDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VariableDeclarationContext variableDeclaration() {
		VariableDeclarationContext _localctx = new VariableDeclarationContext(Context, State);
		EnterRule(_localctx, 142, RULE_variableDeclaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 896;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case TypeAlias:
			case Require:
			case Identifier:
				{
				State = 893;
				identifierOrKeyWord();
				}
				break;
			case OpenBracket:
				{
				State = 894;
				arrayLiteral();
				}
				break;
			case OpenBrace:
				{
				State = 895;
				objectLiteral();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 899;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,100,Context) ) {
			case 1:
				{
				State = 898;
				typeAnnotation();
				}
				break;
			}
			State = 902;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,101,Context) ) {
			case 1:
				{
				State = 901;
				singleExpression(0);
				}
				break;
			}
			State = 909;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,103,Context) ) {
			case 1:
				{
				State = 904;
				Match(Assign);
				State = 906;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,102,Context) ) {
				case 1:
					{
					State = 905;
					typeParameters();
					}
					break;
				}
				State = 908;
				singleExpression(0);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EmptyStatement_Context : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SemiColon() { return GetToken(TypeScriptParser.SemiColon, 0); }
		public EmptyStatement_Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_emptyStatement_; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.EnterEmptyStatement_(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.ExitEmptyStatement_(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypeScriptParserVisitor<TResult> typedVisitor = visitor as ITypeScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEmptyStatement_(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EmptyStatement_Context emptyStatement_() {
		EmptyStatement_Context _localctx = new EmptyStatement_Context(Context, State);
		EnterRule(_localctx, 144, RULE_emptyStatement_);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 911;
			Match(SemiColon);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionSequenceContext expressionSequence() {
			return GetRuleContext<ExpressionSequenceContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SemiColon() { return GetToken(TypeScriptParser.SemiColon, 0); }
		public ExpressionStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expressionStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.EnterExpressionStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.ExitExpressionStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypeScriptParserVisitor<TResult> typedVisitor = visitor as ITypeScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpressionStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionStatementContext expressionStatement() {
		ExpressionStatementContext _localctx = new ExpressionStatementContext(Context, State);
		EnterRule(_localctx, 146, RULE_expressionStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 913;
			if (!(this.notOpenBraceAndNotFunction())) throw new FailedPredicateException(this, "this.notOpenBraceAndNotFunction()");
			State = 914;
			expressionSequence();
			State = 916;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,104,Context) ) {
			case 1:
				{
				State = 915;
				Match(SemiColon);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IfStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode If() { return GetToken(TypeScriptParser.If, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OpenParen() { return GetToken(TypeScriptParser.OpenParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionSequenceContext expressionSequence() {
			return GetRuleContext<ExpressionSequenceContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CloseParen() { return GetToken(TypeScriptParser.CloseParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Else() { return GetToken(TypeScriptParser.Else, 0); }
		public IfStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ifStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.EnterIfStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.ExitIfStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypeScriptParserVisitor<TResult> typedVisitor = visitor as ITypeScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIfStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IfStatementContext ifStatement() {
		IfStatementContext _localctx = new IfStatementContext(Context, State);
		EnterRule(_localctx, 148, RULE_ifStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 918;
			Match(If);
			State = 919;
			Match(OpenParen);
			State = 920;
			expressionSequence();
			State = 921;
			Match(CloseParen);
			State = 922;
			statement();
			State = 925;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,105,Context) ) {
			case 1:
				{
				State = 923;
				Match(Else);
				State = 924;
				statement();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IterationStatementContext : ParserRuleContext {
		public IterationStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_iterationStatement; } }
	 
		public IterationStatementContext() { }
		public virtual void CopyFrom(IterationStatementContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class DoStatementContext : IterationStatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Do() { return GetToken(TypeScriptParser.Do, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode While() { return GetToken(TypeScriptParser.While, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OpenParen() { return GetToken(TypeScriptParser.OpenParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionSequenceContext expressionSequence() {
			return GetRuleContext<ExpressionSequenceContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CloseParen() { return GetToken(TypeScriptParser.CloseParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public EosContext eos() {
			return GetRuleContext<EosContext>(0);
		}
		public DoStatementContext(IterationStatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.EnterDoStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.ExitDoStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypeScriptParserVisitor<TResult> typedVisitor = visitor as ITypeScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDoStatement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ForVarStatementContext : IterationStatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode For() { return GetToken(TypeScriptParser.For, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OpenParen() { return GetToken(TypeScriptParser.OpenParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public VarModifierContext varModifier() {
			return GetRuleContext<VarModifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public VariableDeclarationListContext variableDeclarationList() {
			return GetRuleContext<VariableDeclarationListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SemiColon() { return GetTokens(TypeScriptParser.SemiColon); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SemiColon(int i) {
			return GetToken(TypeScriptParser.SemiColon, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CloseParen() { return GetToken(TypeScriptParser.CloseParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionSequenceContext[] expressionSequence() {
			return GetRuleContexts<ExpressionSequenceContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionSequenceContext expressionSequence(int i) {
			return GetRuleContext<ExpressionSequenceContext>(i);
		}
		public ForVarStatementContext(IterationStatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.EnterForVarStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.ExitForVarStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypeScriptParserVisitor<TResult> typedVisitor = visitor as ITypeScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForVarStatement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ForVarInStatementContext : IterationStatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode For() { return GetToken(TypeScriptParser.For, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OpenParen() { return GetToken(TypeScriptParser.OpenParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public VarModifierContext varModifier() {
			return GetRuleContext<VarModifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public VariableDeclarationContext variableDeclaration() {
			return GetRuleContext<VariableDeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionSequenceContext expressionSequence() {
			return GetRuleContext<ExpressionSequenceContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CloseParen() { return GetToken(TypeScriptParser.CloseParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode In() { return GetToken(TypeScriptParser.In, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(TypeScriptParser.Identifier, 0); }
		public ForVarInStatementContext(IterationStatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.EnterForVarInStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.ExitForVarInStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypeScriptParserVisitor<TResult> typedVisitor = visitor as ITypeScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForVarInStatement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class WhileStatementContext : IterationStatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode While() { return GetToken(TypeScriptParser.While, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OpenParen() { return GetToken(TypeScriptParser.OpenParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionSequenceContext expressionSequence() {
			return GetRuleContext<ExpressionSequenceContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CloseParen() { return GetToken(TypeScriptParser.CloseParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		public WhileStatementContext(IterationStatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.EnterWhileStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.ExitWhileStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypeScriptParserVisitor<TResult> typedVisitor = visitor as ITypeScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWhileStatement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ForStatementContext : IterationStatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode For() { return GetToken(TypeScriptParser.For, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OpenParen() { return GetToken(TypeScriptParser.OpenParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SemiColon() { return GetTokens(TypeScriptParser.SemiColon); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SemiColon(int i) {
			return GetToken(TypeScriptParser.SemiColon, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CloseParen() { return GetToken(TypeScriptParser.CloseParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionSequenceContext[] expressionSequence() {
			return GetRuleContexts<ExpressionSequenceContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionSequenceContext expressionSequence(int i) {
			return GetRuleContext<ExpressionSequenceContext>(i);
		}
		public ForStatementContext(IterationStatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.EnterForStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.ExitForStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypeScriptParserVisitor<TResult> typedVisitor = visitor as ITypeScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForStatement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ForInStatementContext : IterationStatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode For() { return GetToken(TypeScriptParser.For, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OpenParen() { return GetToken(TypeScriptParser.OpenParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SingleExpressionContext singleExpression() {
			return GetRuleContext<SingleExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionSequenceContext expressionSequence() {
			return GetRuleContext<ExpressionSequenceContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CloseParen() { return GetToken(TypeScriptParser.CloseParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode In() { return GetToken(TypeScriptParser.In, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(TypeScriptParser.Identifier, 0); }
		public ForInStatementContext(IterationStatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.EnterForInStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.ExitForInStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypeScriptParserVisitor<TResult> typedVisitor = visitor as ITypeScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForInStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IterationStatementContext iterationStatement() {
		IterationStatementContext _localctx = new IterationStatementContext(Context, State);
		EnterRule(_localctx, 150, RULE_iterationStatement);
		int _la;
		try {
			State = 996;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,113,Context) ) {
			case 1:
				_localctx = new DoStatementContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 927;
				Match(Do);
				State = 928;
				statement();
				State = 929;
				Match(While);
				State = 930;
				Match(OpenParen);
				State = 931;
				expressionSequence();
				State = 932;
				Match(CloseParen);
				State = 933;
				eos();
				}
				break;
			case 2:
				_localctx = new WhileStatementContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 935;
				Match(While);
				State = 936;
				Match(OpenParen);
				State = 937;
				expressionSequence();
				State = 938;
				Match(CloseParen);
				State = 939;
				statement();
				}
				break;
			case 3:
				_localctx = new ForStatementContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 941;
				Match(For);
				State = 942;
				Match(OpenParen);
				State = 944;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << RegularExpressionLiteral) | (1L << OpenBracket) | (1L << OpenParen) | (1L << OpenBrace) | (1L << PlusPlus) | (1L << MinusMinus) | (1L << Plus) | (1L << Minus) | (1L << BitNot) | (1L << Not) | (1L << LessThan) | (1L << NullLiteral) | (1L << BooleanLiteral) | (1L << DecimalLiteral) | (1L << HexIntegerLiteral) | (1L << OctalIntegerLiteral) | (1L << OctalIntegerLiteral2) | (1L << BinaryIntegerLiteral) | (1L << Break) | (1L << Do))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (Instanceof - 64)) | (1L << (Typeof - 64)) | (1L << (Case - 64)) | (1L << (Else - 64)) | (1L << (New - 64)) | (1L << (Var - 64)) | (1L << (Catch - 64)) | (1L << (Finally - 64)) | (1L << (Return - 64)) | (1L << (Void - 64)) | (1L << (Continue - 64)) | (1L << (For - 64)) | (1L << (Switch - 64)) | (1L << (While - 64)) | (1L << (Debugger - 64)) | (1L << (Function_ - 64)) | (1L << (This - 64)) | (1L << (With - 64)) | (1L << (Default - 64)) | (1L << (If - 64)) | (1L << (Throw - 64)) | (1L << (Delete - 64)) | (1L << (In - 64)) | (1L << (Try - 64)) | (1L << (From - 64)) | (1L << (ReadOnly - 64)) | (1L << (Async - 64)) | (1L << (Class - 64)) | (1L << (Enum - 64)) | (1L << (Extends - 64)) | (1L << (Super - 64)) | (1L << (Const - 64)) | (1L << (Export - 64)) | (1L << (Import - 64)) | (1L << (Implements - 64)) | (1L << (Let - 64)) | (1L << (Private - 64)) | (1L << (Public - 64)) | (1L << (Interface - 64)) | (1L << (Package - 64)) | (1L << (Protected - 64)) | (1L << (Static - 64)) | (1L << (Yield - 64)) | (1L << (String - 64)) | (1L << (TypeAlias - 64)) | (1L << (Get - 64)) | (1L << (Set - 64)) | (1L << (Require - 64)) | (1L << (Identifier - 64)) | (1L << (StringLiteral - 64)) | (1L << (BackTick - 64)))) != 0)) {
					{
					State = 943;
					expressionSequence();
					}
				}

				State = 946;
				Match(SemiColon);
				State = 948;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << RegularExpressionLiteral) | (1L << OpenBracket) | (1L << OpenParen) | (1L << OpenBrace) | (1L << PlusPlus) | (1L << MinusMinus) | (1L << Plus) | (1L << Minus) | (1L << BitNot) | (1L << Not) | (1L << LessThan) | (1L << NullLiteral) | (1L << BooleanLiteral) | (1L << DecimalLiteral) | (1L << HexIntegerLiteral) | (1L << OctalIntegerLiteral) | (1L << OctalIntegerLiteral2) | (1L << BinaryIntegerLiteral) | (1L << Break) | (1L << Do))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (Instanceof - 64)) | (1L << (Typeof - 64)) | (1L << (Case - 64)) | (1L << (Else - 64)) | (1L << (New - 64)) | (1L << (Var - 64)) | (1L << (Catch - 64)) | (1L << (Finally - 64)) | (1L << (Return - 64)) | (1L << (Void - 64)) | (1L << (Continue - 64)) | (1L << (For - 64)) | (1L << (Switch - 64)) | (1L << (While - 64)) | (1L << (Debugger - 64)) | (1L << (Function_ - 64)) | (1L << (This - 64)) | (1L << (With - 64)) | (1L << (Default - 64)) | (1L << (If - 64)) | (1L << (Throw - 64)) | (1L << (Delete - 64)) | (1L << (In - 64)) | (1L << (Try - 64)) | (1L << (From - 64)) | (1L << (ReadOnly - 64)) | (1L << (Async - 64)) | (1L << (Class - 64)) | (1L << (Enum - 64)) | (1L << (Extends - 64)) | (1L << (Super - 64)) | (1L << (Const - 64)) | (1L << (Export - 64)) | (1L << (Import - 64)) | (1L << (Implements - 64)) | (1L << (Let - 64)) | (1L << (Private - 64)) | (1L << (Public - 64)) | (1L << (Interface - 64)) | (1L << (Package - 64)) | (1L << (Protected - 64)) | (1L << (Static - 64)) | (1L << (Yield - 64)) | (1L << (String - 64)) | (1L << (TypeAlias - 64)) | (1L << (Get - 64)) | (1L << (Set - 64)) | (1L << (Require - 64)) | (1L << (Identifier - 64)) | (1L << (StringLiteral - 64)) | (1L << (BackTick - 64)))) != 0)) {
					{
					State = 947;
					expressionSequence();
					}
				}

				State = 950;
				Match(SemiColon);
				State = 952;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << RegularExpressionLiteral) | (1L << OpenBracket) | (1L << OpenParen) | (1L << OpenBrace) | (1L << PlusPlus) | (1L << MinusMinus) | (1L << Plus) | (1L << Minus) | (1L << BitNot) | (1L << Not) | (1L << LessThan) | (1L << NullLiteral) | (1L << BooleanLiteral) | (1L << DecimalLiteral) | (1L << HexIntegerLiteral) | (1L << OctalIntegerLiteral) | (1L << OctalIntegerLiteral2) | (1L << BinaryIntegerLiteral) | (1L << Break) | (1L << Do))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (Instanceof - 64)) | (1L << (Typeof - 64)) | (1L << (Case - 64)) | (1L << (Else - 64)) | (1L << (New - 64)) | (1L << (Var - 64)) | (1L << (Catch - 64)) | (1L << (Finally - 64)) | (1L << (Return - 64)) | (1L << (Void - 64)) | (1L << (Continue - 64)) | (1L << (For - 64)) | (1L << (Switch - 64)) | (1L << (While - 64)) | (1L << (Debugger - 64)) | (1L << (Function_ - 64)) | (1L << (This - 64)) | (1L << (With - 64)) | (1L << (Default - 64)) | (1L << (If - 64)) | (1L << (Throw - 64)) | (1L << (Delete - 64)) | (1L << (In - 64)) | (1L << (Try - 64)) | (1L << (From - 64)) | (1L << (ReadOnly - 64)) | (1L << (Async - 64)) | (1L << (Class - 64)) | (1L << (Enum - 64)) | (1L << (Extends - 64)) | (1L << (Super - 64)) | (1L << (Const - 64)) | (1L << (Export - 64)) | (1L << (Import - 64)) | (1L << (Implements - 64)) | (1L << (Let - 64)) | (1L << (Private - 64)) | (1L << (Public - 64)) | (1L << (Interface - 64)) | (1L << (Package - 64)) | (1L << (Protected - 64)) | (1L << (Static - 64)) | (1L << (Yield - 64)) | (1L << (String - 64)) | (1L << (TypeAlias - 64)) | (1L << (Get - 64)) | (1L << (Set - 64)) | (1L << (Require - 64)) | (1L << (Identifier - 64)) | (1L << (StringLiteral - 64)) | (1L << (BackTick - 64)))) != 0)) {
					{
					State = 951;
					expressionSequence();
					}
				}

				State = 954;
				Match(CloseParen);
				State = 955;
				statement();
				}
				break;
			case 4:
				_localctx = new ForVarStatementContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 956;
				Match(For);
				State = 957;
				Match(OpenParen);
				State = 958;
				varModifier();
				State = 959;
				variableDeclarationList();
				State = 960;
				Match(SemiColon);
				State = 962;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << RegularExpressionLiteral) | (1L << OpenBracket) | (1L << OpenParen) | (1L << OpenBrace) | (1L << PlusPlus) | (1L << MinusMinus) | (1L << Plus) | (1L << Minus) | (1L << BitNot) | (1L << Not) | (1L << LessThan) | (1L << NullLiteral) | (1L << BooleanLiteral) | (1L << DecimalLiteral) | (1L << HexIntegerLiteral) | (1L << OctalIntegerLiteral) | (1L << OctalIntegerLiteral2) | (1L << BinaryIntegerLiteral) | (1L << Break) | (1L << Do))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (Instanceof - 64)) | (1L << (Typeof - 64)) | (1L << (Case - 64)) | (1L << (Else - 64)) | (1L << (New - 64)) | (1L << (Var - 64)) | (1L << (Catch - 64)) | (1L << (Finally - 64)) | (1L << (Return - 64)) | (1L << (Void - 64)) | (1L << (Continue - 64)) | (1L << (For - 64)) | (1L << (Switch - 64)) | (1L << (While - 64)) | (1L << (Debugger - 64)) | (1L << (Function_ - 64)) | (1L << (This - 64)) | (1L << (With - 64)) | (1L << (Default - 64)) | (1L << (If - 64)) | (1L << (Throw - 64)) | (1L << (Delete - 64)) | (1L << (In - 64)) | (1L << (Try - 64)) | (1L << (From - 64)) | (1L << (ReadOnly - 64)) | (1L << (Async - 64)) | (1L << (Class - 64)) | (1L << (Enum - 64)) | (1L << (Extends - 64)) | (1L << (Super - 64)) | (1L << (Const - 64)) | (1L << (Export - 64)) | (1L << (Import - 64)) | (1L << (Implements - 64)) | (1L << (Let - 64)) | (1L << (Private - 64)) | (1L << (Public - 64)) | (1L << (Interface - 64)) | (1L << (Package - 64)) | (1L << (Protected - 64)) | (1L << (Static - 64)) | (1L << (Yield - 64)) | (1L << (String - 64)) | (1L << (TypeAlias - 64)) | (1L << (Get - 64)) | (1L << (Set - 64)) | (1L << (Require - 64)) | (1L << (Identifier - 64)) | (1L << (StringLiteral - 64)) | (1L << (BackTick - 64)))) != 0)) {
					{
					State = 961;
					expressionSequence();
					}
				}

				State = 964;
				Match(SemiColon);
				State = 966;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << RegularExpressionLiteral) | (1L << OpenBracket) | (1L << OpenParen) | (1L << OpenBrace) | (1L << PlusPlus) | (1L << MinusMinus) | (1L << Plus) | (1L << Minus) | (1L << BitNot) | (1L << Not) | (1L << LessThan) | (1L << NullLiteral) | (1L << BooleanLiteral) | (1L << DecimalLiteral) | (1L << HexIntegerLiteral) | (1L << OctalIntegerLiteral) | (1L << OctalIntegerLiteral2) | (1L << BinaryIntegerLiteral) | (1L << Break) | (1L << Do))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (Instanceof - 64)) | (1L << (Typeof - 64)) | (1L << (Case - 64)) | (1L << (Else - 64)) | (1L << (New - 64)) | (1L << (Var - 64)) | (1L << (Catch - 64)) | (1L << (Finally - 64)) | (1L << (Return - 64)) | (1L << (Void - 64)) | (1L << (Continue - 64)) | (1L << (For - 64)) | (1L << (Switch - 64)) | (1L << (While - 64)) | (1L << (Debugger - 64)) | (1L << (Function_ - 64)) | (1L << (This - 64)) | (1L << (With - 64)) | (1L << (Default - 64)) | (1L << (If - 64)) | (1L << (Throw - 64)) | (1L << (Delete - 64)) | (1L << (In - 64)) | (1L << (Try - 64)) | (1L << (From - 64)) | (1L << (ReadOnly - 64)) | (1L << (Async - 64)) | (1L << (Class - 64)) | (1L << (Enum - 64)) | (1L << (Extends - 64)) | (1L << (Super - 64)) | (1L << (Const - 64)) | (1L << (Export - 64)) | (1L << (Import - 64)) | (1L << (Implements - 64)) | (1L << (Let - 64)) | (1L << (Private - 64)) | (1L << (Public - 64)) | (1L << (Interface - 64)) | (1L << (Package - 64)) | (1L << (Protected - 64)) | (1L << (Static - 64)) | (1L << (Yield - 64)) | (1L << (String - 64)) | (1L << (TypeAlias - 64)) | (1L << (Get - 64)) | (1L << (Set - 64)) | (1L << (Require - 64)) | (1L << (Identifier - 64)) | (1L << (StringLiteral - 64)) | (1L << (BackTick - 64)))) != 0)) {
					{
					State = 965;
					expressionSequence();
					}
				}

				State = 968;
				Match(CloseParen);
				State = 969;
				statement();
				}
				break;
			case 5:
				_localctx = new ForInStatementContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 971;
				Match(For);
				State = 972;
				Match(OpenParen);
				State = 973;
				singleExpression(0);
				State = 977;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case In:
					{
					State = 974;
					Match(In);
					}
					break;
				case Identifier:
					{
					State = 975;
					Match(Identifier);
					State = 976;
					if (!(this.p("of"))) throw new FailedPredicateException(this, "this.p(\"of\")");
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 979;
				expressionSequence();
				State = 980;
				Match(CloseParen);
				State = 981;
				statement();
				}
				break;
			case 6:
				_localctx = new ForVarInStatementContext(_localctx);
				EnterOuterAlt(_localctx, 6);
				{
				State = 983;
				Match(For);
				State = 984;
				Match(OpenParen);
				State = 985;
				varModifier();
				State = 986;
				variableDeclaration();
				State = 990;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case In:
					{
					State = 987;
					Match(In);
					}
					break;
				case Identifier:
					{
					State = 988;
					Match(Identifier);
					State = 989;
					if (!(this.p("of"))) throw new FailedPredicateException(this, "this.p(\"of\")");
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 992;
				expressionSequence();
				State = 993;
				Match(CloseParen);
				State = 994;
				statement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VarModifierContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Var() { return GetToken(TypeScriptParser.Var, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Let() { return GetToken(TypeScriptParser.Let, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Const() { return GetToken(TypeScriptParser.Const, 0); }
		public VarModifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_varModifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.EnterVarModifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.ExitVarModifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypeScriptParserVisitor<TResult> typedVisitor = visitor as ITypeScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVarModifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VarModifierContext varModifier() {
		VarModifierContext _localctx = new VarModifierContext(Context, State);
		EnterRule(_localctx, 152, RULE_varModifier);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 998;
			_la = TokenStream.LA(1);
			if ( !(((((_la - 69)) & ~0x3f) == 0 && ((1L << (_la - 69)) & ((1L << (Var - 69)) | (1L << (Const - 69)) | (1L << (Let - 69)))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ContinueStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Continue() { return GetToken(TypeScriptParser.Continue, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public EosContext eos() {
			return GetRuleContext<EosContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(TypeScriptParser.Identifier, 0); }
		public ContinueStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_continueStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.EnterContinueStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.ExitContinueStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypeScriptParserVisitor<TResult> typedVisitor = visitor as ITypeScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitContinueStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ContinueStatementContext continueStatement() {
		ContinueStatementContext _localctx = new ContinueStatementContext(Context, State);
		EnterRule(_localctx, 154, RULE_continueStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1000;
			Match(Continue);
			State = 1003;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,114,Context) ) {
			case 1:
				{
				State = 1001;
				if (!(this.notLineTerminator())) throw new FailedPredicateException(this, "this.notLineTerminator()");
				State = 1002;
				Match(Identifier);
				}
				break;
			}
			State = 1005;
			eos();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BreakStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Break() { return GetToken(TypeScriptParser.Break, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public EosContext eos() {
			return GetRuleContext<EosContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(TypeScriptParser.Identifier, 0); }
		public BreakStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_breakStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.EnterBreakStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.ExitBreakStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypeScriptParserVisitor<TResult> typedVisitor = visitor as ITypeScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBreakStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BreakStatementContext breakStatement() {
		BreakStatementContext _localctx = new BreakStatementContext(Context, State);
		EnterRule(_localctx, 156, RULE_breakStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1007;
			Match(Break);
			State = 1010;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,115,Context) ) {
			case 1:
				{
				State = 1008;
				if (!(this.notLineTerminator())) throw new FailedPredicateException(this, "this.notLineTerminator()");
				State = 1009;
				Match(Identifier);
				}
				break;
			}
			State = 1012;
			eos();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReturnStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Return() { return GetToken(TypeScriptParser.Return, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public EosContext eos() {
			return GetRuleContext<EosContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionSequenceContext expressionSequence() {
			return GetRuleContext<ExpressionSequenceContext>(0);
		}
		public ReturnStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_returnStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.EnterReturnStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.ExitReturnStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypeScriptParserVisitor<TResult> typedVisitor = visitor as ITypeScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReturnStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ReturnStatementContext returnStatement() {
		ReturnStatementContext _localctx = new ReturnStatementContext(Context, State);
		EnterRule(_localctx, 158, RULE_returnStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1014;
			Match(Return);
			State = 1017;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,116,Context) ) {
			case 1:
				{
				State = 1015;
				if (!(this.notLineTerminator())) throw new FailedPredicateException(this, "this.notLineTerminator()");
				State = 1016;
				expressionSequence();
				}
				break;
			}
			State = 1019;
			eos();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class YieldStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Yield() { return GetToken(TypeScriptParser.Yield, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public EosContext eos() {
			return GetRuleContext<EosContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionSequenceContext expressionSequence() {
			return GetRuleContext<ExpressionSequenceContext>(0);
		}
		public YieldStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_yieldStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.EnterYieldStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.ExitYieldStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypeScriptParserVisitor<TResult> typedVisitor = visitor as ITypeScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitYieldStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public YieldStatementContext yieldStatement() {
		YieldStatementContext _localctx = new YieldStatementContext(Context, State);
		EnterRule(_localctx, 160, RULE_yieldStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1021;
			Match(Yield);
			State = 1024;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,117,Context) ) {
			case 1:
				{
				State = 1022;
				if (!(this.notLineTerminator())) throw new FailedPredicateException(this, "this.notLineTerminator()");
				State = 1023;
				expressionSequence();
				}
				break;
			}
			State = 1026;
			eos();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WithStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode With() { return GetToken(TypeScriptParser.With, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OpenParen() { return GetToken(TypeScriptParser.OpenParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionSequenceContext expressionSequence() {
			return GetRuleContext<ExpressionSequenceContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CloseParen() { return GetToken(TypeScriptParser.CloseParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		public WithStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_withStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.EnterWithStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.ExitWithStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypeScriptParserVisitor<TResult> typedVisitor = visitor as ITypeScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWithStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public WithStatementContext withStatement() {
		WithStatementContext _localctx = new WithStatementContext(Context, State);
		EnterRule(_localctx, 162, RULE_withStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1028;
			Match(With);
			State = 1029;
			Match(OpenParen);
			State = 1030;
			expressionSequence();
			State = 1031;
			Match(CloseParen);
			State = 1032;
			statement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SwitchStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Switch() { return GetToken(TypeScriptParser.Switch, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OpenParen() { return GetToken(TypeScriptParser.OpenParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionSequenceContext expressionSequence() {
			return GetRuleContext<ExpressionSequenceContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CloseParen() { return GetToken(TypeScriptParser.CloseParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public CaseBlockContext caseBlock() {
			return GetRuleContext<CaseBlockContext>(0);
		}
		public SwitchStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_switchStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.EnterSwitchStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.ExitSwitchStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypeScriptParserVisitor<TResult> typedVisitor = visitor as ITypeScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSwitchStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SwitchStatementContext switchStatement() {
		SwitchStatementContext _localctx = new SwitchStatementContext(Context, State);
		EnterRule(_localctx, 164, RULE_switchStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1034;
			Match(Switch);
			State = 1035;
			Match(OpenParen);
			State = 1036;
			expressionSequence();
			State = 1037;
			Match(CloseParen);
			State = 1038;
			caseBlock();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CaseBlockContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OpenBrace() { return GetToken(TypeScriptParser.OpenBrace, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CloseBrace() { return GetToken(TypeScriptParser.CloseBrace, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public CaseClausesContext[] caseClauses() {
			return GetRuleContexts<CaseClausesContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public CaseClausesContext caseClauses(int i) {
			return GetRuleContext<CaseClausesContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DefaultClauseContext defaultClause() {
			return GetRuleContext<DefaultClauseContext>(0);
		}
		public CaseBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_caseBlock; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.EnterCaseBlock(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.ExitCaseBlock(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypeScriptParserVisitor<TResult> typedVisitor = visitor as ITypeScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCaseBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CaseBlockContext caseBlock() {
		CaseBlockContext _localctx = new CaseBlockContext(Context, State);
		EnterRule(_localctx, 166, RULE_caseBlock);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1040;
			Match(OpenBrace);
			State = 1042;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Case) {
				{
				State = 1041;
				caseClauses();
				}
			}

			State = 1048;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Default) {
				{
				State = 1044;
				defaultClause();
				State = 1046;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==Case) {
					{
					State = 1045;
					caseClauses();
					}
				}

				}
			}

			State = 1050;
			Match(CloseBrace);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CaseClausesContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public CaseClauseContext[] caseClause() {
			return GetRuleContexts<CaseClauseContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public CaseClauseContext caseClause(int i) {
			return GetRuleContext<CaseClauseContext>(i);
		}
		public CaseClausesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_caseClauses; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.EnterCaseClauses(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.ExitCaseClauses(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypeScriptParserVisitor<TResult> typedVisitor = visitor as ITypeScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCaseClauses(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CaseClausesContext caseClauses() {
		CaseClausesContext _localctx = new CaseClausesContext(Context, State);
		EnterRule(_localctx, 168, RULE_caseClauses);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1053;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 1052;
				caseClause();
				}
				}
				State = 1055;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==Case );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CaseClauseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Case() { return GetToken(TypeScriptParser.Case, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionSequenceContext expressionSequence() {
			return GetRuleContext<ExpressionSequenceContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Colon() { return GetToken(TypeScriptParser.Colon, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementListContext statementList() {
			return GetRuleContext<StatementListContext>(0);
		}
		public CaseClauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_caseClause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.EnterCaseClause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.ExitCaseClause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypeScriptParserVisitor<TResult> typedVisitor = visitor as ITypeScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCaseClause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CaseClauseContext caseClause() {
		CaseClauseContext _localctx = new CaseClauseContext(Context, State);
		EnterRule(_localctx, 170, RULE_caseClause);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1057;
			Match(Case);
			State = 1058;
			expressionSequence();
			State = 1059;
			Match(Colon);
			State = 1061;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,122,Context) ) {
			case 1:
				{
				State = 1060;
				statementList();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DefaultClauseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Default() { return GetToken(TypeScriptParser.Default, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Colon() { return GetToken(TypeScriptParser.Colon, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementListContext statementList() {
			return GetRuleContext<StatementListContext>(0);
		}
		public DefaultClauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_defaultClause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.EnterDefaultClause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.ExitDefaultClause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypeScriptParserVisitor<TResult> typedVisitor = visitor as ITypeScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDefaultClause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DefaultClauseContext defaultClause() {
		DefaultClauseContext _localctx = new DefaultClauseContext(Context, State);
		EnterRule(_localctx, 172, RULE_defaultClause);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1063;
			Match(Default);
			State = 1064;
			Match(Colon);
			State = 1066;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,123,Context) ) {
			case 1:
				{
				State = 1065;
				statementList();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LabelledStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(TypeScriptParser.Identifier, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Colon() { return GetToken(TypeScriptParser.Colon, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		public LabelledStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_labelledStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.EnterLabelledStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.ExitLabelledStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypeScriptParserVisitor<TResult> typedVisitor = visitor as ITypeScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLabelledStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LabelledStatementContext labelledStatement() {
		LabelledStatementContext _localctx = new LabelledStatementContext(Context, State);
		EnterRule(_localctx, 174, RULE_labelledStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1068;
			Match(Identifier);
			State = 1069;
			Match(Colon);
			State = 1070;
			statement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ThrowStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Throw() { return GetToken(TypeScriptParser.Throw, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionSequenceContext expressionSequence() {
			return GetRuleContext<ExpressionSequenceContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public EosContext eos() {
			return GetRuleContext<EosContext>(0);
		}
		public ThrowStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_throwStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.EnterThrowStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.ExitThrowStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypeScriptParserVisitor<TResult> typedVisitor = visitor as ITypeScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitThrowStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ThrowStatementContext throwStatement() {
		ThrowStatementContext _localctx = new ThrowStatementContext(Context, State);
		EnterRule(_localctx, 176, RULE_throwStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1072;
			Match(Throw);
			State = 1073;
			if (!(this.notLineTerminator())) throw new FailedPredicateException(this, "this.notLineTerminator()");
			State = 1074;
			expressionSequence();
			State = 1075;
			eos();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TryStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Try() { return GetToken(TypeScriptParser.Try, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CatchProductionContext catchProduction() {
			return GetRuleContext<CatchProductionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FinallyProductionContext finallyProduction() {
			return GetRuleContext<FinallyProductionContext>(0);
		}
		public TryStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tryStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.EnterTryStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.ExitTryStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypeScriptParserVisitor<TResult> typedVisitor = visitor as ITypeScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTryStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TryStatementContext tryStatement() {
		TryStatementContext _localctx = new TryStatementContext(Context, State);
		EnterRule(_localctx, 178, RULE_tryStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1077;
			Match(Try);
			State = 1078;
			block();
			State = 1084;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case Catch:
				{
				State = 1079;
				catchProduction();
				State = 1081;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,124,Context) ) {
				case 1:
					{
					State = 1080;
					finallyProduction();
					}
					break;
				}
				}
				break;
			case Finally:
				{
				State = 1083;
				finallyProduction();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CatchProductionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Catch() { return GetToken(TypeScriptParser.Catch, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OpenParen() { return GetToken(TypeScriptParser.OpenParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(TypeScriptParser.Identifier, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CloseParen() { return GetToken(TypeScriptParser.CloseParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public CatchProductionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_catchProduction; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.EnterCatchProduction(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.ExitCatchProduction(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypeScriptParserVisitor<TResult> typedVisitor = visitor as ITypeScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCatchProduction(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CatchProductionContext catchProduction() {
		CatchProductionContext _localctx = new CatchProductionContext(Context, State);
		EnterRule(_localctx, 180, RULE_catchProduction);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1086;
			Match(Catch);
			State = 1087;
			Match(OpenParen);
			State = 1088;
			Match(Identifier);
			State = 1089;
			Match(CloseParen);
			State = 1090;
			block();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FinallyProductionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Finally() { return GetToken(TypeScriptParser.Finally, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public FinallyProductionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_finallyProduction; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.EnterFinallyProduction(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.ExitFinallyProduction(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypeScriptParserVisitor<TResult> typedVisitor = visitor as ITypeScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFinallyProduction(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FinallyProductionContext finallyProduction() {
		FinallyProductionContext _localctx = new FinallyProductionContext(Context, State);
		EnterRule(_localctx, 182, RULE_finallyProduction);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1092;
			Match(Finally);
			State = 1093;
			block();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DebuggerStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Debugger() { return GetToken(TypeScriptParser.Debugger, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public EosContext eos() {
			return GetRuleContext<EosContext>(0);
		}
		public DebuggerStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_debuggerStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.EnterDebuggerStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.ExitDebuggerStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypeScriptParserVisitor<TResult> typedVisitor = visitor as ITypeScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDebuggerStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DebuggerStatementContext debuggerStatement() {
		DebuggerStatementContext _localctx = new DebuggerStatementContext(Context, State);
		EnterRule(_localctx, 184, RULE_debuggerStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1095;
			Match(Debugger);
			State = 1096;
			eos();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Function_() { return GetToken(TypeScriptParser.Function_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(TypeScriptParser.Identifier, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public CallSignatureContext callSignature() {
			return GetRuleContext<CallSignatureContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SemiColon() { return GetToken(TypeScriptParser.SemiColon, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OpenBrace() { return GetToken(TypeScriptParser.OpenBrace, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FunctionBodyContext functionBody() {
			return GetRuleContext<FunctionBodyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CloseBrace() { return GetToken(TypeScriptParser.CloseBrace, 0); }
		public FunctionDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.EnterFunctionDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.ExitFunctionDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypeScriptParserVisitor<TResult> typedVisitor = visitor as ITypeScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionDeclarationContext functionDeclaration() {
		FunctionDeclarationContext _localctx = new FunctionDeclarationContext(Context, State);
		EnterRule(_localctx, 186, RULE_functionDeclaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1098;
			Match(Function_);
			State = 1099;
			Match(Identifier);
			State = 1100;
			callSignature();
			State = 1106;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case OpenBrace:
				{
				{
				State = 1101;
				Match(OpenBrace);
				State = 1102;
				functionBody();
				State = 1103;
				Match(CloseBrace);
				}
				}
				break;
			case SemiColon:
				{
				State = 1105;
				Match(SemiColon);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClassDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Class() { return GetToken(TypeScriptParser.Class, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(TypeScriptParser.Identifier, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ClassHeritageContext classHeritage() {
			return GetRuleContext<ClassHeritageContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ClassTailContext classTail() {
			return GetRuleContext<ClassTailContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Abstract() { return GetToken(TypeScriptParser.Abstract, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeParametersContext typeParameters() {
			return GetRuleContext<TypeParametersContext>(0);
		}
		public ClassDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_classDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.EnterClassDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.ExitClassDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypeScriptParserVisitor<TResult> typedVisitor = visitor as ITypeScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClassDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ClassDeclarationContext classDeclaration() {
		ClassDeclarationContext _localctx = new ClassDeclarationContext(Context, State);
		EnterRule(_localctx, 188, RULE_classDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1109;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Abstract) {
				{
				State = 1108;
				Match(Abstract);
				}
			}

			State = 1111;
			Match(Class);
			State = 1112;
			Match(Identifier);
			State = 1114;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LessThan) {
				{
				State = 1113;
				typeParameters();
				}
			}

			State = 1116;
			classHeritage();
			State = 1117;
			classTail();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClassHeritageContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ClassExtendsClauseContext classExtendsClause() {
			return GetRuleContext<ClassExtendsClauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ImplementsClauseContext implementsClause() {
			return GetRuleContext<ImplementsClauseContext>(0);
		}
		public ClassHeritageContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_classHeritage; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.EnterClassHeritage(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.ExitClassHeritage(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypeScriptParserVisitor<TResult> typedVisitor = visitor as ITypeScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClassHeritage(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ClassHeritageContext classHeritage() {
		ClassHeritageContext _localctx = new ClassHeritageContext(Context, State);
		EnterRule(_localctx, 190, RULE_classHeritage);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1120;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Extends) {
				{
				State = 1119;
				classExtendsClause();
				}
			}

			State = 1123;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Implements) {
				{
				State = 1122;
				implementsClause();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClassTailContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OpenBrace() { return GetToken(TypeScriptParser.OpenBrace, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CloseBrace() { return GetToken(TypeScriptParser.CloseBrace, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ClassElementContext[] classElement() {
			return GetRuleContexts<ClassElementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ClassElementContext classElement(int i) {
			return GetRuleContext<ClassElementContext>(i);
		}
		public ClassTailContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_classTail; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.EnterClassTail(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.ExitClassTail(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypeScriptParserVisitor<TResult> typedVisitor = visitor as ITypeScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClassTail(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ClassTailContext classTail() {
		ClassTailContext _localctx = new ClassTailContext(Context, State);
		EnterRule(_localctx, 192, RULE_classTail);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1125;
			Match(OpenBrace);
			State = 1129;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,131,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 1126;
					classElement();
					}
					} 
				}
				State = 1131;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,131,Context);
			}
			State = 1132;
			Match(CloseBrace);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClassExtendsClauseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Extends() { return GetToken(TypeScriptParser.Extends, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeReferenceContext typeReference() {
			return GetRuleContext<TypeReferenceContext>(0);
		}
		public ClassExtendsClauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_classExtendsClause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.EnterClassExtendsClause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.ExitClassExtendsClause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypeScriptParserVisitor<TResult> typedVisitor = visitor as ITypeScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClassExtendsClause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ClassExtendsClauseContext classExtendsClause() {
		ClassExtendsClauseContext _localctx = new ClassExtendsClauseContext(Context, State);
		EnterRule(_localctx, 194, RULE_classExtendsClause);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1134;
			Match(Extends);
			State = 1135;
			typeReference();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ImplementsClauseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Implements() { return GetToken(TypeScriptParser.Implements, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ClassOrInterfaceTypeListContext classOrInterfaceTypeList() {
			return GetRuleContext<ClassOrInterfaceTypeListContext>(0);
		}
		public ImplementsClauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_implementsClause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.EnterImplementsClause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.ExitImplementsClause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypeScriptParserVisitor<TResult> typedVisitor = visitor as ITypeScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitImplementsClause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ImplementsClauseContext implementsClause() {
		ImplementsClauseContext _localctx = new ImplementsClauseContext(Context, State);
		EnterRule(_localctx, 196, RULE_implementsClause);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1137;
			Match(Implements);
			State = 1138;
			classOrInterfaceTypeList();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClassElementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ConstructorDeclarationContext constructorDeclaration() {
			return GetRuleContext<ConstructorDeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PropertyMemberDeclarationContext propertyMemberDeclaration() {
			return GetRuleContext<PropertyMemberDeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DecoratorListContext decoratorList() {
			return GetRuleContext<DecoratorListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IndexMemberDeclarationContext indexMemberDeclaration() {
			return GetRuleContext<IndexMemberDeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		public ClassElementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_classElement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.EnterClassElement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.ExitClassElement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypeScriptParserVisitor<TResult> typedVisitor = visitor as ITypeScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClassElement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ClassElementContext classElement() {
		ClassElementContext _localctx = new ClassElementContext(Context, State);
		EnterRule(_localctx, 198, RULE_classElement);
		int _la;
		try {
			State = 1147;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,133,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1140;
				constructorDeclaration();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1142;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==At) {
					{
					State = 1141;
					decoratorList();
					}
				}

				State = 1144;
				propertyMemberDeclaration();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1145;
				indexMemberDeclaration();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1146;
				statement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PropertyMemberDeclarationContext : ParserRuleContext {
		public PropertyMemberDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_propertyMemberDeclaration; } }
	 
		public PropertyMemberDeclarationContext() { }
		public virtual void CopyFrom(PropertyMemberDeclarationContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class PropertyDeclarationExpressionContext : PropertyMemberDeclarationContext {
		[System.Diagnostics.DebuggerNonUserCode] public PropertyMemberBaseContext propertyMemberBase() {
			return GetRuleContext<PropertyMemberBaseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PropertyNameContext propertyName() {
			return GetRuleContext<PropertyNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SemiColon() { return GetToken(TypeScriptParser.SemiColon, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode QuestionMark() { return GetToken(TypeScriptParser.QuestionMark, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeAnnotationContext typeAnnotation() {
			return GetRuleContext<TypeAnnotationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public InitializerContext initializer() {
			return GetRuleContext<InitializerContext>(0);
		}
		public PropertyDeclarationExpressionContext(PropertyMemberDeclarationContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.EnterPropertyDeclarationExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.ExitPropertyDeclarationExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypeScriptParserVisitor<TResult> typedVisitor = visitor as ITypeScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPropertyDeclarationExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class MethodDeclarationExpressionContext : PropertyMemberDeclarationContext {
		[System.Diagnostics.DebuggerNonUserCode] public PropertyMemberBaseContext propertyMemberBase() {
			return GetRuleContext<PropertyMemberBaseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PropertyNameContext propertyName() {
			return GetRuleContext<PropertyNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CallSignatureContext callSignature() {
			return GetRuleContext<CallSignatureContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SemiColon() { return GetToken(TypeScriptParser.SemiColon, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OpenBrace() { return GetToken(TypeScriptParser.OpenBrace, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FunctionBodyContext functionBody() {
			return GetRuleContext<FunctionBodyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CloseBrace() { return GetToken(TypeScriptParser.CloseBrace, 0); }
		public MethodDeclarationExpressionContext(PropertyMemberDeclarationContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.EnterMethodDeclarationExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.ExitMethodDeclarationExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypeScriptParserVisitor<TResult> typedVisitor = visitor as ITypeScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMethodDeclarationExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class GetterSetterDeclarationExpressionContext : PropertyMemberDeclarationContext {
		[System.Diagnostics.DebuggerNonUserCode] public PropertyMemberBaseContext propertyMemberBase() {
			return GetRuleContext<PropertyMemberBaseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public GetAccessorContext getAccessor() {
			return GetRuleContext<GetAccessorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SetAccessorContext setAccessor() {
			return GetRuleContext<SetAccessorContext>(0);
		}
		public GetterSetterDeclarationExpressionContext(PropertyMemberDeclarationContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.EnterGetterSetterDeclarationExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.ExitGetterSetterDeclarationExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypeScriptParserVisitor<TResult> typedVisitor = visitor as ITypeScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGetterSetterDeclarationExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AbstractMemberDeclarationContext : PropertyMemberDeclarationContext {
		[System.Diagnostics.DebuggerNonUserCode] public AbstractDeclarationContext abstractDeclaration() {
			return GetRuleContext<AbstractDeclarationContext>(0);
		}
		public AbstractMemberDeclarationContext(PropertyMemberDeclarationContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.EnterAbstractMemberDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.ExitAbstractMemberDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypeScriptParserVisitor<TResult> typedVisitor = visitor as ITypeScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAbstractMemberDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PropertyMemberDeclarationContext propertyMemberDeclaration() {
		PropertyMemberDeclarationContext _localctx = new PropertyMemberDeclarationContext(Context, State);
		EnterRule(_localctx, 200, RULE_propertyMemberDeclaration);
		int _la;
		try {
			State = 1178;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,139,Context) ) {
			case 1:
				_localctx = new PropertyDeclarationExpressionContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 1149;
				propertyMemberBase();
				State = 1150;
				propertyName();
				State = 1152;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==QuestionMark) {
					{
					State = 1151;
					Match(QuestionMark);
					}
				}

				State = 1155;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==Colon) {
					{
					State = 1154;
					typeAnnotation();
					}
				}

				State = 1158;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==Assign) {
					{
					State = 1157;
					initializer();
					}
				}

				State = 1160;
				Match(SemiColon);
				}
				break;
			case 2:
				_localctx = new MethodDeclarationExpressionContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 1162;
				propertyMemberBase();
				State = 1163;
				propertyName();
				State = 1164;
				callSignature();
				State = 1170;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case OpenBrace:
					{
					{
					State = 1165;
					Match(OpenBrace);
					State = 1166;
					functionBody();
					State = 1167;
					Match(CloseBrace);
					}
					}
					break;
				case SemiColon:
					{
					State = 1169;
					Match(SemiColon);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 3:
				_localctx = new GetterSetterDeclarationExpressionContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 1172;
				propertyMemberBase();
				State = 1175;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case Get:
					{
					State = 1173;
					getAccessor();
					}
					break;
				case Set:
					{
					State = 1174;
					setAccessor();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 4:
				_localctx = new AbstractMemberDeclarationContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 1177;
				abstractDeclaration();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PropertyMemberBaseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Async() { return GetToken(TypeScriptParser.Async, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public AccessibilityModifierContext accessibilityModifier() {
			return GetRuleContext<AccessibilityModifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Static() { return GetToken(TypeScriptParser.Static, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ReadOnly() { return GetToken(TypeScriptParser.ReadOnly, 0); }
		public PropertyMemberBaseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_propertyMemberBase; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.EnterPropertyMemberBase(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.ExitPropertyMemberBase(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypeScriptParserVisitor<TResult> typedVisitor = visitor as ITypeScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPropertyMemberBase(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PropertyMemberBaseContext propertyMemberBase() {
		PropertyMemberBaseContext _localctx = new PropertyMemberBaseContext(Context, State);
		EnterRule(_localctx, 202, RULE_propertyMemberBase);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1181;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,140,Context) ) {
			case 1:
				{
				State = 1180;
				Match(Async);
				}
				break;
			}
			State = 1184;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,141,Context) ) {
			case 1:
				{
				State = 1183;
				accessibilityModifier();
				}
				break;
			}
			State = 1187;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,142,Context) ) {
			case 1:
				{
				State = 1186;
				Match(Static);
				}
				break;
			}
			State = 1190;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,143,Context) ) {
			case 1:
				{
				State = 1189;
				Match(ReadOnly);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IndexMemberDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IndexSignatureContext indexSignature() {
			return GetRuleContext<IndexSignatureContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SemiColon() { return GetToken(TypeScriptParser.SemiColon, 0); }
		public IndexMemberDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_indexMemberDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.EnterIndexMemberDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.ExitIndexMemberDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypeScriptParserVisitor<TResult> typedVisitor = visitor as ITypeScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIndexMemberDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IndexMemberDeclarationContext indexMemberDeclaration() {
		IndexMemberDeclarationContext _localctx = new IndexMemberDeclarationContext(Context, State);
		EnterRule(_localctx, 204, RULE_indexMemberDeclaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1192;
			indexSignature();
			State = 1193;
			Match(SemiColon);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GeneratorMethodContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(TypeScriptParser.Identifier, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OpenParen() { return GetToken(TypeScriptParser.OpenParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CloseParen() { return GetToken(TypeScriptParser.CloseParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OpenBrace() { return GetToken(TypeScriptParser.OpenBrace, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FunctionBodyContext functionBody() {
			return GetRuleContext<FunctionBodyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CloseBrace() { return GetToken(TypeScriptParser.CloseBrace, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Multiply() { return GetToken(TypeScriptParser.Multiply, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FormalParameterListContext formalParameterList() {
			return GetRuleContext<FormalParameterListContext>(0);
		}
		public GeneratorMethodContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_generatorMethod; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.EnterGeneratorMethod(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.ExitGeneratorMethod(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypeScriptParserVisitor<TResult> typedVisitor = visitor as ITypeScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGeneratorMethod(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public GeneratorMethodContext generatorMethod() {
		GeneratorMethodContext _localctx = new GeneratorMethodContext(Context, State);
		EnterRule(_localctx, 206, RULE_generatorMethod);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1196;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Multiply) {
				{
				State = 1195;
				Match(Multiply);
				}
			}

			State = 1198;
			Match(Identifier);
			State = 1199;
			Match(OpenParen);
			State = 1201;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << OpenBracket) | (1L << OpenBrace) | (1L << Ellipsis))) != 0) || ((((_la - 101)) & ~0x3f) == 0 && ((1L << (_la - 101)) & ((1L << (Private - 101)) | (1L << (Public - 101)) | (1L << (Protected - 101)) | (1L << (TypeAlias - 101)) | (1L << (Require - 101)) | (1L << (At - 101)) | (1L << (Identifier - 101)))) != 0)) {
				{
				State = 1200;
				formalParameterList();
				}
			}

			State = 1203;
			Match(CloseParen);
			State = 1204;
			Match(OpenBrace);
			State = 1205;
			functionBody();
			State = 1206;
			Match(CloseBrace);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GeneratorFunctionDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Function_() { return GetToken(TypeScriptParser.Function_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Multiply() { return GetToken(TypeScriptParser.Multiply, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OpenParen() { return GetToken(TypeScriptParser.OpenParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CloseParen() { return GetToken(TypeScriptParser.CloseParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OpenBrace() { return GetToken(TypeScriptParser.OpenBrace, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FunctionBodyContext functionBody() {
			return GetRuleContext<FunctionBodyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CloseBrace() { return GetToken(TypeScriptParser.CloseBrace, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(TypeScriptParser.Identifier, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FormalParameterListContext formalParameterList() {
			return GetRuleContext<FormalParameterListContext>(0);
		}
		public GeneratorFunctionDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_generatorFunctionDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.EnterGeneratorFunctionDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.ExitGeneratorFunctionDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypeScriptParserVisitor<TResult> typedVisitor = visitor as ITypeScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGeneratorFunctionDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public GeneratorFunctionDeclarationContext generatorFunctionDeclaration() {
		GeneratorFunctionDeclarationContext _localctx = new GeneratorFunctionDeclarationContext(Context, State);
		EnterRule(_localctx, 208, RULE_generatorFunctionDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1208;
			Match(Function_);
			State = 1209;
			Match(Multiply);
			State = 1211;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Identifier) {
				{
				State = 1210;
				Match(Identifier);
				}
			}

			State = 1213;
			Match(OpenParen);
			State = 1215;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << OpenBracket) | (1L << OpenBrace) | (1L << Ellipsis))) != 0) || ((((_la - 101)) & ~0x3f) == 0 && ((1L << (_la - 101)) & ((1L << (Private - 101)) | (1L << (Public - 101)) | (1L << (Protected - 101)) | (1L << (TypeAlias - 101)) | (1L << (Require - 101)) | (1L << (At - 101)) | (1L << (Identifier - 101)))) != 0)) {
				{
				State = 1214;
				formalParameterList();
				}
			}

			State = 1217;
			Match(CloseParen);
			State = 1218;
			Match(OpenBrace);
			State = 1219;
			functionBody();
			State = 1220;
			Match(CloseBrace);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GeneratorBlockContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OpenBrace() { return GetToken(TypeScriptParser.OpenBrace, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public GeneratorDefinitionContext[] generatorDefinition() {
			return GetRuleContexts<GeneratorDefinitionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public GeneratorDefinitionContext generatorDefinition(int i) {
			return GetRuleContext<GeneratorDefinitionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CloseBrace() { return GetToken(TypeScriptParser.CloseBrace, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Comma() { return GetTokens(TypeScriptParser.Comma); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comma(int i) {
			return GetToken(TypeScriptParser.Comma, i);
		}
		public GeneratorBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_generatorBlock; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.EnterGeneratorBlock(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.ExitGeneratorBlock(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypeScriptParserVisitor<TResult> typedVisitor = visitor as ITypeScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGeneratorBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public GeneratorBlockContext generatorBlock() {
		GeneratorBlockContext _localctx = new GeneratorBlockContext(Context, State);
		EnterRule(_localctx, 210, RULE_generatorBlock);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1222;
			Match(OpenBrace);
			State = 1223;
			generatorDefinition();
			State = 1228;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,148,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 1224;
					Match(Comma);
					State = 1225;
					generatorDefinition();
					}
					} 
				}
				State = 1230;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,148,Context);
			}
			State = 1232;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Comma) {
				{
				State = 1231;
				Match(Comma);
				}
			}

			State = 1234;
			Match(CloseBrace);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GeneratorDefinitionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Multiply() { return GetToken(TypeScriptParser.Multiply, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IteratorDefinitionContext iteratorDefinition() {
			return GetRuleContext<IteratorDefinitionContext>(0);
		}
		public GeneratorDefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_generatorDefinition; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.EnterGeneratorDefinition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.ExitGeneratorDefinition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypeScriptParserVisitor<TResult> typedVisitor = visitor as ITypeScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGeneratorDefinition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public GeneratorDefinitionContext generatorDefinition() {
		GeneratorDefinitionContext _localctx = new GeneratorDefinitionContext(Context, State);
		EnterRule(_localctx, 212, RULE_generatorDefinition);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1236;
			Match(Multiply);
			State = 1237;
			iteratorDefinition();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IteratorBlockContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OpenBrace() { return GetToken(TypeScriptParser.OpenBrace, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IteratorDefinitionContext[] iteratorDefinition() {
			return GetRuleContexts<IteratorDefinitionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IteratorDefinitionContext iteratorDefinition(int i) {
			return GetRuleContext<IteratorDefinitionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CloseBrace() { return GetToken(TypeScriptParser.CloseBrace, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Comma() { return GetTokens(TypeScriptParser.Comma); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comma(int i) {
			return GetToken(TypeScriptParser.Comma, i);
		}
		public IteratorBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_iteratorBlock; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.EnterIteratorBlock(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.ExitIteratorBlock(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypeScriptParserVisitor<TResult> typedVisitor = visitor as ITypeScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIteratorBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IteratorBlockContext iteratorBlock() {
		IteratorBlockContext _localctx = new IteratorBlockContext(Context, State);
		EnterRule(_localctx, 214, RULE_iteratorBlock);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1239;
			Match(OpenBrace);
			State = 1240;
			iteratorDefinition();
			State = 1245;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,150,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 1241;
					Match(Comma);
					State = 1242;
					iteratorDefinition();
					}
					} 
				}
				State = 1247;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,150,Context);
			}
			State = 1249;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Comma) {
				{
				State = 1248;
				Match(Comma);
				}
			}

			State = 1251;
			Match(CloseBrace);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IteratorDefinitionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OpenBracket() { return GetToken(TypeScriptParser.OpenBracket, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SingleExpressionContext singleExpression() {
			return GetRuleContext<SingleExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CloseBracket() { return GetToken(TypeScriptParser.CloseBracket, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OpenParen() { return GetToken(TypeScriptParser.OpenParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CloseParen() { return GetToken(TypeScriptParser.CloseParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OpenBrace() { return GetToken(TypeScriptParser.OpenBrace, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FunctionBodyContext functionBody() {
			return GetRuleContext<FunctionBodyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CloseBrace() { return GetToken(TypeScriptParser.CloseBrace, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FormalParameterListContext formalParameterList() {
			return GetRuleContext<FormalParameterListContext>(0);
		}
		public IteratorDefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_iteratorDefinition; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.EnterIteratorDefinition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.ExitIteratorDefinition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypeScriptParserVisitor<TResult> typedVisitor = visitor as ITypeScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIteratorDefinition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IteratorDefinitionContext iteratorDefinition() {
		IteratorDefinitionContext _localctx = new IteratorDefinitionContext(Context, State);
		EnterRule(_localctx, 216, RULE_iteratorDefinition);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1253;
			Match(OpenBracket);
			State = 1254;
			singleExpression(0);
			State = 1255;
			Match(CloseBracket);
			State = 1256;
			Match(OpenParen);
			State = 1258;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << OpenBracket) | (1L << OpenBrace) | (1L << Ellipsis))) != 0) || ((((_la - 101)) & ~0x3f) == 0 && ((1L << (_la - 101)) & ((1L << (Private - 101)) | (1L << (Public - 101)) | (1L << (Protected - 101)) | (1L << (TypeAlias - 101)) | (1L << (Require - 101)) | (1L << (At - 101)) | (1L << (Identifier - 101)))) != 0)) {
				{
				State = 1257;
				formalParameterList();
				}
			}

			State = 1260;
			Match(CloseParen);
			State = 1261;
			Match(OpenBrace);
			State = 1262;
			functionBody();
			State = 1263;
			Match(CloseBrace);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FormalParameterListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FormalParameterArgContext[] formalParameterArg() {
			return GetRuleContexts<FormalParameterArgContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public FormalParameterArgContext formalParameterArg(int i) {
			return GetRuleContext<FormalParameterArgContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Comma() { return GetTokens(TypeScriptParser.Comma); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comma(int i) {
			return GetToken(TypeScriptParser.Comma, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LastFormalParameterArgContext lastFormalParameterArg() {
			return GetRuleContext<LastFormalParameterArgContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArrayLiteralContext arrayLiteral() {
			return GetRuleContext<ArrayLiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ObjectLiteralContext objectLiteral() {
			return GetRuleContext<ObjectLiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Colon() { return GetToken(TypeScriptParser.Colon, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FormalParameterListContext formalParameterList() {
			return GetRuleContext<FormalParameterListContext>(0);
		}
		public FormalParameterListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_formalParameterList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.EnterFormalParameterList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.ExitFormalParameterList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypeScriptParserVisitor<TResult> typedVisitor = visitor as ITypeScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFormalParameterList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FormalParameterListContext formalParameterList() {
		FormalParameterListContext _localctx = new FormalParameterListContext(Context, State);
		EnterRule(_localctx, 218, RULE_formalParameterList);
		int _la;
		try {
			int _alt;
			State = 1284;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case Private:
			case Public:
			case Protected:
			case TypeAlias:
			case Require:
			case At:
			case Identifier:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1265;
				formalParameterArg();
				State = 1270;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,153,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 1266;
						Match(Comma);
						State = 1267;
						formalParameterArg();
						}
						} 
					}
					State = 1272;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,153,Context);
				}
				State = 1275;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==Comma) {
					{
					State = 1273;
					Match(Comma);
					State = 1274;
					lastFormalParameterArg();
					}
				}

				}
				break;
			case Ellipsis:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1277;
				lastFormalParameterArg();
				}
				break;
			case OpenBracket:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1278;
				arrayLiteral();
				}
				break;
			case OpenBrace:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1279;
				objectLiteral();
				State = 1282;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==Colon) {
					{
					State = 1280;
					Match(Colon);
					State = 1281;
					formalParameterList();
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FormalParameterArgContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierOrKeyWordContext identifierOrKeyWord() {
			return GetRuleContext<IdentifierOrKeyWordContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DecoratorContext decorator() {
			return GetRuleContext<DecoratorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AccessibilityModifierContext accessibilityModifier() {
			return GetRuleContext<AccessibilityModifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode QuestionMark() { return GetToken(TypeScriptParser.QuestionMark, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeAnnotationContext typeAnnotation() {
			return GetRuleContext<TypeAnnotationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Assign() { return GetToken(TypeScriptParser.Assign, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SingleExpressionContext singleExpression() {
			return GetRuleContext<SingleExpressionContext>(0);
		}
		public FormalParameterArgContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_formalParameterArg; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.EnterFormalParameterArg(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.ExitFormalParameterArg(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypeScriptParserVisitor<TResult> typedVisitor = visitor as ITypeScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFormalParameterArg(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FormalParameterArgContext formalParameterArg() {
		FormalParameterArgContext _localctx = new FormalParameterArgContext(Context, State);
		EnterRule(_localctx, 220, RULE_formalParameterArg);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1287;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==At) {
				{
				State = 1286;
				decorator();
				}
			}

			State = 1290;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (((((_la - 101)) & ~0x3f) == 0 && ((1L << (_la - 101)) & ((1L << (Private - 101)) | (1L << (Public - 101)) | (1L << (Protected - 101)))) != 0)) {
				{
				State = 1289;
				accessibilityModifier();
				}
			}

			State = 1292;
			identifierOrKeyWord();
			State = 1294;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==QuestionMark) {
				{
				State = 1293;
				Match(QuestionMark);
				}
			}

			State = 1297;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Colon) {
				{
				State = 1296;
				typeAnnotation();
				}
			}

			State = 1301;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Assign) {
				{
				State = 1299;
				Match(Assign);
				State = 1300;
				singleExpression(0);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LastFormalParameterArgContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Ellipsis() { return GetToken(TypeScriptParser.Ellipsis, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(TypeScriptParser.Identifier, 0); }
		public LastFormalParameterArgContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lastFormalParameterArg; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.EnterLastFormalParameterArg(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.ExitLastFormalParameterArg(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypeScriptParserVisitor<TResult> typedVisitor = visitor as ITypeScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLastFormalParameterArg(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LastFormalParameterArgContext lastFormalParameterArg() {
		LastFormalParameterArgContext _localctx = new LastFormalParameterArgContext(Context, State);
		EnterRule(_localctx, 222, RULE_lastFormalParameterArg);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1303;
			Match(Ellipsis);
			State = 1304;
			Match(Identifier);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionBodyContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SourceElementsContext sourceElements() {
			return GetRuleContext<SourceElementsContext>(0);
		}
		public FunctionBodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionBody; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.EnterFunctionBody(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.ExitFunctionBody(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypeScriptParserVisitor<TResult> typedVisitor = visitor as ITypeScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionBody(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionBodyContext functionBody() {
		FunctionBodyContext _localctx = new FunctionBodyContext(Context, State);
		EnterRule(_localctx, 224, RULE_functionBody);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1307;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,162,Context) ) {
			case 1:
				{
				State = 1306;
				sourceElements();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SourceElementsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SourceElementContext[] sourceElement() {
			return GetRuleContexts<SourceElementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SourceElementContext sourceElement(int i) {
			return GetRuleContext<SourceElementContext>(i);
		}
		public SourceElementsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sourceElements; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.EnterSourceElements(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.ExitSourceElements(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypeScriptParserVisitor<TResult> typedVisitor = visitor as ITypeScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSourceElements(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SourceElementsContext sourceElements() {
		SourceElementsContext _localctx = new SourceElementsContext(Context, State);
		EnterRule(_localctx, 226, RULE_sourceElements);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1310;
			ErrorHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 1309;
					sourceElement();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 1312;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,163,Context);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArrayLiteralContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OpenBracket() { return GetToken(TypeScriptParser.OpenBracket, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CloseBracket() { return GetToken(TypeScriptParser.CloseBracket, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ElementListContext elementList() {
			return GetRuleContext<ElementListContext>(0);
		}
		public ArrayLiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arrayLiteral; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.EnterArrayLiteral(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.ExitArrayLiteral(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypeScriptParserVisitor<TResult> typedVisitor = visitor as ITypeScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArrayLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArrayLiteralContext arrayLiteral() {
		ArrayLiteralContext _localctx = new ArrayLiteralContext(Context, State);
		EnterRule(_localctx, 228, RULE_arrayLiteral);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 1314;
			Match(OpenBracket);
			State = 1316;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << RegularExpressionLiteral) | (1L << OpenBracket) | (1L << OpenParen) | (1L << OpenBrace) | (1L << Ellipsis) | (1L << PlusPlus) | (1L << MinusMinus) | (1L << Plus) | (1L << Minus) | (1L << BitNot) | (1L << Not) | (1L << LessThan) | (1L << NullLiteral) | (1L << BooleanLiteral) | (1L << DecimalLiteral) | (1L << HexIntegerLiteral) | (1L << OctalIntegerLiteral) | (1L << OctalIntegerLiteral2) | (1L << BinaryIntegerLiteral) | (1L << Break) | (1L << Do))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (Instanceof - 64)) | (1L << (Typeof - 64)) | (1L << (Case - 64)) | (1L << (Else - 64)) | (1L << (New - 64)) | (1L << (Var - 64)) | (1L << (Catch - 64)) | (1L << (Finally - 64)) | (1L << (Return - 64)) | (1L << (Void - 64)) | (1L << (Continue - 64)) | (1L << (For - 64)) | (1L << (Switch - 64)) | (1L << (While - 64)) | (1L << (Debugger - 64)) | (1L << (Function_ - 64)) | (1L << (This - 64)) | (1L << (With - 64)) | (1L << (Default - 64)) | (1L << (If - 64)) | (1L << (Throw - 64)) | (1L << (Delete - 64)) | (1L << (In - 64)) | (1L << (Try - 64)) | (1L << (From - 64)) | (1L << (ReadOnly - 64)) | (1L << (Async - 64)) | (1L << (Class - 64)) | (1L << (Enum - 64)) | (1L << (Extends - 64)) | (1L << (Super - 64)) | (1L << (Const - 64)) | (1L << (Export - 64)) | (1L << (Import - 64)) | (1L << (Implements - 64)) | (1L << (Let - 64)) | (1L << (Private - 64)) | (1L << (Public - 64)) | (1L << (Interface - 64)) | (1L << (Package - 64)) | (1L << (Protected - 64)) | (1L << (Static - 64)) | (1L << (Yield - 64)) | (1L << (String - 64)) | (1L << (TypeAlias - 64)) | (1L << (Get - 64)) | (1L << (Set - 64)) | (1L << (Require - 64)) | (1L << (Identifier - 64)) | (1L << (StringLiteral - 64)) | (1L << (BackTick - 64)))) != 0)) {
				{
				State = 1315;
				elementList();
				}
			}

			State = 1318;
			Match(CloseBracket);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ElementListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ArrayElementContext[] arrayElement() {
			return GetRuleContexts<ArrayElementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArrayElementContext arrayElement(int i) {
			return GetRuleContext<ArrayElementContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Comma() { return GetTokens(TypeScriptParser.Comma); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comma(int i) {
			return GetToken(TypeScriptParser.Comma, i);
		}
		public ElementListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_elementList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.EnterElementList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.ExitElementList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypeScriptParserVisitor<TResult> typedVisitor = visitor as ITypeScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitElementList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ElementListContext elementList() {
		ElementListContext _localctx = new ElementListContext(Context, State);
		EnterRule(_localctx, 230, RULE_elementList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1320;
			arrayElement();
			State = 1329;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==Comma) {
				{
				{
				State = 1322;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 1321;
					Match(Comma);
					}
					}
					State = 1324;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( _la==Comma );
				State = 1326;
				arrayElement();
				}
				}
				State = 1331;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArrayElementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SingleExpressionContext singleExpression() {
			return GetRuleContext<SingleExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(TypeScriptParser.Identifier, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Ellipsis() { return GetToken(TypeScriptParser.Ellipsis, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comma() { return GetToken(TypeScriptParser.Comma, 0); }
		public ArrayElementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arrayElement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.EnterArrayElement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.ExitArrayElement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypeScriptParserVisitor<TResult> typedVisitor = visitor as ITypeScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArrayElement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArrayElementContext arrayElement() {
		ArrayElementContext _localctx = new ArrayElementContext(Context, State);
		EnterRule(_localctx, 232, RULE_arrayElement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1333;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Ellipsis) {
				{
				State = 1332;
				Match(Ellipsis);
				}
			}

			State = 1337;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,168,Context) ) {
			case 1:
				{
				State = 1335;
				singleExpression(0);
				}
				break;
			case 2:
				{
				State = 1336;
				Match(Identifier);
				}
				break;
			}
			State = 1340;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,169,Context) ) {
			case 1:
				{
				State = 1339;
				Match(Comma);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ObjectLiteralContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OpenBrace() { return GetToken(TypeScriptParser.OpenBrace, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CloseBrace() { return GetToken(TypeScriptParser.CloseBrace, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public PropertyAssignmentContext[] propertyAssignment() {
			return GetRuleContexts<PropertyAssignmentContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public PropertyAssignmentContext propertyAssignment(int i) {
			return GetRuleContext<PropertyAssignmentContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Comma() { return GetTokens(TypeScriptParser.Comma); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comma(int i) {
			return GetToken(TypeScriptParser.Comma, i);
		}
		public ObjectLiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_objectLiteral; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.EnterObjectLiteral(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.ExitObjectLiteral(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypeScriptParserVisitor<TResult> typedVisitor = visitor as ITypeScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitObjectLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ObjectLiteralContext objectLiteral() {
		ObjectLiteralContext _localctx = new ObjectLiteralContext(Context, State);
		EnterRule(_localctx, 234, RULE_objectLiteral);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1342;
			Match(OpenBrace);
			State = 1354;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << OpenBracket) | (1L << Ellipsis) | (1L << Multiply) | (1L << NullLiteral) | (1L << BooleanLiteral) | (1L << DecimalLiteral) | (1L << HexIntegerLiteral) | (1L << OctalIntegerLiteral) | (1L << OctalIntegerLiteral2) | (1L << BinaryIntegerLiteral) | (1L << Break) | (1L << Do))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (Instanceof - 64)) | (1L << (Typeof - 64)) | (1L << (Case - 64)) | (1L << (Else - 64)) | (1L << (New - 64)) | (1L << (Var - 64)) | (1L << (Catch - 64)) | (1L << (Finally - 64)) | (1L << (Return - 64)) | (1L << (Void - 64)) | (1L << (Continue - 64)) | (1L << (For - 64)) | (1L << (Switch - 64)) | (1L << (While - 64)) | (1L << (Debugger - 64)) | (1L << (Function_ - 64)) | (1L << (This - 64)) | (1L << (With - 64)) | (1L << (Default - 64)) | (1L << (If - 64)) | (1L << (Throw - 64)) | (1L << (Delete - 64)) | (1L << (In - 64)) | (1L << (Try - 64)) | (1L << (From - 64)) | (1L << (ReadOnly - 64)) | (1L << (Async - 64)) | (1L << (Class - 64)) | (1L << (Enum - 64)) | (1L << (Extends - 64)) | (1L << (Super - 64)) | (1L << (Const - 64)) | (1L << (Export - 64)) | (1L << (Import - 64)) | (1L << (Implements - 64)) | (1L << (Let - 64)) | (1L << (Private - 64)) | (1L << (Public - 64)) | (1L << (Interface - 64)) | (1L << (Package - 64)) | (1L << (Protected - 64)) | (1L << (Static - 64)) | (1L << (Yield - 64)) | (1L << (String - 64)) | (1L << (TypeAlias - 64)) | (1L << (Get - 64)) | (1L << (Set - 64)) | (1L << (Require - 64)) | (1L << (Identifier - 64)) | (1L << (StringLiteral - 64)))) != 0)) {
				{
				State = 1343;
				propertyAssignment();
				State = 1348;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,170,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 1344;
						Match(Comma);
						State = 1345;
						propertyAssignment();
						}
						} 
					}
					State = 1350;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,170,Context);
				}
				State = 1352;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==Comma) {
					{
					State = 1351;
					Match(Comma);
					}
				}

				}
			}

			State = 1356;
			Match(CloseBrace);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PropertyAssignmentContext : ParserRuleContext {
		public PropertyAssignmentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_propertyAssignment; } }
	 
		public PropertyAssignmentContext() { }
		public virtual void CopyFrom(PropertyAssignmentContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class PropertyExpressionAssignmentContext : PropertyAssignmentContext {
		[System.Diagnostics.DebuggerNonUserCode] public PropertyNameContext propertyName() {
			return GetRuleContext<PropertyNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SingleExpressionContext singleExpression() {
			return GetRuleContext<SingleExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Colon() { return GetToken(TypeScriptParser.Colon, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Assign() { return GetToken(TypeScriptParser.Assign, 0); }
		public PropertyExpressionAssignmentContext(PropertyAssignmentContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.EnterPropertyExpressionAssignment(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.ExitPropertyExpressionAssignment(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypeScriptParserVisitor<TResult> typedVisitor = visitor as ITypeScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPropertyExpressionAssignment(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ComputedPropertyExpressionAssignmentContext : PropertyAssignmentContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OpenBracket() { return GetToken(TypeScriptParser.OpenBracket, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SingleExpressionContext[] singleExpression() {
			return GetRuleContexts<SingleExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SingleExpressionContext singleExpression(int i) {
			return GetRuleContext<SingleExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CloseBracket() { return GetToken(TypeScriptParser.CloseBracket, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Colon() { return GetToken(TypeScriptParser.Colon, 0); }
		public ComputedPropertyExpressionAssignmentContext(PropertyAssignmentContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.EnterComputedPropertyExpressionAssignment(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.ExitComputedPropertyExpressionAssignment(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypeScriptParserVisitor<TResult> typedVisitor = visitor as ITypeScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitComputedPropertyExpressionAssignment(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class PropertyShorthandContext : PropertyAssignmentContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierOrKeyWordContext identifierOrKeyWord() {
			return GetRuleContext<IdentifierOrKeyWordContext>(0);
		}
		public PropertyShorthandContext(PropertyAssignmentContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.EnterPropertyShorthand(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.ExitPropertyShorthand(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypeScriptParserVisitor<TResult> typedVisitor = visitor as ITypeScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPropertyShorthand(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class PropertySetterContext : PropertyAssignmentContext {
		[System.Diagnostics.DebuggerNonUserCode] public SetAccessorContext setAccessor() {
			return GetRuleContext<SetAccessorContext>(0);
		}
		public PropertySetterContext(PropertyAssignmentContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.EnterPropertySetter(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.ExitPropertySetter(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypeScriptParserVisitor<TResult> typedVisitor = visitor as ITypeScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPropertySetter(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class PropertyGetterContext : PropertyAssignmentContext {
		[System.Diagnostics.DebuggerNonUserCode] public GetAccessorContext getAccessor() {
			return GetRuleContext<GetAccessorContext>(0);
		}
		public PropertyGetterContext(PropertyAssignmentContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.EnterPropertyGetter(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.ExitPropertyGetter(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypeScriptParserVisitor<TResult> typedVisitor = visitor as ITypeScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPropertyGetter(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class RestParameterInObjectContext : PropertyAssignmentContext {
		[System.Diagnostics.DebuggerNonUserCode] public RestParameterContext restParameter() {
			return GetRuleContext<RestParameterContext>(0);
		}
		public RestParameterInObjectContext(PropertyAssignmentContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.EnterRestParameterInObject(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.ExitRestParameterInObject(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypeScriptParserVisitor<TResult> typedVisitor = visitor as ITypeScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRestParameterInObject(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class MethodPropertyContext : PropertyAssignmentContext {
		[System.Diagnostics.DebuggerNonUserCode] public GeneratorMethodContext generatorMethod() {
			return GetRuleContext<GeneratorMethodContext>(0);
		}
		public MethodPropertyContext(PropertyAssignmentContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.EnterMethodProperty(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.ExitMethodProperty(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypeScriptParserVisitor<TResult> typedVisitor = visitor as ITypeScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMethodProperty(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PropertyAssignmentContext propertyAssignment() {
		PropertyAssignmentContext _localctx = new PropertyAssignmentContext(Context, State);
		EnterRule(_localctx, 236, RULE_propertyAssignment);
		int _la;
		try {
			State = 1373;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,173,Context) ) {
			case 1:
				_localctx = new PropertyExpressionAssignmentContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 1358;
				propertyName();
				State = 1359;
				_la = TokenStream.LA(1);
				if ( !(_la==Assign || _la==Colon) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 1360;
				singleExpression(0);
				}
				break;
			case 2:
				_localctx = new ComputedPropertyExpressionAssignmentContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 1362;
				Match(OpenBracket);
				State = 1363;
				singleExpression(0);
				State = 1364;
				Match(CloseBracket);
				State = 1365;
				Match(Colon);
				State = 1366;
				singleExpression(0);
				}
				break;
			case 3:
				_localctx = new PropertyGetterContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 1368;
				getAccessor();
				}
				break;
			case 4:
				_localctx = new PropertySetterContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 1369;
				setAccessor();
				}
				break;
			case 5:
				_localctx = new MethodPropertyContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 1370;
				generatorMethod();
				}
				break;
			case 6:
				_localctx = new PropertyShorthandContext(_localctx);
				EnterOuterAlt(_localctx, 6);
				{
				State = 1371;
				identifierOrKeyWord();
				}
				break;
			case 7:
				_localctx = new RestParameterInObjectContext(_localctx);
				EnterOuterAlt(_localctx, 7);
				{
				State = 1372;
				restParameter();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GetAccessorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public GetterContext getter() {
			return GetRuleContext<GetterContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OpenParen() { return GetToken(TypeScriptParser.OpenParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CloseParen() { return GetToken(TypeScriptParser.CloseParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OpenBrace() { return GetToken(TypeScriptParser.OpenBrace, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FunctionBodyContext functionBody() {
			return GetRuleContext<FunctionBodyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CloseBrace() { return GetToken(TypeScriptParser.CloseBrace, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeAnnotationContext typeAnnotation() {
			return GetRuleContext<TypeAnnotationContext>(0);
		}
		public GetAccessorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_getAccessor; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.EnterGetAccessor(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.ExitGetAccessor(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypeScriptParserVisitor<TResult> typedVisitor = visitor as ITypeScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGetAccessor(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public GetAccessorContext getAccessor() {
		GetAccessorContext _localctx = new GetAccessorContext(Context, State);
		EnterRule(_localctx, 238, RULE_getAccessor);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1375;
			getter();
			State = 1376;
			Match(OpenParen);
			State = 1377;
			Match(CloseParen);
			State = 1379;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Colon) {
				{
				State = 1378;
				typeAnnotation();
				}
			}

			State = 1381;
			Match(OpenBrace);
			State = 1382;
			functionBody();
			State = 1383;
			Match(CloseBrace);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SetAccessorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SetterContext setter() {
			return GetRuleContext<SetterContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OpenParen() { return GetToken(TypeScriptParser.OpenParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CloseParen() { return GetToken(TypeScriptParser.CloseParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OpenBrace() { return GetToken(TypeScriptParser.OpenBrace, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FunctionBodyContext functionBody() {
			return GetRuleContext<FunctionBodyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CloseBrace() { return GetToken(TypeScriptParser.CloseBrace, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(TypeScriptParser.Identifier, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BindingPatternContext bindingPattern() {
			return GetRuleContext<BindingPatternContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeAnnotationContext typeAnnotation() {
			return GetRuleContext<TypeAnnotationContext>(0);
		}
		public SetAccessorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_setAccessor; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.EnterSetAccessor(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.ExitSetAccessor(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypeScriptParserVisitor<TResult> typedVisitor = visitor as ITypeScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSetAccessor(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SetAccessorContext setAccessor() {
		SetAccessorContext _localctx = new SetAccessorContext(Context, State);
		EnterRule(_localctx, 240, RULE_setAccessor);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1385;
			setter();
			State = 1386;
			Match(OpenParen);
			State = 1389;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case Identifier:
				{
				State = 1387;
				Match(Identifier);
				}
				break;
			case OpenBracket:
			case OpenBrace:
				{
				State = 1388;
				bindingPattern();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 1392;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Colon) {
				{
				State = 1391;
				typeAnnotation();
				}
			}

			State = 1394;
			Match(CloseParen);
			State = 1395;
			Match(OpenBrace);
			State = 1396;
			functionBody();
			State = 1397;
			Match(CloseBrace);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PropertyNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierNameContext identifierName() {
			return GetRuleContext<IdentifierNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode StringLiteral() { return GetToken(TypeScriptParser.StringLiteral, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NumericLiteralContext numericLiteral() {
			return GetRuleContext<NumericLiteralContext>(0);
		}
		public PropertyNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_propertyName; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.EnterPropertyName(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.ExitPropertyName(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypeScriptParserVisitor<TResult> typedVisitor = visitor as ITypeScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPropertyName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PropertyNameContext propertyName() {
		PropertyNameContext _localctx = new PropertyNameContext(Context, State);
		EnterRule(_localctx, 242, RULE_propertyName);
		try {
			State = 1402;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case NullLiteral:
			case BooleanLiteral:
			case Break:
			case Do:
			case Instanceof:
			case Typeof:
			case Case:
			case Else:
			case New:
			case Var:
			case Catch:
			case Finally:
			case Return:
			case Void:
			case Continue:
			case For:
			case Switch:
			case While:
			case Debugger:
			case Function_:
			case This:
			case With:
			case Default:
			case If:
			case Throw:
			case Delete:
			case In:
			case Try:
			case From:
			case ReadOnly:
			case Async:
			case Class:
			case Enum:
			case Extends:
			case Super:
			case Const:
			case Export:
			case Import:
			case Implements:
			case Let:
			case Private:
			case Public:
			case Interface:
			case Package:
			case Protected:
			case Static:
			case Yield:
			case String:
			case TypeAlias:
			case Get:
			case Set:
			case Require:
			case Identifier:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1399;
				identifierName();
				}
				break;
			case StringLiteral:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1400;
				Match(StringLiteral);
				}
				break;
			case DecimalLiteral:
			case HexIntegerLiteral:
			case OctalIntegerLiteral:
			case OctalIntegerLiteral2:
			case BinaryIntegerLiteral:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1401;
				numericLiteral();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArgumentsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OpenParen() { return GetToken(TypeScriptParser.OpenParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CloseParen() { return GetToken(TypeScriptParser.CloseParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ArgumentListContext argumentList() {
			return GetRuleContext<ArgumentListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comma() { return GetToken(TypeScriptParser.Comma, 0); }
		public ArgumentsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arguments; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.EnterArguments(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.ExitArguments(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypeScriptParserVisitor<TResult> typedVisitor = visitor as ITypeScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArguments(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArgumentsContext arguments() {
		ArgumentsContext _localctx = new ArgumentsContext(Context, State);
		EnterRule(_localctx, 244, RULE_arguments);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1404;
			Match(OpenParen);
			State = 1409;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << RegularExpressionLiteral) | (1L << OpenBracket) | (1L << OpenParen) | (1L << OpenBrace) | (1L << Ellipsis) | (1L << PlusPlus) | (1L << MinusMinus) | (1L << Plus) | (1L << Minus) | (1L << BitNot) | (1L << Not) | (1L << LessThan) | (1L << NullLiteral) | (1L << BooleanLiteral) | (1L << DecimalLiteral) | (1L << HexIntegerLiteral) | (1L << OctalIntegerLiteral) | (1L << OctalIntegerLiteral2) | (1L << BinaryIntegerLiteral) | (1L << Break) | (1L << Do))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (Instanceof - 64)) | (1L << (Typeof - 64)) | (1L << (Case - 64)) | (1L << (Else - 64)) | (1L << (New - 64)) | (1L << (Var - 64)) | (1L << (Catch - 64)) | (1L << (Finally - 64)) | (1L << (Return - 64)) | (1L << (Void - 64)) | (1L << (Continue - 64)) | (1L << (For - 64)) | (1L << (Switch - 64)) | (1L << (While - 64)) | (1L << (Debugger - 64)) | (1L << (Function_ - 64)) | (1L << (This - 64)) | (1L << (With - 64)) | (1L << (Default - 64)) | (1L << (If - 64)) | (1L << (Throw - 64)) | (1L << (Delete - 64)) | (1L << (In - 64)) | (1L << (Try - 64)) | (1L << (From - 64)) | (1L << (ReadOnly - 64)) | (1L << (Async - 64)) | (1L << (Class - 64)) | (1L << (Enum - 64)) | (1L << (Extends - 64)) | (1L << (Super - 64)) | (1L << (Const - 64)) | (1L << (Export - 64)) | (1L << (Import - 64)) | (1L << (Implements - 64)) | (1L << (Let - 64)) | (1L << (Private - 64)) | (1L << (Public - 64)) | (1L << (Interface - 64)) | (1L << (Package - 64)) | (1L << (Protected - 64)) | (1L << (Static - 64)) | (1L << (Yield - 64)) | (1L << (String - 64)) | (1L << (TypeAlias - 64)) | (1L << (Get - 64)) | (1L << (Set - 64)) | (1L << (Require - 64)) | (1L << (Identifier - 64)) | (1L << (StringLiteral - 64)) | (1L << (BackTick - 64)))) != 0)) {
				{
				State = 1405;
				argumentList();
				State = 1407;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==Comma) {
					{
					State = 1406;
					Match(Comma);
					}
				}

				}
			}

			State = 1411;
			Match(CloseParen);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArgumentListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ArgumentContext[] argument() {
			return GetRuleContexts<ArgumentContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArgumentContext argument(int i) {
			return GetRuleContext<ArgumentContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Comma() { return GetTokens(TypeScriptParser.Comma); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comma(int i) {
			return GetToken(TypeScriptParser.Comma, i);
		}
		public ArgumentListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_argumentList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.EnterArgumentList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.ExitArgumentList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypeScriptParserVisitor<TResult> typedVisitor = visitor as ITypeScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArgumentList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArgumentListContext argumentList() {
		ArgumentListContext _localctx = new ArgumentListContext(Context, State);
		EnterRule(_localctx, 246, RULE_argumentList);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1413;
			argument();
			State = 1418;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,180,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 1414;
					Match(Comma);
					State = 1415;
					argument();
					}
					} 
				}
				State = 1420;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,180,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArgumentContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SingleExpressionContext singleExpression() {
			return GetRuleContext<SingleExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(TypeScriptParser.Identifier, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Ellipsis() { return GetToken(TypeScriptParser.Ellipsis, 0); }
		public ArgumentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_argument; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.EnterArgument(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.ExitArgument(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypeScriptParserVisitor<TResult> typedVisitor = visitor as ITypeScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArgument(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArgumentContext argument() {
		ArgumentContext _localctx = new ArgumentContext(Context, State);
		EnterRule(_localctx, 248, RULE_argument);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1422;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Ellipsis) {
				{
				State = 1421;
				Match(Ellipsis);
				}
			}

			State = 1426;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,182,Context) ) {
			case 1:
				{
				State = 1424;
				singleExpression(0);
				}
				break;
			case 2:
				{
				State = 1425;
				Match(Identifier);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionSequenceContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SingleExpressionContext[] singleExpression() {
			return GetRuleContexts<SingleExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SingleExpressionContext singleExpression(int i) {
			return GetRuleContext<SingleExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Comma() { return GetTokens(TypeScriptParser.Comma); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comma(int i) {
			return GetToken(TypeScriptParser.Comma, i);
		}
		public ExpressionSequenceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expressionSequence; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.EnterExpressionSequence(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.ExitExpressionSequence(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypeScriptParserVisitor<TResult> typedVisitor = visitor as ITypeScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpressionSequence(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionSequenceContext expressionSequence() {
		ExpressionSequenceContext _localctx = new ExpressionSequenceContext(Context, State);
		EnterRule(_localctx, 250, RULE_expressionSequence);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1428;
			singleExpression(0);
			State = 1433;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,183,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 1429;
					Match(Comma);
					State = 1430;
					singleExpression(0);
					}
					} 
				}
				State = 1435;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,183,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionExpressionDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Function_() { return GetToken(TypeScriptParser.Function_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OpenParen() { return GetToken(TypeScriptParser.OpenParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CloseParen() { return GetToken(TypeScriptParser.CloseParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OpenBrace() { return GetToken(TypeScriptParser.OpenBrace, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FunctionBodyContext functionBody() {
			return GetRuleContext<FunctionBodyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CloseBrace() { return GetToken(TypeScriptParser.CloseBrace, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(TypeScriptParser.Identifier, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FormalParameterListContext formalParameterList() {
			return GetRuleContext<FormalParameterListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeAnnotationContext typeAnnotation() {
			return GetRuleContext<TypeAnnotationContext>(0);
		}
		public FunctionExpressionDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionExpressionDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.EnterFunctionExpressionDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.ExitFunctionExpressionDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypeScriptParserVisitor<TResult> typedVisitor = visitor as ITypeScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionExpressionDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionExpressionDeclarationContext functionExpressionDeclaration() {
		FunctionExpressionDeclarationContext _localctx = new FunctionExpressionDeclarationContext(Context, State);
		EnterRule(_localctx, 252, RULE_functionExpressionDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1436;
			Match(Function_);
			State = 1438;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Identifier) {
				{
				State = 1437;
				Match(Identifier);
				}
			}

			State = 1440;
			Match(OpenParen);
			State = 1442;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << OpenBracket) | (1L << OpenBrace) | (1L << Ellipsis))) != 0) || ((((_la - 101)) & ~0x3f) == 0 && ((1L << (_la - 101)) & ((1L << (Private - 101)) | (1L << (Public - 101)) | (1L << (Protected - 101)) | (1L << (TypeAlias - 101)) | (1L << (Require - 101)) | (1L << (At - 101)) | (1L << (Identifier - 101)))) != 0)) {
				{
				State = 1441;
				formalParameterList();
				}
			}

			State = 1444;
			Match(CloseParen);
			State = 1446;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Colon) {
				{
				State = 1445;
				typeAnnotation();
				}
			}

			State = 1448;
			Match(OpenBrace);
			State = 1449;
			functionBody();
			State = 1450;
			Match(CloseBrace);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SingleExpressionContext : ParserRuleContext {
		public SingleExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_singleExpression; } }
	 
		public SingleExpressionContext() { }
		public virtual void CopyFrom(SingleExpressionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class TemplateStringExpressionContext : SingleExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public SingleExpressionContext singleExpression() {
			return GetRuleContext<SingleExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TemplateStringLiteralContext templateStringLiteral() {
			return GetRuleContext<TemplateStringLiteralContext>(0);
		}
		public TemplateStringExpressionContext(SingleExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.EnterTemplateStringExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.ExitTemplateStringExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypeScriptParserVisitor<TResult> typedVisitor = visitor as ITypeScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTemplateStringExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class TernaryExpressionContext : SingleExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public SingleExpressionContext[] singleExpression() {
			return GetRuleContexts<SingleExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SingleExpressionContext singleExpression(int i) {
			return GetRuleContext<SingleExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode QuestionMark() { return GetToken(TypeScriptParser.QuestionMark, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Colon() { return GetToken(TypeScriptParser.Colon, 0); }
		public TernaryExpressionContext(SingleExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.EnterTernaryExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.ExitTernaryExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypeScriptParserVisitor<TResult> typedVisitor = visitor as ITypeScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTernaryExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class LogicalAndExpressionContext : SingleExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public SingleExpressionContext[] singleExpression() {
			return GetRuleContexts<SingleExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SingleExpressionContext singleExpression(int i) {
			return GetRuleContext<SingleExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode And() { return GetToken(TypeScriptParser.And, 0); }
		public LogicalAndExpressionContext(SingleExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.EnterLogicalAndExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.ExitLogicalAndExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypeScriptParserVisitor<TResult> typedVisitor = visitor as ITypeScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLogicalAndExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class GeneratorsExpressionContext : SingleExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public GeneratorBlockContext generatorBlock() {
			return GetRuleContext<GeneratorBlockContext>(0);
		}
		public GeneratorsExpressionContext(SingleExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.EnterGeneratorsExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.ExitGeneratorsExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypeScriptParserVisitor<TResult> typedVisitor = visitor as ITypeScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGeneratorsExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class PreIncrementExpressionContext : SingleExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PlusPlus() { return GetToken(TypeScriptParser.PlusPlus, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SingleExpressionContext singleExpression() {
			return GetRuleContext<SingleExpressionContext>(0);
		}
		public PreIncrementExpressionContext(SingleExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.EnterPreIncrementExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.ExitPreIncrementExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypeScriptParserVisitor<TResult> typedVisitor = visitor as ITypeScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPreIncrementExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ObjectLiteralExpressionContext : SingleExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ObjectLiteralContext objectLiteral() {
			return GetRuleContext<ObjectLiteralContext>(0);
		}
		public ObjectLiteralExpressionContext(SingleExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.EnterObjectLiteralExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.ExitObjectLiteralExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypeScriptParserVisitor<TResult> typedVisitor = visitor as ITypeScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitObjectLiteralExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class InExpressionContext : SingleExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public SingleExpressionContext[] singleExpression() {
			return GetRuleContexts<SingleExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SingleExpressionContext singleExpression(int i) {
			return GetRuleContext<SingleExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode In() { return GetToken(TypeScriptParser.In, 0); }
		public InExpressionContext(SingleExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.EnterInExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.ExitInExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypeScriptParserVisitor<TResult> typedVisitor = visitor as ITypeScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class LogicalOrExpressionContext : SingleExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public SingleExpressionContext[] singleExpression() {
			return GetRuleContexts<SingleExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SingleExpressionContext singleExpression(int i) {
			return GetRuleContext<SingleExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Or() { return GetToken(TypeScriptParser.Or, 0); }
		public LogicalOrExpressionContext(SingleExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.EnterLogicalOrExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.ExitLogicalOrExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypeScriptParserVisitor<TResult> typedVisitor = visitor as ITypeScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLogicalOrExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class GenericTypesContext : SingleExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypeArgumentsContext typeArguments() {
			return GetRuleContext<TypeArgumentsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionSequenceContext expressionSequence() {
			return GetRuleContext<ExpressionSequenceContext>(0);
		}
		public GenericTypesContext(SingleExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.EnterGenericTypes(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.ExitGenericTypes(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypeScriptParserVisitor<TResult> typedVisitor = visitor as ITypeScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGenericTypes(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class NotExpressionContext : SingleExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Not() { return GetToken(TypeScriptParser.Not, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SingleExpressionContext singleExpression() {
			return GetRuleContext<SingleExpressionContext>(0);
		}
		public NotExpressionContext(SingleExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.EnterNotExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.ExitNotExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypeScriptParserVisitor<TResult> typedVisitor = visitor as ITypeScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNotExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class PreDecreaseExpressionContext : SingleExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MinusMinus() { return GetToken(TypeScriptParser.MinusMinus, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SingleExpressionContext singleExpression() {
			return GetRuleContext<SingleExpressionContext>(0);
		}
		public PreDecreaseExpressionContext(SingleExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.EnterPreDecreaseExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.ExitPreDecreaseExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypeScriptParserVisitor<TResult> typedVisitor = visitor as ITypeScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPreDecreaseExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ArgumentsExpressionContext : SingleExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public SingleExpressionContext singleExpression() {
			return GetRuleContext<SingleExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArgumentsContext arguments() {
			return GetRuleContext<ArgumentsContext>(0);
		}
		public ArgumentsExpressionContext(SingleExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.EnterArgumentsExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.ExitArgumentsExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypeScriptParserVisitor<TResult> typedVisitor = visitor as ITypeScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArgumentsExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ThisExpressionContext : SingleExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode This() { return GetToken(TypeScriptParser.This, 0); }
		public ThisExpressionContext(SingleExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.EnterThisExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.ExitThisExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypeScriptParserVisitor<TResult> typedVisitor = visitor as ITypeScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitThisExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class FunctionExpressionContext : SingleExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public FunctionExpressionDeclarationContext functionExpressionDeclaration() {
			return GetRuleContext<FunctionExpressionDeclarationContext>(0);
		}
		public FunctionExpressionContext(SingleExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.EnterFunctionExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.ExitFunctionExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypeScriptParserVisitor<TResult> typedVisitor = visitor as ITypeScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class UnaryMinusExpressionContext : SingleExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Minus() { return GetToken(TypeScriptParser.Minus, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SingleExpressionContext singleExpression() {
			return GetRuleContext<SingleExpressionContext>(0);
		}
		public UnaryMinusExpressionContext(SingleExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.EnterUnaryMinusExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.ExitUnaryMinusExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypeScriptParserVisitor<TResult> typedVisitor = visitor as ITypeScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnaryMinusExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AssignmentExpressionContext : SingleExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public SingleExpressionContext[] singleExpression() {
			return GetRuleContexts<SingleExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SingleExpressionContext singleExpression(int i) {
			return GetRuleContext<SingleExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Assign() { return GetToken(TypeScriptParser.Assign, 0); }
		public AssignmentExpressionContext(SingleExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.EnterAssignmentExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.ExitAssignmentExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypeScriptParserVisitor<TResult> typedVisitor = visitor as ITypeScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssignmentExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class PostDecreaseExpressionContext : SingleExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public SingleExpressionContext singleExpression() {
			return GetRuleContext<SingleExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MinusMinus() { return GetToken(TypeScriptParser.MinusMinus, 0); }
		public PostDecreaseExpressionContext(SingleExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.EnterPostDecreaseExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.ExitPostDecreaseExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypeScriptParserVisitor<TResult> typedVisitor = visitor as ITypeScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPostDecreaseExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class TypeofExpressionContext : SingleExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Typeof() { return GetToken(TypeScriptParser.Typeof, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SingleExpressionContext singleExpression() {
			return GetRuleContext<SingleExpressionContext>(0);
		}
		public TypeofExpressionContext(SingleExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.EnterTypeofExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.ExitTypeofExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypeScriptParserVisitor<TResult> typedVisitor = visitor as ITypeScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeofExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class InstanceofExpressionContext : SingleExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public SingleExpressionContext[] singleExpression() {
			return GetRuleContexts<SingleExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SingleExpressionContext singleExpression(int i) {
			return GetRuleContext<SingleExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Instanceof() { return GetToken(TypeScriptParser.Instanceof, 0); }
		public InstanceofExpressionContext(SingleExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.EnterInstanceofExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.ExitInstanceofExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypeScriptParserVisitor<TResult> typedVisitor = visitor as ITypeScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInstanceofExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class UnaryPlusExpressionContext : SingleExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Plus() { return GetToken(TypeScriptParser.Plus, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SingleExpressionContext singleExpression() {
			return GetRuleContext<SingleExpressionContext>(0);
		}
		public UnaryPlusExpressionContext(SingleExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.EnterUnaryPlusExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.ExitUnaryPlusExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypeScriptParserVisitor<TResult> typedVisitor = visitor as ITypeScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnaryPlusExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class DeleteExpressionContext : SingleExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Delete() { return GetToken(TypeScriptParser.Delete, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SingleExpressionContext singleExpression() {
			return GetRuleContext<SingleExpressionContext>(0);
		}
		public DeleteExpressionContext(SingleExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.EnterDeleteExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.ExitDeleteExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypeScriptParserVisitor<TResult> typedVisitor = visitor as ITypeScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeleteExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class GeneratorsFunctionExpressionContext : SingleExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public GeneratorFunctionDeclarationContext generatorFunctionDeclaration() {
			return GetRuleContext<GeneratorFunctionDeclarationContext>(0);
		}
		public GeneratorsFunctionExpressionContext(SingleExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.EnterGeneratorsFunctionExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.ExitGeneratorsFunctionExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypeScriptParserVisitor<TResult> typedVisitor = visitor as ITypeScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGeneratorsFunctionExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ArrowFunctionExpressionContext : SingleExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ArrowFunctionDeclarationContext arrowFunctionDeclaration() {
			return GetRuleContext<ArrowFunctionDeclarationContext>(0);
		}
		public ArrowFunctionExpressionContext(SingleExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.EnterArrowFunctionExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.ExitArrowFunctionExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypeScriptParserVisitor<TResult> typedVisitor = visitor as ITypeScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArrowFunctionExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class IteratorsExpressionContext : SingleExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public IteratorBlockContext iteratorBlock() {
			return GetRuleContext<IteratorBlockContext>(0);
		}
		public IteratorsExpressionContext(SingleExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.EnterIteratorsExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.ExitIteratorsExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypeScriptParserVisitor<TResult> typedVisitor = visitor as ITypeScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIteratorsExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class EqualityExpressionContext : SingleExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public SingleExpressionContext[] singleExpression() {
			return GetRuleContexts<SingleExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SingleExpressionContext singleExpression(int i) {
			return GetRuleContext<SingleExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Equals_() { return GetToken(TypeScriptParser.Equals_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NotEquals() { return GetToken(TypeScriptParser.NotEquals, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IdentityEquals() { return GetToken(TypeScriptParser.IdentityEquals, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IdentityNotEquals() { return GetToken(TypeScriptParser.IdentityNotEquals, 0); }
		public EqualityExpressionContext(SingleExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.EnterEqualityExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.ExitEqualityExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypeScriptParserVisitor<TResult> typedVisitor = visitor as ITypeScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEqualityExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class BitXOrExpressionContext : SingleExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public SingleExpressionContext[] singleExpression() {
			return GetRuleContexts<SingleExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SingleExpressionContext singleExpression(int i) {
			return GetRuleContext<SingleExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BitXOr() { return GetToken(TypeScriptParser.BitXOr, 0); }
		public BitXOrExpressionContext(SingleExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.EnterBitXOrExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.ExitBitXOrExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypeScriptParserVisitor<TResult> typedVisitor = visitor as ITypeScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBitXOrExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class CastAsExpressionContext : SingleExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public SingleExpressionContext singleExpression() {
			return GetRuleContext<SingleExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode As() { return GetToken(TypeScriptParser.As, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public AsExpressionContext asExpression() {
			return GetRuleContext<AsExpressionContext>(0);
		}
		public CastAsExpressionContext(SingleExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.EnterCastAsExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.ExitCastAsExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypeScriptParserVisitor<TResult> typedVisitor = visitor as ITypeScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCastAsExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class SuperExpressionContext : SingleExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Super() { return GetToken(TypeScriptParser.Super, 0); }
		public SuperExpressionContext(SingleExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.EnterSuperExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.ExitSuperExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypeScriptParserVisitor<TResult> typedVisitor = visitor as ITypeScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSuperExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class MultiplicativeExpressionContext : SingleExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public SingleExpressionContext[] singleExpression() {
			return GetRuleContexts<SingleExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SingleExpressionContext singleExpression(int i) {
			return GetRuleContext<SingleExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Multiply() { return GetToken(TypeScriptParser.Multiply, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Divide() { return GetToken(TypeScriptParser.Divide, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Modulus() { return GetToken(TypeScriptParser.Modulus, 0); }
		public MultiplicativeExpressionContext(SingleExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.EnterMultiplicativeExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.ExitMultiplicativeExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypeScriptParserVisitor<TResult> typedVisitor = visitor as ITypeScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMultiplicativeExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class BitShiftExpressionContext : SingleExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public SingleExpressionContext[] singleExpression() {
			return GetRuleContexts<SingleExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SingleExpressionContext singleExpression(int i) {
			return GetRuleContext<SingleExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LeftShiftArithmetic() { return GetToken(TypeScriptParser.LeftShiftArithmetic, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RightShiftArithmetic() { return GetToken(TypeScriptParser.RightShiftArithmetic, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RightShiftLogical() { return GetToken(TypeScriptParser.RightShiftLogical, 0); }
		public BitShiftExpressionContext(SingleExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.EnterBitShiftExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.ExitBitShiftExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypeScriptParserVisitor<TResult> typedVisitor = visitor as ITypeScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBitShiftExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ParenthesizedExpressionContext : SingleExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OpenParen() { return GetToken(TypeScriptParser.OpenParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionSequenceContext expressionSequence() {
			return GetRuleContext<ExpressionSequenceContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CloseParen() { return GetToken(TypeScriptParser.CloseParen, 0); }
		public ParenthesizedExpressionContext(SingleExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.EnterParenthesizedExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.ExitParenthesizedExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypeScriptParserVisitor<TResult> typedVisitor = visitor as ITypeScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParenthesizedExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AdditiveExpressionContext : SingleExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public SingleExpressionContext[] singleExpression() {
			return GetRuleContexts<SingleExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SingleExpressionContext singleExpression(int i) {
			return GetRuleContext<SingleExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Plus() { return GetToken(TypeScriptParser.Plus, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Minus() { return GetToken(TypeScriptParser.Minus, 0); }
		public AdditiveExpressionContext(SingleExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.EnterAdditiveExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.ExitAdditiveExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypeScriptParserVisitor<TResult> typedVisitor = visitor as ITypeScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAdditiveExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class RelationalExpressionContext : SingleExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public SingleExpressionContext[] singleExpression() {
			return GetRuleContexts<SingleExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SingleExpressionContext singleExpression(int i) {
			return GetRuleContext<SingleExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LessThan() { return GetToken(TypeScriptParser.LessThan, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MoreThan() { return GetToken(TypeScriptParser.MoreThan, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LessThanEquals() { return GetToken(TypeScriptParser.LessThanEquals, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GreaterThanEquals() { return GetToken(TypeScriptParser.GreaterThanEquals, 0); }
		public RelationalExpressionContext(SingleExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.EnterRelationalExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.ExitRelationalExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypeScriptParserVisitor<TResult> typedVisitor = visitor as ITypeScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRelationalExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class PostIncrementExpressionContext : SingleExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public SingleExpressionContext singleExpression() {
			return GetRuleContext<SingleExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PlusPlus() { return GetToken(TypeScriptParser.PlusPlus, 0); }
		public PostIncrementExpressionContext(SingleExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.EnterPostIncrementExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.ExitPostIncrementExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypeScriptParserVisitor<TResult> typedVisitor = visitor as ITypeScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPostIncrementExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class YieldExpressionContext : SingleExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public YieldStatementContext yieldStatement() {
			return GetRuleContext<YieldStatementContext>(0);
		}
		public YieldExpressionContext(SingleExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.EnterYieldExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.ExitYieldExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypeScriptParserVisitor<TResult> typedVisitor = visitor as ITypeScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitYieldExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class BitNotExpressionContext : SingleExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BitNot() { return GetToken(TypeScriptParser.BitNot, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SingleExpressionContext singleExpression() {
			return GetRuleContext<SingleExpressionContext>(0);
		}
		public BitNotExpressionContext(SingleExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.EnterBitNotExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.ExitBitNotExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypeScriptParserVisitor<TResult> typedVisitor = visitor as ITypeScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBitNotExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class NewExpressionContext : SingleExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode New() { return GetToken(TypeScriptParser.New, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SingleExpressionContext singleExpression() {
			return GetRuleContext<SingleExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArgumentsContext arguments() {
			return GetRuleContext<ArgumentsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeArgumentsContext typeArguments() {
			return GetRuleContext<TypeArgumentsContext>(0);
		}
		public NewExpressionContext(SingleExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.EnterNewExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.ExitNewExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypeScriptParserVisitor<TResult> typedVisitor = visitor as ITypeScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNewExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class LiteralExpressionContext : SingleExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public LiteralContext literal() {
			return GetRuleContext<LiteralContext>(0);
		}
		public LiteralExpressionContext(SingleExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.EnterLiteralExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.ExitLiteralExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypeScriptParserVisitor<TResult> typedVisitor = visitor as ITypeScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLiteralExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ArrayLiteralExpressionContext : SingleExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ArrayLiteralContext arrayLiteral() {
			return GetRuleContext<ArrayLiteralContext>(0);
		}
		public ArrayLiteralExpressionContext(SingleExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.EnterArrayLiteralExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.ExitArrayLiteralExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypeScriptParserVisitor<TResult> typedVisitor = visitor as ITypeScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArrayLiteralExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class MemberDotExpressionContext : SingleExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public SingleExpressionContext singleExpression() {
			return GetRuleContext<SingleExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Dot() { return GetToken(TypeScriptParser.Dot, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierNameContext identifierName() {
			return GetRuleContext<IdentifierNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NestedTypeGenericContext nestedTypeGeneric() {
			return GetRuleContext<NestedTypeGenericContext>(0);
		}
		public MemberDotExpressionContext(SingleExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.EnterMemberDotExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.ExitMemberDotExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypeScriptParserVisitor<TResult> typedVisitor = visitor as ITypeScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMemberDotExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ClassExpressionContext : SingleExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Class() { return GetToken(TypeScriptParser.Class, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ClassTailContext classTail() {
			return GetRuleContext<ClassTailContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(TypeScriptParser.Identifier, 0); }
		public ClassExpressionContext(SingleExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.EnterClassExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.ExitClassExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypeScriptParserVisitor<TResult> typedVisitor = visitor as ITypeScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClassExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class MemberIndexExpressionContext : SingleExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public SingleExpressionContext singleExpression() {
			return GetRuleContext<SingleExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OpenBracket() { return GetToken(TypeScriptParser.OpenBracket, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionSequenceContext expressionSequence() {
			return GetRuleContext<ExpressionSequenceContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CloseBracket() { return GetToken(TypeScriptParser.CloseBracket, 0); }
		public MemberIndexExpressionContext(SingleExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.EnterMemberIndexExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.ExitMemberIndexExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypeScriptParserVisitor<TResult> typedVisitor = visitor as ITypeScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMemberIndexExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class IdentifierExpressionContext : SingleExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierNameContext identifierName() {
			return GetRuleContext<IdentifierNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SingleExpressionContext singleExpression() {
			return GetRuleContext<SingleExpressionContext>(0);
		}
		public IdentifierExpressionContext(SingleExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.EnterIdentifierExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.ExitIdentifierExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypeScriptParserVisitor<TResult> typedVisitor = visitor as ITypeScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIdentifierExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class BitAndExpressionContext : SingleExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public SingleExpressionContext[] singleExpression() {
			return GetRuleContexts<SingleExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SingleExpressionContext singleExpression(int i) {
			return GetRuleContext<SingleExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BitAnd() { return GetToken(TypeScriptParser.BitAnd, 0); }
		public BitAndExpressionContext(SingleExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.EnterBitAndExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.ExitBitAndExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypeScriptParserVisitor<TResult> typedVisitor = visitor as ITypeScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBitAndExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class BitOrExpressionContext : SingleExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public SingleExpressionContext[] singleExpression() {
			return GetRuleContexts<SingleExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SingleExpressionContext singleExpression(int i) {
			return GetRuleContext<SingleExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BitOr() { return GetToken(TypeScriptParser.BitOr, 0); }
		public BitOrExpressionContext(SingleExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.EnterBitOrExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.ExitBitOrExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypeScriptParserVisitor<TResult> typedVisitor = visitor as ITypeScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBitOrExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AssignmentOperatorExpressionContext : SingleExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public SingleExpressionContext[] singleExpression() {
			return GetRuleContexts<SingleExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SingleExpressionContext singleExpression(int i) {
			return GetRuleContext<SingleExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AssignmentOperatorContext assignmentOperator() {
			return GetRuleContext<AssignmentOperatorContext>(0);
		}
		public AssignmentOperatorExpressionContext(SingleExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.EnterAssignmentOperatorExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.ExitAssignmentOperatorExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypeScriptParserVisitor<TResult> typedVisitor = visitor as ITypeScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssignmentOperatorExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class VoidExpressionContext : SingleExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Void() { return GetToken(TypeScriptParser.Void, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SingleExpressionContext singleExpression() {
			return GetRuleContext<SingleExpressionContext>(0);
		}
		public VoidExpressionContext(SingleExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.EnterVoidExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.ExitVoidExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypeScriptParserVisitor<TResult> typedVisitor = visitor as ITypeScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVoidExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SingleExpressionContext singleExpression() {
		return singleExpression(0);
	}

	private SingleExpressionContext singleExpression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		SingleExpressionContext _localctx = new SingleExpressionContext(Context, _parentState);
		SingleExpressionContext _prevctx = _localctx;
		int _startState = 254;
		EnterRecursionRule(_localctx, 254, RULE_singleExpression, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1511;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,192,Context) ) {
			case 1:
				{
				_localctx = new FunctionExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;

				State = 1453;
				functionExpressionDeclaration();
				}
				break;
			case 2:
				{
				_localctx = new ArrowFunctionExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 1454;
				arrowFunctionDeclaration();
				}
				break;
			case 3:
				{
				_localctx = new ClassExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 1455;
				Match(Class);
				State = 1457;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==Identifier) {
					{
					State = 1456;
					Match(Identifier);
					}
				}

				State = 1459;
				classTail();
				}
				break;
			case 4:
				{
				_localctx = new NewExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 1460;
				Match(New);
				State = 1461;
				singleExpression(0);
				State = 1463;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==LessThan) {
					{
					State = 1462;
					typeArguments();
					}
				}

				State = 1465;
				arguments();
				}
				break;
			case 5:
				{
				_localctx = new NewExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 1467;
				Match(New);
				State = 1468;
				singleExpression(0);
				State = 1470;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,189,Context) ) {
				case 1:
					{
					State = 1469;
					typeArguments();
					}
					break;
				}
				}
				break;
			case 6:
				{
				_localctx = new DeleteExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 1472;
				Match(Delete);
				State = 1473;
				singleExpression(38);
				}
				break;
			case 7:
				{
				_localctx = new VoidExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 1474;
				Match(Void);
				State = 1475;
				singleExpression(37);
				}
				break;
			case 8:
				{
				_localctx = new TypeofExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 1476;
				Match(Typeof);
				State = 1477;
				singleExpression(36);
				}
				break;
			case 9:
				{
				_localctx = new PreIncrementExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 1478;
				Match(PlusPlus);
				State = 1479;
				singleExpression(35);
				}
				break;
			case 10:
				{
				_localctx = new PreDecreaseExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 1480;
				Match(MinusMinus);
				State = 1481;
				singleExpression(34);
				}
				break;
			case 11:
				{
				_localctx = new UnaryPlusExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 1482;
				Match(Plus);
				State = 1483;
				singleExpression(33);
				}
				break;
			case 12:
				{
				_localctx = new UnaryMinusExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 1484;
				Match(Minus);
				State = 1485;
				singleExpression(32);
				}
				break;
			case 13:
				{
				_localctx = new BitNotExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 1486;
				Match(BitNot);
				State = 1487;
				singleExpression(31);
				}
				break;
			case 14:
				{
				_localctx = new NotExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 1488;
				Match(Not);
				State = 1489;
				singleExpression(30);
				}
				break;
			case 15:
				{
				_localctx = new IteratorsExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 1490;
				iteratorBlock();
				}
				break;
			case 16:
				{
				_localctx = new GeneratorsExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 1491;
				generatorBlock();
				}
				break;
			case 17:
				{
				_localctx = new GeneratorsFunctionExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 1492;
				generatorFunctionDeclaration();
				}
				break;
			case 18:
				{
				_localctx = new YieldExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 1493;
				yieldStatement();
				}
				break;
			case 19:
				{
				_localctx = new ThisExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 1494;
				Match(This);
				}
				break;
			case 20:
				{
				_localctx = new IdentifierExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 1495;
				identifierName();
				State = 1497;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,190,Context) ) {
				case 1:
					{
					State = 1496;
					singleExpression(0);
					}
					break;
				}
				}
				break;
			case 21:
				{
				_localctx = new SuperExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 1499;
				Match(Super);
				}
				break;
			case 22:
				{
				_localctx = new LiteralExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 1500;
				literal();
				}
				break;
			case 23:
				{
				_localctx = new ArrayLiteralExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 1501;
				arrayLiteral();
				}
				break;
			case 24:
				{
				_localctx = new ObjectLiteralExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 1502;
				objectLiteral();
				}
				break;
			case 25:
				{
				_localctx = new ParenthesizedExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 1503;
				Match(OpenParen);
				State = 1504;
				expressionSequence();
				State = 1505;
				Match(CloseParen);
				}
				break;
			case 26:
				{
				_localctx = new GenericTypesContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 1507;
				typeArguments();
				State = 1509;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,191,Context) ) {
				case 1:
					{
					State = 1508;
					expressionSequence();
					}
					break;
				}
				}
				break;
			}
			Context.Stop = TokenStream.LT(-1);
			State = 1588;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,195,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 1586;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,194,Context) ) {
					case 1:
						{
						_localctx = new MultiplicativeExpressionContext(new SingleExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_singleExpression);
						State = 1513;
						if (!(Precpred(Context, 29))) throw new FailedPredicateException(this, "Precpred(Context, 29)");
						State = 1514;
						_la = TokenStream.LA(1);
						if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << Multiply) | (1L << Divide) | (1L << Modulus))) != 0)) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 1515;
						singleExpression(30);
						}
						break;
					case 2:
						{
						_localctx = new AdditiveExpressionContext(new SingleExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_singleExpression);
						State = 1516;
						if (!(Precpred(Context, 28))) throw new FailedPredicateException(this, "Precpred(Context, 28)");
						State = 1517;
						_la = TokenStream.LA(1);
						if ( !(_la==Plus || _la==Minus) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 1518;
						singleExpression(29);
						}
						break;
					case 3:
						{
						_localctx = new BitShiftExpressionContext(new SingleExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_singleExpression);
						State = 1519;
						if (!(Precpred(Context, 27))) throw new FailedPredicateException(this, "Precpred(Context, 27)");
						State = 1520;
						_la = TokenStream.LA(1);
						if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << RightShiftArithmetic) | (1L << LeftShiftArithmetic) | (1L << RightShiftLogical))) != 0)) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 1521;
						singleExpression(28);
						}
						break;
					case 4:
						{
						_localctx = new RelationalExpressionContext(new SingleExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_singleExpression);
						State = 1522;
						if (!(Precpred(Context, 26))) throw new FailedPredicateException(this, "Precpred(Context, 26)");
						State = 1523;
						_la = TokenStream.LA(1);
						if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << LessThan) | (1L << MoreThan) | (1L << LessThanEquals) | (1L << GreaterThanEquals))) != 0)) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 1524;
						singleExpression(27);
						}
						break;
					case 5:
						{
						_localctx = new InstanceofExpressionContext(new SingleExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_singleExpression);
						State = 1525;
						if (!(Precpred(Context, 25))) throw new FailedPredicateException(this, "Precpred(Context, 25)");
						State = 1526;
						Match(Instanceof);
						State = 1527;
						singleExpression(26);
						}
						break;
					case 6:
						{
						_localctx = new InExpressionContext(new SingleExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_singleExpression);
						State = 1528;
						if (!(Precpred(Context, 24))) throw new FailedPredicateException(this, "Precpred(Context, 24)");
						State = 1529;
						Match(In);
						State = 1530;
						singleExpression(25);
						}
						break;
					case 7:
						{
						_localctx = new EqualityExpressionContext(new SingleExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_singleExpression);
						State = 1531;
						if (!(Precpred(Context, 23))) throw new FailedPredicateException(this, "Precpred(Context, 23)");
						State = 1532;
						_la = TokenStream.LA(1);
						if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << Equals_) | (1L << NotEquals) | (1L << IdentityEquals) | (1L << IdentityNotEquals))) != 0)) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 1533;
						singleExpression(24);
						}
						break;
					case 8:
						{
						_localctx = new BitAndExpressionContext(new SingleExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_singleExpression);
						State = 1534;
						if (!(Precpred(Context, 22))) throw new FailedPredicateException(this, "Precpred(Context, 22)");
						State = 1535;
						Match(BitAnd);
						State = 1536;
						singleExpression(23);
						}
						break;
					case 9:
						{
						_localctx = new BitXOrExpressionContext(new SingleExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_singleExpression);
						State = 1537;
						if (!(Precpred(Context, 21))) throw new FailedPredicateException(this, "Precpred(Context, 21)");
						State = 1538;
						Match(BitXOr);
						State = 1539;
						singleExpression(22);
						}
						break;
					case 10:
						{
						_localctx = new BitOrExpressionContext(new SingleExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_singleExpression);
						State = 1540;
						if (!(Precpred(Context, 20))) throw new FailedPredicateException(this, "Precpred(Context, 20)");
						State = 1541;
						Match(BitOr);
						State = 1542;
						singleExpression(21);
						}
						break;
					case 11:
						{
						_localctx = new LogicalAndExpressionContext(new SingleExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_singleExpression);
						State = 1543;
						if (!(Precpred(Context, 19))) throw new FailedPredicateException(this, "Precpred(Context, 19)");
						State = 1544;
						Match(And);
						State = 1545;
						singleExpression(20);
						}
						break;
					case 12:
						{
						_localctx = new LogicalOrExpressionContext(new SingleExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_singleExpression);
						State = 1546;
						if (!(Precpred(Context, 18))) throw new FailedPredicateException(this, "Precpred(Context, 18)");
						State = 1547;
						Match(Or);
						State = 1548;
						singleExpression(19);
						}
						break;
					case 13:
						{
						_localctx = new TernaryExpressionContext(new SingleExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_singleExpression);
						State = 1549;
						if (!(Precpred(Context, 17))) throw new FailedPredicateException(this, "Precpred(Context, 17)");
						State = 1550;
						Match(QuestionMark);
						State = 1551;
						singleExpression(0);
						State = 1552;
						Match(Colon);
						State = 1553;
						singleExpression(18);
						}
						break;
					case 14:
						{
						_localctx = new AssignmentExpressionContext(new SingleExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_singleExpression);
						State = 1555;
						if (!(Precpred(Context, 16))) throw new FailedPredicateException(this, "Precpred(Context, 16)");
						State = 1556;
						Match(Assign);
						State = 1557;
						singleExpression(17);
						}
						break;
					case 15:
						{
						_localctx = new AssignmentOperatorExpressionContext(new SingleExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_singleExpression);
						State = 1558;
						if (!(Precpred(Context, 15))) throw new FailedPredicateException(this, "Precpred(Context, 15)");
						State = 1559;
						assignmentOperator();
						State = 1560;
						singleExpression(16);
						}
						break;
					case 16:
						{
						_localctx = new MemberIndexExpressionContext(new SingleExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_singleExpression);
						State = 1562;
						if (!(Precpred(Context, 45))) throw new FailedPredicateException(this, "Precpred(Context, 45)");
						State = 1563;
						Match(OpenBracket);
						State = 1564;
						expressionSequence();
						State = 1565;
						Match(CloseBracket);
						}
						break;
					case 17:
						{
						_localctx = new MemberDotExpressionContext(new SingleExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_singleExpression);
						State = 1567;
						if (!(Precpred(Context, 44))) throw new FailedPredicateException(this, "Precpred(Context, 44)");
						State = 1568;
						Match(Dot);
						State = 1569;
						identifierName();
						State = 1571;
						ErrorHandler.Sync(this);
						switch ( Interpreter.AdaptivePredict(TokenStream,193,Context) ) {
						case 1:
							{
							State = 1570;
							nestedTypeGeneric();
							}
							break;
						}
						}
						break;
					case 18:
						{
						_localctx = new ArgumentsExpressionContext(new SingleExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_singleExpression);
						State = 1573;
						if (!(Precpred(Context, 41))) throw new FailedPredicateException(this, "Precpred(Context, 41)");
						State = 1574;
						arguments();
						}
						break;
					case 19:
						{
						_localctx = new PostIncrementExpressionContext(new SingleExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_singleExpression);
						State = 1575;
						if (!(Precpred(Context, 40))) throw new FailedPredicateException(this, "Precpred(Context, 40)");
						State = 1576;
						if (!(this.notLineTerminator())) throw new FailedPredicateException(this, "this.notLineTerminator()");
						State = 1577;
						Match(PlusPlus);
						}
						break;
					case 20:
						{
						_localctx = new PostDecreaseExpressionContext(new SingleExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_singleExpression);
						State = 1578;
						if (!(Precpred(Context, 39))) throw new FailedPredicateException(this, "Precpred(Context, 39)");
						State = 1579;
						if (!(this.notLineTerminator())) throw new FailedPredicateException(this, "this.notLineTerminator()");
						State = 1580;
						Match(MinusMinus);
						}
						break;
					case 21:
						{
						_localctx = new TemplateStringExpressionContext(new SingleExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_singleExpression);
						State = 1581;
						if (!(Precpred(Context, 14))) throw new FailedPredicateException(this, "Precpred(Context, 14)");
						State = 1582;
						templateStringLiteral();
						}
						break;
					case 22:
						{
						_localctx = new CastAsExpressionContext(new SingleExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_singleExpression);
						State = 1583;
						if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
						State = 1584;
						Match(As);
						State = 1585;
						asExpression();
						}
						break;
					}
					} 
				}
				State = 1590;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,195,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class AsExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public PredefinedTypeContext predefinedType() {
			return GetRuleContext<PredefinedTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OpenBracket() { return GetToken(TypeScriptParser.OpenBracket, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CloseBracket() { return GetToken(TypeScriptParser.CloseBracket, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SingleExpressionContext singleExpression() {
			return GetRuleContext<SingleExpressionContext>(0);
		}
		public AsExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_asExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.EnterAsExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.ExitAsExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypeScriptParserVisitor<TResult> typedVisitor = visitor as ITypeScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAsExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AsExpressionContext asExpression() {
		AsExpressionContext _localctx = new AsExpressionContext(Context, State);
		EnterRule(_localctx, 256, RULE_asExpression);
		try {
			State = 1597;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,197,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1591;
				predefinedType();
				State = 1594;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,196,Context) ) {
				case 1:
					{
					State = 1592;
					Match(OpenBracket);
					State = 1593;
					Match(CloseBracket);
					}
					break;
				}
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1596;
				singleExpression(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArrowFunctionDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ArrowFunctionParametersContext arrowFunctionParameters() {
			return GetRuleContext<ArrowFunctionParametersContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ARROW() { return GetToken(TypeScriptParser.ARROW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ArrowFunctionBodyContext arrowFunctionBody() {
			return GetRuleContext<ArrowFunctionBodyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Async() { return GetToken(TypeScriptParser.Async, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeAnnotationContext typeAnnotation() {
			return GetRuleContext<TypeAnnotationContext>(0);
		}
		public ArrowFunctionDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arrowFunctionDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.EnterArrowFunctionDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.ExitArrowFunctionDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypeScriptParserVisitor<TResult> typedVisitor = visitor as ITypeScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArrowFunctionDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArrowFunctionDeclarationContext arrowFunctionDeclaration() {
		ArrowFunctionDeclarationContext _localctx = new ArrowFunctionDeclarationContext(Context, State);
		EnterRule(_localctx, 258, RULE_arrowFunctionDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1600;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Async) {
				{
				State = 1599;
				Match(Async);
				}
			}

			State = 1602;
			arrowFunctionParameters();
			State = 1604;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Colon) {
				{
				State = 1603;
				typeAnnotation();
				}
			}

			State = 1606;
			Match(ARROW);
			State = 1607;
			arrowFunctionBody();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArrowFunctionParametersContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(TypeScriptParser.Identifier, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OpenParen() { return GetToken(TypeScriptParser.OpenParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CloseParen() { return GetToken(TypeScriptParser.CloseParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FormalParameterListContext formalParameterList() {
			return GetRuleContext<FormalParameterListContext>(0);
		}
		public ArrowFunctionParametersContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arrowFunctionParameters; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.EnterArrowFunctionParameters(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.ExitArrowFunctionParameters(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypeScriptParserVisitor<TResult> typedVisitor = visitor as ITypeScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArrowFunctionParameters(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArrowFunctionParametersContext arrowFunctionParameters() {
		ArrowFunctionParametersContext _localctx = new ArrowFunctionParametersContext(Context, State);
		EnterRule(_localctx, 260, RULE_arrowFunctionParameters);
		int _la;
		try {
			State = 1615;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case Identifier:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1609;
				Match(Identifier);
				}
				break;
			case OpenParen:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1610;
				Match(OpenParen);
				State = 1612;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << OpenBracket) | (1L << OpenBrace) | (1L << Ellipsis))) != 0) || ((((_la - 101)) & ~0x3f) == 0 && ((1L << (_la - 101)) & ((1L << (Private - 101)) | (1L << (Public - 101)) | (1L << (Protected - 101)) | (1L << (TypeAlias - 101)) | (1L << (Require - 101)) | (1L << (At - 101)) | (1L << (Identifier - 101)))) != 0)) {
					{
					State = 1611;
					formalParameterList();
					}
				}

				State = 1614;
				Match(CloseParen);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArrowFunctionBodyContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SingleExpressionContext singleExpression() {
			return GetRuleContext<SingleExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OpenBrace() { return GetToken(TypeScriptParser.OpenBrace, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FunctionBodyContext functionBody() {
			return GetRuleContext<FunctionBodyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CloseBrace() { return GetToken(TypeScriptParser.CloseBrace, 0); }
		public ArrowFunctionBodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arrowFunctionBody; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.EnterArrowFunctionBody(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.ExitArrowFunctionBody(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypeScriptParserVisitor<TResult> typedVisitor = visitor as ITypeScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArrowFunctionBody(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArrowFunctionBodyContext arrowFunctionBody() {
		ArrowFunctionBodyContext _localctx = new ArrowFunctionBodyContext(Context, State);
		EnterRule(_localctx, 262, RULE_arrowFunctionBody);
		try {
			State = 1622;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,202,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1617;
				singleExpression(0);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1618;
				Match(OpenBrace);
				State = 1619;
				functionBody();
				State = 1620;
				Match(CloseBrace);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssignmentOperatorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MultiplyAssign() { return GetToken(TypeScriptParser.MultiplyAssign, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DivideAssign() { return GetToken(TypeScriptParser.DivideAssign, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ModulusAssign() { return GetToken(TypeScriptParser.ModulusAssign, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PlusAssign() { return GetToken(TypeScriptParser.PlusAssign, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MinusAssign() { return GetToken(TypeScriptParser.MinusAssign, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LeftShiftArithmeticAssign() { return GetToken(TypeScriptParser.LeftShiftArithmeticAssign, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RightShiftArithmeticAssign() { return GetToken(TypeScriptParser.RightShiftArithmeticAssign, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RightShiftLogicalAssign() { return GetToken(TypeScriptParser.RightShiftLogicalAssign, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BitAndAssign() { return GetToken(TypeScriptParser.BitAndAssign, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BitXorAssign() { return GetToken(TypeScriptParser.BitXorAssign, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BitOrAssign() { return GetToken(TypeScriptParser.BitOrAssign, 0); }
		public AssignmentOperatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assignmentOperator; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.EnterAssignmentOperator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.ExitAssignmentOperator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypeScriptParserVisitor<TResult> typedVisitor = visitor as ITypeScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssignmentOperator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AssignmentOperatorContext assignmentOperator() {
		AssignmentOperatorContext _localctx = new AssignmentOperatorContext(Context, State);
		EnterRule(_localctx, 264, RULE_assignmentOperator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1624;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << MultiplyAssign) | (1L << DivideAssign) | (1L << ModulusAssign) | (1L << PlusAssign) | (1L << MinusAssign) | (1L << LeftShiftArithmeticAssign) | (1L << RightShiftArithmeticAssign) | (1L << RightShiftLogicalAssign) | (1L << BitAndAssign) | (1L << BitXorAssign) | (1L << BitOrAssign))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LiteralContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NullLiteral() { return GetToken(TypeScriptParser.NullLiteral, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BooleanLiteral() { return GetToken(TypeScriptParser.BooleanLiteral, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode StringLiteral() { return GetToken(TypeScriptParser.StringLiteral, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TemplateStringLiteralContext templateStringLiteral() {
			return GetRuleContext<TemplateStringLiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RegularExpressionLiteral() { return GetToken(TypeScriptParser.RegularExpressionLiteral, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NumericLiteralContext numericLiteral() {
			return GetRuleContext<NumericLiteralContext>(0);
		}
		public LiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_literal; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.EnterLiteral(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.ExitLiteral(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypeScriptParserVisitor<TResult> typedVisitor = visitor as ITypeScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LiteralContext literal() {
		LiteralContext _localctx = new LiteralContext(Context, State);
		EnterRule(_localctx, 266, RULE_literal);
		try {
			State = 1632;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case NullLiteral:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1626;
				Match(NullLiteral);
				}
				break;
			case BooleanLiteral:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1627;
				Match(BooleanLiteral);
				}
				break;
			case StringLiteral:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1628;
				Match(StringLiteral);
				}
				break;
			case BackTick:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1629;
				templateStringLiteral();
				}
				break;
			case RegularExpressionLiteral:
				EnterOuterAlt(_localctx, 5);
				{
				State = 1630;
				Match(RegularExpressionLiteral);
				}
				break;
			case DecimalLiteral:
			case HexIntegerLiteral:
			case OctalIntegerLiteral:
			case OctalIntegerLiteral2:
			case BinaryIntegerLiteral:
				EnterOuterAlt(_localctx, 6);
				{
				State = 1631;
				numericLiteral();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TemplateStringLiteralContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] BackTick() { return GetTokens(TypeScriptParser.BackTick); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BackTick(int i) {
			return GetToken(TypeScriptParser.BackTick, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TemplateStringAtomContext[] templateStringAtom() {
			return GetRuleContexts<TemplateStringAtomContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TemplateStringAtomContext templateStringAtom(int i) {
			return GetRuleContext<TemplateStringAtomContext>(i);
		}
		public TemplateStringLiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_templateStringLiteral; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.EnterTemplateStringLiteral(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.ExitTemplateStringLiteral(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypeScriptParserVisitor<TResult> typedVisitor = visitor as ITypeScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTemplateStringLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TemplateStringLiteralContext templateStringLiteral() {
		TemplateStringLiteralContext _localctx = new TemplateStringLiteralContext(Context, State);
		EnterRule(_localctx, 268, RULE_templateStringLiteral);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1634;
			Match(BackTick);
			State = 1638;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==TemplateStringStartExpression || _la==TemplateStringAtom) {
				{
				{
				State = 1635;
				templateStringAtom();
				}
				}
				State = 1640;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 1641;
			Match(BackTick);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TemplateStringAtomContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TemplateStringAtom() { return GetToken(TypeScriptParser.TemplateStringAtom, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TemplateStringStartExpression() { return GetToken(TypeScriptParser.TemplateStringStartExpression, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SingleExpressionContext singleExpression() {
			return GetRuleContext<SingleExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TemplateCloseBrace() { return GetToken(TypeScriptParser.TemplateCloseBrace, 0); }
		public TemplateStringAtomContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_templateStringAtom; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.EnterTemplateStringAtom(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.ExitTemplateStringAtom(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypeScriptParserVisitor<TResult> typedVisitor = visitor as ITypeScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTemplateStringAtom(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TemplateStringAtomContext templateStringAtom() {
		TemplateStringAtomContext _localctx = new TemplateStringAtomContext(Context, State);
		EnterRule(_localctx, 270, RULE_templateStringAtom);
		try {
			State = 1648;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case TemplateStringAtom:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1643;
				Match(TemplateStringAtom);
				}
				break;
			case TemplateStringStartExpression:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1644;
				Match(TemplateStringStartExpression);
				State = 1645;
				singleExpression(0);
				State = 1646;
				Match(TemplateCloseBrace);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NumericLiteralContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DecimalLiteral() { return GetToken(TypeScriptParser.DecimalLiteral, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HexIntegerLiteral() { return GetToken(TypeScriptParser.HexIntegerLiteral, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OctalIntegerLiteral() { return GetToken(TypeScriptParser.OctalIntegerLiteral, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OctalIntegerLiteral2() { return GetToken(TypeScriptParser.OctalIntegerLiteral2, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BinaryIntegerLiteral() { return GetToken(TypeScriptParser.BinaryIntegerLiteral, 0); }
		public NumericLiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_numericLiteral; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.EnterNumericLiteral(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.ExitNumericLiteral(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypeScriptParserVisitor<TResult> typedVisitor = visitor as ITypeScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNumericLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NumericLiteralContext numericLiteral() {
		NumericLiteralContext _localctx = new NumericLiteralContext(Context, State);
		EnterRule(_localctx, 272, RULE_numericLiteral);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1650;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << DecimalLiteral) | (1L << HexIntegerLiteral) | (1L << OctalIntegerLiteral) | (1L << OctalIntegerLiteral2) | (1L << BinaryIntegerLiteral))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IdentifierNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(TypeScriptParser.Identifier, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ReservedWordContext reservedWord() {
			return GetRuleContext<ReservedWordContext>(0);
		}
		public IdentifierNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_identifierName; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.EnterIdentifierName(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.ExitIdentifierName(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypeScriptParserVisitor<TResult> typedVisitor = visitor as ITypeScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIdentifierName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IdentifierNameContext identifierName() {
		IdentifierNameContext _localctx = new IdentifierNameContext(Context, State);
		EnterRule(_localctx, 274, RULE_identifierName);
		try {
			State = 1654;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case Identifier:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1652;
				Match(Identifier);
				}
				break;
			case NullLiteral:
			case BooleanLiteral:
			case Break:
			case Do:
			case Instanceof:
			case Typeof:
			case Case:
			case Else:
			case New:
			case Var:
			case Catch:
			case Finally:
			case Return:
			case Void:
			case Continue:
			case For:
			case Switch:
			case While:
			case Debugger:
			case Function_:
			case This:
			case With:
			case Default:
			case If:
			case Throw:
			case Delete:
			case In:
			case Try:
			case From:
			case ReadOnly:
			case Async:
			case Class:
			case Enum:
			case Extends:
			case Super:
			case Const:
			case Export:
			case Import:
			case Implements:
			case Let:
			case Private:
			case Public:
			case Interface:
			case Package:
			case Protected:
			case Static:
			case Yield:
			case String:
			case TypeAlias:
			case Get:
			case Set:
			case Require:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1653;
				reservedWord();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IdentifierOrKeyWordContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(TypeScriptParser.Identifier, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TypeAlias() { return GetToken(TypeScriptParser.TypeAlias, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Require() { return GetToken(TypeScriptParser.Require, 0); }
		public IdentifierOrKeyWordContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_identifierOrKeyWord; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.EnterIdentifierOrKeyWord(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.ExitIdentifierOrKeyWord(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypeScriptParserVisitor<TResult> typedVisitor = visitor as ITypeScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIdentifierOrKeyWord(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IdentifierOrKeyWordContext identifierOrKeyWord() {
		IdentifierOrKeyWordContext _localctx = new IdentifierOrKeyWordContext(Context, State);
		EnterRule(_localctx, 276, RULE_identifierOrKeyWord);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1656;
			_la = TokenStream.LA(1);
			if ( !(((((_la - 113)) & ~0x3f) == 0 && ((1L << (_la - 113)) & ((1L << (TypeAlias - 113)) | (1L << (Require - 113)) | (1L << (Identifier - 113)))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReservedWordContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public KeywordContext keyword() {
			return GetRuleContext<KeywordContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NullLiteral() { return GetToken(TypeScriptParser.NullLiteral, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BooleanLiteral() { return GetToken(TypeScriptParser.BooleanLiteral, 0); }
		public ReservedWordContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_reservedWord; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.EnterReservedWord(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.ExitReservedWord(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypeScriptParserVisitor<TResult> typedVisitor = visitor as ITypeScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReservedWord(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ReservedWordContext reservedWord() {
		ReservedWordContext _localctx = new ReservedWordContext(Context, State);
		EnterRule(_localctx, 278, RULE_reservedWord);
		try {
			State = 1661;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case Break:
			case Do:
			case Instanceof:
			case Typeof:
			case Case:
			case Else:
			case New:
			case Var:
			case Catch:
			case Finally:
			case Return:
			case Void:
			case Continue:
			case For:
			case Switch:
			case While:
			case Debugger:
			case Function_:
			case This:
			case With:
			case Default:
			case If:
			case Throw:
			case Delete:
			case In:
			case Try:
			case From:
			case ReadOnly:
			case Async:
			case Class:
			case Enum:
			case Extends:
			case Super:
			case Const:
			case Export:
			case Import:
			case Implements:
			case Let:
			case Private:
			case Public:
			case Interface:
			case Package:
			case Protected:
			case Static:
			case Yield:
			case String:
			case TypeAlias:
			case Get:
			case Set:
			case Require:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1658;
				keyword();
				}
				break;
			case NullLiteral:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1659;
				Match(NullLiteral);
				}
				break;
			case BooleanLiteral:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1660;
				Match(BooleanLiteral);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class KeywordContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Break() { return GetToken(TypeScriptParser.Break, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Do() { return GetToken(TypeScriptParser.Do, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Instanceof() { return GetToken(TypeScriptParser.Instanceof, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Typeof() { return GetToken(TypeScriptParser.Typeof, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Case() { return GetToken(TypeScriptParser.Case, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Else() { return GetToken(TypeScriptParser.Else, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode New() { return GetToken(TypeScriptParser.New, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Var() { return GetToken(TypeScriptParser.Var, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Catch() { return GetToken(TypeScriptParser.Catch, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Finally() { return GetToken(TypeScriptParser.Finally, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Return() { return GetToken(TypeScriptParser.Return, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Void() { return GetToken(TypeScriptParser.Void, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Continue() { return GetToken(TypeScriptParser.Continue, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode For() { return GetToken(TypeScriptParser.For, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Switch() { return GetToken(TypeScriptParser.Switch, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode While() { return GetToken(TypeScriptParser.While, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Debugger() { return GetToken(TypeScriptParser.Debugger, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Function_() { return GetToken(TypeScriptParser.Function_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode This() { return GetToken(TypeScriptParser.This, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode With() { return GetToken(TypeScriptParser.With, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Default() { return GetToken(TypeScriptParser.Default, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode If() { return GetToken(TypeScriptParser.If, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Throw() { return GetToken(TypeScriptParser.Throw, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Delete() { return GetToken(TypeScriptParser.Delete, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode In() { return GetToken(TypeScriptParser.In, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Try() { return GetToken(TypeScriptParser.Try, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ReadOnly() { return GetToken(TypeScriptParser.ReadOnly, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Async() { return GetToken(TypeScriptParser.Async, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode From() { return GetToken(TypeScriptParser.From, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Class() { return GetToken(TypeScriptParser.Class, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Enum() { return GetToken(TypeScriptParser.Enum, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Extends() { return GetToken(TypeScriptParser.Extends, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Super() { return GetToken(TypeScriptParser.Super, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Const() { return GetToken(TypeScriptParser.Const, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Export() { return GetToken(TypeScriptParser.Export, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Import() { return GetToken(TypeScriptParser.Import, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Implements() { return GetToken(TypeScriptParser.Implements, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Let() { return GetToken(TypeScriptParser.Let, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Private() { return GetToken(TypeScriptParser.Private, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Public() { return GetToken(TypeScriptParser.Public, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Interface() { return GetToken(TypeScriptParser.Interface, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Package() { return GetToken(TypeScriptParser.Package, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Protected() { return GetToken(TypeScriptParser.Protected, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Static() { return GetToken(TypeScriptParser.Static, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Yield() { return GetToken(TypeScriptParser.Yield, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Get() { return GetToken(TypeScriptParser.Get, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Set() { return GetToken(TypeScriptParser.Set, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Require() { return GetToken(TypeScriptParser.Require, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TypeAlias() { return GetToken(TypeScriptParser.TypeAlias, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode String() { return GetToken(TypeScriptParser.String, 0); }
		public KeywordContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_keyword; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.EnterKeyword(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.ExitKeyword(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypeScriptParserVisitor<TResult> typedVisitor = visitor as ITypeScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitKeyword(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public KeywordContext keyword() {
		KeywordContext _localctx = new KeywordContext(Context, State);
		EnterRule(_localctx, 280, RULE_keyword);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1663;
			_la = TokenStream.LA(1);
			if ( !(((((_la - 62)) & ~0x3f) == 0 && ((1L << (_la - 62)) & ((1L << (Break - 62)) | (1L << (Do - 62)) | (1L << (Instanceof - 62)) | (1L << (Typeof - 62)) | (1L << (Case - 62)) | (1L << (Else - 62)) | (1L << (New - 62)) | (1L << (Var - 62)) | (1L << (Catch - 62)) | (1L << (Finally - 62)) | (1L << (Return - 62)) | (1L << (Void - 62)) | (1L << (Continue - 62)) | (1L << (For - 62)) | (1L << (Switch - 62)) | (1L << (While - 62)) | (1L << (Debugger - 62)) | (1L << (Function_ - 62)) | (1L << (This - 62)) | (1L << (With - 62)) | (1L << (Default - 62)) | (1L << (If - 62)) | (1L << (Throw - 62)) | (1L << (Delete - 62)) | (1L << (In - 62)) | (1L << (Try - 62)) | (1L << (From - 62)) | (1L << (ReadOnly - 62)) | (1L << (Async - 62)) | (1L << (Class - 62)) | (1L << (Enum - 62)) | (1L << (Extends - 62)) | (1L << (Super - 62)) | (1L << (Const - 62)) | (1L << (Export - 62)) | (1L << (Import - 62)) | (1L << (Implements - 62)) | (1L << (Let - 62)) | (1L << (Private - 62)) | (1L << (Public - 62)) | (1L << (Interface - 62)) | (1L << (Package - 62)) | (1L << (Protected - 62)) | (1L << (Static - 62)) | (1L << (Yield - 62)) | (1L << (String - 62)) | (1L << (TypeAlias - 62)) | (1L << (Get - 62)) | (1L << (Set - 62)) | (1L << (Require - 62)))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GetterContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Get() { return GetToken(TypeScriptParser.Get, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public PropertyNameContext propertyName() {
			return GetRuleContext<PropertyNameContext>(0);
		}
		public GetterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_getter; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.EnterGetter(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.ExitGetter(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypeScriptParserVisitor<TResult> typedVisitor = visitor as ITypeScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGetter(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public GetterContext getter() {
		GetterContext _localctx = new GetterContext(Context, State);
		EnterRule(_localctx, 282, RULE_getter);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1665;
			Match(Get);
			State = 1666;
			propertyName();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SetterContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Set() { return GetToken(TypeScriptParser.Set, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public PropertyNameContext propertyName() {
			return GetRuleContext<PropertyNameContext>(0);
		}
		public SetterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_setter; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.EnterSetter(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.ExitSetter(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypeScriptParserVisitor<TResult> typedVisitor = visitor as ITypeScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSetter(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SetterContext setter() {
		SetterContext _localctx = new SetterContext(Context, State);
		EnterRule(_localctx, 284, RULE_setter);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1668;
			Match(Set);
			State = 1669;
			propertyName();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EosContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SemiColon() { return GetToken(TypeScriptParser.SemiColon, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(TypeScriptParser.Eof, 0); }
		public EosContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_eos; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.EnterEos(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.ExitEos(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypeScriptParserVisitor<TResult> typedVisitor = visitor as ITypeScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEos(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EosContext eos() {
		EosContext _localctx = new EosContext(Context, State);
		EnterRule(_localctx, 286, RULE_eos);
		try {
			State = 1675;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,208,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1671;
				Match(SemiColon);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1672;
				Match(Eof);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1673;
				if (!(this.lineTerminatorAhead())) throw new FailedPredicateException(this, "this.lineTerminatorAhead()");
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1674;
				if (!(this.closeBrace())) throw new FailedPredicateException(this, "this.closeBrace()");
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 10: return unionOrIntersectionOrPrimaryType_sempred((UnionOrIntersectionOrPrimaryTypeContext)_localctx, predIndex);
		case 11: return primaryType_sempred((PrimaryTypeContext)_localctx, predIndex);
		case 22: return arrayType_sempred((ArrayTypeContext)_localctx, predIndex);
		case 57: return decoratorMemberExpression_sempred((DecoratorMemberExpressionContext)_localctx, predIndex);
		case 73: return expressionStatement_sempred((ExpressionStatementContext)_localctx, predIndex);
		case 75: return iterationStatement_sempred((IterationStatementContext)_localctx, predIndex);
		case 77: return continueStatement_sempred((ContinueStatementContext)_localctx, predIndex);
		case 78: return breakStatement_sempred((BreakStatementContext)_localctx, predIndex);
		case 79: return returnStatement_sempred((ReturnStatementContext)_localctx, predIndex);
		case 80: return yieldStatement_sempred((YieldStatementContext)_localctx, predIndex);
		case 88: return throwStatement_sempred((ThrowStatementContext)_localctx, predIndex);
		case 127: return singleExpression_sempred((SingleExpressionContext)_localctx, predIndex);
		case 143: return eos_sempred((EosContext)_localctx, predIndex);
		}
		return true;
	}
	private bool unionOrIntersectionOrPrimaryType_sempred(UnionOrIntersectionOrPrimaryTypeContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 3);
		case 1: return Precpred(Context, 2);
		}
		return true;
	}
	private bool primaryType_sempred(PrimaryTypeContext _localctx, int predIndex) {
		switch (predIndex) {
		case 2: return Precpred(Context, 5);
		case 3: return notLineTerminator();
		}
		return true;
	}
	private bool arrayType_sempred(ArrayTypeContext _localctx, int predIndex) {
		switch (predIndex) {
		case 4: return notLineTerminator();
		}
		return true;
	}
	private bool decoratorMemberExpression_sempred(DecoratorMemberExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 5: return Precpred(Context, 2);
		}
		return true;
	}
	private bool expressionStatement_sempred(ExpressionStatementContext _localctx, int predIndex) {
		switch (predIndex) {
		case 6: return this.notOpenBraceAndNotFunction();
		}
		return true;
	}
	private bool iterationStatement_sempred(IterationStatementContext _localctx, int predIndex) {
		switch (predIndex) {
		case 7: return this.p("of");
		case 8: return this.p("of");
		}
		return true;
	}
	private bool continueStatement_sempred(ContinueStatementContext _localctx, int predIndex) {
		switch (predIndex) {
		case 9: return this.notLineTerminator();
		}
		return true;
	}
	private bool breakStatement_sempred(BreakStatementContext _localctx, int predIndex) {
		switch (predIndex) {
		case 10: return this.notLineTerminator();
		}
		return true;
	}
	private bool returnStatement_sempred(ReturnStatementContext _localctx, int predIndex) {
		switch (predIndex) {
		case 11: return this.notLineTerminator();
		}
		return true;
	}
	private bool yieldStatement_sempred(YieldStatementContext _localctx, int predIndex) {
		switch (predIndex) {
		case 12: return this.notLineTerminator();
		}
		return true;
	}
	private bool throwStatement_sempred(ThrowStatementContext _localctx, int predIndex) {
		switch (predIndex) {
		case 13: return this.notLineTerminator();
		}
		return true;
	}
	private bool singleExpression_sempred(SingleExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 14: return Precpred(Context, 29);
		case 15: return Precpred(Context, 28);
		case 16: return Precpred(Context, 27);
		case 17: return Precpred(Context, 26);
		case 18: return Precpred(Context, 25);
		case 19: return Precpred(Context, 24);
		case 20: return Precpred(Context, 23);
		case 21: return Precpred(Context, 22);
		case 22: return Precpred(Context, 21);
		case 23: return Precpred(Context, 20);
		case 24: return Precpred(Context, 19);
		case 25: return Precpred(Context, 18);
		case 26: return Precpred(Context, 17);
		case 27: return Precpred(Context, 16);
		case 28: return Precpred(Context, 15);
		case 29: return Precpred(Context, 45);
		case 30: return Precpred(Context, 44);
		case 31: return Precpred(Context, 41);
		case 32: return Precpred(Context, 40);
		case 33: return this.notLineTerminator();
		case 34: return Precpred(Context, 39);
		case 35: return this.notLineTerminator();
		case 36: return Precpred(Context, 14);
		case 37: return Precpred(Context, 1);
		}
		return true;
	}
	private bool eos_sempred(EosContext _localctx, int predIndex) {
		switch (predIndex) {
		case 38: return this.lineTerminatorAhead();
		case 39: return this.closeBrace();
		}
		return true;
	}

	private static int[] _serializedATN = {
		4,1,133,1678,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,
		7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,7,14,
		2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,7,21,
		2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,7,28,
		2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,2,35,7,35,
		2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,2,42,7,42,
		2,43,7,43,2,44,7,44,2,45,7,45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,
		2,50,7,50,2,51,7,51,2,52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,7,56,
		2,57,7,57,2,58,7,58,2,59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,7,63,
		2,64,7,64,2,65,7,65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,2,70,7,70,
		2,71,7,71,2,72,7,72,2,73,7,73,2,74,7,74,2,75,7,75,2,76,7,76,2,77,7,77,
		2,78,7,78,2,79,7,79,2,80,7,80,2,81,7,81,2,82,7,82,2,83,7,83,2,84,7,84,
		2,85,7,85,2,86,7,86,2,87,7,87,2,88,7,88,2,89,7,89,2,90,7,90,2,91,7,91,
		2,92,7,92,2,93,7,93,2,94,7,94,2,95,7,95,2,96,7,96,2,97,7,97,2,98,7,98,
		2,99,7,99,2,100,7,100,2,101,7,101,2,102,7,102,2,103,7,103,2,104,7,104,
		2,105,7,105,2,106,7,106,2,107,7,107,2,108,7,108,2,109,7,109,2,110,7,110,
		2,111,7,111,2,112,7,112,2,113,7,113,2,114,7,114,2,115,7,115,2,116,7,116,
		2,117,7,117,2,118,7,118,2,119,7,119,2,120,7,120,2,121,7,121,2,122,7,122,
		2,123,7,123,2,124,7,124,2,125,7,125,2,126,7,126,2,127,7,127,2,128,7,128,
		2,129,7,129,2,130,7,130,2,131,7,131,2,132,7,132,2,133,7,133,2,134,7,134,
		2,135,7,135,2,136,7,136,2,137,7,137,2,138,7,138,2,139,7,139,2,140,7,140,
		2,141,7,141,2,142,7,142,2,143,7,143,1,0,1,0,1,0,1,1,1,1,3,1,294,8,1,1,
		2,1,2,3,2,298,8,2,1,2,1,2,1,3,1,3,1,3,5,3,305,8,3,10,3,12,3,308,9,3,1,
		4,1,4,3,4,312,8,4,1,4,3,4,315,8,4,1,5,1,5,1,5,1,6,1,6,3,6,322,8,6,1,6,
		1,6,1,7,1,7,1,7,5,7,329,8,7,10,7,12,7,332,9,7,1,8,1,8,1,9,1,9,1,9,1,9,
		1,9,3,9,341,8,9,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,5,10,352,
		8,10,10,10,12,10,355,9,10,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,
		1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,3,11,375,8,11,1,11,1,11,1,
		11,1,11,5,11,381,8,11,10,11,12,11,384,9,11,1,12,1,12,1,13,1,13,3,13,390,
		8,13,1,14,1,14,3,14,394,8,14,1,15,1,15,1,15,1,15,1,16,1,16,1,16,1,16,1,
		16,1,16,1,16,1,16,1,16,3,16,409,8,16,1,17,1,17,3,17,413,8,17,1,18,1,18,
		3,18,417,8,18,1,18,1,18,1,19,1,19,3,19,423,8,19,1,20,1,20,1,20,5,20,428,
		8,20,10,20,12,20,431,9,20,1,21,1,21,1,21,1,21,1,21,1,21,1,21,3,21,440,
		8,21,3,21,442,8,21,1,22,1,22,1,22,1,22,1,22,1,23,1,23,1,23,1,23,1,24,1,
		24,1,24,5,24,456,8,24,10,24,12,24,459,9,24,1,25,3,25,462,8,25,1,25,1,25,
		3,25,466,8,25,1,25,1,25,1,25,1,25,1,26,1,26,3,26,474,8,26,1,26,1,26,3,
		26,478,8,26,1,26,1,26,1,26,1,26,1,27,1,27,1,27,1,28,1,28,1,28,1,28,4,28,
		491,8,28,11,28,12,28,492,1,28,1,28,3,28,497,8,28,1,29,3,29,500,8,29,1,
		29,1,29,3,29,504,8,29,1,29,3,29,507,8,29,1,29,1,29,3,29,511,8,29,1,30,
		1,30,1,30,1,31,3,31,517,8,31,1,31,1,31,3,31,521,8,31,1,31,1,31,3,31,525,
		8,31,1,32,1,32,1,32,1,32,5,32,531,8,32,10,32,12,32,534,9,32,1,32,1,32,
		3,32,538,8,32,3,32,540,8,32,1,33,1,33,1,33,5,33,545,8,33,10,33,12,33,548,
		9,33,1,34,1,34,3,34,552,8,34,1,35,3,35,555,8,35,1,35,3,35,558,8,35,1,35,
		1,35,1,35,3,35,563,8,35,1,35,3,35,566,8,35,1,35,3,35,569,8,35,1,36,1,36,
		1,36,3,36,574,8,36,1,37,3,37,577,8,37,1,37,3,37,580,8,37,1,37,1,37,3,37,
		584,8,37,1,38,1,38,1,39,1,39,3,39,590,8,39,1,40,1,40,3,40,594,8,40,1,40,
		1,40,3,40,598,8,40,1,40,1,40,3,40,602,8,40,1,41,1,41,1,41,1,41,1,41,1,
		41,1,41,1,42,1,42,3,42,613,8,42,1,42,1,42,1,43,1,43,1,43,3,43,620,8,43,
		1,43,1,43,1,43,1,43,1,44,3,44,627,8,44,1,44,1,44,1,44,3,44,632,8,44,1,
		44,1,44,1,44,1,44,1,44,1,44,3,44,640,8,44,1,45,3,45,643,8,45,1,45,3,45,
		646,8,45,1,45,1,45,1,45,3,45,651,8,45,1,45,3,45,654,8,45,1,45,1,45,3,45,
		658,8,45,1,46,1,46,1,46,1,47,1,47,1,47,5,47,666,8,47,10,47,12,47,669,9,
		47,1,48,3,48,672,8,48,1,48,1,48,1,48,1,48,3,48,678,8,48,1,48,1,48,1,49,
		1,49,3,49,684,8,49,1,50,1,50,1,50,5,50,689,8,50,10,50,12,50,692,9,50,1,
		51,1,51,1,51,3,51,697,8,51,1,52,1,52,1,52,1,52,3,52,703,8,52,1,52,1,52,
		1,53,1,53,4,53,709,8,53,11,53,12,53,710,1,53,5,53,714,8,53,10,53,12,53,
		717,9,53,1,54,1,54,1,54,1,54,1,54,1,55,4,55,725,8,55,11,55,12,55,726,1,
		56,1,56,1,56,3,56,732,8,56,1,57,1,57,1,57,1,57,1,57,1,57,3,57,740,8,57,
		1,57,1,57,1,57,5,57,745,8,57,10,57,12,57,748,9,57,1,58,1,58,1,58,1,59,
		3,59,754,8,59,1,59,1,59,1,60,3,60,759,8,60,1,60,1,60,1,61,1,61,1,61,1,
		61,1,61,1,61,1,61,1,61,1,61,1,61,1,61,1,61,1,61,1,61,1,61,1,61,1,61,1,
		61,1,61,1,61,1,61,1,61,1,61,1,61,1,61,1,61,1,61,1,61,1,61,1,61,3,61,793,
		8,61,1,62,1,62,3,62,797,8,62,1,62,1,62,1,63,4,63,802,8,63,11,63,12,63,
		803,1,64,1,64,1,64,1,64,3,64,810,8,64,1,64,1,64,1,65,1,65,1,65,3,65,817,
		8,65,1,66,1,66,3,66,821,8,66,1,66,1,66,3,66,825,8,66,1,66,1,66,1,66,1,
		66,1,67,1,67,1,67,3,67,834,8,67,1,67,1,67,1,67,1,67,5,67,840,8,67,10,67,
		12,67,843,9,67,1,67,1,67,1,68,1,68,3,68,849,8,68,1,68,1,68,3,68,853,8,
		68,1,69,1,69,3,69,857,8,69,1,69,1,69,3,69,861,8,69,1,69,3,69,864,8,69,
		1,69,3,69,867,8,69,1,69,3,69,870,8,69,1,69,1,69,3,69,874,8,69,1,69,1,69,
		3,69,878,8,69,1,69,1,69,3,69,882,8,69,3,69,884,8,69,1,70,1,70,1,70,5,70,
		889,8,70,10,70,12,70,892,9,70,1,71,1,71,1,71,3,71,897,8,71,1,71,3,71,900,
		8,71,1,71,3,71,903,8,71,1,71,1,71,3,71,907,8,71,1,71,3,71,910,8,71,1,72,
		1,72,1,73,1,73,1,73,3,73,917,8,73,1,74,1,74,1,74,1,74,1,74,1,74,1,74,3,
		74,926,8,74,1,75,1,75,1,75,1,75,1,75,1,75,1,75,1,75,1,75,1,75,1,75,1,75,
		1,75,1,75,1,75,1,75,1,75,3,75,945,8,75,1,75,1,75,3,75,949,8,75,1,75,1,
		75,3,75,953,8,75,1,75,1,75,1,75,1,75,1,75,1,75,1,75,1,75,3,75,963,8,75,
		1,75,1,75,3,75,967,8,75,1,75,1,75,1,75,1,75,1,75,1,75,1,75,1,75,1,75,3,
		75,978,8,75,1,75,1,75,1,75,1,75,1,75,1,75,1,75,1,75,1,75,1,75,1,75,3,75,
		991,8,75,1,75,1,75,1,75,1,75,3,75,997,8,75,1,76,1,76,1,77,1,77,1,77,3,
		77,1004,8,77,1,77,1,77,1,78,1,78,1,78,3,78,1011,8,78,1,78,1,78,1,79,1,
		79,1,79,3,79,1018,8,79,1,79,1,79,1,80,1,80,1,80,3,80,1025,8,80,1,80,1,
		80,1,81,1,81,1,81,1,81,1,81,1,81,1,82,1,82,1,82,1,82,1,82,1,82,1,83,1,
		83,3,83,1043,8,83,1,83,1,83,3,83,1047,8,83,3,83,1049,8,83,1,83,1,83,1,
		84,4,84,1054,8,84,11,84,12,84,1055,1,85,1,85,1,85,1,85,3,85,1062,8,85,
		1,86,1,86,1,86,3,86,1067,8,86,1,87,1,87,1,87,1,87,1,88,1,88,1,88,1,88,
		1,88,1,89,1,89,1,89,1,89,3,89,1082,8,89,1,89,3,89,1085,8,89,1,90,1,90,
		1,90,1,90,1,90,1,90,1,91,1,91,1,91,1,92,1,92,1,92,1,93,1,93,1,93,1,93,
		1,93,1,93,1,93,1,93,3,93,1107,8,93,1,94,3,94,1110,8,94,1,94,1,94,1,94,
		3,94,1115,8,94,1,94,1,94,1,94,1,95,3,95,1121,8,95,1,95,3,95,1124,8,95,
		1,96,1,96,5,96,1128,8,96,10,96,12,96,1131,9,96,1,96,1,96,1,97,1,97,1,97,
		1,98,1,98,1,98,1,99,1,99,3,99,1143,8,99,1,99,1,99,1,99,3,99,1148,8,99,
		1,100,1,100,1,100,3,100,1153,8,100,1,100,3,100,1156,8,100,1,100,3,100,
		1159,8,100,1,100,1,100,1,100,1,100,1,100,1,100,1,100,1,100,1,100,1,100,
		3,100,1171,8,100,1,100,1,100,1,100,3,100,1176,8,100,1,100,3,100,1179,8,
		100,1,101,3,101,1182,8,101,1,101,3,101,1185,8,101,1,101,3,101,1188,8,101,
		1,101,3,101,1191,8,101,1,102,1,102,1,102,1,103,3,103,1197,8,103,1,103,
		1,103,1,103,3,103,1202,8,103,1,103,1,103,1,103,1,103,1,103,1,104,1,104,
		1,104,3,104,1212,8,104,1,104,1,104,3,104,1216,8,104,1,104,1,104,1,104,
		1,104,1,104,1,105,1,105,1,105,1,105,5,105,1227,8,105,10,105,12,105,1230,
		9,105,1,105,3,105,1233,8,105,1,105,1,105,1,106,1,106,1,106,1,107,1,107,
		1,107,1,107,5,107,1244,8,107,10,107,12,107,1247,9,107,1,107,3,107,1250,
		8,107,1,107,1,107,1,108,1,108,1,108,1,108,1,108,3,108,1259,8,108,1,108,
		1,108,1,108,1,108,1,108,1,109,1,109,1,109,5,109,1269,8,109,10,109,12,109,
		1272,9,109,1,109,1,109,3,109,1276,8,109,1,109,1,109,1,109,1,109,1,109,
		3,109,1283,8,109,3,109,1285,8,109,1,110,3,110,1288,8,110,1,110,3,110,1291,
		8,110,1,110,1,110,3,110,1295,8,110,1,110,3,110,1298,8,110,1,110,1,110,
		3,110,1302,8,110,1,111,1,111,1,111,1,112,3,112,1308,8,112,1,113,4,113,
		1311,8,113,11,113,12,113,1312,1,114,1,114,3,114,1317,8,114,1,114,1,114,
		1,115,1,115,4,115,1323,8,115,11,115,12,115,1324,1,115,5,115,1328,8,115,
		10,115,12,115,1331,9,115,1,116,3,116,1334,8,116,1,116,1,116,3,116,1338,
		8,116,1,116,3,116,1341,8,116,1,117,1,117,1,117,1,117,5,117,1347,8,117,
		10,117,12,117,1350,9,117,1,117,3,117,1353,8,117,3,117,1355,8,117,1,117,
		1,117,1,118,1,118,1,118,1,118,1,118,1,118,1,118,1,118,1,118,1,118,1,118,
		1,118,1,118,1,118,1,118,3,118,1374,8,118,1,119,1,119,1,119,1,119,3,119,
		1380,8,119,1,119,1,119,1,119,1,119,1,120,1,120,1,120,1,120,3,120,1390,
		8,120,1,120,3,120,1393,8,120,1,120,1,120,1,120,1,120,1,120,1,121,1,121,
		1,121,3,121,1403,8,121,1,122,1,122,1,122,3,122,1408,8,122,3,122,1410,8,
		122,1,122,1,122,1,123,1,123,1,123,5,123,1417,8,123,10,123,12,123,1420,
		9,123,1,124,3,124,1423,8,124,1,124,1,124,3,124,1427,8,124,1,125,1,125,
		1,125,5,125,1432,8,125,10,125,12,125,1435,9,125,1,126,1,126,3,126,1439,
		8,126,1,126,1,126,3,126,1443,8,126,1,126,1,126,3,126,1447,8,126,1,126,
		1,126,1,126,1,126,1,127,1,127,1,127,1,127,1,127,3,127,1458,8,127,1,127,
		1,127,1,127,1,127,3,127,1464,8,127,1,127,1,127,1,127,1,127,1,127,3,127,
		1471,8,127,1,127,1,127,1,127,1,127,1,127,1,127,1,127,1,127,1,127,1,127,
		1,127,1,127,1,127,1,127,1,127,1,127,1,127,1,127,1,127,1,127,1,127,1,127,
		1,127,1,127,1,127,3,127,1498,8,127,1,127,1,127,1,127,1,127,1,127,1,127,
		1,127,1,127,1,127,1,127,3,127,1510,8,127,3,127,1512,8,127,1,127,1,127,
		1,127,1,127,1,127,1,127,1,127,1,127,1,127,1,127,1,127,1,127,1,127,1,127,
		1,127,1,127,1,127,1,127,1,127,1,127,1,127,1,127,1,127,1,127,1,127,1,127,
		1,127,1,127,1,127,1,127,1,127,1,127,1,127,1,127,1,127,1,127,1,127,1,127,
		1,127,1,127,1,127,1,127,1,127,1,127,1,127,1,127,1,127,1,127,1,127,1,127,
		1,127,1,127,1,127,1,127,1,127,1,127,1,127,1,127,3,127,1572,8,127,1,127,
		1,127,1,127,1,127,1,127,1,127,1,127,1,127,1,127,1,127,1,127,1,127,1,127,
		5,127,1587,8,127,10,127,12,127,1590,9,127,1,128,1,128,1,128,3,128,1595,
		8,128,1,128,3,128,1598,8,128,1,129,3,129,1601,8,129,1,129,1,129,3,129,
		1605,8,129,1,129,1,129,1,129,1,130,1,130,1,130,3,130,1613,8,130,1,130,
		3,130,1616,8,130,1,131,1,131,1,131,1,131,1,131,3,131,1623,8,131,1,132,
		1,132,1,133,1,133,1,133,1,133,1,133,1,133,3,133,1633,8,133,1,134,1,134,
		5,134,1637,8,134,10,134,12,134,1640,9,134,1,134,1,134,1,135,1,135,1,135,
		1,135,1,135,3,135,1649,8,135,1,136,1,136,1,137,1,137,3,137,1655,8,137,
		1,138,1,138,1,139,1,139,1,139,3,139,1662,8,139,1,140,1,140,1,141,1,141,
		1,141,1,142,1,142,1,142,1,143,1,143,1,143,1,143,3,143,1676,8,143,1,143,
		0,4,20,22,114,254,144,0,2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32,34,
		36,38,40,42,44,46,48,50,52,54,56,58,60,62,64,66,68,70,72,74,76,78,80,82,
		84,86,88,90,92,94,96,98,100,102,104,106,108,110,112,114,116,118,120,122,
		124,126,128,130,132,134,136,138,140,142,144,146,148,150,152,154,156,158,
		160,162,164,166,168,170,172,174,176,178,180,182,184,186,188,190,192,194,
		196,198,200,202,204,206,208,210,212,214,216,218,220,222,224,226,228,230,
		232,234,236,238,240,242,244,246,248,250,252,254,256,258,260,262,264,266,
		268,270,272,274,276,278,280,282,284,286,0,15,2,0,73,73,108,112,1,0,11,
		12,2,0,101,102,105,105,2,0,109,109,111,111,3,0,69,69,96,96,100,100,2,0,
		13,13,15,15,1,0,24,26,1,0,20,21,1,0,27,29,1,0,30,33,1,0,34,37,1,0,43,53,
		1,0,57,61,3,0,113,113,118,118,124,124,5,0,62,87,89,107,111,111,113,115,
		118,118,1851,0,288,1,0,0,0,2,293,1,0,0,0,4,295,1,0,0,0,6,301,1,0,0,0,8,
		314,1,0,0,0,10,316,1,0,0,0,12,319,1,0,0,0,14,325,1,0,0,0,16,333,1,0,0,
		0,18,340,1,0,0,0,20,342,1,0,0,0,22,374,1,0,0,0,24,385,1,0,0,0,26,387,1,
		0,0,0,28,393,1,0,0,0,30,395,1,0,0,0,32,399,1,0,0,0,34,412,1,0,0,0,36,414,
		1,0,0,0,38,420,1,0,0,0,40,424,1,0,0,0,42,441,1,0,0,0,44,443,1,0,0,0,46,
		448,1,0,0,0,48,452,1,0,0,0,50,461,1,0,0,0,52,471,1,0,0,0,54,483,1,0,0,
		0,56,496,1,0,0,0,58,499,1,0,0,0,60,512,1,0,0,0,62,516,1,0,0,0,64,539,1,
		0,0,0,66,541,1,0,0,0,68,551,1,0,0,0,70,554,1,0,0,0,72,570,1,0,0,0,74,576,
		1,0,0,0,76,585,1,0,0,0,78,589,1,0,0,0,80,591,1,0,0,0,82,603,1,0,0,0,84,
		610,1,0,0,0,86,616,1,0,0,0,88,626,1,0,0,0,90,642,1,0,0,0,92,659,1,0,0,
		0,94,662,1,0,0,0,96,671,1,0,0,0,98,681,1,0,0,0,100,685,1,0,0,0,102,693,
		1,0,0,0,104,698,1,0,0,0,106,706,1,0,0,0,108,718,1,0,0,0,110,724,1,0,0,
		0,112,728,1,0,0,0,114,739,1,0,0,0,116,749,1,0,0,0,118,753,1,0,0,0,120,
		758,1,0,0,0,122,792,1,0,0,0,124,794,1,0,0,0,126,801,1,0,0,0,128,805,1,
		0,0,0,130,813,1,0,0,0,132,820,1,0,0,0,134,833,1,0,0,0,136,846,1,0,0,0,
		138,883,1,0,0,0,140,885,1,0,0,0,142,896,1,0,0,0,144,911,1,0,0,0,146,913,
		1,0,0,0,148,918,1,0,0,0,150,996,1,0,0,0,152,998,1,0,0,0,154,1000,1,0,0,
		0,156,1007,1,0,0,0,158,1014,1,0,0,0,160,1021,1,0,0,0,162,1028,1,0,0,0,
		164,1034,1,0,0,0,166,1040,1,0,0,0,168,1053,1,0,0,0,170,1057,1,0,0,0,172,
		1063,1,0,0,0,174,1068,1,0,0,0,176,1072,1,0,0,0,178,1077,1,0,0,0,180,1086,
		1,0,0,0,182,1092,1,0,0,0,184,1095,1,0,0,0,186,1098,1,0,0,0,188,1109,1,
		0,0,0,190,1120,1,0,0,0,192,1125,1,0,0,0,194,1134,1,0,0,0,196,1137,1,0,
		0,0,198,1147,1,0,0,0,200,1178,1,0,0,0,202,1181,1,0,0,0,204,1192,1,0,0,
		0,206,1196,1,0,0,0,208,1208,1,0,0,0,210,1222,1,0,0,0,212,1236,1,0,0,0,
		214,1239,1,0,0,0,216,1253,1,0,0,0,218,1284,1,0,0,0,220,1287,1,0,0,0,222,
		1303,1,0,0,0,224,1307,1,0,0,0,226,1310,1,0,0,0,228,1314,1,0,0,0,230,1320,
		1,0,0,0,232,1333,1,0,0,0,234,1342,1,0,0,0,236,1373,1,0,0,0,238,1375,1,
		0,0,0,240,1385,1,0,0,0,242,1402,1,0,0,0,244,1404,1,0,0,0,246,1413,1,0,
		0,0,248,1422,1,0,0,0,250,1428,1,0,0,0,252,1436,1,0,0,0,254,1511,1,0,0,
		0,256,1597,1,0,0,0,258,1600,1,0,0,0,260,1615,1,0,0,0,262,1622,1,0,0,0,
		264,1624,1,0,0,0,266,1632,1,0,0,0,268,1634,1,0,0,0,270,1648,1,0,0,0,272,
		1650,1,0,0,0,274,1654,1,0,0,0,276,1656,1,0,0,0,278,1661,1,0,0,0,280,1663,
		1,0,0,0,282,1665,1,0,0,0,284,1668,1,0,0,0,286,1675,1,0,0,0,288,289,5,13,
		0,0,289,290,3,254,127,0,290,1,1,0,0,0,291,294,3,228,114,0,292,294,3,234,
		117,0,293,291,1,0,0,0,293,292,1,0,0,0,294,3,1,0,0,0,295,297,5,30,0,0,296,
		298,3,6,3,0,297,296,1,0,0,0,297,298,1,0,0,0,298,299,1,0,0,0,299,300,5,
		31,0,0,300,5,1,0,0,0,301,306,3,8,4,0,302,303,5,12,0,0,303,305,3,8,4,0,
		304,302,1,0,0,0,305,308,1,0,0,0,306,304,1,0,0,0,306,307,1,0,0,0,307,7,
		1,0,0,0,308,306,1,0,0,0,309,311,5,124,0,0,310,312,3,10,5,0,311,310,1,0,
		0,0,311,312,1,0,0,0,312,315,1,0,0,0,313,315,3,4,2,0,314,309,1,0,0,0,314,
		313,1,0,0,0,315,9,1,0,0,0,316,317,5,94,0,0,317,318,3,18,9,0,318,11,1,0,
		0,0,319,321,5,30,0,0,320,322,3,14,7,0,321,320,1,0,0,0,321,322,1,0,0,0,
		322,323,1,0,0,0,323,324,5,31,0,0,324,13,1,0,0,0,325,330,3,16,8,0,326,327,
		5,12,0,0,327,329,3,16,8,0,328,326,1,0,0,0,329,332,1,0,0,0,330,328,1,0,
		0,0,330,331,1,0,0,0,331,15,1,0,0,0,332,330,1,0,0,0,333,334,3,18,9,0,334,
		17,1,0,0,0,335,341,3,20,10,0,336,341,3,50,25,0,337,341,3,52,26,0,338,341,
		3,30,15,0,339,341,5,125,0,0,340,335,1,0,0,0,340,336,1,0,0,0,340,337,1,
		0,0,0,340,338,1,0,0,0,340,339,1,0,0,0,341,19,1,0,0,0,342,343,6,10,-1,0,
		343,344,3,22,11,0,344,353,1,0,0,0,345,346,10,3,0,0,346,347,5,40,0,0,347,
		352,3,20,10,4,348,349,10,2,0,0,349,350,5,38,0,0,350,352,3,20,10,3,351,
		345,1,0,0,0,351,348,1,0,0,0,352,355,1,0,0,0,353,351,1,0,0,0,353,354,1,
		0,0,0,354,21,1,0,0,0,355,353,1,0,0,0,356,357,6,11,-1,0,357,358,5,6,0,0,
		358,359,3,18,9,0,359,360,5,7,0,0,360,375,1,0,0,0,361,375,3,24,12,0,362,
		375,3,26,13,0,363,375,3,36,18,0,364,365,5,4,0,0,365,366,3,48,24,0,366,
		367,5,5,0,0,367,375,1,0,0,0,368,375,3,54,27,0,369,375,5,80,0,0,370,371,
		3,26,13,0,371,372,5,122,0,0,372,373,3,22,11,1,373,375,1,0,0,0,374,356,
		1,0,0,0,374,361,1,0,0,0,374,362,1,0,0,0,374,363,1,0,0,0,374,364,1,0,0,
		0,374,368,1,0,0,0,374,369,1,0,0,0,374,370,1,0,0,0,375,382,1,0,0,0,376,
		377,10,5,0,0,377,378,4,11,3,0,378,379,5,4,0,0,379,381,5,5,0,0,380,376,
		1,0,0,0,381,384,1,0,0,0,382,380,1,0,0,0,382,383,1,0,0,0,383,23,1,0,0,0,
		384,382,1,0,0,0,385,386,7,0,0,0,386,25,1,0,0,0,387,389,3,34,17,0,388,390,
		3,28,14,0,389,388,1,0,0,0,389,390,1,0,0,0,390,27,1,0,0,0,391,394,3,32,
		16,0,392,394,3,30,15,0,393,391,1,0,0,0,393,392,1,0,0,0,394,29,1,0,0,0,
		395,396,5,30,0,0,396,397,3,14,7,0,397,398,5,31,0,0,398,31,1,0,0,0,399,
		400,5,30,0,0,400,401,3,14,7,0,401,402,5,30,0,0,402,408,3,14,7,0,403,404,
		5,31,0,0,404,405,3,2,1,0,405,406,5,31,0,0,406,409,1,0,0,0,407,409,5,27,
		0,0,408,403,1,0,0,0,408,407,1,0,0,0,409,33,1,0,0,0,410,413,5,124,0,0,411,
		413,3,106,53,0,412,410,1,0,0,0,412,411,1,0,0,0,413,35,1,0,0,0,414,416,
		5,8,0,0,415,417,3,38,19,0,416,415,1,0,0,0,416,417,1,0,0,0,417,418,1,0,
		0,0,418,419,5,10,0,0,419,37,1,0,0,0,420,422,3,40,20,0,421,423,7,1,0,0,
		422,421,1,0,0,0,422,423,1,0,0,0,423,39,1,0,0,0,424,429,3,42,21,0,425,426,
		7,1,0,0,426,428,3,42,21,0,427,425,1,0,0,0,428,431,1,0,0,0,429,427,1,0,
		0,0,429,430,1,0,0,0,430,41,1,0,0,0,431,429,1,0,0,0,432,442,3,58,29,0,433,
		442,3,62,31,0,434,442,3,80,40,0,435,442,3,82,41,0,436,439,3,84,42,0,437,
		438,5,54,0,0,438,440,3,18,9,0,439,437,1,0,0,0,439,440,1,0,0,0,440,442,
		1,0,0,0,441,432,1,0,0,0,441,433,1,0,0,0,441,434,1,0,0,0,441,435,1,0,0,
		0,441,436,1,0,0,0,442,43,1,0,0,0,443,444,3,22,11,0,444,445,4,22,4,0,445,
		446,5,4,0,0,446,447,5,5,0,0,447,45,1,0,0,0,448,449,5,4,0,0,449,450,3,48,
		24,0,450,451,5,5,0,0,451,47,1,0,0,0,452,457,3,18,9,0,453,454,5,12,0,0,
		454,456,3,18,9,0,455,453,1,0,0,0,456,459,1,0,0,0,457,455,1,0,0,0,457,458,
		1,0,0,0,458,49,1,0,0,0,459,457,1,0,0,0,460,462,3,4,2,0,461,460,1,0,0,0,
		461,462,1,0,0,0,462,463,1,0,0,0,463,465,5,6,0,0,464,466,3,64,32,0,465,
		464,1,0,0,0,465,466,1,0,0,0,466,467,1,0,0,0,467,468,5,7,0,0,468,469,5,
		54,0,0,469,470,3,18,9,0,470,51,1,0,0,0,471,473,5,68,0,0,472,474,3,4,2,
		0,473,472,1,0,0,0,473,474,1,0,0,0,474,475,1,0,0,0,475,477,5,6,0,0,476,
		478,3,64,32,0,477,476,1,0,0,0,477,478,1,0,0,0,478,479,1,0,0,0,479,480,
		5,7,0,0,480,481,5,54,0,0,481,482,3,18,9,0,482,53,1,0,0,0,483,484,5,65,
		0,0,484,485,3,56,28,0,485,55,1,0,0,0,486,497,5,124,0,0,487,488,3,274,137,
		0,488,489,5,17,0,0,489,491,1,0,0,0,490,487,1,0,0,0,491,492,1,0,0,0,492,
		490,1,0,0,0,492,493,1,0,0,0,493,494,1,0,0,0,494,495,3,274,137,0,495,497,
		1,0,0,0,496,486,1,0,0,0,496,490,1,0,0,0,497,57,1,0,0,0,498,500,5,90,0,
		0,499,498,1,0,0,0,499,500,1,0,0,0,500,501,1,0,0,0,501,503,3,242,121,0,
		502,504,5,14,0,0,503,502,1,0,0,0,503,504,1,0,0,0,504,506,1,0,0,0,505,507,
		3,60,30,0,506,505,1,0,0,0,506,507,1,0,0,0,507,510,1,0,0,0,508,509,5,54,
		0,0,509,511,3,18,9,0,510,508,1,0,0,0,510,511,1,0,0,0,511,59,1,0,0,0,512,
		513,5,15,0,0,513,514,3,18,9,0,514,61,1,0,0,0,515,517,3,4,2,0,516,515,1,
		0,0,0,516,517,1,0,0,0,517,518,1,0,0,0,518,520,5,6,0,0,519,521,3,64,32,
		0,520,519,1,0,0,0,520,521,1,0,0,0,521,522,1,0,0,0,522,524,5,7,0,0,523,
		525,3,60,30,0,524,523,1,0,0,0,524,525,1,0,0,0,525,63,1,0,0,0,526,540,3,
		72,36,0,527,532,3,68,34,0,528,529,5,12,0,0,529,531,3,68,34,0,530,528,1,
		0,0,0,531,534,1,0,0,0,532,530,1,0,0,0,532,533,1,0,0,0,533,537,1,0,0,0,
		534,532,1,0,0,0,535,536,5,12,0,0,536,538,3,72,36,0,537,535,1,0,0,0,537,
		538,1,0,0,0,538,540,1,0,0,0,539,526,1,0,0,0,539,527,1,0,0,0,540,65,1,0,
		0,0,541,546,3,74,37,0,542,543,5,12,0,0,543,545,3,74,37,0,544,542,1,0,0,
		0,545,548,1,0,0,0,546,544,1,0,0,0,546,547,1,0,0,0,547,67,1,0,0,0,548,546,
		1,0,0,0,549,552,3,74,37,0,550,552,3,70,35,0,551,549,1,0,0,0,551,550,1,
		0,0,0,552,69,1,0,0,0,553,555,3,110,55,0,554,553,1,0,0,0,554,555,1,0,0,
		0,555,557,1,0,0,0,556,558,3,76,38,0,557,556,1,0,0,0,557,558,1,0,0,0,558,
		559,1,0,0,0,559,568,3,78,39,0,560,562,5,14,0,0,561,563,3,60,30,0,562,561,
		1,0,0,0,562,563,1,0,0,0,563,569,1,0,0,0,564,566,3,60,30,0,565,564,1,0,
		0,0,565,566,1,0,0,0,566,567,1,0,0,0,567,569,3,0,0,0,568,560,1,0,0,0,568,
		565,1,0,0,0,569,71,1,0,0,0,570,571,5,16,0,0,571,573,3,254,127,0,572,574,
		3,60,30,0,573,572,1,0,0,0,573,574,1,0,0,0,574,73,1,0,0,0,575,577,3,110,
		55,0,576,575,1,0,0,0,576,577,1,0,0,0,577,579,1,0,0,0,578,580,3,76,38,0,
		579,578,1,0,0,0,579,580,1,0,0,0,580,581,1,0,0,0,581,583,3,78,39,0,582,
		584,3,60,30,0,583,582,1,0,0,0,583,584,1,0,0,0,584,75,1,0,0,0,585,586,7,
		2,0,0,586,77,1,0,0,0,587,590,3,274,137,0,588,590,3,2,1,0,589,587,1,0,0,
		0,589,588,1,0,0,0,590,79,1,0,0,0,591,593,5,68,0,0,592,594,3,4,2,0,593,
		592,1,0,0,0,593,594,1,0,0,0,594,595,1,0,0,0,595,597,5,6,0,0,596,598,3,
		64,32,0,597,596,1,0,0,0,597,598,1,0,0,0,598,599,1,0,0,0,599,601,5,7,0,
		0,600,602,3,60,30,0,601,600,1,0,0,0,601,602,1,0,0,0,602,81,1,0,0,0,603,
		604,5,4,0,0,604,605,5,124,0,0,605,606,5,15,0,0,606,607,7,3,0,0,607,608,
		5,5,0,0,608,609,3,60,30,0,609,83,1,0,0,0,610,612,3,242,121,0,611,613,5,
		14,0,0,612,611,1,0,0,0,612,613,1,0,0,0,613,614,1,0,0,0,614,615,3,62,31,
		0,615,85,1,0,0,0,616,617,5,113,0,0,617,619,5,124,0,0,618,620,3,4,2,0,619,
		618,1,0,0,0,619,620,1,0,0,0,620,621,1,0,0,0,621,622,5,13,0,0,622,623,3,
		18,9,0,623,624,5,11,0,0,624,87,1,0,0,0,625,627,3,76,38,0,626,625,1,0,0,
		0,626,627,1,0,0,0,627,628,1,0,0,0,628,629,5,116,0,0,629,631,5,6,0,0,630,
		632,3,218,109,0,631,630,1,0,0,0,631,632,1,0,0,0,632,633,1,0,0,0,633,639,
		5,7,0,0,634,635,5,8,0,0,635,636,3,224,112,0,636,637,5,10,0,0,637,640,1,
		0,0,0,638,640,5,11,0,0,639,634,1,0,0,0,639,638,1,0,0,0,639,640,1,0,0,0,
		640,89,1,0,0,0,641,643,5,97,0,0,642,641,1,0,0,0,642,643,1,0,0,0,643,645,
		1,0,0,0,644,646,5,120,0,0,645,644,1,0,0,0,645,646,1,0,0,0,646,647,1,0,
		0,0,647,648,5,103,0,0,648,650,5,124,0,0,649,651,3,4,2,0,650,649,1,0,0,
		0,650,651,1,0,0,0,651,653,1,0,0,0,652,654,3,92,46,0,653,652,1,0,0,0,653,
		654,1,0,0,0,654,655,1,0,0,0,655,657,3,36,18,0,656,658,5,11,0,0,657,656,
		1,0,0,0,657,658,1,0,0,0,658,91,1,0,0,0,659,660,5,94,0,0,660,661,3,94,47,
		0,661,93,1,0,0,0,662,667,3,26,13,0,663,664,5,12,0,0,664,666,3,26,13,0,
		665,663,1,0,0,0,666,669,1,0,0,0,667,665,1,0,0,0,667,668,1,0,0,0,668,95,
		1,0,0,0,669,667,1,0,0,0,670,672,5,96,0,0,671,670,1,0,0,0,671,672,1,0,0,
		0,672,673,1,0,0,0,673,674,5,93,0,0,674,675,5,124,0,0,675,677,5,8,0,0,676,
		678,3,98,49,0,677,676,1,0,0,0,677,678,1,0,0,0,678,679,1,0,0,0,679,680,
		5,10,0,0,680,97,1,0,0,0,681,683,3,100,50,0,682,684,5,12,0,0,683,682,1,
		0,0,0,683,684,1,0,0,0,684,99,1,0,0,0,685,690,3,102,51,0,686,687,5,12,0,
		0,687,689,3,102,51,0,688,686,1,0,0,0,689,692,1,0,0,0,690,688,1,0,0,0,690,
		691,1,0,0,0,691,101,1,0,0,0,692,690,1,0,0,0,693,696,3,242,121,0,694,695,
		5,13,0,0,695,697,3,254,127,0,696,694,1,0,0,0,696,697,1,0,0,0,697,103,1,
		0,0,0,698,699,5,117,0,0,699,700,3,106,53,0,700,702,5,8,0,0,701,703,3,126,
		63,0,702,701,1,0,0,0,702,703,1,0,0,0,703,704,1,0,0,0,704,705,5,10,0,0,
		705,105,1,0,0,0,706,715,5,124,0,0,707,709,5,17,0,0,708,707,1,0,0,0,709,
		710,1,0,0,0,710,708,1,0,0,0,710,711,1,0,0,0,711,712,1,0,0,0,712,714,5,
		124,0,0,713,708,1,0,0,0,714,717,1,0,0,0,715,713,1,0,0,0,715,716,1,0,0,
		0,716,107,1,0,0,0,717,715,1,0,0,0,718,719,5,124,0,0,719,720,5,13,0,0,720,
		721,3,106,53,0,721,722,5,11,0,0,722,109,1,0,0,0,723,725,3,112,56,0,724,
		723,1,0,0,0,725,726,1,0,0,0,726,724,1,0,0,0,726,727,1,0,0,0,727,111,1,
		0,0,0,728,731,5,123,0,0,729,732,3,114,57,0,730,732,3,116,58,0,731,729,
		1,0,0,0,731,730,1,0,0,0,732,113,1,0,0,0,733,734,6,57,-1,0,734,740,5,124,
		0,0,735,736,5,6,0,0,736,737,3,254,127,0,737,738,5,7,0,0,738,740,1,0,0,
		0,739,733,1,0,0,0,739,735,1,0,0,0,740,746,1,0,0,0,741,742,10,2,0,0,742,
		743,5,17,0,0,743,745,3,274,137,0,744,741,1,0,0,0,745,748,1,0,0,0,746,744,
		1,0,0,0,746,747,1,0,0,0,747,115,1,0,0,0,748,746,1,0,0,0,749,750,3,114,
		57,0,750,751,3,244,122,0,751,117,1,0,0,0,752,754,3,226,113,0,753,752,1,
		0,0,0,753,754,1,0,0,0,754,755,1,0,0,0,755,756,5,0,0,1,756,119,1,0,0,0,
		757,759,5,97,0,0,758,757,1,0,0,0,758,759,1,0,0,0,759,760,1,0,0,0,760,761,
		3,122,61,0,761,121,1,0,0,0,762,793,3,124,62,0,763,793,3,130,65,0,764,793,
		3,136,68,0,765,793,3,144,72,0,766,793,3,128,64,0,767,793,3,110,55,0,768,
		793,3,188,94,0,769,793,3,90,45,0,770,793,3,104,52,0,771,793,3,148,74,0,
		772,793,3,150,75,0,773,793,3,154,77,0,774,793,3,156,78,0,775,793,3,158,
		79,0,776,793,3,160,80,0,777,793,3,162,81,0,778,793,3,174,87,0,779,793,
		3,164,82,0,780,793,3,176,88,0,781,793,3,178,89,0,782,793,3,184,92,0,783,
		793,3,186,93,0,784,793,3,258,129,0,785,793,3,208,104,0,786,793,3,138,69,
		0,787,793,3,86,43,0,788,793,3,96,48,0,789,793,3,146,73,0,790,791,5,97,
		0,0,791,793,3,122,61,0,792,762,1,0,0,0,792,763,1,0,0,0,792,764,1,0,0,0,
		792,765,1,0,0,0,792,766,1,0,0,0,792,767,1,0,0,0,792,768,1,0,0,0,792,769,
		1,0,0,0,792,770,1,0,0,0,792,771,1,0,0,0,792,772,1,0,0,0,792,773,1,0,0,
		0,792,774,1,0,0,0,792,775,1,0,0,0,792,776,1,0,0,0,792,777,1,0,0,0,792,
		778,1,0,0,0,792,779,1,0,0,0,792,780,1,0,0,0,792,781,1,0,0,0,792,782,1,
		0,0,0,792,783,1,0,0,0,792,784,1,0,0,0,792,785,1,0,0,0,792,786,1,0,0,0,
		792,787,1,0,0,0,792,788,1,0,0,0,792,789,1,0,0,0,792,790,1,0,0,0,793,123,
		1,0,0,0,794,796,5,8,0,0,795,797,3,126,63,0,796,795,1,0,0,0,796,797,1,0,
		0,0,797,798,1,0,0,0,798,799,5,10,0,0,799,125,1,0,0,0,800,802,3,122,61,
		0,801,800,1,0,0,0,802,803,1,0,0,0,803,801,1,0,0,0,803,804,1,0,0,0,804,
		127,1,0,0,0,805,809,5,121,0,0,806,807,5,124,0,0,807,810,3,62,31,0,808,
		810,3,138,69,0,809,806,1,0,0,0,809,808,1,0,0,0,810,811,1,0,0,0,811,812,
		3,286,143,0,812,129,1,0,0,0,813,816,5,98,0,0,814,817,3,132,66,0,815,817,
		3,108,54,0,816,814,1,0,0,0,816,815,1,0,0,0,817,131,1,0,0,0,818,821,5,24,
		0,0,819,821,3,134,67,0,820,818,1,0,0,0,820,819,1,0,0,0,821,824,1,0,0,0,
		822,823,5,88,0,0,823,825,3,274,137,0,824,822,1,0,0,0,824,825,1,0,0,0,825,
		826,1,0,0,0,826,827,5,89,0,0,827,828,5,125,0,0,828,829,3,286,143,0,829,
		133,1,0,0,0,830,831,3,274,137,0,831,832,5,12,0,0,832,834,1,0,0,0,833,830,
		1,0,0,0,833,834,1,0,0,0,834,835,1,0,0,0,835,836,5,8,0,0,836,841,3,274,
		137,0,837,838,5,12,0,0,838,840,3,274,137,0,839,837,1,0,0,0,840,843,1,0,
		0,0,841,839,1,0,0,0,841,842,1,0,0,0,842,844,1,0,0,0,843,841,1,0,0,0,844,
		845,5,10,0,0,845,135,1,0,0,0,846,848,5,97,0,0,847,849,5,82,0,0,848,847,
		1,0,0,0,848,849,1,0,0,0,849,852,1,0,0,0,850,853,3,132,66,0,851,853,3,122,
		61,0,852,850,1,0,0,0,852,851,1,0,0,0,853,137,1,0,0,0,854,856,3,2,1,0,855,
		857,3,60,30,0,856,855,1,0,0,0,856,857,1,0,0,0,857,858,1,0,0,0,858,860,
		3,0,0,0,859,861,5,11,0,0,860,859,1,0,0,0,860,861,1,0,0,0,861,884,1,0,0,
		0,862,864,3,76,38,0,863,862,1,0,0,0,863,864,1,0,0,0,864,866,1,0,0,0,865,
		867,3,152,76,0,866,865,1,0,0,0,866,867,1,0,0,0,867,869,1,0,0,0,868,870,
		5,90,0,0,869,868,1,0,0,0,869,870,1,0,0,0,870,871,1,0,0,0,871,873,3,140,
		70,0,872,874,5,11,0,0,873,872,1,0,0,0,873,874,1,0,0,0,874,884,1,0,0,0,
		875,877,5,120,0,0,876,878,3,152,76,0,877,876,1,0,0,0,877,878,1,0,0,0,878,
		879,1,0,0,0,879,881,3,140,70,0,880,882,5,11,0,0,881,880,1,0,0,0,881,882,
		1,0,0,0,882,884,1,0,0,0,883,854,1,0,0,0,883,863,1,0,0,0,883,875,1,0,0,
		0,884,139,1,0,0,0,885,890,3,142,71,0,886,887,5,12,0,0,887,889,3,142,71,
		0,888,886,1,0,0,0,889,892,1,0,0,0,890,888,1,0,0,0,890,891,1,0,0,0,891,
		141,1,0,0,0,892,890,1,0,0,0,893,897,3,276,138,0,894,897,3,228,114,0,895,
		897,3,234,117,0,896,893,1,0,0,0,896,894,1,0,0,0,896,895,1,0,0,0,897,899,
		1,0,0,0,898,900,3,60,30,0,899,898,1,0,0,0,899,900,1,0,0,0,900,902,1,0,
		0,0,901,903,3,254,127,0,902,901,1,0,0,0,902,903,1,0,0,0,903,909,1,0,0,
		0,904,906,5,13,0,0,905,907,3,4,2,0,906,905,1,0,0,0,906,907,1,0,0,0,907,
		908,1,0,0,0,908,910,3,254,127,0,909,904,1,0,0,0,909,910,1,0,0,0,910,143,
		1,0,0,0,911,912,5,11,0,0,912,145,1,0,0,0,913,914,4,73,6,0,914,916,3,250,
		125,0,915,917,5,11,0,0,916,915,1,0,0,0,916,917,1,0,0,0,917,147,1,0,0,0,
		918,919,5,83,0,0,919,920,5,6,0,0,920,921,3,250,125,0,921,922,5,7,0,0,922,
		925,3,122,61,0,923,924,5,67,0,0,924,926,3,122,61,0,925,923,1,0,0,0,925,
		926,1,0,0,0,926,149,1,0,0,0,927,928,5,63,0,0,928,929,3,122,61,0,929,930,
		5,77,0,0,930,931,5,6,0,0,931,932,3,250,125,0,932,933,5,7,0,0,933,934,3,
		286,143,0,934,997,1,0,0,0,935,936,5,77,0,0,936,937,5,6,0,0,937,938,3,250,
		125,0,938,939,5,7,0,0,939,940,3,122,61,0,940,997,1,0,0,0,941,942,5,75,
		0,0,942,944,5,6,0,0,943,945,3,250,125,0,944,943,1,0,0,0,944,945,1,0,0,
		0,945,946,1,0,0,0,946,948,5,11,0,0,947,949,3,250,125,0,948,947,1,0,0,0,
		948,949,1,0,0,0,949,950,1,0,0,0,950,952,5,11,0,0,951,953,3,250,125,0,952,
		951,1,0,0,0,952,953,1,0,0,0,953,954,1,0,0,0,954,955,5,7,0,0,955,997,3,
		122,61,0,956,957,5,75,0,0,957,958,5,6,0,0,958,959,3,152,76,0,959,960,3,
		140,70,0,960,962,5,11,0,0,961,963,3,250,125,0,962,961,1,0,0,0,962,963,
		1,0,0,0,963,964,1,0,0,0,964,966,5,11,0,0,965,967,3,250,125,0,966,965,1,
		0,0,0,966,967,1,0,0,0,967,968,1,0,0,0,968,969,5,7,0,0,969,970,3,122,61,
		0,970,997,1,0,0,0,971,972,5,75,0,0,972,973,5,6,0,0,973,977,3,254,127,0,
		974,978,5,86,0,0,975,976,5,124,0,0,976,978,4,75,7,0,977,974,1,0,0,0,977,
		975,1,0,0,0,978,979,1,0,0,0,979,980,3,250,125,0,980,981,5,7,0,0,981,982,
		3,122,61,0,982,997,1,0,0,0,983,984,5,75,0,0,984,985,5,6,0,0,985,986,3,
		152,76,0,986,990,3,142,71,0,987,991,5,86,0,0,988,989,5,124,0,0,989,991,
		4,75,8,0,990,987,1,0,0,0,990,988,1,0,0,0,991,992,1,0,0,0,992,993,3,250,
		125,0,993,994,5,7,0,0,994,995,3,122,61,0,995,997,1,0,0,0,996,927,1,0,0,
		0,996,935,1,0,0,0,996,941,1,0,0,0,996,956,1,0,0,0,996,971,1,0,0,0,996,
		983,1,0,0,0,997,151,1,0,0,0,998,999,7,4,0,0,999,153,1,0,0,0,1000,1003,
		5,74,0,0,1001,1002,4,77,9,0,1002,1004,5,124,0,0,1003,1001,1,0,0,0,1003,
		1004,1,0,0,0,1004,1005,1,0,0,0,1005,1006,3,286,143,0,1006,155,1,0,0,0,
		1007,1010,5,62,0,0,1008,1009,4,78,10,0,1009,1011,5,124,0,0,1010,1008,1,
		0,0,0,1010,1011,1,0,0,0,1011,1012,1,0,0,0,1012,1013,3,286,143,0,1013,157,
		1,0,0,0,1014,1017,5,72,0,0,1015,1016,4,79,11,0,1016,1018,3,250,125,0,1017,
		1015,1,0,0,0,1017,1018,1,0,0,0,1018,1019,1,0,0,0,1019,1020,3,286,143,0,
		1020,159,1,0,0,0,1021,1024,5,107,0,0,1022,1023,4,80,12,0,1023,1025,3,250,
		125,0,1024,1022,1,0,0,0,1024,1025,1,0,0,0,1025,1026,1,0,0,0,1026,1027,
		3,286,143,0,1027,161,1,0,0,0,1028,1029,5,81,0,0,1029,1030,5,6,0,0,1030,
		1031,3,250,125,0,1031,1032,5,7,0,0,1032,1033,3,122,61,0,1033,163,1,0,0,
		0,1034,1035,5,76,0,0,1035,1036,5,6,0,0,1036,1037,3,250,125,0,1037,1038,
		5,7,0,0,1038,1039,3,166,83,0,1039,165,1,0,0,0,1040,1042,5,8,0,0,1041,1043,
		3,168,84,0,1042,1041,1,0,0,0,1042,1043,1,0,0,0,1043,1048,1,0,0,0,1044,
		1046,3,172,86,0,1045,1047,3,168,84,0,1046,1045,1,0,0,0,1046,1047,1,0,0,
		0,1047,1049,1,0,0,0,1048,1044,1,0,0,0,1048,1049,1,0,0,0,1049,1050,1,0,
		0,0,1050,1051,5,10,0,0,1051,167,1,0,0,0,1052,1054,3,170,85,0,1053,1052,
		1,0,0,0,1054,1055,1,0,0,0,1055,1053,1,0,0,0,1055,1056,1,0,0,0,1056,169,
		1,0,0,0,1057,1058,5,66,0,0,1058,1059,3,250,125,0,1059,1061,5,15,0,0,1060,
		1062,3,126,63,0,1061,1060,1,0,0,0,1061,1062,1,0,0,0,1062,171,1,0,0,0,1063,
		1064,5,82,0,0,1064,1066,5,15,0,0,1065,1067,3,126,63,0,1066,1065,1,0,0,
		0,1066,1067,1,0,0,0,1067,173,1,0,0,0,1068,1069,5,124,0,0,1069,1070,5,15,
		0,0,1070,1071,3,122,61,0,1071,175,1,0,0,0,1072,1073,5,84,0,0,1073,1074,
		4,88,13,0,1074,1075,3,250,125,0,1075,1076,3,286,143,0,1076,177,1,0,0,0,
		1077,1078,5,87,0,0,1078,1084,3,124,62,0,1079,1081,3,180,90,0,1080,1082,
		3,182,91,0,1081,1080,1,0,0,0,1081,1082,1,0,0,0,1082,1085,1,0,0,0,1083,
		1085,3,182,91,0,1084,1079,1,0,0,0,1084,1083,1,0,0,0,1085,179,1,0,0,0,1086,
		1087,5,70,0,0,1087,1088,5,6,0,0,1088,1089,5,124,0,0,1089,1090,5,7,0,0,
		1090,1091,3,124,62,0,1091,181,1,0,0,0,1092,1093,5,71,0,0,1093,1094,3,124,
		62,0,1094,183,1,0,0,0,1095,1096,5,78,0,0,1096,1097,3,286,143,0,1097,185,
		1,0,0,0,1098,1099,5,79,0,0,1099,1100,5,124,0,0,1100,1106,3,62,31,0,1101,
		1102,5,8,0,0,1102,1103,3,224,112,0,1103,1104,5,10,0,0,1104,1107,1,0,0,
		0,1105,1107,5,11,0,0,1106,1101,1,0,0,0,1106,1105,1,0,0,0,1107,187,1,0,
		0,0,1108,1110,5,121,0,0,1109,1108,1,0,0,0,1109,1110,1,0,0,0,1110,1111,
		1,0,0,0,1111,1112,5,92,0,0,1112,1114,5,124,0,0,1113,1115,3,4,2,0,1114,
		1113,1,0,0,0,1114,1115,1,0,0,0,1115,1116,1,0,0,0,1116,1117,3,190,95,0,
		1117,1118,3,192,96,0,1118,189,1,0,0,0,1119,1121,3,194,97,0,1120,1119,1,
		0,0,0,1120,1121,1,0,0,0,1121,1123,1,0,0,0,1122,1124,3,196,98,0,1123,1122,
		1,0,0,0,1123,1124,1,0,0,0,1124,191,1,0,0,0,1125,1129,5,8,0,0,1126,1128,
		3,198,99,0,1127,1126,1,0,0,0,1128,1131,1,0,0,0,1129,1127,1,0,0,0,1129,
		1130,1,0,0,0,1130,1132,1,0,0,0,1131,1129,1,0,0,0,1132,1133,5,10,0,0,1133,
		193,1,0,0,0,1134,1135,5,94,0,0,1135,1136,3,26,13,0,1136,195,1,0,0,0,1137,
		1138,5,99,0,0,1138,1139,3,94,47,0,1139,197,1,0,0,0,1140,1148,3,88,44,0,
		1141,1143,3,110,55,0,1142,1141,1,0,0,0,1142,1143,1,0,0,0,1143,1144,1,0,
		0,0,1144,1148,3,200,100,0,1145,1148,3,204,102,0,1146,1148,3,122,61,0,1147,
		1140,1,0,0,0,1147,1142,1,0,0,0,1147,1145,1,0,0,0,1147,1146,1,0,0,0,1148,
		199,1,0,0,0,1149,1150,3,202,101,0,1150,1152,3,242,121,0,1151,1153,5,14,
		0,0,1152,1151,1,0,0,0,1152,1153,1,0,0,0,1153,1155,1,0,0,0,1154,1156,3,
		60,30,0,1155,1154,1,0,0,0,1155,1156,1,0,0,0,1156,1158,1,0,0,0,1157,1159,
		3,0,0,0,1158,1157,1,0,0,0,1158,1159,1,0,0,0,1159,1160,1,0,0,0,1160,1161,
		5,11,0,0,1161,1179,1,0,0,0,1162,1163,3,202,101,0,1163,1164,3,242,121,0,
		1164,1170,3,62,31,0,1165,1166,5,8,0,0,1166,1167,3,224,112,0,1167,1168,
		5,10,0,0,1168,1171,1,0,0,0,1169,1171,5,11,0,0,1170,1165,1,0,0,0,1170,1169,
		1,0,0,0,1171,1179,1,0,0,0,1172,1175,3,202,101,0,1173,1176,3,238,119,0,
		1174,1176,3,240,120,0,1175,1173,1,0,0,0,1175,1174,1,0,0,0,1176,1179,1,
		0,0,0,1177,1179,3,128,64,0,1178,1149,1,0,0,0,1178,1162,1,0,0,0,1178,1172,
		1,0,0,0,1178,1177,1,0,0,0,1179,201,1,0,0,0,1180,1182,5,91,0,0,1181,1180,
		1,0,0,0,1181,1182,1,0,0,0,1182,1184,1,0,0,0,1183,1185,3,76,38,0,1184,1183,
		1,0,0,0,1184,1185,1,0,0,0,1185,1187,1,0,0,0,1186,1188,5,106,0,0,1187,1186,
		1,0,0,0,1187,1188,1,0,0,0,1188,1190,1,0,0,0,1189,1191,5,90,0,0,1190,1189,
		1,0,0,0,1190,1191,1,0,0,0,1191,203,1,0,0,0,1192,1193,3,82,41,0,1193,1194,
		5,11,0,0,1194,205,1,0,0,0,1195,1197,5,24,0,0,1196,1195,1,0,0,0,1196,1197,
		1,0,0,0,1197,1198,1,0,0,0,1198,1199,5,124,0,0,1199,1201,5,6,0,0,1200,1202,
		3,218,109,0,1201,1200,1,0,0,0,1201,1202,1,0,0,0,1202,1203,1,0,0,0,1203,
		1204,5,7,0,0,1204,1205,5,8,0,0,1205,1206,3,224,112,0,1206,1207,5,10,0,
		0,1207,207,1,0,0,0,1208,1209,5,79,0,0,1209,1211,5,24,0,0,1210,1212,5,124,
		0,0,1211,1210,1,0,0,0,1211,1212,1,0,0,0,1212,1213,1,0,0,0,1213,1215,5,
		6,0,0,1214,1216,3,218,109,0,1215,1214,1,0,0,0,1215,1216,1,0,0,0,1216,1217,
		1,0,0,0,1217,1218,5,7,0,0,1218,1219,5,8,0,0,1219,1220,3,224,112,0,1220,
		1221,5,10,0,0,1221,209,1,0,0,0,1222,1223,5,8,0,0,1223,1228,3,212,106,0,
		1224,1225,5,12,0,0,1225,1227,3,212,106,0,1226,1224,1,0,0,0,1227,1230,1,
		0,0,0,1228,1226,1,0,0,0,1228,1229,1,0,0,0,1229,1232,1,0,0,0,1230,1228,
		1,0,0,0,1231,1233,5,12,0,0,1232,1231,1,0,0,0,1232,1233,1,0,0,0,1233,1234,
		1,0,0,0,1234,1235,5,10,0,0,1235,211,1,0,0,0,1236,1237,5,24,0,0,1237,1238,
		3,216,108,0,1238,213,1,0,0,0,1239,1240,5,8,0,0,1240,1245,3,216,108,0,1241,
		1242,5,12,0,0,1242,1244,3,216,108,0,1243,1241,1,0,0,0,1244,1247,1,0,0,
		0,1245,1243,1,0,0,0,1245,1246,1,0,0,0,1246,1249,1,0,0,0,1247,1245,1,0,
		0,0,1248,1250,5,12,0,0,1249,1248,1,0,0,0,1249,1250,1,0,0,0,1250,1251,1,
		0,0,0,1251,1252,5,10,0,0,1252,215,1,0,0,0,1253,1254,5,4,0,0,1254,1255,
		3,254,127,0,1255,1256,5,5,0,0,1256,1258,5,6,0,0,1257,1259,3,218,109,0,
		1258,1257,1,0,0,0,1258,1259,1,0,0,0,1259,1260,1,0,0,0,1260,1261,5,7,0,
		0,1261,1262,5,8,0,0,1262,1263,3,224,112,0,1263,1264,5,10,0,0,1264,217,
		1,0,0,0,1265,1270,3,220,110,0,1266,1267,5,12,0,0,1267,1269,3,220,110,0,
		1268,1266,1,0,0,0,1269,1272,1,0,0,0,1270,1268,1,0,0,0,1270,1271,1,0,0,
		0,1271,1275,1,0,0,0,1272,1270,1,0,0,0,1273,1274,5,12,0,0,1274,1276,3,222,
		111,0,1275,1273,1,0,0,0,1275,1276,1,0,0,0,1276,1285,1,0,0,0,1277,1285,
		3,222,111,0,1278,1285,3,228,114,0,1279,1282,3,234,117,0,1280,1281,5,15,
		0,0,1281,1283,3,218,109,0,1282,1280,1,0,0,0,1282,1283,1,0,0,0,1283,1285,
		1,0,0,0,1284,1265,1,0,0,0,1284,1277,1,0,0,0,1284,1278,1,0,0,0,1284,1279,
		1,0,0,0,1285,219,1,0,0,0,1286,1288,3,112,56,0,1287,1286,1,0,0,0,1287,1288,
		1,0,0,0,1288,1290,1,0,0,0,1289,1291,3,76,38,0,1290,1289,1,0,0,0,1290,1291,
		1,0,0,0,1291,1292,1,0,0,0,1292,1294,3,276,138,0,1293,1295,5,14,0,0,1294,
		1293,1,0,0,0,1294,1295,1,0,0,0,1295,1297,1,0,0,0,1296,1298,3,60,30,0,1297,
		1296,1,0,0,0,1297,1298,1,0,0,0,1298,1301,1,0,0,0,1299,1300,5,13,0,0,1300,
		1302,3,254,127,0,1301,1299,1,0,0,0,1301,1302,1,0,0,0,1302,221,1,0,0,0,
		1303,1304,5,16,0,0,1304,1305,5,124,0,0,1305,223,1,0,0,0,1306,1308,3,226,
		113,0,1307,1306,1,0,0,0,1307,1308,1,0,0,0,1308,225,1,0,0,0,1309,1311,3,
		120,60,0,1310,1309,1,0,0,0,1311,1312,1,0,0,0,1312,1310,1,0,0,0,1312,1313,
		1,0,0,0,1313,227,1,0,0,0,1314,1316,5,4,0,0,1315,1317,3,230,115,0,1316,
		1315,1,0,0,0,1316,1317,1,0,0,0,1317,1318,1,0,0,0,1318,1319,5,5,0,0,1319,
		229,1,0,0,0,1320,1329,3,232,116,0,1321,1323,5,12,0,0,1322,1321,1,0,0,0,
		1323,1324,1,0,0,0,1324,1322,1,0,0,0,1324,1325,1,0,0,0,1325,1326,1,0,0,
		0,1326,1328,3,232,116,0,1327,1322,1,0,0,0,1328,1331,1,0,0,0,1329,1327,
		1,0,0,0,1329,1330,1,0,0,0,1330,231,1,0,0,0,1331,1329,1,0,0,0,1332,1334,
		5,16,0,0,1333,1332,1,0,0,0,1333,1334,1,0,0,0,1334,1337,1,0,0,0,1335,1338,
		3,254,127,0,1336,1338,5,124,0,0,1337,1335,1,0,0,0,1337,1336,1,0,0,0,1338,
		1340,1,0,0,0,1339,1341,5,12,0,0,1340,1339,1,0,0,0,1340,1341,1,0,0,0,1341,
		233,1,0,0,0,1342,1354,5,8,0,0,1343,1348,3,236,118,0,1344,1345,5,12,0,0,
		1345,1347,3,236,118,0,1346,1344,1,0,0,0,1347,1350,1,0,0,0,1348,1346,1,
		0,0,0,1348,1349,1,0,0,0,1349,1352,1,0,0,0,1350,1348,1,0,0,0,1351,1353,
		5,12,0,0,1352,1351,1,0,0,0,1352,1353,1,0,0,0,1353,1355,1,0,0,0,1354,1343,
		1,0,0,0,1354,1355,1,0,0,0,1355,1356,1,0,0,0,1356,1357,5,10,0,0,1357,235,
		1,0,0,0,1358,1359,3,242,121,0,1359,1360,7,5,0,0,1360,1361,3,254,127,0,
		1361,1374,1,0,0,0,1362,1363,5,4,0,0,1363,1364,3,254,127,0,1364,1365,5,
		5,0,0,1365,1366,5,15,0,0,1366,1367,3,254,127,0,1367,1374,1,0,0,0,1368,
		1374,3,238,119,0,1369,1374,3,240,120,0,1370,1374,3,206,103,0,1371,1374,
		3,276,138,0,1372,1374,3,72,36,0,1373,1358,1,0,0,0,1373,1362,1,0,0,0,1373,
		1368,1,0,0,0,1373,1369,1,0,0,0,1373,1370,1,0,0,0,1373,1371,1,0,0,0,1373,
		1372,1,0,0,0,1374,237,1,0,0,0,1375,1376,3,282,141,0,1376,1377,5,6,0,0,
		1377,1379,5,7,0,0,1378,1380,3,60,30,0,1379,1378,1,0,0,0,1379,1380,1,0,
		0,0,1380,1381,1,0,0,0,1381,1382,5,8,0,0,1382,1383,3,224,112,0,1383,1384,
		5,10,0,0,1384,239,1,0,0,0,1385,1386,3,284,142,0,1386,1389,5,6,0,0,1387,
		1390,5,124,0,0,1388,1390,3,2,1,0,1389,1387,1,0,0,0,1389,1388,1,0,0,0,1390,
		1392,1,0,0,0,1391,1393,3,60,30,0,1392,1391,1,0,0,0,1392,1393,1,0,0,0,1393,
		1394,1,0,0,0,1394,1395,5,7,0,0,1395,1396,5,8,0,0,1396,1397,3,224,112,0,
		1397,1398,5,10,0,0,1398,241,1,0,0,0,1399,1403,3,274,137,0,1400,1403,5,
		125,0,0,1401,1403,3,272,136,0,1402,1399,1,0,0,0,1402,1400,1,0,0,0,1402,
		1401,1,0,0,0,1403,243,1,0,0,0,1404,1409,5,6,0,0,1405,1407,3,246,123,0,
		1406,1408,5,12,0,0,1407,1406,1,0,0,0,1407,1408,1,0,0,0,1408,1410,1,0,0,
		0,1409,1405,1,0,0,0,1409,1410,1,0,0,0,1410,1411,1,0,0,0,1411,1412,5,7,
		0,0,1412,245,1,0,0,0,1413,1418,3,248,124,0,1414,1415,5,12,0,0,1415,1417,
		3,248,124,0,1416,1414,1,0,0,0,1417,1420,1,0,0,0,1418,1416,1,0,0,0,1418,
		1419,1,0,0,0,1419,247,1,0,0,0,1420,1418,1,0,0,0,1421,1423,5,16,0,0,1422,
		1421,1,0,0,0,1422,1423,1,0,0,0,1423,1426,1,0,0,0,1424,1427,3,254,127,0,
		1425,1427,5,124,0,0,1426,1424,1,0,0,0,1426,1425,1,0,0,0,1427,249,1,0,0,
		0,1428,1433,3,254,127,0,1429,1430,5,12,0,0,1430,1432,3,254,127,0,1431,
		1429,1,0,0,0,1432,1435,1,0,0,0,1433,1431,1,0,0,0,1433,1434,1,0,0,0,1434,
		251,1,0,0,0,1435,1433,1,0,0,0,1436,1438,5,79,0,0,1437,1439,5,124,0,0,1438,
		1437,1,0,0,0,1438,1439,1,0,0,0,1439,1440,1,0,0,0,1440,1442,5,6,0,0,1441,
		1443,3,218,109,0,1442,1441,1,0,0,0,1442,1443,1,0,0,0,1443,1444,1,0,0,0,
		1444,1446,5,7,0,0,1445,1447,3,60,30,0,1446,1445,1,0,0,0,1446,1447,1,0,
		0,0,1447,1448,1,0,0,0,1448,1449,5,8,0,0,1449,1450,3,224,112,0,1450,1451,
		5,10,0,0,1451,253,1,0,0,0,1452,1453,6,127,-1,0,1453,1512,3,252,126,0,1454,
		1512,3,258,129,0,1455,1457,5,92,0,0,1456,1458,5,124,0,0,1457,1456,1,0,
		0,0,1457,1458,1,0,0,0,1458,1459,1,0,0,0,1459,1512,3,192,96,0,1460,1461,
		5,68,0,0,1461,1463,3,254,127,0,1462,1464,3,12,6,0,1463,1462,1,0,0,0,1463,
		1464,1,0,0,0,1464,1465,1,0,0,0,1465,1466,3,244,122,0,1466,1512,1,0,0,0,
		1467,1468,5,68,0,0,1468,1470,3,254,127,0,1469,1471,3,12,6,0,1470,1469,
		1,0,0,0,1470,1471,1,0,0,0,1471,1512,1,0,0,0,1472,1473,5,85,0,0,1473,1512,
		3,254,127,38,1474,1475,5,73,0,0,1475,1512,3,254,127,37,1476,1477,5,65,
		0,0,1477,1512,3,254,127,36,1478,1479,5,18,0,0,1479,1512,3,254,127,35,1480,
		1481,5,19,0,0,1481,1512,3,254,127,34,1482,1483,5,20,0,0,1483,1512,3,254,
		127,33,1484,1485,5,21,0,0,1485,1512,3,254,127,32,1486,1487,5,22,0,0,1487,
		1512,3,254,127,31,1488,1489,5,23,0,0,1489,1512,3,254,127,30,1490,1512,
		3,214,107,0,1491,1512,3,210,105,0,1492,1512,3,208,104,0,1493,1512,3,160,
		80,0,1494,1512,5,80,0,0,1495,1497,3,274,137,0,1496,1498,3,254,127,0,1497,
		1496,1,0,0,0,1497,1498,1,0,0,0,1498,1512,1,0,0,0,1499,1512,5,95,0,0,1500,
		1512,3,266,133,0,1501,1512,3,228,114,0,1502,1512,3,234,117,0,1503,1504,
		5,6,0,0,1504,1505,3,250,125,0,1505,1506,5,7,0,0,1506,1512,1,0,0,0,1507,
		1509,3,12,6,0,1508,1510,3,250,125,0,1509,1508,1,0,0,0,1509,1510,1,0,0,
		0,1510,1512,1,0,0,0,1511,1452,1,0,0,0,1511,1454,1,0,0,0,1511,1455,1,0,
		0,0,1511,1460,1,0,0,0,1511,1467,1,0,0,0,1511,1472,1,0,0,0,1511,1474,1,
		0,0,0,1511,1476,1,0,0,0,1511,1478,1,0,0,0,1511,1480,1,0,0,0,1511,1482,
		1,0,0,0,1511,1484,1,0,0,0,1511,1486,1,0,0,0,1511,1488,1,0,0,0,1511,1490,
		1,0,0,0,1511,1491,1,0,0,0,1511,1492,1,0,0,0,1511,1493,1,0,0,0,1511,1494,
		1,0,0,0,1511,1495,1,0,0,0,1511,1499,1,0,0,0,1511,1500,1,0,0,0,1511,1501,
		1,0,0,0,1511,1502,1,0,0,0,1511,1503,1,0,0,0,1511,1507,1,0,0,0,1512,1588,
		1,0,0,0,1513,1514,10,29,0,0,1514,1515,7,6,0,0,1515,1587,3,254,127,30,1516,
		1517,10,28,0,0,1517,1518,7,7,0,0,1518,1587,3,254,127,29,1519,1520,10,27,
		0,0,1520,1521,7,8,0,0,1521,1587,3,254,127,28,1522,1523,10,26,0,0,1523,
		1524,7,9,0,0,1524,1587,3,254,127,27,1525,1526,10,25,0,0,1526,1527,5,64,
		0,0,1527,1587,3,254,127,26,1528,1529,10,24,0,0,1529,1530,5,86,0,0,1530,
		1587,3,254,127,25,1531,1532,10,23,0,0,1532,1533,7,10,0,0,1533,1587,3,254,
		127,24,1534,1535,10,22,0,0,1535,1536,5,38,0,0,1536,1587,3,254,127,23,1537,
		1538,10,21,0,0,1538,1539,5,39,0,0,1539,1587,3,254,127,22,1540,1541,10,
		20,0,0,1541,1542,5,40,0,0,1542,1587,3,254,127,21,1543,1544,10,19,0,0,1544,
		1545,5,41,0,0,1545,1587,3,254,127,20,1546,1547,10,18,0,0,1547,1548,5,42,
		0,0,1548,1587,3,254,127,19,1549,1550,10,17,0,0,1550,1551,5,14,0,0,1551,
		1552,3,254,127,0,1552,1553,5,15,0,0,1553,1554,3,254,127,18,1554,1587,1,
		0,0,0,1555,1556,10,16,0,0,1556,1557,5,13,0,0,1557,1587,3,254,127,17,1558,
		1559,10,15,0,0,1559,1560,3,264,132,0,1560,1561,3,254,127,16,1561,1587,
		1,0,0,0,1562,1563,10,45,0,0,1563,1564,5,4,0,0,1564,1565,3,250,125,0,1565,
		1566,5,5,0,0,1566,1587,1,0,0,0,1567,1568,10,44,0,0,1568,1569,5,17,0,0,
		1569,1571,3,274,137,0,1570,1572,3,28,14,0,1571,1570,1,0,0,0,1571,1572,
		1,0,0,0,1572,1587,1,0,0,0,1573,1574,10,41,0,0,1574,1587,3,244,122,0,1575,
		1576,10,40,0,0,1576,1577,4,127,33,0,1577,1587,5,18,0,0,1578,1579,10,39,
		0,0,1579,1580,4,127,35,0,1580,1587,5,19,0,0,1581,1582,10,14,0,0,1582,1587,
		3,268,134,0,1583,1584,10,1,0,0,1584,1585,5,88,0,0,1585,1587,3,256,128,
		0,1586,1513,1,0,0,0,1586,1516,1,0,0,0,1586,1519,1,0,0,0,1586,1522,1,0,
		0,0,1586,1525,1,0,0,0,1586,1528,1,0,0,0,1586,1531,1,0,0,0,1586,1534,1,
		0,0,0,1586,1537,1,0,0,0,1586,1540,1,0,0,0,1586,1543,1,0,0,0,1586,1546,
		1,0,0,0,1586,1549,1,0,0,0,1586,1555,1,0,0,0,1586,1558,1,0,0,0,1586,1562,
		1,0,0,0,1586,1567,1,0,0,0,1586,1573,1,0,0,0,1586,1575,1,0,0,0,1586,1578,
		1,0,0,0,1586,1581,1,0,0,0,1586,1583,1,0,0,0,1587,1590,1,0,0,0,1588,1586,
		1,0,0,0,1588,1589,1,0,0,0,1589,255,1,0,0,0,1590,1588,1,0,0,0,1591,1594,
		3,24,12,0,1592,1593,5,4,0,0,1593,1595,5,5,0,0,1594,1592,1,0,0,0,1594,1595,
		1,0,0,0,1595,1598,1,0,0,0,1596,1598,3,254,127,0,1597,1591,1,0,0,0,1597,
		1596,1,0,0,0,1598,257,1,0,0,0,1599,1601,5,91,0,0,1600,1599,1,0,0,0,1600,
		1601,1,0,0,0,1601,1602,1,0,0,0,1602,1604,3,260,130,0,1603,1605,3,60,30,
		0,1604,1603,1,0,0,0,1604,1605,1,0,0,0,1605,1606,1,0,0,0,1606,1607,5,54,
		0,0,1607,1608,3,262,131,0,1608,259,1,0,0,0,1609,1616,5,124,0,0,1610,1612,
		5,6,0,0,1611,1613,3,218,109,0,1612,1611,1,0,0,0,1612,1613,1,0,0,0,1613,
		1614,1,0,0,0,1614,1616,5,7,0,0,1615,1609,1,0,0,0,1615,1610,1,0,0,0,1616,
		261,1,0,0,0,1617,1623,3,254,127,0,1618,1619,5,8,0,0,1619,1620,3,224,112,
		0,1620,1621,5,10,0,0,1621,1623,1,0,0,0,1622,1617,1,0,0,0,1622,1618,1,0,
		0,0,1623,263,1,0,0,0,1624,1625,7,11,0,0,1625,265,1,0,0,0,1626,1633,5,55,
		0,0,1627,1633,5,56,0,0,1628,1633,5,125,0,0,1629,1633,3,268,134,0,1630,
		1633,5,3,0,0,1631,1633,3,272,136,0,1632,1626,1,0,0,0,1632,1627,1,0,0,0,
		1632,1628,1,0,0,0,1632,1629,1,0,0,0,1632,1630,1,0,0,0,1632,1631,1,0,0,
		0,1633,267,1,0,0,0,1634,1638,5,126,0,0,1635,1637,3,270,135,0,1636,1635,
		1,0,0,0,1637,1640,1,0,0,0,1638,1636,1,0,0,0,1638,1639,1,0,0,0,1639,1641,
		1,0,0,0,1640,1638,1,0,0,0,1641,1642,5,126,0,0,1642,269,1,0,0,0,1643,1649,
		5,133,0,0,1644,1645,5,132,0,0,1645,1646,3,254,127,0,1646,1647,5,9,0,0,
		1647,1649,1,0,0,0,1648,1643,1,0,0,0,1648,1644,1,0,0,0,1649,271,1,0,0,0,
		1650,1651,7,12,0,0,1651,273,1,0,0,0,1652,1655,5,124,0,0,1653,1655,3,278,
		139,0,1654,1652,1,0,0,0,1654,1653,1,0,0,0,1655,275,1,0,0,0,1656,1657,7,
		13,0,0,1657,277,1,0,0,0,1658,1662,3,280,140,0,1659,1662,5,55,0,0,1660,
		1662,5,56,0,0,1661,1658,1,0,0,0,1661,1659,1,0,0,0,1661,1660,1,0,0,0,1662,
		279,1,0,0,0,1663,1664,7,14,0,0,1664,281,1,0,0,0,1665,1666,5,114,0,0,1666,
		1667,3,242,121,0,1667,283,1,0,0,0,1668,1669,5,115,0,0,1669,1670,3,242,
		121,0,1670,285,1,0,0,0,1671,1676,5,11,0,0,1672,1676,5,0,0,1,1673,1676,
		4,143,38,0,1674,1676,4,143,39,0,1675,1671,1,0,0,0,1675,1672,1,0,0,0,1675,
		1673,1,0,0,0,1675,1674,1,0,0,0,1676,287,1,0,0,0,209,293,297,306,311,314,
		321,330,340,351,353,374,382,389,393,408,412,416,422,429,439,441,457,461,
		465,473,477,492,496,499,503,506,510,516,520,524,532,537,539,546,551,554,
		557,562,565,568,573,576,579,583,589,593,597,601,612,619,626,631,639,642,
		645,650,653,657,667,671,677,683,690,696,702,710,715,726,731,739,746,753,
		758,792,796,803,809,816,820,824,833,841,848,852,856,860,863,866,869,873,
		877,881,883,890,896,899,902,906,909,916,925,944,948,952,962,966,977,990,
		996,1003,1010,1017,1024,1042,1046,1048,1055,1061,1066,1081,1084,1106,1109,
		1114,1120,1123,1129,1142,1147,1152,1155,1158,1170,1175,1178,1181,1184,
		1187,1190,1196,1201,1211,1215,1228,1232,1245,1249,1258,1270,1275,1282,
		1284,1287,1290,1294,1297,1301,1307,1312,1316,1324,1329,1333,1337,1340,
		1348,1352,1354,1373,1379,1389,1392,1402,1407,1409,1418,1422,1426,1433,
		1438,1442,1446,1457,1463,1470,1497,1509,1511,1571,1586,1588,1594,1597,
		1600,1604,1612,1615,1622,1632,1638,1648,1654,1661,1675
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
