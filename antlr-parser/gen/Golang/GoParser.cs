//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.10.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from C:/Users/john/Desktop/PRIMITIVE-Tools/PARSER/antlr-parser/antlr-parser/grammars\GoParser.g4 by ANTLR 4.10.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.10.1")]
[System.CLSCompliant(false)]
public partial class GoParser : GoParserBase {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		BREAK=1, DEFAULT=2, FUNC=3, INTERFACE=4, SELECT=5, CASE=6, DEFER=7, GO=8, 
		MAP=9, STRUCT=10, CHAN=11, ELSE=12, GOTO=13, PACKAGE=14, SWITCH=15, CONST=16, 
		FALLTHROUGH=17, IF=18, RANGE=19, TYPE=20, CONTINUE=21, FOR=22, IMPORT=23, 
		RETURN=24, VAR=25, NIL_LIT=26, IDENTIFIER=27, L_PAREN=28, R_PAREN=29, 
		L_CURLY=30, R_CURLY=31, L_BRACKET=32, R_BRACKET=33, ASSIGN=34, COMMA=35, 
		SEMI=36, COLON=37, DOT=38, PLUS_PLUS=39, MINUS_MINUS=40, DECLARE_ASSIGN=41, 
		ELLIPSIS=42, LOGICAL_OR=43, LOGICAL_AND=44, EQUALS=45, NOT_EQUALS=46, 
		LESS=47, LESS_OR_EQUALS=48, GREATER=49, GREATER_OR_EQUALS=50, OR=51, DIV=52, 
		MOD=53, LSHIFT=54, RSHIFT=55, BIT_CLEAR=56, EXCLAMATION=57, PLUS=58, MINUS=59, 
		CARET=60, STAR=61, AMPERSAND=62, RECEIVE=63, DECIMAL_LIT=64, BINARY_LIT=65, 
		OCTAL_LIT=66, HEX_LIT=67, FLOAT_LIT=68, DECIMAL_FLOAT_LIT=69, HEX_FLOAT_LIT=70, 
		IMAGINARY_LIT=71, RUNE_LIT=72, BYTE_VALUE=73, OCTAL_BYTE_VALUE=74, HEX_BYTE_VALUE=75, 
		LITTLE_U_VALUE=76, BIG_U_VALUE=77, RAW_STRING_LIT=78, INTERPRETED_STRING_LIT=79, 
		WS=80, COMMENT=81, TERMINATOR=82, LINE_COMMENT=83, WS_NLSEMI=84, COMMENT_NLSEMI=85, 
		LINE_COMMENT_NLSEMI=86, EOS=87, OTHER=88;
	public const int
		RULE_sourceFile = 0, RULE_packageClause = 1, RULE_importDecl = 2, RULE_importSpec = 3, 
		RULE_importPath = 4, RULE_declaration = 5, RULE_constDecl = 6, RULE_constSpec = 7, 
		RULE_identifierList = 8, RULE_expressionList = 9, RULE_typeDecl = 10, 
		RULE_typeSpec = 11, RULE_functionDecl = 12, RULE_methodDecl = 13, RULE_receiver = 14, 
		RULE_varDecl = 15, RULE_varSpec = 16, RULE_block = 17, RULE_statementList = 18, 
		RULE_statement = 19, RULE_simpleStmt = 20, RULE_expressionStmt = 21, RULE_sendStmt = 22, 
		RULE_incDecStmt = 23, RULE_assignment = 24, RULE_assign_op = 25, RULE_shortVarDecl = 26, 
		RULE_emptyStmt = 27, RULE_labeledStmt = 28, RULE_returnStmt = 29, RULE_breakStmt = 30, 
		RULE_continueStmt = 31, RULE_gotoStmt = 32, RULE_fallthroughStmt = 33, 
		RULE_deferStmt = 34, RULE_ifStmt = 35, RULE_switchStmt = 36, RULE_exprSwitchStmt = 37, 
		RULE_exprCaseClause = 38, RULE_exprSwitchCase = 39, RULE_typeSwitchStmt = 40, 
		RULE_typeSwitchGuard = 41, RULE_typeCaseClause = 42, RULE_typeSwitchCase = 43, 
		RULE_typeList = 44, RULE_selectStmt = 45, RULE_commClause = 46, RULE_commCase = 47, 
		RULE_recvStmt = 48, RULE_forStmt = 49, RULE_forClause = 50, RULE_rangeClause = 51, 
		RULE_goStmt = 52, RULE_type_ = 53, RULE_typeName = 54, RULE_typeLit = 55, 
		RULE_arrayType = 56, RULE_arrayLength = 57, RULE_elementType = 58, RULE_pointerType = 59, 
		RULE_interfaceType = 60, RULE_sliceType = 61, RULE_mapType = 62, RULE_channelType = 63, 
		RULE_methodSpec = 64, RULE_functionType = 65, RULE_signature = 66, RULE_result = 67, 
		RULE_parameters = 68, RULE_parameterDecl = 69, RULE_expression = 70, RULE_primaryExpr = 71, 
		RULE_conversion = 72, RULE_nonNamedType = 73, RULE_operand = 74, RULE_literal = 75, 
		RULE_basicLit = 76, RULE_integer = 77, RULE_operandName = 78, RULE_qualifiedIdent = 79, 
		RULE_compositeLit = 80, RULE_literalType = 81, RULE_literalValue = 82, 
		RULE_elementList = 83, RULE_keyedElement = 84, RULE_key = 85, RULE_element = 86, 
		RULE_structType = 87, RULE_fieldDecl = 88, RULE_string_ = 89, RULE_embeddedField = 90, 
		RULE_functionLit = 91, RULE_index = 92, RULE_slice_ = 93, RULE_typeAssertion = 94, 
		RULE_arguments = 95, RULE_methodExpr = 96, RULE_receiverType = 97, RULE_eos = 98;
	public static readonly string[] ruleNames = {
		"sourceFile", "packageClause", "importDecl", "importSpec", "importPath", 
		"declaration", "constDecl", "constSpec", "identifierList", "expressionList", 
		"typeDecl", "typeSpec", "functionDecl", "methodDecl", "receiver", "varDecl", 
		"varSpec", "block", "statementList", "statement", "simpleStmt", "expressionStmt", 
		"sendStmt", "incDecStmt", "assignment", "assign_op", "shortVarDecl", "emptyStmt", 
		"labeledStmt", "returnStmt", "breakStmt", "continueStmt", "gotoStmt", 
		"fallthroughStmt", "deferStmt", "ifStmt", "switchStmt", "exprSwitchStmt", 
		"exprCaseClause", "exprSwitchCase", "typeSwitchStmt", "typeSwitchGuard", 
		"typeCaseClause", "typeSwitchCase", "typeList", "selectStmt", "commClause", 
		"commCase", "recvStmt", "forStmt", "forClause", "rangeClause", "goStmt", 
		"type_", "typeName", "typeLit", "arrayType", "arrayLength", "elementType", 
		"pointerType", "interfaceType", "sliceType", "mapType", "channelType", 
		"methodSpec", "functionType", "signature", "result", "parameters", "parameterDecl", 
		"expression", "primaryExpr", "conversion", "nonNamedType", "operand", 
		"literal", "basicLit", "integer", "operandName", "qualifiedIdent", "compositeLit", 
		"literalType", "literalValue", "elementList", "keyedElement", "key", "element", 
		"structType", "fieldDecl", "string_", "embeddedField", "functionLit", 
		"index", "slice_", "typeAssertion", "arguments", "methodExpr", "receiverType", 
		"eos"
	};

	private static readonly string[] _LiteralNames = {
		null, "'break'", "'default'", "'func'", "'interface'", "'select'", "'case'", 
		"'defer'", "'go'", "'map'", "'struct'", "'chan'", "'else'", "'goto'", 
		"'package'", "'switch'", "'const'", "'fallthrough'", "'if'", "'range'", 
		"'type'", "'continue'", "'for'", "'import'", "'return'", "'var'", "'nil'", 
		null, "'('", "')'", "'{'", "'}'", "'['", "']'", "'='", "','", "';'", "':'", 
		"'.'", "'++'", "'--'", "':='", "'...'", "'||'", "'&&'", "'=='", "'!='", 
		"'<'", "'<='", "'>'", "'>='", "'|'", "'/'", "'%'", "'<<'", "'>>'", "'&^'", 
		"'!'", "'+'", "'-'", "'^'", "'*'", "'&'", "'<-'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "BREAK", "DEFAULT", "FUNC", "INTERFACE", "SELECT", "CASE", "DEFER", 
		"GO", "MAP", "STRUCT", "CHAN", "ELSE", "GOTO", "PACKAGE", "SWITCH", "CONST", 
		"FALLTHROUGH", "IF", "RANGE", "TYPE", "CONTINUE", "FOR", "IMPORT", "RETURN", 
		"VAR", "NIL_LIT", "IDENTIFIER", "L_PAREN", "R_PAREN", "L_CURLY", "R_CURLY", 
		"L_BRACKET", "R_BRACKET", "ASSIGN", "COMMA", "SEMI", "COLON", "DOT", "PLUS_PLUS", 
		"MINUS_MINUS", "DECLARE_ASSIGN", "ELLIPSIS", "LOGICAL_OR", "LOGICAL_AND", 
		"EQUALS", "NOT_EQUALS", "LESS", "LESS_OR_EQUALS", "GREATER", "GREATER_OR_EQUALS", 
		"OR", "DIV", "MOD", "LSHIFT", "RSHIFT", "BIT_CLEAR", "EXCLAMATION", "PLUS", 
		"MINUS", "CARET", "STAR", "AMPERSAND", "RECEIVE", "DECIMAL_LIT", "BINARY_LIT", 
		"OCTAL_LIT", "HEX_LIT", "FLOAT_LIT", "DECIMAL_FLOAT_LIT", "HEX_FLOAT_LIT", 
		"IMAGINARY_LIT", "RUNE_LIT", "BYTE_VALUE", "OCTAL_BYTE_VALUE", "HEX_BYTE_VALUE", 
		"LITTLE_U_VALUE", "BIG_U_VALUE", "RAW_STRING_LIT", "INTERPRETED_STRING_LIT", 
		"WS", "COMMENT", "TERMINATOR", "LINE_COMMENT", "WS_NLSEMI", "COMMENT_NLSEMI", 
		"LINE_COMMENT_NLSEMI", "EOS", "OTHER"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "GoParser.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static GoParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public GoParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public GoParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class SourceFileContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public PackageClauseContext packageClause() {
			return GetRuleContext<PackageClauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public EosContext[] eos() {
			return GetRuleContexts<EosContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public EosContext eos(int i) {
			return GetRuleContext<EosContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(GoParser.Eof, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ImportDeclContext[] importDecl() {
			return GetRuleContexts<ImportDeclContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ImportDeclContext importDecl(int i) {
			return GetRuleContext<ImportDeclContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionDeclContext[] functionDecl() {
			return GetRuleContexts<FunctionDeclContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionDeclContext functionDecl(int i) {
			return GetRuleContext<FunctionDeclContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MethodDeclContext[] methodDecl() {
			return GetRuleContexts<MethodDeclContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public MethodDeclContext methodDecl(int i) {
			return GetRuleContext<MethodDeclContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DeclarationContext[] declaration() {
			return GetRuleContexts<DeclarationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public DeclarationContext declaration(int i) {
			return GetRuleContext<DeclarationContext>(i);
		}
		public SourceFileContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sourceFile; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGoParserListener typedListener = listener as IGoParserListener;
			if (typedListener != null) typedListener.EnterSourceFile(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGoParserListener typedListener = listener as IGoParserListener;
			if (typedListener != null) typedListener.ExitSourceFile(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGoParserVisitor<TResult> typedVisitor = visitor as IGoParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSourceFile(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SourceFileContext sourceFile() {
		SourceFileContext _localctx = new SourceFileContext(Context, State);
		EnterRule(_localctx, 0, RULE_sourceFile);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 198;
			packageClause();
			State = 199;
			eos();
			State = 205;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==IMPORT) {
				{
				{
				State = 200;
				importDecl();
				State = 201;
				eos();
				}
				}
				State = 207;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 217;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << FUNC) | (1L << CONST) | (1L << TYPE) | (1L << VAR))) != 0)) {
				{
				{
				State = 211;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,1,Context) ) {
				case 1:
					{
					State = 208;
					functionDecl();
					}
					break;
				case 2:
					{
					State = 209;
					methodDecl();
					}
					break;
				case 3:
					{
					State = 210;
					declaration();
					}
					break;
				}
				State = 213;
				eos();
				}
				}
				State = 219;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 220;
			Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PackageClauseContext : ParserRuleContext {
		public IToken packageName;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PACKAGE() { return GetToken(GoParser.PACKAGE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(GoParser.IDENTIFIER, 0); }
		public PackageClauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_packageClause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGoParserListener typedListener = listener as IGoParserListener;
			if (typedListener != null) typedListener.EnterPackageClause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGoParserListener typedListener = listener as IGoParserListener;
			if (typedListener != null) typedListener.ExitPackageClause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGoParserVisitor<TResult> typedVisitor = visitor as IGoParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPackageClause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PackageClauseContext packageClause() {
		PackageClauseContext _localctx = new PackageClauseContext(Context, State);
		EnterRule(_localctx, 2, RULE_packageClause);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 222;
			Match(PACKAGE);
			State = 223;
			_localctx.packageName = Match(IDENTIFIER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ImportDeclContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IMPORT() { return GetToken(GoParser.IMPORT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ImportSpecContext[] importSpec() {
			return GetRuleContexts<ImportSpecContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ImportSpecContext importSpec(int i) {
			return GetRuleContext<ImportSpecContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode L_PAREN() { return GetToken(GoParser.L_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode R_PAREN() { return GetToken(GoParser.R_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public EosContext[] eos() {
			return GetRuleContexts<EosContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public EosContext eos(int i) {
			return GetRuleContext<EosContext>(i);
		}
		public ImportDeclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_importDecl; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGoParserListener typedListener = listener as IGoParserListener;
			if (typedListener != null) typedListener.EnterImportDecl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGoParserListener typedListener = listener as IGoParserListener;
			if (typedListener != null) typedListener.ExitImportDecl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGoParserVisitor<TResult> typedVisitor = visitor as IGoParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitImportDecl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ImportDeclContext importDecl() {
		ImportDeclContext _localctx = new ImportDeclContext(Context, State);
		EnterRule(_localctx, 4, RULE_importDecl);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 225;
			Match(IMPORT);
			State = 237;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case IDENTIFIER:
			case DOT:
			case RAW_STRING_LIT:
			case INTERPRETED_STRING_LIT:
				{
				State = 226;
				importSpec();
				}
				break;
			case L_PAREN:
				{
				State = 227;
				Match(L_PAREN);
				State = 233;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (((((_la - 27)) & ~0x3f) == 0 && ((1L << (_la - 27)) & ((1L << (IDENTIFIER - 27)) | (1L << (DOT - 27)) | (1L << (RAW_STRING_LIT - 27)) | (1L << (INTERPRETED_STRING_LIT - 27)))) != 0)) {
					{
					{
					State = 228;
					importSpec();
					State = 229;
					eos();
					}
					}
					State = 235;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 236;
				Match(R_PAREN);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ImportSpecContext : ParserRuleContext {
		public IToken alias;
		[System.Diagnostics.DebuggerNonUserCode] public ImportPathContext importPath() {
			return GetRuleContext<ImportPathContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT() { return GetToken(GoParser.DOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(GoParser.IDENTIFIER, 0); }
		public ImportSpecContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_importSpec; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGoParserListener typedListener = listener as IGoParserListener;
			if (typedListener != null) typedListener.EnterImportSpec(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGoParserListener typedListener = listener as IGoParserListener;
			if (typedListener != null) typedListener.ExitImportSpec(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGoParserVisitor<TResult> typedVisitor = visitor as IGoParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitImportSpec(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ImportSpecContext importSpec() {
		ImportSpecContext _localctx = new ImportSpecContext(Context, State);
		EnterRule(_localctx, 6, RULE_importSpec);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 240;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==IDENTIFIER || _la==DOT) {
				{
				State = 239;
				_localctx.alias = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==IDENTIFIER || _la==DOT) ) {
					_localctx.alias = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
			}

			State = 242;
			importPath();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ImportPathContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public String_Context string_() {
			return GetRuleContext<String_Context>(0);
		}
		public ImportPathContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_importPath; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGoParserListener typedListener = listener as IGoParserListener;
			if (typedListener != null) typedListener.EnterImportPath(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGoParserListener typedListener = listener as IGoParserListener;
			if (typedListener != null) typedListener.ExitImportPath(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGoParserVisitor<TResult> typedVisitor = visitor as IGoParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitImportPath(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ImportPathContext importPath() {
		ImportPathContext _localctx = new ImportPathContext(Context, State);
		EnterRule(_localctx, 8, RULE_importPath);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 244;
			string_();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ConstDeclContext constDecl() {
			return GetRuleContext<ConstDeclContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeDeclContext typeDecl() {
			return GetRuleContext<TypeDeclContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public VarDeclContext varDecl() {
			return GetRuleContext<VarDeclContext>(0);
		}
		public DeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_declaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGoParserListener typedListener = listener as IGoParserListener;
			if (typedListener != null) typedListener.EnterDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGoParserListener typedListener = listener as IGoParserListener;
			if (typedListener != null) typedListener.ExitDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGoParserVisitor<TResult> typedVisitor = visitor as IGoParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DeclarationContext declaration() {
		DeclarationContext _localctx = new DeclarationContext(Context, State);
		EnterRule(_localctx, 10, RULE_declaration);
		try {
			State = 249;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case CONST:
				EnterOuterAlt(_localctx, 1);
				{
				State = 246;
				constDecl();
				}
				break;
			case TYPE:
				EnterOuterAlt(_localctx, 2);
				{
				State = 247;
				typeDecl();
				}
				break;
			case VAR:
				EnterOuterAlt(_localctx, 3);
				{
				State = 248;
				varDecl();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConstDeclContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONST() { return GetToken(GoParser.CONST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ConstSpecContext[] constSpec() {
			return GetRuleContexts<ConstSpecContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ConstSpecContext constSpec(int i) {
			return GetRuleContext<ConstSpecContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode L_PAREN() { return GetToken(GoParser.L_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode R_PAREN() { return GetToken(GoParser.R_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public EosContext[] eos() {
			return GetRuleContexts<EosContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public EosContext eos(int i) {
			return GetRuleContext<EosContext>(i);
		}
		public ConstDeclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constDecl; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGoParserListener typedListener = listener as IGoParserListener;
			if (typedListener != null) typedListener.EnterConstDecl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGoParserListener typedListener = listener as IGoParserListener;
			if (typedListener != null) typedListener.ExitConstDecl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGoParserVisitor<TResult> typedVisitor = visitor as IGoParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConstDecl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConstDeclContext constDecl() {
		ConstDeclContext _localctx = new ConstDeclContext(Context, State);
		EnterRule(_localctx, 12, RULE_constDecl);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 251;
			Match(CONST);
			State = 263;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case IDENTIFIER:
				{
				State = 252;
				constSpec();
				}
				break;
			case L_PAREN:
				{
				State = 253;
				Match(L_PAREN);
				State = 259;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==IDENTIFIER) {
					{
					{
					State = 254;
					constSpec();
					State = 255;
					eos();
					}
					}
					State = 261;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 262;
				Match(R_PAREN);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConstSpecContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierListContext identifierList() {
			return GetRuleContext<IdentifierListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGN() { return GetToken(GoParser.ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionListContext expressionList() {
			return GetRuleContext<ExpressionListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Type_Context type_() {
			return GetRuleContext<Type_Context>(0);
		}
		public ConstSpecContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constSpec; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGoParserListener typedListener = listener as IGoParserListener;
			if (typedListener != null) typedListener.EnterConstSpec(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGoParserListener typedListener = listener as IGoParserListener;
			if (typedListener != null) typedListener.ExitConstSpec(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGoParserVisitor<TResult> typedVisitor = visitor as IGoParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConstSpec(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConstSpecContext constSpec() {
		ConstSpecContext _localctx = new ConstSpecContext(Context, State);
		EnterRule(_localctx, 14, RULE_constSpec);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 265;
			identifierList();
			State = 271;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,10,Context) ) {
			case 1:
				{
				State = 267;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << FUNC) | (1L << INTERFACE) | (1L << MAP) | (1L << STRUCT) | (1L << CHAN) | (1L << IDENTIFIER) | (1L << L_PAREN) | (1L << L_BRACKET) | (1L << STAR) | (1L << RECEIVE))) != 0)) {
					{
					State = 266;
					type_();
					}
				}

				State = 269;
				Match(ASSIGN);
				State = 270;
				expressionList();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IdentifierListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] IDENTIFIER() { return GetTokens(GoParser.IDENTIFIER); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER(int i) {
			return GetToken(GoParser.IDENTIFIER, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(GoParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(GoParser.COMMA, i);
		}
		public IdentifierListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_identifierList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGoParserListener typedListener = listener as IGoParserListener;
			if (typedListener != null) typedListener.EnterIdentifierList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGoParserListener typedListener = listener as IGoParserListener;
			if (typedListener != null) typedListener.ExitIdentifierList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGoParserVisitor<TResult> typedVisitor = visitor as IGoParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIdentifierList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IdentifierListContext identifierList() {
		IdentifierListContext _localctx = new IdentifierListContext(Context, State);
		EnterRule(_localctx, 16, RULE_identifierList);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 273;
			Match(IDENTIFIER);
			State = 278;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,11,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 274;
					Match(COMMA);
					State = 275;
					Match(IDENTIFIER);
					}
					} 
				}
				State = 280;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,11,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(GoParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(GoParser.COMMA, i);
		}
		public ExpressionListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expressionList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGoParserListener typedListener = listener as IGoParserListener;
			if (typedListener != null) typedListener.EnterExpressionList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGoParserListener typedListener = listener as IGoParserListener;
			if (typedListener != null) typedListener.ExitExpressionList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGoParserVisitor<TResult> typedVisitor = visitor as IGoParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpressionList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionListContext expressionList() {
		ExpressionListContext _localctx = new ExpressionListContext(Context, State);
		EnterRule(_localctx, 18, RULE_expressionList);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 281;
			expression(0);
			State = 286;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,12,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 282;
					Match(COMMA);
					State = 283;
					expression(0);
					}
					} 
				}
				State = 288;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,12,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeDeclContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TYPE() { return GetToken(GoParser.TYPE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeSpecContext[] typeSpec() {
			return GetRuleContexts<TypeSpecContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeSpecContext typeSpec(int i) {
			return GetRuleContext<TypeSpecContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode L_PAREN() { return GetToken(GoParser.L_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode R_PAREN() { return GetToken(GoParser.R_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public EosContext[] eos() {
			return GetRuleContexts<EosContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public EosContext eos(int i) {
			return GetRuleContext<EosContext>(i);
		}
		public TypeDeclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeDecl; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGoParserListener typedListener = listener as IGoParserListener;
			if (typedListener != null) typedListener.EnterTypeDecl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGoParserListener typedListener = listener as IGoParserListener;
			if (typedListener != null) typedListener.ExitTypeDecl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGoParserVisitor<TResult> typedVisitor = visitor as IGoParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeDecl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeDeclContext typeDecl() {
		TypeDeclContext _localctx = new TypeDeclContext(Context, State);
		EnterRule(_localctx, 20, RULE_typeDecl);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 289;
			Match(TYPE);
			State = 301;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case IDENTIFIER:
				{
				State = 290;
				typeSpec();
				}
				break;
			case L_PAREN:
				{
				State = 291;
				Match(L_PAREN);
				State = 297;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==IDENTIFIER) {
					{
					{
					State = 292;
					typeSpec();
					State = 293;
					eos();
					}
					}
					State = 299;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 300;
				Match(R_PAREN);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeSpecContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(GoParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Type_Context type_() {
			return GetRuleContext<Type_Context>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGN() { return GetToken(GoParser.ASSIGN, 0); }
		public TypeSpecContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeSpec; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGoParserListener typedListener = listener as IGoParserListener;
			if (typedListener != null) typedListener.EnterTypeSpec(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGoParserListener typedListener = listener as IGoParserListener;
			if (typedListener != null) typedListener.ExitTypeSpec(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGoParserVisitor<TResult> typedVisitor = visitor as IGoParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeSpec(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeSpecContext typeSpec() {
		TypeSpecContext _localctx = new TypeSpecContext(Context, State);
		EnterRule(_localctx, 22, RULE_typeSpec);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 303;
			Match(IDENTIFIER);
			State = 305;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ASSIGN) {
				{
				State = 304;
				Match(ASSIGN);
				}
			}

			State = 307;
			type_();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionDeclContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FUNC() { return GetToken(GoParser.FUNC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(GoParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SignatureContext signature() {
			return GetRuleContext<SignatureContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public FunctionDeclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionDecl; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGoParserListener typedListener = listener as IGoParserListener;
			if (typedListener != null) typedListener.EnterFunctionDecl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGoParserListener typedListener = listener as IGoParserListener;
			if (typedListener != null) typedListener.ExitFunctionDecl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGoParserVisitor<TResult> typedVisitor = visitor as IGoParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionDecl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionDeclContext functionDecl() {
		FunctionDeclContext _localctx = new FunctionDeclContext(Context, State);
		EnterRule(_localctx, 24, RULE_functionDecl);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 309;
			Match(FUNC);
			State = 310;
			Match(IDENTIFIER);
			{
			State = 311;
			signature();
			State = 313;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,16,Context) ) {
			case 1:
				{
				State = 312;
				block();
				}
				break;
			}
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MethodDeclContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FUNC() { return GetToken(GoParser.FUNC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ReceiverContext receiver() {
			return GetRuleContext<ReceiverContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(GoParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SignatureContext signature() {
			return GetRuleContext<SignatureContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public MethodDeclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_methodDecl; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGoParserListener typedListener = listener as IGoParserListener;
			if (typedListener != null) typedListener.EnterMethodDecl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGoParserListener typedListener = listener as IGoParserListener;
			if (typedListener != null) typedListener.ExitMethodDecl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGoParserVisitor<TResult> typedVisitor = visitor as IGoParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMethodDecl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MethodDeclContext methodDecl() {
		MethodDeclContext _localctx = new MethodDeclContext(Context, State);
		EnterRule(_localctx, 26, RULE_methodDecl);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 315;
			Match(FUNC);
			State = 316;
			receiver();
			State = 317;
			Match(IDENTIFIER);
			{
			State = 318;
			signature();
			State = 320;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,17,Context) ) {
			case 1:
				{
				State = 319;
				block();
				}
				break;
			}
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReceiverContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ParametersContext parameters() {
			return GetRuleContext<ParametersContext>(0);
		}
		public ReceiverContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_receiver; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGoParserListener typedListener = listener as IGoParserListener;
			if (typedListener != null) typedListener.EnterReceiver(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGoParserListener typedListener = listener as IGoParserListener;
			if (typedListener != null) typedListener.ExitReceiver(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGoParserVisitor<TResult> typedVisitor = visitor as IGoParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReceiver(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ReceiverContext receiver() {
		ReceiverContext _localctx = new ReceiverContext(Context, State);
		EnterRule(_localctx, 28, RULE_receiver);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 322;
			parameters();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VarDeclContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VAR() { return GetToken(GoParser.VAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public VarSpecContext[] varSpec() {
			return GetRuleContexts<VarSpecContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public VarSpecContext varSpec(int i) {
			return GetRuleContext<VarSpecContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode L_PAREN() { return GetToken(GoParser.L_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode R_PAREN() { return GetToken(GoParser.R_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public EosContext[] eos() {
			return GetRuleContexts<EosContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public EosContext eos(int i) {
			return GetRuleContext<EosContext>(i);
		}
		public VarDeclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_varDecl; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGoParserListener typedListener = listener as IGoParserListener;
			if (typedListener != null) typedListener.EnterVarDecl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGoParserListener typedListener = listener as IGoParserListener;
			if (typedListener != null) typedListener.ExitVarDecl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGoParserVisitor<TResult> typedVisitor = visitor as IGoParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVarDecl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VarDeclContext varDecl() {
		VarDeclContext _localctx = new VarDeclContext(Context, State);
		EnterRule(_localctx, 30, RULE_varDecl);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 324;
			Match(VAR);
			State = 336;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case IDENTIFIER:
				{
				State = 325;
				varSpec();
				}
				break;
			case L_PAREN:
				{
				State = 326;
				Match(L_PAREN);
				State = 332;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==IDENTIFIER) {
					{
					{
					State = 327;
					varSpec();
					State = 328;
					eos();
					}
					}
					State = 334;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 335;
				Match(R_PAREN);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VarSpecContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierListContext identifierList() {
			return GetRuleContext<IdentifierListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Type_Context type_() {
			return GetRuleContext<Type_Context>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGN() { return GetToken(GoParser.ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionListContext expressionList() {
			return GetRuleContext<ExpressionListContext>(0);
		}
		public VarSpecContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_varSpec; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGoParserListener typedListener = listener as IGoParserListener;
			if (typedListener != null) typedListener.EnterVarSpec(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGoParserListener typedListener = listener as IGoParserListener;
			if (typedListener != null) typedListener.ExitVarSpec(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGoParserVisitor<TResult> typedVisitor = visitor as IGoParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVarSpec(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VarSpecContext varSpec() {
		VarSpecContext _localctx = new VarSpecContext(Context, State);
		EnterRule(_localctx, 32, RULE_varSpec);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 338;
			identifierList();
			State = 346;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case FUNC:
			case INTERFACE:
			case MAP:
			case STRUCT:
			case CHAN:
			case IDENTIFIER:
			case L_PAREN:
			case L_BRACKET:
			case STAR:
			case RECEIVE:
				{
				State = 339;
				type_();
				State = 342;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,20,Context) ) {
				case 1:
					{
					State = 340;
					Match(ASSIGN);
					State = 341;
					expressionList();
					}
					break;
				}
				}
				break;
			case ASSIGN:
				{
				State = 344;
				Match(ASSIGN);
				State = 345;
				expressionList();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlockContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode L_CURLY() { return GetToken(GoParser.L_CURLY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode R_CURLY() { return GetToken(GoParser.R_CURLY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementListContext statementList() {
			return GetRuleContext<StatementListContext>(0);
		}
		public BlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_block; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGoParserListener typedListener = listener as IGoParserListener;
			if (typedListener != null) typedListener.EnterBlock(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGoParserListener typedListener = listener as IGoParserListener;
			if (typedListener != null) typedListener.ExitBlock(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGoParserVisitor<TResult> typedVisitor = visitor as IGoParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BlockContext block() {
		BlockContext _localctx = new BlockContext(Context, State);
		EnterRule(_localctx, 34, RULE_block);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 348;
			Match(L_CURLY);
			State = 350;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,22,Context) ) {
			case 1:
				{
				State = 349;
				statementList();
				}
				break;
			}
			State = 352;
			Match(R_CURLY);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public EosContext[] eos() {
			return GetRuleContexts<EosContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public EosContext eos(int i) {
			return GetRuleContext<EosContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SEMI() { return GetTokens(GoParser.SEMI); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI(int i) {
			return GetToken(GoParser.SEMI, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] EOS() { return GetTokens(GoParser.EOS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EOS(int i) {
			return GetToken(GoParser.EOS, i);
		}
		public StatementListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statementList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGoParserListener typedListener = listener as IGoParserListener;
			if (typedListener != null) typedListener.EnterStatementList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGoParserListener typedListener = listener as IGoParserListener;
			if (typedListener != null) typedListener.ExitStatementList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGoParserVisitor<TResult> typedVisitor = visitor as IGoParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatementList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementListContext statementList() {
		StatementListContext _localctx = new StatementListContext(Context, State);
		EnterRule(_localctx, 36, RULE_statementList);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 366;
			ErrorHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 361;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,25,Context) ) {
					case 1:
						{
						State = 355;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if (_la==SEMI) {
							{
							State = 354;
							Match(SEMI);
							}
						}

						}
						break;
					case 2:
						{
						State = 358;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if (_la==EOS) {
							{
							State = 357;
							Match(EOS);
							}
						}

						}
						break;
					case 3:
						{
						State = 360;
						if (!(this.closingBracket())) throw new FailedPredicateException(this, "this.closingBracket()");
						}
						break;
					}
					State = 363;
					statement();
					State = 364;
					eos();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 368;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,26,Context);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public DeclarationContext declaration() {
			return GetRuleContext<DeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LabeledStmtContext labeledStmt() {
			return GetRuleContext<LabeledStmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SimpleStmtContext simpleStmt() {
			return GetRuleContext<SimpleStmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public GoStmtContext goStmt() {
			return GetRuleContext<GoStmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ReturnStmtContext returnStmt() {
			return GetRuleContext<ReturnStmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BreakStmtContext breakStmt() {
			return GetRuleContext<BreakStmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ContinueStmtContext continueStmt() {
			return GetRuleContext<ContinueStmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public GotoStmtContext gotoStmt() {
			return GetRuleContext<GotoStmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FallthroughStmtContext fallthroughStmt() {
			return GetRuleContext<FallthroughStmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IfStmtContext ifStmt() {
			return GetRuleContext<IfStmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SwitchStmtContext switchStmt() {
			return GetRuleContext<SwitchStmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SelectStmtContext selectStmt() {
			return GetRuleContext<SelectStmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ForStmtContext forStmt() {
			return GetRuleContext<ForStmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DeferStmtContext deferStmt() {
			return GetRuleContext<DeferStmtContext>(0);
		}
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGoParserListener typedListener = listener as IGoParserListener;
			if (typedListener != null) typedListener.EnterStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGoParserListener typedListener = listener as IGoParserListener;
			if (typedListener != null) typedListener.ExitStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGoParserVisitor<TResult> typedVisitor = visitor as IGoParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		StatementContext _localctx = new StatementContext(Context, State);
		EnterRule(_localctx, 38, RULE_statement);
		try {
			State = 385;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,27,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 370;
				declaration();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 371;
				labeledStmt();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 372;
				simpleStmt();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 373;
				goStmt();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 374;
				returnStmt();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 375;
				breakStmt();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 376;
				continueStmt();
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 377;
				gotoStmt();
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 378;
				fallthroughStmt();
				}
				break;
			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 379;
				block();
				}
				break;
			case 11:
				EnterOuterAlt(_localctx, 11);
				{
				State = 380;
				ifStmt();
				}
				break;
			case 12:
				EnterOuterAlt(_localctx, 12);
				{
				State = 381;
				switchStmt();
				}
				break;
			case 13:
				EnterOuterAlt(_localctx, 13);
				{
				State = 382;
				selectStmt();
				}
				break;
			case 14:
				EnterOuterAlt(_localctx, 14);
				{
				State = 383;
				forStmt();
				}
				break;
			case 15:
				EnterOuterAlt(_localctx, 15);
				{
				State = 384;
				deferStmt();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SimpleStmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SendStmtContext sendStmt() {
			return GetRuleContext<SendStmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IncDecStmtContext incDecStmt() {
			return GetRuleContext<IncDecStmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AssignmentContext assignment() {
			return GetRuleContext<AssignmentContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionStmtContext expressionStmt() {
			return GetRuleContext<ExpressionStmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ShortVarDeclContext shortVarDecl() {
			return GetRuleContext<ShortVarDeclContext>(0);
		}
		public SimpleStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_simpleStmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGoParserListener typedListener = listener as IGoParserListener;
			if (typedListener != null) typedListener.EnterSimpleStmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGoParserListener typedListener = listener as IGoParserListener;
			if (typedListener != null) typedListener.ExitSimpleStmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGoParserVisitor<TResult> typedVisitor = visitor as IGoParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSimpleStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SimpleStmtContext simpleStmt() {
		SimpleStmtContext _localctx = new SimpleStmtContext(Context, State);
		EnterRule(_localctx, 40, RULE_simpleStmt);
		try {
			State = 392;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,28,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 387;
				sendStmt();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 388;
				incDecStmt();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 389;
				assignment();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 390;
				expressionStmt();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 391;
				shortVarDecl();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionStmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ExpressionStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expressionStmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGoParserListener typedListener = listener as IGoParserListener;
			if (typedListener != null) typedListener.EnterExpressionStmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGoParserListener typedListener = listener as IGoParserListener;
			if (typedListener != null) typedListener.ExitExpressionStmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGoParserVisitor<TResult> typedVisitor = visitor as IGoParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpressionStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionStmtContext expressionStmt() {
		ExpressionStmtContext _localctx = new ExpressionStmtContext(Context, State);
		EnterRule(_localctx, 42, RULE_expressionStmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 394;
			expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SendStmtContext : ParserRuleContext {
		public ExpressionContext channel;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RECEIVE() { return GetToken(GoParser.RECEIVE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public SendStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sendStmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGoParserListener typedListener = listener as IGoParserListener;
			if (typedListener != null) typedListener.EnterSendStmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGoParserListener typedListener = listener as IGoParserListener;
			if (typedListener != null) typedListener.ExitSendStmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGoParserVisitor<TResult> typedVisitor = visitor as IGoParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSendStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SendStmtContext sendStmt() {
		SendStmtContext _localctx = new SendStmtContext(Context, State);
		EnterRule(_localctx, 44, RULE_sendStmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 396;
			_localctx.channel = expression(0);
			State = 397;
			Match(RECEIVE);
			State = 398;
			expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IncDecStmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PLUS_PLUS() { return GetToken(GoParser.PLUS_PLUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUS_MINUS() { return GetToken(GoParser.MINUS_MINUS, 0); }
		public IncDecStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_incDecStmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGoParserListener typedListener = listener as IGoParserListener;
			if (typedListener != null) typedListener.EnterIncDecStmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGoParserListener typedListener = listener as IGoParserListener;
			if (typedListener != null) typedListener.ExitIncDecStmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGoParserVisitor<TResult> typedVisitor = visitor as IGoParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIncDecStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IncDecStmtContext incDecStmt() {
		IncDecStmtContext _localctx = new IncDecStmtContext(Context, State);
		EnterRule(_localctx, 46, RULE_incDecStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 400;
			expression(0);
			State = 401;
			_la = TokenStream.LA(1);
			if ( !(_la==PLUS_PLUS || _la==MINUS_MINUS) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssignmentContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionListContext[] expressionList() {
			return GetRuleContexts<ExpressionListContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionListContext expressionList(int i) {
			return GetRuleContext<ExpressionListContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Assign_opContext assign_op() {
			return GetRuleContext<Assign_opContext>(0);
		}
		public AssignmentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assignment; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGoParserListener typedListener = listener as IGoParserListener;
			if (typedListener != null) typedListener.EnterAssignment(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGoParserListener typedListener = listener as IGoParserListener;
			if (typedListener != null) typedListener.ExitAssignment(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGoParserVisitor<TResult> typedVisitor = visitor as IGoParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssignment(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AssignmentContext assignment() {
		AssignmentContext _localctx = new AssignmentContext(Context, State);
		EnterRule(_localctx, 48, RULE_assignment);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 403;
			expressionList();
			State = 404;
			assign_op();
			State = 405;
			expressionList();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Assign_opContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGN() { return GetToken(GoParser.ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PLUS() { return GetToken(GoParser.PLUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUS() { return GetToken(GoParser.MINUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OR() { return GetToken(GoParser.OR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CARET() { return GetToken(GoParser.CARET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STAR() { return GetToken(GoParser.STAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DIV() { return GetToken(GoParser.DIV, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MOD() { return GetToken(GoParser.MOD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LSHIFT() { return GetToken(GoParser.LSHIFT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RSHIFT() { return GetToken(GoParser.RSHIFT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AMPERSAND() { return GetToken(GoParser.AMPERSAND, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BIT_CLEAR() { return GetToken(GoParser.BIT_CLEAR, 0); }
		public Assign_opContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assign_op; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGoParserListener typedListener = listener as IGoParserListener;
			if (typedListener != null) typedListener.EnterAssign_op(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGoParserListener typedListener = listener as IGoParserListener;
			if (typedListener != null) typedListener.ExitAssign_op(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGoParserVisitor<TResult> typedVisitor = visitor as IGoParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssign_op(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Assign_opContext assign_op() {
		Assign_opContext _localctx = new Assign_opContext(Context, State);
		EnterRule(_localctx, 50, RULE_assign_op);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 408;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << OR) | (1L << DIV) | (1L << MOD) | (1L << LSHIFT) | (1L << RSHIFT) | (1L << BIT_CLEAR) | (1L << PLUS) | (1L << MINUS) | (1L << CARET) | (1L << STAR) | (1L << AMPERSAND))) != 0)) {
				{
				State = 407;
				_la = TokenStream.LA(1);
				if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << OR) | (1L << DIV) | (1L << MOD) | (1L << LSHIFT) | (1L << RSHIFT) | (1L << BIT_CLEAR) | (1L << PLUS) | (1L << MINUS) | (1L << CARET) | (1L << STAR) | (1L << AMPERSAND))) != 0)) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
			}

			State = 410;
			Match(ASSIGN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ShortVarDeclContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierListContext identifierList() {
			return GetRuleContext<IdentifierListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DECLARE_ASSIGN() { return GetToken(GoParser.DECLARE_ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionListContext expressionList() {
			return GetRuleContext<ExpressionListContext>(0);
		}
		public ShortVarDeclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_shortVarDecl; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGoParserListener typedListener = listener as IGoParserListener;
			if (typedListener != null) typedListener.EnterShortVarDecl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGoParserListener typedListener = listener as IGoParserListener;
			if (typedListener != null) typedListener.ExitShortVarDecl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGoParserVisitor<TResult> typedVisitor = visitor as IGoParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitShortVarDecl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ShortVarDeclContext shortVarDecl() {
		ShortVarDeclContext _localctx = new ShortVarDeclContext(Context, State);
		EnterRule(_localctx, 52, RULE_shortVarDecl);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 412;
			identifierList();
			State = 413;
			Match(DECLARE_ASSIGN);
			State = 414;
			expressionList();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EmptyStmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EOS() { return GetToken(GoParser.EOS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(GoParser.SEMI, 0); }
		public EmptyStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_emptyStmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGoParserListener typedListener = listener as IGoParserListener;
			if (typedListener != null) typedListener.EnterEmptyStmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGoParserListener typedListener = listener as IGoParserListener;
			if (typedListener != null) typedListener.ExitEmptyStmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGoParserVisitor<TResult> typedVisitor = visitor as IGoParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEmptyStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EmptyStmtContext emptyStmt() {
		EmptyStmtContext _localctx = new EmptyStmtContext(Context, State);
		EnterRule(_localctx, 54, RULE_emptyStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 416;
			_la = TokenStream.LA(1);
			if ( !(_la==SEMI || _la==EOS) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LabeledStmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(GoParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(GoParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		public LabeledStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_labeledStmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGoParserListener typedListener = listener as IGoParserListener;
			if (typedListener != null) typedListener.EnterLabeledStmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGoParserListener typedListener = listener as IGoParserListener;
			if (typedListener != null) typedListener.ExitLabeledStmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGoParserVisitor<TResult> typedVisitor = visitor as IGoParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLabeledStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LabeledStmtContext labeledStmt() {
		LabeledStmtContext _localctx = new LabeledStmtContext(Context, State);
		EnterRule(_localctx, 56, RULE_labeledStmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 418;
			Match(IDENTIFIER);
			State = 419;
			Match(COLON);
			State = 421;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,30,Context) ) {
			case 1:
				{
				State = 420;
				statement();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReturnStmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RETURN() { return GetToken(GoParser.RETURN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionListContext expressionList() {
			return GetRuleContext<ExpressionListContext>(0);
		}
		public ReturnStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_returnStmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGoParserListener typedListener = listener as IGoParserListener;
			if (typedListener != null) typedListener.EnterReturnStmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGoParserListener typedListener = listener as IGoParserListener;
			if (typedListener != null) typedListener.ExitReturnStmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGoParserVisitor<TResult> typedVisitor = visitor as IGoParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReturnStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ReturnStmtContext returnStmt() {
		ReturnStmtContext _localctx = new ReturnStmtContext(Context, State);
		EnterRule(_localctx, 58, RULE_returnStmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 423;
			Match(RETURN);
			State = 425;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,31,Context) ) {
			case 1:
				{
				State = 424;
				expressionList();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BreakStmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BREAK() { return GetToken(GoParser.BREAK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(GoParser.IDENTIFIER, 0); }
		public BreakStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_breakStmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGoParserListener typedListener = listener as IGoParserListener;
			if (typedListener != null) typedListener.EnterBreakStmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGoParserListener typedListener = listener as IGoParserListener;
			if (typedListener != null) typedListener.ExitBreakStmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGoParserVisitor<TResult> typedVisitor = visitor as IGoParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBreakStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BreakStmtContext breakStmt() {
		BreakStmtContext _localctx = new BreakStmtContext(Context, State);
		EnterRule(_localctx, 60, RULE_breakStmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 427;
			Match(BREAK);
			State = 429;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,32,Context) ) {
			case 1:
				{
				State = 428;
				Match(IDENTIFIER);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ContinueStmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONTINUE() { return GetToken(GoParser.CONTINUE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(GoParser.IDENTIFIER, 0); }
		public ContinueStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_continueStmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGoParserListener typedListener = listener as IGoParserListener;
			if (typedListener != null) typedListener.EnterContinueStmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGoParserListener typedListener = listener as IGoParserListener;
			if (typedListener != null) typedListener.ExitContinueStmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGoParserVisitor<TResult> typedVisitor = visitor as IGoParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitContinueStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ContinueStmtContext continueStmt() {
		ContinueStmtContext _localctx = new ContinueStmtContext(Context, State);
		EnterRule(_localctx, 62, RULE_continueStmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 431;
			Match(CONTINUE);
			State = 433;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,33,Context) ) {
			case 1:
				{
				State = 432;
				Match(IDENTIFIER);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GotoStmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GOTO() { return GetToken(GoParser.GOTO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(GoParser.IDENTIFIER, 0); }
		public GotoStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_gotoStmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGoParserListener typedListener = listener as IGoParserListener;
			if (typedListener != null) typedListener.EnterGotoStmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGoParserListener typedListener = listener as IGoParserListener;
			if (typedListener != null) typedListener.ExitGotoStmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGoParserVisitor<TResult> typedVisitor = visitor as IGoParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGotoStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public GotoStmtContext gotoStmt() {
		GotoStmtContext _localctx = new GotoStmtContext(Context, State);
		EnterRule(_localctx, 64, RULE_gotoStmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 435;
			Match(GOTO);
			State = 436;
			Match(IDENTIFIER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FallthroughStmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FALLTHROUGH() { return GetToken(GoParser.FALLTHROUGH, 0); }
		public FallthroughStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fallthroughStmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGoParserListener typedListener = listener as IGoParserListener;
			if (typedListener != null) typedListener.EnterFallthroughStmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGoParserListener typedListener = listener as IGoParserListener;
			if (typedListener != null) typedListener.ExitFallthroughStmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGoParserVisitor<TResult> typedVisitor = visitor as IGoParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFallthroughStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FallthroughStmtContext fallthroughStmt() {
		FallthroughStmtContext _localctx = new FallthroughStmtContext(Context, State);
		EnterRule(_localctx, 66, RULE_fallthroughStmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 438;
			Match(FALLTHROUGH);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeferStmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEFER() { return GetToken(GoParser.DEFER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public DeferStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_deferStmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGoParserListener typedListener = listener as IGoParserListener;
			if (typedListener != null) typedListener.EnterDeferStmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGoParserListener typedListener = listener as IGoParserListener;
			if (typedListener != null) typedListener.ExitDeferStmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGoParserVisitor<TResult> typedVisitor = visitor as IGoParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeferStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DeferStmtContext deferStmt() {
		DeferStmtContext _localctx = new DeferStmtContext(Context, State);
		EnterRule(_localctx, 68, RULE_deferStmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 440;
			Match(DEFER);
			State = 441;
			expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IfStmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF() { return GetToken(GoParser.IF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext[] block() {
			return GetRuleContexts<BlockContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block(int i) {
			return GetRuleContext<BlockContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public EosContext eos() {
			return GetRuleContext<EosContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SimpleStmtContext simpleStmt() {
			return GetRuleContext<SimpleStmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ELSE() { return GetToken(GoParser.ELSE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IfStmtContext ifStmt() {
			return GetRuleContext<IfStmtContext>(0);
		}
		public IfStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ifStmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGoParserListener typedListener = listener as IGoParserListener;
			if (typedListener != null) typedListener.EnterIfStmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGoParserListener typedListener = listener as IGoParserListener;
			if (typedListener != null) typedListener.ExitIfStmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGoParserVisitor<TResult> typedVisitor = visitor as IGoParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIfStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IfStmtContext ifStmt() {
		IfStmtContext _localctx = new IfStmtContext(Context, State);
		EnterRule(_localctx, 70, RULE_ifStmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 443;
			Match(IF);
			State = 452;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,34,Context) ) {
			case 1:
				{
				State = 444;
				expression(0);
				}
				break;
			case 2:
				{
				State = 445;
				eos();
				State = 446;
				expression(0);
				}
				break;
			case 3:
				{
				State = 448;
				simpleStmt();
				State = 449;
				eos();
				State = 450;
				expression(0);
				}
				break;
			}
			State = 454;
			block();
			State = 460;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,36,Context) ) {
			case 1:
				{
				State = 455;
				Match(ELSE);
				State = 458;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case IF:
					{
					State = 456;
					ifStmt();
					}
					break;
				case L_CURLY:
					{
					State = 457;
					block();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SwitchStmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprSwitchStmtContext exprSwitchStmt() {
			return GetRuleContext<ExprSwitchStmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeSwitchStmtContext typeSwitchStmt() {
			return GetRuleContext<TypeSwitchStmtContext>(0);
		}
		public SwitchStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_switchStmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGoParserListener typedListener = listener as IGoParserListener;
			if (typedListener != null) typedListener.EnterSwitchStmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGoParserListener typedListener = listener as IGoParserListener;
			if (typedListener != null) typedListener.ExitSwitchStmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGoParserVisitor<TResult> typedVisitor = visitor as IGoParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSwitchStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SwitchStmtContext switchStmt() {
		SwitchStmtContext _localctx = new SwitchStmtContext(Context, State);
		EnterRule(_localctx, 72, RULE_switchStmt);
		try {
			State = 464;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,37,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 462;
				exprSwitchStmt();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 463;
				typeSwitchStmt();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExprSwitchStmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SWITCH() { return GetToken(GoParser.SWITCH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode L_CURLY() { return GetToken(GoParser.L_CURLY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode R_CURLY() { return GetToken(GoParser.R_CURLY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public EosContext eos() {
			return GetRuleContext<EosContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprCaseClauseContext[] exprCaseClause() {
			return GetRuleContexts<ExprCaseClauseContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprCaseClauseContext exprCaseClause(int i) {
			return GetRuleContext<ExprCaseClauseContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SimpleStmtContext simpleStmt() {
			return GetRuleContext<SimpleStmtContext>(0);
		}
		public ExprSwitchStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_exprSwitchStmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGoParserListener typedListener = listener as IGoParserListener;
			if (typedListener != null) typedListener.EnterExprSwitchStmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGoParserListener typedListener = listener as IGoParserListener;
			if (typedListener != null) typedListener.ExitExprSwitchStmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGoParserVisitor<TResult> typedVisitor = visitor as IGoParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExprSwitchStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExprSwitchStmtContext exprSwitchStmt() {
		ExprSwitchStmtContext _localctx = new ExprSwitchStmtContext(Context, State);
		EnterRule(_localctx, 74, RULE_exprSwitchStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 466;
			Match(SWITCH);
			State = 477;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,41,Context) ) {
			case 1:
				{
				State = 468;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << FUNC) | (1L << INTERFACE) | (1L << MAP) | (1L << STRUCT) | (1L << CHAN) | (1L << NIL_LIT) | (1L << IDENTIFIER) | (1L << L_PAREN) | (1L << L_BRACKET) | (1L << EXCLAMATION) | (1L << PLUS) | (1L << MINUS) | (1L << CARET) | (1L << STAR) | (1L << AMPERSAND) | (1L << RECEIVE))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (DECIMAL_LIT - 64)) | (1L << (BINARY_LIT - 64)) | (1L << (OCTAL_LIT - 64)) | (1L << (HEX_LIT - 64)) | (1L << (FLOAT_LIT - 64)) | (1L << (IMAGINARY_LIT - 64)) | (1L << (RUNE_LIT - 64)) | (1L << (RAW_STRING_LIT - 64)) | (1L << (INTERPRETED_STRING_LIT - 64)))) != 0)) {
					{
					State = 467;
					expression(0);
					}
				}

				}
				break;
			case 2:
				{
				State = 471;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,39,Context) ) {
				case 1:
					{
					State = 470;
					simpleStmt();
					}
					break;
				}
				State = 473;
				eos();
				State = 475;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << FUNC) | (1L << INTERFACE) | (1L << MAP) | (1L << STRUCT) | (1L << CHAN) | (1L << NIL_LIT) | (1L << IDENTIFIER) | (1L << L_PAREN) | (1L << L_BRACKET) | (1L << EXCLAMATION) | (1L << PLUS) | (1L << MINUS) | (1L << CARET) | (1L << STAR) | (1L << AMPERSAND) | (1L << RECEIVE))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (DECIMAL_LIT - 64)) | (1L << (BINARY_LIT - 64)) | (1L << (OCTAL_LIT - 64)) | (1L << (HEX_LIT - 64)) | (1L << (FLOAT_LIT - 64)) | (1L << (IMAGINARY_LIT - 64)) | (1L << (RUNE_LIT - 64)) | (1L << (RAW_STRING_LIT - 64)) | (1L << (INTERPRETED_STRING_LIT - 64)))) != 0)) {
					{
					State = 474;
					expression(0);
					}
				}

				}
				break;
			}
			State = 479;
			Match(L_CURLY);
			State = 483;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==DEFAULT || _la==CASE) {
				{
				{
				State = 480;
				exprCaseClause();
				}
				}
				State = 485;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 486;
			Match(R_CURLY);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExprCaseClauseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprSwitchCaseContext exprSwitchCase() {
			return GetRuleContext<ExprSwitchCaseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(GoParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementListContext statementList() {
			return GetRuleContext<StatementListContext>(0);
		}
		public ExprCaseClauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_exprCaseClause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGoParserListener typedListener = listener as IGoParserListener;
			if (typedListener != null) typedListener.EnterExprCaseClause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGoParserListener typedListener = listener as IGoParserListener;
			if (typedListener != null) typedListener.ExitExprCaseClause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGoParserVisitor<TResult> typedVisitor = visitor as IGoParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExprCaseClause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExprCaseClauseContext exprCaseClause() {
		ExprCaseClauseContext _localctx = new ExprCaseClauseContext(Context, State);
		EnterRule(_localctx, 76, RULE_exprCaseClause);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 488;
			exprSwitchCase();
			State = 489;
			Match(COLON);
			State = 491;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,43,Context) ) {
			case 1:
				{
				State = 490;
				statementList();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExprSwitchCaseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CASE() { return GetToken(GoParser.CASE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionListContext expressionList() {
			return GetRuleContext<ExpressionListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEFAULT() { return GetToken(GoParser.DEFAULT, 0); }
		public ExprSwitchCaseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_exprSwitchCase; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGoParserListener typedListener = listener as IGoParserListener;
			if (typedListener != null) typedListener.EnterExprSwitchCase(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGoParserListener typedListener = listener as IGoParserListener;
			if (typedListener != null) typedListener.ExitExprSwitchCase(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGoParserVisitor<TResult> typedVisitor = visitor as IGoParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExprSwitchCase(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExprSwitchCaseContext exprSwitchCase() {
		ExprSwitchCaseContext _localctx = new ExprSwitchCaseContext(Context, State);
		EnterRule(_localctx, 78, RULE_exprSwitchCase);
		try {
			State = 496;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case CASE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 493;
				Match(CASE);
				State = 494;
				expressionList();
				}
				break;
			case DEFAULT:
				EnterOuterAlt(_localctx, 2);
				{
				State = 495;
				Match(DEFAULT);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeSwitchStmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SWITCH() { return GetToken(GoParser.SWITCH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode L_CURLY() { return GetToken(GoParser.L_CURLY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode R_CURLY() { return GetToken(GoParser.R_CURLY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeSwitchGuardContext typeSwitchGuard() {
			return GetRuleContext<TypeSwitchGuardContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public EosContext eos() {
			return GetRuleContext<EosContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SimpleStmtContext simpleStmt() {
			return GetRuleContext<SimpleStmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeCaseClauseContext[] typeCaseClause() {
			return GetRuleContexts<TypeCaseClauseContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeCaseClauseContext typeCaseClause(int i) {
			return GetRuleContext<TypeCaseClauseContext>(i);
		}
		public TypeSwitchStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeSwitchStmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGoParserListener typedListener = listener as IGoParserListener;
			if (typedListener != null) typedListener.EnterTypeSwitchStmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGoParserListener typedListener = listener as IGoParserListener;
			if (typedListener != null) typedListener.ExitTypeSwitchStmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGoParserVisitor<TResult> typedVisitor = visitor as IGoParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeSwitchStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeSwitchStmtContext typeSwitchStmt() {
		TypeSwitchStmtContext _localctx = new TypeSwitchStmtContext(Context, State);
		EnterRule(_localctx, 80, RULE_typeSwitchStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 498;
			Match(SWITCH);
			State = 507;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,45,Context) ) {
			case 1:
				{
				State = 499;
				typeSwitchGuard();
				}
				break;
			case 2:
				{
				State = 500;
				eos();
				State = 501;
				typeSwitchGuard();
				}
				break;
			case 3:
				{
				State = 503;
				simpleStmt();
				State = 504;
				eos();
				State = 505;
				typeSwitchGuard();
				}
				break;
			}
			State = 509;
			Match(L_CURLY);
			State = 513;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==DEFAULT || _la==CASE) {
				{
				{
				State = 510;
				typeCaseClause();
				}
				}
				State = 515;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 516;
			Match(R_CURLY);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeSwitchGuardContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public PrimaryExprContext primaryExpr() {
			return GetRuleContext<PrimaryExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT() { return GetToken(GoParser.DOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode L_PAREN() { return GetToken(GoParser.L_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TYPE() { return GetToken(GoParser.TYPE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode R_PAREN() { return GetToken(GoParser.R_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(GoParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DECLARE_ASSIGN() { return GetToken(GoParser.DECLARE_ASSIGN, 0); }
		public TypeSwitchGuardContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeSwitchGuard; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGoParserListener typedListener = listener as IGoParserListener;
			if (typedListener != null) typedListener.EnterTypeSwitchGuard(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGoParserListener typedListener = listener as IGoParserListener;
			if (typedListener != null) typedListener.ExitTypeSwitchGuard(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGoParserVisitor<TResult> typedVisitor = visitor as IGoParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeSwitchGuard(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeSwitchGuardContext typeSwitchGuard() {
		TypeSwitchGuardContext _localctx = new TypeSwitchGuardContext(Context, State);
		EnterRule(_localctx, 82, RULE_typeSwitchGuard);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 520;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,47,Context) ) {
			case 1:
				{
				State = 518;
				Match(IDENTIFIER);
				State = 519;
				Match(DECLARE_ASSIGN);
				}
				break;
			}
			State = 522;
			primaryExpr(0);
			State = 523;
			Match(DOT);
			State = 524;
			Match(L_PAREN);
			State = 525;
			Match(TYPE);
			State = 526;
			Match(R_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeCaseClauseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypeSwitchCaseContext typeSwitchCase() {
			return GetRuleContext<TypeSwitchCaseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(GoParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementListContext statementList() {
			return GetRuleContext<StatementListContext>(0);
		}
		public TypeCaseClauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeCaseClause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGoParserListener typedListener = listener as IGoParserListener;
			if (typedListener != null) typedListener.EnterTypeCaseClause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGoParserListener typedListener = listener as IGoParserListener;
			if (typedListener != null) typedListener.ExitTypeCaseClause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGoParserVisitor<TResult> typedVisitor = visitor as IGoParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeCaseClause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeCaseClauseContext typeCaseClause() {
		TypeCaseClauseContext _localctx = new TypeCaseClauseContext(Context, State);
		EnterRule(_localctx, 84, RULE_typeCaseClause);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 528;
			typeSwitchCase();
			State = 529;
			Match(COLON);
			State = 531;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,48,Context) ) {
			case 1:
				{
				State = 530;
				statementList();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeSwitchCaseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CASE() { return GetToken(GoParser.CASE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeListContext typeList() {
			return GetRuleContext<TypeListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEFAULT() { return GetToken(GoParser.DEFAULT, 0); }
		public TypeSwitchCaseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeSwitchCase; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGoParserListener typedListener = listener as IGoParserListener;
			if (typedListener != null) typedListener.EnterTypeSwitchCase(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGoParserListener typedListener = listener as IGoParserListener;
			if (typedListener != null) typedListener.ExitTypeSwitchCase(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGoParserVisitor<TResult> typedVisitor = visitor as IGoParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeSwitchCase(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeSwitchCaseContext typeSwitchCase() {
		TypeSwitchCaseContext _localctx = new TypeSwitchCaseContext(Context, State);
		EnterRule(_localctx, 86, RULE_typeSwitchCase);
		try {
			State = 536;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case CASE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 533;
				Match(CASE);
				State = 534;
				typeList();
				}
				break;
			case DEFAULT:
				EnterOuterAlt(_localctx, 2);
				{
				State = 535;
				Match(DEFAULT);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Type_Context[] type_() {
			return GetRuleContexts<Type_Context>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Type_Context type_(int i) {
			return GetRuleContext<Type_Context>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NIL_LIT() { return GetTokens(GoParser.NIL_LIT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NIL_LIT(int i) {
			return GetToken(GoParser.NIL_LIT, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(GoParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(GoParser.COMMA, i);
		}
		public TypeListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGoParserListener typedListener = listener as IGoParserListener;
			if (typedListener != null) typedListener.EnterTypeList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGoParserListener typedListener = listener as IGoParserListener;
			if (typedListener != null) typedListener.ExitTypeList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGoParserVisitor<TResult> typedVisitor = visitor as IGoParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeListContext typeList() {
		TypeListContext _localctx = new TypeListContext(Context, State);
		EnterRule(_localctx, 88, RULE_typeList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 540;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case FUNC:
			case INTERFACE:
			case MAP:
			case STRUCT:
			case CHAN:
			case IDENTIFIER:
			case L_PAREN:
			case L_BRACKET:
			case STAR:
			case RECEIVE:
				{
				State = 538;
				type_();
				}
				break;
			case NIL_LIT:
				{
				State = 539;
				Match(NIL_LIT);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 549;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 542;
				Match(COMMA);
				State = 545;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case FUNC:
				case INTERFACE:
				case MAP:
				case STRUCT:
				case CHAN:
				case IDENTIFIER:
				case L_PAREN:
				case L_BRACKET:
				case STAR:
				case RECEIVE:
					{
					State = 543;
					type_();
					}
					break;
				case NIL_LIT:
					{
					State = 544;
					Match(NIL_LIT);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				}
				State = 551;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SelectStmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SELECT() { return GetToken(GoParser.SELECT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode L_CURLY() { return GetToken(GoParser.L_CURLY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode R_CURLY() { return GetToken(GoParser.R_CURLY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public CommClauseContext[] commClause() {
			return GetRuleContexts<CommClauseContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public CommClauseContext commClause(int i) {
			return GetRuleContext<CommClauseContext>(i);
		}
		public SelectStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_selectStmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGoParserListener typedListener = listener as IGoParserListener;
			if (typedListener != null) typedListener.EnterSelectStmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGoParserListener typedListener = listener as IGoParserListener;
			if (typedListener != null) typedListener.ExitSelectStmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGoParserVisitor<TResult> typedVisitor = visitor as IGoParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSelectStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SelectStmtContext selectStmt() {
		SelectStmtContext _localctx = new SelectStmtContext(Context, State);
		EnterRule(_localctx, 90, RULE_selectStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 552;
			Match(SELECT);
			State = 553;
			Match(L_CURLY);
			State = 557;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==DEFAULT || _la==CASE) {
				{
				{
				State = 554;
				commClause();
				}
				}
				State = 559;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 560;
			Match(R_CURLY);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CommClauseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public CommCaseContext commCase() {
			return GetRuleContext<CommCaseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(GoParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementListContext statementList() {
			return GetRuleContext<StatementListContext>(0);
		}
		public CommClauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_commClause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGoParserListener typedListener = listener as IGoParserListener;
			if (typedListener != null) typedListener.EnterCommClause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGoParserListener typedListener = listener as IGoParserListener;
			if (typedListener != null) typedListener.ExitCommClause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGoParserVisitor<TResult> typedVisitor = visitor as IGoParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCommClause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CommClauseContext commClause() {
		CommClauseContext _localctx = new CommClauseContext(Context, State);
		EnterRule(_localctx, 92, RULE_commClause);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 562;
			commCase();
			State = 563;
			Match(COLON);
			State = 565;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,54,Context) ) {
			case 1:
				{
				State = 564;
				statementList();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CommCaseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CASE() { return GetToken(GoParser.CASE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SendStmtContext sendStmt() {
			return GetRuleContext<SendStmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RecvStmtContext recvStmt() {
			return GetRuleContext<RecvStmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEFAULT() { return GetToken(GoParser.DEFAULT, 0); }
		public CommCaseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_commCase; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGoParserListener typedListener = listener as IGoParserListener;
			if (typedListener != null) typedListener.EnterCommCase(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGoParserListener typedListener = listener as IGoParserListener;
			if (typedListener != null) typedListener.ExitCommCase(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGoParserVisitor<TResult> typedVisitor = visitor as IGoParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCommCase(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CommCaseContext commCase() {
		CommCaseContext _localctx = new CommCaseContext(Context, State);
		EnterRule(_localctx, 94, RULE_commCase);
		try {
			State = 573;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case CASE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 567;
				Match(CASE);
				State = 570;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,55,Context) ) {
				case 1:
					{
					State = 568;
					sendStmt();
					}
					break;
				case 2:
					{
					State = 569;
					recvStmt();
					}
					break;
				}
				}
				break;
			case DEFAULT:
				EnterOuterAlt(_localctx, 2);
				{
				State = 572;
				Match(DEFAULT);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RecvStmtContext : ParserRuleContext {
		public ExpressionContext recvExpr;
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionListContext expressionList() {
			return GetRuleContext<ExpressionListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGN() { return GetToken(GoParser.ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierListContext identifierList() {
			return GetRuleContext<IdentifierListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DECLARE_ASSIGN() { return GetToken(GoParser.DECLARE_ASSIGN, 0); }
		public RecvStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_recvStmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGoParserListener typedListener = listener as IGoParserListener;
			if (typedListener != null) typedListener.EnterRecvStmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGoParserListener typedListener = listener as IGoParserListener;
			if (typedListener != null) typedListener.ExitRecvStmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGoParserVisitor<TResult> typedVisitor = visitor as IGoParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRecvStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RecvStmtContext recvStmt() {
		RecvStmtContext _localctx = new RecvStmtContext(Context, State);
		EnterRule(_localctx, 96, RULE_recvStmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 581;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,57,Context) ) {
			case 1:
				{
				State = 575;
				expressionList();
				State = 576;
				Match(ASSIGN);
				}
				break;
			case 2:
				{
				State = 578;
				identifierList();
				State = 579;
				Match(DECLARE_ASSIGN);
				}
				break;
			}
			State = 583;
			_localctx.recvExpr = expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ForStmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOR() { return GetToken(GoParser.FOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ForClauseContext forClause() {
			return GetRuleContext<ForClauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RangeClauseContext rangeClause() {
			return GetRuleContext<RangeClauseContext>(0);
		}
		public ForStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_forStmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGoParserListener typedListener = listener as IGoParserListener;
			if (typedListener != null) typedListener.EnterForStmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGoParserListener typedListener = listener as IGoParserListener;
			if (typedListener != null) typedListener.ExitForStmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGoParserVisitor<TResult> typedVisitor = visitor as IGoParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ForStmtContext forStmt() {
		ForStmtContext _localctx = new ForStmtContext(Context, State);
		EnterRule(_localctx, 98, RULE_forStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 585;
			Match(FOR);
			State = 593;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,60,Context) ) {
			case 1:
				{
				State = 587;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << FUNC) | (1L << INTERFACE) | (1L << MAP) | (1L << STRUCT) | (1L << CHAN) | (1L << NIL_LIT) | (1L << IDENTIFIER) | (1L << L_PAREN) | (1L << L_BRACKET) | (1L << EXCLAMATION) | (1L << PLUS) | (1L << MINUS) | (1L << CARET) | (1L << STAR) | (1L << AMPERSAND) | (1L << RECEIVE))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (DECIMAL_LIT - 64)) | (1L << (BINARY_LIT - 64)) | (1L << (OCTAL_LIT - 64)) | (1L << (HEX_LIT - 64)) | (1L << (FLOAT_LIT - 64)) | (1L << (IMAGINARY_LIT - 64)) | (1L << (RUNE_LIT - 64)) | (1L << (RAW_STRING_LIT - 64)) | (1L << (INTERPRETED_STRING_LIT - 64)))) != 0)) {
					{
					State = 586;
					expression(0);
					}
				}

				}
				break;
			case 2:
				{
				State = 589;
				forClause();
				}
				break;
			case 3:
				{
				State = 591;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << FUNC) | (1L << INTERFACE) | (1L << MAP) | (1L << STRUCT) | (1L << CHAN) | (1L << RANGE) | (1L << NIL_LIT) | (1L << IDENTIFIER) | (1L << L_PAREN) | (1L << L_BRACKET) | (1L << EXCLAMATION) | (1L << PLUS) | (1L << MINUS) | (1L << CARET) | (1L << STAR) | (1L << AMPERSAND) | (1L << RECEIVE))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (DECIMAL_LIT - 64)) | (1L << (BINARY_LIT - 64)) | (1L << (OCTAL_LIT - 64)) | (1L << (HEX_LIT - 64)) | (1L << (FLOAT_LIT - 64)) | (1L << (IMAGINARY_LIT - 64)) | (1L << (RUNE_LIT - 64)) | (1L << (RAW_STRING_LIT - 64)) | (1L << (INTERPRETED_STRING_LIT - 64)))) != 0)) {
					{
					State = 590;
					rangeClause();
					}
				}

				}
				break;
			}
			State = 595;
			block();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ForClauseContext : ParserRuleContext {
		public SimpleStmtContext initStmt;
		public SimpleStmtContext postStmt;
		[System.Diagnostics.DebuggerNonUserCode] public EosContext[] eos() {
			return GetRuleContexts<EosContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public EosContext eos(int i) {
			return GetRuleContext<EosContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SimpleStmtContext[] simpleStmt() {
			return GetRuleContexts<SimpleStmtContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SimpleStmtContext simpleStmt(int i) {
			return GetRuleContext<SimpleStmtContext>(i);
		}
		public ForClauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_forClause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGoParserListener typedListener = listener as IGoParserListener;
			if (typedListener != null) typedListener.EnterForClause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGoParserListener typedListener = listener as IGoParserListener;
			if (typedListener != null) typedListener.ExitForClause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGoParserVisitor<TResult> typedVisitor = visitor as IGoParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForClause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ForClauseContext forClause() {
		ForClauseContext _localctx = new ForClauseContext(Context, State);
		EnterRule(_localctx, 100, RULE_forClause);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 598;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,61,Context) ) {
			case 1:
				{
				State = 597;
				_localctx.initStmt = simpleStmt();
				}
				break;
			}
			State = 600;
			eos();
			State = 602;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,62,Context) ) {
			case 1:
				{
				State = 601;
				expression(0);
				}
				break;
			}
			State = 604;
			eos();
			State = 606;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << FUNC) | (1L << INTERFACE) | (1L << MAP) | (1L << STRUCT) | (1L << CHAN) | (1L << NIL_LIT) | (1L << IDENTIFIER) | (1L << L_PAREN) | (1L << L_BRACKET) | (1L << EXCLAMATION) | (1L << PLUS) | (1L << MINUS) | (1L << CARET) | (1L << STAR) | (1L << AMPERSAND) | (1L << RECEIVE))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (DECIMAL_LIT - 64)) | (1L << (BINARY_LIT - 64)) | (1L << (OCTAL_LIT - 64)) | (1L << (HEX_LIT - 64)) | (1L << (FLOAT_LIT - 64)) | (1L << (IMAGINARY_LIT - 64)) | (1L << (RUNE_LIT - 64)) | (1L << (RAW_STRING_LIT - 64)) | (1L << (INTERPRETED_STRING_LIT - 64)))) != 0)) {
				{
				State = 605;
				_localctx.postStmt = simpleStmt();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RangeClauseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RANGE() { return GetToken(GoParser.RANGE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionListContext expressionList() {
			return GetRuleContext<ExpressionListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGN() { return GetToken(GoParser.ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierListContext identifierList() {
			return GetRuleContext<IdentifierListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DECLARE_ASSIGN() { return GetToken(GoParser.DECLARE_ASSIGN, 0); }
		public RangeClauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rangeClause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGoParserListener typedListener = listener as IGoParserListener;
			if (typedListener != null) typedListener.EnterRangeClause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGoParserListener typedListener = listener as IGoParserListener;
			if (typedListener != null) typedListener.ExitRangeClause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGoParserVisitor<TResult> typedVisitor = visitor as IGoParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRangeClause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RangeClauseContext rangeClause() {
		RangeClauseContext _localctx = new RangeClauseContext(Context, State);
		EnterRule(_localctx, 102, RULE_rangeClause);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 614;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,64,Context) ) {
			case 1:
				{
				State = 608;
				expressionList();
				State = 609;
				Match(ASSIGN);
				}
				break;
			case 2:
				{
				State = 611;
				identifierList();
				State = 612;
				Match(DECLARE_ASSIGN);
				}
				break;
			}
			State = 616;
			Match(RANGE);
			State = 617;
			expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GoStmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GO() { return GetToken(GoParser.GO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public GoStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_goStmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGoParserListener typedListener = listener as IGoParserListener;
			if (typedListener != null) typedListener.EnterGoStmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGoParserListener typedListener = listener as IGoParserListener;
			if (typedListener != null) typedListener.ExitGoStmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGoParserVisitor<TResult> typedVisitor = visitor as IGoParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGoStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public GoStmtContext goStmt() {
		GoStmtContext _localctx = new GoStmtContext(Context, State);
		EnterRule(_localctx, 104, RULE_goStmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 619;
			Match(GO);
			State = 620;
			expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Type_Context : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypeNameContext typeName() {
			return GetRuleContext<TypeNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeLitContext typeLit() {
			return GetRuleContext<TypeLitContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode L_PAREN() { return GetToken(GoParser.L_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Type_Context type_() {
			return GetRuleContext<Type_Context>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode R_PAREN() { return GetToken(GoParser.R_PAREN, 0); }
		public Type_Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type_; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGoParserListener typedListener = listener as IGoParserListener;
			if (typedListener != null) typedListener.EnterType_(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGoParserListener typedListener = listener as IGoParserListener;
			if (typedListener != null) typedListener.ExitType_(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGoParserVisitor<TResult> typedVisitor = visitor as IGoParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitType_(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Type_Context type_() {
		Type_Context _localctx = new Type_Context(Context, State);
		EnterRule(_localctx, 106, RULE_type_);
		try {
			State = 628;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case IDENTIFIER:
				EnterOuterAlt(_localctx, 1);
				{
				State = 622;
				typeName();
				}
				break;
			case FUNC:
			case INTERFACE:
			case MAP:
			case STRUCT:
			case CHAN:
			case L_BRACKET:
			case STAR:
			case RECEIVE:
				EnterOuterAlt(_localctx, 2);
				{
				State = 623;
				typeLit();
				}
				break;
			case L_PAREN:
				EnterOuterAlt(_localctx, 3);
				{
				State = 624;
				Match(L_PAREN);
				State = 625;
				type_();
				State = 626;
				Match(R_PAREN);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public QualifiedIdentContext qualifiedIdent() {
			return GetRuleContext<QualifiedIdentContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(GoParser.IDENTIFIER, 0); }
		public TypeNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeName; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGoParserListener typedListener = listener as IGoParserListener;
			if (typedListener != null) typedListener.EnterTypeName(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGoParserListener typedListener = listener as IGoParserListener;
			if (typedListener != null) typedListener.ExitTypeName(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGoParserVisitor<TResult> typedVisitor = visitor as IGoParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeNameContext typeName() {
		TypeNameContext _localctx = new TypeNameContext(Context, State);
		EnterRule(_localctx, 108, RULE_typeName);
		try {
			State = 632;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,66,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 630;
				qualifiedIdent();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 631;
				Match(IDENTIFIER);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeLitContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ArrayTypeContext arrayType() {
			return GetRuleContext<ArrayTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StructTypeContext structType() {
			return GetRuleContext<StructTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PointerTypeContext pointerType() {
			return GetRuleContext<PointerTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionTypeContext functionType() {
			return GetRuleContext<FunctionTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public InterfaceTypeContext interfaceType() {
			return GetRuleContext<InterfaceTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SliceTypeContext sliceType() {
			return GetRuleContext<SliceTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MapTypeContext mapType() {
			return GetRuleContext<MapTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ChannelTypeContext channelType() {
			return GetRuleContext<ChannelTypeContext>(0);
		}
		public TypeLitContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeLit; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGoParserListener typedListener = listener as IGoParserListener;
			if (typedListener != null) typedListener.EnterTypeLit(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGoParserListener typedListener = listener as IGoParserListener;
			if (typedListener != null) typedListener.ExitTypeLit(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGoParserVisitor<TResult> typedVisitor = visitor as IGoParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeLit(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeLitContext typeLit() {
		TypeLitContext _localctx = new TypeLitContext(Context, State);
		EnterRule(_localctx, 110, RULE_typeLit);
		try {
			State = 642;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,67,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 634;
				arrayType();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 635;
				structType();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 636;
				pointerType();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 637;
				functionType();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 638;
				interfaceType();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 639;
				sliceType();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 640;
				mapType();
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 641;
				channelType();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArrayTypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode L_BRACKET() { return GetToken(GoParser.L_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ArrayLengthContext arrayLength() {
			return GetRuleContext<ArrayLengthContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode R_BRACKET() { return GetToken(GoParser.R_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ElementTypeContext elementType() {
			return GetRuleContext<ElementTypeContext>(0);
		}
		public ArrayTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arrayType; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGoParserListener typedListener = listener as IGoParserListener;
			if (typedListener != null) typedListener.EnterArrayType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGoParserListener typedListener = listener as IGoParserListener;
			if (typedListener != null) typedListener.ExitArrayType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGoParserVisitor<TResult> typedVisitor = visitor as IGoParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArrayType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArrayTypeContext arrayType() {
		ArrayTypeContext _localctx = new ArrayTypeContext(Context, State);
		EnterRule(_localctx, 112, RULE_arrayType);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 644;
			Match(L_BRACKET);
			State = 645;
			arrayLength();
			State = 646;
			Match(R_BRACKET);
			State = 647;
			elementType();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArrayLengthContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ArrayLengthContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arrayLength; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGoParserListener typedListener = listener as IGoParserListener;
			if (typedListener != null) typedListener.EnterArrayLength(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGoParserListener typedListener = listener as IGoParserListener;
			if (typedListener != null) typedListener.ExitArrayLength(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGoParserVisitor<TResult> typedVisitor = visitor as IGoParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArrayLength(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArrayLengthContext arrayLength() {
		ArrayLengthContext _localctx = new ArrayLengthContext(Context, State);
		EnterRule(_localctx, 114, RULE_arrayLength);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 649;
			expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ElementTypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Type_Context type_() {
			return GetRuleContext<Type_Context>(0);
		}
		public ElementTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_elementType; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGoParserListener typedListener = listener as IGoParserListener;
			if (typedListener != null) typedListener.EnterElementType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGoParserListener typedListener = listener as IGoParserListener;
			if (typedListener != null) typedListener.ExitElementType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGoParserVisitor<TResult> typedVisitor = visitor as IGoParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitElementType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ElementTypeContext elementType() {
		ElementTypeContext _localctx = new ElementTypeContext(Context, State);
		EnterRule(_localctx, 116, RULE_elementType);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 651;
			type_();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PointerTypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STAR() { return GetToken(GoParser.STAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Type_Context type_() {
			return GetRuleContext<Type_Context>(0);
		}
		public PointerTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pointerType; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGoParserListener typedListener = listener as IGoParserListener;
			if (typedListener != null) typedListener.EnterPointerType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGoParserListener typedListener = listener as IGoParserListener;
			if (typedListener != null) typedListener.ExitPointerType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGoParserVisitor<TResult> typedVisitor = visitor as IGoParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPointerType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PointerTypeContext pointerType() {
		PointerTypeContext _localctx = new PointerTypeContext(Context, State);
		EnterRule(_localctx, 118, RULE_pointerType);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 653;
			Match(STAR);
			State = 654;
			type_();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InterfaceTypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTERFACE() { return GetToken(GoParser.INTERFACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode L_CURLY() { return GetToken(GoParser.L_CURLY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode R_CURLY() { return GetToken(GoParser.R_CURLY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public EosContext[] eos() {
			return GetRuleContexts<EosContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public EosContext eos(int i) {
			return GetRuleContext<EosContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MethodSpecContext[] methodSpec() {
			return GetRuleContexts<MethodSpecContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public MethodSpecContext methodSpec(int i) {
			return GetRuleContext<MethodSpecContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeNameContext[] typeName() {
			return GetRuleContexts<TypeNameContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeNameContext typeName(int i) {
			return GetRuleContext<TypeNameContext>(i);
		}
		public InterfaceTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_interfaceType; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGoParserListener typedListener = listener as IGoParserListener;
			if (typedListener != null) typedListener.EnterInterfaceType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGoParserListener typedListener = listener as IGoParserListener;
			if (typedListener != null) typedListener.ExitInterfaceType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGoParserVisitor<TResult> typedVisitor = visitor as IGoParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInterfaceType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InterfaceTypeContext interfaceType() {
		InterfaceTypeContext _localctx = new InterfaceTypeContext(Context, State);
		EnterRule(_localctx, 120, RULE_interfaceType);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 656;
			Match(INTERFACE);
			State = 657;
			Match(L_CURLY);
			State = 666;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==IDENTIFIER) {
				{
				{
				State = 660;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,68,Context) ) {
				case 1:
					{
					State = 658;
					methodSpec();
					}
					break;
				case 2:
					{
					State = 659;
					typeName();
					}
					break;
				}
				State = 662;
				eos();
				}
				}
				State = 668;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 669;
			Match(R_CURLY);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SliceTypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode L_BRACKET() { return GetToken(GoParser.L_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode R_BRACKET() { return GetToken(GoParser.R_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ElementTypeContext elementType() {
			return GetRuleContext<ElementTypeContext>(0);
		}
		public SliceTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sliceType; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGoParserListener typedListener = listener as IGoParserListener;
			if (typedListener != null) typedListener.EnterSliceType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGoParserListener typedListener = listener as IGoParserListener;
			if (typedListener != null) typedListener.ExitSliceType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGoParserVisitor<TResult> typedVisitor = visitor as IGoParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSliceType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SliceTypeContext sliceType() {
		SliceTypeContext _localctx = new SliceTypeContext(Context, State);
		EnterRule(_localctx, 122, RULE_sliceType);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 671;
			Match(L_BRACKET);
			State = 672;
			Match(R_BRACKET);
			State = 673;
			elementType();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MapTypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MAP() { return GetToken(GoParser.MAP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode L_BRACKET() { return GetToken(GoParser.L_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Type_Context type_() {
			return GetRuleContext<Type_Context>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode R_BRACKET() { return GetToken(GoParser.R_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ElementTypeContext elementType() {
			return GetRuleContext<ElementTypeContext>(0);
		}
		public MapTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_mapType; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGoParserListener typedListener = listener as IGoParserListener;
			if (typedListener != null) typedListener.EnterMapType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGoParserListener typedListener = listener as IGoParserListener;
			if (typedListener != null) typedListener.ExitMapType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGoParserVisitor<TResult> typedVisitor = visitor as IGoParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMapType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MapTypeContext mapType() {
		MapTypeContext _localctx = new MapTypeContext(Context, State);
		EnterRule(_localctx, 124, RULE_mapType);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 675;
			Match(MAP);
			State = 676;
			Match(L_BRACKET);
			State = 677;
			type_();
			State = 678;
			Match(R_BRACKET);
			State = 679;
			elementType();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ChannelTypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ElementTypeContext elementType() {
			return GetRuleContext<ElementTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CHAN() { return GetToken(GoParser.CHAN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RECEIVE() { return GetToken(GoParser.RECEIVE, 0); }
		public ChannelTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_channelType; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGoParserListener typedListener = listener as IGoParserListener;
			if (typedListener != null) typedListener.EnterChannelType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGoParserListener typedListener = listener as IGoParserListener;
			if (typedListener != null) typedListener.ExitChannelType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGoParserVisitor<TResult> typedVisitor = visitor as IGoParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitChannelType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ChannelTypeContext channelType() {
		ChannelTypeContext _localctx = new ChannelTypeContext(Context, State);
		EnterRule(_localctx, 126, RULE_channelType);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 686;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,70,Context) ) {
			case 1:
				{
				State = 681;
				Match(CHAN);
				}
				break;
			case 2:
				{
				State = 682;
				Match(CHAN);
				State = 683;
				Match(RECEIVE);
				}
				break;
			case 3:
				{
				State = 684;
				Match(RECEIVE);
				State = 685;
				Match(CHAN);
				}
				break;
			}
			State = 688;
			elementType();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MethodSpecContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(GoParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ParametersContext parameters() {
			return GetRuleContext<ParametersContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ResultContext result() {
			return GetRuleContext<ResultContext>(0);
		}
		public MethodSpecContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_methodSpec; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGoParserListener typedListener = listener as IGoParserListener;
			if (typedListener != null) typedListener.EnterMethodSpec(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGoParserListener typedListener = listener as IGoParserListener;
			if (typedListener != null) typedListener.ExitMethodSpec(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGoParserVisitor<TResult> typedVisitor = visitor as IGoParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMethodSpec(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MethodSpecContext methodSpec() {
		MethodSpecContext _localctx = new MethodSpecContext(Context, State);
		EnterRule(_localctx, 128, RULE_methodSpec);
		try {
			State = 696;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,71,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 690;
				Match(IDENTIFIER);
				State = 691;
				parameters();
				State = 692;
				result();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 694;
				Match(IDENTIFIER);
				State = 695;
				parameters();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionTypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FUNC() { return GetToken(GoParser.FUNC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SignatureContext signature() {
			return GetRuleContext<SignatureContext>(0);
		}
		public FunctionTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionType; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGoParserListener typedListener = listener as IGoParserListener;
			if (typedListener != null) typedListener.EnterFunctionType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGoParserListener typedListener = listener as IGoParserListener;
			if (typedListener != null) typedListener.ExitFunctionType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGoParserVisitor<TResult> typedVisitor = visitor as IGoParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionTypeContext functionType() {
		FunctionTypeContext _localctx = new FunctionTypeContext(Context, State);
		EnterRule(_localctx, 130, RULE_functionType);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 698;
			Match(FUNC);
			State = 699;
			signature();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SignatureContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ParametersContext parameters() {
			return GetRuleContext<ParametersContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ResultContext result() {
			return GetRuleContext<ResultContext>(0);
		}
		public SignatureContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_signature; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGoParserListener typedListener = listener as IGoParserListener;
			if (typedListener != null) typedListener.EnterSignature(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGoParserListener typedListener = listener as IGoParserListener;
			if (typedListener != null) typedListener.ExitSignature(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGoParserVisitor<TResult> typedVisitor = visitor as IGoParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSignature(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SignatureContext signature() {
		SignatureContext _localctx = new SignatureContext(Context, State);
		EnterRule(_localctx, 132, RULE_signature);
		try {
			State = 705;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,72,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 701;
				parameters();
				State = 702;
				result();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 704;
				parameters();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ResultContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ParametersContext parameters() {
			return GetRuleContext<ParametersContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Type_Context type_() {
			return GetRuleContext<Type_Context>(0);
		}
		public ResultContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_result; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGoParserListener typedListener = listener as IGoParserListener;
			if (typedListener != null) typedListener.EnterResult(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGoParserListener typedListener = listener as IGoParserListener;
			if (typedListener != null) typedListener.ExitResult(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGoParserVisitor<TResult> typedVisitor = visitor as IGoParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitResult(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ResultContext result() {
		ResultContext _localctx = new ResultContext(Context, State);
		EnterRule(_localctx, 134, RULE_result);
		try {
			State = 709;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,73,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 707;
				parameters();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 708;
				type_();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParametersContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode L_PAREN() { return GetToken(GoParser.L_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode R_PAREN() { return GetToken(GoParser.R_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ParameterDeclContext[] parameterDecl() {
			return GetRuleContexts<ParameterDeclContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ParameterDeclContext parameterDecl(int i) {
			return GetRuleContext<ParameterDeclContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(GoParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(GoParser.COMMA, i);
		}
		public ParametersContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parameters; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGoParserListener typedListener = listener as IGoParserListener;
			if (typedListener != null) typedListener.EnterParameters(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGoParserListener typedListener = listener as IGoParserListener;
			if (typedListener != null) typedListener.ExitParameters(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGoParserVisitor<TResult> typedVisitor = visitor as IGoParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParameters(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ParametersContext parameters() {
		ParametersContext _localctx = new ParametersContext(Context, State);
		EnterRule(_localctx, 136, RULE_parameters);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 711;
			Match(L_PAREN);
			State = 723;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << FUNC) | (1L << INTERFACE) | (1L << MAP) | (1L << STRUCT) | (1L << CHAN) | (1L << IDENTIFIER) | (1L << L_PAREN) | (1L << L_BRACKET) | (1L << ELLIPSIS) | (1L << STAR) | (1L << RECEIVE))) != 0)) {
				{
				State = 712;
				parameterDecl();
				State = 717;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,74,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 713;
						Match(COMMA);
						State = 714;
						parameterDecl();
						}
						} 
					}
					State = 719;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,74,Context);
				}
				State = 721;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==COMMA) {
					{
					State = 720;
					Match(COMMA);
					}
				}

				}
			}

			State = 725;
			Match(R_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParameterDeclContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Type_Context type_() {
			return GetRuleContext<Type_Context>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierListContext identifierList() {
			return GetRuleContext<IdentifierListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ELLIPSIS() { return GetToken(GoParser.ELLIPSIS, 0); }
		public ParameterDeclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parameterDecl; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGoParserListener typedListener = listener as IGoParserListener;
			if (typedListener != null) typedListener.EnterParameterDecl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGoParserListener typedListener = listener as IGoParserListener;
			if (typedListener != null) typedListener.ExitParameterDecl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGoParserVisitor<TResult> typedVisitor = visitor as IGoParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParameterDecl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ParameterDeclContext parameterDecl() {
		ParameterDeclContext _localctx = new ParameterDeclContext(Context, State);
		EnterRule(_localctx, 138, RULE_parameterDecl);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 728;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,77,Context) ) {
			case 1:
				{
				State = 727;
				identifierList();
				}
				break;
			}
			State = 731;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ELLIPSIS) {
				{
				State = 730;
				Match(ELLIPSIS);
				}
			}

			State = 733;
			type_();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		public IToken unary_op;
		public IToken mul_op;
		public IToken add_op;
		public IToken rel_op;
		[System.Diagnostics.DebuggerNonUserCode] public PrimaryExprContext primaryExpr() {
			return GetRuleContext<PrimaryExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PLUS() { return GetToken(GoParser.PLUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUS() { return GetToken(GoParser.MINUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXCLAMATION() { return GetToken(GoParser.EXCLAMATION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CARET() { return GetToken(GoParser.CARET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STAR() { return GetToken(GoParser.STAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AMPERSAND() { return GetToken(GoParser.AMPERSAND, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RECEIVE() { return GetToken(GoParser.RECEIVE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DIV() { return GetToken(GoParser.DIV, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MOD() { return GetToken(GoParser.MOD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LSHIFT() { return GetToken(GoParser.LSHIFT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RSHIFT() { return GetToken(GoParser.RSHIFT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BIT_CLEAR() { return GetToken(GoParser.BIT_CLEAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OR() { return GetToken(GoParser.OR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUALS() { return GetToken(GoParser.EQUALS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT_EQUALS() { return GetToken(GoParser.NOT_EQUALS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LESS() { return GetToken(GoParser.LESS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LESS_OR_EQUALS() { return GetToken(GoParser.LESS_OR_EQUALS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GREATER() { return GetToken(GoParser.GREATER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GREATER_OR_EQUALS() { return GetToken(GoParser.GREATER_OR_EQUALS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOGICAL_AND() { return GetToken(GoParser.LOGICAL_AND, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOGICAL_OR() { return GetToken(GoParser.LOGICAL_OR, 0); }
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGoParserListener typedListener = listener as IGoParserListener;
			if (typedListener != null) typedListener.EnterExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGoParserListener typedListener = listener as IGoParserListener;
			if (typedListener != null) typedListener.ExitExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGoParserVisitor<TResult> typedVisitor = visitor as IGoParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		return expression(0);
	}

	private ExpressionContext expression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ExpressionContext _localctx = new ExpressionContext(Context, _parentState);
		ExpressionContext _prevctx = _localctx;
		int _startState = 140;
		EnterRecursionRule(_localctx, 140, RULE_expression, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 739;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,79,Context) ) {
			case 1:
				{
				State = 736;
				primaryExpr(0);
				}
				break;
			case 2:
				{
				State = 737;
				_localctx.unary_op = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << EXCLAMATION) | (1L << PLUS) | (1L << MINUS) | (1L << CARET) | (1L << STAR) | (1L << AMPERSAND) | (1L << RECEIVE))) != 0)) ) {
					_localctx.unary_op = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 738;
				expression(6);
				}
				break;
			}
			Context.Stop = TokenStream.LT(-1);
			State = 758;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,81,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 756;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,80,Context) ) {
					case 1:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 741;
						if (!(Precpred(Context, 5))) throw new FailedPredicateException(this, "Precpred(Context, 5)");
						State = 742;
						_localctx.mul_op = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << DIV) | (1L << MOD) | (1L << LSHIFT) | (1L << RSHIFT) | (1L << BIT_CLEAR) | (1L << STAR) | (1L << AMPERSAND))) != 0)) ) {
							_localctx.mul_op = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 743;
						expression(6);
						}
						break;
					case 2:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 744;
						if (!(Precpred(Context, 4))) throw new FailedPredicateException(this, "Precpred(Context, 4)");
						State = 745;
						_localctx.add_op = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << OR) | (1L << PLUS) | (1L << MINUS) | (1L << CARET))) != 0)) ) {
							_localctx.add_op = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 746;
						expression(5);
						}
						break;
					case 3:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 747;
						if (!(Precpred(Context, 3))) throw new FailedPredicateException(this, "Precpred(Context, 3)");
						State = 748;
						_localctx.rel_op = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << EQUALS) | (1L << NOT_EQUALS) | (1L << LESS) | (1L << LESS_OR_EQUALS) | (1L << GREATER) | (1L << GREATER_OR_EQUALS))) != 0)) ) {
							_localctx.rel_op = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 749;
						expression(4);
						}
						break;
					case 4:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 750;
						if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
						State = 751;
						Match(LOGICAL_AND);
						State = 752;
						expression(3);
						}
						break;
					case 5:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 753;
						if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
						State = 754;
						Match(LOGICAL_OR);
						State = 755;
						expression(2);
						}
						break;
					}
					} 
				}
				State = 760;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,81,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class PrimaryExprContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public OperandContext operand() {
			return GetRuleContext<OperandContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ConversionContext conversion() {
			return GetRuleContext<ConversionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MethodExprContext methodExpr() {
			return GetRuleContext<MethodExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PrimaryExprContext primaryExpr() {
			return GetRuleContext<PrimaryExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IndexContext index() {
			return GetRuleContext<IndexContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Slice_Context slice_() {
			return GetRuleContext<Slice_Context>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeAssertionContext typeAssertion() {
			return GetRuleContext<TypeAssertionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArgumentsContext arguments() {
			return GetRuleContext<ArgumentsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT() { return GetToken(GoParser.DOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(GoParser.IDENTIFIER, 0); }
		public PrimaryExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_primaryExpr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGoParserListener typedListener = listener as IGoParserListener;
			if (typedListener != null) typedListener.EnterPrimaryExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGoParserListener typedListener = listener as IGoParserListener;
			if (typedListener != null) typedListener.ExitPrimaryExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGoParserVisitor<TResult> typedVisitor = visitor as IGoParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrimaryExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PrimaryExprContext primaryExpr() {
		return primaryExpr(0);
	}

	private PrimaryExprContext primaryExpr(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		PrimaryExprContext _localctx = new PrimaryExprContext(Context, _parentState);
		PrimaryExprContext _prevctx = _localctx;
		int _startState = 142;
		EnterRecursionRule(_localctx, 142, RULE_primaryExpr, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 765;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,82,Context) ) {
			case 1:
				{
				State = 762;
				operand();
				}
				break;
			case 2:
				{
				State = 763;
				conversion();
				}
				break;
			case 3:
				{
				State = 764;
				methodExpr();
				}
				break;
			}
			Context.Stop = TokenStream.LT(-1);
			State = 778;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,84,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new PrimaryExprContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_primaryExpr);
					State = 767;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 774;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,83,Context) ) {
					case 1:
						{
						{
						State = 768;
						Match(DOT);
						State = 769;
						Match(IDENTIFIER);
						}
						}
						break;
					case 2:
						{
						State = 770;
						index();
						}
						break;
					case 3:
						{
						State = 771;
						slice_();
						}
						break;
					case 4:
						{
						State = 772;
						typeAssertion();
						}
						break;
					case 5:
						{
						State = 773;
						arguments();
						}
						break;
					}
					}
					} 
				}
				State = 780;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,84,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class ConversionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public NonNamedTypeContext nonNamedType() {
			return GetRuleContext<NonNamedTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode L_PAREN() { return GetToken(GoParser.L_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode R_PAREN() { return GetToken(GoParser.R_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA() { return GetToken(GoParser.COMMA, 0); }
		public ConversionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_conversion; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGoParserListener typedListener = listener as IGoParserListener;
			if (typedListener != null) typedListener.EnterConversion(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGoParserListener typedListener = listener as IGoParserListener;
			if (typedListener != null) typedListener.ExitConversion(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGoParserVisitor<TResult> typedVisitor = visitor as IGoParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConversion(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConversionContext conversion() {
		ConversionContext _localctx = new ConversionContext(Context, State);
		EnterRule(_localctx, 144, RULE_conversion);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 781;
			nonNamedType();
			State = 782;
			Match(L_PAREN);
			State = 783;
			expression(0);
			State = 785;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==COMMA) {
				{
				State = 784;
				Match(COMMA);
				}
			}

			State = 787;
			Match(R_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NonNamedTypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypeLitContext typeLit() {
			return GetRuleContext<TypeLitContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode L_PAREN() { return GetToken(GoParser.L_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NonNamedTypeContext nonNamedType() {
			return GetRuleContext<NonNamedTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode R_PAREN() { return GetToken(GoParser.R_PAREN, 0); }
		public NonNamedTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_nonNamedType; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGoParserListener typedListener = listener as IGoParserListener;
			if (typedListener != null) typedListener.EnterNonNamedType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGoParserListener typedListener = listener as IGoParserListener;
			if (typedListener != null) typedListener.ExitNonNamedType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGoParserVisitor<TResult> typedVisitor = visitor as IGoParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNonNamedType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NonNamedTypeContext nonNamedType() {
		NonNamedTypeContext _localctx = new NonNamedTypeContext(Context, State);
		EnterRule(_localctx, 146, RULE_nonNamedType);
		try {
			State = 794;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case FUNC:
			case INTERFACE:
			case MAP:
			case STRUCT:
			case CHAN:
			case L_BRACKET:
			case STAR:
			case RECEIVE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 789;
				typeLit();
				}
				break;
			case L_PAREN:
				EnterOuterAlt(_localctx, 2);
				{
				State = 790;
				Match(L_PAREN);
				State = 791;
				nonNamedType();
				State = 792;
				Match(R_PAREN);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OperandContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public LiteralContext literal() {
			return GetRuleContext<LiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public OperandNameContext operandName() {
			return GetRuleContext<OperandNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode L_PAREN() { return GetToken(GoParser.L_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode R_PAREN() { return GetToken(GoParser.R_PAREN, 0); }
		public OperandContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_operand; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGoParserListener typedListener = listener as IGoParserListener;
			if (typedListener != null) typedListener.EnterOperand(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGoParserListener typedListener = listener as IGoParserListener;
			if (typedListener != null) typedListener.ExitOperand(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGoParserVisitor<TResult> typedVisitor = visitor as IGoParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOperand(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OperandContext operand() {
		OperandContext _localctx = new OperandContext(Context, State);
		EnterRule(_localctx, 148, RULE_operand);
		try {
			State = 802;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,87,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 796;
				literal();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 797;
				operandName();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 798;
				Match(L_PAREN);
				State = 799;
				expression(0);
				State = 800;
				Match(R_PAREN);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LiteralContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public BasicLitContext basicLit() {
			return GetRuleContext<BasicLitContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CompositeLitContext compositeLit() {
			return GetRuleContext<CompositeLitContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionLitContext functionLit() {
			return GetRuleContext<FunctionLitContext>(0);
		}
		public LiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_literal; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGoParserListener typedListener = listener as IGoParserListener;
			if (typedListener != null) typedListener.EnterLiteral(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGoParserListener typedListener = listener as IGoParserListener;
			if (typedListener != null) typedListener.ExitLiteral(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGoParserVisitor<TResult> typedVisitor = visitor as IGoParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LiteralContext literal() {
		LiteralContext _localctx = new LiteralContext(Context, State);
		EnterRule(_localctx, 150, RULE_literal);
		try {
			State = 807;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case NIL_LIT:
			case DECIMAL_LIT:
			case BINARY_LIT:
			case OCTAL_LIT:
			case HEX_LIT:
			case FLOAT_LIT:
			case IMAGINARY_LIT:
			case RUNE_LIT:
			case RAW_STRING_LIT:
			case INTERPRETED_STRING_LIT:
				EnterOuterAlt(_localctx, 1);
				{
				State = 804;
				basicLit();
				}
				break;
			case MAP:
			case STRUCT:
			case IDENTIFIER:
			case L_BRACKET:
				EnterOuterAlt(_localctx, 2);
				{
				State = 805;
				compositeLit();
				}
				break;
			case FUNC:
				EnterOuterAlt(_localctx, 3);
				{
				State = 806;
				functionLit();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BasicLitContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NIL_LIT() { return GetToken(GoParser.NIL_LIT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IntegerContext integer() {
			return GetRuleContext<IntegerContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public String_Context string_() {
			return GetRuleContext<String_Context>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FLOAT_LIT() { return GetToken(GoParser.FLOAT_LIT, 0); }
		public BasicLitContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_basicLit; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGoParserListener typedListener = listener as IGoParserListener;
			if (typedListener != null) typedListener.EnterBasicLit(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGoParserListener typedListener = listener as IGoParserListener;
			if (typedListener != null) typedListener.ExitBasicLit(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGoParserVisitor<TResult> typedVisitor = visitor as IGoParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBasicLit(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BasicLitContext basicLit() {
		BasicLitContext _localctx = new BasicLitContext(Context, State);
		EnterRule(_localctx, 152, RULE_basicLit);
		try {
			State = 813;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case NIL_LIT:
				EnterOuterAlt(_localctx, 1);
				{
				State = 809;
				Match(NIL_LIT);
				}
				break;
			case DECIMAL_LIT:
			case BINARY_LIT:
			case OCTAL_LIT:
			case HEX_LIT:
			case IMAGINARY_LIT:
			case RUNE_LIT:
				EnterOuterAlt(_localctx, 2);
				{
				State = 810;
				integer();
				}
				break;
			case RAW_STRING_LIT:
			case INTERPRETED_STRING_LIT:
				EnterOuterAlt(_localctx, 3);
				{
				State = 811;
				string_();
				}
				break;
			case FLOAT_LIT:
				EnterOuterAlt(_localctx, 4);
				{
				State = 812;
				Match(FLOAT_LIT);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IntegerContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DECIMAL_LIT() { return GetToken(GoParser.DECIMAL_LIT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BINARY_LIT() { return GetToken(GoParser.BINARY_LIT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OCTAL_LIT() { return GetToken(GoParser.OCTAL_LIT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HEX_LIT() { return GetToken(GoParser.HEX_LIT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IMAGINARY_LIT() { return GetToken(GoParser.IMAGINARY_LIT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RUNE_LIT() { return GetToken(GoParser.RUNE_LIT, 0); }
		public IntegerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_integer; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGoParserListener typedListener = listener as IGoParserListener;
			if (typedListener != null) typedListener.EnterInteger(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGoParserListener typedListener = listener as IGoParserListener;
			if (typedListener != null) typedListener.ExitInteger(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGoParserVisitor<TResult> typedVisitor = visitor as IGoParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInteger(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IntegerContext integer() {
		IntegerContext _localctx = new IntegerContext(Context, State);
		EnterRule(_localctx, 154, RULE_integer);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 815;
			_la = TokenStream.LA(1);
			if ( !(((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (DECIMAL_LIT - 64)) | (1L << (BINARY_LIT - 64)) | (1L << (OCTAL_LIT - 64)) | (1L << (HEX_LIT - 64)) | (1L << (IMAGINARY_LIT - 64)) | (1L << (RUNE_LIT - 64)))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OperandNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(GoParser.IDENTIFIER, 0); }
		public OperandNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_operandName; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGoParserListener typedListener = listener as IGoParserListener;
			if (typedListener != null) typedListener.EnterOperandName(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGoParserListener typedListener = listener as IGoParserListener;
			if (typedListener != null) typedListener.ExitOperandName(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGoParserVisitor<TResult> typedVisitor = visitor as IGoParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOperandName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OperandNameContext operandName() {
		OperandNameContext _localctx = new OperandNameContext(Context, State);
		EnterRule(_localctx, 156, RULE_operandName);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 817;
			Match(IDENTIFIER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class QualifiedIdentContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] IDENTIFIER() { return GetTokens(GoParser.IDENTIFIER); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER(int i) {
			return GetToken(GoParser.IDENTIFIER, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT() { return GetToken(GoParser.DOT, 0); }
		public QualifiedIdentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_qualifiedIdent; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGoParserListener typedListener = listener as IGoParserListener;
			if (typedListener != null) typedListener.EnterQualifiedIdent(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGoParserListener typedListener = listener as IGoParserListener;
			if (typedListener != null) typedListener.ExitQualifiedIdent(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGoParserVisitor<TResult> typedVisitor = visitor as IGoParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitQualifiedIdent(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public QualifiedIdentContext qualifiedIdent() {
		QualifiedIdentContext _localctx = new QualifiedIdentContext(Context, State);
		EnterRule(_localctx, 158, RULE_qualifiedIdent);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 819;
			Match(IDENTIFIER);
			State = 820;
			Match(DOT);
			State = 821;
			Match(IDENTIFIER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CompositeLitContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public LiteralTypeContext literalType() {
			return GetRuleContext<LiteralTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LiteralValueContext literalValue() {
			return GetRuleContext<LiteralValueContext>(0);
		}
		public CompositeLitContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_compositeLit; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGoParserListener typedListener = listener as IGoParserListener;
			if (typedListener != null) typedListener.EnterCompositeLit(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGoParserListener typedListener = listener as IGoParserListener;
			if (typedListener != null) typedListener.ExitCompositeLit(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGoParserVisitor<TResult> typedVisitor = visitor as IGoParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCompositeLit(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CompositeLitContext compositeLit() {
		CompositeLitContext _localctx = new CompositeLitContext(Context, State);
		EnterRule(_localctx, 160, RULE_compositeLit);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 823;
			literalType();
			State = 824;
			literalValue();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LiteralTypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StructTypeContext structType() {
			return GetRuleContext<StructTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArrayTypeContext arrayType() {
			return GetRuleContext<ArrayTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode L_BRACKET() { return GetToken(GoParser.L_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ELLIPSIS() { return GetToken(GoParser.ELLIPSIS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode R_BRACKET() { return GetToken(GoParser.R_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ElementTypeContext elementType() {
			return GetRuleContext<ElementTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SliceTypeContext sliceType() {
			return GetRuleContext<SliceTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MapTypeContext mapType() {
			return GetRuleContext<MapTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeNameContext typeName() {
			return GetRuleContext<TypeNameContext>(0);
		}
		public LiteralTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_literalType; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGoParserListener typedListener = listener as IGoParserListener;
			if (typedListener != null) typedListener.EnterLiteralType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGoParserListener typedListener = listener as IGoParserListener;
			if (typedListener != null) typedListener.ExitLiteralType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGoParserVisitor<TResult> typedVisitor = visitor as IGoParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLiteralType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LiteralTypeContext literalType() {
		LiteralTypeContext _localctx = new LiteralTypeContext(Context, State);
		EnterRule(_localctx, 162, RULE_literalType);
		try {
			State = 835;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,90,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 826;
				structType();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 827;
				arrayType();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 828;
				Match(L_BRACKET);
				State = 829;
				Match(ELLIPSIS);
				State = 830;
				Match(R_BRACKET);
				State = 831;
				elementType();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 832;
				sliceType();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 833;
				mapType();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 834;
				typeName();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LiteralValueContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode L_CURLY() { return GetToken(GoParser.L_CURLY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode R_CURLY() { return GetToken(GoParser.R_CURLY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ElementListContext elementList() {
			return GetRuleContext<ElementListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA() { return GetToken(GoParser.COMMA, 0); }
		public LiteralValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_literalValue; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGoParserListener typedListener = listener as IGoParserListener;
			if (typedListener != null) typedListener.EnterLiteralValue(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGoParserListener typedListener = listener as IGoParserListener;
			if (typedListener != null) typedListener.ExitLiteralValue(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGoParserVisitor<TResult> typedVisitor = visitor as IGoParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLiteralValue(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LiteralValueContext literalValue() {
		LiteralValueContext _localctx = new LiteralValueContext(Context, State);
		EnterRule(_localctx, 164, RULE_literalValue);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 837;
			Match(L_CURLY);
			State = 842;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << FUNC) | (1L << INTERFACE) | (1L << MAP) | (1L << STRUCT) | (1L << CHAN) | (1L << NIL_LIT) | (1L << IDENTIFIER) | (1L << L_PAREN) | (1L << L_CURLY) | (1L << L_BRACKET) | (1L << EXCLAMATION) | (1L << PLUS) | (1L << MINUS) | (1L << CARET) | (1L << STAR) | (1L << AMPERSAND) | (1L << RECEIVE))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (DECIMAL_LIT - 64)) | (1L << (BINARY_LIT - 64)) | (1L << (OCTAL_LIT - 64)) | (1L << (HEX_LIT - 64)) | (1L << (FLOAT_LIT - 64)) | (1L << (IMAGINARY_LIT - 64)) | (1L << (RUNE_LIT - 64)) | (1L << (RAW_STRING_LIT - 64)) | (1L << (INTERPRETED_STRING_LIT - 64)))) != 0)) {
				{
				State = 838;
				elementList();
				State = 840;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==COMMA) {
					{
					State = 839;
					Match(COMMA);
					}
				}

				}
			}

			State = 844;
			Match(R_CURLY);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ElementListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public KeyedElementContext[] keyedElement() {
			return GetRuleContexts<KeyedElementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public KeyedElementContext keyedElement(int i) {
			return GetRuleContext<KeyedElementContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(GoParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(GoParser.COMMA, i);
		}
		public ElementListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_elementList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGoParserListener typedListener = listener as IGoParserListener;
			if (typedListener != null) typedListener.EnterElementList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGoParserListener typedListener = listener as IGoParserListener;
			if (typedListener != null) typedListener.ExitElementList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGoParserVisitor<TResult> typedVisitor = visitor as IGoParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitElementList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ElementListContext elementList() {
		ElementListContext _localctx = new ElementListContext(Context, State);
		EnterRule(_localctx, 166, RULE_elementList);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 846;
			keyedElement();
			State = 851;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,93,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 847;
					Match(COMMA);
					State = 848;
					keyedElement();
					}
					} 
				}
				State = 853;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,93,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class KeyedElementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ElementContext element() {
			return GetRuleContext<ElementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public KeyContext key() {
			return GetRuleContext<KeyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(GoParser.COLON, 0); }
		public KeyedElementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_keyedElement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGoParserListener typedListener = listener as IGoParserListener;
			if (typedListener != null) typedListener.EnterKeyedElement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGoParserListener typedListener = listener as IGoParserListener;
			if (typedListener != null) typedListener.ExitKeyedElement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGoParserVisitor<TResult> typedVisitor = visitor as IGoParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitKeyedElement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public KeyedElementContext keyedElement() {
		KeyedElementContext _localctx = new KeyedElementContext(Context, State);
		EnterRule(_localctx, 168, RULE_keyedElement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 857;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,94,Context) ) {
			case 1:
				{
				State = 854;
				key();
				State = 855;
				Match(COLON);
				}
				break;
			}
			State = 859;
			element();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class KeyContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LiteralValueContext literalValue() {
			return GetRuleContext<LiteralValueContext>(0);
		}
		public KeyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_key; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGoParserListener typedListener = listener as IGoParserListener;
			if (typedListener != null) typedListener.EnterKey(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGoParserListener typedListener = listener as IGoParserListener;
			if (typedListener != null) typedListener.ExitKey(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGoParserVisitor<TResult> typedVisitor = visitor as IGoParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitKey(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public KeyContext key() {
		KeyContext _localctx = new KeyContext(Context, State);
		EnterRule(_localctx, 170, RULE_key);
		try {
			State = 863;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case FUNC:
			case INTERFACE:
			case MAP:
			case STRUCT:
			case CHAN:
			case NIL_LIT:
			case IDENTIFIER:
			case L_PAREN:
			case L_BRACKET:
			case EXCLAMATION:
			case PLUS:
			case MINUS:
			case CARET:
			case STAR:
			case AMPERSAND:
			case RECEIVE:
			case DECIMAL_LIT:
			case BINARY_LIT:
			case OCTAL_LIT:
			case HEX_LIT:
			case FLOAT_LIT:
			case IMAGINARY_LIT:
			case RUNE_LIT:
			case RAW_STRING_LIT:
			case INTERPRETED_STRING_LIT:
				EnterOuterAlt(_localctx, 1);
				{
				State = 861;
				expression(0);
				}
				break;
			case L_CURLY:
				EnterOuterAlt(_localctx, 2);
				{
				State = 862;
				literalValue();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ElementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LiteralValueContext literalValue() {
			return GetRuleContext<LiteralValueContext>(0);
		}
		public ElementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_element; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGoParserListener typedListener = listener as IGoParserListener;
			if (typedListener != null) typedListener.EnterElement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGoParserListener typedListener = listener as IGoParserListener;
			if (typedListener != null) typedListener.ExitElement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGoParserVisitor<TResult> typedVisitor = visitor as IGoParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitElement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ElementContext element() {
		ElementContext _localctx = new ElementContext(Context, State);
		EnterRule(_localctx, 172, RULE_element);
		try {
			State = 867;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case FUNC:
			case INTERFACE:
			case MAP:
			case STRUCT:
			case CHAN:
			case NIL_LIT:
			case IDENTIFIER:
			case L_PAREN:
			case L_BRACKET:
			case EXCLAMATION:
			case PLUS:
			case MINUS:
			case CARET:
			case STAR:
			case AMPERSAND:
			case RECEIVE:
			case DECIMAL_LIT:
			case BINARY_LIT:
			case OCTAL_LIT:
			case HEX_LIT:
			case FLOAT_LIT:
			case IMAGINARY_LIT:
			case RUNE_LIT:
			case RAW_STRING_LIT:
			case INTERPRETED_STRING_LIT:
				EnterOuterAlt(_localctx, 1);
				{
				State = 865;
				expression(0);
				}
				break;
			case L_CURLY:
				EnterOuterAlt(_localctx, 2);
				{
				State = 866;
				literalValue();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StructTypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRUCT() { return GetToken(GoParser.STRUCT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode L_CURLY() { return GetToken(GoParser.L_CURLY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode R_CURLY() { return GetToken(GoParser.R_CURLY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FieldDeclContext[] fieldDecl() {
			return GetRuleContexts<FieldDeclContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public FieldDeclContext fieldDecl(int i) {
			return GetRuleContext<FieldDeclContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public EosContext[] eos() {
			return GetRuleContexts<EosContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public EosContext eos(int i) {
			return GetRuleContext<EosContext>(i);
		}
		public StructTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_structType; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGoParserListener typedListener = listener as IGoParserListener;
			if (typedListener != null) typedListener.EnterStructType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGoParserListener typedListener = listener as IGoParserListener;
			if (typedListener != null) typedListener.ExitStructType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGoParserVisitor<TResult> typedVisitor = visitor as IGoParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStructType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StructTypeContext structType() {
		StructTypeContext _localctx = new StructTypeContext(Context, State);
		EnterRule(_localctx, 174, RULE_structType);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 869;
			Match(STRUCT);
			State = 870;
			Match(L_CURLY);
			State = 876;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==IDENTIFIER || _la==STAR) {
				{
				{
				State = 871;
				fieldDecl();
				State = 872;
				eos();
				}
				}
				State = 878;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 879;
			Match(R_CURLY);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FieldDeclContext : ParserRuleContext {
		public String_Context tag;
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierListContext identifierList() {
			return GetRuleContext<IdentifierListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Type_Context type_() {
			return GetRuleContext<Type_Context>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public EmbeddedFieldContext embeddedField() {
			return GetRuleContext<EmbeddedFieldContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public String_Context string_() {
			return GetRuleContext<String_Context>(0);
		}
		public FieldDeclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fieldDecl; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGoParserListener typedListener = listener as IGoParserListener;
			if (typedListener != null) typedListener.EnterFieldDecl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGoParserListener typedListener = listener as IGoParserListener;
			if (typedListener != null) typedListener.ExitFieldDecl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGoParserVisitor<TResult> typedVisitor = visitor as IGoParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFieldDecl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FieldDeclContext fieldDecl() {
		FieldDeclContext _localctx = new FieldDeclContext(Context, State);
		EnterRule(_localctx, 176, RULE_fieldDecl);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 885;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,98,Context) ) {
			case 1:
				{
				State = 881;
				identifierList();
				State = 882;
				type_();
				}
				break;
			case 2:
				{
				State = 884;
				embeddedField();
				}
				break;
			}
			State = 888;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,99,Context) ) {
			case 1:
				{
				State = 887;
				_localctx.tag = string_();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class String_Context : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RAW_STRING_LIT() { return GetToken(GoParser.RAW_STRING_LIT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTERPRETED_STRING_LIT() { return GetToken(GoParser.INTERPRETED_STRING_LIT, 0); }
		public String_Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_string_; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGoParserListener typedListener = listener as IGoParserListener;
			if (typedListener != null) typedListener.EnterString_(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGoParserListener typedListener = listener as IGoParserListener;
			if (typedListener != null) typedListener.ExitString_(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGoParserVisitor<TResult> typedVisitor = visitor as IGoParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitString_(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public String_Context string_() {
		String_Context _localctx = new String_Context(Context, State);
		EnterRule(_localctx, 178, RULE_string_);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 890;
			_la = TokenStream.LA(1);
			if ( !(_la==RAW_STRING_LIT || _la==INTERPRETED_STRING_LIT) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EmbeddedFieldContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypeNameContext typeName() {
			return GetRuleContext<TypeNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STAR() { return GetToken(GoParser.STAR, 0); }
		public EmbeddedFieldContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_embeddedField; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGoParserListener typedListener = listener as IGoParserListener;
			if (typedListener != null) typedListener.EnterEmbeddedField(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGoParserListener typedListener = listener as IGoParserListener;
			if (typedListener != null) typedListener.ExitEmbeddedField(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGoParserVisitor<TResult> typedVisitor = visitor as IGoParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEmbeddedField(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EmbeddedFieldContext embeddedField() {
		EmbeddedFieldContext _localctx = new EmbeddedFieldContext(Context, State);
		EnterRule(_localctx, 180, RULE_embeddedField);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 893;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==STAR) {
				{
				State = 892;
				Match(STAR);
				}
			}

			State = 895;
			typeName();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionLitContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FUNC() { return GetToken(GoParser.FUNC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SignatureContext signature() {
			return GetRuleContext<SignatureContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public FunctionLitContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionLit; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGoParserListener typedListener = listener as IGoParserListener;
			if (typedListener != null) typedListener.EnterFunctionLit(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGoParserListener typedListener = listener as IGoParserListener;
			if (typedListener != null) typedListener.ExitFunctionLit(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGoParserVisitor<TResult> typedVisitor = visitor as IGoParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionLit(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionLitContext functionLit() {
		FunctionLitContext _localctx = new FunctionLitContext(Context, State);
		EnterRule(_localctx, 182, RULE_functionLit);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 897;
			Match(FUNC);
			State = 898;
			signature();
			State = 899;
			block();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IndexContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode L_BRACKET() { return GetToken(GoParser.L_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode R_BRACKET() { return GetToken(GoParser.R_BRACKET, 0); }
		public IndexContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_index; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGoParserListener typedListener = listener as IGoParserListener;
			if (typedListener != null) typedListener.EnterIndex(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGoParserListener typedListener = listener as IGoParserListener;
			if (typedListener != null) typedListener.ExitIndex(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGoParserVisitor<TResult> typedVisitor = visitor as IGoParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIndex(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IndexContext index() {
		IndexContext _localctx = new IndexContext(Context, State);
		EnterRule(_localctx, 184, RULE_index);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 901;
			Match(L_BRACKET);
			State = 902;
			expression(0);
			State = 903;
			Match(R_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Slice_Context : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode L_BRACKET() { return GetToken(GoParser.L_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode R_BRACKET() { return GetToken(GoParser.R_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COLON() { return GetTokens(GoParser.COLON); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON(int i) {
			return GetToken(GoParser.COLON, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public Slice_Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_slice_; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGoParserListener typedListener = listener as IGoParserListener;
			if (typedListener != null) typedListener.EnterSlice_(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGoParserListener typedListener = listener as IGoParserListener;
			if (typedListener != null) typedListener.ExitSlice_(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGoParserVisitor<TResult> typedVisitor = visitor as IGoParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSlice_(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Slice_Context slice_() {
		Slice_Context _localctx = new Slice_Context(Context, State);
		EnterRule(_localctx, 186, RULE_slice_);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 905;
			Match(L_BRACKET);
			State = 921;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,104,Context) ) {
			case 1:
				{
				State = 907;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << FUNC) | (1L << INTERFACE) | (1L << MAP) | (1L << STRUCT) | (1L << CHAN) | (1L << NIL_LIT) | (1L << IDENTIFIER) | (1L << L_PAREN) | (1L << L_BRACKET) | (1L << EXCLAMATION) | (1L << PLUS) | (1L << MINUS) | (1L << CARET) | (1L << STAR) | (1L << AMPERSAND) | (1L << RECEIVE))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (DECIMAL_LIT - 64)) | (1L << (BINARY_LIT - 64)) | (1L << (OCTAL_LIT - 64)) | (1L << (HEX_LIT - 64)) | (1L << (FLOAT_LIT - 64)) | (1L << (IMAGINARY_LIT - 64)) | (1L << (RUNE_LIT - 64)) | (1L << (RAW_STRING_LIT - 64)) | (1L << (INTERPRETED_STRING_LIT - 64)))) != 0)) {
					{
					State = 906;
					expression(0);
					}
				}

				State = 909;
				Match(COLON);
				State = 911;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << FUNC) | (1L << INTERFACE) | (1L << MAP) | (1L << STRUCT) | (1L << CHAN) | (1L << NIL_LIT) | (1L << IDENTIFIER) | (1L << L_PAREN) | (1L << L_BRACKET) | (1L << EXCLAMATION) | (1L << PLUS) | (1L << MINUS) | (1L << CARET) | (1L << STAR) | (1L << AMPERSAND) | (1L << RECEIVE))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (DECIMAL_LIT - 64)) | (1L << (BINARY_LIT - 64)) | (1L << (OCTAL_LIT - 64)) | (1L << (HEX_LIT - 64)) | (1L << (FLOAT_LIT - 64)) | (1L << (IMAGINARY_LIT - 64)) | (1L << (RUNE_LIT - 64)) | (1L << (RAW_STRING_LIT - 64)) | (1L << (INTERPRETED_STRING_LIT - 64)))) != 0)) {
					{
					State = 910;
					expression(0);
					}
				}

				}
				break;
			case 2:
				{
				State = 914;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << FUNC) | (1L << INTERFACE) | (1L << MAP) | (1L << STRUCT) | (1L << CHAN) | (1L << NIL_LIT) | (1L << IDENTIFIER) | (1L << L_PAREN) | (1L << L_BRACKET) | (1L << EXCLAMATION) | (1L << PLUS) | (1L << MINUS) | (1L << CARET) | (1L << STAR) | (1L << AMPERSAND) | (1L << RECEIVE))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (DECIMAL_LIT - 64)) | (1L << (BINARY_LIT - 64)) | (1L << (OCTAL_LIT - 64)) | (1L << (HEX_LIT - 64)) | (1L << (FLOAT_LIT - 64)) | (1L << (IMAGINARY_LIT - 64)) | (1L << (RUNE_LIT - 64)) | (1L << (RAW_STRING_LIT - 64)) | (1L << (INTERPRETED_STRING_LIT - 64)))) != 0)) {
					{
					State = 913;
					expression(0);
					}
				}

				State = 916;
				Match(COLON);
				State = 917;
				expression(0);
				State = 918;
				Match(COLON);
				State = 919;
				expression(0);
				}
				break;
			}
			State = 923;
			Match(R_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeAssertionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT() { return GetToken(GoParser.DOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode L_PAREN() { return GetToken(GoParser.L_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Type_Context type_() {
			return GetRuleContext<Type_Context>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode R_PAREN() { return GetToken(GoParser.R_PAREN, 0); }
		public TypeAssertionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeAssertion; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGoParserListener typedListener = listener as IGoParserListener;
			if (typedListener != null) typedListener.EnterTypeAssertion(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGoParserListener typedListener = listener as IGoParserListener;
			if (typedListener != null) typedListener.ExitTypeAssertion(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGoParserVisitor<TResult> typedVisitor = visitor as IGoParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeAssertion(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeAssertionContext typeAssertion() {
		TypeAssertionContext _localctx = new TypeAssertionContext(Context, State);
		EnterRule(_localctx, 188, RULE_typeAssertion);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 925;
			Match(DOT);
			State = 926;
			Match(L_PAREN);
			State = 927;
			type_();
			State = 928;
			Match(R_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArgumentsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode L_PAREN() { return GetToken(GoParser.L_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode R_PAREN() { return GetToken(GoParser.R_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionListContext expressionList() {
			return GetRuleContext<ExpressionListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NonNamedTypeContext nonNamedType() {
			return GetRuleContext<NonNamedTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ELLIPSIS() { return GetToken(GoParser.ELLIPSIS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(GoParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(GoParser.COMMA, i);
		}
		public ArgumentsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arguments; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGoParserListener typedListener = listener as IGoParserListener;
			if (typedListener != null) typedListener.EnterArguments(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGoParserListener typedListener = listener as IGoParserListener;
			if (typedListener != null) typedListener.ExitArguments(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGoParserVisitor<TResult> typedVisitor = visitor as IGoParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArguments(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArgumentsContext arguments() {
		ArgumentsContext _localctx = new ArgumentsContext(Context, State);
		EnterRule(_localctx, 190, RULE_arguments);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 930;
			Match(L_PAREN);
			State = 945;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << FUNC) | (1L << INTERFACE) | (1L << MAP) | (1L << STRUCT) | (1L << CHAN) | (1L << NIL_LIT) | (1L << IDENTIFIER) | (1L << L_PAREN) | (1L << L_BRACKET) | (1L << EXCLAMATION) | (1L << PLUS) | (1L << MINUS) | (1L << CARET) | (1L << STAR) | (1L << AMPERSAND) | (1L << RECEIVE))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (DECIMAL_LIT - 64)) | (1L << (BINARY_LIT - 64)) | (1L << (OCTAL_LIT - 64)) | (1L << (HEX_LIT - 64)) | (1L << (FLOAT_LIT - 64)) | (1L << (IMAGINARY_LIT - 64)) | (1L << (RUNE_LIT - 64)) | (1L << (RAW_STRING_LIT - 64)) | (1L << (INTERPRETED_STRING_LIT - 64)))) != 0)) {
				{
				State = 937;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,106,Context) ) {
				case 1:
					{
					State = 931;
					expressionList();
					}
					break;
				case 2:
					{
					State = 932;
					nonNamedType();
					State = 935;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,105,Context) ) {
					case 1:
						{
						State = 933;
						Match(COMMA);
						State = 934;
						expressionList();
						}
						break;
					}
					}
					break;
				}
				State = 940;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==ELLIPSIS) {
					{
					State = 939;
					Match(ELLIPSIS);
					}
				}

				State = 943;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==COMMA) {
					{
					State = 942;
					Match(COMMA);
					}
				}

				}
			}

			State = 947;
			Match(R_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MethodExprContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public NonNamedTypeContext nonNamedType() {
			return GetRuleContext<NonNamedTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT() { return GetToken(GoParser.DOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(GoParser.IDENTIFIER, 0); }
		public MethodExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_methodExpr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGoParserListener typedListener = listener as IGoParserListener;
			if (typedListener != null) typedListener.EnterMethodExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGoParserListener typedListener = listener as IGoParserListener;
			if (typedListener != null) typedListener.ExitMethodExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGoParserVisitor<TResult> typedVisitor = visitor as IGoParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMethodExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MethodExprContext methodExpr() {
		MethodExprContext _localctx = new MethodExprContext(Context, State);
		EnterRule(_localctx, 192, RULE_methodExpr);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 949;
			nonNamedType();
			State = 950;
			Match(DOT);
			State = 951;
			Match(IDENTIFIER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReceiverTypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Type_Context type_() {
			return GetRuleContext<Type_Context>(0);
		}
		public ReceiverTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_receiverType; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGoParserListener typedListener = listener as IGoParserListener;
			if (typedListener != null) typedListener.EnterReceiverType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGoParserListener typedListener = listener as IGoParserListener;
			if (typedListener != null) typedListener.ExitReceiverType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGoParserVisitor<TResult> typedVisitor = visitor as IGoParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReceiverType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ReceiverTypeContext receiverType() {
		ReceiverTypeContext _localctx = new ReceiverTypeContext(Context, State);
		EnterRule(_localctx, 194, RULE_receiverType);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 953;
			type_();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EosContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(GoParser.SEMI, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(GoParser.Eof, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EOS() { return GetToken(GoParser.EOS, 0); }
		public EosContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_eos; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGoParserListener typedListener = listener as IGoParserListener;
			if (typedListener != null) typedListener.EnterEos(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGoParserListener typedListener = listener as IGoParserListener;
			if (typedListener != null) typedListener.ExitEos(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGoParserVisitor<TResult> typedVisitor = visitor as IGoParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEos(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EosContext eos() {
		EosContext _localctx = new EosContext(Context, State);
		EnterRule(_localctx, 196, RULE_eos);
		try {
			State = 959;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,110,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 955;
				Match(SEMI);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 956;
				Match(Eof);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 957;
				Match(EOS);
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 958;
				if (!(this.closingBracket())) throw new FailedPredicateException(this, "this.closingBracket()");
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 18: return statementList_sempred((StatementListContext)_localctx, predIndex);
		case 70: return expression_sempred((ExpressionContext)_localctx, predIndex);
		case 71: return primaryExpr_sempred((PrimaryExprContext)_localctx, predIndex);
		case 98: return eos_sempred((EosContext)_localctx, predIndex);
		}
		return true;
	}
	private bool statementList_sempred(StatementListContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return this.closingBracket();
		}
		return true;
	}
	private bool expression_sempred(ExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 1: return Precpred(Context, 5);
		case 2: return Precpred(Context, 4);
		case 3: return Precpred(Context, 3);
		case 4: return Precpred(Context, 2);
		case 5: return Precpred(Context, 1);
		}
		return true;
	}
	private bool primaryExpr_sempred(PrimaryExprContext _localctx, int predIndex) {
		switch (predIndex) {
		case 6: return Precpred(Context, 1);
		}
		return true;
	}
	private bool eos_sempred(EosContext _localctx, int predIndex) {
		switch (predIndex) {
		case 7: return this.closingBracket();
		}
		return true;
	}

	private static int[] _serializedATN = {
		4,1,88,962,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,7,
		7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,7,14,
		2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,7,21,
		2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,7,28,
		2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,2,35,7,35,
		2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,2,42,7,42,
		2,43,7,43,2,44,7,44,2,45,7,45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,
		2,50,7,50,2,51,7,51,2,52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,7,56,
		2,57,7,57,2,58,7,58,2,59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,7,63,
		2,64,7,64,2,65,7,65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,2,70,7,70,
		2,71,7,71,2,72,7,72,2,73,7,73,2,74,7,74,2,75,7,75,2,76,7,76,2,77,7,77,
		2,78,7,78,2,79,7,79,2,80,7,80,2,81,7,81,2,82,7,82,2,83,7,83,2,84,7,84,
		2,85,7,85,2,86,7,86,2,87,7,87,2,88,7,88,2,89,7,89,2,90,7,90,2,91,7,91,
		2,92,7,92,2,93,7,93,2,94,7,94,2,95,7,95,2,96,7,96,2,97,7,97,2,98,7,98,
		1,0,1,0,1,0,1,0,1,0,5,0,204,8,0,10,0,12,0,207,9,0,1,0,1,0,1,0,3,0,212,
		8,0,1,0,1,0,5,0,216,8,0,10,0,12,0,219,9,0,1,0,1,0,1,1,1,1,1,1,1,2,1,2,
		1,2,1,2,1,2,1,2,5,2,232,8,2,10,2,12,2,235,9,2,1,2,3,2,238,8,2,1,3,3,3,
		241,8,3,1,3,1,3,1,4,1,4,1,5,1,5,1,5,3,5,250,8,5,1,6,1,6,1,6,1,6,1,6,1,
		6,5,6,258,8,6,10,6,12,6,261,9,6,1,6,3,6,264,8,6,1,7,1,7,3,7,268,8,7,1,
		7,1,7,3,7,272,8,7,1,8,1,8,1,8,5,8,277,8,8,10,8,12,8,280,9,8,1,9,1,9,1,
		9,5,9,285,8,9,10,9,12,9,288,9,9,1,10,1,10,1,10,1,10,1,10,1,10,5,10,296,
		8,10,10,10,12,10,299,9,10,1,10,3,10,302,8,10,1,11,1,11,3,11,306,8,11,1,
		11,1,11,1,12,1,12,1,12,1,12,3,12,314,8,12,1,13,1,13,1,13,1,13,1,13,3,13,
		321,8,13,1,14,1,14,1,15,1,15,1,15,1,15,1,15,1,15,5,15,331,8,15,10,15,12,
		15,334,9,15,1,15,3,15,337,8,15,1,16,1,16,1,16,1,16,3,16,343,8,16,1,16,
		1,16,3,16,347,8,16,1,17,1,17,3,17,351,8,17,1,17,1,17,1,18,3,18,356,8,18,
		1,18,3,18,359,8,18,1,18,3,18,362,8,18,1,18,1,18,1,18,4,18,367,8,18,11,
		18,12,18,368,1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,
		19,1,19,1,19,1,19,3,19,386,8,19,1,20,1,20,1,20,1,20,1,20,3,20,393,8,20,
		1,21,1,21,1,22,1,22,1,22,1,22,1,23,1,23,1,23,1,24,1,24,1,24,1,24,1,25,
		3,25,409,8,25,1,25,1,25,1,26,1,26,1,26,1,26,1,27,1,27,1,28,1,28,1,28,3,
		28,422,8,28,1,29,1,29,3,29,426,8,29,1,30,1,30,3,30,430,8,30,1,31,1,31,
		3,31,434,8,31,1,32,1,32,1,32,1,33,1,33,1,34,1,34,1,34,1,35,1,35,1,35,1,
		35,1,35,1,35,1,35,1,35,1,35,3,35,453,8,35,1,35,1,35,1,35,1,35,3,35,459,
		8,35,3,35,461,8,35,1,36,1,36,3,36,465,8,36,1,37,1,37,3,37,469,8,37,1,37,
		3,37,472,8,37,1,37,1,37,3,37,476,8,37,3,37,478,8,37,1,37,1,37,5,37,482,
		8,37,10,37,12,37,485,9,37,1,37,1,37,1,38,1,38,1,38,3,38,492,8,38,1,39,
		1,39,1,39,3,39,497,8,39,1,40,1,40,1,40,1,40,1,40,1,40,1,40,1,40,1,40,3,
		40,508,8,40,1,40,1,40,5,40,512,8,40,10,40,12,40,515,9,40,1,40,1,40,1,41,
		1,41,3,41,521,8,41,1,41,1,41,1,41,1,41,1,41,1,41,1,42,1,42,1,42,3,42,532,
		8,42,1,43,1,43,1,43,3,43,537,8,43,1,44,1,44,3,44,541,8,44,1,44,1,44,1,
		44,3,44,546,8,44,5,44,548,8,44,10,44,12,44,551,9,44,1,45,1,45,1,45,5,45,
		556,8,45,10,45,12,45,559,9,45,1,45,1,45,1,46,1,46,1,46,3,46,566,8,46,1,
		47,1,47,1,47,3,47,571,8,47,1,47,3,47,574,8,47,1,48,1,48,1,48,1,48,1,48,
		1,48,3,48,582,8,48,1,48,1,48,1,49,1,49,3,49,588,8,49,1,49,1,49,3,49,592,
		8,49,3,49,594,8,49,1,49,1,49,1,50,3,50,599,8,50,1,50,1,50,3,50,603,8,50,
		1,50,1,50,3,50,607,8,50,1,51,1,51,1,51,1,51,1,51,1,51,3,51,615,8,51,1,
		51,1,51,1,51,1,52,1,52,1,52,1,53,1,53,1,53,1,53,1,53,1,53,3,53,629,8,53,
		1,54,1,54,3,54,633,8,54,1,55,1,55,1,55,1,55,1,55,1,55,1,55,1,55,3,55,643,
		8,55,1,56,1,56,1,56,1,56,1,56,1,57,1,57,1,58,1,58,1,59,1,59,1,59,1,60,
		1,60,1,60,1,60,3,60,661,8,60,1,60,1,60,5,60,665,8,60,10,60,12,60,668,9,
		60,1,60,1,60,1,61,1,61,1,61,1,61,1,62,1,62,1,62,1,62,1,62,1,62,1,63,1,
		63,1,63,1,63,1,63,3,63,687,8,63,1,63,1,63,1,64,1,64,1,64,1,64,1,64,1,64,
		3,64,697,8,64,1,65,1,65,1,65,1,66,1,66,1,66,1,66,3,66,706,8,66,1,67,1,
		67,3,67,710,8,67,1,68,1,68,1,68,1,68,5,68,716,8,68,10,68,12,68,719,9,68,
		1,68,3,68,722,8,68,3,68,724,8,68,1,68,1,68,1,69,3,69,729,8,69,1,69,3,69,
		732,8,69,1,69,1,69,1,70,1,70,1,70,1,70,3,70,740,8,70,1,70,1,70,1,70,1,
		70,1,70,1,70,1,70,1,70,1,70,1,70,1,70,1,70,1,70,1,70,1,70,5,70,757,8,70,
		10,70,12,70,760,9,70,1,71,1,71,1,71,1,71,3,71,766,8,71,1,71,1,71,1,71,
		1,71,1,71,1,71,1,71,3,71,775,8,71,5,71,777,8,71,10,71,12,71,780,9,71,1,
		72,1,72,1,72,1,72,3,72,786,8,72,1,72,1,72,1,73,1,73,1,73,1,73,1,73,3,73,
		795,8,73,1,74,1,74,1,74,1,74,1,74,1,74,3,74,803,8,74,1,75,1,75,1,75,3,
		75,808,8,75,1,76,1,76,1,76,1,76,3,76,814,8,76,1,77,1,77,1,78,1,78,1,79,
		1,79,1,79,1,79,1,80,1,80,1,80,1,81,1,81,1,81,1,81,1,81,1,81,1,81,1,81,
		1,81,3,81,836,8,81,1,82,1,82,1,82,3,82,841,8,82,3,82,843,8,82,1,82,1,82,
		1,83,1,83,1,83,5,83,850,8,83,10,83,12,83,853,9,83,1,84,1,84,1,84,3,84,
		858,8,84,1,84,1,84,1,85,1,85,3,85,864,8,85,1,86,1,86,3,86,868,8,86,1,87,
		1,87,1,87,1,87,1,87,5,87,875,8,87,10,87,12,87,878,9,87,1,87,1,87,1,88,
		1,88,1,88,1,88,3,88,886,8,88,1,88,3,88,889,8,88,1,89,1,89,1,90,3,90,894,
		8,90,1,90,1,90,1,91,1,91,1,91,1,91,1,92,1,92,1,92,1,92,1,93,1,93,3,93,
		908,8,93,1,93,1,93,3,93,912,8,93,1,93,3,93,915,8,93,1,93,1,93,1,93,1,93,
		1,93,3,93,922,8,93,1,93,1,93,1,94,1,94,1,94,1,94,1,94,1,95,1,95,1,95,1,
		95,1,95,3,95,936,8,95,3,95,938,8,95,1,95,3,95,941,8,95,1,95,3,95,944,8,
		95,3,95,946,8,95,1,95,1,95,1,96,1,96,1,96,1,96,1,97,1,97,1,98,1,98,1,98,
		1,98,3,98,960,8,98,1,98,0,2,140,142,99,0,2,4,6,8,10,12,14,16,18,20,22,
		24,26,28,30,32,34,36,38,40,42,44,46,48,50,52,54,56,58,60,62,64,66,68,70,
		72,74,76,78,80,82,84,86,88,90,92,94,96,98,100,102,104,106,108,110,112,
		114,116,118,120,122,124,126,128,130,132,134,136,138,140,142,144,146,148,
		150,152,154,156,158,160,162,164,166,168,170,172,174,176,178,180,182,184,
		186,188,190,192,194,196,0,10,2,0,27,27,38,38,1,0,39,40,2,0,51,56,58,62,
		2,0,36,36,87,87,1,0,57,63,2,0,52,56,61,62,2,0,51,51,58,60,1,0,45,50,2,
		0,64,67,71,72,1,0,78,79,1022,0,198,1,0,0,0,2,222,1,0,0,0,4,225,1,0,0,0,
		6,240,1,0,0,0,8,244,1,0,0,0,10,249,1,0,0,0,12,251,1,0,0,0,14,265,1,0,0,
		0,16,273,1,0,0,0,18,281,1,0,0,0,20,289,1,0,0,0,22,303,1,0,0,0,24,309,1,
		0,0,0,26,315,1,0,0,0,28,322,1,0,0,0,30,324,1,0,0,0,32,338,1,0,0,0,34,348,
		1,0,0,0,36,366,1,0,0,0,38,385,1,0,0,0,40,392,1,0,0,0,42,394,1,0,0,0,44,
		396,1,0,0,0,46,400,1,0,0,0,48,403,1,0,0,0,50,408,1,0,0,0,52,412,1,0,0,
		0,54,416,1,0,0,0,56,418,1,0,0,0,58,423,1,0,0,0,60,427,1,0,0,0,62,431,1,
		0,0,0,64,435,1,0,0,0,66,438,1,0,0,0,68,440,1,0,0,0,70,443,1,0,0,0,72,464,
		1,0,0,0,74,466,1,0,0,0,76,488,1,0,0,0,78,496,1,0,0,0,80,498,1,0,0,0,82,
		520,1,0,0,0,84,528,1,0,0,0,86,536,1,0,0,0,88,540,1,0,0,0,90,552,1,0,0,
		0,92,562,1,0,0,0,94,573,1,0,0,0,96,581,1,0,0,0,98,585,1,0,0,0,100,598,
		1,0,0,0,102,614,1,0,0,0,104,619,1,0,0,0,106,628,1,0,0,0,108,632,1,0,0,
		0,110,642,1,0,0,0,112,644,1,0,0,0,114,649,1,0,0,0,116,651,1,0,0,0,118,
		653,1,0,0,0,120,656,1,0,0,0,122,671,1,0,0,0,124,675,1,0,0,0,126,686,1,
		0,0,0,128,696,1,0,0,0,130,698,1,0,0,0,132,705,1,0,0,0,134,709,1,0,0,0,
		136,711,1,0,0,0,138,728,1,0,0,0,140,739,1,0,0,0,142,765,1,0,0,0,144,781,
		1,0,0,0,146,794,1,0,0,0,148,802,1,0,0,0,150,807,1,0,0,0,152,813,1,0,0,
		0,154,815,1,0,0,0,156,817,1,0,0,0,158,819,1,0,0,0,160,823,1,0,0,0,162,
		835,1,0,0,0,164,837,1,0,0,0,166,846,1,0,0,0,168,857,1,0,0,0,170,863,1,
		0,0,0,172,867,1,0,0,0,174,869,1,0,0,0,176,885,1,0,0,0,178,890,1,0,0,0,
		180,893,1,0,0,0,182,897,1,0,0,0,184,901,1,0,0,0,186,905,1,0,0,0,188,925,
		1,0,0,0,190,930,1,0,0,0,192,949,1,0,0,0,194,953,1,0,0,0,196,959,1,0,0,
		0,198,199,3,2,1,0,199,205,3,196,98,0,200,201,3,4,2,0,201,202,3,196,98,
		0,202,204,1,0,0,0,203,200,1,0,0,0,204,207,1,0,0,0,205,203,1,0,0,0,205,
		206,1,0,0,0,206,217,1,0,0,0,207,205,1,0,0,0,208,212,3,24,12,0,209,212,
		3,26,13,0,210,212,3,10,5,0,211,208,1,0,0,0,211,209,1,0,0,0,211,210,1,0,
		0,0,212,213,1,0,0,0,213,214,3,196,98,0,214,216,1,0,0,0,215,211,1,0,0,0,
		216,219,1,0,0,0,217,215,1,0,0,0,217,218,1,0,0,0,218,220,1,0,0,0,219,217,
		1,0,0,0,220,221,5,0,0,1,221,1,1,0,0,0,222,223,5,14,0,0,223,224,5,27,0,
		0,224,3,1,0,0,0,225,237,5,23,0,0,226,238,3,6,3,0,227,233,5,28,0,0,228,
		229,3,6,3,0,229,230,3,196,98,0,230,232,1,0,0,0,231,228,1,0,0,0,232,235,
		1,0,0,0,233,231,1,0,0,0,233,234,1,0,0,0,234,236,1,0,0,0,235,233,1,0,0,
		0,236,238,5,29,0,0,237,226,1,0,0,0,237,227,1,0,0,0,238,5,1,0,0,0,239,241,
		7,0,0,0,240,239,1,0,0,0,240,241,1,0,0,0,241,242,1,0,0,0,242,243,3,8,4,
		0,243,7,1,0,0,0,244,245,3,178,89,0,245,9,1,0,0,0,246,250,3,12,6,0,247,
		250,3,20,10,0,248,250,3,30,15,0,249,246,1,0,0,0,249,247,1,0,0,0,249,248,
		1,0,0,0,250,11,1,0,0,0,251,263,5,16,0,0,252,264,3,14,7,0,253,259,5,28,
		0,0,254,255,3,14,7,0,255,256,3,196,98,0,256,258,1,0,0,0,257,254,1,0,0,
		0,258,261,1,0,0,0,259,257,1,0,0,0,259,260,1,0,0,0,260,262,1,0,0,0,261,
		259,1,0,0,0,262,264,5,29,0,0,263,252,1,0,0,0,263,253,1,0,0,0,264,13,1,
		0,0,0,265,271,3,16,8,0,266,268,3,106,53,0,267,266,1,0,0,0,267,268,1,0,
		0,0,268,269,1,0,0,0,269,270,5,34,0,0,270,272,3,18,9,0,271,267,1,0,0,0,
		271,272,1,0,0,0,272,15,1,0,0,0,273,278,5,27,0,0,274,275,5,35,0,0,275,277,
		5,27,0,0,276,274,1,0,0,0,277,280,1,0,0,0,278,276,1,0,0,0,278,279,1,0,0,
		0,279,17,1,0,0,0,280,278,1,0,0,0,281,286,3,140,70,0,282,283,5,35,0,0,283,
		285,3,140,70,0,284,282,1,0,0,0,285,288,1,0,0,0,286,284,1,0,0,0,286,287,
		1,0,0,0,287,19,1,0,0,0,288,286,1,0,0,0,289,301,5,20,0,0,290,302,3,22,11,
		0,291,297,5,28,0,0,292,293,3,22,11,0,293,294,3,196,98,0,294,296,1,0,0,
		0,295,292,1,0,0,0,296,299,1,0,0,0,297,295,1,0,0,0,297,298,1,0,0,0,298,
		300,1,0,0,0,299,297,1,0,0,0,300,302,5,29,0,0,301,290,1,0,0,0,301,291,1,
		0,0,0,302,21,1,0,0,0,303,305,5,27,0,0,304,306,5,34,0,0,305,304,1,0,0,0,
		305,306,1,0,0,0,306,307,1,0,0,0,307,308,3,106,53,0,308,23,1,0,0,0,309,
		310,5,3,0,0,310,311,5,27,0,0,311,313,3,132,66,0,312,314,3,34,17,0,313,
		312,1,0,0,0,313,314,1,0,0,0,314,25,1,0,0,0,315,316,5,3,0,0,316,317,3,28,
		14,0,317,318,5,27,0,0,318,320,3,132,66,0,319,321,3,34,17,0,320,319,1,0,
		0,0,320,321,1,0,0,0,321,27,1,0,0,0,322,323,3,136,68,0,323,29,1,0,0,0,324,
		336,5,25,0,0,325,337,3,32,16,0,326,332,5,28,0,0,327,328,3,32,16,0,328,
		329,3,196,98,0,329,331,1,0,0,0,330,327,1,0,0,0,331,334,1,0,0,0,332,330,
		1,0,0,0,332,333,1,0,0,0,333,335,1,0,0,0,334,332,1,0,0,0,335,337,5,29,0,
		0,336,325,1,0,0,0,336,326,1,0,0,0,337,31,1,0,0,0,338,346,3,16,8,0,339,
		342,3,106,53,0,340,341,5,34,0,0,341,343,3,18,9,0,342,340,1,0,0,0,342,343,
		1,0,0,0,343,347,1,0,0,0,344,345,5,34,0,0,345,347,3,18,9,0,346,339,1,0,
		0,0,346,344,1,0,0,0,347,33,1,0,0,0,348,350,5,30,0,0,349,351,3,36,18,0,
		350,349,1,0,0,0,350,351,1,0,0,0,351,352,1,0,0,0,352,353,5,31,0,0,353,35,
		1,0,0,0,354,356,5,36,0,0,355,354,1,0,0,0,355,356,1,0,0,0,356,362,1,0,0,
		0,357,359,5,87,0,0,358,357,1,0,0,0,358,359,1,0,0,0,359,362,1,0,0,0,360,
		362,4,18,0,0,361,355,1,0,0,0,361,358,1,0,0,0,361,360,1,0,0,0,362,363,1,
		0,0,0,363,364,3,38,19,0,364,365,3,196,98,0,365,367,1,0,0,0,366,361,1,0,
		0,0,367,368,1,0,0,0,368,366,1,0,0,0,368,369,1,0,0,0,369,37,1,0,0,0,370,
		386,3,10,5,0,371,386,3,56,28,0,372,386,3,40,20,0,373,386,3,104,52,0,374,
		386,3,58,29,0,375,386,3,60,30,0,376,386,3,62,31,0,377,386,3,64,32,0,378,
		386,3,66,33,0,379,386,3,34,17,0,380,386,3,70,35,0,381,386,3,72,36,0,382,
		386,3,90,45,0,383,386,3,98,49,0,384,386,3,68,34,0,385,370,1,0,0,0,385,
		371,1,0,0,0,385,372,1,0,0,0,385,373,1,0,0,0,385,374,1,0,0,0,385,375,1,
		0,0,0,385,376,1,0,0,0,385,377,1,0,0,0,385,378,1,0,0,0,385,379,1,0,0,0,
		385,380,1,0,0,0,385,381,1,0,0,0,385,382,1,0,0,0,385,383,1,0,0,0,385,384,
		1,0,0,0,386,39,1,0,0,0,387,393,3,44,22,0,388,393,3,46,23,0,389,393,3,48,
		24,0,390,393,3,42,21,0,391,393,3,52,26,0,392,387,1,0,0,0,392,388,1,0,0,
		0,392,389,1,0,0,0,392,390,1,0,0,0,392,391,1,0,0,0,393,41,1,0,0,0,394,395,
		3,140,70,0,395,43,1,0,0,0,396,397,3,140,70,0,397,398,5,63,0,0,398,399,
		3,140,70,0,399,45,1,0,0,0,400,401,3,140,70,0,401,402,7,1,0,0,402,47,1,
		0,0,0,403,404,3,18,9,0,404,405,3,50,25,0,405,406,3,18,9,0,406,49,1,0,0,
		0,407,409,7,2,0,0,408,407,1,0,0,0,408,409,1,0,0,0,409,410,1,0,0,0,410,
		411,5,34,0,0,411,51,1,0,0,0,412,413,3,16,8,0,413,414,5,41,0,0,414,415,
		3,18,9,0,415,53,1,0,0,0,416,417,7,3,0,0,417,55,1,0,0,0,418,419,5,27,0,
		0,419,421,5,37,0,0,420,422,3,38,19,0,421,420,1,0,0,0,421,422,1,0,0,0,422,
		57,1,0,0,0,423,425,5,24,0,0,424,426,3,18,9,0,425,424,1,0,0,0,425,426,1,
		0,0,0,426,59,1,0,0,0,427,429,5,1,0,0,428,430,5,27,0,0,429,428,1,0,0,0,
		429,430,1,0,0,0,430,61,1,0,0,0,431,433,5,21,0,0,432,434,5,27,0,0,433,432,
		1,0,0,0,433,434,1,0,0,0,434,63,1,0,0,0,435,436,5,13,0,0,436,437,5,27,0,
		0,437,65,1,0,0,0,438,439,5,17,0,0,439,67,1,0,0,0,440,441,5,7,0,0,441,442,
		3,140,70,0,442,69,1,0,0,0,443,452,5,18,0,0,444,453,3,140,70,0,445,446,
		3,196,98,0,446,447,3,140,70,0,447,453,1,0,0,0,448,449,3,40,20,0,449,450,
		3,196,98,0,450,451,3,140,70,0,451,453,1,0,0,0,452,444,1,0,0,0,452,445,
		1,0,0,0,452,448,1,0,0,0,453,454,1,0,0,0,454,460,3,34,17,0,455,458,5,12,
		0,0,456,459,3,70,35,0,457,459,3,34,17,0,458,456,1,0,0,0,458,457,1,0,0,
		0,459,461,1,0,0,0,460,455,1,0,0,0,460,461,1,0,0,0,461,71,1,0,0,0,462,465,
		3,74,37,0,463,465,3,80,40,0,464,462,1,0,0,0,464,463,1,0,0,0,465,73,1,0,
		0,0,466,477,5,15,0,0,467,469,3,140,70,0,468,467,1,0,0,0,468,469,1,0,0,
		0,469,478,1,0,0,0,470,472,3,40,20,0,471,470,1,0,0,0,471,472,1,0,0,0,472,
		473,1,0,0,0,473,475,3,196,98,0,474,476,3,140,70,0,475,474,1,0,0,0,475,
		476,1,0,0,0,476,478,1,0,0,0,477,468,1,0,0,0,477,471,1,0,0,0,478,479,1,
		0,0,0,479,483,5,30,0,0,480,482,3,76,38,0,481,480,1,0,0,0,482,485,1,0,0,
		0,483,481,1,0,0,0,483,484,1,0,0,0,484,486,1,0,0,0,485,483,1,0,0,0,486,
		487,5,31,0,0,487,75,1,0,0,0,488,489,3,78,39,0,489,491,5,37,0,0,490,492,
		3,36,18,0,491,490,1,0,0,0,491,492,1,0,0,0,492,77,1,0,0,0,493,494,5,6,0,
		0,494,497,3,18,9,0,495,497,5,2,0,0,496,493,1,0,0,0,496,495,1,0,0,0,497,
		79,1,0,0,0,498,507,5,15,0,0,499,508,3,82,41,0,500,501,3,196,98,0,501,502,
		3,82,41,0,502,508,1,0,0,0,503,504,3,40,20,0,504,505,3,196,98,0,505,506,
		3,82,41,0,506,508,1,0,0,0,507,499,1,0,0,0,507,500,1,0,0,0,507,503,1,0,
		0,0,508,509,1,0,0,0,509,513,5,30,0,0,510,512,3,84,42,0,511,510,1,0,0,0,
		512,515,1,0,0,0,513,511,1,0,0,0,513,514,1,0,0,0,514,516,1,0,0,0,515,513,
		1,0,0,0,516,517,5,31,0,0,517,81,1,0,0,0,518,519,5,27,0,0,519,521,5,41,
		0,0,520,518,1,0,0,0,520,521,1,0,0,0,521,522,1,0,0,0,522,523,3,142,71,0,
		523,524,5,38,0,0,524,525,5,28,0,0,525,526,5,20,0,0,526,527,5,29,0,0,527,
		83,1,0,0,0,528,529,3,86,43,0,529,531,5,37,0,0,530,532,3,36,18,0,531,530,
		1,0,0,0,531,532,1,0,0,0,532,85,1,0,0,0,533,534,5,6,0,0,534,537,3,88,44,
		0,535,537,5,2,0,0,536,533,1,0,0,0,536,535,1,0,0,0,537,87,1,0,0,0,538,541,
		3,106,53,0,539,541,5,26,0,0,540,538,1,0,0,0,540,539,1,0,0,0,541,549,1,
		0,0,0,542,545,5,35,0,0,543,546,3,106,53,0,544,546,5,26,0,0,545,543,1,0,
		0,0,545,544,1,0,0,0,546,548,1,0,0,0,547,542,1,0,0,0,548,551,1,0,0,0,549,
		547,1,0,0,0,549,550,1,0,0,0,550,89,1,0,0,0,551,549,1,0,0,0,552,553,5,5,
		0,0,553,557,5,30,0,0,554,556,3,92,46,0,555,554,1,0,0,0,556,559,1,0,0,0,
		557,555,1,0,0,0,557,558,1,0,0,0,558,560,1,0,0,0,559,557,1,0,0,0,560,561,
		5,31,0,0,561,91,1,0,0,0,562,563,3,94,47,0,563,565,5,37,0,0,564,566,3,36,
		18,0,565,564,1,0,0,0,565,566,1,0,0,0,566,93,1,0,0,0,567,570,5,6,0,0,568,
		571,3,44,22,0,569,571,3,96,48,0,570,568,1,0,0,0,570,569,1,0,0,0,571,574,
		1,0,0,0,572,574,5,2,0,0,573,567,1,0,0,0,573,572,1,0,0,0,574,95,1,0,0,0,
		575,576,3,18,9,0,576,577,5,34,0,0,577,582,1,0,0,0,578,579,3,16,8,0,579,
		580,5,41,0,0,580,582,1,0,0,0,581,575,1,0,0,0,581,578,1,0,0,0,581,582,1,
		0,0,0,582,583,1,0,0,0,583,584,3,140,70,0,584,97,1,0,0,0,585,593,5,22,0,
		0,586,588,3,140,70,0,587,586,1,0,0,0,587,588,1,0,0,0,588,594,1,0,0,0,589,
		594,3,100,50,0,590,592,3,102,51,0,591,590,1,0,0,0,591,592,1,0,0,0,592,
		594,1,0,0,0,593,587,1,0,0,0,593,589,1,0,0,0,593,591,1,0,0,0,594,595,1,
		0,0,0,595,596,3,34,17,0,596,99,1,0,0,0,597,599,3,40,20,0,598,597,1,0,0,
		0,598,599,1,0,0,0,599,600,1,0,0,0,600,602,3,196,98,0,601,603,3,140,70,
		0,602,601,1,0,0,0,602,603,1,0,0,0,603,604,1,0,0,0,604,606,3,196,98,0,605,
		607,3,40,20,0,606,605,1,0,0,0,606,607,1,0,0,0,607,101,1,0,0,0,608,609,
		3,18,9,0,609,610,5,34,0,0,610,615,1,0,0,0,611,612,3,16,8,0,612,613,5,41,
		0,0,613,615,1,0,0,0,614,608,1,0,0,0,614,611,1,0,0,0,614,615,1,0,0,0,615,
		616,1,0,0,0,616,617,5,19,0,0,617,618,3,140,70,0,618,103,1,0,0,0,619,620,
		5,8,0,0,620,621,3,140,70,0,621,105,1,0,0,0,622,629,3,108,54,0,623,629,
		3,110,55,0,624,625,5,28,0,0,625,626,3,106,53,0,626,627,5,29,0,0,627,629,
		1,0,0,0,628,622,1,0,0,0,628,623,1,0,0,0,628,624,1,0,0,0,629,107,1,0,0,
		0,630,633,3,158,79,0,631,633,5,27,0,0,632,630,1,0,0,0,632,631,1,0,0,0,
		633,109,1,0,0,0,634,643,3,112,56,0,635,643,3,174,87,0,636,643,3,118,59,
		0,637,643,3,130,65,0,638,643,3,120,60,0,639,643,3,122,61,0,640,643,3,124,
		62,0,641,643,3,126,63,0,642,634,1,0,0,0,642,635,1,0,0,0,642,636,1,0,0,
		0,642,637,1,0,0,0,642,638,1,0,0,0,642,639,1,0,0,0,642,640,1,0,0,0,642,
		641,1,0,0,0,643,111,1,0,0,0,644,645,5,32,0,0,645,646,3,114,57,0,646,647,
		5,33,0,0,647,648,3,116,58,0,648,113,1,0,0,0,649,650,3,140,70,0,650,115,
		1,0,0,0,651,652,3,106,53,0,652,117,1,0,0,0,653,654,5,61,0,0,654,655,3,
		106,53,0,655,119,1,0,0,0,656,657,5,4,0,0,657,666,5,30,0,0,658,661,3,128,
		64,0,659,661,3,108,54,0,660,658,1,0,0,0,660,659,1,0,0,0,661,662,1,0,0,
		0,662,663,3,196,98,0,663,665,1,0,0,0,664,660,1,0,0,0,665,668,1,0,0,0,666,
		664,1,0,0,0,666,667,1,0,0,0,667,669,1,0,0,0,668,666,1,0,0,0,669,670,5,
		31,0,0,670,121,1,0,0,0,671,672,5,32,0,0,672,673,5,33,0,0,673,674,3,116,
		58,0,674,123,1,0,0,0,675,676,5,9,0,0,676,677,5,32,0,0,677,678,3,106,53,
		0,678,679,5,33,0,0,679,680,3,116,58,0,680,125,1,0,0,0,681,687,5,11,0,0,
		682,683,5,11,0,0,683,687,5,63,0,0,684,685,5,63,0,0,685,687,5,11,0,0,686,
		681,1,0,0,0,686,682,1,0,0,0,686,684,1,0,0,0,687,688,1,0,0,0,688,689,3,
		116,58,0,689,127,1,0,0,0,690,691,5,27,0,0,691,692,3,136,68,0,692,693,3,
		134,67,0,693,697,1,0,0,0,694,695,5,27,0,0,695,697,3,136,68,0,696,690,1,
		0,0,0,696,694,1,0,0,0,697,129,1,0,0,0,698,699,5,3,0,0,699,700,3,132,66,
		0,700,131,1,0,0,0,701,702,3,136,68,0,702,703,3,134,67,0,703,706,1,0,0,
		0,704,706,3,136,68,0,705,701,1,0,0,0,705,704,1,0,0,0,706,133,1,0,0,0,707,
		710,3,136,68,0,708,710,3,106,53,0,709,707,1,0,0,0,709,708,1,0,0,0,710,
		135,1,0,0,0,711,723,5,28,0,0,712,717,3,138,69,0,713,714,5,35,0,0,714,716,
		3,138,69,0,715,713,1,0,0,0,716,719,1,0,0,0,717,715,1,0,0,0,717,718,1,0,
		0,0,718,721,1,0,0,0,719,717,1,0,0,0,720,722,5,35,0,0,721,720,1,0,0,0,721,
		722,1,0,0,0,722,724,1,0,0,0,723,712,1,0,0,0,723,724,1,0,0,0,724,725,1,
		0,0,0,725,726,5,29,0,0,726,137,1,0,0,0,727,729,3,16,8,0,728,727,1,0,0,
		0,728,729,1,0,0,0,729,731,1,0,0,0,730,732,5,42,0,0,731,730,1,0,0,0,731,
		732,1,0,0,0,732,733,1,0,0,0,733,734,3,106,53,0,734,139,1,0,0,0,735,736,
		6,70,-1,0,736,740,3,142,71,0,737,738,7,4,0,0,738,740,3,140,70,6,739,735,
		1,0,0,0,739,737,1,0,0,0,740,758,1,0,0,0,741,742,10,5,0,0,742,743,7,5,0,
		0,743,757,3,140,70,6,744,745,10,4,0,0,745,746,7,6,0,0,746,757,3,140,70,
		5,747,748,10,3,0,0,748,749,7,7,0,0,749,757,3,140,70,4,750,751,10,2,0,0,
		751,752,5,44,0,0,752,757,3,140,70,3,753,754,10,1,0,0,754,755,5,43,0,0,
		755,757,3,140,70,2,756,741,1,0,0,0,756,744,1,0,0,0,756,747,1,0,0,0,756,
		750,1,0,0,0,756,753,1,0,0,0,757,760,1,0,0,0,758,756,1,0,0,0,758,759,1,
		0,0,0,759,141,1,0,0,0,760,758,1,0,0,0,761,762,6,71,-1,0,762,766,3,148,
		74,0,763,766,3,144,72,0,764,766,3,192,96,0,765,761,1,0,0,0,765,763,1,0,
		0,0,765,764,1,0,0,0,766,778,1,0,0,0,767,774,10,1,0,0,768,769,5,38,0,0,
		769,775,5,27,0,0,770,775,3,184,92,0,771,775,3,186,93,0,772,775,3,188,94,
		0,773,775,3,190,95,0,774,768,1,0,0,0,774,770,1,0,0,0,774,771,1,0,0,0,774,
		772,1,0,0,0,774,773,1,0,0,0,775,777,1,0,0,0,776,767,1,0,0,0,777,780,1,
		0,0,0,778,776,1,0,0,0,778,779,1,0,0,0,779,143,1,0,0,0,780,778,1,0,0,0,
		781,782,3,146,73,0,782,783,5,28,0,0,783,785,3,140,70,0,784,786,5,35,0,
		0,785,784,1,0,0,0,785,786,1,0,0,0,786,787,1,0,0,0,787,788,5,29,0,0,788,
		145,1,0,0,0,789,795,3,110,55,0,790,791,5,28,0,0,791,792,3,146,73,0,792,
		793,5,29,0,0,793,795,1,0,0,0,794,789,1,0,0,0,794,790,1,0,0,0,795,147,1,
		0,0,0,796,803,3,150,75,0,797,803,3,156,78,0,798,799,5,28,0,0,799,800,3,
		140,70,0,800,801,5,29,0,0,801,803,1,0,0,0,802,796,1,0,0,0,802,797,1,0,
		0,0,802,798,1,0,0,0,803,149,1,0,0,0,804,808,3,152,76,0,805,808,3,160,80,
		0,806,808,3,182,91,0,807,804,1,0,0,0,807,805,1,0,0,0,807,806,1,0,0,0,808,
		151,1,0,0,0,809,814,5,26,0,0,810,814,3,154,77,0,811,814,3,178,89,0,812,
		814,5,68,0,0,813,809,1,0,0,0,813,810,1,0,0,0,813,811,1,0,0,0,813,812,1,
		0,0,0,814,153,1,0,0,0,815,816,7,8,0,0,816,155,1,0,0,0,817,818,5,27,0,0,
		818,157,1,0,0,0,819,820,5,27,0,0,820,821,5,38,0,0,821,822,5,27,0,0,822,
		159,1,0,0,0,823,824,3,162,81,0,824,825,3,164,82,0,825,161,1,0,0,0,826,
		836,3,174,87,0,827,836,3,112,56,0,828,829,5,32,0,0,829,830,5,42,0,0,830,
		831,5,33,0,0,831,836,3,116,58,0,832,836,3,122,61,0,833,836,3,124,62,0,
		834,836,3,108,54,0,835,826,1,0,0,0,835,827,1,0,0,0,835,828,1,0,0,0,835,
		832,1,0,0,0,835,833,1,0,0,0,835,834,1,0,0,0,836,163,1,0,0,0,837,842,5,
		30,0,0,838,840,3,166,83,0,839,841,5,35,0,0,840,839,1,0,0,0,840,841,1,0,
		0,0,841,843,1,0,0,0,842,838,1,0,0,0,842,843,1,0,0,0,843,844,1,0,0,0,844,
		845,5,31,0,0,845,165,1,0,0,0,846,851,3,168,84,0,847,848,5,35,0,0,848,850,
		3,168,84,0,849,847,1,0,0,0,850,853,1,0,0,0,851,849,1,0,0,0,851,852,1,0,
		0,0,852,167,1,0,0,0,853,851,1,0,0,0,854,855,3,170,85,0,855,856,5,37,0,
		0,856,858,1,0,0,0,857,854,1,0,0,0,857,858,1,0,0,0,858,859,1,0,0,0,859,
		860,3,172,86,0,860,169,1,0,0,0,861,864,3,140,70,0,862,864,3,164,82,0,863,
		861,1,0,0,0,863,862,1,0,0,0,864,171,1,0,0,0,865,868,3,140,70,0,866,868,
		3,164,82,0,867,865,1,0,0,0,867,866,1,0,0,0,868,173,1,0,0,0,869,870,5,10,
		0,0,870,876,5,30,0,0,871,872,3,176,88,0,872,873,3,196,98,0,873,875,1,0,
		0,0,874,871,1,0,0,0,875,878,1,0,0,0,876,874,1,0,0,0,876,877,1,0,0,0,877,
		879,1,0,0,0,878,876,1,0,0,0,879,880,5,31,0,0,880,175,1,0,0,0,881,882,3,
		16,8,0,882,883,3,106,53,0,883,886,1,0,0,0,884,886,3,180,90,0,885,881,1,
		0,0,0,885,884,1,0,0,0,886,888,1,0,0,0,887,889,3,178,89,0,888,887,1,0,0,
		0,888,889,1,0,0,0,889,177,1,0,0,0,890,891,7,9,0,0,891,179,1,0,0,0,892,
		894,5,61,0,0,893,892,1,0,0,0,893,894,1,0,0,0,894,895,1,0,0,0,895,896,3,
		108,54,0,896,181,1,0,0,0,897,898,5,3,0,0,898,899,3,132,66,0,899,900,3,
		34,17,0,900,183,1,0,0,0,901,902,5,32,0,0,902,903,3,140,70,0,903,904,5,
		33,0,0,904,185,1,0,0,0,905,921,5,32,0,0,906,908,3,140,70,0,907,906,1,0,
		0,0,907,908,1,0,0,0,908,909,1,0,0,0,909,911,5,37,0,0,910,912,3,140,70,
		0,911,910,1,0,0,0,911,912,1,0,0,0,912,922,1,0,0,0,913,915,3,140,70,0,914,
		913,1,0,0,0,914,915,1,0,0,0,915,916,1,0,0,0,916,917,5,37,0,0,917,918,3,
		140,70,0,918,919,5,37,0,0,919,920,3,140,70,0,920,922,1,0,0,0,921,907,1,
		0,0,0,921,914,1,0,0,0,922,923,1,0,0,0,923,924,5,33,0,0,924,187,1,0,0,0,
		925,926,5,38,0,0,926,927,5,28,0,0,927,928,3,106,53,0,928,929,5,29,0,0,
		929,189,1,0,0,0,930,945,5,28,0,0,931,938,3,18,9,0,932,935,3,146,73,0,933,
		934,5,35,0,0,934,936,3,18,9,0,935,933,1,0,0,0,935,936,1,0,0,0,936,938,
		1,0,0,0,937,931,1,0,0,0,937,932,1,0,0,0,938,940,1,0,0,0,939,941,5,42,0,
		0,940,939,1,0,0,0,940,941,1,0,0,0,941,943,1,0,0,0,942,944,5,35,0,0,943,
		942,1,0,0,0,943,944,1,0,0,0,944,946,1,0,0,0,945,937,1,0,0,0,945,946,1,
		0,0,0,946,947,1,0,0,0,947,948,5,29,0,0,948,191,1,0,0,0,949,950,3,146,73,
		0,950,951,5,38,0,0,951,952,5,27,0,0,952,193,1,0,0,0,953,954,3,106,53,0,
		954,195,1,0,0,0,955,960,5,36,0,0,956,960,5,0,0,1,957,960,5,87,0,0,958,
		960,4,98,7,0,959,955,1,0,0,0,959,956,1,0,0,0,959,957,1,0,0,0,959,958,1,
		0,0,0,960,197,1,0,0,0,111,205,211,217,233,237,240,249,259,263,267,271,
		278,286,297,301,305,313,320,332,336,342,346,350,355,358,361,368,385,392,
		408,421,425,429,433,452,458,460,464,468,471,475,477,483,491,496,507,513,
		520,531,536,540,545,549,557,565,570,573,581,587,591,593,598,602,606,614,
		628,632,642,660,666,686,696,705,709,717,721,723,728,731,739,756,758,765,
		774,778,785,794,802,807,813,835,840,842,851,857,863,867,876,885,888,893,
		907,911,914,921,935,937,940,943,945,959
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
