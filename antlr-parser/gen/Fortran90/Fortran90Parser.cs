//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.12.0
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from C:/Users/john/Desktop/Primitive-Tools/PARSER/antlr-parser/antlr-parser/grammars\Fortran90Parser.g4 by ANTLR 4.12.0

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.12.0")]
[System.CLSCompliant(false)]
public partial class Fortran90Parser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		RECURSIVE=1, CONTAINS=2, MODULE=3, ENDMODULE=4, PROGRAM=5, ENTRY=6, FUNCTION=7, 
		BLOCK=8, SUBROUTINE=9, ENDINTERFACE=10, PROCEDURE=11, END=12, DIMENSION=13, 
		TARGET=14, ALLOCATABLE=15, OPTIONAL=16, NAMELIST=17, INTENT=18, IN=19, 
		OUT=20, INOUT=21, OPERATOR=22, USE=23, ONLY=24, IMPLIEDT=25, ASSIGNMENT=26, 
		DOP=27, OP=28, DOUBLEPRECISION=29, DOUBLECOLON=30, ASSIGNSTMT=31, COMMON=32, 
		ELSEWHERE=33, REAL=34, EQUIVALENCE=35, BLOCKDATA=36, POINTER=37, PRIVATE=38, 
		SEQUENCE=39, ACCESSSPEC=40, IMPLICIT=41, NONE=42, CHARACTER=43, PARAMETER=44, 
		EXTERNAL=45, INTRINSIC=46, SAVE=47, DATA=48, GO=49, GOTO=50, IF=51, THEN=52, 
		ELSE=53, ENDIF=54, RESULT=55, ELSEIF=56, DO=57, INCLUDE=58, CONTINUE=59, 
		ENDWHERE=60, WHERE=61, ENDSELECT=62, SELECTCASE=63, SELECT=64, CASE=65, 
		DEFAULT=66, DIRECT=67, STOP=68, REC=69, ENDDO=70, PAUSE=71, WRITE=72, 
		READ=73, PRINT=74, OPEN=75, FMT=76, UNIT=77, PAD=78, ACTION=79, DELIM=80, 
		IOLENGTH=81, READWRITE=82, ERR=83, SIZE=84, ADVANCE=85, NML=86, IOSTAT=87, 
		FORMAT=88, LET=89, CALL=90, RETURN=91, CLOSE=92, DOUBLE=93, IOSTART=94, 
		SEQUENTIAL=95, LABEL=96, FILE=97, STATUS=98, ACCESS=99, POSITION=100, 
		FORM=101, RECL=102, EXIST=103, OPENED=104, NUMBER=105, NAMED=106, NAME_=107, 
		FORMATTED=108, UNFORMATTED=109, NEXTREC=110, INQUIRE=111, BACKSPACE=112, 
		ENDFILE=113, REWIND=114, ENDBLOCKDATA=115, ENDBLOCK=116, KIND=117, LEN=118, 
		WS=119, COMMENT=120, DOLLAR=121, COMMA=122, LPAREN=123, PCT=124, WHILE=125, 
		ALLOCATE=126, STAT=127, RPAREN=128, COLON=129, ASSIGN=130, MINUS=131, 
		PLUS=132, DIV=133, FORMATSEP=134, POWER=135, LNOT=136, LAND=137, LOR=138, 
		EQV=139, NEQV=140, XOR=141, EOR=142, LT=143, LE=144, GT=145, GE=146, NE=147, 
		EQ=148, TRUE=149, FALSE=150, XCON=151, PCON=152, FCON=153, CCON=154, HOLLERITH=155, 
		CONCATOP=156, CTRLDIRECT=157, CTRLREC=158, TO=159, SUBPROGRAMBLOCK=160, 
		DOBLOCK=161, AIF=162, THENBLOCK=163, ELSEBLOCK=164, CODEROOT=165, COMPLEX=166, 
		PRECISION=167, INTEGER=168, LOGICAL=169, UNDERSCORE=170, OBRACKETSLASH=171, 
		DOT=172, CBRACKETSLASH=173, ZCON=174, BCON=175, OCON=176, SCON=177, RDCON=178, 
		DEALLOCATE=179, NULLIFY=180, CYCLE=181, ENDTYPE=182, INTERFACE=183, SPOFF=184, 
		SPON=185, ICON=186, TYPE=187, NAME=188, EXIT=189, BLANK=190, ALPHANUMERIC_CHARACTER=191, 
		STAR=192, STRINGLITERAL=193, EOL=194, LINECONT=195;
	public const int
		RULE_program = 0, RULE_executableProgram = 1, RULE_programUnit = 2, RULE_mainProgram = 3, 
		RULE_programStmt = 4, RULE_mainRange = 5, RULE_bodyPlusInternals = 6, 
		RULE_internalSubprogram = 7, RULE_specificationPartConstruct = 8, RULE_useStmt = 9, 
		RULE_onlyList = 10, RULE_onlyStmt = 11, RULE_renameList = 12, RULE_rename = 13, 
		RULE_useName = 14, RULE_parameterStmt = 15, RULE_namedConstantDefList = 16, 
		RULE_namedConstantDef = 17, RULE_endProgramStmt = 18, RULE_blockDataSubprogram = 19, 
		RULE_blockDataStmt = 20, RULE_blockDataBody = 21, RULE_blockDataBodyConstruct = 22, 
		RULE_endBlockDataStmt = 23, RULE_formatStmt = 24, RULE_fmtSpec = 25, RULE_formatedit = 26, 
		RULE_editElement = 27, RULE_mislexedFcon = 28, RULE_module = 29, RULE_endModuleStmt = 30, 
		RULE_entryStmt = 31, RULE_subroutineParList = 32, RULE_subroutinePars = 33, 
		RULE_subroutinePar = 34, RULE_declarationConstruct = 35, RULE_specificationStmt = 36, 
		RULE_targetStmt = 37, RULE_targetObjectList = 38, RULE_targetObject = 39, 
		RULE_pointerStmt = 40, RULE_pointerStmtObjectList = 41, RULE_pointerStmtObject = 42, 
		RULE_optionalStmt = 43, RULE_optionalParList = 44, RULE_optionalPar = 45, 
		RULE_namelistStmt = 46, RULE_namelistGroups = 47, RULE_namelistGroupName = 48, 
		RULE_namelistGroupObject = 49, RULE_intentStmt = 50, RULE_intentParList = 51, 
		RULE_intentPar = 52, RULE_dummyArgName = 53, RULE_intentSpec = 54, RULE_allocatableStmt = 55, 
		RULE_arrayAllocationList = 56, RULE_arrayAllocation = 57, RULE_arrayName = 58, 
		RULE_accessStmt = 59, RULE_accessIdList = 60, RULE_accessId = 61, RULE_genericName = 62, 
		RULE_saveStmt = 63, RULE_savedEntityList = 64, RULE_savedEntity = 65, 
		RULE_savedCommonBlock = 66, RULE_intrinsicStmt = 67, RULE_intrinsicList = 68, 
		RULE_intrinsicProcedureName = 69, RULE_externalStmt = 70, RULE_externalNameList = 71, 
		RULE_externalName = 72, RULE_equivalenceStmt = 73, RULE_equivalenceSetList = 74, 
		RULE_equivalenceSet = 75, RULE_equivalenceObject = 76, RULE_equivalenceObjectList = 77, 
		RULE_dimensionStmt = 78, RULE_arrayDeclaratorList = 79, RULE_commonStmt = 80, 
		RULE_comlist = 81, RULE_commonBlockObject = 82, RULE_arrayDeclarator = 83, 
		RULE_comblock = 84, RULE_commonBlockName = 85, RULE_typeDeclarationStmt = 86, 
		RULE_attrSpecSeq = 87, RULE_attrSpec = 88, RULE_entityDeclList = 89, RULE_entityDecl = 90, 
		RULE_objectName = 91, RULE_arraySpec = 92, RULE_assumedShapeSpecList = 93, 
		RULE_assumedShapeSpec = 94, RULE_assumedSizeSpec = 95, RULE_interfaceBlock = 96, 
		RULE_endInterfaceStmt = 97, RULE_interfaceStmt = 98, RULE_genericSpec = 99, 
		RULE_definedOperator = 100, RULE_interfaceBlockBody = 101, RULE_interfaceBodyPartConstruct = 102, 
		RULE_moduleProcedureStmt = 103, RULE_procedureNameList = 104, RULE_procedureName = 105, 
		RULE_interfaceBody = 106, RULE_subroutineInterfaceRange = 107, RULE_endSubroutineStmt = 108, 
		RULE_recursive = 109, RULE_functionPrefix = 110, RULE_functionInterfaceRange = 111, 
		RULE_functionParList = 112, RULE_functionPars = 113, RULE_functionPar = 114, 
		RULE_subprogramInterfaceBody = 115, RULE_endFunctionStmt = 116, RULE_derivedTypeDef = 117, 
		RULE_endTypeStmt = 118, RULE_derivedTypeStmt = 119, RULE_derivedTypeBody = 120, 
		RULE_derivedTypeBodyConstruct = 121, RULE_privateSequenceStmt = 122, RULE_componentDefStmt = 123, 
		RULE_componentDeclList = 124, RULE_componentDecl = 125, RULE_componentName = 126, 
		RULE_componentAttrSpecList = 127, RULE_componentAttrSpec = 128, RULE_componentArraySpec = 129, 
		RULE_explicitShapeSpecList = 130, RULE_explicitShapeSpec = 131, RULE_lowerBound = 132, 
		RULE_upperBound = 133, RULE_deferredShapeSpecList = 134, RULE_deferredShapeSpec = 135, 
		RULE_typeSpec = 136, RULE_kindSelector = 137, RULE_typeName = 138, RULE_charSelector = 139, 
		RULE_lengthSelector = 140, RULE_charLength = 141, RULE_constant = 142, 
		RULE_bozLiteralConstant = 143, RULE_structureConstructor = 144, RULE_exprList = 145, 
		RULE_namedConstantUse = 146, RULE_typeParamValue = 147, RULE_moduleStmt = 148, 
		RULE_moduleName = 149, RULE_ident = 150, RULE_moduleBody = 151, RULE_moduleSubprogramPartConstruct = 152, 
		RULE_containsStmt = 153, RULE_moduleSubprogram = 154, RULE_functionSubprogram = 155, 
		RULE_functionName = 156, RULE_functionRange = 157, RULE_body = 158, RULE_bodyConstruct = 159, 
		RULE_executableConstruct = 160, RULE_whereConstruct = 161, RULE_elseWhere = 162, 
		RULE_elsewhereStmt = 163, RULE_endWhereStmt = 164, RULE_where = 165, RULE_whereConstructStmt = 166, 
		RULE_maskExpr = 167, RULE_caseConstruct = 168, RULE_selectCaseRange = 169, 
		RULE_endSelectStmt = 170, RULE_selectCaseBody = 171, RULE_caseBodyConstruct = 172, 
		RULE_caseStmt = 173, RULE_caseSelector = 174, RULE_caseValueRangeList = 175, 
		RULE_caseValueRange = 176, RULE_ifConstruct = 177, RULE_ifThenStmt = 178, 
		RULE_conditionalBody = 179, RULE_elseIfConstruct = 180, RULE_elseIfStmt = 181, 
		RULE_elseConstruct = 182, RULE_elseStmt = 183, RULE_endIfStmt = 184, RULE_doConstruct = 185, 
		RULE_blockDoConstruct = 186, RULE_endDoStmt = 187, RULE_endName = 188, 
		RULE_nameColon = 189, RULE_labelDoStmt = 190, RULE_doLblRef = 191, RULE_doLblDef = 192, 
		RULE_doLabelStmt = 193, RULE_executionPartConstruct = 194, RULE_doubleDoStmt = 195, 
		RULE_dataStmt = 196, RULE_dataStmtSet = 197, RULE_dse1 = 198, RULE_dse2 = 199, 
		RULE_dataStmtValue = 200, RULE_dataStmtObject = 201, RULE_variable = 202, 
		RULE_subscriptListRef = 203, RULE_subscriptList = 204, RULE_subscript = 205, 
		RULE_substringRange = 206, RULE_dataImpliedDo = 207, RULE_dataIDoObjectList = 208, 
		RULE_dataIDoObject = 209, RULE_structureComponent = 210, RULE_fieldSelector = 211, 
		RULE_arrayElement = 212, RULE_impliedDoVariable = 213, RULE_commaLoopControl = 214, 
		RULE_loopControl = 215, RULE_variableName = 216, RULE_commaExpr = 217, 
		RULE_actionStmt = 218, RULE_whereStmt = 219, RULE_pointerAssignmentStmt = 220, 
		RULE_target = 221, RULE_nullifyStmt = 222, RULE_pointerObjectList = 223, 
		RULE_pointerObject = 224, RULE_pointerField = 225, RULE_exitStmt = 226, 
		RULE_deallocateStmt = 227, RULE_allocateObjectList = 228, RULE_cycleStmt = 229, 
		RULE_allocateStmt = 230, RULE_allocationList = 231, RULE_allocation = 232, 
		RULE_allocateObject = 233, RULE_allocatedShape = 234, RULE_stopStmt = 235, 
		RULE_writeStmt = 236, RULE_ioControlSpecList = 237, RULE_stmtFunctionStmt = 238, 
		RULE_stmtFunctionRange = 239, RULE_sFDummyArgNameList = 240, RULE_sFDummyArgName = 241, 
		RULE_returnStmt = 242, RULE_rewindStmt = 243, RULE_readStmt = 244, RULE_commaInputItemList = 245, 
		RULE_rdFmtId = 246, RULE_rdFmtIdExpr = 247, RULE_inputItemList = 248, 
		RULE_inputItem = 249, RULE_inputImpliedDo = 250, RULE_rdCtlSpec = 251, 
		RULE_rdUnitId = 252, RULE_rdIoCtlSpecList = 253, RULE_ioControlSpec = 254, 
		RULE_printStmt = 255, RULE_outputItemList = 256, RULE_outputItemList1 = 257, 
		RULE_outputImpliedDo = 258, RULE_formatIdentifier = 259, RULE_pauseStmt = 260, 
		RULE_openStmt = 261, RULE_connectSpecList = 262, RULE_connectSpec = 263, 
		RULE_inquireStmt = 264, RULE_inquireSpecList = 265, RULE_inquireSpec = 266, 
		RULE_assignedGotoStmt = 267, RULE_variableComma = 268, RULE_gotoStmt = 269, 
		RULE_computedGotoStmt = 270, RULE_lblRefList = 271, RULE_endfileStmt = 272, 
		RULE_continueStmt = 273, RULE_closeStmt = 274, RULE_closeSpecList = 275, 
		RULE_closeSpec = 276, RULE_cExpression = 277, RULE_cPrimary = 278, RULE_cOperand = 279, 
		RULE_cPrimaryConcatOp = 280, RULE_callStmt = 281, RULE_subroutineNameUse = 282, 
		RULE_subroutineArgList = 283, RULE_subroutineArg = 284, RULE_arithmeticIfStmt = 285, 
		RULE_lblRef = 286, RULE_label = 287, RULE_assignmentStmt = 288, RULE_sFExprListRef = 289, 
		RULE_sFExprList = 290, RULE_commaSectionSubscript = 291, RULE_assignStmt = 292, 
		RULE_backspaceStmt = 293, RULE_unitIdentifier = 294, RULE_positionSpecList = 295, 
		RULE_unitIdentifierComma = 296, RULE_positionSpec = 297, RULE_scalarVariable = 298, 
		RULE_uFExpr = 299, RULE_uFTerm = 300, RULE_uFFactor = 301, RULE_uFPrimary = 302, 
		RULE_subroutineSubprogram = 303, RULE_subroutineName = 304, RULE_subroutineRange = 305, 
		RULE_includeStmt = 306, RULE_implicitStmt = 307, RULE_implicitSpecList = 308, 
		RULE_implicitSpec = 309, RULE_implicitRanges = 310, RULE_implicitRange = 311, 
		RULE_expression = 312, RULE_definedBinaryOp = 313, RULE_level5Expr = 314, 
		RULE_equivOperand = 315, RULE_orOperand = 316, RULE_andOperand = 317, 
		RULE_relOp = 318, RULE_level4Expr = 319, RULE_level3Expr = 320, RULE_level2Expr = 321, 
		RULE_sign = 322, RULE_addOperand = 323, RULE_multOperand = 324, RULE_level1Expr = 325, 
		RULE_definedUnaryOp = 326, RULE_primary = 327, RULE_arrayConstructor = 328, 
		RULE_acValueList = 329, RULE_acValueList1 = 330, RULE_acImpliedDo = 331, 
		RULE_functionReference = 332, RULE_functionArgList = 333, RULE_functionArg = 334, 
		RULE_nameDataRef = 335, RULE_complexDataRefTail = 336, RULE_sectionSubscriptRef = 337, 
		RULE_sectionSubscriptList = 338, RULE_sectionSubscript = 339, RULE_subscriptTripletTail = 340, 
		RULE_logicalConstant = 341, RULE_kindParam = 342, RULE_unsignedArithmeticConstant = 343, 
		RULE_complexConst = 344, RULE_complexComponent = 345, RULE_constantExpr = 346, 
		RULE_ifStmt = 347;
	public static readonly string[] ruleNames = {
		"program", "executableProgram", "programUnit", "mainProgram", "programStmt", 
		"mainRange", "bodyPlusInternals", "internalSubprogram", "specificationPartConstruct", 
		"useStmt", "onlyList", "onlyStmt", "renameList", "rename", "useName", 
		"parameterStmt", "namedConstantDefList", "namedConstantDef", "endProgramStmt", 
		"blockDataSubprogram", "blockDataStmt", "blockDataBody", "blockDataBodyConstruct", 
		"endBlockDataStmt", "formatStmt", "fmtSpec", "formatedit", "editElement", 
		"mislexedFcon", "module", "endModuleStmt", "entryStmt", "subroutineParList", 
		"subroutinePars", "subroutinePar", "declarationConstruct", "specificationStmt", 
		"targetStmt", "targetObjectList", "targetObject", "pointerStmt", "pointerStmtObjectList", 
		"pointerStmtObject", "optionalStmt", "optionalParList", "optionalPar", 
		"namelistStmt", "namelistGroups", "namelistGroupName", "namelistGroupObject", 
		"intentStmt", "intentParList", "intentPar", "dummyArgName", "intentSpec", 
		"allocatableStmt", "arrayAllocationList", "arrayAllocation", "arrayName", 
		"accessStmt", "accessIdList", "accessId", "genericName", "saveStmt", "savedEntityList", 
		"savedEntity", "savedCommonBlock", "intrinsicStmt", "intrinsicList", "intrinsicProcedureName", 
		"externalStmt", "externalNameList", "externalName", "equivalenceStmt", 
		"equivalenceSetList", "equivalenceSet", "equivalenceObject", "equivalenceObjectList", 
		"dimensionStmt", "arrayDeclaratorList", "commonStmt", "comlist", "commonBlockObject", 
		"arrayDeclarator", "comblock", "commonBlockName", "typeDeclarationStmt", 
		"attrSpecSeq", "attrSpec", "entityDeclList", "entityDecl", "objectName", 
		"arraySpec", "assumedShapeSpecList", "assumedShapeSpec", "assumedSizeSpec", 
		"interfaceBlock", "endInterfaceStmt", "interfaceStmt", "genericSpec", 
		"definedOperator", "interfaceBlockBody", "interfaceBodyPartConstruct", 
		"moduleProcedureStmt", "procedureNameList", "procedureName", "interfaceBody", 
		"subroutineInterfaceRange", "endSubroutineStmt", "recursive", "functionPrefix", 
		"functionInterfaceRange", "functionParList", "functionPars", "functionPar", 
		"subprogramInterfaceBody", "endFunctionStmt", "derivedTypeDef", "endTypeStmt", 
		"derivedTypeStmt", "derivedTypeBody", "derivedTypeBodyConstruct", "privateSequenceStmt", 
		"componentDefStmt", "componentDeclList", "componentDecl", "componentName", 
		"componentAttrSpecList", "componentAttrSpec", "componentArraySpec", "explicitShapeSpecList", 
		"explicitShapeSpec", "lowerBound", "upperBound", "deferredShapeSpecList", 
		"deferredShapeSpec", "typeSpec", "kindSelector", "typeName", "charSelector", 
		"lengthSelector", "charLength", "constant", "bozLiteralConstant", "structureConstructor", 
		"exprList", "namedConstantUse", "typeParamValue", "moduleStmt", "moduleName", 
		"ident", "moduleBody", "moduleSubprogramPartConstruct", "containsStmt", 
		"moduleSubprogram", "functionSubprogram", "functionName", "functionRange", 
		"body", "bodyConstruct", "executableConstruct", "whereConstruct", "elseWhere", 
		"elsewhereStmt", "endWhereStmt", "where", "whereConstructStmt", "maskExpr", 
		"caseConstruct", "selectCaseRange", "endSelectStmt", "selectCaseBody", 
		"caseBodyConstruct", "caseStmt", "caseSelector", "caseValueRangeList", 
		"caseValueRange", "ifConstruct", "ifThenStmt", "conditionalBody", "elseIfConstruct", 
		"elseIfStmt", "elseConstruct", "elseStmt", "endIfStmt", "doConstruct", 
		"blockDoConstruct", "endDoStmt", "endName", "nameColon", "labelDoStmt", 
		"doLblRef", "doLblDef", "doLabelStmt", "executionPartConstruct", "doubleDoStmt", 
		"dataStmt", "dataStmtSet", "dse1", "dse2", "dataStmtValue", "dataStmtObject", 
		"variable", "subscriptListRef", "subscriptList", "subscript", "substringRange", 
		"dataImpliedDo", "dataIDoObjectList", "dataIDoObject", "structureComponent", 
		"fieldSelector", "arrayElement", "impliedDoVariable", "commaLoopControl", 
		"loopControl", "variableName", "commaExpr", "actionStmt", "whereStmt", 
		"pointerAssignmentStmt", "target", "nullifyStmt", "pointerObjectList", 
		"pointerObject", "pointerField", "exitStmt", "deallocateStmt", "allocateObjectList", 
		"cycleStmt", "allocateStmt", "allocationList", "allocation", "allocateObject", 
		"allocatedShape", "stopStmt", "writeStmt", "ioControlSpecList", "stmtFunctionStmt", 
		"stmtFunctionRange", "sFDummyArgNameList", "sFDummyArgName", "returnStmt", 
		"rewindStmt", "readStmt", "commaInputItemList", "rdFmtId", "rdFmtIdExpr", 
		"inputItemList", "inputItem", "inputImpliedDo", "rdCtlSpec", "rdUnitId", 
		"rdIoCtlSpecList", "ioControlSpec", "printStmt", "outputItemList", "outputItemList1", 
		"outputImpliedDo", "formatIdentifier", "pauseStmt", "openStmt", "connectSpecList", 
		"connectSpec", "inquireStmt", "inquireSpecList", "inquireSpec", "assignedGotoStmt", 
		"variableComma", "gotoStmt", "computedGotoStmt", "lblRefList", "endfileStmt", 
		"continueStmt", "closeStmt", "closeSpecList", "closeSpec", "cExpression", 
		"cPrimary", "cOperand", "cPrimaryConcatOp", "callStmt", "subroutineNameUse", 
		"subroutineArgList", "subroutineArg", "arithmeticIfStmt", "lblRef", "label", 
		"assignmentStmt", "sFExprListRef", "sFExprList", "commaSectionSubscript", 
		"assignStmt", "backspaceStmt", "unitIdentifier", "positionSpecList", "unitIdentifierComma", 
		"positionSpec", "scalarVariable", "uFExpr", "uFTerm", "uFFactor", "uFPrimary", 
		"subroutineSubprogram", "subroutineName", "subroutineRange", "includeStmt", 
		"implicitStmt", "implicitSpecList", "implicitSpec", "implicitRanges", 
		"implicitRange", "expression", "definedBinaryOp", "level5Expr", "equivOperand", 
		"orOperand", "andOperand", "relOp", "level4Expr", "level3Expr", "level2Expr", 
		"sign", "addOperand", "multOperand", "level1Expr", "definedUnaryOp", "primary", 
		"arrayConstructor", "acValueList", "acValueList1", "acImpliedDo", "functionReference", 
		"functionArgList", "functionArg", "nameDataRef", "complexDataRefTail", 
		"sectionSubscriptRef", "sectionSubscriptList", "sectionSubscript", "subscriptTripletTail", 
		"logicalConstant", "kindParam", "unsignedArithmeticConstant", "complexConst", 
		"complexComponent", "constantExpr", "ifStmt"
	};

	private static readonly string[] _LiteralNames = {
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, "'=>'", null, null, null, null, "'::'", null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, "'$'", "','", "'('", "'%'", null, null, null, "')'", "':'", 
		"'='", "'-'", "'+'", "'/'", null, "'**'", null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, "'CCON'", "'HOLLERITH'", "'CONCATOP'", "'CTRLDIRECT'", "'CTRLREC'", 
		"'TO'", "'SUBPROGRAMBLOCK'", "'DOBLOCK'", "'AIF'", "'THENBLOCK'", "'ELSEBLOCK'", 
		"'CODEROOT'", null, null, null, null, null, "'(/'", "'.'", "'/)'", null, 
		null, null, null, null, null, null, null, null, null, "'SPOFF'", "'SPON'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "RECURSIVE", "CONTAINS", "MODULE", "ENDMODULE", "PROGRAM", "ENTRY", 
		"FUNCTION", "BLOCK", "SUBROUTINE", "ENDINTERFACE", "PROCEDURE", "END", 
		"DIMENSION", "TARGET", "ALLOCATABLE", "OPTIONAL", "NAMELIST", "INTENT", 
		"IN", "OUT", "INOUT", "OPERATOR", "USE", "ONLY", "IMPLIEDT", "ASSIGNMENT", 
		"DOP", "OP", "DOUBLEPRECISION", "DOUBLECOLON", "ASSIGNSTMT", "COMMON", 
		"ELSEWHERE", "REAL", "EQUIVALENCE", "BLOCKDATA", "POINTER", "PRIVATE", 
		"SEQUENCE", "ACCESSSPEC", "IMPLICIT", "NONE", "CHARACTER", "PARAMETER", 
		"EXTERNAL", "INTRINSIC", "SAVE", "DATA", "GO", "GOTO", "IF", "THEN", "ELSE", 
		"ENDIF", "RESULT", "ELSEIF", "DO", "INCLUDE", "CONTINUE", "ENDWHERE", 
		"WHERE", "ENDSELECT", "SELECTCASE", "SELECT", "CASE", "DEFAULT", "DIRECT", 
		"STOP", "REC", "ENDDO", "PAUSE", "WRITE", "READ", "PRINT", "OPEN", "FMT", 
		"UNIT", "PAD", "ACTION", "DELIM", "IOLENGTH", "READWRITE", "ERR", "SIZE", 
		"ADVANCE", "NML", "IOSTAT", "FORMAT", "LET", "CALL", "RETURN", "CLOSE", 
		"DOUBLE", "IOSTART", "SEQUENTIAL", "LABEL", "FILE", "STATUS", "ACCESS", 
		"POSITION", "FORM", "RECL", "EXIST", "OPENED", "NUMBER", "NAMED", "NAME_", 
		"FORMATTED", "UNFORMATTED", "NEXTREC", "INQUIRE", "BACKSPACE", "ENDFILE", 
		"REWIND", "ENDBLOCKDATA", "ENDBLOCK", "KIND", "LEN", "WS", "COMMENT", 
		"DOLLAR", "COMMA", "LPAREN", "PCT", "WHILE", "ALLOCATE", "STAT", "RPAREN", 
		"COLON", "ASSIGN", "MINUS", "PLUS", "DIV", "FORMATSEP", "POWER", "LNOT", 
		"LAND", "LOR", "EQV", "NEQV", "XOR", "EOR", "LT", "LE", "GT", "GE", "NE", 
		"EQ", "TRUE", "FALSE", "XCON", "PCON", "FCON", "CCON", "HOLLERITH", "CONCATOP", 
		"CTRLDIRECT", "CTRLREC", "TO", "SUBPROGRAMBLOCK", "DOBLOCK", "AIF", "THENBLOCK", 
		"ELSEBLOCK", "CODEROOT", "COMPLEX", "PRECISION", "INTEGER", "LOGICAL", 
		"UNDERSCORE", "OBRACKETSLASH", "DOT", "CBRACKETSLASH", "ZCON", "BCON", 
		"OCON", "SCON", "RDCON", "DEALLOCATE", "NULLIFY", "CYCLE", "ENDTYPE", 
		"INTERFACE", "SPOFF", "SPON", "ICON", "TYPE", "NAME", "EXIT", "BLANK", 
		"ALPHANUMERIC_CHARACTER", "STAR", "STRINGLITERAL", "EOL", "LINECONT"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Fortran90Parser.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static Fortran90Parser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public Fortran90Parser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public Fortran90Parser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class ProgramContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExecutableProgramContext executableProgram() {
			return GetRuleContext<ExecutableProgramContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(Fortran90Parser.Eof, 0); }
		public ProgramContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_program; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortran90ParserListener typedListener = listener as IFortran90ParserListener;
			if (typedListener != null) typedListener.EnterProgram(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortran90ParserListener typedListener = listener as IFortran90ParserListener;
			if (typedListener != null) typedListener.ExitProgram(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFortran90ParserVisitor<TResult> typedVisitor = visitor as IFortran90ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProgram(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ProgramContext program() {
		ProgramContext _localctx = new ProgramContext(Context, State);
		EnterRule(_localctx, 0, RULE_program);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 696;
			executableProgram();
			State = 697;
			Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExecutableProgramContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ProgramUnitContext[] programUnit() {
			return GetRuleContexts<ProgramUnitContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ProgramUnitContext programUnit(int i) {
			return GetRuleContext<ProgramUnitContext>(i);
		}
		public ExecutableProgramContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_executableProgram; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortran90ParserListener typedListener = listener as IFortran90ParserListener;
			if (typedListener != null) typedListener.EnterExecutableProgram(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortran90ParserListener typedListener = listener as IFortran90ParserListener;
			if (typedListener != null) typedListener.ExitExecutableProgram(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFortran90ParserVisitor<TResult> typedVisitor = visitor as IFortran90ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExecutableProgram(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExecutableProgramContext executableProgram() {
		ExecutableProgramContext _localctx = new ExecutableProgramContext(Context, State);
		EnterRule(_localctx, 2, RULE_executableProgram);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 700;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 699;
				programUnit();
				}
				}
				State = 702;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & -5904224344354589714L) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & 4613797081759354769L) != 0) || ((((_la - 166)) & ~0x3f) == 0 && ((1L << (_la - 166)) & 15917069L) != 0) );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ProgramUnitContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public MainProgramContext mainProgram() {
			return GetRuleContext<MainProgramContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionSubprogramContext functionSubprogram() {
			return GetRuleContext<FunctionSubprogramContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SubroutineSubprogramContext subroutineSubprogram() {
			return GetRuleContext<SubroutineSubprogramContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BlockDataSubprogramContext blockDataSubprogram() {
			return GetRuleContext<BlockDataSubprogramContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ModuleContext module() {
			return GetRuleContext<ModuleContext>(0);
		}
		public ProgramUnitContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_programUnit; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortran90ParserListener typedListener = listener as IFortran90ParserListener;
			if (typedListener != null) typedListener.EnterProgramUnit(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortran90ParserListener typedListener = listener as IFortran90ParserListener;
			if (typedListener != null) typedListener.ExitProgramUnit(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFortran90ParserVisitor<TResult> typedVisitor = visitor as IFortran90ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProgramUnit(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ProgramUnitContext programUnit() {
		ProgramUnitContext _localctx = new ProgramUnitContext(Context, State);
		EnterRule(_localctx, 4, RULE_programUnit);
		try {
			State = 709;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 704;
				mainProgram();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 705;
				functionSubprogram();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 706;
				subroutineSubprogram();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 707;
				blockDataSubprogram();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 708;
				module();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MainProgramContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public MainRangeContext mainRange() {
			return GetRuleContext<MainRangeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ProgramStmtContext programStmt() {
			return GetRuleContext<ProgramStmtContext>(0);
		}
		public MainProgramContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_mainProgram; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortran90ParserListener typedListener = listener as IFortran90ParserListener;
			if (typedListener != null) typedListener.EnterMainProgram(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortran90ParserListener typedListener = listener as IFortran90ParserListener;
			if (typedListener != null) typedListener.ExitMainProgram(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFortran90ParserVisitor<TResult> typedVisitor = visitor as IFortran90ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMainProgram(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MainProgramContext mainProgram() {
		MainProgramContext _localctx = new MainProgramContext(Context, State);
		EnterRule(_localctx, 6, RULE_mainProgram);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 712;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==PROGRAM) {
				{
				State = 711;
				programStmt();
				}
			}

			State = 714;
			mainRange();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ProgramStmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PROGRAM() { return GetToken(Fortran90Parser.PROGRAM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NAME() { return GetToken(Fortran90Parser.NAME, 0); }
		public ProgramStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_programStmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortran90ParserListener typedListener = listener as IFortran90ParserListener;
			if (typedListener != null) typedListener.EnterProgramStmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortran90ParserListener typedListener = listener as IFortran90ParserListener;
			if (typedListener != null) typedListener.ExitProgramStmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFortran90ParserVisitor<TResult> typedVisitor = visitor as IFortran90ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProgramStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ProgramStmtContext programStmt() {
		ProgramStmtContext _localctx = new ProgramStmtContext(Context, State);
		EnterRule(_localctx, 8, RULE_programStmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 716;
			Match(PROGRAM);
			State = 717;
			Match(NAME);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MainRangeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public EndProgramStmtContext endProgramStmt() {
			return GetRuleContext<EndProgramStmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BodyContext body() {
			return GetRuleContext<BodyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BodyPlusInternalsContext bodyPlusInternals() {
			return GetRuleContext<BodyPlusInternalsContext>(0);
		}
		public MainRangeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_mainRange; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortran90ParserListener typedListener = listener as IFortran90ParserListener;
			if (typedListener != null) typedListener.EnterMainRange(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortran90ParserListener typedListener = listener as IFortran90ParserListener;
			if (typedListener != null) typedListener.ExitMainRange(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFortran90ParserVisitor<TResult> typedVisitor = visitor as IFortran90ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMainRange(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MainRangeContext mainRange() {
		MainRangeContext _localctx = new MainRangeContext(Context, State);
		EnterRule(_localctx, 10, RULE_mainRange);
		try {
			State = 726;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,4,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				{
				State = 720;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,3,Context) ) {
				case 1:
					{
					State = 719;
					body();
					}
					break;
				}
				State = 722;
				endProgramStmt();
				}
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				{
				State = 723;
				bodyPlusInternals(0);
				State = 724;
				endProgramStmt();
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BodyPlusInternalsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public BodyContext body() {
			return GetRuleContext<BodyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ContainsStmtContext containsStmt() {
			return GetRuleContext<ContainsStmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public InternalSubprogramContext internalSubprogram() {
			return GetRuleContext<InternalSubprogramContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BodyPlusInternalsContext bodyPlusInternals() {
			return GetRuleContext<BodyPlusInternalsContext>(0);
		}
		public BodyPlusInternalsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_bodyPlusInternals; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortran90ParserListener typedListener = listener as IFortran90ParserListener;
			if (typedListener != null) typedListener.EnterBodyPlusInternals(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortran90ParserListener typedListener = listener as IFortran90ParserListener;
			if (typedListener != null) typedListener.ExitBodyPlusInternals(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFortran90ParserVisitor<TResult> typedVisitor = visitor as IFortran90ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBodyPlusInternals(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BodyPlusInternalsContext bodyPlusInternals() {
		return bodyPlusInternals(0);
	}

	private BodyPlusInternalsContext bodyPlusInternals(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		BodyPlusInternalsContext _localctx = new BodyPlusInternalsContext(Context, _parentState);
		BodyPlusInternalsContext _prevctx = _localctx;
		int _startState = 12;
		EnterRecursionRule(_localctx, 12, RULE_bodyPlusInternals, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 736;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ENTRY:
			case END:
			case DIMENSION:
			case TARGET:
			case ALLOCATABLE:
			case OPTIONAL:
			case NAMELIST:
			case INTENT:
			case USE:
			case DOUBLEPRECISION:
			case ASSIGNSTMT:
			case COMMON:
			case REAL:
			case EQUIVALENCE:
			case POINTER:
			case ACCESSSPEC:
			case IMPLICIT:
			case CHARACTER:
			case PARAMETER:
			case EXTERNAL:
			case INTRINSIC:
			case SAVE:
			case DATA:
			case GO:
			case GOTO:
			case IF:
			case DO:
			case INCLUDE:
			case CONTINUE:
			case WHERE:
			case SELECTCASE:
			case SELECT:
			case STOP:
			case PAUSE:
			case WRITE:
			case READ:
			case PRINT:
			case OPEN:
			case CALL:
			case RETURN:
			case CLOSE:
			case DOUBLE:
			case INQUIRE:
			case BACKSPACE:
			case ENDFILE:
			case REWIND:
			case ALLOCATE:
			case COMPLEX:
			case INTEGER:
			case LOGICAL:
			case DEALLOCATE:
			case NULLIFY:
			case CYCLE:
			case INTERFACE:
			case ICON:
			case TYPE:
			case NAME:
			case EXIT:
				{
				State = 729;
				body();
				State = 730;
				containsStmt();
				State = 731;
				internalSubprogram();
				}
				break;
			case CONTAINS:
				{
				State = 733;
				containsStmt();
				State = 734;
				internalSubprogram();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 742;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,6,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new BodyPlusInternalsContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_bodyPlusInternals);
					State = 738;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 739;
					internalSubprogram();
					}
					} 
				}
				State = 744;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,6,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class InternalSubprogramContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FunctionSubprogramContext functionSubprogram() {
			return GetRuleContext<FunctionSubprogramContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SubroutineSubprogramContext subroutineSubprogram() {
			return GetRuleContext<SubroutineSubprogramContext>(0);
		}
		public InternalSubprogramContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_internalSubprogram; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortran90ParserListener typedListener = listener as IFortran90ParserListener;
			if (typedListener != null) typedListener.EnterInternalSubprogram(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortran90ParserListener typedListener = listener as IFortran90ParserListener;
			if (typedListener != null) typedListener.ExitInternalSubprogram(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFortran90ParserVisitor<TResult> typedVisitor = visitor as IFortran90ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInternalSubprogram(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InternalSubprogramContext internalSubprogram() {
		InternalSubprogramContext _localctx = new InternalSubprogramContext(Context, State);
		EnterRule(_localctx, 14, RULE_internalSubprogram);
		try {
			State = 747;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,7,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 745;
				functionSubprogram();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 746;
				subroutineSubprogram();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SpecificationPartConstructContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ImplicitStmtContext implicitStmt() {
			return GetRuleContext<ImplicitStmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ParameterStmtContext parameterStmt() {
			return GetRuleContext<ParameterStmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FormatStmtContext formatStmt() {
			return GetRuleContext<FormatStmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public EntryStmtContext entryStmt() {
			return GetRuleContext<EntryStmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DeclarationConstructContext declarationConstruct() {
			return GetRuleContext<DeclarationConstructContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IncludeStmtContext includeStmt() {
			return GetRuleContext<IncludeStmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public UseStmtContext useStmt() {
			return GetRuleContext<UseStmtContext>(0);
		}
		public SpecificationPartConstructContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_specificationPartConstruct; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortran90ParserListener typedListener = listener as IFortran90ParserListener;
			if (typedListener != null) typedListener.EnterSpecificationPartConstruct(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortran90ParserListener typedListener = listener as IFortran90ParserListener;
			if (typedListener != null) typedListener.ExitSpecificationPartConstruct(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFortran90ParserVisitor<TResult> typedVisitor = visitor as IFortran90ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSpecificationPartConstruct(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SpecificationPartConstructContext specificationPartConstruct() {
		SpecificationPartConstructContext _localctx = new SpecificationPartConstructContext(Context, State);
		EnterRule(_localctx, 16, RULE_specificationPartConstruct);
		try {
			State = 756;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case IMPLICIT:
				EnterOuterAlt(_localctx, 1);
				{
				State = 749;
				implicitStmt();
				}
				break;
			case PARAMETER:
				EnterOuterAlt(_localctx, 2);
				{
				State = 750;
				parameterStmt();
				}
				break;
			case ICON:
				EnterOuterAlt(_localctx, 3);
				{
				State = 751;
				formatStmt();
				}
				break;
			case ENTRY:
				EnterOuterAlt(_localctx, 4);
				{
				State = 752;
				entryStmt();
				}
				break;
			case DIMENSION:
			case TARGET:
			case ALLOCATABLE:
			case OPTIONAL:
			case NAMELIST:
			case INTENT:
			case DOUBLEPRECISION:
			case COMMON:
			case REAL:
			case EQUIVALENCE:
			case POINTER:
			case ACCESSSPEC:
			case CHARACTER:
			case EXTERNAL:
			case INTRINSIC:
			case SAVE:
			case DATA:
			case DOUBLE:
			case COMPLEX:
			case INTEGER:
			case LOGICAL:
			case INTERFACE:
			case TYPE:
				EnterOuterAlt(_localctx, 5);
				{
				State = 753;
				declarationConstruct();
				}
				break;
			case INCLUDE:
				EnterOuterAlt(_localctx, 6);
				{
				State = 754;
				includeStmt();
				}
				break;
			case USE:
				EnterOuterAlt(_localctx, 7);
				{
				State = 755;
				useStmt();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UseStmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode USE() { return GetToken(Fortran90Parser.USE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NAME() { return GetToken(Fortran90Parser.NAME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA() { return GetToken(Fortran90Parser.COMMA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ONLY() { return GetToken(Fortran90Parser.ONLY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(Fortran90Parser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public RenameListContext renameList() {
			return GetRuleContext<RenameListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public OnlyListContext onlyList() {
			return GetRuleContext<OnlyListContext>(0);
		}
		public UseStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_useStmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortran90ParserListener typedListener = listener as IFortran90ParserListener;
			if (typedListener != null) typedListener.EnterUseStmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortran90ParserListener typedListener = listener as IFortran90ParserListener;
			if (typedListener != null) typedListener.ExitUseStmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFortran90ParserVisitor<TResult> typedVisitor = visitor as IFortran90ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUseStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UseStmtContext useStmt() {
		UseStmtContext _localctx = new UseStmtContext(Context, State);
		EnterRule(_localctx, 18, RULE_useStmt);
		try {
			State = 775;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,9,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 758;
				Match(USE);
				State = 759;
				Match(NAME);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 760;
				Match(USE);
				State = 761;
				Match(NAME);
				State = 762;
				Match(COMMA);
				State = 763;
				Match(ONLY);
				State = 764;
				Match(COLON);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 765;
				Match(USE);
				State = 766;
				Match(NAME);
				State = 767;
				Match(COMMA);
				State = 768;
				renameList();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 769;
				Match(USE);
				State = 770;
				Match(NAME);
				State = 771;
				Match(COMMA);
				State = 772;
				Match(ONLY);
				State = 773;
				Match(COLON);
				State = 774;
				onlyList();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OnlyListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public OnlyStmtContext[] onlyStmt() {
			return GetRuleContexts<OnlyStmtContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public OnlyStmtContext onlyStmt(int i) {
			return GetRuleContext<OnlyStmtContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(Fortran90Parser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(Fortran90Parser.COMMA, i);
		}
		public OnlyListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_onlyList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortran90ParserListener typedListener = listener as IFortran90ParserListener;
			if (typedListener != null) typedListener.EnterOnlyList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortran90ParserListener typedListener = listener as IFortran90ParserListener;
			if (typedListener != null) typedListener.ExitOnlyList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFortran90ParserVisitor<TResult> typedVisitor = visitor as IFortran90ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOnlyList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OnlyListContext onlyList() {
		OnlyListContext _localctx = new OnlyListContext(Context, State);
		EnterRule(_localctx, 20, RULE_onlyList);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 777;
			onlyStmt();
			State = 782;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,10,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 778;
					Match(COMMA);
					State = 779;
					onlyStmt();
					}
					} 
				}
				State = 784;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,10,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OnlyStmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public GenericSpecContext genericSpec() {
			return GetRuleContext<GenericSpecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentContext ident() {
			return GetRuleContext<IdentContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IMPLIEDT() { return GetToken(Fortran90Parser.IMPLIEDT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UseNameContext useName() {
			return GetRuleContext<UseNameContext>(0);
		}
		public OnlyStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_onlyStmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortran90ParserListener typedListener = listener as IFortran90ParserListener;
			if (typedListener != null) typedListener.EnterOnlyStmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortran90ParserListener typedListener = listener as IFortran90ParserListener;
			if (typedListener != null) typedListener.ExitOnlyStmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFortran90ParserVisitor<TResult> typedVisitor = visitor as IFortran90ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOnlyStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OnlyStmtContext onlyStmt() {
		OnlyStmtContext _localctx = new OnlyStmtContext(Context, State);
		EnterRule(_localctx, 22, RULE_onlyStmt);
		try {
			State = 791;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,11,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 785;
				genericSpec();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 786;
				ident();
				State = 787;
				Match(IMPLIEDT);
				State = 788;
				useName();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 790;
				useName();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RenameListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public RenameContext[] rename() {
			return GetRuleContexts<RenameContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public RenameContext rename(int i) {
			return GetRuleContext<RenameContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(Fortran90Parser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(Fortran90Parser.COMMA, i);
		}
		public RenameListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_renameList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortran90ParserListener typedListener = listener as IFortran90ParserListener;
			if (typedListener != null) typedListener.EnterRenameList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortran90ParserListener typedListener = listener as IFortran90ParserListener;
			if (typedListener != null) typedListener.ExitRenameList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFortran90ParserVisitor<TResult> typedVisitor = visitor as IFortran90ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRenameList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RenameListContext renameList() {
		RenameListContext _localctx = new RenameListContext(Context, State);
		EnterRule(_localctx, 24, RULE_renameList);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 793;
			rename();
			State = 798;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,12,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 794;
					Match(COMMA);
					State = 795;
					rename();
					}
					} 
				}
				State = 800;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,12,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RenameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentContext ident() {
			return GetRuleContext<IdentContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IMPLIEDT() { return GetToken(Fortran90Parser.IMPLIEDT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UseNameContext useName() {
			return GetRuleContext<UseNameContext>(0);
		}
		public RenameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rename; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortran90ParserListener typedListener = listener as IFortran90ParserListener;
			if (typedListener != null) typedListener.EnterRename(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortran90ParserListener typedListener = listener as IFortran90ParserListener;
			if (typedListener != null) typedListener.ExitRename(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFortran90ParserVisitor<TResult> typedVisitor = visitor as IFortran90ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRename(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RenameContext rename() {
		RenameContext _localctx = new RenameContext(Context, State);
		EnterRule(_localctx, 26, RULE_rename);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 801;
			ident();
			State = 802;
			Match(IMPLIEDT);
			State = 803;
			useName();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UseNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentContext ident() {
			return GetRuleContext<IdentContext>(0);
		}
		public UseNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_useName; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortran90ParserListener typedListener = listener as IFortran90ParserListener;
			if (typedListener != null) typedListener.EnterUseName(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortran90ParserListener typedListener = listener as IFortran90ParserListener;
			if (typedListener != null) typedListener.ExitUseName(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFortran90ParserVisitor<TResult> typedVisitor = visitor as IFortran90ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUseName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UseNameContext useName() {
		UseNameContext _localctx = new UseNameContext(Context, State);
		EnterRule(_localctx, 28, RULE_useName);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 805;
			ident();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParameterStmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARAMETER() { return GetToken(Fortran90Parser.PARAMETER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(Fortran90Parser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NamedConstantDefListContext namedConstantDefList() {
			return GetRuleContext<NamedConstantDefListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(Fortran90Parser.RPAREN, 0); }
		public ParameterStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parameterStmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortran90ParserListener typedListener = listener as IFortran90ParserListener;
			if (typedListener != null) typedListener.EnterParameterStmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortran90ParserListener typedListener = listener as IFortran90ParserListener;
			if (typedListener != null) typedListener.ExitParameterStmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFortran90ParserVisitor<TResult> typedVisitor = visitor as IFortran90ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParameterStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ParameterStmtContext parameterStmt() {
		ParameterStmtContext _localctx = new ParameterStmtContext(Context, State);
		EnterRule(_localctx, 30, RULE_parameterStmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 807;
			Match(PARAMETER);
			State = 808;
			Match(LPAREN);
			State = 809;
			namedConstantDefList();
			State = 810;
			Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NamedConstantDefListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public NamedConstantDefContext[] namedConstantDef() {
			return GetRuleContexts<NamedConstantDefContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public NamedConstantDefContext namedConstantDef(int i) {
			return GetRuleContext<NamedConstantDefContext>(i);
		}
		public NamedConstantDefListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_namedConstantDefList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortran90ParserListener typedListener = listener as IFortran90ParserListener;
			if (typedListener != null) typedListener.EnterNamedConstantDefList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortran90ParserListener typedListener = listener as IFortran90ParserListener;
			if (typedListener != null) typedListener.ExitNamedConstantDefList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFortran90ParserVisitor<TResult> typedVisitor = visitor as IFortran90ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNamedConstantDefList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NamedConstantDefListContext namedConstantDefList() {
		NamedConstantDefListContext _localctx = new NamedConstantDefListContext(Context, State);
		EnterRule(_localctx, 32, RULE_namedConstantDefList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 813;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 812;
				namedConstantDef();
				}
				}
				State = 815;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==NAME );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NamedConstantDefContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NAME() { return GetToken(Fortran90Parser.NAME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGN() { return GetToken(Fortran90Parser.ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public NamedConstantDefContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_namedConstantDef; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortran90ParserListener typedListener = listener as IFortran90ParserListener;
			if (typedListener != null) typedListener.EnterNamedConstantDef(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortran90ParserListener typedListener = listener as IFortran90ParserListener;
			if (typedListener != null) typedListener.ExitNamedConstantDef(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFortran90ParserVisitor<TResult> typedVisitor = visitor as IFortran90ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNamedConstantDef(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NamedConstantDefContext namedConstantDef() {
		NamedConstantDefContext _localctx = new NamedConstantDefContext(Context, State);
		EnterRule(_localctx, 34, RULE_namedConstantDef);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 817;
			Match(NAME);
			State = 818;
			Match(ASSIGN);
			State = 819;
			expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EndProgramStmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode END() { return GetToken(Fortran90Parser.END, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PROGRAM() { return GetToken(Fortran90Parser.PROGRAM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NAME() { return GetToken(Fortran90Parser.NAME, 0); }
		public EndProgramStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_endProgramStmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortran90ParserListener typedListener = listener as IFortran90ParserListener;
			if (typedListener != null) typedListener.EnterEndProgramStmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortran90ParserListener typedListener = listener as IFortran90ParserListener;
			if (typedListener != null) typedListener.ExitEndProgramStmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFortran90ParserVisitor<TResult> typedVisitor = visitor as IFortran90ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEndProgramStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EndProgramStmtContext endProgramStmt() {
		EndProgramStmtContext _localctx = new EndProgramStmtContext(Context, State);
		EnterRule(_localctx, 36, RULE_endProgramStmt);
		try {
			State = 827;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,15,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 821;
				Match(END);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 822;
				Match(END);
				State = 823;
				Match(PROGRAM);
				State = 825;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,14,Context) ) {
				case 1:
					{
					State = 824;
					Match(NAME);
					}
					break;
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlockDataSubprogramContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public BlockDataStmtContext blockDataStmt() {
			return GetRuleContext<BlockDataStmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BlockDataBodyContext blockDataBody() {
			return GetRuleContext<BlockDataBodyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public EndBlockDataStmtContext endBlockDataStmt() {
			return GetRuleContext<EndBlockDataStmtContext>(0);
		}
		public BlockDataSubprogramContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_blockDataSubprogram; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortran90ParserListener typedListener = listener as IFortran90ParserListener;
			if (typedListener != null) typedListener.EnterBlockDataSubprogram(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortran90ParserListener typedListener = listener as IFortran90ParserListener;
			if (typedListener != null) typedListener.ExitBlockDataSubprogram(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFortran90ParserVisitor<TResult> typedVisitor = visitor as IFortran90ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBlockDataSubprogram(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BlockDataSubprogramContext blockDataSubprogram() {
		BlockDataSubprogramContext _localctx = new BlockDataSubprogramContext(Context, State);
		EnterRule(_localctx, 38, RULE_blockDataSubprogram);
		try {
			State = 836;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,16,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 829;
				blockDataStmt();
				State = 830;
				blockDataBody(0);
				State = 831;
				endBlockDataStmt();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 833;
				blockDataStmt();
				State = 834;
				endBlockDataStmt();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlockDataStmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BLOCKDATA() { return GetToken(Fortran90Parser.BLOCKDATA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NAME() { return GetToken(Fortran90Parser.NAME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BLOCK() { return GetToken(Fortran90Parser.BLOCK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DATA() { return GetToken(Fortran90Parser.DATA, 0); }
		public BlockDataStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_blockDataStmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortran90ParserListener typedListener = listener as IFortran90ParserListener;
			if (typedListener != null) typedListener.EnterBlockDataStmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortran90ParserListener typedListener = listener as IFortran90ParserListener;
			if (typedListener != null) typedListener.ExitBlockDataStmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFortran90ParserVisitor<TResult> typedVisitor = visitor as IFortran90ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBlockDataStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BlockDataStmtContext blockDataStmt() {
		BlockDataStmtContext _localctx = new BlockDataStmtContext(Context, State);
		EnterRule(_localctx, 40, RULE_blockDataStmt);
		int _la;
		try {
			State = 847;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case BLOCKDATA:
				EnterOuterAlt(_localctx, 1);
				{
				State = 838;
				Match(BLOCKDATA);
				State = 840;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==NAME) {
					{
					State = 839;
					Match(NAME);
					}
				}

				}
				break;
			case BLOCK:
				EnterOuterAlt(_localctx, 2);
				{
				State = 842;
				Match(BLOCK);
				State = 843;
				Match(DATA);
				State = 845;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==NAME) {
					{
					State = 844;
					Match(NAME);
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlockDataBodyContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public BlockDataBodyConstructContext blockDataBodyConstruct() {
			return GetRuleContext<BlockDataBodyConstructContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BlockDataBodyContext blockDataBody() {
			return GetRuleContext<BlockDataBodyContext>(0);
		}
		public BlockDataBodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_blockDataBody; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortran90ParserListener typedListener = listener as IFortran90ParserListener;
			if (typedListener != null) typedListener.EnterBlockDataBody(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortran90ParserListener typedListener = listener as IFortran90ParserListener;
			if (typedListener != null) typedListener.ExitBlockDataBody(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFortran90ParserVisitor<TResult> typedVisitor = visitor as IFortran90ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBlockDataBody(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BlockDataBodyContext blockDataBody() {
		return blockDataBody(0);
	}

	private BlockDataBodyContext blockDataBody(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		BlockDataBodyContext _localctx = new BlockDataBodyContext(Context, _parentState);
		BlockDataBodyContext _prevctx = _localctx;
		int _startState = 42;
		EnterRecursionRule(_localctx, 42, RULE_blockDataBody, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 850;
			blockDataBodyConstruct();
			}
			Context.Stop = TokenStream.LT(-1);
			State = 856;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,20,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new BlockDataBodyContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_blockDataBody);
					State = 852;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 853;
					blockDataBodyConstruct();
					}
					} 
				}
				State = 858;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,20,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class BlockDataBodyConstructContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SpecificationPartConstructContext specificationPartConstruct() {
			return GetRuleContext<SpecificationPartConstructContext>(0);
		}
		public BlockDataBodyConstructContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_blockDataBodyConstruct; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortran90ParserListener typedListener = listener as IFortran90ParserListener;
			if (typedListener != null) typedListener.EnterBlockDataBodyConstruct(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortran90ParserListener typedListener = listener as IFortran90ParserListener;
			if (typedListener != null) typedListener.ExitBlockDataBodyConstruct(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFortran90ParserVisitor<TResult> typedVisitor = visitor as IFortran90ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBlockDataBodyConstruct(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BlockDataBodyConstructContext blockDataBodyConstruct() {
		BlockDataBodyConstructContext _localctx = new BlockDataBodyConstructContext(Context, State);
		EnterRule(_localctx, 44, RULE_blockDataBodyConstruct);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 859;
			specificationPartConstruct();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EndBlockDataStmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ENDBLOCKDATA() { return GetToken(Fortran90Parser.ENDBLOCKDATA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NAME() { return GetToken(Fortran90Parser.NAME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode END() { return GetToken(Fortran90Parser.END, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BLOCKDATA() { return GetToken(Fortran90Parser.BLOCKDATA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ENDBLOCK() { return GetToken(Fortran90Parser.ENDBLOCK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DATA() { return GetToken(Fortran90Parser.DATA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BLOCK() { return GetToken(Fortran90Parser.BLOCK, 0); }
		public EndBlockDataStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_endBlockDataStmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortran90ParserListener typedListener = listener as IFortran90ParserListener;
			if (typedListener != null) typedListener.EnterEndBlockDataStmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortran90ParserListener typedListener = listener as IFortran90ParserListener;
			if (typedListener != null) typedListener.ExitEndBlockDataStmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFortran90ParserVisitor<TResult> typedVisitor = visitor as IFortran90ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEndBlockDataStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EndBlockDataStmtContext endBlockDataStmt() {
		EndBlockDataStmtContext _localctx = new EndBlockDataStmtContext(Context, State);
		EnterRule(_localctx, 46, RULE_endBlockDataStmt);
		try {
			State = 882;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,25,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 861;
				Match(ENDBLOCKDATA);
				State = 863;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,21,Context) ) {
				case 1:
					{
					State = 862;
					Match(NAME);
					}
					break;
				}
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 865;
				Match(END);
				State = 866;
				Match(BLOCKDATA);
				State = 868;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,22,Context) ) {
				case 1:
					{
					State = 867;
					Match(NAME);
					}
					break;
				}
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 870;
				Match(ENDBLOCK);
				State = 871;
				Match(DATA);
				State = 873;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,23,Context) ) {
				case 1:
					{
					State = 872;
					Match(NAME);
					}
					break;
				}
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 875;
				Match(END);
				State = 876;
				Match(BLOCK);
				State = 877;
				Match(DATA);
				State = 879;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,24,Context) ) {
				case 1:
					{
					State = 878;
					Match(NAME);
					}
					break;
				}
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 881;
				Match(END);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FormatStmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ICON() { return GetToken(Fortran90Parser.ICON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FORMAT() { return GetToken(Fortran90Parser.FORMAT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(Fortran90Parser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(Fortran90Parser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FmtSpecContext fmtSpec() {
			return GetRuleContext<FmtSpecContext>(0);
		}
		public FormatStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_formatStmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortran90ParserListener typedListener = listener as IFortran90ParserListener;
			if (typedListener != null) typedListener.EnterFormatStmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortran90ParserListener typedListener = listener as IFortran90ParserListener;
			if (typedListener != null) typedListener.ExitFormatStmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFortran90ParserVisitor<TResult> typedVisitor = visitor as IFortran90ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFormatStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FormatStmtContext formatStmt() {
		FormatStmtContext _localctx = new FormatStmtContext(Context, State);
		EnterRule(_localctx, 48, RULE_formatStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 884;
			Match(ICON);
			State = 885;
			Match(FORMAT);
			State = 886;
			Match(LPAREN);
			State = 888;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (((((_la - 123)) & ~0x3f) == 0 && ((1L << (_la - 123)) & -9169328835152312319L) != 0) || _la==NAME) {
				{
				State = 887;
				fmtSpec(0);
				}
			}

			State = 890;
			Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FmtSpecContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FormateditContext formatedit() {
			return GetRuleContext<FormateditContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FORMATSEP() { return GetToken(Fortran90Parser.FORMATSEP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FmtSpecContext fmtSpec() {
			return GetRuleContext<FmtSpecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA() { return GetToken(Fortran90Parser.COMMA, 0); }
		public FmtSpecContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fmtSpec; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortran90ParserListener typedListener = listener as IFortran90ParserListener;
			if (typedListener != null) typedListener.EnterFmtSpec(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortran90ParserListener typedListener = listener as IFortran90ParserListener;
			if (typedListener != null) typedListener.ExitFmtSpec(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFortran90ParserVisitor<TResult> typedVisitor = visitor as IFortran90ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFmtSpec(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FmtSpecContext fmtSpec() {
		return fmtSpec(0);
	}

	private FmtSpecContext fmtSpec(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		FmtSpecContext _localctx = new FmtSpecContext(Context, _parentState);
		FmtSpecContext _prevctx = _localctx;
		int _startState = 50;
		EnterRecursionRule(_localctx, 50, RULE_fmtSpec, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 897;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,27,Context) ) {
			case 1:
				{
				State = 893;
				formatedit();
				}
				break;
			case 2:
				{
				State = 894;
				Match(FORMATSEP);
				}
				break;
			case 3:
				{
				State = 895;
				Match(FORMATSEP);
				State = 896;
				formatedit();
				}
				break;
			}
			Context.Stop = TokenStream.LT(-1);
			State = 916;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,29,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 914;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,28,Context) ) {
					case 1:
						{
						_localctx = new FmtSpecContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_fmtSpec);
						State = 899;
						if (!(Precpred(Context, 5))) throw new FailedPredicateException(this, "Precpred(Context, 5)");
						State = 900;
						Match(FORMATSEP);
						}
						break;
					case 2:
						{
						_localctx = new FmtSpecContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_fmtSpec);
						State = 901;
						if (!(Precpred(Context, 4))) throw new FailedPredicateException(this, "Precpred(Context, 4)");
						State = 902;
						Match(FORMATSEP);
						State = 903;
						formatedit();
						}
						break;
					case 3:
						{
						_localctx = new FmtSpecContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_fmtSpec);
						State = 904;
						if (!(Precpred(Context, 3))) throw new FailedPredicateException(this, "Precpred(Context, 3)");
						State = 905;
						Match(COMMA);
						State = 906;
						formatedit();
						}
						break;
					case 4:
						{
						_localctx = new FmtSpecContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_fmtSpec);
						State = 907;
						if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
						State = 908;
						Match(COMMA);
						State = 909;
						Match(FORMATSEP);
						}
						break;
					case 5:
						{
						_localctx = new FmtSpecContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_fmtSpec);
						State = 910;
						if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
						State = 911;
						Match(COMMA);
						State = 912;
						Match(FORMATSEP);
						State = 913;
						formatedit();
						}
						break;
					}
					} 
				}
				State = 918;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,29,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class FormateditContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public EditElementContext editElement() {
			return GetRuleContext<EditElementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ICON() { return GetToken(Fortran90Parser.ICON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode XCON() { return GetToken(Fortran90Parser.XCON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PCON() { return GetToken(Fortran90Parser.PCON, 0); }
		public FormateditContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_formatedit; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortran90ParserListener typedListener = listener as IFortran90ParserListener;
			if (typedListener != null) typedListener.EnterFormatedit(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortran90ParserListener typedListener = listener as IFortran90ParserListener;
			if (typedListener != null) typedListener.ExitFormatedit(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFortran90ParserVisitor<TResult> typedVisitor = visitor as IFortran90ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFormatedit(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FormateditContext formatedit() {
		FormateditContext _localctx = new FormateditContext(Context, State);
		EnterRule(_localctx, 52, RULE_formatedit);
		try {
			State = 929;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,30,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 919;
				editElement();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 920;
				Match(ICON);
				State = 921;
				editElement();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 922;
				Match(XCON);
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 923;
				Match(PCON);
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 924;
				Match(PCON);
				State = 925;
				editElement();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 926;
				Match(PCON);
				State = 927;
				Match(ICON);
				State = 928;
				editElement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EditElementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FCON() { return GetToken(Fortran90Parser.FCON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public MislexedFconContext mislexedFcon() {
			return GetRuleContext<MislexedFconContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SCON() { return GetToken(Fortran90Parser.SCON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HOLLERITH() { return GetToken(Fortran90Parser.HOLLERITH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NAME() { return GetToken(Fortran90Parser.NAME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(Fortran90Parser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FmtSpecContext fmtSpec() {
			return GetRuleContext<FmtSpecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(Fortran90Parser.RPAREN, 0); }
		public EditElementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_editElement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortran90ParserListener typedListener = listener as IFortran90ParserListener;
			if (typedListener != null) typedListener.EnterEditElement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortran90ParserListener typedListener = listener as IFortran90ParserListener;
			if (typedListener != null) typedListener.ExitEditElement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFortran90ParserVisitor<TResult> typedVisitor = visitor as IFortran90ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEditElement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EditElementContext editElement() {
		EditElementContext _localctx = new EditElementContext(Context, State);
		EnterRule(_localctx, 54, RULE_editElement);
		try {
			State = 940;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,31,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 931;
				Match(FCON);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 932;
				mislexedFcon();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 933;
				Match(SCON);
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 934;
				Match(HOLLERITH);
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 935;
				Match(NAME);
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 936;
				Match(LPAREN);
				State = 937;
				fmtSpec(0);
				State = 938;
				Match(RPAREN);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MislexedFconContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] RDCON() { return GetTokens(Fortran90Parser.RDCON); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RDCON(int i) {
			return GetToken(Fortran90Parser.RDCON, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SPOFF() { return GetToken(Fortran90Parser.SPOFF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SPON() { return GetToken(Fortran90Parser.SPON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NAME() { return GetToken(Fortran90Parser.NAME, 0); }
		public MislexedFconContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_mislexedFcon; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortran90ParserListener typedListener = listener as IFortran90ParserListener;
			if (typedListener != null) typedListener.EnterMislexedFcon(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortran90ParserListener typedListener = listener as IFortran90ParserListener;
			if (typedListener != null) typedListener.ExitMislexedFcon(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFortran90ParserVisitor<TResult> typedVisitor = visitor as IFortran90ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMislexedFcon(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MislexedFconContext mislexedFcon() {
		MislexedFconContext _localctx = new MislexedFconContext(Context, State);
		EnterRule(_localctx, 56, RULE_mislexedFcon);
		try {
			State = 950;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case RDCON:
				EnterOuterAlt(_localctx, 1);
				{
				State = 942;
				Match(RDCON);
				State = 943;
				Match(SPOFF);
				State = 944;
				Match(RDCON);
				State = 945;
				Match(SPON);
				}
				break;
			case NAME:
				EnterOuterAlt(_localctx, 2);
				{
				State = 946;
				Match(NAME);
				State = 947;
				Match(SPOFF);
				State = 948;
				Match(RDCON);
				State = 949;
				Match(SPON);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ModuleContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ModuleStmtContext moduleStmt() {
			return GetRuleContext<ModuleStmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ModuleBodyContext moduleBody() {
			return GetRuleContext<ModuleBodyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public EndModuleStmtContext endModuleStmt() {
			return GetRuleContext<EndModuleStmtContext>(0);
		}
		public ModuleContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_module; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortran90ParserListener typedListener = listener as IFortran90ParserListener;
			if (typedListener != null) typedListener.EnterModule(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortran90ParserListener typedListener = listener as IFortran90ParserListener;
			if (typedListener != null) typedListener.ExitModule(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFortran90ParserVisitor<TResult> typedVisitor = visitor as IFortran90ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitModule(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ModuleContext module() {
		ModuleContext _localctx = new ModuleContext(Context, State);
		EnterRule(_localctx, 58, RULE_module);
		try {
			State = 959;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,33,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 952;
				moduleStmt();
				State = 953;
				moduleBody(0);
				State = 954;
				endModuleStmt();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 956;
				moduleStmt();
				State = 957;
				endModuleStmt();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EndModuleStmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode END() { return GetToken(Fortran90Parser.END, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MODULE() { return GetToken(Fortran90Parser.MODULE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NAME() { return GetToken(Fortran90Parser.NAME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ENDMODULE() { return GetToken(Fortran90Parser.ENDMODULE, 0); }
		public EndModuleStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_endModuleStmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortran90ParserListener typedListener = listener as IFortran90ParserListener;
			if (typedListener != null) typedListener.EnterEndModuleStmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortran90ParserListener typedListener = listener as IFortran90ParserListener;
			if (typedListener != null) typedListener.ExitEndModuleStmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFortran90ParserVisitor<TResult> typedVisitor = visitor as IFortran90ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEndModuleStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EndModuleStmtContext endModuleStmt() {
		EndModuleStmtContext _localctx = new EndModuleStmtContext(Context, State);
		EnterRule(_localctx, 60, RULE_endModuleStmt);
		try {
			State = 971;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,36,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 961;
				Match(END);
				State = 962;
				Match(MODULE);
				State = 964;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,34,Context) ) {
				case 1:
					{
					State = 963;
					Match(NAME);
					}
					break;
				}
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 966;
				Match(ENDMODULE);
				State = 968;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,35,Context) ) {
				case 1:
					{
					State = 967;
					Match(NAME);
					}
					break;
				}
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 970;
				Match(END);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EntryStmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ENTRY() { return GetToken(Fortran90Parser.ENTRY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NAME() { return GetTokens(Fortran90Parser.NAME); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NAME(int i) {
			return GetToken(Fortran90Parser.NAME, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SubroutineParListContext subroutineParList() {
			return GetRuleContext<SubroutineParListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RESULT() { return GetToken(Fortran90Parser.RESULT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(Fortran90Parser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(Fortran90Parser.RPAREN, 0); }
		public EntryStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_entryStmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortran90ParserListener typedListener = listener as IFortran90ParserListener;
			if (typedListener != null) typedListener.EnterEntryStmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortran90ParserListener typedListener = listener as IFortran90ParserListener;
			if (typedListener != null) typedListener.ExitEntryStmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFortran90ParserVisitor<TResult> typedVisitor = visitor as IFortran90ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEntryStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EntryStmtContext entryStmt() {
		EntryStmtContext _localctx = new EntryStmtContext(Context, State);
		EnterRule(_localctx, 62, RULE_entryStmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 973;
			Match(ENTRY);
			State = 974;
			Match(NAME);
			State = 975;
			subroutineParList();
			State = 976;
			Match(RESULT);
			State = 977;
			Match(LPAREN);
			State = 978;
			Match(NAME);
			State = 979;
			Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SubroutineParListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(Fortran90Parser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(Fortran90Parser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SubroutineParsContext subroutinePars() {
			return GetRuleContext<SubroutineParsContext>(0);
		}
		public SubroutineParListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_subroutineParList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortran90ParserListener typedListener = listener as IFortran90ParserListener;
			if (typedListener != null) typedListener.EnterSubroutineParList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortran90ParserListener typedListener = listener as IFortran90ParserListener;
			if (typedListener != null) typedListener.ExitSubroutineParList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFortran90ParserVisitor<TResult> typedVisitor = visitor as IFortran90ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSubroutineParList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SubroutineParListContext subroutineParList() {
		SubroutineParListContext _localctx = new SubroutineParListContext(Context, State);
		EnterRule(_localctx, 64, RULE_subroutineParList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 986;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LPAREN) {
				{
				State = 981;
				Match(LPAREN);
				State = 983;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==NAME || _la==STAR) {
					{
					State = 982;
					subroutinePars();
					}
				}

				State = 985;
				Match(RPAREN);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SubroutineParsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SubroutineParContext[] subroutinePar() {
			return GetRuleContexts<SubroutineParContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SubroutineParContext subroutinePar(int i) {
			return GetRuleContext<SubroutineParContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(Fortran90Parser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(Fortran90Parser.COMMA, i);
		}
		public SubroutineParsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_subroutinePars; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortran90ParserListener typedListener = listener as IFortran90ParserListener;
			if (typedListener != null) typedListener.EnterSubroutinePars(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortran90ParserListener typedListener = listener as IFortran90ParserListener;
			if (typedListener != null) typedListener.ExitSubroutinePars(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFortran90ParserVisitor<TResult> typedVisitor = visitor as IFortran90ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSubroutinePars(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SubroutineParsContext subroutinePars() {
		SubroutineParsContext _localctx = new SubroutineParsContext(Context, State);
		EnterRule(_localctx, 66, RULE_subroutinePars);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 988;
			subroutinePar();
			State = 993;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 989;
				Match(COMMA);
				State = 990;
				subroutinePar();
				}
				}
				State = 995;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SubroutineParContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public DummyArgNameContext dummyArgName() {
			return GetRuleContext<DummyArgNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STAR() { return GetToken(Fortran90Parser.STAR, 0); }
		public SubroutineParContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_subroutinePar; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortran90ParserListener typedListener = listener as IFortran90ParserListener;
			if (typedListener != null) typedListener.EnterSubroutinePar(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortran90ParserListener typedListener = listener as IFortran90ParserListener;
			if (typedListener != null) typedListener.ExitSubroutinePar(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFortran90ParserVisitor<TResult> typedVisitor = visitor as IFortran90ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSubroutinePar(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SubroutineParContext subroutinePar() {
		SubroutineParContext _localctx = new SubroutineParContext(Context, State);
		EnterRule(_localctx, 68, RULE_subroutinePar);
		try {
			State = 998;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case NAME:
				EnterOuterAlt(_localctx, 1);
				{
				State = 996;
				dummyArgName();
				}
				break;
			case STAR:
				EnterOuterAlt(_localctx, 2);
				{
				State = 997;
				Match(STAR);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeclarationConstructContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public DerivedTypeDefContext derivedTypeDef() {
			return GetRuleContext<DerivedTypeDefContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public InterfaceBlockContext interfaceBlock() {
			return GetRuleContext<InterfaceBlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeDeclarationStmtContext typeDeclarationStmt() {
			return GetRuleContext<TypeDeclarationStmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SpecificationStmtContext specificationStmt() {
			return GetRuleContext<SpecificationStmtContext>(0);
		}
		public DeclarationConstructContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_declarationConstruct; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortran90ParserListener typedListener = listener as IFortran90ParserListener;
			if (typedListener != null) typedListener.EnterDeclarationConstruct(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortran90ParserListener typedListener = listener as IFortran90ParserListener;
			if (typedListener != null) typedListener.ExitDeclarationConstruct(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFortran90ParserVisitor<TResult> typedVisitor = visitor as IFortran90ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeclarationConstruct(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DeclarationConstructContext declarationConstruct() {
		DeclarationConstructContext _localctx = new DeclarationConstructContext(Context, State);
		EnterRule(_localctx, 70, RULE_declarationConstruct);
		try {
			State = 1004;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,41,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1000;
				derivedTypeDef();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1001;
				interfaceBlock();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1002;
				typeDeclarationStmt();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1003;
				specificationStmt();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SpecificationStmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public CommonStmtContext commonStmt() {
			return GetRuleContext<CommonStmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DataStmtContext dataStmt() {
			return GetRuleContext<DataStmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DimensionStmtContext dimensionStmt() {
			return GetRuleContext<DimensionStmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public EquivalenceStmtContext equivalenceStmt() {
			return GetRuleContext<EquivalenceStmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExternalStmtContext externalStmt() {
			return GetRuleContext<ExternalStmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IntrinsicStmtContext intrinsicStmt() {
			return GetRuleContext<IntrinsicStmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SaveStmtContext saveStmt() {
			return GetRuleContext<SaveStmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AccessStmtContext accessStmt() {
			return GetRuleContext<AccessStmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AllocatableStmtContext allocatableStmt() {
			return GetRuleContext<AllocatableStmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IntentStmtContext intentStmt() {
			return GetRuleContext<IntentStmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NamelistStmtContext namelistStmt() {
			return GetRuleContext<NamelistStmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public OptionalStmtContext optionalStmt() {
			return GetRuleContext<OptionalStmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PointerStmtContext pointerStmt() {
			return GetRuleContext<PointerStmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TargetStmtContext targetStmt() {
			return GetRuleContext<TargetStmtContext>(0);
		}
		public SpecificationStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_specificationStmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortran90ParserListener typedListener = listener as IFortran90ParserListener;
			if (typedListener != null) typedListener.EnterSpecificationStmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortran90ParserListener typedListener = listener as IFortran90ParserListener;
			if (typedListener != null) typedListener.ExitSpecificationStmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFortran90ParserVisitor<TResult> typedVisitor = visitor as IFortran90ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSpecificationStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SpecificationStmtContext specificationStmt() {
		SpecificationStmtContext _localctx = new SpecificationStmtContext(Context, State);
		EnterRule(_localctx, 72, RULE_specificationStmt);
		try {
			State = 1020;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case COMMON:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1006;
				commonStmt();
				}
				break;
			case DATA:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1007;
				dataStmt();
				}
				break;
			case DIMENSION:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1008;
				dimensionStmt();
				}
				break;
			case EQUIVALENCE:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1009;
				equivalenceStmt();
				}
				break;
			case EXTERNAL:
				EnterOuterAlt(_localctx, 5);
				{
				State = 1010;
				externalStmt();
				}
				break;
			case INTRINSIC:
				EnterOuterAlt(_localctx, 6);
				{
				State = 1011;
				intrinsicStmt();
				}
				break;
			case SAVE:
				EnterOuterAlt(_localctx, 7);
				{
				State = 1012;
				saveStmt();
				}
				break;
			case ACCESSSPEC:
				EnterOuterAlt(_localctx, 8);
				{
				State = 1013;
				accessStmt();
				}
				break;
			case ALLOCATABLE:
				EnterOuterAlt(_localctx, 9);
				{
				State = 1014;
				allocatableStmt();
				}
				break;
			case INTENT:
				EnterOuterAlt(_localctx, 10);
				{
				State = 1015;
				intentStmt();
				}
				break;
			case NAMELIST:
				EnterOuterAlt(_localctx, 11);
				{
				State = 1016;
				namelistStmt();
				}
				break;
			case OPTIONAL:
				EnterOuterAlt(_localctx, 12);
				{
				State = 1017;
				optionalStmt();
				}
				break;
			case POINTER:
				EnterOuterAlt(_localctx, 13);
				{
				State = 1018;
				pointerStmt();
				}
				break;
			case TARGET:
				EnterOuterAlt(_localctx, 14);
				{
				State = 1019;
				targetStmt();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TargetStmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TARGET() { return GetToken(Fortran90Parser.TARGET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TargetObjectListContext targetObjectList() {
			return GetRuleContext<TargetObjectListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOUBLECOLON() { return GetToken(Fortran90Parser.DOUBLECOLON, 0); }
		public TargetStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_targetStmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortran90ParserListener typedListener = listener as IFortran90ParserListener;
			if (typedListener != null) typedListener.EnterTargetStmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortran90ParserListener typedListener = listener as IFortran90ParserListener;
			if (typedListener != null) typedListener.ExitTargetStmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFortran90ParserVisitor<TResult> typedVisitor = visitor as IFortran90ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTargetStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TargetStmtContext targetStmt() {
		TargetStmtContext _localctx = new TargetStmtContext(Context, State);
		EnterRule(_localctx, 74, RULE_targetStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1022;
			Match(TARGET);
			State = 1024;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==DOUBLECOLON) {
				{
				State = 1023;
				Match(DOUBLECOLON);
				}
			}

			State = 1026;
			targetObjectList();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TargetObjectListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TargetObjectContext[] targetObject() {
			return GetRuleContexts<TargetObjectContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TargetObjectContext targetObject(int i) {
			return GetRuleContext<TargetObjectContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(Fortran90Parser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(Fortran90Parser.COMMA, i);
		}
		public TargetObjectListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_targetObjectList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortran90ParserListener typedListener = listener as IFortran90ParserListener;
			if (typedListener != null) typedListener.EnterTargetObjectList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortran90ParserListener typedListener = listener as IFortran90ParserListener;
			if (typedListener != null) typedListener.ExitTargetObjectList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFortran90ParserVisitor<TResult> typedVisitor = visitor as IFortran90ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTargetObjectList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TargetObjectListContext targetObjectList() {
		TargetObjectListContext _localctx = new TargetObjectListContext(Context, State);
		EnterRule(_localctx, 76, RULE_targetObjectList);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1028;
			targetObject();
			State = 1033;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,44,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 1029;
					Match(COMMA);
					State = 1030;
					targetObject();
					}
					} 
				}
				State = 1035;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,44,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TargetObjectContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ObjectNameContext objectName() {
			return GetRuleContext<ObjectNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(Fortran90Parser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ArraySpecContext arraySpec() {
			return GetRuleContext<ArraySpecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(Fortran90Parser.RPAREN, 0); }
		public TargetObjectContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_targetObject; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortran90ParserListener typedListener = listener as IFortran90ParserListener;
			if (typedListener != null) typedListener.EnterTargetObject(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortran90ParserListener typedListener = listener as IFortran90ParserListener;
			if (typedListener != null) typedListener.ExitTargetObject(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFortran90ParserVisitor<TResult> typedVisitor = visitor as IFortran90ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTargetObject(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TargetObjectContext targetObject() {
		TargetObjectContext _localctx = new TargetObjectContext(Context, State);
		EnterRule(_localctx, 78, RULE_targetObject);
		try {
			State = 1042;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,45,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1036;
				objectName();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1037;
				objectName();
				State = 1038;
				Match(LPAREN);
				State = 1039;
				arraySpec();
				State = 1040;
				Match(RPAREN);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PointerStmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode POINTER() { return GetToken(Fortran90Parser.POINTER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public PointerStmtObjectListContext pointerStmtObjectList() {
			return GetRuleContext<PointerStmtObjectListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOUBLECOLON() { return GetToken(Fortran90Parser.DOUBLECOLON, 0); }
		public PointerStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pointerStmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortran90ParserListener typedListener = listener as IFortran90ParserListener;
			if (typedListener != null) typedListener.EnterPointerStmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortran90ParserListener typedListener = listener as IFortran90ParserListener;
			if (typedListener != null) typedListener.ExitPointerStmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFortran90ParserVisitor<TResult> typedVisitor = visitor as IFortran90ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPointerStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PointerStmtContext pointerStmt() {
		PointerStmtContext _localctx = new PointerStmtContext(Context, State);
		EnterRule(_localctx, 80, RULE_pointerStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1044;
			Match(POINTER);
			State = 1046;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==DOUBLECOLON) {
				{
				State = 1045;
				Match(DOUBLECOLON);
				}
			}

			State = 1048;
			pointerStmtObjectList();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PointerStmtObjectListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public PointerStmtObjectContext[] pointerStmtObject() {
			return GetRuleContexts<PointerStmtObjectContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public PointerStmtObjectContext pointerStmtObject(int i) {
			return GetRuleContext<PointerStmtObjectContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(Fortran90Parser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(Fortran90Parser.COMMA, i);
		}
		public PointerStmtObjectListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pointerStmtObjectList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortran90ParserListener typedListener = listener as IFortran90ParserListener;
			if (typedListener != null) typedListener.EnterPointerStmtObjectList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortran90ParserListener typedListener = listener as IFortran90ParserListener;
			if (typedListener != null) typedListener.ExitPointerStmtObjectList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFortran90ParserVisitor<TResult> typedVisitor = visitor as IFortran90ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPointerStmtObjectList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PointerStmtObjectListContext pointerStmtObjectList() {
		PointerStmtObjectListContext _localctx = new PointerStmtObjectListContext(Context, State);
		EnterRule(_localctx, 82, RULE_pointerStmtObjectList);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1050;
			pointerStmtObject();
			State = 1055;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,47,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 1051;
					Match(COMMA);
					State = 1052;
					pointerStmtObject();
					}
					} 
				}
				State = 1057;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,47,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PointerStmtObjectContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ObjectNameContext objectName() {
			return GetRuleContext<ObjectNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(Fortran90Parser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public DeferredShapeSpecListContext deferredShapeSpecList() {
			return GetRuleContext<DeferredShapeSpecListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(Fortran90Parser.RPAREN, 0); }
		public PointerStmtObjectContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pointerStmtObject; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortran90ParserListener typedListener = listener as IFortran90ParserListener;
			if (typedListener != null) typedListener.EnterPointerStmtObject(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortran90ParserListener typedListener = listener as IFortran90ParserListener;
			if (typedListener != null) typedListener.ExitPointerStmtObject(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFortran90ParserVisitor<TResult> typedVisitor = visitor as IFortran90ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPointerStmtObject(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PointerStmtObjectContext pointerStmtObject() {
		PointerStmtObjectContext _localctx = new PointerStmtObjectContext(Context, State);
		EnterRule(_localctx, 84, RULE_pointerStmtObject);
		try {
			State = 1064;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,48,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1058;
				objectName();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1059;
				objectName();
				State = 1060;
				Match(LPAREN);
				State = 1061;
				deferredShapeSpecList();
				State = 1062;
				Match(RPAREN);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OptionalStmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPTIONAL() { return GetToken(Fortran90Parser.OPTIONAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public OptionalParListContext optionalParList() {
			return GetRuleContext<OptionalParListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOUBLECOLON() { return GetToken(Fortran90Parser.DOUBLECOLON, 0); }
		public OptionalStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_optionalStmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortran90ParserListener typedListener = listener as IFortran90ParserListener;
			if (typedListener != null) typedListener.EnterOptionalStmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortran90ParserListener typedListener = listener as IFortran90ParserListener;
			if (typedListener != null) typedListener.ExitOptionalStmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFortran90ParserVisitor<TResult> typedVisitor = visitor as IFortran90ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOptionalStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OptionalStmtContext optionalStmt() {
		OptionalStmtContext _localctx = new OptionalStmtContext(Context, State);
		EnterRule(_localctx, 86, RULE_optionalStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1066;
			Match(OPTIONAL);
			State = 1068;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==DOUBLECOLON) {
				{
				State = 1067;
				Match(DOUBLECOLON);
				}
			}

			State = 1070;
			optionalParList();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OptionalParListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public OptionalParContext[] optionalPar() {
			return GetRuleContexts<OptionalParContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public OptionalParContext optionalPar(int i) {
			return GetRuleContext<OptionalParContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(Fortran90Parser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(Fortran90Parser.COMMA, i);
		}
		public OptionalParListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_optionalParList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortran90ParserListener typedListener = listener as IFortran90ParserListener;
			if (typedListener != null) typedListener.EnterOptionalParList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortran90ParserListener typedListener = listener as IFortran90ParserListener;
			if (typedListener != null) typedListener.ExitOptionalParList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFortran90ParserVisitor<TResult> typedVisitor = visitor as IFortran90ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOptionalParList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OptionalParListContext optionalParList() {
		OptionalParListContext _localctx = new OptionalParListContext(Context, State);
		EnterRule(_localctx, 88, RULE_optionalParList);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1072;
			optionalPar();
			State = 1077;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,50,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 1073;
					Match(COMMA);
					State = 1074;
					optionalPar();
					}
					} 
				}
				State = 1079;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,50,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OptionalParContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public DummyArgNameContext dummyArgName() {
			return GetRuleContext<DummyArgNameContext>(0);
		}
		public OptionalParContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_optionalPar; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortran90ParserListener typedListener = listener as IFortran90ParserListener;
			if (typedListener != null) typedListener.EnterOptionalPar(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortran90ParserListener typedListener = listener as IFortran90ParserListener;
			if (typedListener != null) typedListener.ExitOptionalPar(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFortran90ParserVisitor<TResult> typedVisitor = visitor as IFortran90ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOptionalPar(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OptionalParContext optionalPar() {
		OptionalParContext _localctx = new OptionalParContext(Context, State);
		EnterRule(_localctx, 90, RULE_optionalPar);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1080;
			dummyArgName();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NamelistStmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NAMELIST() { return GetToken(Fortran90Parser.NAMELIST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NamelistGroupsContext namelistGroups() {
			return GetRuleContext<NamelistGroupsContext>(0);
		}
		public NamelistStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_namelistStmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortran90ParserListener typedListener = listener as IFortran90ParserListener;
			if (typedListener != null) typedListener.EnterNamelistStmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortran90ParserListener typedListener = listener as IFortran90ParserListener;
			if (typedListener != null) typedListener.ExitNamelistStmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFortran90ParserVisitor<TResult> typedVisitor = visitor as IFortran90ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNamelistStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NamelistStmtContext namelistStmt() {
		NamelistStmtContext _localctx = new NamelistStmtContext(Context, State);
		EnterRule(_localctx, 92, RULE_namelistStmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1082;
			Match(NAMELIST);
			State = 1083;
			namelistGroups(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NamelistGroupsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] DIV() { return GetTokens(Fortran90Parser.DIV); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DIV(int i) {
			return GetToken(Fortran90Parser.DIV, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NamelistGroupNameContext namelistGroupName() {
			return GetRuleContext<NamelistGroupNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NamelistGroupObjectContext namelistGroupObject() {
			return GetRuleContext<NamelistGroupObjectContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NamelistGroupsContext namelistGroups() {
			return GetRuleContext<NamelistGroupsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA() { return GetToken(Fortran90Parser.COMMA, 0); }
		public NamelistGroupsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_namelistGroups; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortran90ParserListener typedListener = listener as IFortran90ParserListener;
			if (typedListener != null) typedListener.EnterNamelistGroups(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortran90ParserListener typedListener = listener as IFortran90ParserListener;
			if (typedListener != null) typedListener.ExitNamelistGroups(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFortran90ParserVisitor<TResult> typedVisitor = visitor as IFortran90ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNamelistGroups(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NamelistGroupsContext namelistGroups() {
		return namelistGroups(0);
	}

	private NamelistGroupsContext namelistGroups(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		NamelistGroupsContext _localctx = new NamelistGroupsContext(Context, _parentState);
		NamelistGroupsContext _prevctx = _localctx;
		int _startState = 94;
		EnterRecursionRule(_localctx, 94, RULE_namelistGroups, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 1086;
			Match(DIV);
			State = 1087;
			namelistGroupName();
			State = 1088;
			Match(DIV);
			State = 1089;
			namelistGroupObject();
			}
			Context.Stop = TokenStream.LT(-1);
			State = 1109;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,52,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 1107;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,51,Context) ) {
					case 1:
						{
						_localctx = new NamelistGroupsContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_namelistGroups);
						State = 1091;
						if (!(Precpred(Context, 3))) throw new FailedPredicateException(this, "Precpred(Context, 3)");
						State = 1092;
						Match(DIV);
						State = 1093;
						namelistGroupName();
						State = 1094;
						Match(DIV);
						State = 1095;
						namelistGroupObject();
						}
						break;
					case 2:
						{
						_localctx = new NamelistGroupsContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_namelistGroups);
						State = 1097;
						if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
						State = 1098;
						Match(COMMA);
						State = 1099;
						Match(DIV);
						State = 1100;
						namelistGroupName();
						State = 1101;
						Match(DIV);
						State = 1102;
						namelistGroupObject();
						}
						break;
					case 3:
						{
						_localctx = new NamelistGroupsContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_namelistGroups);
						State = 1104;
						if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
						State = 1105;
						Match(COMMA);
						State = 1106;
						namelistGroupObject();
						}
						break;
					}
					} 
				}
				State = 1111;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,52,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class NamelistGroupNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NAME() { return GetToken(Fortran90Parser.NAME, 0); }
		public NamelistGroupNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_namelistGroupName; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortran90ParserListener typedListener = listener as IFortran90ParserListener;
			if (typedListener != null) typedListener.EnterNamelistGroupName(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortran90ParserListener typedListener = listener as IFortran90ParserListener;
			if (typedListener != null) typedListener.ExitNamelistGroupName(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFortran90ParserVisitor<TResult> typedVisitor = visitor as IFortran90ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNamelistGroupName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NamelistGroupNameContext namelistGroupName() {
		NamelistGroupNameContext _localctx = new NamelistGroupNameContext(Context, State);
		EnterRule(_localctx, 96, RULE_namelistGroupName);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1112;
			Match(NAME);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NamelistGroupObjectContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public VariableNameContext variableName() {
			return GetRuleContext<VariableNameContext>(0);
		}
		public NamelistGroupObjectContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_namelistGroupObject; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortran90ParserListener typedListener = listener as IFortran90ParserListener;
			if (typedListener != null) typedListener.EnterNamelistGroupObject(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortran90ParserListener typedListener = listener as IFortran90ParserListener;
			if (typedListener != null) typedListener.ExitNamelistGroupObject(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFortran90ParserVisitor<TResult> typedVisitor = visitor as IFortran90ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNamelistGroupObject(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NamelistGroupObjectContext namelistGroupObject() {
		NamelistGroupObjectContext _localctx = new NamelistGroupObjectContext(Context, State);
		EnterRule(_localctx, 98, RULE_namelistGroupObject);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1114;
			variableName();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IntentStmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTENT() { return GetToken(Fortran90Parser.INTENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(Fortran90Parser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IntentSpecContext intentSpec() {
			return GetRuleContext<IntentSpecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(Fortran90Parser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IntentParListContext intentParList() {
			return GetRuleContext<IntentParListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOUBLECOLON() { return GetToken(Fortran90Parser.DOUBLECOLON, 0); }
		public IntentStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_intentStmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortran90ParserListener typedListener = listener as IFortran90ParserListener;
			if (typedListener != null) typedListener.EnterIntentStmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortran90ParserListener typedListener = listener as IFortran90ParserListener;
			if (typedListener != null) typedListener.ExitIntentStmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFortran90ParserVisitor<TResult> typedVisitor = visitor as IFortran90ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIntentStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IntentStmtContext intentStmt() {
		IntentStmtContext _localctx = new IntentStmtContext(Context, State);
		EnterRule(_localctx, 100, RULE_intentStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1116;
			Match(INTENT);
			State = 1117;
			Match(LPAREN);
			State = 1118;
			intentSpec();
			State = 1119;
			Match(RPAREN);
			State = 1121;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==DOUBLECOLON) {
				{
				State = 1120;
				Match(DOUBLECOLON);
				}
			}

			State = 1123;
			intentParList();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IntentParListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IntentParContext[] intentPar() {
			return GetRuleContexts<IntentParContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IntentParContext intentPar(int i) {
			return GetRuleContext<IntentParContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA() { return GetToken(Fortran90Parser.COMMA, 0); }
		public IntentParListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_intentParList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortran90ParserListener typedListener = listener as IFortran90ParserListener;
			if (typedListener != null) typedListener.EnterIntentParList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortran90ParserListener typedListener = listener as IFortran90ParserListener;
			if (typedListener != null) typedListener.ExitIntentParList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFortran90ParserVisitor<TResult> typedVisitor = visitor as IFortran90ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIntentParList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IntentParListContext intentParList() {
		IntentParListContext _localctx = new IntentParListContext(Context, State);
		EnterRule(_localctx, 102, RULE_intentParList);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1125;
			intentPar();
			{
			State = 1126;
			Match(COMMA);
			State = 1127;
			intentPar();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IntentParContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public DummyArgNameContext dummyArgName() {
			return GetRuleContext<DummyArgNameContext>(0);
		}
		public IntentParContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_intentPar; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortran90ParserListener typedListener = listener as IFortran90ParserListener;
			if (typedListener != null) typedListener.EnterIntentPar(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortran90ParserListener typedListener = listener as IFortran90ParserListener;
			if (typedListener != null) typedListener.ExitIntentPar(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFortran90ParserVisitor<TResult> typedVisitor = visitor as IFortran90ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIntentPar(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IntentParContext intentPar() {
		IntentParContext _localctx = new IntentParContext(Context, State);
		EnterRule(_localctx, 104, RULE_intentPar);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1129;
			dummyArgName();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DummyArgNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NAME() { return GetToken(Fortran90Parser.NAME, 0); }
		public DummyArgNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dummyArgName; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortran90ParserListener typedListener = listener as IFortran90ParserListener;
			if (typedListener != null) typedListener.EnterDummyArgName(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortran90ParserListener typedListener = listener as IFortran90ParserListener;
			if (typedListener != null) typedListener.ExitDummyArgName(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFortran90ParserVisitor<TResult> typedVisitor = visitor as IFortran90ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDummyArgName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DummyArgNameContext dummyArgName() {
		DummyArgNameContext _localctx = new DummyArgNameContext(Context, State);
		EnterRule(_localctx, 106, RULE_dummyArgName);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1131;
			Match(NAME);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IntentSpecContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IN() { return GetToken(Fortran90Parser.IN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OUT() { return GetToken(Fortran90Parser.OUT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INOUT() { return GetToken(Fortran90Parser.INOUT, 0); }
		public IntentSpecContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_intentSpec; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortran90ParserListener typedListener = listener as IFortran90ParserListener;
			if (typedListener != null) typedListener.EnterIntentSpec(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortran90ParserListener typedListener = listener as IFortran90ParserListener;
			if (typedListener != null) typedListener.ExitIntentSpec(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFortran90ParserVisitor<TResult> typedVisitor = visitor as IFortran90ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIntentSpec(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IntentSpecContext intentSpec() {
		IntentSpecContext _localctx = new IntentSpecContext(Context, State);
		EnterRule(_localctx, 108, RULE_intentSpec);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1133;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 3670016L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AllocatableStmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALLOCATABLE() { return GetToken(Fortran90Parser.ALLOCATABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ArrayAllocationListContext arrayAllocationList() {
			return GetRuleContext<ArrayAllocationListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOUBLECOLON() { return GetToken(Fortran90Parser.DOUBLECOLON, 0); }
		public AllocatableStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_allocatableStmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortran90ParserListener typedListener = listener as IFortran90ParserListener;
			if (typedListener != null) typedListener.EnterAllocatableStmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortran90ParserListener typedListener = listener as IFortran90ParserListener;
			if (typedListener != null) typedListener.ExitAllocatableStmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFortran90ParserVisitor<TResult> typedVisitor = visitor as IFortran90ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAllocatableStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AllocatableStmtContext allocatableStmt() {
		AllocatableStmtContext _localctx = new AllocatableStmtContext(Context, State);
		EnterRule(_localctx, 110, RULE_allocatableStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1135;
			Match(ALLOCATABLE);
			State = 1137;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==DOUBLECOLON) {
				{
				State = 1136;
				Match(DOUBLECOLON);
				}
			}

			State = 1139;
			arrayAllocationList();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArrayAllocationListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ArrayAllocationContext[] arrayAllocation() {
			return GetRuleContexts<ArrayAllocationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArrayAllocationContext arrayAllocation(int i) {
			return GetRuleContext<ArrayAllocationContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(Fortran90Parser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(Fortran90Parser.COMMA, i);
		}
		public ArrayAllocationListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arrayAllocationList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortran90ParserListener typedListener = listener as IFortran90ParserListener;
			if (typedListener != null) typedListener.EnterArrayAllocationList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortran90ParserListener typedListener = listener as IFortran90ParserListener;
			if (typedListener != null) typedListener.ExitArrayAllocationList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFortran90ParserVisitor<TResult> typedVisitor = visitor as IFortran90ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArrayAllocationList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArrayAllocationListContext arrayAllocationList() {
		ArrayAllocationListContext _localctx = new ArrayAllocationListContext(Context, State);
		EnterRule(_localctx, 112, RULE_arrayAllocationList);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1141;
			arrayAllocation();
			State = 1146;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,55,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 1142;
					Match(COMMA);
					State = 1143;
					arrayAllocation();
					}
					} 
				}
				State = 1148;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,55,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArrayAllocationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ArrayNameContext arrayName() {
			return GetRuleContext<ArrayNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(Fortran90Parser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public DeferredShapeSpecListContext deferredShapeSpecList() {
			return GetRuleContext<DeferredShapeSpecListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(Fortran90Parser.RPAREN, 0); }
		public ArrayAllocationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arrayAllocation; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortran90ParserListener typedListener = listener as IFortran90ParserListener;
			if (typedListener != null) typedListener.EnterArrayAllocation(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortran90ParserListener typedListener = listener as IFortran90ParserListener;
			if (typedListener != null) typedListener.ExitArrayAllocation(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFortran90ParserVisitor<TResult> typedVisitor = visitor as IFortran90ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArrayAllocation(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArrayAllocationContext arrayAllocation() {
		ArrayAllocationContext _localctx = new ArrayAllocationContext(Context, State);
		EnterRule(_localctx, 114, RULE_arrayAllocation);
		try {
			State = 1155;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,56,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1149;
				arrayName();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1150;
				arrayName();
				State = 1151;
				Match(LPAREN);
				State = 1152;
				deferredShapeSpecList();
				State = 1153;
				Match(RPAREN);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArrayNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentContext ident() {
			return GetRuleContext<IdentContext>(0);
		}
		public ArrayNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arrayName; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortran90ParserListener typedListener = listener as IFortran90ParserListener;
			if (typedListener != null) typedListener.EnterArrayName(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortran90ParserListener typedListener = listener as IFortran90ParserListener;
			if (typedListener != null) typedListener.ExitArrayName(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFortran90ParserVisitor<TResult> typedVisitor = visitor as IFortran90ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArrayName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArrayNameContext arrayName() {
		ArrayNameContext _localctx = new ArrayNameContext(Context, State);
		EnterRule(_localctx, 116, RULE_arrayName);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1157;
			ident();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AccessStmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ACCESSSPEC() { return GetToken(Fortran90Parser.ACCESSSPEC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public AccessIdListContext accessIdList() {
			return GetRuleContext<AccessIdListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOUBLECOLON() { return GetToken(Fortran90Parser.DOUBLECOLON, 0); }
		public AccessStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_accessStmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortran90ParserListener typedListener = listener as IFortran90ParserListener;
			if (typedListener != null) typedListener.EnterAccessStmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortran90ParserListener typedListener = listener as IFortran90ParserListener;
			if (typedListener != null) typedListener.ExitAccessStmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFortran90ParserVisitor<TResult> typedVisitor = visitor as IFortran90ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAccessStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AccessStmtContext accessStmt() {
		AccessStmtContext _localctx = new AccessStmtContext(Context, State);
		EnterRule(_localctx, 118, RULE_accessStmt);
		int _la;
		try {
			State = 1165;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,58,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1159;
				Match(ACCESSSPEC);
				State = 1161;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==DOUBLECOLON) {
					{
					State = 1160;
					Match(DOUBLECOLON);
					}
				}

				State = 1163;
				accessIdList();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1164;
				Match(ACCESSSPEC);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AccessIdListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public AccessIdContext[] accessId() {
			return GetRuleContexts<AccessIdContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AccessIdContext accessId(int i) {
			return GetRuleContext<AccessIdContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(Fortran90Parser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(Fortran90Parser.COMMA, i);
		}
		public AccessIdListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_accessIdList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortran90ParserListener typedListener = listener as IFortran90ParserListener;
			if (typedListener != null) typedListener.EnterAccessIdList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortran90ParserListener typedListener = listener as IFortran90ParserListener;
			if (typedListener != null) typedListener.ExitAccessIdList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFortran90ParserVisitor<TResult> typedVisitor = visitor as IFortran90ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAccessIdList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AccessIdListContext accessIdList() {
		AccessIdListContext _localctx = new AccessIdListContext(Context, State);
		EnterRule(_localctx, 120, RULE_accessIdList);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1167;
			accessId();
			State = 1172;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,59,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 1168;
					Match(COMMA);
					State = 1169;
					accessId();
					}
					} 
				}
				State = 1174;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,59,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AccessIdContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public GenericNameContext genericName() {
			return GetRuleContext<GenericNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public GenericSpecContext genericSpec() {
			return GetRuleContext<GenericSpecContext>(0);
		}
		public AccessIdContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_accessId; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortran90ParserListener typedListener = listener as IFortran90ParserListener;
			if (typedListener != null) typedListener.EnterAccessId(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortran90ParserListener typedListener = listener as IFortran90ParserListener;
			if (typedListener != null) typedListener.ExitAccessId(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFortran90ParserVisitor<TResult> typedVisitor = visitor as IFortran90ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAccessId(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AccessIdContext accessId() {
		AccessIdContext _localctx = new AccessIdContext(Context, State);
		EnterRule(_localctx, 122, RULE_accessId);
		try {
			State = 1177;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case NAME:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1175;
				genericName();
				}
				break;
			case OPERATOR:
			case ASSIGNMENT:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1176;
				genericSpec();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GenericNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentContext ident() {
			return GetRuleContext<IdentContext>(0);
		}
		public GenericNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_genericName; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortran90ParserListener typedListener = listener as IFortran90ParserListener;
			if (typedListener != null) typedListener.EnterGenericName(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortran90ParserListener typedListener = listener as IFortran90ParserListener;
			if (typedListener != null) typedListener.ExitGenericName(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFortran90ParserVisitor<TResult> typedVisitor = visitor as IFortran90ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGenericName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public GenericNameContext genericName() {
		GenericNameContext _localctx = new GenericNameContext(Context, State);
		EnterRule(_localctx, 124, RULE_genericName);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1179;
			ident();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SaveStmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SAVE() { return GetToken(Fortran90Parser.SAVE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SavedEntityListContext savedEntityList() {
			return GetRuleContext<SavedEntityListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOUBLECOLON() { return GetToken(Fortran90Parser.DOUBLECOLON, 0); }
		public SaveStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_saveStmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortran90ParserListener typedListener = listener as IFortran90ParserListener;
			if (typedListener != null) typedListener.EnterSaveStmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortran90ParserListener typedListener = listener as IFortran90ParserListener;
			if (typedListener != null) typedListener.ExitSaveStmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFortran90ParserVisitor<TResult> typedVisitor = visitor as IFortran90ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSaveStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SaveStmtContext saveStmt() {
		SaveStmtContext _localctx = new SaveStmtContext(Context, State);
		EnterRule(_localctx, 126, RULE_saveStmt);
		try {
			State = 1187;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,61,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1181;
				Match(SAVE);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1182;
				Match(SAVE);
				State = 1183;
				savedEntityList();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1184;
				Match(SAVE);
				State = 1185;
				Match(DOUBLECOLON);
				State = 1186;
				savedEntityList();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SavedEntityListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SavedEntityContext[] savedEntity() {
			return GetRuleContexts<SavedEntityContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SavedEntityContext savedEntity(int i) {
			return GetRuleContext<SavedEntityContext>(i);
		}
		public SavedEntityListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_savedEntityList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortran90ParserListener typedListener = listener as IFortran90ParserListener;
			if (typedListener != null) typedListener.EnterSavedEntityList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortran90ParserListener typedListener = listener as IFortran90ParserListener;
			if (typedListener != null) typedListener.ExitSavedEntityList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFortran90ParserVisitor<TResult> typedVisitor = visitor as IFortran90ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSavedEntityList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SavedEntityListContext savedEntityList() {
		SavedEntityListContext _localctx = new SavedEntityListContext(Context, State);
		EnterRule(_localctx, 128, RULE_savedEntityList);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1190;
			ErrorHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 1189;
					savedEntity();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 1192;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,62,Context);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SavedEntityContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public VariableNameContext variableName() {
			return GetRuleContext<VariableNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SavedCommonBlockContext savedCommonBlock() {
			return GetRuleContext<SavedCommonBlockContext>(0);
		}
		public SavedEntityContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_savedEntity; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortran90ParserListener typedListener = listener as IFortran90ParserListener;
			if (typedListener != null) typedListener.EnterSavedEntity(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortran90ParserListener typedListener = listener as IFortran90ParserListener;
			if (typedListener != null) typedListener.ExitSavedEntity(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFortran90ParserVisitor<TResult> typedVisitor = visitor as IFortran90ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSavedEntity(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SavedEntityContext savedEntity() {
		SavedEntityContext _localctx = new SavedEntityContext(Context, State);
		EnterRule(_localctx, 130, RULE_savedEntity);
		try {
			State = 1196;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case NAME:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1194;
				variableName();
				}
				break;
			case DIV:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1195;
				savedCommonBlock();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SavedCommonBlockContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] DIV() { return GetTokens(Fortran90Parser.DIV); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DIV(int i) {
			return GetToken(Fortran90Parser.DIV, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CommonBlockNameContext commonBlockName() {
			return GetRuleContext<CommonBlockNameContext>(0);
		}
		public SavedCommonBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_savedCommonBlock; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortran90ParserListener typedListener = listener as IFortran90ParserListener;
			if (typedListener != null) typedListener.EnterSavedCommonBlock(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortran90ParserListener typedListener = listener as IFortran90ParserListener;
			if (typedListener != null) typedListener.ExitSavedCommonBlock(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFortran90ParserVisitor<TResult> typedVisitor = visitor as IFortran90ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSavedCommonBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SavedCommonBlockContext savedCommonBlock() {
		SavedCommonBlockContext _localctx = new SavedCommonBlockContext(Context, State);
		EnterRule(_localctx, 132, RULE_savedCommonBlock);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1198;
			Match(DIV);
			State = 1199;
			commonBlockName();
			State = 1200;
			Match(DIV);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IntrinsicStmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTRINSIC() { return GetToken(Fortran90Parser.INTRINSIC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IntrinsicListContext intrinsicList() {
			return GetRuleContext<IntrinsicListContext>(0);
		}
		public IntrinsicStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_intrinsicStmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortran90ParserListener typedListener = listener as IFortran90ParserListener;
			if (typedListener != null) typedListener.EnterIntrinsicStmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortran90ParserListener typedListener = listener as IFortran90ParserListener;
			if (typedListener != null) typedListener.ExitIntrinsicStmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFortran90ParserVisitor<TResult> typedVisitor = visitor as IFortran90ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIntrinsicStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IntrinsicStmtContext intrinsicStmt() {
		IntrinsicStmtContext _localctx = new IntrinsicStmtContext(Context, State);
		EnterRule(_localctx, 134, RULE_intrinsicStmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1202;
			Match(INTRINSIC);
			State = 1203;
			intrinsicList();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IntrinsicListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IntrinsicProcedureNameContext[] intrinsicProcedureName() {
			return GetRuleContexts<IntrinsicProcedureNameContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IntrinsicProcedureNameContext intrinsicProcedureName(int i) {
			return GetRuleContext<IntrinsicProcedureNameContext>(i);
		}
		public IntrinsicListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_intrinsicList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortran90ParserListener typedListener = listener as IFortran90ParserListener;
			if (typedListener != null) typedListener.EnterIntrinsicList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortran90ParserListener typedListener = listener as IFortran90ParserListener;
			if (typedListener != null) typedListener.ExitIntrinsicList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFortran90ParserVisitor<TResult> typedVisitor = visitor as IFortran90ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIntrinsicList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IntrinsicListContext intrinsicList() {
		IntrinsicListContext _localctx = new IntrinsicListContext(Context, State);
		EnterRule(_localctx, 136, RULE_intrinsicList);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1206;
			ErrorHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 1205;
					intrinsicProcedureName();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 1208;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,64,Context);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IntrinsicProcedureNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NAME() { return GetToken(Fortran90Parser.NAME, 0); }
		public IntrinsicProcedureNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_intrinsicProcedureName; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortran90ParserListener typedListener = listener as IFortran90ParserListener;
			if (typedListener != null) typedListener.EnterIntrinsicProcedureName(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortran90ParserListener typedListener = listener as IFortran90ParserListener;
			if (typedListener != null) typedListener.ExitIntrinsicProcedureName(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFortran90ParserVisitor<TResult> typedVisitor = visitor as IFortran90ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIntrinsicProcedureName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IntrinsicProcedureNameContext intrinsicProcedureName() {
		IntrinsicProcedureNameContext _localctx = new IntrinsicProcedureNameContext(Context, State);
		EnterRule(_localctx, 138, RULE_intrinsicProcedureName);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1210;
			Match(NAME);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExternalStmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXTERNAL() { return GetToken(Fortran90Parser.EXTERNAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExternalNameListContext externalNameList() {
			return GetRuleContext<ExternalNameListContext>(0);
		}
		public ExternalStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_externalStmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortran90ParserListener typedListener = listener as IFortran90ParserListener;
			if (typedListener != null) typedListener.EnterExternalStmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortran90ParserListener typedListener = listener as IFortran90ParserListener;
			if (typedListener != null) typedListener.ExitExternalStmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFortran90ParserVisitor<TResult> typedVisitor = visitor as IFortran90ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExternalStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExternalStmtContext externalStmt() {
		ExternalStmtContext _localctx = new ExternalStmtContext(Context, State);
		EnterRule(_localctx, 140, RULE_externalStmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1212;
			Match(EXTERNAL);
			State = 1213;
			externalNameList();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExternalNameListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExternalNameContext[] externalName() {
			return GetRuleContexts<ExternalNameContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExternalNameContext externalName(int i) {
			return GetRuleContext<ExternalNameContext>(i);
		}
		public ExternalNameListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_externalNameList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortran90ParserListener typedListener = listener as IFortran90ParserListener;
			if (typedListener != null) typedListener.EnterExternalNameList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortran90ParserListener typedListener = listener as IFortran90ParserListener;
			if (typedListener != null) typedListener.ExitExternalNameList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFortran90ParserVisitor<TResult> typedVisitor = visitor as IFortran90ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExternalNameList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExternalNameListContext externalNameList() {
		ExternalNameListContext _localctx = new ExternalNameListContext(Context, State);
		EnterRule(_localctx, 142, RULE_externalNameList);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1216;
			ErrorHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 1215;
					externalName();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 1218;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,65,Context);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExternalNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NAME() { return GetToken(Fortran90Parser.NAME, 0); }
		public ExternalNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_externalName; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortran90ParserListener typedListener = listener as IFortran90ParserListener;
			if (typedListener != null) typedListener.EnterExternalName(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortran90ParserListener typedListener = listener as IFortran90ParserListener;
			if (typedListener != null) typedListener.ExitExternalName(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFortran90ParserVisitor<TResult> typedVisitor = visitor as IFortran90ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExternalName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExternalNameContext externalName() {
		ExternalNameContext _localctx = new ExternalNameContext(Context, State);
		EnterRule(_localctx, 144, RULE_externalName);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1220;
			Match(NAME);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EquivalenceStmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUIVALENCE() { return GetToken(Fortran90Parser.EQUIVALENCE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public EquivalenceSetListContext equivalenceSetList() {
			return GetRuleContext<EquivalenceSetListContext>(0);
		}
		public EquivalenceStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_equivalenceStmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortran90ParserListener typedListener = listener as IFortran90ParserListener;
			if (typedListener != null) typedListener.EnterEquivalenceStmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortran90ParserListener typedListener = listener as IFortran90ParserListener;
			if (typedListener != null) typedListener.ExitEquivalenceStmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFortran90ParserVisitor<TResult> typedVisitor = visitor as IFortran90ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEquivalenceStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EquivalenceStmtContext equivalenceStmt() {
		EquivalenceStmtContext _localctx = new EquivalenceStmtContext(Context, State);
		EnterRule(_localctx, 146, RULE_equivalenceStmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1222;
			Match(EQUIVALENCE);
			State = 1223;
			equivalenceSetList();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EquivalenceSetListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public EquivalenceSetContext[] equivalenceSet() {
			return GetRuleContexts<EquivalenceSetContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public EquivalenceSetContext equivalenceSet(int i) {
			return GetRuleContext<EquivalenceSetContext>(i);
		}
		public EquivalenceSetListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_equivalenceSetList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortran90ParserListener typedListener = listener as IFortran90ParserListener;
			if (typedListener != null) typedListener.EnterEquivalenceSetList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortran90ParserListener typedListener = listener as IFortran90ParserListener;
			if (typedListener != null) typedListener.ExitEquivalenceSetList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFortran90ParserVisitor<TResult> typedVisitor = visitor as IFortran90ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEquivalenceSetList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EquivalenceSetListContext equivalenceSetList() {
		EquivalenceSetListContext _localctx = new EquivalenceSetListContext(Context, State);
		EnterRule(_localctx, 148, RULE_equivalenceSetList);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1226;
			ErrorHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 1225;
					equivalenceSet();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 1228;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,66,Context);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EquivalenceSetContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(Fortran90Parser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public EquivalenceObjectContext equivalenceObject() {
			return GetRuleContext<EquivalenceObjectContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA() { return GetToken(Fortran90Parser.COMMA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public EquivalenceObjectListContext equivalenceObjectList() {
			return GetRuleContext<EquivalenceObjectListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(Fortran90Parser.RPAREN, 0); }
		public EquivalenceSetContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_equivalenceSet; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortran90ParserListener typedListener = listener as IFortran90ParserListener;
			if (typedListener != null) typedListener.EnterEquivalenceSet(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortran90ParserListener typedListener = listener as IFortran90ParserListener;
			if (typedListener != null) typedListener.ExitEquivalenceSet(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFortran90ParserVisitor<TResult> typedVisitor = visitor as IFortran90ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEquivalenceSet(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EquivalenceSetContext equivalenceSet() {
		EquivalenceSetContext _localctx = new EquivalenceSetContext(Context, State);
		EnterRule(_localctx, 150, RULE_equivalenceSet);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1230;
			Match(LPAREN);
			State = 1231;
			equivalenceObject();
			State = 1232;
			Match(COMMA);
			State = 1233;
			equivalenceObjectList();
			State = 1234;
			Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EquivalenceObjectContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public VariableContext variable() {
			return GetRuleContext<VariableContext>(0);
		}
		public EquivalenceObjectContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_equivalenceObject; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortran90ParserListener typedListener = listener as IFortran90ParserListener;
			if (typedListener != null) typedListener.EnterEquivalenceObject(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortran90ParserListener typedListener = listener as IFortran90ParserListener;
			if (typedListener != null) typedListener.ExitEquivalenceObject(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFortran90ParserVisitor<TResult> typedVisitor = visitor as IFortran90ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEquivalenceObject(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EquivalenceObjectContext equivalenceObject() {
		EquivalenceObjectContext _localctx = new EquivalenceObjectContext(Context, State);
		EnterRule(_localctx, 152, RULE_equivalenceObject);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1236;
			variable();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EquivalenceObjectListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public EquivalenceObjectContext[] equivalenceObject() {
			return GetRuleContexts<EquivalenceObjectContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public EquivalenceObjectContext equivalenceObject(int i) {
			return GetRuleContext<EquivalenceObjectContext>(i);
		}
		public EquivalenceObjectListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_equivalenceObjectList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortran90ParserListener typedListener = listener as IFortran90ParserListener;
			if (typedListener != null) typedListener.EnterEquivalenceObjectList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortran90ParserListener typedListener = listener as IFortran90ParserListener;
			if (typedListener != null) typedListener.ExitEquivalenceObjectList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFortran90ParserVisitor<TResult> typedVisitor = visitor as IFortran90ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEquivalenceObjectList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EquivalenceObjectListContext equivalenceObjectList() {
		EquivalenceObjectListContext _localctx = new EquivalenceObjectListContext(Context, State);
		EnterRule(_localctx, 154, RULE_equivalenceObjectList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1239;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 1238;
				equivalenceObject();
				}
				}
				State = 1241;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==NAME );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DimensionStmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DIMENSION() { return GetToken(Fortran90Parser.DIMENSION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ArrayDeclaratorListContext arrayDeclaratorList() {
			return GetRuleContext<ArrayDeclaratorListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOUBLECOLON() { return GetToken(Fortran90Parser.DOUBLECOLON, 0); }
		public DimensionStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dimensionStmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortran90ParserListener typedListener = listener as IFortran90ParserListener;
			if (typedListener != null) typedListener.EnterDimensionStmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortran90ParserListener typedListener = listener as IFortran90ParserListener;
			if (typedListener != null) typedListener.ExitDimensionStmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFortran90ParserVisitor<TResult> typedVisitor = visitor as IFortran90ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDimensionStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DimensionStmtContext dimensionStmt() {
		DimensionStmtContext _localctx = new DimensionStmtContext(Context, State);
		EnterRule(_localctx, 156, RULE_dimensionStmt);
		try {
			State = 1248;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,68,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1243;
				Match(DIMENSION);
				State = 1244;
				arrayDeclaratorList();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1245;
				Match(DIMENSION);
				State = 1246;
				Match(DOUBLECOLON);
				State = 1247;
				arrayDeclaratorList();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArrayDeclaratorListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ArrayDeclaratorContext[] arrayDeclarator() {
			return GetRuleContexts<ArrayDeclaratorContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArrayDeclaratorContext arrayDeclarator(int i) {
			return GetRuleContext<ArrayDeclaratorContext>(i);
		}
		public ArrayDeclaratorListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arrayDeclaratorList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortran90ParserListener typedListener = listener as IFortran90ParserListener;
			if (typedListener != null) typedListener.EnterArrayDeclaratorList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortran90ParserListener typedListener = listener as IFortran90ParserListener;
			if (typedListener != null) typedListener.ExitArrayDeclaratorList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFortran90ParserVisitor<TResult> typedVisitor = visitor as IFortran90ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArrayDeclaratorList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArrayDeclaratorListContext arrayDeclaratorList() {
		ArrayDeclaratorListContext _localctx = new ArrayDeclaratorListContext(Context, State);
		EnterRule(_localctx, 158, RULE_arrayDeclaratorList);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1251;
			ErrorHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 1250;
					arrayDeclarator();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 1253;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,69,Context);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CommonStmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMON() { return GetToken(Fortran90Parser.COMMON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ComlistContext comlist() {
			return GetRuleContext<ComlistContext>(0);
		}
		public CommonStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_commonStmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortran90ParserListener typedListener = listener as IFortran90ParserListener;
			if (typedListener != null) typedListener.EnterCommonStmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortran90ParserListener typedListener = listener as IFortran90ParserListener;
			if (typedListener != null) typedListener.ExitCommonStmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFortran90ParserVisitor<TResult> typedVisitor = visitor as IFortran90ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCommonStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CommonStmtContext commonStmt() {
		CommonStmtContext _localctx = new CommonStmtContext(Context, State);
		EnterRule(_localctx, 160, RULE_commonStmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1255;
			Match(COMMON);
			State = 1256;
			comlist(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ComlistContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public CommonBlockObjectContext commonBlockObject() {
			return GetRuleContext<CommonBlockObjectContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ComblockContext comblock() {
			return GetRuleContext<ComblockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ComlistContext comlist() {
			return GetRuleContext<ComlistContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA() { return GetToken(Fortran90Parser.COMMA, 0); }
		public ComlistContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_comlist; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortran90ParserListener typedListener = listener as IFortran90ParserListener;
			if (typedListener != null) typedListener.EnterComlist(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortran90ParserListener typedListener = listener as IFortran90ParserListener;
			if (typedListener != null) typedListener.ExitComlist(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFortran90ParserVisitor<TResult> typedVisitor = visitor as IFortran90ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitComlist(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ComlistContext comlist() {
		return comlist(0);
	}

	private ComlistContext comlist(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ComlistContext _localctx = new ComlistContext(Context, _parentState);
		ComlistContext _prevctx = _localctx;
		int _startState = 162;
		EnterRecursionRule(_localctx, 162, RULE_comlist, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 1260;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==DIV) {
				{
				State = 1259;
				comblock();
				}
			}

			State = 1262;
			commonBlockObject();
			}
			Context.Stop = TokenStream.LT(-1);
			State = 1276;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,73,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 1274;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,72,Context) ) {
					case 1:
						{
						_localctx = new ComlistContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_comlist);
						State = 1264;
						if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
						State = 1265;
						Match(COMMA);
						State = 1267;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if (_la==DIV) {
							{
							State = 1266;
							comblock();
							}
						}

						State = 1269;
						commonBlockObject();
						}
						break;
					case 2:
						{
						_localctx = new ComlistContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_comlist);
						State = 1270;
						if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
						State = 1271;
						comblock();
						State = 1272;
						commonBlockObject();
						}
						break;
					}
					} 
				}
				State = 1278;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,73,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class CommonBlockObjectContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public VariableNameContext variableName() {
			return GetRuleContext<VariableNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArrayDeclaratorContext arrayDeclarator() {
			return GetRuleContext<ArrayDeclaratorContext>(0);
		}
		public CommonBlockObjectContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_commonBlockObject; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortran90ParserListener typedListener = listener as IFortran90ParserListener;
			if (typedListener != null) typedListener.EnterCommonBlockObject(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortran90ParserListener typedListener = listener as IFortran90ParserListener;
			if (typedListener != null) typedListener.ExitCommonBlockObject(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFortran90ParserVisitor<TResult> typedVisitor = visitor as IFortran90ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCommonBlockObject(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CommonBlockObjectContext commonBlockObject() {
		CommonBlockObjectContext _localctx = new CommonBlockObjectContext(Context, State);
		EnterRule(_localctx, 164, RULE_commonBlockObject);
		try {
			State = 1281;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,74,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1279;
				variableName();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1280;
				arrayDeclarator();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArrayDeclaratorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public VariableNameContext variableName() {
			return GetRuleContext<VariableNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(Fortran90Parser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ArraySpecContext arraySpec() {
			return GetRuleContext<ArraySpecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(Fortran90Parser.RPAREN, 0); }
		public ArrayDeclaratorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arrayDeclarator; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortran90ParserListener typedListener = listener as IFortran90ParserListener;
			if (typedListener != null) typedListener.EnterArrayDeclarator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortran90ParserListener typedListener = listener as IFortran90ParserListener;
			if (typedListener != null) typedListener.ExitArrayDeclarator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFortran90ParserVisitor<TResult> typedVisitor = visitor as IFortran90ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArrayDeclarator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArrayDeclaratorContext arrayDeclarator() {
		ArrayDeclaratorContext _localctx = new ArrayDeclaratorContext(Context, State);
		EnterRule(_localctx, 166, RULE_arrayDeclarator);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1283;
			variableName();
			State = 1284;
			Match(LPAREN);
			State = 1285;
			arraySpec();
			State = 1286;
			Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ComblockContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] DIV() { return GetTokens(Fortran90Parser.DIV); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DIV(int i) {
			return GetToken(Fortran90Parser.DIV, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SPOFF() { return GetToken(Fortran90Parser.SPOFF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SPON() { return GetToken(Fortran90Parser.SPON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public CommonBlockNameContext commonBlockName() {
			return GetRuleContext<CommonBlockNameContext>(0);
		}
		public ComblockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_comblock; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortran90ParserListener typedListener = listener as IFortran90ParserListener;
			if (typedListener != null) typedListener.EnterComblock(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortran90ParserListener typedListener = listener as IFortran90ParserListener;
			if (typedListener != null) typedListener.ExitComblock(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFortran90ParserVisitor<TResult> typedVisitor = visitor as IFortran90ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitComblock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ComblockContext comblock() {
		ComblockContext _localctx = new ComblockContext(Context, State);
		EnterRule(_localctx, 168, RULE_comblock);
		try {
			State = 1296;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,75,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1288;
				Match(DIV);
				State = 1289;
				Match(SPOFF);
				State = 1290;
				Match(DIV);
				State = 1291;
				Match(SPON);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1292;
				Match(DIV);
				State = 1293;
				commonBlockName();
				State = 1294;
				Match(DIV);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CommonBlockNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NAME() { return GetToken(Fortran90Parser.NAME, 0); }
		public CommonBlockNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_commonBlockName; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortran90ParserListener typedListener = listener as IFortran90ParserListener;
			if (typedListener != null) typedListener.EnterCommonBlockName(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortran90ParserListener typedListener = listener as IFortran90ParserListener;
			if (typedListener != null) typedListener.ExitCommonBlockName(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFortran90ParserVisitor<TResult> typedVisitor = visitor as IFortran90ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCommonBlockName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CommonBlockNameContext commonBlockName() {
		CommonBlockNameContext _localctx = new CommonBlockNameContext(Context, State);
		EnterRule(_localctx, 170, RULE_commonBlockName);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1298;
			Match(NAME);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeDeclarationStmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypeSpecContext typeSpec() {
			return GetRuleContext<TypeSpecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public EntityDeclListContext entityDeclList() {
			return GetRuleContext<EntityDeclListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOUBLECOLON() { return GetToken(Fortran90Parser.DOUBLECOLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public AttrSpecSeqContext attrSpecSeq() {
			return GetRuleContext<AttrSpecSeqContext>(0);
		}
		public TypeDeclarationStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeDeclarationStmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortran90ParserListener typedListener = listener as IFortran90ParserListener;
			if (typedListener != null) typedListener.EnterTypeDeclarationStmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortran90ParserListener typedListener = listener as IFortran90ParserListener;
			if (typedListener != null) typedListener.ExitTypeDeclarationStmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFortran90ParserVisitor<TResult> typedVisitor = visitor as IFortran90ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeDeclarationStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeDeclarationStmtContext typeDeclarationStmt() {
		TypeDeclarationStmtContext _localctx = new TypeDeclarationStmtContext(Context, State);
		EnterRule(_localctx, 172, RULE_typeDeclarationStmt);
		int _la;
		try {
			State = 1310;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,77,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1300;
				typeSpec();
				State = 1301;
				entityDeclList();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1303;
				typeSpec();
				State = 1305;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==COMMA) {
					{
					State = 1304;
					attrSpecSeq(0);
					}
				}

				State = 1307;
				Match(DOUBLECOLON);
				State = 1308;
				entityDeclList();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AttrSpecSeqContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA() { return GetToken(Fortran90Parser.COMMA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public AttrSpecContext attrSpec() {
			return GetRuleContext<AttrSpecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AttrSpecSeqContext attrSpecSeq() {
			return GetRuleContext<AttrSpecSeqContext>(0);
		}
		public AttrSpecSeqContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_attrSpecSeq; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortran90ParserListener typedListener = listener as IFortran90ParserListener;
			if (typedListener != null) typedListener.EnterAttrSpecSeq(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortran90ParserListener typedListener = listener as IFortran90ParserListener;
			if (typedListener != null) typedListener.ExitAttrSpecSeq(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFortran90ParserVisitor<TResult> typedVisitor = visitor as IFortran90ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAttrSpecSeq(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AttrSpecSeqContext attrSpecSeq() {
		return attrSpecSeq(0);
	}

	private AttrSpecSeqContext attrSpecSeq(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		AttrSpecSeqContext _localctx = new AttrSpecSeqContext(Context, _parentState);
		AttrSpecSeqContext _prevctx = _localctx;
		int _startState = 174;
		EnterRecursionRule(_localctx, 174, RULE_attrSpecSeq, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 1313;
			Match(COMMA);
			State = 1314;
			attrSpec();
			}
			Context.Stop = TokenStream.LT(-1);
			State = 1321;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,78,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new AttrSpecSeqContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_attrSpecSeq);
					State = 1316;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 1317;
					Match(COMMA);
					State = 1318;
					attrSpec();
					}
					} 
				}
				State = 1323;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,78,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class AttrSpecContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARAMETER() { return GetToken(Fortran90Parser.PARAMETER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ACCESSSPEC() { return GetToken(Fortran90Parser.ACCESSSPEC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALLOCATABLE() { return GetToken(Fortran90Parser.ALLOCATABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DIMENSION() { return GetToken(Fortran90Parser.DIMENSION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(Fortran90Parser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ArraySpecContext arraySpec() {
			return GetRuleContext<ArraySpecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(Fortran90Parser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXTERNAL() { return GetToken(Fortran90Parser.EXTERNAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTENT() { return GetToken(Fortran90Parser.INTENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IntentSpecContext intentSpec() {
			return GetRuleContext<IntentSpecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTRINSIC() { return GetToken(Fortran90Parser.INTRINSIC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPTIONAL() { return GetToken(Fortran90Parser.OPTIONAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode POINTER() { return GetToken(Fortran90Parser.POINTER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SAVE() { return GetToken(Fortran90Parser.SAVE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TARGET() { return GetToken(Fortran90Parser.TARGET, 0); }
		public AttrSpecContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_attrSpec; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortran90ParserListener typedListener = listener as IFortran90ParserListener;
			if (typedListener != null) typedListener.EnterAttrSpec(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortran90ParserListener typedListener = listener as IFortran90ParserListener;
			if (typedListener != null) typedListener.ExitAttrSpec(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFortran90ParserVisitor<TResult> typedVisitor = visitor as IFortran90ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAttrSpec(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AttrSpecContext attrSpec() {
		AttrSpecContext _localctx = new AttrSpecContext(Context, State);
		EnterRule(_localctx, 176, RULE_attrSpec);
		try {
			State = 1343;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case PARAMETER:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1324;
				Match(PARAMETER);
				}
				break;
			case ACCESSSPEC:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1325;
				Match(ACCESSSPEC);
				}
				break;
			case ALLOCATABLE:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1326;
				Match(ALLOCATABLE);
				}
				break;
			case DIMENSION:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1327;
				Match(DIMENSION);
				State = 1328;
				Match(LPAREN);
				State = 1329;
				arraySpec();
				State = 1330;
				Match(RPAREN);
				}
				break;
			case EXTERNAL:
				EnterOuterAlt(_localctx, 5);
				{
				State = 1332;
				Match(EXTERNAL);
				}
				break;
			case INTENT:
				EnterOuterAlt(_localctx, 6);
				{
				State = 1333;
				Match(INTENT);
				State = 1334;
				Match(LPAREN);
				State = 1335;
				intentSpec();
				State = 1336;
				Match(RPAREN);
				}
				break;
			case INTRINSIC:
				EnterOuterAlt(_localctx, 7);
				{
				State = 1338;
				Match(INTRINSIC);
				}
				break;
			case OPTIONAL:
				EnterOuterAlt(_localctx, 8);
				{
				State = 1339;
				Match(OPTIONAL);
				}
				break;
			case POINTER:
				EnterOuterAlt(_localctx, 9);
				{
				State = 1340;
				Match(POINTER);
				}
				break;
			case SAVE:
				EnterOuterAlt(_localctx, 10);
				{
				State = 1341;
				Match(SAVE);
				}
				break;
			case TARGET:
				EnterOuterAlt(_localctx, 11);
				{
				State = 1342;
				Match(TARGET);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EntityDeclListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public EntityDeclContext[] entityDecl() {
			return GetRuleContexts<EntityDeclContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public EntityDeclContext entityDecl(int i) {
			return GetRuleContext<EntityDeclContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(Fortran90Parser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(Fortran90Parser.COMMA, i);
		}
		public EntityDeclListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_entityDeclList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortran90ParserListener typedListener = listener as IFortran90ParserListener;
			if (typedListener != null) typedListener.EnterEntityDeclList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortran90ParserListener typedListener = listener as IFortran90ParserListener;
			if (typedListener != null) typedListener.ExitEntityDeclList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFortran90ParserVisitor<TResult> typedVisitor = visitor as IFortran90ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEntityDeclList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EntityDeclListContext entityDeclList() {
		EntityDeclListContext _localctx = new EntityDeclListContext(Context, State);
		EnterRule(_localctx, 178, RULE_entityDeclList);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1345;
			entityDecl();
			State = 1350;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,80,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 1346;
					Match(COMMA);
					State = 1347;
					entityDecl();
					}
					} 
				}
				State = 1352;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,80,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EntityDeclContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ObjectNameContext objectName() {
			return GetRuleContext<ObjectNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(Fortran90Parser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ArraySpecContext arraySpec() {
			return GetRuleContext<ArraySpecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(Fortran90Parser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STAR() { return GetToken(Fortran90Parser.STAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public CharLengthContext charLength() {
			return GetRuleContext<CharLengthContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGN() { return GetToken(Fortran90Parser.ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public EntityDeclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_entityDecl; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortran90ParserListener typedListener = listener as IFortran90ParserListener;
			if (typedListener != null) typedListener.EnterEntityDecl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortran90ParserListener typedListener = listener as IFortran90ParserListener;
			if (typedListener != null) typedListener.ExitEntityDecl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFortran90ParserVisitor<TResult> typedVisitor = visitor as IFortran90ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEntityDecl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EntityDeclContext entityDecl() {
		EntityDeclContext _localctx = new EntityDeclContext(Context, State);
		EnterRule(_localctx, 180, RULE_entityDecl);
		try {
			State = 1396;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,81,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1353;
				objectName();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1354;
				objectName();
				State = 1355;
				Match(LPAREN);
				State = 1356;
				arraySpec();
				State = 1357;
				Match(RPAREN);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1359;
				objectName();
				State = 1360;
				Match(STAR);
				State = 1361;
				charLength();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1363;
				objectName();
				State = 1364;
				Match(LPAREN);
				State = 1365;
				arraySpec();
				State = 1366;
				Match(RPAREN);
				State = 1367;
				Match(STAR);
				State = 1368;
				charLength();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 1370;
				objectName();
				State = 1371;
				Match(ASSIGN);
				State = 1372;
				expression(0);
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 1374;
				objectName();
				State = 1375;
				Match(LPAREN);
				State = 1376;
				arraySpec();
				State = 1377;
				Match(RPAREN);
				State = 1378;
				Match(ASSIGN);
				State = 1379;
				expression(0);
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 1381;
				objectName();
				State = 1382;
				Match(STAR);
				State = 1383;
				charLength();
				State = 1384;
				Match(ASSIGN);
				State = 1385;
				expression(0);
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 1387;
				objectName();
				State = 1388;
				Match(STAR);
				State = 1389;
				charLength();
				State = 1390;
				Match(LPAREN);
				State = 1391;
				arraySpec();
				State = 1392;
				Match(RPAREN);
				State = 1393;
				Match(ASSIGN);
				State = 1394;
				expression(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ObjectNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NAME() { return GetToken(Fortran90Parser.NAME, 0); }
		public ObjectNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_objectName; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortran90ParserListener typedListener = listener as IFortran90ParserListener;
			if (typedListener != null) typedListener.EnterObjectName(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortran90ParserListener typedListener = listener as IFortran90ParserListener;
			if (typedListener != null) typedListener.ExitObjectName(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFortran90ParserVisitor<TResult> typedVisitor = visitor as IFortran90ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitObjectName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ObjectNameContext objectName() {
		ObjectNameContext _localctx = new ObjectNameContext(Context, State);
		EnterRule(_localctx, 182, RULE_objectName);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1398;
			Match(NAME);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArraySpecContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExplicitShapeSpecListContext explicitShapeSpecList() {
			return GetRuleContext<ExplicitShapeSpecListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AssumedSizeSpecContext assumedSizeSpec() {
			return GetRuleContext<AssumedSizeSpecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AssumedShapeSpecListContext assumedShapeSpecList() {
			return GetRuleContext<AssumedShapeSpecListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DeferredShapeSpecListContext deferredShapeSpecList() {
			return GetRuleContext<DeferredShapeSpecListContext>(0);
		}
		public ArraySpecContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arraySpec; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortran90ParserListener typedListener = listener as IFortran90ParserListener;
			if (typedListener != null) typedListener.EnterArraySpec(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortran90ParserListener typedListener = listener as IFortran90ParserListener;
			if (typedListener != null) typedListener.ExitArraySpec(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFortran90ParserVisitor<TResult> typedVisitor = visitor as IFortran90ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArraySpec(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArraySpecContext arraySpec() {
		ArraySpecContext _localctx = new ArraySpecContext(Context, State);
		EnterRule(_localctx, 184, RULE_arraySpec);
		try {
			State = 1404;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,82,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1400;
				explicitShapeSpecList();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1401;
				assumedSizeSpec();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1402;
				assumedShapeSpecList(0);
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1403;
				deferredShapeSpecList();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssumedShapeSpecListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public LowerBoundContext lowerBound() {
			return GetRuleContext<LowerBoundContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(Fortran90Parser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public DeferredShapeSpecListContext deferredShapeSpecList() {
			return GetRuleContext<DeferredShapeSpecListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA() { return GetToken(Fortran90Parser.COMMA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public AssumedShapeSpecListContext assumedShapeSpecList() {
			return GetRuleContext<AssumedShapeSpecListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AssumedShapeSpecContext assumedShapeSpec() {
			return GetRuleContext<AssumedShapeSpecContext>(0);
		}
		public AssumedShapeSpecListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assumedShapeSpecList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortran90ParserListener typedListener = listener as IFortran90ParserListener;
			if (typedListener != null) typedListener.EnterAssumedShapeSpecList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortran90ParserListener typedListener = listener as IFortran90ParserListener;
			if (typedListener != null) typedListener.ExitAssumedShapeSpecList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFortran90ParserVisitor<TResult> typedVisitor = visitor as IFortran90ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssumedShapeSpecList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AssumedShapeSpecListContext assumedShapeSpecList() {
		return assumedShapeSpecList(0);
	}

	private AssumedShapeSpecListContext assumedShapeSpecList(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		AssumedShapeSpecListContext _localctx = new AssumedShapeSpecListContext(Context, _parentState);
		AssumedShapeSpecListContext _prevctx = _localctx;
		int _startState = 186;
		EnterRecursionRule(_localctx, 186, RULE_assumedShapeSpecList, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1415;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case DOP:
			case REAL:
			case SIZE:
			case LPAREN:
			case MINUS:
			case PLUS:
			case LNOT:
			case TRUE:
			case FALSE:
			case OBRACKETSLASH:
			case SCON:
			case RDCON:
			case ICON:
			case NAME:
				{
				State = 1407;
				lowerBound();
				State = 1408;
				Match(COLON);
				}
				break;
			case COLON:
				{
				State = 1410;
				deferredShapeSpecList();
				State = 1411;
				Match(COMMA);
				State = 1412;
				lowerBound();
				State = 1413;
				Match(COLON);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 1422;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,84,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new AssumedShapeSpecListContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_assumedShapeSpecList);
					State = 1417;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 1418;
					Match(COMMA);
					State = 1419;
					assumedShapeSpec();
					}
					} 
				}
				State = 1424;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,84,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class AssumedShapeSpecContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public LowerBoundContext lowerBound() {
			return GetRuleContext<LowerBoundContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(Fortran90Parser.COLON, 0); }
		public AssumedShapeSpecContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assumedShapeSpec; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortran90ParserListener typedListener = listener as IFortran90ParserListener;
			if (typedListener != null) typedListener.EnterAssumedShapeSpec(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortran90ParserListener typedListener = listener as IFortran90ParserListener;
			if (typedListener != null) typedListener.ExitAssumedShapeSpec(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFortran90ParserVisitor<TResult> typedVisitor = visitor as IFortran90ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssumedShapeSpec(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AssumedShapeSpecContext assumedShapeSpec() {
		AssumedShapeSpecContext _localctx = new AssumedShapeSpecContext(Context, State);
		EnterRule(_localctx, 188, RULE_assumedShapeSpec);
		try {
			State = 1429;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case DOP:
			case REAL:
			case SIZE:
			case LPAREN:
			case MINUS:
			case PLUS:
			case LNOT:
			case TRUE:
			case FALSE:
			case OBRACKETSLASH:
			case SCON:
			case RDCON:
			case ICON:
			case NAME:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1425;
				lowerBound();
				State = 1426;
				Match(COLON);
				}
				break;
			case COLON:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1428;
				Match(COLON);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssumedSizeSpecContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STAR() { return GetToken(Fortran90Parser.STAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public LowerBoundContext lowerBound() {
			return GetRuleContext<LowerBoundContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(Fortran90Parser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExplicitShapeSpecListContext explicitShapeSpecList() {
			return GetRuleContext<ExplicitShapeSpecListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA() { return GetToken(Fortran90Parser.COMMA, 0); }
		public AssumedSizeSpecContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assumedSizeSpec; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortran90ParserListener typedListener = listener as IFortran90ParserListener;
			if (typedListener != null) typedListener.EnterAssumedSizeSpec(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortran90ParserListener typedListener = listener as IFortran90ParserListener;
			if (typedListener != null) typedListener.ExitAssumedSizeSpec(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFortran90ParserVisitor<TResult> typedVisitor = visitor as IFortran90ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssumedSizeSpec(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AssumedSizeSpecContext assumedSizeSpec() {
		AssumedSizeSpecContext _localctx = new AssumedSizeSpecContext(Context, State);
		EnterRule(_localctx, 190, RULE_assumedSizeSpec);
		try {
			State = 1446;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,86,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1431;
				Match(STAR);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1432;
				lowerBound();
				State = 1433;
				Match(COLON);
				State = 1434;
				Match(STAR);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1436;
				explicitShapeSpecList();
				State = 1437;
				Match(COMMA);
				State = 1438;
				Match(STAR);
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1440;
				explicitShapeSpecList();
				State = 1441;
				Match(COMMA);
				State = 1442;
				lowerBound();
				State = 1443;
				Match(COLON);
				State = 1444;
				Match(STAR);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InterfaceBlockContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public InterfaceStmtContext interfaceStmt() {
			return GetRuleContext<InterfaceStmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public InterfaceBlockBodyContext interfaceBlockBody() {
			return GetRuleContext<InterfaceBlockBodyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public EndInterfaceStmtContext endInterfaceStmt() {
			return GetRuleContext<EndInterfaceStmtContext>(0);
		}
		public InterfaceBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_interfaceBlock; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortran90ParserListener typedListener = listener as IFortran90ParserListener;
			if (typedListener != null) typedListener.EnterInterfaceBlock(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortran90ParserListener typedListener = listener as IFortran90ParserListener;
			if (typedListener != null) typedListener.ExitInterfaceBlock(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFortran90ParserVisitor<TResult> typedVisitor = visitor as IFortran90ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInterfaceBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InterfaceBlockContext interfaceBlock() {
		InterfaceBlockContext _localctx = new InterfaceBlockContext(Context, State);
		EnterRule(_localctx, 192, RULE_interfaceBlock);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1448;
			interfaceStmt();
			State = 1449;
			interfaceBlockBody(0);
			State = 1450;
			endInterfaceStmt();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EndInterfaceStmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ENDINTERFACE() { return GetToken(Fortran90Parser.ENDINTERFACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode END() { return GetToken(Fortran90Parser.END, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTERFACE() { return GetToken(Fortran90Parser.INTERFACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NAME() { return GetToken(Fortran90Parser.NAME, 0); }
		public EndInterfaceStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_endInterfaceStmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortran90ParserListener typedListener = listener as IFortran90ParserListener;
			if (typedListener != null) typedListener.EnterEndInterfaceStmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortran90ParserListener typedListener = listener as IFortran90ParserListener;
			if (typedListener != null) typedListener.ExitEndInterfaceStmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFortran90ParserVisitor<TResult> typedVisitor = visitor as IFortran90ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEndInterfaceStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EndInterfaceStmtContext endInterfaceStmt() {
		EndInterfaceStmtContext _localctx = new EndInterfaceStmtContext(Context, State);
		EnterRule(_localctx, 194, RULE_endInterfaceStmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1455;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ENDINTERFACE:
				{
				State = 1452;
				Match(ENDINTERFACE);
				}
				break;
			case END:
				{
				State = 1453;
				Match(END);
				State = 1454;
				Match(INTERFACE);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 1458;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,88,Context) ) {
			case 1:
				{
				State = 1457;
				Match(NAME);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InterfaceStmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTERFACE() { return GetToken(Fortran90Parser.INTERFACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NAME() { return GetToken(Fortran90Parser.NAME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public GenericSpecContext genericSpec() {
			return GetRuleContext<GenericSpecContext>(0);
		}
		public InterfaceStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_interfaceStmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortran90ParserListener typedListener = listener as IFortran90ParserListener;
			if (typedListener != null) typedListener.EnterInterfaceStmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortran90ParserListener typedListener = listener as IFortran90ParserListener;
			if (typedListener != null) typedListener.ExitInterfaceStmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFortran90ParserVisitor<TResult> typedVisitor = visitor as IFortran90ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInterfaceStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InterfaceStmtContext interfaceStmt() {
		InterfaceStmtContext _localctx = new InterfaceStmtContext(Context, State);
		EnterRule(_localctx, 196, RULE_interfaceStmt);
		try {
			State = 1465;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,89,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1460;
				Match(INTERFACE);
				State = 1461;
				Match(NAME);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1462;
				Match(INTERFACE);
				State = 1463;
				genericSpec();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1464;
				Match(INTERFACE);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GenericSpecContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPERATOR() { return GetToken(Fortran90Parser.OPERATOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(Fortran90Parser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public DefinedOperatorContext definedOperator() {
			return GetRuleContext<DefinedOperatorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(Fortran90Parser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGNMENT() { return GetToken(Fortran90Parser.ASSIGNMENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGN() { return GetToken(Fortran90Parser.ASSIGN, 0); }
		public GenericSpecContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_genericSpec; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortran90ParserListener typedListener = listener as IFortran90ParserListener;
			if (typedListener != null) typedListener.EnterGenericSpec(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortran90ParserListener typedListener = listener as IFortran90ParserListener;
			if (typedListener != null) typedListener.ExitGenericSpec(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFortran90ParserVisitor<TResult> typedVisitor = visitor as IFortran90ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGenericSpec(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public GenericSpecContext genericSpec() {
		GenericSpecContext _localctx = new GenericSpecContext(Context, State);
		EnterRule(_localctx, 198, RULE_genericSpec);
		try {
			State = 1476;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case OPERATOR:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1467;
				Match(OPERATOR);
				State = 1468;
				Match(LPAREN);
				State = 1469;
				definedOperator();
				State = 1470;
				Match(RPAREN);
				}
				break;
			case ASSIGNMENT:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1472;
				Match(ASSIGNMENT);
				State = 1473;
				Match(LPAREN);
				State = 1474;
				Match(ASSIGN);
				State = 1475;
				Match(RPAREN);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DefinedOperatorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOP() { return GetToken(Fortran90Parser.DOP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode POWER() { return GetToken(Fortran90Parser.POWER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STAR() { return GetToken(Fortran90Parser.STAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PLUS() { return GetToken(Fortran90Parser.PLUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUS() { return GetToken(Fortran90Parser.MINUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LT() { return GetToken(Fortran90Parser.LT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LE() { return GetToken(Fortran90Parser.LE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQ() { return GetToken(Fortran90Parser.EQ, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NE() { return GetToken(Fortran90Parser.NE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GT() { return GetToken(Fortran90Parser.GT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GE() { return GetToken(Fortran90Parser.GE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] DIV() { return GetTokens(Fortran90Parser.DIV); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DIV(int i) {
			return GetToken(Fortran90Parser.DIV, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SPOFF() { return GetToken(Fortran90Parser.SPOFF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SPON() { return GetToken(Fortran90Parser.SPON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LNOT() { return GetToken(Fortran90Parser.LNOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LAND() { return GetToken(Fortran90Parser.LAND, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOR() { return GetToken(Fortran90Parser.LOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NEQV() { return GetToken(Fortran90Parser.NEQV, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQV() { return GetToken(Fortran90Parser.EQV, 0); }
		public DefinedOperatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_definedOperator; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortran90ParserListener typedListener = listener as IFortran90ParserListener;
			if (typedListener != null) typedListener.EnterDefinedOperator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortran90ParserListener typedListener = listener as IFortran90ParserListener;
			if (typedListener != null) typedListener.ExitDefinedOperator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFortran90ParserVisitor<TResult> typedVisitor = visitor as IFortran90ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDefinedOperator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DefinedOperatorContext definedOperator() {
		DefinedOperatorContext _localctx = new DefinedOperatorContext(Context, State);
		EnterRule(_localctx, 200, RULE_definedOperator);
		int _la;
		try {
			State = 1491;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case DOP:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1478;
				Match(DOP);
				}
				break;
			case POWER:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1479;
				Match(POWER);
				}
				break;
			case STAR:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1480;
				Match(STAR);
				}
				break;
			case MINUS:
			case PLUS:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1481;
				_la = TokenStream.LA(1);
				if ( !(_la==MINUS || _la==PLUS) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			case LT:
			case LE:
			case GT:
			case GE:
			case NE:
			case EQ:
				EnterOuterAlt(_localctx, 5);
				{
				State = 1482;
				_la = TokenStream.LA(1);
				if ( !(((((_la - 143)) & ~0x3f) == 0 && ((1L << (_la - 143)) & 63L) != 0)) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			case DIV:
				EnterOuterAlt(_localctx, 6);
				{
				State = 1483;
				Match(DIV);
				State = 1484;
				Match(SPOFF);
				State = 1485;
				Match(DIV);
				State = 1486;
				Match(SPON);
				}
				break;
			case LNOT:
				EnterOuterAlt(_localctx, 7);
				{
				State = 1487;
				Match(LNOT);
				}
				break;
			case LAND:
				EnterOuterAlt(_localctx, 8);
				{
				State = 1488;
				Match(LAND);
				}
				break;
			case LOR:
				EnterOuterAlt(_localctx, 9);
				{
				State = 1489;
				Match(LOR);
				}
				break;
			case EQV:
			case NEQV:
				EnterOuterAlt(_localctx, 10);
				{
				State = 1490;
				_la = TokenStream.LA(1);
				if ( !(_la==EQV || _la==NEQV) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InterfaceBlockBodyContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public InterfaceBodyPartConstructContext interfaceBodyPartConstruct() {
			return GetRuleContext<InterfaceBodyPartConstructContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public InterfaceBlockBodyContext interfaceBlockBody() {
			return GetRuleContext<InterfaceBlockBodyContext>(0);
		}
		public InterfaceBlockBodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_interfaceBlockBody; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortran90ParserListener typedListener = listener as IFortran90ParserListener;
			if (typedListener != null) typedListener.EnterInterfaceBlockBody(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortran90ParserListener typedListener = listener as IFortran90ParserListener;
			if (typedListener != null) typedListener.ExitInterfaceBlockBody(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFortran90ParserVisitor<TResult> typedVisitor = visitor as IFortran90ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInterfaceBlockBody(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InterfaceBlockBodyContext interfaceBlockBody() {
		return interfaceBlockBody(0);
	}

	private InterfaceBlockBodyContext interfaceBlockBody(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		InterfaceBlockBodyContext _localctx = new InterfaceBlockBodyContext(Context, _parentState);
		InterfaceBlockBodyContext _prevctx = _localctx;
		int _startState = 202;
		EnterRecursionRule(_localctx, 202, RULE_interfaceBlockBody, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 1494;
			interfaceBodyPartConstruct();
			}
			Context.Stop = TokenStream.LT(-1);
			State = 1500;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,92,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new InterfaceBlockBodyContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_interfaceBlockBody);
					State = 1496;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 1497;
					interfaceBodyPartConstruct();
					}
					} 
				}
				State = 1502;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,92,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class InterfaceBodyPartConstructContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public InterfaceBodyContext interfaceBody() {
			return GetRuleContext<InterfaceBodyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ModuleProcedureStmtContext moduleProcedureStmt() {
			return GetRuleContext<ModuleProcedureStmtContext>(0);
		}
		public InterfaceBodyPartConstructContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_interfaceBodyPartConstruct; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortran90ParserListener typedListener = listener as IFortran90ParserListener;
			if (typedListener != null) typedListener.EnterInterfaceBodyPartConstruct(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortran90ParserListener typedListener = listener as IFortran90ParserListener;
			if (typedListener != null) typedListener.ExitInterfaceBodyPartConstruct(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFortran90ParserVisitor<TResult> typedVisitor = visitor as IFortran90ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInterfaceBodyPartConstruct(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InterfaceBodyPartConstructContext interfaceBodyPartConstruct() {
		InterfaceBodyPartConstructContext _localctx = new InterfaceBodyPartConstructContext(Context, State);
		EnterRule(_localctx, 204, RULE_interfaceBodyPartConstruct);
		try {
			State = 1505;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case RECURSIVE:
			case FUNCTION:
			case SUBROUTINE:
			case DOUBLEPRECISION:
			case REAL:
			case CHARACTER:
			case DOUBLE:
			case COMPLEX:
			case INTEGER:
			case LOGICAL:
			case TYPE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1503;
				interfaceBody();
				}
				break;
			case MODULE:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1504;
				moduleProcedureStmt();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ModuleProcedureStmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MODULE() { return GetToken(Fortran90Parser.MODULE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PROCEDURE() { return GetToken(Fortran90Parser.PROCEDURE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ProcedureNameListContext procedureNameList() {
			return GetRuleContext<ProcedureNameListContext>(0);
		}
		public ModuleProcedureStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_moduleProcedureStmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortran90ParserListener typedListener = listener as IFortran90ParserListener;
			if (typedListener != null) typedListener.EnterModuleProcedureStmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortran90ParserListener typedListener = listener as IFortran90ParserListener;
			if (typedListener != null) typedListener.ExitModuleProcedureStmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFortran90ParserVisitor<TResult> typedVisitor = visitor as IFortran90ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitModuleProcedureStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ModuleProcedureStmtContext moduleProcedureStmt() {
		ModuleProcedureStmtContext _localctx = new ModuleProcedureStmtContext(Context, State);
		EnterRule(_localctx, 206, RULE_moduleProcedureStmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1507;
			Match(MODULE);
			State = 1508;
			Match(PROCEDURE);
			State = 1509;
			procedureNameList();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ProcedureNameListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ProcedureNameContext[] procedureName() {
			return GetRuleContexts<ProcedureNameContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ProcedureNameContext procedureName(int i) {
			return GetRuleContext<ProcedureNameContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(Fortran90Parser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(Fortran90Parser.COMMA, i);
		}
		public ProcedureNameListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_procedureNameList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortran90ParserListener typedListener = listener as IFortran90ParserListener;
			if (typedListener != null) typedListener.EnterProcedureNameList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortran90ParserListener typedListener = listener as IFortran90ParserListener;
			if (typedListener != null) typedListener.ExitProcedureNameList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFortran90ParserVisitor<TResult> typedVisitor = visitor as IFortran90ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProcedureNameList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ProcedureNameListContext procedureNameList() {
		ProcedureNameListContext _localctx = new ProcedureNameListContext(Context, State);
		EnterRule(_localctx, 208, RULE_procedureNameList);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1511;
			procedureName();
			State = 1516;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,94,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 1512;
					Match(COMMA);
					State = 1513;
					procedureName();
					}
					} 
				}
				State = 1518;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,94,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ProcedureNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentContext ident() {
			return GetRuleContext<IdentContext>(0);
		}
		public ProcedureNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_procedureName; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortran90ParserListener typedListener = listener as IFortran90ParserListener;
			if (typedListener != null) typedListener.EnterProcedureName(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortran90ParserListener typedListener = listener as IFortran90ParserListener;
			if (typedListener != null) typedListener.ExitProcedureName(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFortran90ParserVisitor<TResult> typedVisitor = visitor as IFortran90ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProcedureName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ProcedureNameContext procedureName() {
		ProcedureNameContext _localctx = new ProcedureNameContext(Context, State);
		EnterRule(_localctx, 210, RULE_procedureName);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1519;
			ident();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InterfaceBodyContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FunctionPrefixContext functionPrefix() {
			return GetRuleContext<FunctionPrefixContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NAME() { return GetToken(Fortran90Parser.NAME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FunctionInterfaceRangeContext functionInterfaceRange() {
			return GetRuleContext<FunctionInterfaceRangeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SUBROUTINE() { return GetToken(Fortran90Parser.SUBROUTINE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SubroutineInterfaceRangeContext subroutineInterfaceRange() {
			return GetRuleContext<SubroutineInterfaceRangeContext>(0);
		}
		public InterfaceBodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_interfaceBody; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortran90ParserListener typedListener = listener as IFortran90ParserListener;
			if (typedListener != null) typedListener.EnterInterfaceBody(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortran90ParserListener typedListener = listener as IFortran90ParserListener;
			if (typedListener != null) typedListener.ExitInterfaceBody(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFortran90ParserVisitor<TResult> typedVisitor = visitor as IFortran90ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInterfaceBody(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InterfaceBodyContext interfaceBody() {
		InterfaceBodyContext _localctx = new InterfaceBodyContext(Context, State);
		EnterRule(_localctx, 212, RULE_interfaceBody);
		try {
			State = 1528;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case RECURSIVE:
			case FUNCTION:
			case DOUBLEPRECISION:
			case REAL:
			case CHARACTER:
			case DOUBLE:
			case COMPLEX:
			case INTEGER:
			case LOGICAL:
			case TYPE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1521;
				functionPrefix();
				State = 1522;
				Match(NAME);
				State = 1523;
				functionInterfaceRange();
				}
				break;
			case SUBROUTINE:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1525;
				Match(SUBROUTINE);
				State = 1526;
				Match(NAME);
				State = 1527;
				subroutineInterfaceRange();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SubroutineInterfaceRangeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SubroutineParListContext subroutineParList() {
			return GetRuleContext<SubroutineParListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public EndSubroutineStmtContext endSubroutineStmt() {
			return GetRuleContext<EndSubroutineStmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SubprogramInterfaceBodyContext subprogramInterfaceBody() {
			return GetRuleContext<SubprogramInterfaceBodyContext>(0);
		}
		public SubroutineInterfaceRangeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_subroutineInterfaceRange; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortran90ParserListener typedListener = listener as IFortran90ParserListener;
			if (typedListener != null) typedListener.EnterSubroutineInterfaceRange(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortran90ParserListener typedListener = listener as IFortran90ParserListener;
			if (typedListener != null) typedListener.ExitSubroutineInterfaceRange(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFortran90ParserVisitor<TResult> typedVisitor = visitor as IFortran90ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSubroutineInterfaceRange(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SubroutineInterfaceRangeContext subroutineInterfaceRange() {
		SubroutineInterfaceRangeContext _localctx = new SubroutineInterfaceRangeContext(Context, State);
		EnterRule(_localctx, 214, RULE_subroutineInterfaceRange);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1530;
			subroutineParList();
			State = 1532;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 288788022366298176L) != 0) || _la==DOUBLE || ((((_la - 166)) & ~0x3f) == 0 && ((1L << (_la - 166)) & 3276813L) != 0)) {
				{
				State = 1531;
				subprogramInterfaceBody(0);
				}
			}

			State = 1534;
			endSubroutineStmt();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EndSubroutineStmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode END() { return GetToken(Fortran90Parser.END, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SUBROUTINE() { return GetToken(Fortran90Parser.SUBROUTINE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NAME() { return GetToken(Fortran90Parser.NAME, 0); }
		public EndSubroutineStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_endSubroutineStmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortran90ParserListener typedListener = listener as IFortran90ParserListener;
			if (typedListener != null) typedListener.EnterEndSubroutineStmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortran90ParserListener typedListener = listener as IFortran90ParserListener;
			if (typedListener != null) typedListener.ExitEndSubroutineStmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFortran90ParserVisitor<TResult> typedVisitor = visitor as IFortran90ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEndSubroutineStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EndSubroutineStmtContext endSubroutineStmt() {
		EndSubroutineStmtContext _localctx = new EndSubroutineStmtContext(Context, State);
		EnterRule(_localctx, 216, RULE_endSubroutineStmt);
		try {
			State = 1542;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,98,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1536;
				Match(END);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1537;
				Match(END);
				State = 1538;
				Match(SUBROUTINE);
				State = 1540;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,97,Context) ) {
				case 1:
					{
					State = 1539;
					Match(NAME);
					}
					break;
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RecursiveContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RECURSIVE() { return GetToken(Fortran90Parser.RECURSIVE, 0); }
		public RecursiveContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_recursive; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortran90ParserListener typedListener = listener as IFortran90ParserListener;
			if (typedListener != null) typedListener.EnterRecursive(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortran90ParserListener typedListener = listener as IFortran90ParserListener;
			if (typedListener != null) typedListener.ExitRecursive(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFortran90ParserVisitor<TResult> typedVisitor = visitor as IFortran90ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRecursive(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RecursiveContext recursive() {
		RecursiveContext _localctx = new RecursiveContext(Context, State);
		EnterRule(_localctx, 218, RULE_recursive);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1544;
			Match(RECURSIVE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionPrefixContext : ParserRuleContext {
		public FunctionPrefixContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionPrefix; } }
	 
		public FunctionPrefixContext() { }
		public virtual void CopyFrom(FunctionPrefixContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class FunctionPrefixRecContext : FunctionPrefixContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FUNCTION() { return GetToken(Fortran90Parser.FUNCTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public RecursiveContext recursive() {
			return GetRuleContext<RecursiveContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeSpecContext typeSpec() {
			return GetRuleContext<TypeSpecContext>(0);
		}
		public FunctionPrefixRecContext(FunctionPrefixContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortran90ParserListener typedListener = listener as IFortran90ParserListener;
			if (typedListener != null) typedListener.EnterFunctionPrefixRec(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortran90ParserListener typedListener = listener as IFortran90ParserListener;
			if (typedListener != null) typedListener.ExitFunctionPrefixRec(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFortran90ParserVisitor<TResult> typedVisitor = visitor as IFortran90ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionPrefixRec(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class FunctionPrefixTypContext : FunctionPrefixContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypeSpecContext typeSpec() {
			return GetRuleContext<TypeSpecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RECURSIVE() { return GetToken(Fortran90Parser.RECURSIVE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FUNCTION() { return GetToken(Fortran90Parser.FUNCTION, 0); }
		public FunctionPrefixTypContext(FunctionPrefixContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortran90ParserListener typedListener = listener as IFortran90ParserListener;
			if (typedListener != null) typedListener.EnterFunctionPrefixTyp(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortran90ParserListener typedListener = listener as IFortran90ParserListener;
			if (typedListener != null) typedListener.ExitFunctionPrefixTyp(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFortran90ParserVisitor<TResult> typedVisitor = visitor as IFortran90ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionPrefixTyp(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionPrefixContext functionPrefix() {
		FunctionPrefixContext _localctx = new FunctionPrefixContext(Context, State);
		EnterRule(_localctx, 220, RULE_functionPrefix);
		int _la;
		try {
			State = 1557;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,101,Context) ) {
			case 1:
				_localctx = new FunctionPrefixRecContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 1547;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==RECURSIVE) {
					{
					State = 1546;
					recursive();
					}
				}

				State = 1550;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 8813809762304L) != 0) || _la==DOUBLE || ((((_la - 166)) & ~0x3f) == 0 && ((1L << (_la - 166)) & 2097165L) != 0)) {
					{
					State = 1549;
					typeSpec();
					}
				}

				State = 1552;
				Match(FUNCTION);
				}
				break;
			case 2:
				_localctx = new FunctionPrefixTypContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 1553;
				typeSpec();
				State = 1554;
				Match(RECURSIVE);
				State = 1555;
				Match(FUNCTION);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionInterfaceRangeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FunctionParListContext functionParList() {
			return GetRuleContext<FunctionParListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public EndFunctionStmtContext endFunctionStmt() {
			return GetRuleContext<EndFunctionStmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SubprogramInterfaceBodyContext subprogramInterfaceBody() {
			return GetRuleContext<SubprogramInterfaceBodyContext>(0);
		}
		public FunctionInterfaceRangeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionInterfaceRange; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortran90ParserListener typedListener = listener as IFortran90ParserListener;
			if (typedListener != null) typedListener.EnterFunctionInterfaceRange(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortran90ParserListener typedListener = listener as IFortran90ParserListener;
			if (typedListener != null) typedListener.ExitFunctionInterfaceRange(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFortran90ParserVisitor<TResult> typedVisitor = visitor as IFortran90ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionInterfaceRange(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionInterfaceRangeContext functionInterfaceRange() {
		FunctionInterfaceRangeContext _localctx = new FunctionInterfaceRangeContext(Context, State);
		EnterRule(_localctx, 222, RULE_functionInterfaceRange);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1559;
			functionParList();
			State = 1561;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 288788022366298176L) != 0) || _la==DOUBLE || ((((_la - 166)) & ~0x3f) == 0 && ((1L << (_la - 166)) & 3276813L) != 0)) {
				{
				State = 1560;
				subprogramInterfaceBody(0);
				}
			}

			State = 1563;
			endFunctionStmt();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionParListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(Fortran90Parser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(Fortran90Parser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FunctionParsContext functionPars() {
			return GetRuleContext<FunctionParsContext>(0);
		}
		public FunctionParListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionParList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortran90ParserListener typedListener = listener as IFortran90ParserListener;
			if (typedListener != null) typedListener.EnterFunctionParList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortran90ParserListener typedListener = listener as IFortran90ParserListener;
			if (typedListener != null) typedListener.ExitFunctionParList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFortran90ParserVisitor<TResult> typedVisitor = visitor as IFortran90ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionParList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionParListContext functionParList() {
		FunctionParListContext _localctx = new FunctionParListContext(Context, State);
		EnterRule(_localctx, 224, RULE_functionParList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1565;
			Match(LPAREN);
			State = 1567;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==NAME) {
				{
				State = 1566;
				functionPars();
				}
			}

			State = 1569;
			Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionParsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FunctionParContext[] functionPar() {
			return GetRuleContexts<FunctionParContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionParContext functionPar(int i) {
			return GetRuleContext<FunctionParContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(Fortran90Parser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(Fortran90Parser.COMMA, i);
		}
		public FunctionParsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionPars; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortran90ParserListener typedListener = listener as IFortran90ParserListener;
			if (typedListener != null) typedListener.EnterFunctionPars(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortran90ParserListener typedListener = listener as IFortran90ParserListener;
			if (typedListener != null) typedListener.ExitFunctionPars(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFortran90ParserVisitor<TResult> typedVisitor = visitor as IFortran90ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionPars(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionParsContext functionPars() {
		FunctionParsContext _localctx = new FunctionParsContext(Context, State);
		EnterRule(_localctx, 226, RULE_functionPars);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1571;
			functionPar();
			State = 1576;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 1572;
				Match(COMMA);
				State = 1573;
				functionPar();
				}
				}
				State = 1578;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionParContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public DummyArgNameContext dummyArgName() {
			return GetRuleContext<DummyArgNameContext>(0);
		}
		public FunctionParContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionPar; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortran90ParserListener typedListener = listener as IFortran90ParserListener;
			if (typedListener != null) typedListener.EnterFunctionPar(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortran90ParserListener typedListener = listener as IFortran90ParserListener;
			if (typedListener != null) typedListener.ExitFunctionPar(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFortran90ParserVisitor<TResult> typedVisitor = visitor as IFortran90ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionPar(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionParContext functionPar() {
		FunctionParContext _localctx = new FunctionParContext(Context, State);
		EnterRule(_localctx, 228, RULE_functionPar);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1579;
			dummyArgName();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SubprogramInterfaceBodyContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SpecificationPartConstructContext specificationPartConstruct() {
			return GetRuleContext<SpecificationPartConstructContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SubprogramInterfaceBodyContext subprogramInterfaceBody() {
			return GetRuleContext<SubprogramInterfaceBodyContext>(0);
		}
		public SubprogramInterfaceBodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_subprogramInterfaceBody; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortran90ParserListener typedListener = listener as IFortran90ParserListener;
			if (typedListener != null) typedListener.EnterSubprogramInterfaceBody(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortran90ParserListener typedListener = listener as IFortran90ParserListener;
			if (typedListener != null) typedListener.ExitSubprogramInterfaceBody(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFortran90ParserVisitor<TResult> typedVisitor = visitor as IFortran90ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSubprogramInterfaceBody(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SubprogramInterfaceBodyContext subprogramInterfaceBody() {
		return subprogramInterfaceBody(0);
	}

	private SubprogramInterfaceBodyContext subprogramInterfaceBody(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		SubprogramInterfaceBodyContext _localctx = new SubprogramInterfaceBodyContext(Context, _parentState);
		SubprogramInterfaceBodyContext _prevctx = _localctx;
		int _startState = 230;
		EnterRecursionRule(_localctx, 230, RULE_subprogramInterfaceBody, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 1582;
			specificationPartConstruct();
			}
			Context.Stop = TokenStream.LT(-1);
			State = 1588;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,105,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new SubprogramInterfaceBodyContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_subprogramInterfaceBody);
					State = 1584;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 1585;
					specificationPartConstruct();
					}
					} 
				}
				State = 1590;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,105,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class EndFunctionStmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode END() { return GetToken(Fortran90Parser.END, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FUNCTION() { return GetToken(Fortran90Parser.FUNCTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NAME() { return GetToken(Fortran90Parser.NAME, 0); }
		public EndFunctionStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_endFunctionStmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortran90ParserListener typedListener = listener as IFortran90ParserListener;
			if (typedListener != null) typedListener.EnterEndFunctionStmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortran90ParserListener typedListener = listener as IFortran90ParserListener;
			if (typedListener != null) typedListener.ExitEndFunctionStmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFortran90ParserVisitor<TResult> typedVisitor = visitor as IFortran90ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEndFunctionStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EndFunctionStmtContext endFunctionStmt() {
		EndFunctionStmtContext _localctx = new EndFunctionStmtContext(Context, State);
		EnterRule(_localctx, 232, RULE_endFunctionStmt);
		try {
			State = 1597;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,107,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1591;
				Match(END);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1592;
				Match(END);
				State = 1593;
				Match(FUNCTION);
				State = 1595;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,106,Context) ) {
				case 1:
					{
					State = 1594;
					Match(NAME);
					}
					break;
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DerivedTypeDefContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public DerivedTypeStmtContext derivedTypeStmt() {
			return GetRuleContext<DerivedTypeStmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DerivedTypeBodyContext derivedTypeBody() {
			return GetRuleContext<DerivedTypeBodyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public EndTypeStmtContext endTypeStmt() {
			return GetRuleContext<EndTypeStmtContext>(0);
		}
		public DerivedTypeDefContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_derivedTypeDef; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortran90ParserListener typedListener = listener as IFortran90ParserListener;
			if (typedListener != null) typedListener.EnterDerivedTypeDef(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortran90ParserListener typedListener = listener as IFortran90ParserListener;
			if (typedListener != null) typedListener.ExitDerivedTypeDef(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFortran90ParserVisitor<TResult> typedVisitor = visitor as IFortran90ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDerivedTypeDef(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DerivedTypeDefContext derivedTypeDef() {
		DerivedTypeDefContext _localctx = new DerivedTypeDefContext(Context, State);
		EnterRule(_localctx, 234, RULE_derivedTypeDef);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1599;
			derivedTypeStmt();
			State = 1600;
			derivedTypeBody(0);
			State = 1601;
			endTypeStmt();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EndTypeStmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ENDTYPE() { return GetToken(Fortran90Parser.ENDTYPE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NAME() { return GetToken(Fortran90Parser.NAME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode END() { return GetToken(Fortran90Parser.END, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TYPE() { return GetToken(Fortran90Parser.TYPE, 0); }
		public EndTypeStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_endTypeStmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortran90ParserListener typedListener = listener as IFortran90ParserListener;
			if (typedListener != null) typedListener.EnterEndTypeStmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortran90ParserListener typedListener = listener as IFortran90ParserListener;
			if (typedListener != null) typedListener.ExitEndTypeStmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFortran90ParserVisitor<TResult> typedVisitor = visitor as IFortran90ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEndTypeStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EndTypeStmtContext endTypeStmt() {
		EndTypeStmtContext _localctx = new EndTypeStmtContext(Context, State);
		EnterRule(_localctx, 236, RULE_endTypeStmt);
		try {
			State = 1611;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,108,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1603;
				Match(ENDTYPE);
				State = 1604;
				Match(NAME);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1605;
				Match(ENDTYPE);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1606;
				Match(END);
				State = 1607;
				Match(TYPE);
				State = 1608;
				Match(NAME);
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1609;
				Match(END);
				State = 1610;
				Match(TYPE);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DerivedTypeStmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TYPE() { return GetToken(Fortran90Parser.TYPE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NAME() { return GetToken(Fortran90Parser.NAME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOUBLECOLON() { return GetToken(Fortran90Parser.DOUBLECOLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA() { return GetToken(Fortran90Parser.COMMA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ACCESSSPEC() { return GetToken(Fortran90Parser.ACCESSSPEC, 0); }
		public DerivedTypeStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_derivedTypeStmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortran90ParserListener typedListener = listener as IFortran90ParserListener;
			if (typedListener != null) typedListener.EnterDerivedTypeStmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortran90ParserListener typedListener = listener as IFortran90ParserListener;
			if (typedListener != null) typedListener.ExitDerivedTypeStmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFortran90ParserVisitor<TResult> typedVisitor = visitor as IFortran90ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDerivedTypeStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DerivedTypeStmtContext derivedTypeStmt() {
		DerivedTypeStmtContext _localctx = new DerivedTypeStmtContext(Context, State);
		EnterRule(_localctx, 238, RULE_derivedTypeStmt);
		try {
			State = 1623;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,109,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1613;
				Match(TYPE);
				State = 1614;
				Match(NAME);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1615;
				Match(TYPE);
				State = 1616;
				Match(DOUBLECOLON);
				State = 1617;
				Match(NAME);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1618;
				Match(TYPE);
				State = 1619;
				Match(COMMA);
				State = 1620;
				Match(ACCESSSPEC);
				State = 1621;
				Match(DOUBLECOLON);
				State = 1622;
				Match(NAME);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DerivedTypeBodyContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public DerivedTypeBodyConstructContext derivedTypeBodyConstruct() {
			return GetRuleContext<DerivedTypeBodyConstructContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DerivedTypeBodyContext derivedTypeBody() {
			return GetRuleContext<DerivedTypeBodyContext>(0);
		}
		public DerivedTypeBodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_derivedTypeBody; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortran90ParserListener typedListener = listener as IFortran90ParserListener;
			if (typedListener != null) typedListener.EnterDerivedTypeBody(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortran90ParserListener typedListener = listener as IFortran90ParserListener;
			if (typedListener != null) typedListener.ExitDerivedTypeBody(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFortran90ParserVisitor<TResult> typedVisitor = visitor as IFortran90ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDerivedTypeBody(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DerivedTypeBodyContext derivedTypeBody() {
		return derivedTypeBody(0);
	}

	private DerivedTypeBodyContext derivedTypeBody(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		DerivedTypeBodyContext _localctx = new DerivedTypeBodyContext(Context, _parentState);
		DerivedTypeBodyContext _prevctx = _localctx;
		int _startState = 240;
		EnterRecursionRule(_localctx, 240, RULE_derivedTypeBody, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 1626;
			derivedTypeBodyConstruct();
			}
			Context.Stop = TokenStream.LT(-1);
			State = 1632;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,110,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new DerivedTypeBodyContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_derivedTypeBody);
					State = 1628;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 1629;
					derivedTypeBodyConstruct();
					}
					} 
				}
				State = 1634;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,110,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class DerivedTypeBodyConstructContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public PrivateSequenceStmtContext privateSequenceStmt() {
			return GetRuleContext<PrivateSequenceStmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ComponentDefStmtContext componentDefStmt() {
			return GetRuleContext<ComponentDefStmtContext>(0);
		}
		public DerivedTypeBodyConstructContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_derivedTypeBodyConstruct; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortran90ParserListener typedListener = listener as IFortran90ParserListener;
			if (typedListener != null) typedListener.EnterDerivedTypeBodyConstruct(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortran90ParserListener typedListener = listener as IFortran90ParserListener;
			if (typedListener != null) typedListener.ExitDerivedTypeBodyConstruct(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFortran90ParserVisitor<TResult> typedVisitor = visitor as IFortran90ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDerivedTypeBodyConstruct(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DerivedTypeBodyConstructContext derivedTypeBodyConstruct() {
		DerivedTypeBodyConstructContext _localctx = new DerivedTypeBodyConstructContext(Context, State);
		EnterRule(_localctx, 242, RULE_derivedTypeBodyConstruct);
		try {
			State = 1637;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case PRIVATE:
			case SEQUENCE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1635;
				privateSequenceStmt();
				}
				break;
			case DOUBLEPRECISION:
			case REAL:
			case CHARACTER:
			case DOUBLE:
			case COMPLEX:
			case INTEGER:
			case LOGICAL:
			case TYPE:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1636;
				componentDefStmt();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PrivateSequenceStmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PRIVATE() { return GetToken(Fortran90Parser.PRIVATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEQUENCE() { return GetToken(Fortran90Parser.SEQUENCE, 0); }
		public PrivateSequenceStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_privateSequenceStmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortran90ParserListener typedListener = listener as IFortran90ParserListener;
			if (typedListener != null) typedListener.EnterPrivateSequenceStmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortran90ParserListener typedListener = listener as IFortran90ParserListener;
			if (typedListener != null) typedListener.ExitPrivateSequenceStmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFortran90ParserVisitor<TResult> typedVisitor = visitor as IFortran90ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrivateSequenceStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PrivateSequenceStmtContext privateSequenceStmt() {
		PrivateSequenceStmtContext _localctx = new PrivateSequenceStmtContext(Context, State);
		EnterRule(_localctx, 244, RULE_privateSequenceStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1639;
			_la = TokenStream.LA(1);
			if ( !(_la==PRIVATE || _la==SEQUENCE) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ComponentDefStmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypeSpecContext typeSpec() {
			return GetRuleContext<TypeSpecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA() { return GetToken(Fortran90Parser.COMMA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ComponentAttrSpecListContext componentAttrSpecList() {
			return GetRuleContext<ComponentAttrSpecListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOUBLECOLON() { return GetToken(Fortran90Parser.DOUBLECOLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ComponentDeclListContext componentDeclList() {
			return GetRuleContext<ComponentDeclListContext>(0);
		}
		public ComponentDefStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_componentDefStmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortran90ParserListener typedListener = listener as IFortran90ParserListener;
			if (typedListener != null) typedListener.EnterComponentDefStmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortran90ParserListener typedListener = listener as IFortran90ParserListener;
			if (typedListener != null) typedListener.ExitComponentDefStmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFortran90ParserVisitor<TResult> typedVisitor = visitor as IFortran90ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitComponentDefStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ComponentDefStmtContext componentDefStmt() {
		ComponentDefStmtContext _localctx = new ComponentDefStmtContext(Context, State);
		EnterRule(_localctx, 246, RULE_componentDefStmt);
		try {
			State = 1654;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,112,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1641;
				typeSpec();
				State = 1642;
				Match(COMMA);
				State = 1643;
				componentAttrSpecList();
				State = 1644;
				Match(DOUBLECOLON);
				State = 1645;
				componentDeclList();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1647;
				typeSpec();
				State = 1648;
				Match(DOUBLECOLON);
				State = 1649;
				componentDeclList();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1651;
				typeSpec();
				State = 1652;
				componentDeclList();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ComponentDeclListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ComponentDeclContext[] componentDecl() {
			return GetRuleContexts<ComponentDeclContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ComponentDeclContext componentDecl(int i) {
			return GetRuleContext<ComponentDeclContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(Fortran90Parser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(Fortran90Parser.COMMA, i);
		}
		public ComponentDeclListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_componentDeclList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortran90ParserListener typedListener = listener as IFortran90ParserListener;
			if (typedListener != null) typedListener.EnterComponentDeclList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortran90ParserListener typedListener = listener as IFortran90ParserListener;
			if (typedListener != null) typedListener.ExitComponentDeclList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFortran90ParserVisitor<TResult> typedVisitor = visitor as IFortran90ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitComponentDeclList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ComponentDeclListContext componentDeclList() {
		ComponentDeclListContext _localctx = new ComponentDeclListContext(Context, State);
		EnterRule(_localctx, 248, RULE_componentDeclList);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1656;
			componentDecl();
			State = 1661;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,113,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 1657;
					Match(COMMA);
					State = 1658;
					componentDecl();
					}
					} 
				}
				State = 1663;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,113,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ComponentDeclContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ComponentNameContext componentName() {
			return GetRuleContext<ComponentNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(Fortran90Parser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ComponentArraySpecContext componentArraySpec() {
			return GetRuleContext<ComponentArraySpecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(Fortran90Parser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STAR() { return GetToken(Fortran90Parser.STAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public CharLengthContext charLength() {
			return GetRuleContext<CharLengthContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGN() { return GetToken(Fortran90Parser.ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ComponentDeclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_componentDecl; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortran90ParserListener typedListener = listener as IFortran90ParserListener;
			if (typedListener != null) typedListener.EnterComponentDecl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortran90ParserListener typedListener = listener as IFortran90ParserListener;
			if (typedListener != null) typedListener.ExitComponentDecl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFortran90ParserVisitor<TResult> typedVisitor = visitor as IFortran90ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitComponentDecl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ComponentDeclContext componentDecl() {
		ComponentDeclContext _localctx = new ComponentDeclContext(Context, State);
		EnterRule(_localctx, 250, RULE_componentDecl);
		try {
			State = 1707;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,114,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1664;
				componentName();
				State = 1665;
				Match(LPAREN);
				State = 1666;
				componentArraySpec();
				State = 1667;
				Match(RPAREN);
				State = 1668;
				Match(STAR);
				State = 1669;
				charLength();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1671;
				componentName();
				State = 1672;
				Match(LPAREN);
				State = 1673;
				componentArraySpec();
				State = 1674;
				Match(RPAREN);
				State = 1675;
				Match(ASSIGN);
				State = 1676;
				expression(0);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1678;
				componentName();
				State = 1679;
				Match(LPAREN);
				State = 1680;
				componentArraySpec();
				State = 1681;
				Match(RPAREN);
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1683;
				componentName();
				State = 1684;
				Match(STAR);
				State = 1685;
				charLength();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 1687;
				componentName();
				State = 1688;
				Match(ASSIGN);
				State = 1689;
				expression(0);
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 1691;
				componentName();
				State = 1692;
				Match(STAR);
				State = 1693;
				charLength();
				State = 1694;
				Match(ASSIGN);
				State = 1695;
				expression(0);
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 1697;
				componentName();
				State = 1698;
				Match(STAR);
				State = 1699;
				charLength();
				State = 1700;
				Match(LPAREN);
				State = 1701;
				componentArraySpec();
				State = 1702;
				Match(RPAREN);
				State = 1703;
				Match(ASSIGN);
				State = 1704;
				expression(0);
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 1706;
				componentName();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ComponentNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NAME() { return GetToken(Fortran90Parser.NAME, 0); }
		public ComponentNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_componentName; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortran90ParserListener typedListener = listener as IFortran90ParserListener;
			if (typedListener != null) typedListener.EnterComponentName(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortran90ParserListener typedListener = listener as IFortran90ParserListener;
			if (typedListener != null) typedListener.ExitComponentName(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFortran90ParserVisitor<TResult> typedVisitor = visitor as IFortran90ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitComponentName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ComponentNameContext componentName() {
		ComponentNameContext _localctx = new ComponentNameContext(Context, State);
		EnterRule(_localctx, 252, RULE_componentName);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1709;
			Match(NAME);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ComponentAttrSpecListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ComponentAttrSpecContext[] componentAttrSpec() {
			return GetRuleContexts<ComponentAttrSpecContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ComponentAttrSpecContext componentAttrSpec(int i) {
			return GetRuleContext<ComponentAttrSpecContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(Fortran90Parser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(Fortran90Parser.COMMA, i);
		}
		public ComponentAttrSpecListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_componentAttrSpecList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortran90ParserListener typedListener = listener as IFortran90ParserListener;
			if (typedListener != null) typedListener.EnterComponentAttrSpecList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortran90ParserListener typedListener = listener as IFortran90ParserListener;
			if (typedListener != null) typedListener.ExitComponentAttrSpecList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFortran90ParserVisitor<TResult> typedVisitor = visitor as IFortran90ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitComponentAttrSpecList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ComponentAttrSpecListContext componentAttrSpecList() {
		ComponentAttrSpecListContext _localctx = new ComponentAttrSpecListContext(Context, State);
		EnterRule(_localctx, 254, RULE_componentAttrSpecList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1711;
			componentAttrSpec();
			State = 1716;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 1712;
				Match(COMMA);
				State = 1713;
				componentAttrSpec();
				}
				}
				State = 1718;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ComponentAttrSpecContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode POINTER() { return GetToken(Fortran90Parser.POINTER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DIMENSION() { return GetToken(Fortran90Parser.DIMENSION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(Fortran90Parser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ComponentArraySpecContext componentArraySpec() {
			return GetRuleContext<ComponentArraySpecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(Fortran90Parser.RPAREN, 0); }
		public ComponentAttrSpecContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_componentAttrSpec; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortran90ParserListener typedListener = listener as IFortran90ParserListener;
			if (typedListener != null) typedListener.EnterComponentAttrSpec(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortran90ParserListener typedListener = listener as IFortran90ParserListener;
			if (typedListener != null) typedListener.ExitComponentAttrSpec(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFortran90ParserVisitor<TResult> typedVisitor = visitor as IFortran90ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitComponentAttrSpec(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ComponentAttrSpecContext componentAttrSpec() {
		ComponentAttrSpecContext _localctx = new ComponentAttrSpecContext(Context, State);
		EnterRule(_localctx, 256, RULE_componentAttrSpec);
		try {
			State = 1725;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case POINTER:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1719;
				Match(POINTER);
				}
				break;
			case DIMENSION:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1720;
				Match(DIMENSION);
				State = 1721;
				Match(LPAREN);
				State = 1722;
				componentArraySpec();
				State = 1723;
				Match(RPAREN);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ComponentArraySpecContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExplicitShapeSpecListContext explicitShapeSpecList() {
			return GetRuleContext<ExplicitShapeSpecListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DeferredShapeSpecListContext deferredShapeSpecList() {
			return GetRuleContext<DeferredShapeSpecListContext>(0);
		}
		public ComponentArraySpecContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_componentArraySpec; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortran90ParserListener typedListener = listener as IFortran90ParserListener;
			if (typedListener != null) typedListener.EnterComponentArraySpec(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortran90ParserListener typedListener = listener as IFortran90ParserListener;
			if (typedListener != null) typedListener.ExitComponentArraySpec(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFortran90ParserVisitor<TResult> typedVisitor = visitor as IFortran90ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitComponentArraySpec(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ComponentArraySpecContext componentArraySpec() {
		ComponentArraySpecContext _localctx = new ComponentArraySpecContext(Context, State);
		EnterRule(_localctx, 258, RULE_componentArraySpec);
		try {
			State = 1729;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case DOP:
			case REAL:
			case SIZE:
			case LPAREN:
			case MINUS:
			case PLUS:
			case LNOT:
			case TRUE:
			case FALSE:
			case OBRACKETSLASH:
			case SCON:
			case RDCON:
			case ICON:
			case NAME:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1727;
				explicitShapeSpecList();
				}
				break;
			case COLON:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1728;
				deferredShapeSpecList();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExplicitShapeSpecListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExplicitShapeSpecContext[] explicitShapeSpec() {
			return GetRuleContexts<ExplicitShapeSpecContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExplicitShapeSpecContext explicitShapeSpec(int i) {
			return GetRuleContext<ExplicitShapeSpecContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(Fortran90Parser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(Fortran90Parser.COMMA, i);
		}
		public ExplicitShapeSpecListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_explicitShapeSpecList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortran90ParserListener typedListener = listener as IFortran90ParserListener;
			if (typedListener != null) typedListener.EnterExplicitShapeSpecList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortran90ParserListener typedListener = listener as IFortran90ParserListener;
			if (typedListener != null) typedListener.ExitExplicitShapeSpecList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFortran90ParserVisitor<TResult> typedVisitor = visitor as IFortran90ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExplicitShapeSpecList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExplicitShapeSpecListContext explicitShapeSpecList() {
		ExplicitShapeSpecListContext _localctx = new ExplicitShapeSpecListContext(Context, State);
		EnterRule(_localctx, 260, RULE_explicitShapeSpecList);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1731;
			explicitShapeSpec();
			State = 1736;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,118,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 1732;
					Match(COMMA);
					State = 1733;
					explicitShapeSpec();
					}
					} 
				}
				State = 1738;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,118,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExplicitShapeSpecContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public LowerBoundContext lowerBound() {
			return GetRuleContext<LowerBoundContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(Fortran90Parser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UpperBoundContext upperBound() {
			return GetRuleContext<UpperBoundContext>(0);
		}
		public ExplicitShapeSpecContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_explicitShapeSpec; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortran90ParserListener typedListener = listener as IFortran90ParserListener;
			if (typedListener != null) typedListener.EnterExplicitShapeSpec(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortran90ParserListener typedListener = listener as IFortran90ParserListener;
			if (typedListener != null) typedListener.ExitExplicitShapeSpec(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFortran90ParserVisitor<TResult> typedVisitor = visitor as IFortran90ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExplicitShapeSpec(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExplicitShapeSpecContext explicitShapeSpec() {
		ExplicitShapeSpecContext _localctx = new ExplicitShapeSpecContext(Context, State);
		EnterRule(_localctx, 262, RULE_explicitShapeSpec);
		try {
			State = 1744;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,119,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				{
				State = 1739;
				lowerBound();
				State = 1740;
				Match(COLON);
				State = 1741;
				upperBound();
				}
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1743;
				upperBound();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LowerBoundContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public LowerBoundContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lowerBound; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortran90ParserListener typedListener = listener as IFortran90ParserListener;
			if (typedListener != null) typedListener.EnterLowerBound(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortran90ParserListener typedListener = listener as IFortran90ParserListener;
			if (typedListener != null) typedListener.ExitLowerBound(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFortran90ParserVisitor<TResult> typedVisitor = visitor as IFortran90ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLowerBound(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LowerBoundContext lowerBound() {
		LowerBoundContext _localctx = new LowerBoundContext(Context, State);
		EnterRule(_localctx, 264, RULE_lowerBound);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1746;
			expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UpperBoundContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public UpperBoundContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_upperBound; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortran90ParserListener typedListener = listener as IFortran90ParserListener;
			if (typedListener != null) typedListener.EnterUpperBound(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortran90ParserListener typedListener = listener as IFortran90ParserListener;
			if (typedListener != null) typedListener.ExitUpperBound(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFortran90ParserVisitor<TResult> typedVisitor = visitor as IFortran90ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUpperBound(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UpperBoundContext upperBound() {
		UpperBoundContext _localctx = new UpperBoundContext(Context, State);
		EnterRule(_localctx, 266, RULE_upperBound);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1748;
			expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeferredShapeSpecListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public DeferredShapeSpecContext[] deferredShapeSpec() {
			return GetRuleContexts<DeferredShapeSpecContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public DeferredShapeSpecContext deferredShapeSpec(int i) {
			return GetRuleContext<DeferredShapeSpecContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(Fortran90Parser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(Fortran90Parser.COMMA, i);
		}
		public DeferredShapeSpecListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_deferredShapeSpecList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortran90ParserListener typedListener = listener as IFortran90ParserListener;
			if (typedListener != null) typedListener.EnterDeferredShapeSpecList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortran90ParserListener typedListener = listener as IFortran90ParserListener;
			if (typedListener != null) typedListener.ExitDeferredShapeSpecList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFortran90ParserVisitor<TResult> typedVisitor = visitor as IFortran90ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeferredShapeSpecList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DeferredShapeSpecListContext deferredShapeSpecList() {
		DeferredShapeSpecListContext _localctx = new DeferredShapeSpecListContext(Context, State);
		EnterRule(_localctx, 268, RULE_deferredShapeSpecList);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1750;
			deferredShapeSpec();
			State = 1755;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,120,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 1751;
					Match(COMMA);
					State = 1752;
					deferredShapeSpec();
					}
					} 
				}
				State = 1757;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,120,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeferredShapeSpecContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(Fortran90Parser.COLON, 0); }
		public DeferredShapeSpecContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_deferredShapeSpec; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortran90ParserListener typedListener = listener as IFortran90ParserListener;
			if (typedListener != null) typedListener.EnterDeferredShapeSpec(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortran90ParserListener typedListener = listener as IFortran90ParserListener;
			if (typedListener != null) typedListener.ExitDeferredShapeSpec(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFortran90ParserVisitor<TResult> typedVisitor = visitor as IFortran90ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeferredShapeSpec(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DeferredShapeSpecContext deferredShapeSpec() {
		DeferredShapeSpecContext _localctx = new DeferredShapeSpecContext(Context, State);
		EnterRule(_localctx, 270, RULE_deferredShapeSpec);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1758;
			Match(COLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeSpecContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTEGER() { return GetToken(Fortran90Parser.INTEGER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REAL() { return GetToken(Fortran90Parser.REAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOUBLEPRECISION() { return GetToken(Fortran90Parser.DOUBLEPRECISION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMPLEX() { return GetToken(Fortran90Parser.COMPLEX, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOGICAL() { return GetToken(Fortran90Parser.LOGICAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CHARACTER() { return GetToken(Fortran90Parser.CHARACTER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public LengthSelectorContext lengthSelector() {
			return GetRuleContext<LengthSelectorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public KindSelectorContext kindSelector() {
			return GetRuleContext<KindSelectorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOUBLE() { return GetToken(Fortran90Parser.DOUBLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PRECISION() { return GetToken(Fortran90Parser.PRECISION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public CharSelectorContext charSelector() {
			return GetRuleContext<CharSelectorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TYPE() { return GetToken(Fortran90Parser.TYPE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(Fortran90Parser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeNameContext typeName() {
			return GetRuleContext<TypeNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(Fortran90Parser.RPAREN, 0); }
		public TypeSpecContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeSpec; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortran90ParserListener typedListener = listener as IFortran90ParserListener;
			if (typedListener != null) typedListener.EnterTypeSpec(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortran90ParserListener typedListener = listener as IFortran90ParserListener;
			if (typedListener != null) typedListener.ExitTypeSpec(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFortran90ParserVisitor<TResult> typedVisitor = visitor as IFortran90ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeSpec(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeSpecContext typeSpec() {
		TypeSpecContext _localctx = new TypeSpecContext(Context, State);
		EnterRule(_localctx, 272, RULE_typeSpec);
		try {
			State = 1785;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,121,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1760;
				Match(INTEGER);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1761;
				Match(REAL);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1762;
				Match(DOUBLEPRECISION);
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1763;
				Match(COMPLEX);
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 1764;
				Match(LOGICAL);
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 1765;
				Match(CHARACTER);
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 1766;
				Match(CHARACTER);
				State = 1767;
				lengthSelector();
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 1768;
				Match(INTEGER);
				State = 1769;
				kindSelector();
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 1770;
				Match(REAL);
				State = 1771;
				kindSelector();
				}
				break;
			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 1772;
				Match(DOUBLE);
				State = 1773;
				Match(PRECISION);
				}
				break;
			case 11:
				EnterOuterAlt(_localctx, 11);
				{
				State = 1774;
				Match(COMPLEX);
				State = 1775;
				kindSelector();
				}
				break;
			case 12:
				EnterOuterAlt(_localctx, 12);
				{
				State = 1776;
				Match(CHARACTER);
				State = 1777;
				charSelector();
				}
				break;
			case 13:
				EnterOuterAlt(_localctx, 13);
				{
				State = 1778;
				Match(LOGICAL);
				State = 1779;
				kindSelector();
				}
				break;
			case 14:
				EnterOuterAlt(_localctx, 14);
				{
				State = 1780;
				Match(TYPE);
				State = 1781;
				Match(LPAREN);
				State = 1782;
				typeName();
				State = 1783;
				Match(RPAREN);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class KindSelectorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(Fortran90Parser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KIND() { return GetToken(Fortran90Parser.KIND, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGN() { return GetToken(Fortran90Parser.ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(Fortran90Parser.RPAREN, 0); }
		public KindSelectorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_kindSelector; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortran90ParserListener typedListener = listener as IFortran90ParserListener;
			if (typedListener != null) typedListener.EnterKindSelector(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortran90ParserListener typedListener = listener as IFortran90ParserListener;
			if (typedListener != null) typedListener.ExitKindSelector(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFortran90ParserVisitor<TResult> typedVisitor = visitor as IFortran90ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitKindSelector(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public KindSelectorContext kindSelector() {
		KindSelectorContext _localctx = new KindSelectorContext(Context, State);
		EnterRule(_localctx, 274, RULE_kindSelector);
		try {
			State = 1797;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,122,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1787;
				Match(LPAREN);
				State = 1788;
				Match(KIND);
				State = 1789;
				Match(ASSIGN);
				State = 1790;
				expression(0);
				State = 1791;
				Match(RPAREN);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1793;
				Match(LPAREN);
				State = 1794;
				expression(0);
				State = 1795;
				Match(RPAREN);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentContext ident() {
			return GetRuleContext<IdentContext>(0);
		}
		public TypeNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeName; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortran90ParserListener typedListener = listener as IFortran90ParserListener;
			if (typedListener != null) typedListener.EnterTypeName(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortran90ParserListener typedListener = listener as IFortran90ParserListener;
			if (typedListener != null) typedListener.ExitTypeName(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFortran90ParserVisitor<TResult> typedVisitor = visitor as IFortran90ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeNameContext typeName() {
		TypeNameContext _localctx = new TypeNameContext(Context, State);
		EnterRule(_localctx, 276, RULE_typeName);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1799;
			ident();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CharSelectorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(Fortran90Parser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEN() { return GetToken(Fortran90Parser.LEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] ASSIGN() { return GetTokens(Fortran90Parser.ASSIGN); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGN(int i) {
			return GetToken(Fortran90Parser.ASSIGN, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeParamValueContext typeParamValue() {
			return GetRuleContext<TypeParamValueContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA() { return GetToken(Fortran90Parser.COMMA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KIND() { return GetToken(Fortran90Parser.KIND, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(Fortran90Parser.RPAREN, 0); }
		public CharSelectorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_charSelector; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortran90ParserListener typedListener = listener as IFortran90ParserListener;
			if (typedListener != null) typedListener.EnterCharSelector(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortran90ParserListener typedListener = listener as IFortran90ParserListener;
			if (typedListener != null) typedListener.ExitCharSelector(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFortran90ParserVisitor<TResult> typedVisitor = visitor as IFortran90ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCharSelector(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CharSelectorContext charSelector() {
		CharSelectorContext _localctx = new CharSelectorContext(Context, State);
		EnterRule(_localctx, 278, RULE_charSelector);
		try {
			State = 1835;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,123,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1801;
				Match(LPAREN);
				State = 1802;
				Match(LEN);
				State = 1803;
				Match(ASSIGN);
				State = 1804;
				typeParamValue();
				State = 1805;
				Match(COMMA);
				State = 1806;
				Match(KIND);
				State = 1807;
				Match(ASSIGN);
				State = 1808;
				expression(0);
				State = 1809;
				Match(RPAREN);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1811;
				Match(LPAREN);
				State = 1812;
				Match(LEN);
				State = 1813;
				Match(ASSIGN);
				State = 1814;
				typeParamValue();
				State = 1815;
				Match(COMMA);
				State = 1816;
				expression(0);
				State = 1817;
				Match(RPAREN);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1819;
				Match(LPAREN);
				State = 1820;
				Match(LEN);
				State = 1821;
				Match(ASSIGN);
				State = 1822;
				typeParamValue();
				State = 1823;
				Match(RPAREN);
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1825;
				Match(LPAREN);
				State = 1826;
				Match(KIND);
				State = 1827;
				Match(ASSIGN);
				State = 1828;
				expression(0);
				State = 1829;
				Match(RPAREN);
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 1831;
				Match(LPAREN);
				State = 1832;
				expression(0);
				State = 1833;
				Match(RPAREN);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LengthSelectorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STAR() { return GetToken(Fortran90Parser.STAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public CharLengthContext charLength() {
			return GetRuleContext<CharLengthContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(Fortran90Parser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeParamValueContext typeParamValue() {
			return GetRuleContext<TypeParamValueContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(Fortran90Parser.RPAREN, 0); }
		public LengthSelectorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lengthSelector; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortran90ParserListener typedListener = listener as IFortran90ParserListener;
			if (typedListener != null) typedListener.EnterLengthSelector(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortran90ParserListener typedListener = listener as IFortran90ParserListener;
			if (typedListener != null) typedListener.ExitLengthSelector(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFortran90ParserVisitor<TResult> typedVisitor = visitor as IFortran90ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLengthSelector(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LengthSelectorContext lengthSelector() {
		LengthSelectorContext _localctx = new LengthSelectorContext(Context, State);
		EnterRule(_localctx, 280, RULE_lengthSelector);
		try {
			State = 1843;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case STAR:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1837;
				Match(STAR);
				State = 1838;
				charLength();
				}
				break;
			case LPAREN:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1839;
				Match(LPAREN);
				State = 1840;
				typeParamValue();
				State = 1841;
				Match(RPAREN);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CharLengthContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(Fortran90Parser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeParamValueContext typeParamValue() {
			return GetRuleContext<TypeParamValueContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(Fortran90Parser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ConstantContext constant() {
			return GetRuleContext<ConstantContext>(0);
		}
		public CharLengthContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_charLength; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortran90ParserListener typedListener = listener as IFortran90ParserListener;
			if (typedListener != null) typedListener.EnterCharLength(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortran90ParserListener typedListener = listener as IFortran90ParserListener;
			if (typedListener != null) typedListener.ExitCharLength(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFortran90ParserVisitor<TResult> typedVisitor = visitor as IFortran90ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCharLength(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CharLengthContext charLength() {
		CharLengthContext _localctx = new CharLengthContext(Context, State);
		EnterRule(_localctx, 282, RULE_charLength);
		try {
			State = 1850;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,125,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1845;
				Match(LPAREN);
				State = 1846;
				typeParamValue();
				State = 1847;
				Match(RPAREN);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1849;
				constant();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConstantContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public NamedConstantUseContext namedConstantUse() {
			return GetRuleContext<NamedConstantUseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public UnsignedArithmeticConstantContext unsignedArithmeticConstant() {
			return GetRuleContext<UnsignedArithmeticConstantContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PLUS() { return GetToken(Fortran90Parser.PLUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUS() { return GetToken(Fortran90Parser.MINUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SCON() { return GetToken(Fortran90Parser.SCON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HOLLERITH() { return GetToken(Fortran90Parser.HOLLERITH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public LogicalConstantContext logicalConstant() {
			return GetRuleContext<LogicalConstantContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ICON() { return GetToken(Fortran90Parser.ICON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNDERSCORE() { return GetToken(Fortran90Parser.UNDERSCORE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StructureConstructorContext structureConstructor() {
			return GetRuleContext<StructureConstructorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BozLiteralConstantContext bozLiteralConstant() {
			return GetRuleContext<BozLiteralConstantContext>(0);
		}
		public ConstantContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constant; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortran90ParserListener typedListener = listener as IFortran90ParserListener;
			if (typedListener != null) typedListener.EnterConstant(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortran90ParserListener typedListener = listener as IFortran90ParserListener;
			if (typedListener != null) typedListener.ExitConstant(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFortran90ParserVisitor<TResult> typedVisitor = visitor as IFortran90ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConstant(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConstantContext constant() {
		ConstantContext _localctx = new ConstantContext(Context, State);
		EnterRule(_localctx, 284, RULE_constant);
		int _la;
		try {
			State = 1869;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,127,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1852;
				namedConstantUse();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1854;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==MINUS || _la==PLUS) {
					{
					State = 1853;
					_la = TokenStream.LA(1);
					if ( !(_la==MINUS || _la==PLUS) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
				}

				State = 1856;
				unsignedArithmeticConstant();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1857;
				Match(SCON);
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1858;
				Match(HOLLERITH);
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 1859;
				logicalConstant();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 1860;
				Match(ICON);
				State = 1861;
				Match(UNDERSCORE);
				State = 1862;
				Match(SCON);
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 1863;
				namedConstantUse();
				State = 1864;
				Match(UNDERSCORE);
				State = 1865;
				Match(SCON);
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 1867;
				structureConstructor();
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 1868;
				bozLiteralConstant();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BozLiteralConstantContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BCON() { return GetToken(Fortran90Parser.BCON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OCON() { return GetToken(Fortran90Parser.OCON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ZCON() { return GetToken(Fortran90Parser.ZCON, 0); }
		public BozLiteralConstantContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_bozLiteralConstant; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortran90ParserListener typedListener = listener as IFortran90ParserListener;
			if (typedListener != null) typedListener.EnterBozLiteralConstant(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortran90ParserListener typedListener = listener as IFortran90ParserListener;
			if (typedListener != null) typedListener.ExitBozLiteralConstant(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFortran90ParserVisitor<TResult> typedVisitor = visitor as IFortran90ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBozLiteralConstant(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BozLiteralConstantContext bozLiteralConstant() {
		BozLiteralConstantContext _localctx = new BozLiteralConstantContext(Context, State);
		EnterRule(_localctx, 286, RULE_bozLiteralConstant);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1871;
			_la = TokenStream.LA(1);
			if ( !(((((_la - 174)) & ~0x3f) == 0 && ((1L << (_la - 174)) & 7L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StructureConstructorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypeNameContext typeName() {
			return GetRuleContext<TypeNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(Fortran90Parser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprListContext exprList() {
			return GetRuleContext<ExprListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(Fortran90Parser.RPAREN, 0); }
		public StructureConstructorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_structureConstructor; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortran90ParserListener typedListener = listener as IFortran90ParserListener;
			if (typedListener != null) typedListener.EnterStructureConstructor(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortran90ParserListener typedListener = listener as IFortran90ParserListener;
			if (typedListener != null) typedListener.ExitStructureConstructor(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFortran90ParserVisitor<TResult> typedVisitor = visitor as IFortran90ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStructureConstructor(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StructureConstructorContext structureConstructor() {
		StructureConstructorContext _localctx = new StructureConstructorContext(Context, State);
		EnterRule(_localctx, 288, RULE_structureConstructor);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1873;
			typeName();
			State = 1874;
			Match(LPAREN);
			State = 1875;
			exprList();
			State = 1876;
			Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExprListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA() { return GetToken(Fortran90Parser.COMMA, 0); }
		public ExprListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_exprList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortran90ParserListener typedListener = listener as IFortran90ParserListener;
			if (typedListener != null) typedListener.EnterExprList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortran90ParserListener typedListener = listener as IFortran90ParserListener;
			if (typedListener != null) typedListener.ExitExprList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFortran90ParserVisitor<TResult> typedVisitor = visitor as IFortran90ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExprList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExprListContext exprList() {
		ExprListContext _localctx = new ExprListContext(Context, State);
		EnterRule(_localctx, 290, RULE_exprList);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1878;
			expression(0);
			{
			State = 1879;
			Match(COMMA);
			State = 1880;
			expression(0);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NamedConstantUseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NAME() { return GetToken(Fortran90Parser.NAME, 0); }
		public NamedConstantUseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_namedConstantUse; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortran90ParserListener typedListener = listener as IFortran90ParserListener;
			if (typedListener != null) typedListener.EnterNamedConstantUse(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortran90ParserListener typedListener = listener as IFortran90ParserListener;
			if (typedListener != null) typedListener.ExitNamedConstantUse(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFortran90ParserVisitor<TResult> typedVisitor = visitor as IFortran90ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNamedConstantUse(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NamedConstantUseContext namedConstantUse() {
		NamedConstantUseContext _localctx = new NamedConstantUseContext(Context, State);
		EnterRule(_localctx, 292, RULE_namedConstantUse);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1882;
			Match(NAME);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeParamValueContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STAR() { return GetToken(Fortran90Parser.STAR, 0); }
		public TypeParamValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeParamValue; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortran90ParserListener typedListener = listener as IFortran90ParserListener;
			if (typedListener != null) typedListener.EnterTypeParamValue(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortran90ParserListener typedListener = listener as IFortran90ParserListener;
			if (typedListener != null) typedListener.ExitTypeParamValue(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFortran90ParserVisitor<TResult> typedVisitor = visitor as IFortran90ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeParamValue(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeParamValueContext typeParamValue() {
		TypeParamValueContext _localctx = new TypeParamValueContext(Context, State);
		EnterRule(_localctx, 294, RULE_typeParamValue);
		try {
			State = 1886;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case DOP:
			case REAL:
			case SIZE:
			case LPAREN:
			case MINUS:
			case PLUS:
			case LNOT:
			case TRUE:
			case FALSE:
			case OBRACKETSLASH:
			case SCON:
			case RDCON:
			case ICON:
			case NAME:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1884;
				expression(0);
				}
				break;
			case STAR:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1885;
				Match(STAR);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ModuleStmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MODULE() { return GetToken(Fortran90Parser.MODULE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ModuleNameContext moduleName() {
			return GetRuleContext<ModuleNameContext>(0);
		}
		public ModuleStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_moduleStmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortran90ParserListener typedListener = listener as IFortran90ParserListener;
			if (typedListener != null) typedListener.EnterModuleStmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortran90ParserListener typedListener = listener as IFortran90ParserListener;
			if (typedListener != null) typedListener.ExitModuleStmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFortran90ParserVisitor<TResult> typedVisitor = visitor as IFortran90ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitModuleStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ModuleStmtContext moduleStmt() {
		ModuleStmtContext _localctx = new ModuleStmtContext(Context, State);
		EnterRule(_localctx, 296, RULE_moduleStmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1888;
			Match(MODULE);
			State = 1889;
			moduleName();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ModuleNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentContext ident() {
			return GetRuleContext<IdentContext>(0);
		}
		public ModuleNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_moduleName; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortran90ParserListener typedListener = listener as IFortran90ParserListener;
			if (typedListener != null) typedListener.EnterModuleName(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortran90ParserListener typedListener = listener as IFortran90ParserListener;
			if (typedListener != null) typedListener.ExitModuleName(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFortran90ParserVisitor<TResult> typedVisitor = visitor as IFortran90ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitModuleName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ModuleNameContext moduleName() {
		ModuleNameContext _localctx = new ModuleNameContext(Context, State);
		EnterRule(_localctx, 298, RULE_moduleName);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1891;
			ident();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IdentContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NAME() { return GetToken(Fortran90Parser.NAME, 0); }
		public IdentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ident; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortran90ParserListener typedListener = listener as IFortran90ParserListener;
			if (typedListener != null) typedListener.EnterIdent(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortran90ParserListener typedListener = listener as IFortran90ParserListener;
			if (typedListener != null) typedListener.ExitIdent(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFortran90ParserVisitor<TResult> typedVisitor = visitor as IFortran90ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIdent(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IdentContext ident() {
		IdentContext _localctx = new IdentContext(Context, State);
		EnterRule(_localctx, 300, RULE_ident);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1893;
			Match(NAME);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ModuleBodyContext : ParserRuleContext {
		public ModuleBodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_moduleBody; } }
	 
		public ModuleBodyContext() { }
		public virtual void CopyFrom(ModuleBodyContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class ComplexSubmoduleContext : ModuleBodyContext {
		[System.Diagnostics.DebuggerNonUserCode] public ModuleBodyContext moduleBody() {
			return GetRuleContext<ModuleBodyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ModuleSubprogramPartConstructContext moduleSubprogramPartConstruct() {
			return GetRuleContext<ModuleSubprogramPartConstructContext>(0);
		}
		public ComplexSubmoduleContext(ModuleBodyContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortran90ParserListener typedListener = listener as IFortran90ParserListener;
			if (typedListener != null) typedListener.EnterComplexSubmodule(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortran90ParserListener typedListener = listener as IFortran90ParserListener;
			if (typedListener != null) typedListener.ExitComplexSubmodule(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFortran90ParserVisitor<TResult> typedVisitor = visitor as IFortran90ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitComplexSubmodule(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ComplexSpecPartContext : ModuleBodyContext {
		[System.Diagnostics.DebuggerNonUserCode] public ModuleBodyContext moduleBody() {
			return GetRuleContext<ModuleBodyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SpecificationPartConstructContext specificationPartConstruct() {
			return GetRuleContext<SpecificationPartConstructContext>(0);
		}
		public ComplexSpecPartContext(ModuleBodyContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortran90ParserListener typedListener = listener as IFortran90ParserListener;
			if (typedListener != null) typedListener.EnterComplexSpecPart(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortran90ParserListener typedListener = listener as IFortran90ParserListener;
			if (typedListener != null) typedListener.ExitComplexSpecPart(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFortran90ParserVisitor<TResult> typedVisitor = visitor as IFortran90ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitComplexSpecPart(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class SubmoduleStmtContext : ModuleBodyContext {
		[System.Diagnostics.DebuggerNonUserCode] public ModuleSubprogramPartConstructContext moduleSubprogramPartConstruct() {
			return GetRuleContext<ModuleSubprogramPartConstructContext>(0);
		}
		public SubmoduleStmtContext(ModuleBodyContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortran90ParserListener typedListener = listener as IFortran90ParserListener;
			if (typedListener != null) typedListener.EnterSubmoduleStmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortran90ParserListener typedListener = listener as IFortran90ParserListener;
			if (typedListener != null) typedListener.ExitSubmoduleStmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFortran90ParserVisitor<TResult> typedVisitor = visitor as IFortran90ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSubmoduleStmt(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class SpecPartStmtContext : ModuleBodyContext {
		[System.Diagnostics.DebuggerNonUserCode] public SpecificationPartConstructContext specificationPartConstruct() {
			return GetRuleContext<SpecificationPartConstructContext>(0);
		}
		public SpecPartStmtContext(ModuleBodyContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortran90ParserListener typedListener = listener as IFortran90ParserListener;
			if (typedListener != null) typedListener.EnterSpecPartStmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortran90ParserListener typedListener = listener as IFortran90ParserListener;
			if (typedListener != null) typedListener.ExitSpecPartStmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFortran90ParserVisitor<TResult> typedVisitor = visitor as IFortran90ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSpecPartStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ModuleBodyContext moduleBody() {
		return moduleBody(0);
	}

	private ModuleBodyContext moduleBody(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ModuleBodyContext _localctx = new ModuleBodyContext(Context, _parentState);
		ModuleBodyContext _prevctx = _localctx;
		int _startState = 302;
		EnterRecursionRule(_localctx, 302, RULE_moduleBody, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1898;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,129,Context) ) {
			case 1:
				{
				_localctx = new SpecPartStmtContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;

				State = 1896;
				specificationPartConstruct();
				}
				break;
			case 2:
				{
				_localctx = new SubmoduleStmtContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 1897;
				moduleSubprogramPartConstruct();
				}
				break;
			}
			Context.Stop = TokenStream.LT(-1);
			State = 1906;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,131,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 1904;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,130,Context) ) {
					case 1:
						{
						_localctx = new ComplexSpecPartContext(new ModuleBodyContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_moduleBody);
						State = 1900;
						if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
						State = 1901;
						specificationPartConstruct();
						}
						break;
					case 2:
						{
						_localctx = new ComplexSubmoduleContext(new ModuleBodyContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_moduleBody);
						State = 1902;
						if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
						State = 1903;
						moduleSubprogramPartConstruct();
						}
						break;
					}
					} 
				}
				State = 1908;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,131,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class ModuleSubprogramPartConstructContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ContainsStmtContext containsStmt() {
			return GetRuleContext<ContainsStmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ModuleSubprogramContext moduleSubprogram() {
			return GetRuleContext<ModuleSubprogramContext>(0);
		}
		public ModuleSubprogramPartConstructContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_moduleSubprogramPartConstruct; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortran90ParserListener typedListener = listener as IFortran90ParserListener;
			if (typedListener != null) typedListener.EnterModuleSubprogramPartConstruct(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortran90ParserListener typedListener = listener as IFortran90ParserListener;
			if (typedListener != null) typedListener.ExitModuleSubprogramPartConstruct(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFortran90ParserVisitor<TResult> typedVisitor = visitor as IFortran90ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitModuleSubprogramPartConstruct(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ModuleSubprogramPartConstructContext moduleSubprogramPartConstruct() {
		ModuleSubprogramPartConstructContext _localctx = new ModuleSubprogramPartConstructContext(Context, State);
		EnterRule(_localctx, 304, RULE_moduleSubprogramPartConstruct);
		try {
			State = 1911;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case CONTAINS:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1909;
				containsStmt();
				}
				break;
			case RECURSIVE:
			case FUNCTION:
			case SUBROUTINE:
			case DOUBLEPRECISION:
			case REAL:
			case CHARACTER:
			case DOUBLE:
			case COMPLEX:
			case INTEGER:
			case LOGICAL:
			case TYPE:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1910;
				moduleSubprogram();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ContainsStmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONTAINS() { return GetToken(Fortran90Parser.CONTAINS, 0); }
		public ContainsStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_containsStmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortran90ParserListener typedListener = listener as IFortran90ParserListener;
			if (typedListener != null) typedListener.EnterContainsStmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortran90ParserListener typedListener = listener as IFortran90ParserListener;
			if (typedListener != null) typedListener.ExitContainsStmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFortran90ParserVisitor<TResult> typedVisitor = visitor as IFortran90ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitContainsStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ContainsStmtContext containsStmt() {
		ContainsStmtContext _localctx = new ContainsStmtContext(Context, State);
		EnterRule(_localctx, 306, RULE_containsStmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1913;
			Match(CONTAINS);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ModuleSubprogramContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FunctionSubprogramContext functionSubprogram() {
			return GetRuleContext<FunctionSubprogramContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SubroutineSubprogramContext subroutineSubprogram() {
			return GetRuleContext<SubroutineSubprogramContext>(0);
		}
		public ModuleSubprogramContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_moduleSubprogram; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortran90ParserListener typedListener = listener as IFortran90ParserListener;
			if (typedListener != null) typedListener.EnterModuleSubprogram(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortran90ParserListener typedListener = listener as IFortran90ParserListener;
			if (typedListener != null) typedListener.ExitModuleSubprogram(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFortran90ParserVisitor<TResult> typedVisitor = visitor as IFortran90ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitModuleSubprogram(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ModuleSubprogramContext moduleSubprogram() {
		ModuleSubprogramContext _localctx = new ModuleSubprogramContext(Context, State);
		EnterRule(_localctx, 308, RULE_moduleSubprogram);
		try {
			State = 1917;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,133,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1915;
				functionSubprogram();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1916;
				subroutineSubprogram();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionSubprogramContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FunctionPrefixContext functionPrefix() {
			return GetRuleContext<FunctionPrefixContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionNameContext functionName() {
			return GetRuleContext<FunctionNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionRangeContext functionRange() {
			return GetRuleContext<FunctionRangeContext>(0);
		}
		public FunctionSubprogramContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionSubprogram; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortran90ParserListener typedListener = listener as IFortran90ParserListener;
			if (typedListener != null) typedListener.EnterFunctionSubprogram(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortran90ParserListener typedListener = listener as IFortran90ParserListener;
			if (typedListener != null) typedListener.ExitFunctionSubprogram(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFortran90ParserVisitor<TResult> typedVisitor = visitor as IFortran90ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionSubprogram(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionSubprogramContext functionSubprogram() {
		FunctionSubprogramContext _localctx = new FunctionSubprogramContext(Context, State);
		EnterRule(_localctx, 310, RULE_functionSubprogram);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1919;
			functionPrefix();
			State = 1920;
			functionName();
			State = 1921;
			functionRange();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NAME() { return GetToken(Fortran90Parser.NAME, 0); }
		public FunctionNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionName; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortran90ParserListener typedListener = listener as IFortran90ParserListener;
			if (typedListener != null) typedListener.EnterFunctionName(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortran90ParserListener typedListener = listener as IFortran90ParserListener;
			if (typedListener != null) typedListener.ExitFunctionName(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFortran90ParserVisitor<TResult> typedVisitor = visitor as IFortran90ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionNameContext functionName() {
		FunctionNameContext _localctx = new FunctionNameContext(Context, State);
		EnterRule(_localctx, 312, RULE_functionName);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1923;
			Match(NAME);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionRangeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FunctionParListContext functionParList() {
			return GetRuleContext<FunctionParListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public EndFunctionStmtContext endFunctionStmt() {
			return GetRuleContext<EndFunctionStmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BodyContext body() {
			return GetRuleContext<BodyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RESULT() { return GetToken(Fortran90Parser.RESULT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(Fortran90Parser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NAME() { return GetToken(Fortran90Parser.NAME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(Fortran90Parser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BodyPlusInternalsContext bodyPlusInternals() {
			return GetRuleContext<BodyPlusInternalsContext>(0);
		}
		public FunctionRangeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionRange; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortran90ParserListener typedListener = listener as IFortran90ParserListener;
			if (typedListener != null) typedListener.EnterFunctionRange(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortran90ParserListener typedListener = listener as IFortran90ParserListener;
			if (typedListener != null) typedListener.ExitFunctionRange(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFortran90ParserVisitor<TResult> typedVisitor = visitor as IFortran90ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionRange(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionRangeContext functionRange() {
		FunctionRangeContext _localctx = new FunctionRangeContext(Context, State);
		EnterRule(_localctx, 314, RULE_functionRange);
		try {
			State = 1953;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,136,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1925;
				functionParList();
				State = 1927;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,134,Context) ) {
				case 1:
					{
					State = 1926;
					body();
					}
					break;
				}
				State = 1929;
				endFunctionStmt();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1931;
				functionParList();
				State = 1932;
				Match(RESULT);
				State = 1933;
				Match(LPAREN);
				State = 1934;
				Match(NAME);
				State = 1935;
				Match(RPAREN);
				State = 1937;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,135,Context) ) {
				case 1:
					{
					State = 1936;
					body();
					}
					break;
				}
				State = 1939;
				endFunctionStmt();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1941;
				functionParList();
				State = 1942;
				Match(RESULT);
				State = 1943;
				Match(LPAREN);
				State = 1944;
				Match(NAME);
				State = 1945;
				Match(RPAREN);
				State = 1946;
				bodyPlusInternals(0);
				State = 1947;
				endFunctionStmt();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1949;
				functionParList();
				State = 1950;
				bodyPlusInternals(0);
				State = 1951;
				endFunctionStmt();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BodyContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public BodyConstructContext[] bodyConstruct() {
			return GetRuleContexts<BodyConstructContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public BodyConstructContext bodyConstruct(int i) {
			return GetRuleContext<BodyConstructContext>(i);
		}
		public BodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_body; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortran90ParserListener typedListener = listener as IFortran90ParserListener;
			if (typedListener != null) typedListener.EnterBody(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortran90ParserListener typedListener = listener as IFortran90ParserListener;
			if (typedListener != null) typedListener.ExitBody(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFortran90ParserVisitor<TResult> typedVisitor = visitor as IFortran90ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBody(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BodyContext body() {
		BodyContext _localctx = new BodyContext(Context, State);
		EnterRule(_localctx, 316, RULE_body);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1956;
			ErrorHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 1955;
					bodyConstruct();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 1958;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,137,Context);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BodyConstructContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SpecificationPartConstructContext specificationPartConstruct() {
			return GetRuleContext<SpecificationPartConstructContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExecutableConstructContext executableConstruct() {
			return GetRuleContext<ExecutableConstructContext>(0);
		}
		public BodyConstructContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_bodyConstruct; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortran90ParserListener typedListener = listener as IFortran90ParserListener;
			if (typedListener != null) typedListener.EnterBodyConstruct(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortran90ParserListener typedListener = listener as IFortran90ParserListener;
			if (typedListener != null) typedListener.ExitBodyConstruct(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFortran90ParserVisitor<TResult> typedVisitor = visitor as IFortran90ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBodyConstruct(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BodyConstructContext bodyConstruct() {
		BodyConstructContext _localctx = new BodyConstructContext(Context, State);
		EnterRule(_localctx, 318, RULE_bodyConstruct);
		try {
			State = 1962;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,138,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1960;
				specificationPartConstruct();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1961;
				executableConstruct();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExecutableConstructContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ActionStmtContext actionStmt() {
			return GetRuleContext<ActionStmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DoConstructContext doConstruct() {
			return GetRuleContext<DoConstructContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IfConstructContext ifConstruct() {
			return GetRuleContext<IfConstructContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CaseConstructContext caseConstruct() {
			return GetRuleContext<CaseConstructContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public WhereConstructContext whereConstruct() {
			return GetRuleContext<WhereConstructContext>(0);
		}
		public ExecutableConstructContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_executableConstruct; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortran90ParserListener typedListener = listener as IFortran90ParserListener;
			if (typedListener != null) typedListener.EnterExecutableConstruct(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortran90ParserListener typedListener = listener as IFortran90ParserListener;
			if (typedListener != null) typedListener.ExitExecutableConstruct(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFortran90ParserVisitor<TResult> typedVisitor = visitor as IFortran90ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExecutableConstruct(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExecutableConstructContext executableConstruct() {
		ExecutableConstructContext _localctx = new ExecutableConstructContext(Context, State);
		EnterRule(_localctx, 320, RULE_executableConstruct);
		try {
			State = 1969;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,139,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1964;
				actionStmt();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1965;
				doConstruct();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1966;
				ifConstruct();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1967;
				caseConstruct();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 1968;
				whereConstruct();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WhereConstructContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public WhereContext where() {
			return GetRuleContext<WhereContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public EndWhereStmtContext endWhereStmt() {
			return GetRuleContext<EndWhereStmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ElseWhereContext elseWhere() {
			return GetRuleContext<ElseWhereContext>(0);
		}
		public WhereConstructContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_whereConstruct; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortran90ParserListener typedListener = listener as IFortran90ParserListener;
			if (typedListener != null) typedListener.EnterWhereConstruct(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortran90ParserListener typedListener = listener as IFortran90ParserListener;
			if (typedListener != null) typedListener.ExitWhereConstruct(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFortran90ParserVisitor<TResult> typedVisitor = visitor as IFortran90ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWhereConstruct(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public WhereConstructContext whereConstruct() {
		WhereConstructContext _localctx = new WhereConstructContext(Context, State);
		EnterRule(_localctx, 322, RULE_whereConstruct);
		try {
			State = 1977;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,140,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1971;
				where(0);
				State = 1972;
				endWhereStmt();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1974;
				elseWhere(0);
				State = 1975;
				endWhereStmt();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ElseWhereContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public WhereContext where() {
			return GetRuleContext<WhereContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ElsewhereStmtContext elsewhereStmt() {
			return GetRuleContext<ElsewhereStmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ElseWhereContext elseWhere() {
			return GetRuleContext<ElseWhereContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AssignmentStmtContext assignmentStmt() {
			return GetRuleContext<AssignmentStmtContext>(0);
		}
		public ElseWhereContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_elseWhere; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortran90ParserListener typedListener = listener as IFortran90ParserListener;
			if (typedListener != null) typedListener.EnterElseWhere(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortran90ParserListener typedListener = listener as IFortran90ParserListener;
			if (typedListener != null) typedListener.ExitElseWhere(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFortran90ParserVisitor<TResult> typedVisitor = visitor as IFortran90ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitElseWhere(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ElseWhereContext elseWhere() {
		return elseWhere(0);
	}

	private ElseWhereContext elseWhere(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ElseWhereContext _localctx = new ElseWhereContext(Context, _parentState);
		ElseWhereContext _prevctx = _localctx;
		int _startState = 324;
		EnterRecursionRule(_localctx, 324, RULE_elseWhere, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 1980;
			where(0);
			State = 1981;
			elsewhereStmt();
			}
			Context.Stop = TokenStream.LT(-1);
			State = 1987;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,141,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new ElseWhereContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_elseWhere);
					State = 1983;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 1984;
					assignmentStmt();
					}
					} 
				}
				State = 1989;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,141,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class ElsewhereStmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ELSEWHERE() { return GetToken(Fortran90Parser.ELSEWHERE, 0); }
		public ElsewhereStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_elsewhereStmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortran90ParserListener typedListener = listener as IFortran90ParserListener;
			if (typedListener != null) typedListener.EnterElsewhereStmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortran90ParserListener typedListener = listener as IFortran90ParserListener;
			if (typedListener != null) typedListener.ExitElsewhereStmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFortran90ParserVisitor<TResult> typedVisitor = visitor as IFortran90ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitElsewhereStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ElsewhereStmtContext elsewhereStmt() {
		ElsewhereStmtContext _localctx = new ElsewhereStmtContext(Context, State);
		EnterRule(_localctx, 326, RULE_elsewhereStmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1990;
			Match(ELSEWHERE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EndWhereStmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ENDWHERE() { return GetToken(Fortran90Parser.ENDWHERE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode END() { return GetToken(Fortran90Parser.END, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WHERE() { return GetToken(Fortran90Parser.WHERE, 0); }
		public EndWhereStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_endWhereStmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortran90ParserListener typedListener = listener as IFortran90ParserListener;
			if (typedListener != null) typedListener.EnterEndWhereStmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortran90ParserListener typedListener = listener as IFortran90ParserListener;
			if (typedListener != null) typedListener.ExitEndWhereStmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFortran90ParserVisitor<TResult> typedVisitor = visitor as IFortran90ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEndWhereStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EndWhereStmtContext endWhereStmt() {
		EndWhereStmtContext _localctx = new EndWhereStmtContext(Context, State);
		EnterRule(_localctx, 328, RULE_endWhereStmt);
		try {
			State = 1995;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ENDWHERE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1992;
				Match(ENDWHERE);
				}
				break;
			case END:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1993;
				Match(END);
				State = 1994;
				Match(WHERE);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WhereContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public WhereConstructStmtContext whereConstructStmt() {
			return GetRuleContext<WhereConstructStmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public WhereContext where() {
			return GetRuleContext<WhereContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AssignmentStmtContext assignmentStmt() {
			return GetRuleContext<AssignmentStmtContext>(0);
		}
		public WhereContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_where; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortran90ParserListener typedListener = listener as IFortran90ParserListener;
			if (typedListener != null) typedListener.EnterWhere(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortran90ParserListener typedListener = listener as IFortran90ParserListener;
			if (typedListener != null) typedListener.ExitWhere(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFortran90ParserVisitor<TResult> typedVisitor = visitor as IFortran90ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWhere(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public WhereContext where() {
		return where(0);
	}

	private WhereContext where(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		WhereContext _localctx = new WhereContext(Context, _parentState);
		WhereContext _prevctx = _localctx;
		int _startState = 330;
		EnterRecursionRule(_localctx, 330, RULE_where, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 1998;
			whereConstructStmt();
			}
			Context.Stop = TokenStream.LT(-1);
			State = 2004;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,143,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new WhereContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_where);
					State = 2000;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 2001;
					assignmentStmt();
					}
					} 
				}
				State = 2006;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,143,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class WhereConstructStmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WHERE() { return GetToken(Fortran90Parser.WHERE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(Fortran90Parser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public MaskExprContext maskExpr() {
			return GetRuleContext<MaskExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(Fortran90Parser.RPAREN, 0); }
		public WhereConstructStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_whereConstructStmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortran90ParserListener typedListener = listener as IFortran90ParserListener;
			if (typedListener != null) typedListener.EnterWhereConstructStmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortran90ParserListener typedListener = listener as IFortran90ParserListener;
			if (typedListener != null) typedListener.ExitWhereConstructStmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFortran90ParserVisitor<TResult> typedVisitor = visitor as IFortran90ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWhereConstructStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public WhereConstructStmtContext whereConstructStmt() {
		WhereConstructStmtContext _localctx = new WhereConstructStmtContext(Context, State);
		EnterRule(_localctx, 332, RULE_whereConstructStmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2007;
			Match(WHERE);
			State = 2008;
			Match(LPAREN);
			State = 2009;
			maskExpr();
			State = 2010;
			Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MaskExprContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public MaskExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_maskExpr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortran90ParserListener typedListener = listener as IFortran90ParserListener;
			if (typedListener != null) typedListener.EnterMaskExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortran90ParserListener typedListener = listener as IFortran90ParserListener;
			if (typedListener != null) typedListener.ExitMaskExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFortran90ParserVisitor<TResult> typedVisitor = visitor as IFortran90ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMaskExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MaskExprContext maskExpr() {
		MaskExprContext _localctx = new MaskExprContext(Context, State);
		EnterRule(_localctx, 334, RULE_maskExpr);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2012;
			expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CaseConstructContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NAME() { return GetToken(Fortran90Parser.NAME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(Fortran90Parser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SELECTCASE() { return GetToken(Fortran90Parser.SELECTCASE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(Fortran90Parser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(Fortran90Parser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SelectCaseRangeContext selectCaseRange() {
			return GetRuleContext<SelectCaseRangeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SELECT() { return GetToken(Fortran90Parser.SELECT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CASE() { return GetToken(Fortran90Parser.CASE, 0); }
		public CaseConstructContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_caseConstruct; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortran90ParserListener typedListener = listener as IFortran90ParserListener;
			if (typedListener != null) typedListener.EnterCaseConstruct(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortran90ParserListener typedListener = listener as IFortran90ParserListener;
			if (typedListener != null) typedListener.ExitCaseConstruct(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFortran90ParserVisitor<TResult> typedVisitor = visitor as IFortran90ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCaseConstruct(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CaseConstructContext caseConstruct() {
		CaseConstructContext _localctx = new CaseConstructContext(Context, State);
		EnterRule(_localctx, 336, RULE_caseConstruct);
		try {
			State = 2044;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,144,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2014;
				Match(NAME);
				State = 2015;
				Match(COLON);
				State = 2016;
				Match(SELECTCASE);
				State = 2017;
				Match(LPAREN);
				State = 2018;
				expression(0);
				State = 2019;
				Match(RPAREN);
				State = 2020;
				selectCaseRange();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2022;
				Match(SELECTCASE);
				State = 2023;
				Match(LPAREN);
				State = 2024;
				expression(0);
				State = 2025;
				Match(RPAREN);
				State = 2026;
				selectCaseRange();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 2028;
				Match(NAME);
				State = 2029;
				Match(COLON);
				State = 2030;
				Match(SELECT);
				State = 2031;
				Match(CASE);
				State = 2032;
				Match(LPAREN);
				State = 2033;
				expression(0);
				State = 2034;
				Match(RPAREN);
				State = 2035;
				selectCaseRange();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 2037;
				Match(SELECT);
				State = 2038;
				Match(CASE);
				State = 2039;
				Match(LPAREN);
				State = 2040;
				expression(0);
				State = 2041;
				Match(RPAREN);
				State = 2042;
				selectCaseRange();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SelectCaseRangeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SelectCaseBodyContext selectCaseBody() {
			return GetRuleContext<SelectCaseBodyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public EndSelectStmtContext endSelectStmt() {
			return GetRuleContext<EndSelectStmtContext>(0);
		}
		public SelectCaseRangeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_selectCaseRange; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortran90ParserListener typedListener = listener as IFortran90ParserListener;
			if (typedListener != null) typedListener.EnterSelectCaseRange(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortran90ParserListener typedListener = listener as IFortran90ParserListener;
			if (typedListener != null) typedListener.ExitSelectCaseRange(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFortran90ParserVisitor<TResult> typedVisitor = visitor as IFortran90ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSelectCaseRange(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SelectCaseRangeContext selectCaseRange() {
		SelectCaseRangeContext _localctx = new SelectCaseRangeContext(Context, State);
		EnterRule(_localctx, 338, RULE_selectCaseRange);
		try {
			State = 2050;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case CASE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2046;
				selectCaseBody(0);
				State = 2047;
				endSelectStmt();
				}
				break;
			case END:
			case ENDSELECT:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2049;
				endSelectStmt();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EndSelectStmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ENDSELECT() { return GetToken(Fortran90Parser.ENDSELECT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NAME() { return GetToken(Fortran90Parser.NAME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode END() { return GetToken(Fortran90Parser.END, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SELECT() { return GetToken(Fortran90Parser.SELECT, 0); }
		public EndSelectStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_endSelectStmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortran90ParserListener typedListener = listener as IFortran90ParserListener;
			if (typedListener != null) typedListener.EnterEndSelectStmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortran90ParserListener typedListener = listener as IFortran90ParserListener;
			if (typedListener != null) typedListener.ExitEndSelectStmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFortran90ParserVisitor<TResult> typedVisitor = visitor as IFortran90ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEndSelectStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EndSelectStmtContext endSelectStmt() {
		EndSelectStmtContext _localctx = new EndSelectStmtContext(Context, State);
		EnterRule(_localctx, 340, RULE_endSelectStmt);
		try {
			State = 2061;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ENDSELECT:
				EnterOuterAlt(_localctx, 1);
				{
				{
				State = 2052;
				Match(ENDSELECT);
				State = 2054;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,146,Context) ) {
				case 1:
					{
					State = 2053;
					Match(NAME);
					}
					break;
				}
				}
				}
				break;
			case END:
				EnterOuterAlt(_localctx, 2);
				{
				{
				State = 2056;
				Match(END);
				State = 2057;
				Match(SELECT);
				State = 2059;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,147,Context) ) {
				case 1:
					{
					State = 2058;
					Match(NAME);
					}
					break;
				}
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SelectCaseBodyContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public CaseStmtContext caseStmt() {
			return GetRuleContext<CaseStmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SelectCaseBodyContext selectCaseBody() {
			return GetRuleContext<SelectCaseBodyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CaseBodyConstructContext caseBodyConstruct() {
			return GetRuleContext<CaseBodyConstructContext>(0);
		}
		public SelectCaseBodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_selectCaseBody; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortran90ParserListener typedListener = listener as IFortran90ParserListener;
			if (typedListener != null) typedListener.EnterSelectCaseBody(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortran90ParserListener typedListener = listener as IFortran90ParserListener;
			if (typedListener != null) typedListener.ExitSelectCaseBody(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFortran90ParserVisitor<TResult> typedVisitor = visitor as IFortran90ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSelectCaseBody(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SelectCaseBodyContext selectCaseBody() {
		return selectCaseBody(0);
	}

	private SelectCaseBodyContext selectCaseBody(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		SelectCaseBodyContext _localctx = new SelectCaseBodyContext(Context, _parentState);
		SelectCaseBodyContext _prevctx = _localctx;
		int _startState = 342;
		EnterRecursionRule(_localctx, 342, RULE_selectCaseBody, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 2064;
			caseStmt();
			}
			Context.Stop = TokenStream.LT(-1);
			State = 2070;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,149,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new SelectCaseBodyContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_selectCaseBody);
					State = 2066;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 2067;
					caseBodyConstruct();
					}
					} 
				}
				State = 2072;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,149,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class CaseBodyConstructContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public CaseStmtContext caseStmt() {
			return GetRuleContext<CaseStmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExecutionPartConstructContext executionPartConstruct() {
			return GetRuleContext<ExecutionPartConstructContext>(0);
		}
		public CaseBodyConstructContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_caseBodyConstruct; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortran90ParserListener typedListener = listener as IFortran90ParserListener;
			if (typedListener != null) typedListener.EnterCaseBodyConstruct(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortran90ParserListener typedListener = listener as IFortran90ParserListener;
			if (typedListener != null) typedListener.ExitCaseBodyConstruct(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFortran90ParserVisitor<TResult> typedVisitor = visitor as IFortran90ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCaseBodyConstruct(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CaseBodyConstructContext caseBodyConstruct() {
		CaseBodyConstructContext _localctx = new CaseBodyConstructContext(Context, State);
		EnterRule(_localctx, 344, RULE_caseBodyConstruct);
		try {
			State = 2075;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case CASE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2073;
				caseStmt();
				}
				break;
			case ENTRY:
			case END:
			case ASSIGNSTMT:
			case DATA:
			case GO:
			case GOTO:
			case IF:
			case DO:
			case CONTINUE:
			case WHERE:
			case SELECTCASE:
			case SELECT:
			case STOP:
			case PAUSE:
			case WRITE:
			case READ:
			case PRINT:
			case OPEN:
			case CALL:
			case RETURN:
			case CLOSE:
			case INQUIRE:
			case BACKSPACE:
			case ENDFILE:
			case REWIND:
			case ALLOCATE:
			case DEALLOCATE:
			case NULLIFY:
			case CYCLE:
			case ICON:
			case NAME:
			case EXIT:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2074;
				executionPartConstruct();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CaseStmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CASE() { return GetToken(Fortran90Parser.CASE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public CaseSelectorContext caseSelector() {
			return GetRuleContext<CaseSelectorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NAME() { return GetToken(Fortran90Parser.NAME, 0); }
		public CaseStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_caseStmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortran90ParserListener typedListener = listener as IFortran90ParserListener;
			if (typedListener != null) typedListener.EnterCaseStmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortran90ParserListener typedListener = listener as IFortran90ParserListener;
			if (typedListener != null) typedListener.ExitCaseStmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFortran90ParserVisitor<TResult> typedVisitor = visitor as IFortran90ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCaseStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CaseStmtContext caseStmt() {
		CaseStmtContext _localctx = new CaseStmtContext(Context, State);
		EnterRule(_localctx, 346, RULE_caseStmt);
		try {
			State = 2083;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,151,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2077;
				Match(CASE);
				State = 2078;
				caseSelector();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2079;
				Match(CASE);
				State = 2080;
				caseSelector();
				State = 2081;
				Match(NAME);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CaseSelectorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(Fortran90Parser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public CaseValueRangeListContext caseValueRangeList() {
			return GetRuleContext<CaseValueRangeListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(Fortran90Parser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEFAULT() { return GetToken(Fortran90Parser.DEFAULT, 0); }
		public CaseSelectorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_caseSelector; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortran90ParserListener typedListener = listener as IFortran90ParserListener;
			if (typedListener != null) typedListener.EnterCaseSelector(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortran90ParserListener typedListener = listener as IFortran90ParserListener;
			if (typedListener != null) typedListener.ExitCaseSelector(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFortran90ParserVisitor<TResult> typedVisitor = visitor as IFortran90ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCaseSelector(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CaseSelectorContext caseSelector() {
		CaseSelectorContext _localctx = new CaseSelectorContext(Context, State);
		EnterRule(_localctx, 348, RULE_caseSelector);
		try {
			State = 2090;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case LPAREN:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2085;
				Match(LPAREN);
				State = 2086;
				caseValueRangeList();
				State = 2087;
				Match(RPAREN);
				}
				break;
			case DEFAULT:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2089;
				Match(DEFAULT);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CaseValueRangeListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public CaseValueRangeContext[] caseValueRange() {
			return GetRuleContexts<CaseValueRangeContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public CaseValueRangeContext caseValueRange(int i) {
			return GetRuleContext<CaseValueRangeContext>(i);
		}
		public CaseValueRangeListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_caseValueRangeList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortran90ParserListener typedListener = listener as IFortran90ParserListener;
			if (typedListener != null) typedListener.EnterCaseValueRangeList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortran90ParserListener typedListener = listener as IFortran90ParserListener;
			if (typedListener != null) typedListener.ExitCaseValueRangeList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFortran90ParserVisitor<TResult> typedVisitor = visitor as IFortran90ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCaseValueRangeList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CaseValueRangeListContext caseValueRangeList() {
		CaseValueRangeListContext _localctx = new CaseValueRangeListContext(Context, State);
		EnterRule(_localctx, 350, RULE_caseValueRangeList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2093;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 2092;
				caseValueRange();
				}
				}
				State = 2095;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==DOP || _la==REAL || ((((_la - 84)) & ~0x3f) == 0 && ((1L << (_la - 84)) & 4961546220339201L) != 0) || ((((_la - 149)) & ~0x3f) == 0 && ((1L << (_la - 149)) & 688004268035L) != 0) );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CaseValueRangeContext : ParserRuleContext {
		public CaseValueRangeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_caseValueRange; } }
	 
		public CaseValueRangeContext() { }
		public virtual void CopyFrom(CaseValueRangeContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class MidlleColonExpressionContext : CaseValueRangeContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(Fortran90Parser.COLON, 0); }
		public MidlleColonExpressionContext(CaseValueRangeContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortran90ParserListener typedListener = listener as IFortran90ParserListener;
			if (typedListener != null) typedListener.EnterMidlleColonExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortran90ParserListener typedListener = listener as IFortran90ParserListener;
			if (typedListener != null) typedListener.ExitMidlleColonExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFortran90ParserVisitor<TResult> typedVisitor = visitor as IFortran90ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMidlleColonExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class LitteralExpressionContext : CaseValueRangeContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public LitteralExpressionContext(CaseValueRangeContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortran90ParserListener typedListener = listener as IFortran90ParserListener;
			if (typedListener != null) typedListener.EnterLitteralExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortran90ParserListener typedListener = listener as IFortran90ParserListener;
			if (typedListener != null) typedListener.ExitLitteralExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFortran90ParserVisitor<TResult> typedVisitor = visitor as IFortran90ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLitteralExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AfterColonExpressionContext : CaseValueRangeContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(Fortran90Parser.COLON, 0); }
		public AfterColonExpressionContext(CaseValueRangeContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortran90ParserListener typedListener = listener as IFortran90ParserListener;
			if (typedListener != null) typedListener.EnterAfterColonExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortran90ParserListener typedListener = listener as IFortran90ParserListener;
			if (typedListener != null) typedListener.ExitAfterColonExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFortran90ParserVisitor<TResult> typedVisitor = visitor as IFortran90ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAfterColonExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class BeforeColonExpressionContext : CaseValueRangeContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(Fortran90Parser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public BeforeColonExpressionContext(CaseValueRangeContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortran90ParserListener typedListener = listener as IFortran90ParserListener;
			if (typedListener != null) typedListener.EnterBeforeColonExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortran90ParserListener typedListener = listener as IFortran90ParserListener;
			if (typedListener != null) typedListener.ExitBeforeColonExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFortran90ParserVisitor<TResult> typedVisitor = visitor as IFortran90ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBeforeColonExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CaseValueRangeContext caseValueRange() {
		CaseValueRangeContext _localctx = new CaseValueRangeContext(Context, State);
		EnterRule(_localctx, 352, RULE_caseValueRange);
		try {
			State = 2107;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,154,Context) ) {
			case 1:
				_localctx = new LitteralExpressionContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 2097;
				expression(0);
				}
				break;
			case 2:
				_localctx = new AfterColonExpressionContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 2098;
				expression(0);
				State = 2099;
				Match(COLON);
				}
				break;
			case 3:
				_localctx = new BeforeColonExpressionContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 2101;
				Match(COLON);
				State = 2102;
				expression(0);
				}
				break;
			case 4:
				_localctx = new MidlleColonExpressionContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 2103;
				expression(0);
				State = 2104;
				Match(COLON);
				State = 2105;
				expression(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IfConstructContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IfThenStmtContext ifThenStmt() {
			return GetRuleContext<IfThenStmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ConditionalBodyContext conditionalBody() {
			return GetRuleContext<ConditionalBodyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public EndIfStmtContext endIfStmt() {
			return GetRuleContext<EndIfStmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ElseIfConstructContext[] elseIfConstruct() {
			return GetRuleContexts<ElseIfConstructContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ElseIfConstructContext elseIfConstruct(int i) {
			return GetRuleContext<ElseIfConstructContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ElseConstructContext elseConstruct() {
			return GetRuleContext<ElseConstructContext>(0);
		}
		public IfConstructContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ifConstruct; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortran90ParserListener typedListener = listener as IFortran90ParserListener;
			if (typedListener != null) typedListener.EnterIfConstruct(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortran90ParserListener typedListener = listener as IFortran90ParserListener;
			if (typedListener != null) typedListener.ExitIfConstruct(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFortran90ParserVisitor<TResult> typedVisitor = visitor as IFortran90ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIfConstruct(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IfConstructContext ifConstruct() {
		IfConstructContext _localctx = new IfConstructContext(Context, State);
		EnterRule(_localctx, 354, RULE_ifConstruct);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 2109;
			ifThenStmt();
			State = 2110;
			conditionalBody();
			State = 2114;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,155,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 2111;
					elseIfConstruct();
					}
					} 
				}
				State = 2116;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,155,Context);
			}
			State = 2118;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ELSE) {
				{
				State = 2117;
				elseConstruct();
				}
			}

			State = 2120;
			endIfStmt();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IfThenStmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF() { return GetToken(Fortran90Parser.IF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(Fortran90Parser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(Fortran90Parser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode THEN() { return GetToken(Fortran90Parser.THEN, 0); }
		public IfThenStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ifThenStmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortran90ParserListener typedListener = listener as IFortran90ParserListener;
			if (typedListener != null) typedListener.EnterIfThenStmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortran90ParserListener typedListener = listener as IFortran90ParserListener;
			if (typedListener != null) typedListener.ExitIfThenStmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFortran90ParserVisitor<TResult> typedVisitor = visitor as IFortran90ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIfThenStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IfThenStmtContext ifThenStmt() {
		IfThenStmtContext _localctx = new IfThenStmtContext(Context, State);
		EnterRule(_localctx, 356, RULE_ifThenStmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2122;
			Match(IF);
			State = 2123;
			Match(LPAREN);
			State = 2124;
			expression(0);
			State = 2125;
			Match(RPAREN);
			State = 2126;
			Match(THEN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConditionalBodyContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExecutionPartConstructContext[] executionPartConstruct() {
			return GetRuleContexts<ExecutionPartConstructContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExecutionPartConstructContext executionPartConstruct(int i) {
			return GetRuleContext<ExecutionPartConstructContext>(i);
		}
		public ConditionalBodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_conditionalBody; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortran90ParserListener typedListener = listener as IFortran90ParserListener;
			if (typedListener != null) typedListener.EnterConditionalBody(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortran90ParserListener typedListener = listener as IFortran90ParserListener;
			if (typedListener != null) typedListener.ExitConditionalBody(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFortran90ParserVisitor<TResult> typedVisitor = visitor as IFortran90ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConditionalBody(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConditionalBodyContext conditionalBody() {
		ConditionalBodyContext _localctx = new ConditionalBodyContext(Context, State);
		EnterRule(_localctx, 358, RULE_conditionalBody);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 2131;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,157,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 2128;
					executionPartConstruct();
					}
					} 
				}
				State = 2133;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,157,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ElseIfConstructContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ElseIfStmtContext elseIfStmt() {
			return GetRuleContext<ElseIfStmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ConditionalBodyContext conditionalBody() {
			return GetRuleContext<ConditionalBodyContext>(0);
		}
		public ElseIfConstructContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_elseIfConstruct; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortran90ParserListener typedListener = listener as IFortran90ParserListener;
			if (typedListener != null) typedListener.EnterElseIfConstruct(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortran90ParserListener typedListener = listener as IFortran90ParserListener;
			if (typedListener != null) typedListener.ExitElseIfConstruct(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFortran90ParserVisitor<TResult> typedVisitor = visitor as IFortran90ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitElseIfConstruct(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ElseIfConstructContext elseIfConstruct() {
		ElseIfConstructContext _localctx = new ElseIfConstructContext(Context, State);
		EnterRule(_localctx, 360, RULE_elseIfConstruct);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2134;
			elseIfStmt();
			State = 2135;
			conditionalBody();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ElseIfStmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ELSEIF() { return GetToken(Fortran90Parser.ELSEIF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(Fortran90Parser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(Fortran90Parser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode THEN() { return GetToken(Fortran90Parser.THEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ELSE() { return GetToken(Fortran90Parser.ELSE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF() { return GetToken(Fortran90Parser.IF, 0); }
		public ElseIfStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_elseIfStmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortran90ParserListener typedListener = listener as IFortran90ParserListener;
			if (typedListener != null) typedListener.EnterElseIfStmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortran90ParserListener typedListener = listener as IFortran90ParserListener;
			if (typedListener != null) typedListener.ExitElseIfStmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFortran90ParserVisitor<TResult> typedVisitor = visitor as IFortran90ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitElseIfStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ElseIfStmtContext elseIfStmt() {
		ElseIfStmtContext _localctx = new ElseIfStmtContext(Context, State);
		EnterRule(_localctx, 362, RULE_elseIfStmt);
		try {
			State = 2150;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ELSEIF:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2137;
				Match(ELSEIF);
				State = 2138;
				Match(LPAREN);
				State = 2139;
				expression(0);
				State = 2140;
				Match(RPAREN);
				State = 2141;
				Match(THEN);
				}
				break;
			case ELSE:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2143;
				Match(ELSE);
				State = 2144;
				Match(IF);
				State = 2145;
				Match(LPAREN);
				State = 2146;
				expression(0);
				State = 2147;
				Match(RPAREN);
				State = 2148;
				Match(THEN);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ElseConstructContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ElseStmtContext elseStmt() {
			return GetRuleContext<ElseStmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ConditionalBodyContext conditionalBody() {
			return GetRuleContext<ConditionalBodyContext>(0);
		}
		public ElseConstructContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_elseConstruct; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortran90ParserListener typedListener = listener as IFortran90ParserListener;
			if (typedListener != null) typedListener.EnterElseConstruct(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortran90ParserListener typedListener = listener as IFortran90ParserListener;
			if (typedListener != null) typedListener.ExitElseConstruct(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFortran90ParserVisitor<TResult> typedVisitor = visitor as IFortran90ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitElseConstruct(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ElseConstructContext elseConstruct() {
		ElseConstructContext _localctx = new ElseConstructContext(Context, State);
		EnterRule(_localctx, 364, RULE_elseConstruct);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2152;
			elseStmt();
			State = 2153;
			conditionalBody();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ElseStmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ELSE() { return GetToken(Fortran90Parser.ELSE, 0); }
		public ElseStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_elseStmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortran90ParserListener typedListener = listener as IFortran90ParserListener;
			if (typedListener != null) typedListener.EnterElseStmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortran90ParserListener typedListener = listener as IFortran90ParserListener;
			if (typedListener != null) typedListener.ExitElseStmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFortran90ParserVisitor<TResult> typedVisitor = visitor as IFortran90ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitElseStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ElseStmtContext elseStmt() {
		ElseStmtContext _localctx = new ElseStmtContext(Context, State);
		EnterRule(_localctx, 366, RULE_elseStmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2155;
			Match(ELSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EndIfStmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ENDIF() { return GetToken(Fortran90Parser.ENDIF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode END() { return GetToken(Fortran90Parser.END, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF() { return GetToken(Fortran90Parser.IF, 0); }
		public EndIfStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_endIfStmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortran90ParserListener typedListener = listener as IFortran90ParserListener;
			if (typedListener != null) typedListener.EnterEndIfStmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortran90ParserListener typedListener = listener as IFortran90ParserListener;
			if (typedListener != null) typedListener.ExitEndIfStmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFortran90ParserVisitor<TResult> typedVisitor = visitor as IFortran90ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEndIfStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EndIfStmtContext endIfStmt() {
		EndIfStmtContext _localctx = new EndIfStmtContext(Context, State);
		EnterRule(_localctx, 368, RULE_endIfStmt);
		try {
			State = 2160;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ENDIF:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2157;
				Match(ENDIF);
				}
				break;
			case END:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2158;
				Match(END);
				State = 2159;
				Match(IF);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DoConstructContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public LabelDoStmtContext labelDoStmt() {
			return GetRuleContext<LabelDoStmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BlockDoConstructContext blockDoConstruct() {
			return GetRuleContext<BlockDoConstructContext>(0);
		}
		public DoConstructContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_doConstruct; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortran90ParserListener typedListener = listener as IFortran90ParserListener;
			if (typedListener != null) typedListener.EnterDoConstruct(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortran90ParserListener typedListener = listener as IFortran90ParserListener;
			if (typedListener != null) typedListener.ExitDoConstruct(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFortran90ParserVisitor<TResult> typedVisitor = visitor as IFortran90ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDoConstruct(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DoConstructContext doConstruct() {
		DoConstructContext _localctx = new DoConstructContext(Context, State);
		EnterRule(_localctx, 370, RULE_doConstruct);
		try {
			State = 2164;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,160,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2162;
				labelDoStmt();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2163;
				blockDoConstruct();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlockDoConstructContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DO() { return GetToken(Fortran90Parser.DO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public EndDoStmtContext endDoStmt() {
			return GetRuleContext<EndDoStmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NameColonContext nameColon() {
			return GetRuleContext<NameColonContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CommaLoopControlContext commaLoopControl() {
			return GetRuleContext<CommaLoopControlContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExecutionPartConstructContext[] executionPartConstruct() {
			return GetRuleContexts<ExecutionPartConstructContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExecutionPartConstructContext executionPartConstruct(int i) {
			return GetRuleContext<ExecutionPartConstructContext>(i);
		}
		public BlockDoConstructContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_blockDoConstruct; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortran90ParserListener typedListener = listener as IFortran90ParserListener;
			if (typedListener != null) typedListener.EnterBlockDoConstruct(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortran90ParserListener typedListener = listener as IFortran90ParserListener;
			if (typedListener != null) typedListener.ExitBlockDoConstruct(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFortran90ParserVisitor<TResult> typedVisitor = visitor as IFortran90ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBlockDoConstruct(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BlockDoConstructContext blockDoConstruct() {
		BlockDoConstructContext _localctx = new BlockDoConstructContext(Context, State);
		EnterRule(_localctx, 372, RULE_blockDoConstruct);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 2167;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==NAME) {
				{
				State = 2166;
				nameColon();
				}
			}

			State = 2169;
			Match(DO);
			State = 2171;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,162,Context) ) {
			case 1:
				{
				State = 2170;
				commaLoopControl();
				}
				break;
			}
			State = 2176;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,163,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 2173;
					executionPartConstruct();
					}
					} 
				}
				State = 2178;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,163,Context);
			}
			State = 2179;
			endDoStmt();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EndDoStmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ENDDO() { return GetToken(Fortran90Parser.ENDDO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public EndNameContext endName() {
			return GetRuleContext<EndNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode END() { return GetToken(Fortran90Parser.END, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DO() { return GetToken(Fortran90Parser.DO, 0); }
		public EndDoStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_endDoStmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortran90ParserListener typedListener = listener as IFortran90ParserListener;
			if (typedListener != null) typedListener.EnterEndDoStmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortran90ParserListener typedListener = listener as IFortran90ParserListener;
			if (typedListener != null) typedListener.ExitEndDoStmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFortran90ParserVisitor<TResult> typedVisitor = visitor as IFortran90ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEndDoStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EndDoStmtContext endDoStmt() {
		EndDoStmtContext _localctx = new EndDoStmtContext(Context, State);
		EnterRule(_localctx, 374, RULE_endDoStmt);
		try {
			State = 2190;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ENDDO:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2181;
				Match(ENDDO);
				State = 2183;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,164,Context) ) {
				case 1:
					{
					State = 2182;
					endName();
					}
					break;
				}
				}
				break;
			case END:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2185;
				Match(END);
				State = 2186;
				Match(DO);
				State = 2188;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,165,Context) ) {
				case 1:
					{
					State = 2187;
					endName();
					}
					break;
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EndNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentContext ident() {
			return GetRuleContext<IdentContext>(0);
		}
		public EndNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_endName; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortran90ParserListener typedListener = listener as IFortran90ParserListener;
			if (typedListener != null) typedListener.EnterEndName(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortran90ParserListener typedListener = listener as IFortran90ParserListener;
			if (typedListener != null) typedListener.ExitEndName(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFortran90ParserVisitor<TResult> typedVisitor = visitor as IFortran90ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEndName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EndNameContext endName() {
		EndNameContext _localctx = new EndNameContext(Context, State);
		EnterRule(_localctx, 376, RULE_endName);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2192;
			ident();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NameColonContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NAME() { return GetToken(Fortran90Parser.NAME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(Fortran90Parser.COLON, 0); }
		public NameColonContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_nameColon; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortran90ParserListener typedListener = listener as IFortran90ParserListener;
			if (typedListener != null) typedListener.EnterNameColon(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortran90ParserListener typedListener = listener as IFortran90ParserListener;
			if (typedListener != null) typedListener.ExitNameColon(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFortran90ParserVisitor<TResult> typedVisitor = visitor as IFortran90ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNameColon(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NameColonContext nameColon() {
		NameColonContext _localctx = new NameColonContext(Context, State);
		EnterRule(_localctx, 378, RULE_nameColon);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2194;
			Match(NAME);
			State = 2195;
			Match(COLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LabelDoStmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DO() { return GetToken(Fortran90Parser.DO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public DoLblRefContext doLblRef() {
			return GetRuleContext<DoLblRefContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CommaLoopControlContext commaLoopControl() {
			return GetRuleContext<CommaLoopControlContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DoLblDefContext doLblDef() {
			return GetRuleContext<DoLblDefContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DoLabelStmtContext doLabelStmt() {
			return GetRuleContext<DoLabelStmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExecutionPartConstructContext[] executionPartConstruct() {
			return GetRuleContexts<ExecutionPartConstructContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExecutionPartConstructContext executionPartConstruct(int i) {
			return GetRuleContext<ExecutionPartConstructContext>(i);
		}
		public LabelDoStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_labelDoStmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortran90ParserListener typedListener = listener as IFortran90ParserListener;
			if (typedListener != null) typedListener.EnterLabelDoStmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortran90ParserListener typedListener = listener as IFortran90ParserListener;
			if (typedListener != null) typedListener.ExitLabelDoStmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFortran90ParserVisitor<TResult> typedVisitor = visitor as IFortran90ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLabelDoStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LabelDoStmtContext labelDoStmt() {
		LabelDoStmtContext _localctx = new LabelDoStmtContext(Context, State);
		EnterRule(_localctx, 380, RULE_labelDoStmt);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 2197;
			Match(DO);
			State = 2198;
			doLblRef();
			State = 2199;
			commaLoopControl();
			State = 2203;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,167,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 2200;
					executionPartConstruct();
					}
					} 
				}
				State = 2205;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,167,Context);
			}
			State = 2206;
			doLblDef();
			State = 2207;
			doLabelStmt();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DoLblRefContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ICON() { return GetToken(Fortran90Parser.ICON, 0); }
		public DoLblRefContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_doLblRef; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortran90ParserListener typedListener = listener as IFortran90ParserListener;
			if (typedListener != null) typedListener.EnterDoLblRef(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortran90ParserListener typedListener = listener as IFortran90ParserListener;
			if (typedListener != null) typedListener.ExitDoLblRef(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFortran90ParserVisitor<TResult> typedVisitor = visitor as IFortran90ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDoLblRef(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DoLblRefContext doLblRef() {
		DoLblRefContext _localctx = new DoLblRefContext(Context, State);
		EnterRule(_localctx, 382, RULE_doLblRef);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2209;
			Match(ICON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DoLblDefContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ICON() { return GetToken(Fortran90Parser.ICON, 0); }
		public DoLblDefContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_doLblDef; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortran90ParserListener typedListener = listener as IFortran90ParserListener;
			if (typedListener != null) typedListener.EnterDoLblDef(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortran90ParserListener typedListener = listener as IFortran90ParserListener;
			if (typedListener != null) typedListener.ExitDoLblDef(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFortran90ParserVisitor<TResult> typedVisitor = visitor as IFortran90ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDoLblDef(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DoLblDefContext doLblDef() {
		DoLblDefContext _localctx = new DoLblDefContext(Context, State);
		EnterRule(_localctx, 384, RULE_doLblDef);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2211;
			Match(ICON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DoLabelStmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ActionStmtContext actionStmt() {
			return GetRuleContext<ActionStmtContext>(0);
		}
		public DoLabelStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_doLabelStmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortran90ParserListener typedListener = listener as IFortran90ParserListener;
			if (typedListener != null) typedListener.EnterDoLabelStmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortran90ParserListener typedListener = listener as IFortran90ParserListener;
			if (typedListener != null) typedListener.ExitDoLabelStmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFortran90ParserVisitor<TResult> typedVisitor = visitor as IFortran90ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDoLabelStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DoLabelStmtContext doLabelStmt() {
		DoLabelStmtContext _localctx = new DoLabelStmtContext(Context, State);
		EnterRule(_localctx, 386, RULE_doLabelStmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2213;
			actionStmt();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExecutionPartConstructContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExecutableConstructContext executableConstruct() {
			return GetRuleContext<ExecutableConstructContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FormatStmtContext formatStmt() {
			return GetRuleContext<FormatStmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DataStmtContext dataStmt() {
			return GetRuleContext<DataStmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public EntryStmtContext entryStmt() {
			return GetRuleContext<EntryStmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DoubleDoStmtContext doubleDoStmt() {
			return GetRuleContext<DoubleDoStmtContext>(0);
		}
		public ExecutionPartConstructContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_executionPartConstruct; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortran90ParserListener typedListener = listener as IFortran90ParserListener;
			if (typedListener != null) typedListener.EnterExecutionPartConstruct(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortran90ParserListener typedListener = listener as IFortran90ParserListener;
			if (typedListener != null) typedListener.ExitExecutionPartConstruct(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFortran90ParserVisitor<TResult> typedVisitor = visitor as IFortran90ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExecutionPartConstruct(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExecutionPartConstructContext executionPartConstruct() {
		ExecutionPartConstructContext _localctx = new ExecutionPartConstructContext(Context, State);
		EnterRule(_localctx, 388, RULE_executionPartConstruct);
		try {
			State = 2220;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,168,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2215;
				executableConstruct();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2216;
				formatStmt();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 2217;
				dataStmt();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 2218;
				entryStmt();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 2219;
				doubleDoStmt();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DoubleDoStmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DO() { return GetToken(Fortran90Parser.DO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public LblRefContext lblRef() {
			return GetRuleContext<LblRefContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CommaLoopControlContext commaLoopControl() {
			return GetRuleContext<CommaLoopControlContext>(0);
		}
		public DoubleDoStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_doubleDoStmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortran90ParserListener typedListener = listener as IFortran90ParserListener;
			if (typedListener != null) typedListener.EnterDoubleDoStmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortran90ParserListener typedListener = listener as IFortran90ParserListener;
			if (typedListener != null) typedListener.ExitDoubleDoStmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFortran90ParserVisitor<TResult> typedVisitor = visitor as IFortran90ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDoubleDoStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DoubleDoStmtContext doubleDoStmt() {
		DoubleDoStmtContext _localctx = new DoubleDoStmtContext(Context, State);
		EnterRule(_localctx, 390, RULE_doubleDoStmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2222;
			Match(DO);
			State = 2223;
			lblRef();
			State = 2224;
			commaLoopControl();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DataStmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DATA() { return GetToken(Fortran90Parser.DATA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public DataStmtSetContext[] dataStmtSet() {
			return GetRuleContexts<DataStmtSetContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public DataStmtSetContext dataStmtSet(int i) {
			return GetRuleContext<DataStmtSetContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(Fortran90Parser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(Fortran90Parser.COMMA, i);
		}
		public DataStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dataStmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortran90ParserListener typedListener = listener as IFortran90ParserListener;
			if (typedListener != null) typedListener.EnterDataStmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortran90ParserListener typedListener = listener as IFortran90ParserListener;
			if (typedListener != null) typedListener.ExitDataStmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFortran90ParserVisitor<TResult> typedVisitor = visitor as IFortran90ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDataStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DataStmtContext dataStmt() {
		DataStmtContext _localctx = new DataStmtContext(Context, State);
		EnterRule(_localctx, 392, RULE_dataStmt);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 2226;
			Match(DATA);
			State = 2227;
			dataStmtSet();
			State = 2234;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,170,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 2229;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==COMMA) {
						{
						State = 2228;
						Match(COMMA);
						}
					}

					State = 2231;
					dataStmtSet();
					}
					} 
				}
				State = 2236;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,170,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DataStmtSetContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Dse1Context dse1() {
			return GetRuleContext<Dse1Context>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Dse2Context dse2() {
			return GetRuleContext<Dse2Context>(0);
		}
		public DataStmtSetContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dataStmtSet; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortran90ParserListener typedListener = listener as IFortran90ParserListener;
			if (typedListener != null) typedListener.EnterDataStmtSet(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortran90ParserListener typedListener = listener as IFortran90ParserListener;
			if (typedListener != null) typedListener.ExitDataStmtSet(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFortran90ParserVisitor<TResult> typedVisitor = visitor as IFortran90ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDataStmtSet(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DataStmtSetContext dataStmtSet() {
		DataStmtSetContext _localctx = new DataStmtSetContext(Context, State);
		EnterRule(_localctx, 394, RULE_dataStmtSet);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2237;
			dse1();
			State = 2238;
			dse2();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Dse1Context : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public DataStmtObjectContext[] dataStmtObject() {
			return GetRuleContexts<DataStmtObjectContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public DataStmtObjectContext dataStmtObject(int i) {
			return GetRuleContext<DataStmtObjectContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DIV() { return GetToken(Fortran90Parser.DIV, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(Fortran90Parser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(Fortran90Parser.COMMA, i);
		}
		public Dse1Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dse1; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortran90ParserListener typedListener = listener as IFortran90ParserListener;
			if (typedListener != null) typedListener.EnterDse1(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortran90ParserListener typedListener = listener as IFortran90ParserListener;
			if (typedListener != null) typedListener.ExitDse1(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFortran90ParserVisitor<TResult> typedVisitor = visitor as IFortran90ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDse1(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Dse1Context dse1() {
		Dse1Context _localctx = new Dse1Context(Context, State);
		EnterRule(_localctx, 396, RULE_dse1);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2240;
			dataStmtObject();
			State = 2245;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 2241;
				Match(COMMA);
				State = 2242;
				dataStmtObject();
				}
				}
				State = 2247;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 2248;
			Match(DIV);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Dse2Context : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public DataStmtValueContext[] dataStmtValue() {
			return GetRuleContexts<DataStmtValueContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public DataStmtValueContext dataStmtValue(int i) {
			return GetRuleContext<DataStmtValueContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DIV() { return GetToken(Fortran90Parser.DIV, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(Fortran90Parser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(Fortran90Parser.COMMA, i);
		}
		public Dse2Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dse2; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortran90ParserListener typedListener = listener as IFortran90ParserListener;
			if (typedListener != null) typedListener.EnterDse2(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortran90ParserListener typedListener = listener as IFortran90ParserListener;
			if (typedListener != null) typedListener.ExitDse2(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFortran90ParserVisitor<TResult> typedVisitor = visitor as IFortran90ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDse2(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Dse2Context dse2() {
		Dse2Context _localctx = new Dse2Context(Context, State);
		EnterRule(_localctx, 398, RULE_dse2);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2250;
			dataStmtValue();
			State = 2255;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 2251;
				Match(COMMA);
				State = 2252;
				dataStmtValue();
				}
				}
				State = 2257;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 2258;
			Match(DIV);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DataStmtValueContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ConstantContext[] constant() {
			return GetRuleContexts<ConstantContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ConstantContext constant(int i) {
			return GetRuleContext<ConstantContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STAR() { return GetToken(Fortran90Parser.STAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NamedConstantUseContext namedConstantUse() {
			return GetRuleContext<NamedConstantUseContext>(0);
		}
		public DataStmtValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dataStmtValue; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortran90ParserListener typedListener = listener as IFortran90ParserListener;
			if (typedListener != null) typedListener.EnterDataStmtValue(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortran90ParserListener typedListener = listener as IFortran90ParserListener;
			if (typedListener != null) typedListener.ExitDataStmtValue(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFortran90ParserVisitor<TResult> typedVisitor = visitor as IFortran90ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDataStmtValue(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DataStmtValueContext dataStmtValue() {
		DataStmtValueContext _localctx = new DataStmtValueContext(Context, State);
		EnterRule(_localctx, 400, RULE_dataStmtValue);
		try {
			State = 2269;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,173,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2260;
				constant();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2261;
				constant();
				State = 2262;
				Match(STAR);
				State = 2263;
				constant();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 2265;
				namedConstantUse();
				State = 2266;
				Match(STAR);
				State = 2267;
				constant();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DataStmtObjectContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public VariableContext variable() {
			return GetRuleContext<VariableContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DataImpliedDoContext dataImpliedDo() {
			return GetRuleContext<DataImpliedDoContext>(0);
		}
		public DataStmtObjectContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dataStmtObject; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortran90ParserListener typedListener = listener as IFortran90ParserListener;
			if (typedListener != null) typedListener.EnterDataStmtObject(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortran90ParserListener typedListener = listener as IFortran90ParserListener;
			if (typedListener != null) typedListener.ExitDataStmtObject(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFortran90ParserVisitor<TResult> typedVisitor = visitor as IFortran90ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDataStmtObject(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DataStmtObjectContext dataStmtObject() {
		DataStmtObjectContext _localctx = new DataStmtObjectContext(Context, State);
		EnterRule(_localctx, 402, RULE_dataStmtObject);
		try {
			State = 2273;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case NAME:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2271;
				variable();
				}
				break;
			case LPAREN:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2272;
				dataImpliedDo();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariableContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public VariableNameContext variableName() {
			return GetRuleContext<VariableNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SubscriptListRefContext subscriptListRef() {
			return GetRuleContext<SubscriptListRefContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SubstringRangeContext substringRange() {
			return GetRuleContext<SubstringRangeContext>(0);
		}
		public VariableContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variable; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortran90ParserListener typedListener = listener as IFortran90ParserListener;
			if (typedListener != null) typedListener.EnterVariable(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortran90ParserListener typedListener = listener as IFortran90ParserListener;
			if (typedListener != null) typedListener.ExitVariable(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFortran90ParserVisitor<TResult> typedVisitor = visitor as IFortran90ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariable(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VariableContext variable() {
		VariableContext _localctx = new VariableContext(Context, State);
		EnterRule(_localctx, 404, RULE_variable);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2275;
			variableName();
			State = 2277;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,175,Context) ) {
			case 1:
				{
				State = 2276;
				subscriptListRef();
				}
				break;
			}
			State = 2280;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,176,Context) ) {
			case 1:
				{
				State = 2279;
				substringRange();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SubscriptListRefContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(Fortran90Parser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SubscriptListContext subscriptList() {
			return GetRuleContext<SubscriptListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(Fortran90Parser.RPAREN, 0); }
		public SubscriptListRefContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_subscriptListRef; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortran90ParserListener typedListener = listener as IFortran90ParserListener;
			if (typedListener != null) typedListener.EnterSubscriptListRef(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortran90ParserListener typedListener = listener as IFortran90ParserListener;
			if (typedListener != null) typedListener.ExitSubscriptListRef(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFortran90ParserVisitor<TResult> typedVisitor = visitor as IFortran90ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSubscriptListRef(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SubscriptListRefContext subscriptListRef() {
		SubscriptListRefContext _localctx = new SubscriptListRefContext(Context, State);
		EnterRule(_localctx, 406, RULE_subscriptListRef);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2282;
			Match(LPAREN);
			State = 2283;
			subscriptList();
			State = 2284;
			Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SubscriptListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SubscriptContext[] subscript() {
			return GetRuleContexts<SubscriptContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SubscriptContext subscript(int i) {
			return GetRuleContext<SubscriptContext>(i);
		}
		public SubscriptListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_subscriptList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortran90ParserListener typedListener = listener as IFortran90ParserListener;
			if (typedListener != null) typedListener.EnterSubscriptList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortran90ParserListener typedListener = listener as IFortran90ParserListener;
			if (typedListener != null) typedListener.ExitSubscriptList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFortran90ParserVisitor<TResult> typedVisitor = visitor as IFortran90ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSubscriptList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SubscriptListContext subscriptList() {
		SubscriptListContext _localctx = new SubscriptListContext(Context, State);
		EnterRule(_localctx, 408, RULE_subscriptList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2287;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 2286;
				subscript();
				}
				}
				State = 2289;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==DOP || _la==REAL || ((((_la - 84)) & ~0x3f) == 0 && ((1L << (_la - 84)) & 4926361848250369L) != 0) || ((((_la - 149)) & ~0x3f) == 0 && ((1L << (_la - 149)) & 688004268035L) != 0) );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SubscriptContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public SubscriptContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_subscript; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortran90ParserListener typedListener = listener as IFortran90ParserListener;
			if (typedListener != null) typedListener.EnterSubscript(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortran90ParserListener typedListener = listener as IFortran90ParserListener;
			if (typedListener != null) typedListener.ExitSubscript(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFortran90ParserVisitor<TResult> typedVisitor = visitor as IFortran90ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSubscript(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SubscriptContext subscript() {
		SubscriptContext _localctx = new SubscriptContext(Context, State);
		EnterRule(_localctx, 410, RULE_subscript);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2291;
			expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SubstringRangeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(Fortran90Parser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SubscriptTripletTailContext subscriptTripletTail() {
			return GetRuleContext<SubscriptTripletTailContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(Fortran90Parser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public SubstringRangeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_substringRange; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortran90ParserListener typedListener = listener as IFortran90ParserListener;
			if (typedListener != null) typedListener.EnterSubstringRange(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortran90ParserListener typedListener = listener as IFortran90ParserListener;
			if (typedListener != null) typedListener.ExitSubstringRange(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFortran90ParserVisitor<TResult> typedVisitor = visitor as IFortran90ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSubstringRange(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SubstringRangeContext substringRange() {
		SubstringRangeContext _localctx = new SubstringRangeContext(Context, State);
		EnterRule(_localctx, 412, RULE_substringRange);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2293;
			Match(LPAREN);
			State = 2295;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==DOP || _la==REAL || ((((_la - 84)) & ~0x3f) == 0 && ((1L << (_la - 84)) & 4926361848250369L) != 0) || ((((_la - 149)) & ~0x3f) == 0 && ((1L << (_la - 149)) & 688004268035L) != 0)) {
				{
				State = 2294;
				expression(0);
				}
			}

			State = 2297;
			subscriptTripletTail();
			State = 2298;
			Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DataImpliedDoContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(Fortran90Parser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public DataIDoObjectListContext dataIDoObjectList() {
			return GetRuleContext<DataIDoObjectListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(Fortran90Parser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(Fortran90Parser.COMMA, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ImpliedDoVariableContext impliedDoVariable() {
			return GetRuleContext<ImpliedDoVariableContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGN() { return GetToken(Fortran90Parser.ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(Fortran90Parser.RPAREN, 0); }
		public DataImpliedDoContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dataImpliedDo; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortran90ParserListener typedListener = listener as IFortran90ParserListener;
			if (typedListener != null) typedListener.EnterDataImpliedDo(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortran90ParserListener typedListener = listener as IFortran90ParserListener;
			if (typedListener != null) typedListener.ExitDataImpliedDo(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFortran90ParserVisitor<TResult> typedVisitor = visitor as IFortran90ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDataImpliedDo(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DataImpliedDoContext dataImpliedDo() {
		DataImpliedDoContext _localctx = new DataImpliedDoContext(Context, State);
		EnterRule(_localctx, 414, RULE_dataImpliedDo);
		try {
			State = 2322;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,179,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2300;
				Match(LPAREN);
				State = 2301;
				dataIDoObjectList();
				State = 2302;
				Match(COMMA);
				State = 2303;
				impliedDoVariable();
				State = 2304;
				Match(ASSIGN);
				State = 2305;
				expression(0);
				State = 2306;
				Match(COMMA);
				State = 2307;
				expression(0);
				State = 2308;
				Match(RPAREN);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2310;
				Match(LPAREN);
				State = 2311;
				dataIDoObjectList();
				State = 2312;
				Match(COMMA);
				State = 2313;
				impliedDoVariable();
				State = 2314;
				Match(ASSIGN);
				State = 2315;
				expression(0);
				State = 2316;
				Match(COMMA);
				State = 2317;
				expression(0);
				State = 2318;
				Match(COMMA);
				State = 2319;
				expression(0);
				State = 2320;
				Match(RPAREN);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DataIDoObjectListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public DataIDoObjectContext[] dataIDoObject() {
			return GetRuleContexts<DataIDoObjectContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public DataIDoObjectContext dataIDoObject(int i) {
			return GetRuleContext<DataIDoObjectContext>(i);
		}
		public DataIDoObjectListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dataIDoObjectList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortran90ParserListener typedListener = listener as IFortran90ParserListener;
			if (typedListener != null) typedListener.EnterDataIDoObjectList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortran90ParserListener typedListener = listener as IFortran90ParserListener;
			if (typedListener != null) typedListener.ExitDataIDoObjectList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFortran90ParserVisitor<TResult> typedVisitor = visitor as IFortran90ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDataIDoObjectList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DataIDoObjectListContext dataIDoObjectList() {
		DataIDoObjectListContext _localctx = new DataIDoObjectListContext(Context, State);
		EnterRule(_localctx, 416, RULE_dataIDoObjectList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2325;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 2324;
				dataIDoObject();
				}
				}
				State = 2327;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==LPAREN || _la==NAME );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DataIDoObjectContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ArrayElementContext arrayElement() {
			return GetRuleContext<ArrayElementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DataImpliedDoContext dataImpliedDo() {
			return GetRuleContext<DataImpliedDoContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StructureComponentContext structureComponent() {
			return GetRuleContext<StructureComponentContext>(0);
		}
		public DataIDoObjectContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dataIDoObject; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortran90ParserListener typedListener = listener as IFortran90ParserListener;
			if (typedListener != null) typedListener.EnterDataIDoObject(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortran90ParserListener typedListener = listener as IFortran90ParserListener;
			if (typedListener != null) typedListener.ExitDataIDoObject(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFortran90ParserVisitor<TResult> typedVisitor = visitor as IFortran90ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDataIDoObject(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DataIDoObjectContext dataIDoObject() {
		DataIDoObjectContext _localctx = new DataIDoObjectContext(Context, State);
		EnterRule(_localctx, 418, RULE_dataIDoObject);
		try {
			State = 2332;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,181,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2329;
				arrayElement();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2330;
				dataImpliedDo();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 2331;
				structureComponent(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StructureComponentContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public VariableNameContext variableName() {
			return GetRuleContext<VariableNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FieldSelectorContext fieldSelector() {
			return GetRuleContext<FieldSelectorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StructureComponentContext structureComponent() {
			return GetRuleContext<StructureComponentContext>(0);
		}
		public StructureComponentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_structureComponent; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortran90ParserListener typedListener = listener as IFortran90ParserListener;
			if (typedListener != null) typedListener.EnterStructureComponent(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortran90ParserListener typedListener = listener as IFortran90ParserListener;
			if (typedListener != null) typedListener.ExitStructureComponent(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFortran90ParserVisitor<TResult> typedVisitor = visitor as IFortran90ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStructureComponent(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StructureComponentContext structureComponent() {
		return structureComponent(0);
	}

	private StructureComponentContext structureComponent(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		StructureComponentContext _localctx = new StructureComponentContext(Context, _parentState);
		StructureComponentContext _prevctx = _localctx;
		int _startState = 420;
		EnterRecursionRule(_localctx, 420, RULE_structureComponent, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 2335;
			variableName();
			State = 2336;
			fieldSelector();
			}
			Context.Stop = TokenStream.LT(-1);
			State = 2342;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,182,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new StructureComponentContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_structureComponent);
					State = 2338;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 2339;
					fieldSelector();
					}
					} 
				}
				State = 2344;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,182,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class FieldSelectorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(Fortran90Parser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SectionSubscriptListContext sectionSubscriptList() {
			return GetRuleContext<SectionSubscriptListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(Fortran90Parser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PCT() { return GetToken(Fortran90Parser.PCT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NAME() { return GetToken(Fortran90Parser.NAME, 0); }
		public FieldSelectorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fieldSelector; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortran90ParserListener typedListener = listener as IFortran90ParserListener;
			if (typedListener != null) typedListener.EnterFieldSelector(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortran90ParserListener typedListener = listener as IFortran90ParserListener;
			if (typedListener != null) typedListener.ExitFieldSelector(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFortran90ParserVisitor<TResult> typedVisitor = visitor as IFortran90ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFieldSelector(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FieldSelectorContext fieldSelector() {
		FieldSelectorContext _localctx = new FieldSelectorContext(Context, State);
		EnterRule(_localctx, 422, RULE_fieldSelector);
		try {
			State = 2353;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case LPAREN:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2345;
				Match(LPAREN);
				State = 2346;
				sectionSubscriptList();
				State = 2347;
				Match(RPAREN);
				State = 2348;
				Match(PCT);
				State = 2349;
				Match(NAME);
				}
				break;
			case PCT:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2351;
				Match(PCT);
				State = 2352;
				Match(NAME);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArrayElementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public VariableNameContext variableName() {
			return GetRuleContext<VariableNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(Fortran90Parser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SectionSubscriptListContext sectionSubscriptList() {
			return GetRuleContext<SectionSubscriptListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(Fortran90Parser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StructureComponentContext structureComponent() {
			return GetRuleContext<StructureComponentContext>(0);
		}
		public ArrayElementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arrayElement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortran90ParserListener typedListener = listener as IFortran90ParserListener;
			if (typedListener != null) typedListener.EnterArrayElement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortran90ParserListener typedListener = listener as IFortran90ParserListener;
			if (typedListener != null) typedListener.ExitArrayElement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFortran90ParserVisitor<TResult> typedVisitor = visitor as IFortran90ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArrayElement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArrayElementContext arrayElement() {
		ArrayElementContext _localctx = new ArrayElementContext(Context, State);
		EnterRule(_localctx, 424, RULE_arrayElement);
		try {
			State = 2365;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,184,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2355;
				variableName();
				State = 2356;
				Match(LPAREN);
				State = 2357;
				sectionSubscriptList();
				State = 2358;
				Match(RPAREN);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2360;
				structureComponent(0);
				State = 2361;
				Match(LPAREN);
				State = 2362;
				sectionSubscriptList();
				State = 2363;
				Match(RPAREN);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ImpliedDoVariableContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NAME() { return GetToken(Fortran90Parser.NAME, 0); }
		public ImpliedDoVariableContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_impliedDoVariable; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortran90ParserListener typedListener = listener as IFortran90ParserListener;
			if (typedListener != null) typedListener.EnterImpliedDoVariable(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortran90ParserListener typedListener = listener as IFortran90ParserListener;
			if (typedListener != null) typedListener.ExitImpliedDoVariable(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFortran90ParserVisitor<TResult> typedVisitor = visitor as IFortran90ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitImpliedDoVariable(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ImpliedDoVariableContext impliedDoVariable() {
		ImpliedDoVariableContext _localctx = new ImpliedDoVariableContext(Context, State);
		EnterRule(_localctx, 426, RULE_impliedDoVariable);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2367;
			Match(NAME);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CommaLoopControlContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public LoopControlContext loopControl() {
			return GetRuleContext<LoopControlContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA() { return GetToken(Fortran90Parser.COMMA, 0); }
		public CommaLoopControlContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_commaLoopControl; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortran90ParserListener typedListener = listener as IFortran90ParserListener;
			if (typedListener != null) typedListener.EnterCommaLoopControl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortran90ParserListener typedListener = listener as IFortran90ParserListener;
			if (typedListener != null) typedListener.ExitCommaLoopControl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFortran90ParserVisitor<TResult> typedVisitor = visitor as IFortran90ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCommaLoopControl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CommaLoopControlContext commaLoopControl() {
		CommaLoopControlContext _localctx = new CommaLoopControlContext(Context, State);
		EnterRule(_localctx, 428, RULE_commaLoopControl);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2370;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==COMMA) {
				{
				State = 2369;
				Match(COMMA);
				}
			}

			State = 2372;
			loopControl();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LoopControlContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public VariableNameContext variableName() {
			return GetRuleContext<VariableNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGN() { return GetToken(Fortran90Parser.ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA() { return GetToken(Fortran90Parser.COMMA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public CommaExprContext commaExpr() {
			return GetRuleContext<CommaExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WHILE() { return GetToken(Fortran90Parser.WHILE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(Fortran90Parser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(Fortran90Parser.RPAREN, 0); }
		public LoopControlContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_loopControl; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortran90ParserListener typedListener = listener as IFortran90ParserListener;
			if (typedListener != null) typedListener.EnterLoopControl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortran90ParserListener typedListener = listener as IFortran90ParserListener;
			if (typedListener != null) typedListener.ExitLoopControl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFortran90ParserVisitor<TResult> typedVisitor = visitor as IFortran90ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLoopControl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LoopControlContext loopControl() {
		LoopControlContext _localctx = new LoopControlContext(Context, State);
		EnterRule(_localctx, 430, RULE_loopControl);
		try {
			State = 2387;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case NAME:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2374;
				variableName();
				State = 2375;
				Match(ASSIGN);
				State = 2376;
				expression(0);
				State = 2377;
				Match(COMMA);
				State = 2378;
				expression(0);
				State = 2380;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,186,Context) ) {
				case 1:
					{
					State = 2379;
					commaExpr();
					}
					break;
				}
				}
				break;
			case WHILE:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2382;
				Match(WHILE);
				State = 2383;
				Match(LPAREN);
				State = 2384;
				expression(0);
				State = 2385;
				Match(RPAREN);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariableNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NAME() { return GetToken(Fortran90Parser.NAME, 0); }
		public VariableNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variableName; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortran90ParserListener typedListener = listener as IFortran90ParserListener;
			if (typedListener != null) typedListener.EnterVariableName(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortran90ParserListener typedListener = listener as IFortran90ParserListener;
			if (typedListener != null) typedListener.ExitVariableName(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFortran90ParserVisitor<TResult> typedVisitor = visitor as IFortran90ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariableName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VariableNameContext variableName() {
		VariableNameContext _localctx = new VariableNameContext(Context, State);
		EnterRule(_localctx, 432, RULE_variableName);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2389;
			Match(NAME);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CommaExprContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA() { return GetToken(Fortran90Parser.COMMA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public CommaExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_commaExpr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortran90ParserListener typedListener = listener as IFortran90ParserListener;
			if (typedListener != null) typedListener.EnterCommaExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortran90ParserListener typedListener = listener as IFortran90ParserListener;
			if (typedListener != null) typedListener.ExitCommaExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFortran90ParserVisitor<TResult> typedVisitor = visitor as IFortran90ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCommaExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CommaExprContext commaExpr() {
		CommaExprContext _localctx = new CommaExprContext(Context, State);
		EnterRule(_localctx, 434, RULE_commaExpr);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2391;
			Match(COMMA);
			State = 2392;
			expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ActionStmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ArithmeticIfStmtContext arithmeticIfStmt() {
			return GetRuleContext<ArithmeticIfStmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AssignmentStmtContext assignmentStmt() {
			return GetRuleContext<AssignmentStmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AssignStmtContext assignStmt() {
			return GetRuleContext<AssignStmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BackspaceStmtContext backspaceStmt() {
			return GetRuleContext<BackspaceStmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CallStmtContext callStmt() {
			return GetRuleContext<CallStmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CloseStmtContext closeStmt() {
			return GetRuleContext<CloseStmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ContinueStmtContext continueStmt() {
			return GetRuleContext<ContinueStmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public EndfileStmtContext endfileStmt() {
			return GetRuleContext<EndfileStmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public GotoStmtContext gotoStmt() {
			return GetRuleContext<GotoStmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ComputedGotoStmtContext computedGotoStmt() {
			return GetRuleContext<ComputedGotoStmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AssignedGotoStmtContext assignedGotoStmt() {
			return GetRuleContext<AssignedGotoStmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IfStmtContext ifStmt() {
			return GetRuleContext<IfStmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public InquireStmtContext inquireStmt() {
			return GetRuleContext<InquireStmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public OpenStmtContext openStmt() {
			return GetRuleContext<OpenStmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PauseStmtContext pauseStmt() {
			return GetRuleContext<PauseStmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PrintStmtContext printStmt() {
			return GetRuleContext<PrintStmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ReadStmtContext readStmt() {
			return GetRuleContext<ReadStmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ReturnStmtContext returnStmt() {
			return GetRuleContext<ReturnStmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RewindStmtContext rewindStmt() {
			return GetRuleContext<RewindStmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StmtFunctionStmtContext stmtFunctionStmt() {
			return GetRuleContext<StmtFunctionStmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StopStmtContext stopStmt() {
			return GetRuleContext<StopStmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public WriteStmtContext writeStmt() {
			return GetRuleContext<WriteStmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AllocateStmtContext allocateStmt() {
			return GetRuleContext<AllocateStmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CycleStmtContext cycleStmt() {
			return GetRuleContext<CycleStmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DeallocateStmtContext deallocateStmt() {
			return GetRuleContext<DeallocateStmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExitStmtContext exitStmt() {
			return GetRuleContext<ExitStmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NullifyStmtContext nullifyStmt() {
			return GetRuleContext<NullifyStmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PointerAssignmentStmtContext pointerAssignmentStmt() {
			return GetRuleContext<PointerAssignmentStmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public WhereStmtContext whereStmt() {
			return GetRuleContext<WhereStmtContext>(0);
		}
		public ActionStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_actionStmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortran90ParserListener typedListener = listener as IFortran90ParserListener;
			if (typedListener != null) typedListener.EnterActionStmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortran90ParserListener typedListener = listener as IFortran90ParserListener;
			if (typedListener != null) typedListener.ExitActionStmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFortran90ParserVisitor<TResult> typedVisitor = visitor as IFortran90ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitActionStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ActionStmtContext actionStmt() {
		ActionStmtContext _localctx = new ActionStmtContext(Context, State);
		EnterRule(_localctx, 436, RULE_actionStmt);
		try {
			State = 2423;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,188,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2394;
				arithmeticIfStmt();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2395;
				assignmentStmt();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 2396;
				assignStmt();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 2397;
				backspaceStmt();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 2398;
				callStmt();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 2399;
				closeStmt();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 2400;
				continueStmt();
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 2401;
				endfileStmt();
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 2402;
				gotoStmt();
				}
				break;
			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 2403;
				computedGotoStmt();
				}
				break;
			case 11:
				EnterOuterAlt(_localctx, 11);
				{
				State = 2404;
				assignedGotoStmt();
				}
				break;
			case 12:
				EnterOuterAlt(_localctx, 12);
				{
				State = 2405;
				ifStmt();
				}
				break;
			case 13:
				EnterOuterAlt(_localctx, 13);
				{
				State = 2406;
				inquireStmt();
				}
				break;
			case 14:
				EnterOuterAlt(_localctx, 14);
				{
				State = 2407;
				openStmt();
				}
				break;
			case 15:
				EnterOuterAlt(_localctx, 15);
				{
				State = 2408;
				pauseStmt();
				}
				break;
			case 16:
				EnterOuterAlt(_localctx, 16);
				{
				State = 2409;
				printStmt();
				}
				break;
			case 17:
				EnterOuterAlt(_localctx, 17);
				{
				State = 2410;
				readStmt();
				}
				break;
			case 18:
				EnterOuterAlt(_localctx, 18);
				{
				State = 2411;
				returnStmt();
				}
				break;
			case 19:
				EnterOuterAlt(_localctx, 19);
				{
				State = 2412;
				rewindStmt();
				}
				break;
			case 20:
				EnterOuterAlt(_localctx, 20);
				{
				State = 2413;
				stmtFunctionStmt();
				}
				break;
			case 21:
				EnterOuterAlt(_localctx, 21);
				{
				State = 2414;
				stopStmt();
				}
				break;
			case 22:
				EnterOuterAlt(_localctx, 22);
				{
				State = 2415;
				writeStmt();
				}
				break;
			case 23:
				EnterOuterAlt(_localctx, 23);
				{
				State = 2416;
				allocateStmt();
				}
				break;
			case 24:
				EnterOuterAlt(_localctx, 24);
				{
				State = 2417;
				cycleStmt();
				}
				break;
			case 25:
				EnterOuterAlt(_localctx, 25);
				{
				State = 2418;
				deallocateStmt();
				}
				break;
			case 26:
				EnterOuterAlt(_localctx, 26);
				{
				State = 2419;
				exitStmt();
				}
				break;
			case 27:
				EnterOuterAlt(_localctx, 27);
				{
				State = 2420;
				nullifyStmt();
				}
				break;
			case 28:
				EnterOuterAlt(_localctx, 28);
				{
				State = 2421;
				pointerAssignmentStmt();
				}
				break;
			case 29:
				EnterOuterAlt(_localctx, 29);
				{
				State = 2422;
				whereStmt();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WhereStmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WHERE() { return GetToken(Fortran90Parser.WHERE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(Fortran90Parser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public MaskExprContext maskExpr() {
			return GetRuleContext<MaskExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(Fortran90Parser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public AssignmentStmtContext assignmentStmt() {
			return GetRuleContext<AssignmentStmtContext>(0);
		}
		public WhereStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_whereStmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortran90ParserListener typedListener = listener as IFortran90ParserListener;
			if (typedListener != null) typedListener.EnterWhereStmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortran90ParserListener typedListener = listener as IFortran90ParserListener;
			if (typedListener != null) typedListener.ExitWhereStmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFortran90ParserVisitor<TResult> typedVisitor = visitor as IFortran90ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWhereStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public WhereStmtContext whereStmt() {
		WhereStmtContext _localctx = new WhereStmtContext(Context, State);
		EnterRule(_localctx, 438, RULE_whereStmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2425;
			Match(WHERE);
			State = 2426;
			Match(LPAREN);
			State = 2427;
			maskExpr();
			State = 2428;
			Match(RPAREN);
			State = 2429;
			assignmentStmt();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PointerAssignmentStmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NAME() { return GetToken(Fortran90Parser.NAME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IMPLIEDT() { return GetToken(Fortran90Parser.IMPLIEDT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TargetContext target() {
			return GetRuleContext<TargetContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PCT() { return GetToken(Fortran90Parser.PCT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NameDataRefContext nameDataRef() {
			return GetRuleContext<NameDataRefContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SFExprListRefContext sFExprListRef() {
			return GetRuleContext<SFExprListRefContext>(0);
		}
		public PointerAssignmentStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pointerAssignmentStmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortran90ParserListener typedListener = listener as IFortran90ParserListener;
			if (typedListener != null) typedListener.EnterPointerAssignmentStmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortran90ParserListener typedListener = listener as IFortran90ParserListener;
			if (typedListener != null) typedListener.ExitPointerAssignmentStmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFortran90ParserVisitor<TResult> typedVisitor = visitor as IFortran90ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPointerAssignmentStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PointerAssignmentStmtContext pointerAssignmentStmt() {
		PointerAssignmentStmtContext _localctx = new PointerAssignmentStmtContext(Context, State);
		EnterRule(_localctx, 440, RULE_pointerAssignmentStmt);
		int _la;
		try {
			State = 2443;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,190,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2431;
				Match(NAME);
				State = 2432;
				Match(IMPLIEDT);
				State = 2433;
				target();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2434;
				Match(NAME);
				State = 2436;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==LPAREN) {
					{
					State = 2435;
					sFExprListRef();
					}
				}

				State = 2438;
				Match(PCT);
				State = 2439;
				nameDataRef();
				State = 2440;
				Match(IMPLIEDT);
				State = 2441;
				target();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TargetContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public TargetContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_target; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortran90ParserListener typedListener = listener as IFortran90ParserListener;
			if (typedListener != null) typedListener.EnterTarget(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortran90ParserListener typedListener = listener as IFortran90ParserListener;
			if (typedListener != null) typedListener.ExitTarget(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFortran90ParserVisitor<TResult> typedVisitor = visitor as IFortran90ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTarget(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TargetContext target() {
		TargetContext _localctx = new TargetContext(Context, State);
		EnterRule(_localctx, 442, RULE_target);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2445;
			expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NullifyStmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NULLIFY() { return GetToken(Fortran90Parser.NULLIFY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(Fortran90Parser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public PointerObjectListContext pointerObjectList() {
			return GetRuleContext<PointerObjectListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(Fortran90Parser.RPAREN, 0); }
		public NullifyStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_nullifyStmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortran90ParserListener typedListener = listener as IFortran90ParserListener;
			if (typedListener != null) typedListener.EnterNullifyStmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortran90ParserListener typedListener = listener as IFortran90ParserListener;
			if (typedListener != null) typedListener.ExitNullifyStmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFortran90ParserVisitor<TResult> typedVisitor = visitor as IFortran90ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNullifyStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NullifyStmtContext nullifyStmt() {
		NullifyStmtContext _localctx = new NullifyStmtContext(Context, State);
		EnterRule(_localctx, 444, RULE_nullifyStmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2447;
			Match(NULLIFY);
			State = 2448;
			Match(LPAREN);
			State = 2449;
			pointerObjectList();
			State = 2450;
			Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PointerObjectListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public PointerObjectContext[] pointerObject() {
			return GetRuleContexts<PointerObjectContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public PointerObjectContext pointerObject(int i) {
			return GetRuleContext<PointerObjectContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(Fortran90Parser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(Fortran90Parser.COMMA, i);
		}
		public PointerObjectListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pointerObjectList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortran90ParserListener typedListener = listener as IFortran90ParserListener;
			if (typedListener != null) typedListener.EnterPointerObjectList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortran90ParserListener typedListener = listener as IFortran90ParserListener;
			if (typedListener != null) typedListener.ExitPointerObjectList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFortran90ParserVisitor<TResult> typedVisitor = visitor as IFortran90ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPointerObjectList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PointerObjectListContext pointerObjectList() {
		PointerObjectListContext _localctx = new PointerObjectListContext(Context, State);
		EnterRule(_localctx, 446, RULE_pointerObjectList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2452;
			pointerObject();
			State = 2457;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 2453;
				Match(COMMA);
				State = 2454;
				pointerObject();
				}
				}
				State = 2459;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PointerObjectContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NAME() { return GetToken(Fortran90Parser.NAME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public PointerFieldContext pointerField() {
			return GetRuleContext<PointerFieldContext>(0);
		}
		public PointerObjectContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pointerObject; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortran90ParserListener typedListener = listener as IFortran90ParserListener;
			if (typedListener != null) typedListener.EnterPointerObject(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortran90ParserListener typedListener = listener as IFortran90ParserListener;
			if (typedListener != null) typedListener.ExitPointerObject(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFortran90ParserVisitor<TResult> typedVisitor = visitor as IFortran90ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPointerObject(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PointerObjectContext pointerObject() {
		PointerObjectContext _localctx = new PointerObjectContext(Context, State);
		EnterRule(_localctx, 448, RULE_pointerObject);
		try {
			State = 2462;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,192,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2460;
				Match(NAME);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2461;
				pointerField(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PointerFieldContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NAME() { return GetTokens(Fortran90Parser.NAME); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NAME(int i) {
			return GetToken(Fortran90Parser.NAME, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PCT() { return GetToken(Fortran90Parser.PCT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SFExprListRefContext sFExprListRef() {
			return GetRuleContext<SFExprListRefContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PointerFieldContext pointerField() {
			return GetRuleContext<PointerFieldContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FieldSelectorContext fieldSelector() {
			return GetRuleContext<FieldSelectorContext>(0);
		}
		public PointerFieldContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pointerField; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortran90ParserListener typedListener = listener as IFortran90ParserListener;
			if (typedListener != null) typedListener.EnterPointerField(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortran90ParserListener typedListener = listener as IFortran90ParserListener;
			if (typedListener != null) typedListener.ExitPointerField(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFortran90ParserVisitor<TResult> typedVisitor = visitor as IFortran90ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPointerField(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PointerFieldContext pointerField() {
		return pointerField(0);
	}

	private PointerFieldContext pointerField(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		PointerFieldContext _localctx = new PointerFieldContext(Context, _parentState);
		PointerFieldContext _prevctx = _localctx;
		int _startState = 450;
		EnterRecursionRule(_localctx, 450, RULE_pointerField, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 2465;
			Match(NAME);
			State = 2467;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LPAREN) {
				{
				State = 2466;
				sFExprListRef();
				}
			}

			State = 2469;
			Match(PCT);
			State = 2470;
			Match(NAME);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 2476;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,194,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new PointerFieldContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_pointerField);
					State = 2472;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 2473;
					fieldSelector();
					}
					} 
				}
				State = 2478;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,194,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class ExitStmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXIT() { return GetToken(Fortran90Parser.EXIT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public EndNameContext endName() {
			return GetRuleContext<EndNameContext>(0);
		}
		public ExitStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_exitStmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortran90ParserListener typedListener = listener as IFortran90ParserListener;
			if (typedListener != null) typedListener.EnterExitStmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortran90ParserListener typedListener = listener as IFortran90ParserListener;
			if (typedListener != null) typedListener.ExitExitStmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFortran90ParserVisitor<TResult> typedVisitor = visitor as IFortran90ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExitStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExitStmtContext exitStmt() {
		ExitStmtContext _localctx = new ExitStmtContext(Context, State);
		EnterRule(_localctx, 452, RULE_exitStmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2479;
			Match(EXIT);
			State = 2481;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,195,Context) ) {
			case 1:
				{
				State = 2480;
				endName();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeallocateStmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEALLOCATE() { return GetToken(Fortran90Parser.DEALLOCATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(Fortran90Parser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public AllocateObjectListContext allocateObjectList() {
			return GetRuleContext<AllocateObjectListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA() { return GetToken(Fortran90Parser.COMMA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STAT() { return GetToken(Fortran90Parser.STAT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGN() { return GetToken(Fortran90Parser.ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public VariableContext variable() {
			return GetRuleContext<VariableContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(Fortran90Parser.RPAREN, 0); }
		public DeallocateStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_deallocateStmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortran90ParserListener typedListener = listener as IFortran90ParserListener;
			if (typedListener != null) typedListener.EnterDeallocateStmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortran90ParserListener typedListener = listener as IFortran90ParserListener;
			if (typedListener != null) typedListener.ExitDeallocateStmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFortran90ParserVisitor<TResult> typedVisitor = visitor as IFortran90ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeallocateStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DeallocateStmtContext deallocateStmt() {
		DeallocateStmtContext _localctx = new DeallocateStmtContext(Context, State);
		EnterRule(_localctx, 454, RULE_deallocateStmt);
		try {
			State = 2497;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,196,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2483;
				Match(DEALLOCATE);
				State = 2484;
				Match(LPAREN);
				State = 2485;
				allocateObjectList();
				State = 2486;
				Match(COMMA);
				State = 2487;
				Match(STAT);
				State = 2488;
				Match(ASSIGN);
				State = 2489;
				variable();
				State = 2490;
				Match(RPAREN);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2492;
				Match(DEALLOCATE);
				State = 2493;
				Match(LPAREN);
				State = 2494;
				allocateObjectList();
				State = 2495;
				Match(RPAREN);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AllocateObjectListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public AllocateObjectContext[] allocateObject() {
			return GetRuleContexts<AllocateObjectContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AllocateObjectContext allocateObject(int i) {
			return GetRuleContext<AllocateObjectContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(Fortran90Parser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(Fortran90Parser.COMMA, i);
		}
		public AllocateObjectListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_allocateObjectList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortran90ParserListener typedListener = listener as IFortran90ParserListener;
			if (typedListener != null) typedListener.EnterAllocateObjectList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortran90ParserListener typedListener = listener as IFortran90ParserListener;
			if (typedListener != null) typedListener.ExitAllocateObjectList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFortran90ParserVisitor<TResult> typedVisitor = visitor as IFortran90ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAllocateObjectList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AllocateObjectListContext allocateObjectList() {
		AllocateObjectListContext _localctx = new AllocateObjectListContext(Context, State);
		EnterRule(_localctx, 456, RULE_allocateObjectList);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 2499;
			allocateObject(0);
			State = 2504;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,197,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 2500;
					Match(COMMA);
					State = 2501;
					allocateObject(0);
					}
					} 
				}
				State = 2506;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,197,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CycleStmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CYCLE() { return GetToken(Fortran90Parser.CYCLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public EndNameContext endName() {
			return GetRuleContext<EndNameContext>(0);
		}
		public CycleStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_cycleStmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortran90ParserListener typedListener = listener as IFortran90ParserListener;
			if (typedListener != null) typedListener.EnterCycleStmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortran90ParserListener typedListener = listener as IFortran90ParserListener;
			if (typedListener != null) typedListener.ExitCycleStmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFortran90ParserVisitor<TResult> typedVisitor = visitor as IFortran90ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCycleStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CycleStmtContext cycleStmt() {
		CycleStmtContext _localctx = new CycleStmtContext(Context, State);
		EnterRule(_localctx, 458, RULE_cycleStmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2507;
			Match(CYCLE);
			State = 2509;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,198,Context) ) {
			case 1:
				{
				State = 2508;
				endName();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AllocateStmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALLOCATE() { return GetToken(Fortran90Parser.ALLOCATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(Fortran90Parser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public AllocationListContext allocationList() {
			return GetRuleContext<AllocationListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA() { return GetToken(Fortran90Parser.COMMA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STAT() { return GetToken(Fortran90Parser.STAT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGN() { return GetToken(Fortran90Parser.ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public VariableContext variable() {
			return GetRuleContext<VariableContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(Fortran90Parser.RPAREN, 0); }
		public AllocateStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_allocateStmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortran90ParserListener typedListener = listener as IFortran90ParserListener;
			if (typedListener != null) typedListener.EnterAllocateStmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortran90ParserListener typedListener = listener as IFortran90ParserListener;
			if (typedListener != null) typedListener.ExitAllocateStmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFortran90ParserVisitor<TResult> typedVisitor = visitor as IFortran90ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAllocateStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AllocateStmtContext allocateStmt() {
		AllocateStmtContext _localctx = new AllocateStmtContext(Context, State);
		EnterRule(_localctx, 460, RULE_allocateStmt);
		try {
			State = 2525;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,199,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2511;
				Match(ALLOCATE);
				State = 2512;
				Match(LPAREN);
				State = 2513;
				allocationList();
				State = 2514;
				Match(COMMA);
				State = 2515;
				Match(STAT);
				State = 2516;
				Match(ASSIGN);
				State = 2517;
				variable();
				State = 2518;
				Match(RPAREN);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2520;
				Match(ALLOCATE);
				State = 2521;
				Match(LPAREN);
				State = 2522;
				allocationList();
				State = 2523;
				Match(RPAREN);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AllocationListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public AllocationContext[] allocation() {
			return GetRuleContexts<AllocationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AllocationContext allocation(int i) {
			return GetRuleContext<AllocationContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(Fortran90Parser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(Fortran90Parser.COMMA, i);
		}
		public AllocationListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_allocationList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortran90ParserListener typedListener = listener as IFortran90ParserListener;
			if (typedListener != null) typedListener.EnterAllocationList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortran90ParserListener typedListener = listener as IFortran90ParserListener;
			if (typedListener != null) typedListener.ExitAllocationList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFortran90ParserVisitor<TResult> typedVisitor = visitor as IFortran90ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAllocationList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AllocationListContext allocationList() {
		AllocationListContext _localctx = new AllocationListContext(Context, State);
		EnterRule(_localctx, 462, RULE_allocationList);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 2527;
			allocation();
			State = 2532;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,200,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 2528;
					Match(COMMA);
					State = 2529;
					allocation();
					}
					} 
				}
				State = 2534;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,200,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AllocationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public AllocateObjectContext allocateObject() {
			return GetRuleContext<AllocateObjectContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AllocatedShapeContext allocatedShape() {
			return GetRuleContext<AllocatedShapeContext>(0);
		}
		public AllocationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_allocation; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortran90ParserListener typedListener = listener as IFortran90ParserListener;
			if (typedListener != null) typedListener.EnterAllocation(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortran90ParserListener typedListener = listener as IFortran90ParserListener;
			if (typedListener != null) typedListener.ExitAllocation(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFortran90ParserVisitor<TResult> typedVisitor = visitor as IFortran90ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAllocation(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AllocationContext allocation() {
		AllocationContext _localctx = new AllocationContext(Context, State);
		EnterRule(_localctx, 464, RULE_allocation);
		try {
			State = 2539;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,201,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2535;
				allocateObject(0);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2536;
				allocateObject(0);
				State = 2537;
				allocatedShape();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AllocateObjectContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public VariableNameContext variableName() {
			return GetRuleContext<VariableNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AllocateObjectContext allocateObject() {
			return GetRuleContext<AllocateObjectContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FieldSelectorContext fieldSelector() {
			return GetRuleContext<FieldSelectorContext>(0);
		}
		public AllocateObjectContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_allocateObject; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortran90ParserListener typedListener = listener as IFortran90ParserListener;
			if (typedListener != null) typedListener.EnterAllocateObject(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortran90ParserListener typedListener = listener as IFortran90ParserListener;
			if (typedListener != null) typedListener.ExitAllocateObject(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFortran90ParserVisitor<TResult> typedVisitor = visitor as IFortran90ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAllocateObject(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AllocateObjectContext allocateObject() {
		return allocateObject(0);
	}

	private AllocateObjectContext allocateObject(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		AllocateObjectContext _localctx = new AllocateObjectContext(Context, _parentState);
		AllocateObjectContext _prevctx = _localctx;
		int _startState = 466;
		EnterRecursionRule(_localctx, 466, RULE_allocateObject, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 2542;
			variableName();
			}
			Context.Stop = TokenStream.LT(-1);
			State = 2548;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,202,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new AllocateObjectContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_allocateObject);
					State = 2544;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 2545;
					fieldSelector();
					}
					} 
				}
				State = 2550;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,202,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class AllocatedShapeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(Fortran90Parser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SectionSubscriptListContext sectionSubscriptList() {
			return GetRuleContext<SectionSubscriptListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(Fortran90Parser.RPAREN, 0); }
		public AllocatedShapeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_allocatedShape; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortran90ParserListener typedListener = listener as IFortran90ParserListener;
			if (typedListener != null) typedListener.EnterAllocatedShape(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortran90ParserListener typedListener = listener as IFortran90ParserListener;
			if (typedListener != null) typedListener.ExitAllocatedShape(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFortran90ParserVisitor<TResult> typedVisitor = visitor as IFortran90ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAllocatedShape(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AllocatedShapeContext allocatedShape() {
		AllocatedShapeContext _localctx = new AllocatedShapeContext(Context, State);
		EnterRule(_localctx, 468, RULE_allocatedShape);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2551;
			Match(LPAREN);
			State = 2552;
			sectionSubscriptList();
			State = 2553;
			Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StopStmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STOP() { return GetToken(Fortran90Parser.STOP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ICON() { return GetToken(Fortran90Parser.ICON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SCON() { return GetToken(Fortran90Parser.SCON, 0); }
		public StopStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stopStmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortran90ParserListener typedListener = listener as IFortran90ParserListener;
			if (typedListener != null) typedListener.EnterStopStmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortran90ParserListener typedListener = listener as IFortran90ParserListener;
			if (typedListener != null) typedListener.ExitStopStmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFortran90ParserVisitor<TResult> typedVisitor = visitor as IFortran90ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStopStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StopStmtContext stopStmt() {
		StopStmtContext _localctx = new StopStmtContext(Context, State);
		EnterRule(_localctx, 470, RULE_stopStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2555;
			Match(STOP);
			State = 2557;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,203,Context) ) {
			case 1:
				{
				State = 2556;
				_la = TokenStream.LA(1);
				if ( !(_la==SCON || _la==ICON) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WriteStmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WRITE() { return GetToken(Fortran90Parser.WRITE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(Fortran90Parser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IoControlSpecListContext ioControlSpecList() {
			return GetRuleContext<IoControlSpecListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(Fortran90Parser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public OutputItemListContext outputItemList() {
			return GetRuleContext<OutputItemListContext>(0);
		}
		public WriteStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_writeStmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortran90ParserListener typedListener = listener as IFortran90ParserListener;
			if (typedListener != null) typedListener.EnterWriteStmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortran90ParserListener typedListener = listener as IFortran90ParserListener;
			if (typedListener != null) typedListener.ExitWriteStmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFortran90ParserVisitor<TResult> typedVisitor = visitor as IFortran90ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWriteStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public WriteStmtContext writeStmt() {
		WriteStmtContext _localctx = new WriteStmtContext(Context, State);
		EnterRule(_localctx, 472, RULE_writeStmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2559;
			Match(WRITE);
			State = 2560;
			Match(LPAREN);
			State = 2561;
			ioControlSpecList(0);
			State = 2562;
			Match(RPAREN);
			State = 2564;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,204,Context) ) {
			case 1:
				{
				State = 2563;
				outputItemList();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IoControlSpecListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public UnitIdentifierContext unitIdentifier() {
			return GetRuleContext<UnitIdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOLLAR() { return GetToken(Fortran90Parser.DOLLAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA() { return GetToken(Fortran90Parser.COMMA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FormatIdentifierContext formatIdentifier() {
			return GetRuleContext<FormatIdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IoControlSpecContext ioControlSpec() {
			return GetRuleContext<IoControlSpecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IoControlSpecListContext ioControlSpecList() {
			return GetRuleContext<IoControlSpecListContext>(0);
		}
		public IoControlSpecListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ioControlSpecList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortran90ParserListener typedListener = listener as IFortran90ParserListener;
			if (typedListener != null) typedListener.EnterIoControlSpecList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortran90ParserListener typedListener = listener as IFortran90ParserListener;
			if (typedListener != null) typedListener.ExitIoControlSpecList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFortran90ParserVisitor<TResult> typedVisitor = visitor as IFortran90ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIoControlSpecList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IoControlSpecListContext ioControlSpecList() {
		return ioControlSpecList(0);
	}

	private IoControlSpecListContext ioControlSpecList(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		IoControlSpecListContext _localctx = new IoControlSpecListContext(Context, _parentState);
		IoControlSpecListContext _prevctx = _localctx;
		int _startState = 474;
		EnterRecursionRule(_localctx, 474, RULE_ioControlSpecList, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 2580;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,205,Context) ) {
			case 1:
				{
				State = 2567;
				unitIdentifier();
				State = 2568;
				Match(DOLLAR);
				State = 2569;
				Match(COMMA);
				}
				break;
			case 2:
				{
				State = 2571;
				unitIdentifier();
				State = 2572;
				Match(COMMA);
				State = 2573;
				formatIdentifier();
				}
				break;
			case 3:
				{
				State = 2575;
				unitIdentifier();
				State = 2576;
				Match(COMMA);
				State = 2577;
				ioControlSpec();
				}
				break;
			case 4:
				{
				State = 2579;
				ioControlSpec();
				}
				break;
			}
			Context.Stop = TokenStream.LT(-1);
			State = 2587;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,206,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new IoControlSpecListContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_ioControlSpecList);
					State = 2582;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 2583;
					Match(COMMA);
					State = 2584;
					ioControlSpec();
					}
					} 
				}
				State = 2589;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,206,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class StmtFunctionStmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NAME() { return GetToken(Fortran90Parser.NAME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StmtFunctionRangeContext stmtFunctionRange() {
			return GetRuleContext<StmtFunctionRangeContext>(0);
		}
		public StmtFunctionStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stmtFunctionStmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortran90ParserListener typedListener = listener as IFortran90ParserListener;
			if (typedListener != null) typedListener.EnterStmtFunctionStmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortran90ParserListener typedListener = listener as IFortran90ParserListener;
			if (typedListener != null) typedListener.ExitStmtFunctionStmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFortran90ParserVisitor<TResult> typedVisitor = visitor as IFortran90ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStmtFunctionStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StmtFunctionStmtContext stmtFunctionStmt() {
		StmtFunctionStmtContext _localctx = new StmtFunctionStmtContext(Context, State);
		EnterRule(_localctx, 476, RULE_stmtFunctionStmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2590;
			Match(NAME);
			State = 2591;
			stmtFunctionRange();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StmtFunctionRangeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(Fortran90Parser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(Fortran90Parser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGN() { return GetToken(Fortran90Parser.ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SFDummyArgNameListContext sFDummyArgNameList() {
			return GetRuleContext<SFDummyArgNameListContext>(0);
		}
		public StmtFunctionRangeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stmtFunctionRange; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortran90ParserListener typedListener = listener as IFortran90ParserListener;
			if (typedListener != null) typedListener.EnterStmtFunctionRange(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortran90ParserListener typedListener = listener as IFortran90ParserListener;
			if (typedListener != null) typedListener.ExitStmtFunctionRange(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFortran90ParserVisitor<TResult> typedVisitor = visitor as IFortran90ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStmtFunctionRange(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StmtFunctionRangeContext stmtFunctionRange() {
		StmtFunctionRangeContext _localctx = new StmtFunctionRangeContext(Context, State);
		EnterRule(_localctx, 478, RULE_stmtFunctionRange);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2593;
			Match(LPAREN);
			State = 2595;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==NAME) {
				{
				State = 2594;
				sFDummyArgNameList();
				}
			}

			State = 2597;
			Match(RPAREN);
			State = 2598;
			Match(ASSIGN);
			State = 2599;
			expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SFDummyArgNameListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SFDummyArgNameContext[] sFDummyArgName() {
			return GetRuleContexts<SFDummyArgNameContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SFDummyArgNameContext sFDummyArgName(int i) {
			return GetRuleContext<SFDummyArgNameContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(Fortran90Parser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(Fortran90Parser.COMMA, i);
		}
		public SFDummyArgNameListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sFDummyArgNameList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortran90ParserListener typedListener = listener as IFortran90ParserListener;
			if (typedListener != null) typedListener.EnterSFDummyArgNameList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortran90ParserListener typedListener = listener as IFortran90ParserListener;
			if (typedListener != null) typedListener.ExitSFDummyArgNameList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFortran90ParserVisitor<TResult> typedVisitor = visitor as IFortran90ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSFDummyArgNameList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SFDummyArgNameListContext sFDummyArgNameList() {
		SFDummyArgNameListContext _localctx = new SFDummyArgNameListContext(Context, State);
		EnterRule(_localctx, 480, RULE_sFDummyArgNameList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2601;
			sFDummyArgName();
			State = 2606;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 2602;
				Match(COMMA);
				State = 2603;
				sFDummyArgName();
				}
				}
				State = 2608;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SFDummyArgNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NAME() { return GetToken(Fortran90Parser.NAME, 0); }
		public SFDummyArgNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sFDummyArgName; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortran90ParserListener typedListener = listener as IFortran90ParserListener;
			if (typedListener != null) typedListener.EnterSFDummyArgName(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortran90ParserListener typedListener = listener as IFortran90ParserListener;
			if (typedListener != null) typedListener.ExitSFDummyArgName(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFortran90ParserVisitor<TResult> typedVisitor = visitor as IFortran90ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSFDummyArgName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SFDummyArgNameContext sFDummyArgName() {
		SFDummyArgNameContext _localctx = new SFDummyArgNameContext(Context, State);
		EnterRule(_localctx, 482, RULE_sFDummyArgName);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2609;
			Match(NAME);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReturnStmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RETURN() { return GetToken(Fortran90Parser.RETURN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ReturnStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_returnStmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortran90ParserListener typedListener = listener as IFortran90ParserListener;
			if (typedListener != null) typedListener.EnterReturnStmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortran90ParserListener typedListener = listener as IFortran90ParserListener;
			if (typedListener != null) typedListener.ExitReturnStmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFortran90ParserVisitor<TResult> typedVisitor = visitor as IFortran90ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReturnStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ReturnStmtContext returnStmt() {
		ReturnStmtContext _localctx = new ReturnStmtContext(Context, State);
		EnterRule(_localctx, 484, RULE_returnStmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2611;
			Match(RETURN);
			State = 2613;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,209,Context) ) {
			case 1:
				{
				State = 2612;
				expression(0);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RewindStmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REWIND() { return GetToken(Fortran90Parser.REWIND, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UnitIdentifierContext unitIdentifier() {
			return GetRuleContext<UnitIdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(Fortran90Parser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public PositionSpecListContext positionSpecList() {
			return GetRuleContext<PositionSpecListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(Fortran90Parser.RPAREN, 0); }
		public RewindStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rewindStmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortran90ParserListener typedListener = listener as IFortran90ParserListener;
			if (typedListener != null) typedListener.EnterRewindStmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortran90ParserListener typedListener = listener as IFortran90ParserListener;
			if (typedListener != null) typedListener.ExitRewindStmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFortran90ParserVisitor<TResult> typedVisitor = visitor as IFortran90ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRewindStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RewindStmtContext rewindStmt() {
		RewindStmtContext _localctx = new RewindStmtContext(Context, State);
		EnterRule(_localctx, 486, RULE_rewindStmt);
		try {
			State = 2622;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,210,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				{
				State = 2615;
				Match(REWIND);
				State = 2616;
				unitIdentifier();
				}
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				{
				State = 2617;
				Match(REWIND);
				State = 2618;
				Match(LPAREN);
				State = 2619;
				positionSpecList();
				State = 2620;
				Match(RPAREN);
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReadStmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode READ() { return GetToken(Fortran90Parser.READ, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public RdCtlSpecContext rdCtlSpec() {
			return GetRuleContext<RdCtlSpecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public InputItemListContext inputItemList() {
			return GetRuleContext<InputItemListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RdFmtIdContext rdFmtId() {
			return GetRuleContext<RdFmtIdContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CommaInputItemListContext commaInputItemList() {
			return GetRuleContext<CommaInputItemListContext>(0);
		}
		public ReadStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_readStmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortran90ParserListener typedListener = listener as IFortran90ParserListener;
			if (typedListener != null) typedListener.EnterReadStmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortran90ParserListener typedListener = listener as IFortran90ParserListener;
			if (typedListener != null) typedListener.ExitReadStmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFortran90ParserVisitor<TResult> typedVisitor = visitor as IFortran90ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReadStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ReadStmtContext readStmt() {
		ReadStmtContext _localctx = new ReadStmtContext(Context, State);
		EnterRule(_localctx, 488, RULE_readStmt);
		try {
			State = 2634;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,213,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2624;
				Match(READ);
				State = 2625;
				rdCtlSpec();
				State = 2627;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,211,Context) ) {
				case 1:
					{
					State = 2626;
					inputItemList();
					}
					break;
				}
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2629;
				Match(READ);
				State = 2630;
				rdFmtId();
				State = 2632;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,212,Context) ) {
				case 1:
					{
					State = 2631;
					commaInputItemList();
					}
					break;
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CommaInputItemListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA() { return GetToken(Fortran90Parser.COMMA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public InputItemListContext inputItemList() {
			return GetRuleContext<InputItemListContext>(0);
		}
		public CommaInputItemListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_commaInputItemList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortran90ParserListener typedListener = listener as IFortran90ParserListener;
			if (typedListener != null) typedListener.EnterCommaInputItemList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortran90ParserListener typedListener = listener as IFortran90ParserListener;
			if (typedListener != null) typedListener.ExitCommaInputItemList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFortran90ParserVisitor<TResult> typedVisitor = visitor as IFortran90ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCommaInputItemList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CommaInputItemListContext commaInputItemList() {
		CommaInputItemListContext _localctx = new CommaInputItemListContext(Context, State);
		EnterRule(_localctx, 490, RULE_commaInputItemList);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2636;
			Match(COMMA);
			State = 2637;
			inputItemList();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RdFmtIdContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public LblRefContext lblRef() {
			return GetRuleContext<LblRefContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STAR() { return GetToken(Fortran90Parser.STAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public COperandContext cOperand() {
			return GetRuleContext<COperandContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] DIV() { return GetTokens(Fortran90Parser.DIV); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DIV(int i) {
			return GetToken(Fortran90Parser.DIV, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SPOFF() { return GetToken(Fortran90Parser.SPOFF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SPON() { return GetToken(Fortran90Parser.SPON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public CPrimaryContext cPrimary() {
			return GetRuleContext<CPrimaryContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RdFmtIdExprContext rdFmtIdExpr() {
			return GetRuleContext<RdFmtIdExprContext>(0);
		}
		public RdFmtIdContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rdFmtId; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortran90ParserListener typedListener = listener as IFortran90ParserListener;
			if (typedListener != null) typedListener.EnterRdFmtId(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortran90ParserListener typedListener = listener as IFortran90ParserListener;
			if (typedListener != null) typedListener.ExitRdFmtId(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFortran90ParserVisitor<TResult> typedVisitor = visitor as IFortran90ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRdFmtId(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RdFmtIdContext rdFmtId() {
		RdFmtIdContext _localctx = new RdFmtIdContext(Context, State);
		EnterRule(_localctx, 492, RULE_rdFmtId);
		try {
			State = 2656;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,214,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2639;
				lblRef();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2640;
				Match(STAR);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 2641;
				cOperand();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 2642;
				cOperand();
				State = 2643;
				Match(DIV);
				State = 2644;
				Match(SPOFF);
				State = 2645;
				Match(DIV);
				State = 2646;
				Match(SPON);
				State = 2647;
				cPrimary();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 2649;
				rdFmtIdExpr();
				State = 2650;
				Match(DIV);
				State = 2651;
				Match(SPOFF);
				State = 2652;
				Match(DIV);
				State = 2653;
				Match(SPON);
				State = 2654;
				cPrimary();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RdFmtIdExprContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(Fortran90Parser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UFExprContext uFExpr() {
			return GetRuleContext<UFExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(Fortran90Parser.RPAREN, 0); }
		public RdFmtIdExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rdFmtIdExpr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortran90ParserListener typedListener = listener as IFortran90ParserListener;
			if (typedListener != null) typedListener.EnterRdFmtIdExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortran90ParserListener typedListener = listener as IFortran90ParserListener;
			if (typedListener != null) typedListener.ExitRdFmtIdExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFortran90ParserVisitor<TResult> typedVisitor = visitor as IFortran90ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRdFmtIdExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RdFmtIdExprContext rdFmtIdExpr() {
		RdFmtIdExprContext _localctx = new RdFmtIdExprContext(Context, State);
		EnterRule(_localctx, 494, RULE_rdFmtIdExpr);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2658;
			Match(LPAREN);
			State = 2659;
			uFExpr(0);
			State = 2660;
			Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InputItemListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public InputItemContext[] inputItem() {
			return GetRuleContexts<InputItemContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public InputItemContext inputItem(int i) {
			return GetRuleContext<InputItemContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(Fortran90Parser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(Fortran90Parser.COMMA, i);
		}
		public InputItemListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_inputItemList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortran90ParserListener typedListener = listener as IFortran90ParserListener;
			if (typedListener != null) typedListener.EnterInputItemList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortran90ParserListener typedListener = listener as IFortran90ParserListener;
			if (typedListener != null) typedListener.ExitInputItemList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFortran90ParserVisitor<TResult> typedVisitor = visitor as IFortran90ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInputItemList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InputItemListContext inputItemList() {
		InputItemListContext _localctx = new InputItemListContext(Context, State);
		EnterRule(_localctx, 496, RULE_inputItemList);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 2662;
			inputItem();
			State = 2667;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,215,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 2663;
					Match(COMMA);
					State = 2664;
					inputItem();
					}
					} 
				}
				State = 2669;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,215,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InputItemContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public NameDataRefContext nameDataRef() {
			return GetRuleContext<NameDataRefContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public InputImpliedDoContext inputImpliedDo() {
			return GetRuleContext<InputImpliedDoContext>(0);
		}
		public InputItemContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_inputItem; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortran90ParserListener typedListener = listener as IFortran90ParserListener;
			if (typedListener != null) typedListener.EnterInputItem(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortran90ParserListener typedListener = listener as IFortran90ParserListener;
			if (typedListener != null) typedListener.ExitInputItem(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFortran90ParserVisitor<TResult> typedVisitor = visitor as IFortran90ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInputItem(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InputItemContext inputItem() {
		InputItemContext _localctx = new InputItemContext(Context, State);
		EnterRule(_localctx, 498, RULE_inputItem);
		try {
			State = 2672;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case REAL:
			case SIZE:
			case NAME:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2670;
				nameDataRef();
				}
				break;
			case LPAREN:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2671;
				inputImpliedDo();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InputImpliedDoContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(Fortran90Parser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public InputItemListContext inputItemList() {
			return GetRuleContext<InputItemListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(Fortran90Parser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(Fortran90Parser.COMMA, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ImpliedDoVariableContext impliedDoVariable() {
			return GetRuleContext<ImpliedDoVariableContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGN() { return GetToken(Fortran90Parser.ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(Fortran90Parser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public CommaExprContext commaExpr() {
			return GetRuleContext<CommaExprContext>(0);
		}
		public InputImpliedDoContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_inputImpliedDo; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortran90ParserListener typedListener = listener as IFortran90ParserListener;
			if (typedListener != null) typedListener.EnterInputImpliedDo(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortran90ParserListener typedListener = listener as IFortran90ParserListener;
			if (typedListener != null) typedListener.ExitInputImpliedDo(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFortran90ParserVisitor<TResult> typedVisitor = visitor as IFortran90ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInputImpliedDo(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InputImpliedDoContext inputImpliedDo() {
		InputImpliedDoContext _localctx = new InputImpliedDoContext(Context, State);
		EnterRule(_localctx, 500, RULE_inputImpliedDo);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2674;
			Match(LPAREN);
			State = 2675;
			inputItemList();
			State = 2676;
			Match(COMMA);
			State = 2677;
			impliedDoVariable();
			State = 2678;
			Match(ASSIGN);
			State = 2679;
			expression(0);
			State = 2680;
			Match(COMMA);
			State = 2681;
			expression(0);
			State = 2683;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==COMMA) {
				{
				State = 2682;
				commaExpr();
				}
			}

			State = 2685;
			Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RdCtlSpecContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public RdUnitIdContext rdUnitId() {
			return GetRuleContext<RdUnitIdContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(Fortran90Parser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public RdIoCtlSpecListContext rdIoCtlSpecList() {
			return GetRuleContext<RdIoCtlSpecListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(Fortran90Parser.RPAREN, 0); }
		public RdCtlSpecContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rdCtlSpec; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortran90ParserListener typedListener = listener as IFortran90ParserListener;
			if (typedListener != null) typedListener.EnterRdCtlSpec(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortran90ParserListener typedListener = listener as IFortran90ParserListener;
			if (typedListener != null) typedListener.ExitRdCtlSpec(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFortran90ParserVisitor<TResult> typedVisitor = visitor as IFortran90ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRdCtlSpec(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RdCtlSpecContext rdCtlSpec() {
		RdCtlSpecContext _localctx = new RdCtlSpecContext(Context, State);
		EnterRule(_localctx, 502, RULE_rdCtlSpec);
		try {
			State = 2692;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,218,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2687;
				rdUnitId();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				{
				State = 2688;
				Match(LPAREN);
				State = 2689;
				rdIoCtlSpecList(0);
				State = 2690;
				Match(RPAREN);
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RdUnitIdContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(Fortran90Parser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UFExprContext uFExpr() {
			return GetRuleContext<UFExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(Fortran90Parser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STAR() { return GetToken(Fortran90Parser.STAR, 0); }
		public RdUnitIdContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rdUnitId; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortran90ParserListener typedListener = listener as IFortran90ParserListener;
			if (typedListener != null) typedListener.EnterRdUnitId(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortran90ParserListener typedListener = listener as IFortran90ParserListener;
			if (typedListener != null) typedListener.ExitRdUnitId(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFortran90ParserVisitor<TResult> typedVisitor = visitor as IFortran90ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRdUnitId(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RdUnitIdContext rdUnitId() {
		RdUnitIdContext _localctx = new RdUnitIdContext(Context, State);
		EnterRule(_localctx, 504, RULE_rdUnitId);
		try {
			State = 2701;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,219,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				{
				State = 2694;
				Match(LPAREN);
				State = 2695;
				uFExpr(0);
				State = 2696;
				Match(RPAREN);
				}
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				{
				State = 2698;
				Match(LPAREN);
				State = 2699;
				Match(STAR);
				State = 2700;
				Match(RPAREN);
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RdIoCtlSpecListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public UnitIdentifierContext unitIdentifier() {
			return GetRuleContext<UnitIdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA() { return GetToken(Fortran90Parser.COMMA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IoControlSpecContext ioControlSpec() {
			return GetRuleContext<IoControlSpecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FormatIdentifierContext formatIdentifier() {
			return GetRuleContext<FormatIdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RdIoCtlSpecListContext rdIoCtlSpecList() {
			return GetRuleContext<RdIoCtlSpecListContext>(0);
		}
		public RdIoCtlSpecListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rdIoCtlSpecList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortran90ParserListener typedListener = listener as IFortran90ParserListener;
			if (typedListener != null) typedListener.EnterRdIoCtlSpecList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortran90ParserListener typedListener = listener as IFortran90ParserListener;
			if (typedListener != null) typedListener.ExitRdIoCtlSpecList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFortran90ParserVisitor<TResult> typedVisitor = visitor as IFortran90ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRdIoCtlSpecList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RdIoCtlSpecListContext rdIoCtlSpecList() {
		return rdIoCtlSpecList(0);
	}

	private RdIoCtlSpecListContext rdIoCtlSpecList(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		RdIoCtlSpecListContext _localctx = new RdIoCtlSpecListContext(Context, _parentState);
		RdIoCtlSpecListContext _prevctx = _localctx;
		int _startState = 506;
		EnterRecursionRule(_localctx, 506, RULE_rdIoCtlSpecList, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 2713;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,220,Context) ) {
			case 1:
				{
				State = 2704;
				unitIdentifier();
				State = 2705;
				Match(COMMA);
				State = 2706;
				ioControlSpec();
				}
				break;
			case 2:
				{
				State = 2708;
				unitIdentifier();
				State = 2709;
				Match(COMMA);
				State = 2710;
				formatIdentifier();
				}
				break;
			case 3:
				{
				State = 2712;
				ioControlSpec();
				}
				break;
			}
			Context.Stop = TokenStream.LT(-1);
			State = 2720;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,221,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new RdIoCtlSpecListContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_rdIoCtlSpecList);
					State = 2715;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 2716;
					Match(COMMA);
					State = 2717;
					ioControlSpec();
					}
					} 
				}
				State = 2722;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,221,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class IoControlSpecContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FMT() { return GetToken(Fortran90Parser.FMT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGN() { return GetToken(Fortran90Parser.ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FormatIdentifierContext formatIdentifier() {
			return GetRuleContext<FormatIdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNIT() { return GetToken(Fortran90Parser.UNIT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UnitIdentifierContext unitIdentifier() {
			return GetRuleContext<UnitIdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REC() { return GetToken(Fortran90Parser.REC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode END() { return GetToken(Fortran90Parser.END, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public LblRefContext lblRef() {
			return GetRuleContext<LblRefContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ERR() { return GetToken(Fortran90Parser.ERR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IOSTAT() { return GetToken(Fortran90Parser.IOSTAT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ScalarVariableContext scalarVariable() {
			return GetRuleContext<ScalarVariableContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NML() { return GetToken(Fortran90Parser.NML, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NamelistGroupNameContext namelistGroupName() {
			return GetRuleContext<NamelistGroupNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ADVANCE() { return GetToken(Fortran90Parser.ADVANCE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public CExpressionContext cExpression() {
			return GetRuleContext<CExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SIZE() { return GetToken(Fortran90Parser.SIZE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public VariableContext variable() {
			return GetRuleContext<VariableContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EOR() { return GetToken(Fortran90Parser.EOR, 0); }
		public IoControlSpecContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ioControlSpec; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortran90ParserListener typedListener = listener as IFortran90ParserListener;
			if (typedListener != null) typedListener.EnterIoControlSpec(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortran90ParserListener typedListener = listener as IFortran90ParserListener;
			if (typedListener != null) typedListener.ExitIoControlSpec(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFortran90ParserVisitor<TResult> typedVisitor = visitor as IFortran90ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIoControlSpec(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IoControlSpecContext ioControlSpec() {
		IoControlSpecContext _localctx = new IoControlSpecContext(Context, State);
		EnterRule(_localctx, 508, RULE_ioControlSpec);
		try {
			State = 2753;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case FMT:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2723;
				Match(FMT);
				State = 2724;
				Match(ASSIGN);
				State = 2725;
				formatIdentifier();
				}
				break;
			case UNIT:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2726;
				Match(UNIT);
				State = 2727;
				Match(ASSIGN);
				State = 2728;
				unitIdentifier();
				}
				break;
			case REC:
				EnterOuterAlt(_localctx, 3);
				{
				State = 2729;
				Match(REC);
				State = 2730;
				Match(ASSIGN);
				State = 2731;
				expression(0);
				}
				break;
			case END:
				EnterOuterAlt(_localctx, 4);
				{
				State = 2732;
				Match(END);
				State = 2733;
				Match(ASSIGN);
				State = 2734;
				lblRef();
				}
				break;
			case ERR:
				EnterOuterAlt(_localctx, 5);
				{
				State = 2735;
				Match(ERR);
				State = 2736;
				Match(ASSIGN);
				State = 2737;
				lblRef();
				}
				break;
			case IOSTAT:
				EnterOuterAlt(_localctx, 6);
				{
				State = 2738;
				Match(IOSTAT);
				State = 2739;
				Match(ASSIGN);
				State = 2740;
				scalarVariable();
				}
				break;
			case NML:
				EnterOuterAlt(_localctx, 7);
				{
				State = 2741;
				Match(NML);
				State = 2742;
				Match(ASSIGN);
				State = 2743;
				namelistGroupName();
				}
				break;
			case ADVANCE:
				EnterOuterAlt(_localctx, 8);
				{
				State = 2744;
				Match(ADVANCE);
				State = 2745;
				Match(ASSIGN);
				State = 2746;
				cExpression();
				}
				break;
			case SIZE:
				EnterOuterAlt(_localctx, 9);
				{
				State = 2747;
				Match(SIZE);
				State = 2748;
				Match(ASSIGN);
				State = 2749;
				variable();
				}
				break;
			case EOR:
				EnterOuterAlt(_localctx, 10);
				{
				State = 2750;
				Match(EOR);
				State = 2751;
				Match(ASSIGN);
				State = 2752;
				lblRef();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PrintStmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PRINT() { return GetToken(Fortran90Parser.PRINT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FormatIdentifierContext formatIdentifier() {
			return GetRuleContext<FormatIdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA() { return GetToken(Fortran90Parser.COMMA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public OutputItemListContext outputItemList() {
			return GetRuleContext<OutputItemListContext>(0);
		}
		public PrintStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_printStmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortran90ParserListener typedListener = listener as IFortran90ParserListener;
			if (typedListener != null) typedListener.EnterPrintStmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortran90ParserListener typedListener = listener as IFortran90ParserListener;
			if (typedListener != null) typedListener.ExitPrintStmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFortran90ParserVisitor<TResult> typedVisitor = visitor as IFortran90ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrintStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PrintStmtContext printStmt() {
		PrintStmtContext _localctx = new PrintStmtContext(Context, State);
		EnterRule(_localctx, 510, RULE_printStmt);
		try {
			State = 2762;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,223,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2755;
				Match(PRINT);
				State = 2756;
				formatIdentifier();
				State = 2757;
				Match(COMMA);
				State = 2758;
				outputItemList();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2760;
				Match(PRINT);
				State = 2761;
				formatIdentifier();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OutputItemListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public OutputItemList1Context outputItemList1() {
			return GetRuleContext<OutputItemList1Context>(0);
		}
		public OutputItemListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_outputItemList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortran90ParserListener typedListener = listener as IFortran90ParserListener;
			if (typedListener != null) typedListener.EnterOutputItemList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortran90ParserListener typedListener = listener as IFortran90ParserListener;
			if (typedListener != null) typedListener.ExitOutputItemList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFortran90ParserVisitor<TResult> typedVisitor = visitor as IFortran90ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOutputItemList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OutputItemListContext outputItemList() {
		OutputItemListContext _localctx = new OutputItemListContext(Context, State);
		EnterRule(_localctx, 512, RULE_outputItemList);
		try {
			State = 2766;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,224,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2764;
				expression(0);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2765;
				outputItemList1(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OutputItemList1Context : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA() { return GetToken(Fortran90Parser.COMMA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public OutputImpliedDoContext outputImpliedDo() {
			return GetRuleContext<OutputImpliedDoContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public OutputItemList1Context outputItemList1() {
			return GetRuleContext<OutputItemList1Context>(0);
		}
		public OutputItemList1Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_outputItemList1; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortran90ParserListener typedListener = listener as IFortran90ParserListener;
			if (typedListener != null) typedListener.EnterOutputItemList1(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortran90ParserListener typedListener = listener as IFortran90ParserListener;
			if (typedListener != null) typedListener.ExitOutputItemList1(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFortran90ParserVisitor<TResult> typedVisitor = visitor as IFortran90ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOutputItemList1(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OutputItemList1Context outputItemList1() {
		return outputItemList1(0);
	}

	private OutputItemList1Context outputItemList1(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		OutputItemList1Context _localctx = new OutputItemList1Context(Context, _parentState);
		OutputItemList1Context _prevctx = _localctx;
		int _startState = 514;
		EnterRecursionRule(_localctx, 514, RULE_outputItemList1, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 2778;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,225,Context) ) {
			case 1:
				{
				State = 2769;
				expression(0);
				State = 2770;
				Match(COMMA);
				State = 2771;
				expression(0);
				}
				break;
			case 2:
				{
				State = 2773;
				expression(0);
				State = 2774;
				Match(COMMA);
				State = 2775;
				outputImpliedDo();
				}
				break;
			case 3:
				{
				State = 2777;
				outputImpliedDo();
				}
				break;
			}
			Context.Stop = TokenStream.LT(-1);
			State = 2788;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,227,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 2786;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,226,Context) ) {
					case 1:
						{
						_localctx = new OutputItemList1Context(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_outputItemList1);
						State = 2780;
						if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
						State = 2781;
						Match(COMMA);
						State = 2782;
						expression(0);
						}
						break;
					case 2:
						{
						_localctx = new OutputItemList1Context(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_outputItemList1);
						State = 2783;
						if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
						State = 2784;
						Match(COMMA);
						State = 2785;
						outputImpliedDo();
						}
						break;
					}
					} 
				}
				State = 2790;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,227,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class OutputImpliedDoContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(Fortran90Parser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(Fortran90Parser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(Fortran90Parser.COMMA, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ImpliedDoVariableContext impliedDoVariable() {
			return GetRuleContext<ImpliedDoVariableContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGN() { return GetToken(Fortran90Parser.ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(Fortran90Parser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public CommaExprContext commaExpr() {
			return GetRuleContext<CommaExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public OutputItemList1Context outputItemList1() {
			return GetRuleContext<OutputItemList1Context>(0);
		}
		public OutputImpliedDoContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_outputImpliedDo; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortran90ParserListener typedListener = listener as IFortran90ParserListener;
			if (typedListener != null) typedListener.EnterOutputImpliedDo(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortran90ParserListener typedListener = listener as IFortran90ParserListener;
			if (typedListener != null) typedListener.ExitOutputImpliedDo(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFortran90ParserVisitor<TResult> typedVisitor = visitor as IFortran90ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOutputImpliedDo(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OutputImpliedDoContext outputImpliedDo() {
		OutputImpliedDoContext _localctx = new OutputImpliedDoContext(Context, State);
		EnterRule(_localctx, 516, RULE_outputImpliedDo);
		int _la;
		try {
			State = 2817;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,230,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2791;
				Match(LPAREN);
				State = 2792;
				expression(0);
				State = 2793;
				Match(COMMA);
				State = 2794;
				impliedDoVariable();
				State = 2795;
				Match(ASSIGN);
				State = 2796;
				expression(0);
				State = 2797;
				Match(COMMA);
				State = 2798;
				expression(0);
				State = 2800;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==COMMA) {
					{
					State = 2799;
					commaExpr();
					}
				}

				State = 2802;
				Match(RPAREN);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2804;
				Match(LPAREN);
				State = 2805;
				outputItemList1(0);
				State = 2806;
				Match(COMMA);
				State = 2807;
				impliedDoVariable();
				State = 2808;
				Match(ASSIGN);
				State = 2809;
				expression(0);
				State = 2810;
				Match(COMMA);
				State = 2811;
				expression(0);
				State = 2813;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==COMMA) {
					{
					State = 2812;
					commaExpr();
					}
				}

				State = 2815;
				Match(RPAREN);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FormatIdentifierContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public LblRefContext lblRef() {
			return GetRuleContext<LblRefContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CExpressionContext cExpression() {
			return GetRuleContext<CExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STAR() { return GetToken(Fortran90Parser.STAR, 0); }
		public FormatIdentifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_formatIdentifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortran90ParserListener typedListener = listener as IFortran90ParserListener;
			if (typedListener != null) typedListener.EnterFormatIdentifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortran90ParserListener typedListener = listener as IFortran90ParserListener;
			if (typedListener != null) typedListener.ExitFormatIdentifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFortran90ParserVisitor<TResult> typedVisitor = visitor as IFortran90ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFormatIdentifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FormatIdentifierContext formatIdentifier() {
		FormatIdentifierContext _localctx = new FormatIdentifierContext(Context, State);
		EnterRule(_localctx, 518, RULE_formatIdentifier);
		try {
			State = 2822;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ICON:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2819;
				lblRef();
				}
				break;
			case REAL:
			case SIZE:
			case LPAREN:
			case SCON:
			case NAME:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2820;
				cExpression();
				}
				break;
			case STAR:
				EnterOuterAlt(_localctx, 3);
				{
				State = 2821;
				Match(STAR);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PauseStmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PAUSE() { return GetToken(Fortran90Parser.PAUSE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ICON() { return GetToken(Fortran90Parser.ICON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SCON() { return GetToken(Fortran90Parser.SCON, 0); }
		public PauseStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pauseStmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortran90ParserListener typedListener = listener as IFortran90ParserListener;
			if (typedListener != null) typedListener.EnterPauseStmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortran90ParserListener typedListener = listener as IFortran90ParserListener;
			if (typedListener != null) typedListener.ExitPauseStmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFortran90ParserVisitor<TResult> typedVisitor = visitor as IFortran90ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPauseStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PauseStmtContext pauseStmt() {
		PauseStmtContext _localctx = new PauseStmtContext(Context, State);
		EnterRule(_localctx, 520, RULE_pauseStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2824;
			Match(PAUSE);
			State = 2826;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,232,Context) ) {
			case 1:
				{
				State = 2825;
				_la = TokenStream.LA(1);
				if ( !(_la==SCON || _la==ICON) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OpenStmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN() { return GetToken(Fortran90Parser.OPEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(Fortran90Parser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ConnectSpecListContext connectSpecList() {
			return GetRuleContext<ConnectSpecListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(Fortran90Parser.RPAREN, 0); }
		public OpenStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_openStmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortran90ParserListener typedListener = listener as IFortran90ParserListener;
			if (typedListener != null) typedListener.EnterOpenStmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortran90ParserListener typedListener = listener as IFortran90ParserListener;
			if (typedListener != null) typedListener.ExitOpenStmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFortran90ParserVisitor<TResult> typedVisitor = visitor as IFortran90ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOpenStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OpenStmtContext openStmt() {
		OpenStmtContext _localctx = new OpenStmtContext(Context, State);
		EnterRule(_localctx, 522, RULE_openStmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2828;
			Match(OPEN);
			State = 2829;
			Match(LPAREN);
			State = 2830;
			connectSpecList();
			State = 2831;
			Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConnectSpecListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public UnitIdentifierCommaContext unitIdentifierComma() {
			return GetRuleContext<UnitIdentifierCommaContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ConnectSpecContext[] connectSpec() {
			return GetRuleContexts<ConnectSpecContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ConnectSpecContext connectSpec(int i) {
			return GetRuleContext<ConnectSpecContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(Fortran90Parser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(Fortran90Parser.COMMA, i);
		}
		public ConnectSpecListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_connectSpecList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortran90ParserListener typedListener = listener as IFortran90ParserListener;
			if (typedListener != null) typedListener.EnterConnectSpecList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortran90ParserListener typedListener = listener as IFortran90ParserListener;
			if (typedListener != null) typedListener.ExitConnectSpecList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFortran90ParserVisitor<TResult> typedVisitor = visitor as IFortran90ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConnectSpecList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConnectSpecListContext connectSpecList() {
		ConnectSpecListContext _localctx = new ConnectSpecListContext(Context, State);
		EnterRule(_localctx, 524, RULE_connectSpecList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2834;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==REAL || ((((_la - 84)) & ~0x3f) == 0 && ((1L << (_la - 84)) & 422762220879873L) != 0) || ((((_la - 177)) & ~0x3f) == 0 && ((1L << (_la - 177)) & 35329L) != 0)) {
				{
				State = 2833;
				unitIdentifierComma();
				}
			}

			State = 2837;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (((((_la - 77)) & ~0x3f) == 0 && ((1L << (_la - 77)) & 66061391L) != 0) || _la==BLANK) {
				{
				State = 2836;
				connectSpec();
				}
			}

			State = 2843;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 2839;
				Match(COMMA);
				State = 2840;
				connectSpec();
				}
				}
				State = 2845;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConnectSpecContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNIT() { return GetToken(Fortran90Parser.UNIT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGN() { return GetToken(Fortran90Parser.ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UnitIdentifierContext unitIdentifier() {
			return GetRuleContext<UnitIdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ERR() { return GetToken(Fortran90Parser.ERR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public LblRefContext lblRef() {
			return GetRuleContext<LblRefContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FILE() { return GetToken(Fortran90Parser.FILE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public CExpressionContext cExpression() {
			return GetRuleContext<CExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STATUS() { return GetToken(Fortran90Parser.STATUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ACCESS() { return GetToken(Fortran90Parser.ACCESS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FORM() { return GetToken(Fortran90Parser.FORM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RECL() { return GetToken(Fortran90Parser.RECL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BLANK() { return GetToken(Fortran90Parser.BLANK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IOSTAT() { return GetToken(Fortran90Parser.IOSTAT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ScalarVariableContext scalarVariable() {
			return GetRuleContext<ScalarVariableContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode POSITION() { return GetToken(Fortran90Parser.POSITION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ACTION() { return GetToken(Fortran90Parser.ACTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DELIM() { return GetToken(Fortran90Parser.DELIM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PAD() { return GetToken(Fortran90Parser.PAD, 0); }
		public ConnectSpecContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_connectSpec; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortran90ParserListener typedListener = listener as IFortran90ParserListener;
			if (typedListener != null) typedListener.EnterConnectSpec(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortran90ParserListener typedListener = listener as IFortran90ParserListener;
			if (typedListener != null) typedListener.ExitConnectSpec(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFortran90ParserVisitor<TResult> typedVisitor = visitor as IFortran90ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConnectSpec(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConnectSpecContext connectSpec() {
		ConnectSpecContext _localctx = new ConnectSpecContext(Context, State);
		EnterRule(_localctx, 526, RULE_connectSpec);
		try {
			State = 2885;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case UNIT:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2846;
				Match(UNIT);
				State = 2847;
				Match(ASSIGN);
				State = 2848;
				unitIdentifier();
				}
				break;
			case ERR:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2849;
				Match(ERR);
				State = 2850;
				Match(ASSIGN);
				State = 2851;
				lblRef();
				}
				break;
			case FILE:
				EnterOuterAlt(_localctx, 3);
				{
				State = 2852;
				Match(FILE);
				State = 2853;
				Match(ASSIGN);
				State = 2854;
				cExpression();
				}
				break;
			case STATUS:
				EnterOuterAlt(_localctx, 4);
				{
				State = 2855;
				Match(STATUS);
				State = 2856;
				Match(ASSIGN);
				State = 2857;
				cExpression();
				}
				break;
			case ACCESS:
				EnterOuterAlt(_localctx, 5);
				{
				State = 2858;
				Match(ACCESS);
				State = 2859;
				Match(ASSIGN);
				State = 2860;
				cExpression();
				}
				break;
			case FORM:
				EnterOuterAlt(_localctx, 6);
				{
				State = 2861;
				Match(FORM);
				State = 2862;
				Match(ASSIGN);
				State = 2863;
				cExpression();
				}
				break;
			case RECL:
				EnterOuterAlt(_localctx, 7);
				{
				State = 2864;
				Match(RECL);
				State = 2865;
				Match(ASSIGN);
				State = 2866;
				expression(0);
				}
				break;
			case BLANK:
				EnterOuterAlt(_localctx, 8);
				{
				State = 2867;
				Match(BLANK);
				State = 2868;
				Match(ASSIGN);
				State = 2869;
				cExpression();
				}
				break;
			case IOSTAT:
				EnterOuterAlt(_localctx, 9);
				{
				State = 2870;
				Match(IOSTAT);
				State = 2871;
				Match(ASSIGN);
				State = 2872;
				scalarVariable();
				}
				break;
			case POSITION:
				EnterOuterAlt(_localctx, 10);
				{
				State = 2873;
				Match(POSITION);
				State = 2874;
				Match(ASSIGN);
				State = 2875;
				cExpression();
				}
				break;
			case ACTION:
				EnterOuterAlt(_localctx, 11);
				{
				State = 2876;
				Match(ACTION);
				State = 2877;
				Match(ASSIGN);
				State = 2878;
				cExpression();
				}
				break;
			case DELIM:
				EnterOuterAlt(_localctx, 12);
				{
				State = 2879;
				Match(DELIM);
				State = 2880;
				Match(ASSIGN);
				State = 2881;
				cExpression();
				}
				break;
			case PAD:
				EnterOuterAlt(_localctx, 13);
				{
				State = 2882;
				Match(PAD);
				State = 2883;
				Match(ASSIGN);
				State = 2884;
				cExpression();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InquireStmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INQUIRE() { return GetToken(Fortran90Parser.INQUIRE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(Fortran90Parser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public InquireSpecListContext inquireSpecList() {
			return GetRuleContext<InquireSpecListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(Fortran90Parser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IOLENGTH() { return GetToken(Fortran90Parser.IOLENGTH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGN() { return GetToken(Fortran90Parser.ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ScalarVariableContext scalarVariable() {
			return GetRuleContext<ScalarVariableContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public OutputItemListContext outputItemList() {
			return GetRuleContext<OutputItemListContext>(0);
		}
		public InquireStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_inquireStmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortran90ParserListener typedListener = listener as IFortran90ParserListener;
			if (typedListener != null) typedListener.EnterInquireStmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortran90ParserListener typedListener = listener as IFortran90ParserListener;
			if (typedListener != null) typedListener.ExitInquireStmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFortran90ParserVisitor<TResult> typedVisitor = visitor as IFortran90ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInquireStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InquireStmtContext inquireStmt() {
		InquireStmtContext _localctx = new InquireStmtContext(Context, State);
		EnterRule(_localctx, 528, RULE_inquireStmt);
		try {
			State = 2900;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,237,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2887;
				Match(INQUIRE);
				State = 2888;
				Match(LPAREN);
				State = 2889;
				inquireSpecList();
				State = 2890;
				Match(RPAREN);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2892;
				Match(INQUIRE);
				State = 2893;
				Match(LPAREN);
				State = 2894;
				Match(IOLENGTH);
				State = 2895;
				Match(ASSIGN);
				State = 2896;
				scalarVariable();
				State = 2897;
				Match(RPAREN);
				State = 2898;
				outputItemList();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InquireSpecListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public UnitIdentifierContext unitIdentifier() {
			return GetRuleContext<UnitIdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public InquireSpecContext[] inquireSpec() {
			return GetRuleContexts<InquireSpecContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public InquireSpecContext inquireSpec(int i) {
			return GetRuleContext<InquireSpecContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(Fortran90Parser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(Fortran90Parser.COMMA, i);
		}
		public InquireSpecListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_inquireSpecList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortran90ParserListener typedListener = listener as IFortran90ParserListener;
			if (typedListener != null) typedListener.EnterInquireSpecList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortran90ParserListener typedListener = listener as IFortran90ParserListener;
			if (typedListener != null) typedListener.ExitInquireSpecList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFortran90ParserVisitor<TResult> typedVisitor = visitor as IFortran90ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInquireSpecList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InquireSpecListContext inquireSpecList() {
		InquireSpecListContext _localctx = new InquireSpecListContext(Context, State);
		EnterRule(_localctx, 530, RULE_inquireSpecList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2903;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,238,Context) ) {
			case 1:
				{
				State = 2902;
				unitIdentifier();
				}
				break;
			}
			State = 2906;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (((((_la - 67)) & ~0x3f) == 0 && ((1L << (_la - 67)) & 16489722788961L) != 0) || _la==NAME || _la==BLANK) {
				{
				State = 2905;
				inquireSpec();
				}
			}

			State = 2912;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 2908;
				Match(COMMA);
				State = 2909;
				inquireSpec();
				}
				}
				State = 2914;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InquireSpecContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNIT() { return GetToken(Fortran90Parser.UNIT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGN() { return GetToken(Fortran90Parser.ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UnitIdentifierContext unitIdentifier() {
			return GetRuleContext<UnitIdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FILE() { return GetToken(Fortran90Parser.FILE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public CExpressionContext cExpression() {
			return GetRuleContext<CExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ERR() { return GetToken(Fortran90Parser.ERR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public LblRefContext lblRef() {
			return GetRuleContext<LblRefContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IOSTAT() { return GetToken(Fortran90Parser.IOSTAT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ScalarVariableContext scalarVariable() {
			return GetRuleContext<ScalarVariableContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXIST() { return GetToken(Fortran90Parser.EXIST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPENED() { return GetToken(Fortran90Parser.OPENED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NUMBER() { return GetToken(Fortran90Parser.NUMBER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NAMED() { return GetToken(Fortran90Parser.NAMED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NAME() { return GetToken(Fortran90Parser.NAME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ACCESS() { return GetToken(Fortran90Parser.ACCESS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEQUENTIAL() { return GetToken(Fortran90Parser.SEQUENTIAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DIRECT() { return GetToken(Fortran90Parser.DIRECT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FORM() { return GetToken(Fortran90Parser.FORM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FORMATTED() { return GetToken(Fortran90Parser.FORMATTED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNFORMATTED() { return GetToken(Fortran90Parser.UNFORMATTED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RECL() { return GetToken(Fortran90Parser.RECL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NEXTREC() { return GetToken(Fortran90Parser.NEXTREC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BLANK() { return GetToken(Fortran90Parser.BLANK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode POSITION() { return GetToken(Fortran90Parser.POSITION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ACTION() { return GetToken(Fortran90Parser.ACTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode READ() { return GetToken(Fortran90Parser.READ, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WRITE() { return GetToken(Fortran90Parser.WRITE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode READWRITE() { return GetToken(Fortran90Parser.READWRITE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DELIM() { return GetToken(Fortran90Parser.DELIM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PAD() { return GetToken(Fortran90Parser.PAD, 0); }
		public InquireSpecContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_inquireSpec; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortran90ParserListener typedListener = listener as IFortran90ParserListener;
			if (typedListener != null) typedListener.EnterInquireSpec(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortran90ParserListener typedListener = listener as IFortran90ParserListener;
			if (typedListener != null) typedListener.ExitInquireSpec(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFortran90ParserVisitor<TResult> typedVisitor = visitor as IFortran90ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInquireSpec(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InquireSpecContext inquireSpec() {
		InquireSpecContext _localctx = new InquireSpecContext(Context, State);
		EnterRule(_localctx, 532, RULE_inquireSpec);
		try {
			State = 2990;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case UNIT:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2915;
				Match(UNIT);
				State = 2916;
				Match(ASSIGN);
				State = 2917;
				unitIdentifier();
				}
				break;
			case FILE:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2918;
				Match(FILE);
				State = 2919;
				Match(ASSIGN);
				State = 2920;
				cExpression();
				}
				break;
			case ERR:
				EnterOuterAlt(_localctx, 3);
				{
				State = 2921;
				Match(ERR);
				State = 2922;
				Match(ASSIGN);
				State = 2923;
				lblRef();
				}
				break;
			case IOSTAT:
				EnterOuterAlt(_localctx, 4);
				{
				State = 2924;
				Match(IOSTAT);
				State = 2925;
				Match(ASSIGN);
				State = 2926;
				scalarVariable();
				}
				break;
			case EXIST:
				EnterOuterAlt(_localctx, 5);
				{
				State = 2927;
				Match(EXIST);
				State = 2928;
				Match(ASSIGN);
				State = 2929;
				scalarVariable();
				}
				break;
			case OPENED:
				EnterOuterAlt(_localctx, 6);
				{
				State = 2930;
				Match(OPENED);
				State = 2931;
				Match(ASSIGN);
				State = 2932;
				scalarVariable();
				}
				break;
			case NUMBER:
				EnterOuterAlt(_localctx, 7);
				{
				State = 2933;
				Match(NUMBER);
				State = 2934;
				Match(ASSIGN);
				State = 2935;
				scalarVariable();
				}
				break;
			case NAMED:
				EnterOuterAlt(_localctx, 8);
				{
				State = 2936;
				Match(NAMED);
				State = 2937;
				Match(ASSIGN);
				State = 2938;
				scalarVariable();
				}
				break;
			case NAME:
				EnterOuterAlt(_localctx, 9);
				{
				State = 2939;
				Match(NAME);
				State = 2940;
				Match(ASSIGN);
				State = 2941;
				scalarVariable();
				}
				break;
			case ACCESS:
				EnterOuterAlt(_localctx, 10);
				{
				State = 2942;
				Match(ACCESS);
				State = 2943;
				Match(ASSIGN);
				State = 2944;
				scalarVariable();
				}
				break;
			case SEQUENTIAL:
				EnterOuterAlt(_localctx, 11);
				{
				State = 2945;
				Match(SEQUENTIAL);
				State = 2946;
				Match(ASSIGN);
				State = 2947;
				scalarVariable();
				}
				break;
			case DIRECT:
				EnterOuterAlt(_localctx, 12);
				{
				State = 2948;
				Match(DIRECT);
				State = 2949;
				Match(ASSIGN);
				State = 2950;
				scalarVariable();
				}
				break;
			case FORM:
				EnterOuterAlt(_localctx, 13);
				{
				State = 2951;
				Match(FORM);
				State = 2952;
				Match(ASSIGN);
				State = 2953;
				scalarVariable();
				}
				break;
			case FORMATTED:
				EnterOuterAlt(_localctx, 14);
				{
				State = 2954;
				Match(FORMATTED);
				State = 2955;
				Match(ASSIGN);
				State = 2956;
				scalarVariable();
				}
				break;
			case UNFORMATTED:
				EnterOuterAlt(_localctx, 15);
				{
				State = 2957;
				Match(UNFORMATTED);
				State = 2958;
				Match(ASSIGN);
				State = 2959;
				scalarVariable();
				}
				break;
			case RECL:
				EnterOuterAlt(_localctx, 16);
				{
				State = 2960;
				Match(RECL);
				State = 2961;
				Match(ASSIGN);
				State = 2962;
				expression(0);
				}
				break;
			case NEXTREC:
				EnterOuterAlt(_localctx, 17);
				{
				State = 2963;
				Match(NEXTREC);
				State = 2964;
				Match(ASSIGN);
				State = 2965;
				scalarVariable();
				}
				break;
			case BLANK:
				EnterOuterAlt(_localctx, 18);
				{
				State = 2966;
				Match(BLANK);
				State = 2967;
				Match(ASSIGN);
				State = 2968;
				scalarVariable();
				}
				break;
			case POSITION:
				EnterOuterAlt(_localctx, 19);
				{
				State = 2969;
				Match(POSITION);
				State = 2970;
				Match(ASSIGN);
				State = 2971;
				scalarVariable();
				}
				break;
			case ACTION:
				EnterOuterAlt(_localctx, 20);
				{
				State = 2972;
				Match(ACTION);
				State = 2973;
				Match(ASSIGN);
				State = 2974;
				scalarVariable();
				}
				break;
			case READ:
				EnterOuterAlt(_localctx, 21);
				{
				State = 2975;
				Match(READ);
				State = 2976;
				Match(ASSIGN);
				State = 2977;
				scalarVariable();
				}
				break;
			case WRITE:
				EnterOuterAlt(_localctx, 22);
				{
				State = 2978;
				Match(WRITE);
				State = 2979;
				Match(ASSIGN);
				State = 2980;
				scalarVariable();
				}
				break;
			case READWRITE:
				EnterOuterAlt(_localctx, 23);
				{
				State = 2981;
				Match(READWRITE);
				State = 2982;
				Match(ASSIGN);
				State = 2983;
				scalarVariable();
				}
				break;
			case DELIM:
				EnterOuterAlt(_localctx, 24);
				{
				State = 2984;
				Match(DELIM);
				State = 2985;
				Match(ASSIGN);
				State = 2986;
				scalarVariable();
				}
				break;
			case PAD:
				EnterOuterAlt(_localctx, 25);
				{
				State = 2987;
				Match(PAD);
				State = 2988;
				Match(ASSIGN);
				State = 2989;
				scalarVariable();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssignedGotoStmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public VariableNameContext variableName() {
			return GetRuleContext<VariableNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GOTO() { return GetToken(Fortran90Parser.GOTO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GO() { return GetToken(Fortran90Parser.GO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TO() { return GetToken(Fortran90Parser.TO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(Fortran90Parser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public LblRefListContext lblRefList() {
			return GetRuleContext<LblRefListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(Fortran90Parser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public VariableCommaContext variableComma() {
			return GetRuleContext<VariableCommaContext>(0);
		}
		public AssignedGotoStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assignedGotoStmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortran90ParserListener typedListener = listener as IFortran90ParserListener;
			if (typedListener != null) typedListener.EnterAssignedGotoStmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortran90ParserListener typedListener = listener as IFortran90ParserListener;
			if (typedListener != null) typedListener.ExitAssignedGotoStmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFortran90ParserVisitor<TResult> typedVisitor = visitor as IFortran90ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssignedGotoStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AssignedGotoStmtContext assignedGotoStmt() {
		AssignedGotoStmtContext _localctx = new AssignedGotoStmtContext(Context, State);
		EnterRule(_localctx, 534, RULE_assignedGotoStmt);
		try {
			State = 3018;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,245,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2995;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case GOTO:
					{
					State = 2992;
					Match(GOTO);
					}
					break;
				case GO:
					{
					State = 2993;
					Match(GO);
					State = 2994;
					Match(TO);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 2997;
				variableName();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 3001;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case GOTO:
					{
					State = 2998;
					Match(GOTO);
					}
					break;
				case GO:
					{
					State = 2999;
					Match(GO);
					State = 3000;
					Match(TO);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 3003;
				variableName();
				State = 3004;
				Match(LPAREN);
				State = 3005;
				lblRefList();
				State = 3006;
				Match(RPAREN);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 3011;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case GOTO:
					{
					State = 3008;
					Match(GOTO);
					}
					break;
				case GO:
					{
					State = 3009;
					Match(GO);
					State = 3010;
					Match(TO);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 3013;
				variableComma();
				State = 3014;
				Match(LPAREN);
				State = 3015;
				lblRefList();
				State = 3016;
				Match(RPAREN);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariableCommaContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public VariableNameContext variableName() {
			return GetRuleContext<VariableNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA() { return GetToken(Fortran90Parser.COMMA, 0); }
		public VariableCommaContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variableComma; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortran90ParserListener typedListener = listener as IFortran90ParserListener;
			if (typedListener != null) typedListener.EnterVariableComma(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortran90ParserListener typedListener = listener as IFortran90ParserListener;
			if (typedListener != null) typedListener.ExitVariableComma(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFortran90ParserVisitor<TResult> typedVisitor = visitor as IFortran90ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariableComma(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VariableCommaContext variableComma() {
		VariableCommaContext _localctx = new VariableCommaContext(Context, State);
		EnterRule(_localctx, 536, RULE_variableComma);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3020;
			variableName();
			State = 3021;
			Match(COMMA);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GotoStmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public LblRefContext lblRef() {
			return GetRuleContext<LblRefContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GOTO() { return GetToken(Fortran90Parser.GOTO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GO() { return GetToken(Fortran90Parser.GO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TO() { return GetToken(Fortran90Parser.TO, 0); }
		public GotoStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_gotoStmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortran90ParserListener typedListener = listener as IFortran90ParserListener;
			if (typedListener != null) typedListener.EnterGotoStmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortran90ParserListener typedListener = listener as IFortran90ParserListener;
			if (typedListener != null) typedListener.ExitGotoStmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFortran90ParserVisitor<TResult> typedVisitor = visitor as IFortran90ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGotoStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public GotoStmtContext gotoStmt() {
		GotoStmtContext _localctx = new GotoStmtContext(Context, State);
		EnterRule(_localctx, 538, RULE_gotoStmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3026;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case GOTO:
				{
				State = 3023;
				Match(GOTO);
				}
				break;
			case GO:
				{
				State = 3024;
				Match(GO);
				State = 3025;
				Match(TO);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 3028;
			lblRef();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ComputedGotoStmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GOTO() { return GetToken(Fortran90Parser.GOTO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(Fortran90Parser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public LblRefListContext lblRefList() {
			return GetRuleContext<LblRefListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(Fortran90Parser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA() { return GetToken(Fortran90Parser.COMMA, 0); }
		public ComputedGotoStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_computedGotoStmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortran90ParserListener typedListener = listener as IFortran90ParserListener;
			if (typedListener != null) typedListener.EnterComputedGotoStmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortran90ParserListener typedListener = listener as IFortran90ParserListener;
			if (typedListener != null) typedListener.ExitComputedGotoStmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFortran90ParserVisitor<TResult> typedVisitor = visitor as IFortran90ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitComputedGotoStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ComputedGotoStmtContext computedGotoStmt() {
		ComputedGotoStmtContext _localctx = new ComputedGotoStmtContext(Context, State);
		EnterRule(_localctx, 540, RULE_computedGotoStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3030;
			Match(GOTO);
			State = 3031;
			Match(LPAREN);
			State = 3032;
			lblRefList();
			State = 3033;
			Match(RPAREN);
			State = 3035;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==COMMA) {
				{
				State = 3034;
				Match(COMMA);
				}
			}

			State = 3037;
			expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LblRefListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public LblRefContext[] lblRef() {
			return GetRuleContexts<LblRefContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public LblRefContext lblRef(int i) {
			return GetRuleContext<LblRefContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(Fortran90Parser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(Fortran90Parser.COMMA, i);
		}
		public LblRefListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lblRefList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortran90ParserListener typedListener = listener as IFortran90ParserListener;
			if (typedListener != null) typedListener.EnterLblRefList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortran90ParserListener typedListener = listener as IFortran90ParserListener;
			if (typedListener != null) typedListener.ExitLblRefList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFortran90ParserVisitor<TResult> typedVisitor = visitor as IFortran90ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLblRefList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LblRefListContext lblRefList() {
		LblRefListContext _localctx = new LblRefListContext(Context, State);
		EnterRule(_localctx, 542, RULE_lblRefList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3039;
			lblRef();
			State = 3044;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 3040;
				Match(COMMA);
				State = 3041;
				lblRef();
				}
				}
				State = 3046;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EndfileStmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public UnitIdentifierContext unitIdentifier() {
			return GetRuleContext<UnitIdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ENDFILE() { return GetToken(Fortran90Parser.ENDFILE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode END() { return GetToken(Fortran90Parser.END, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FILE() { return GetToken(Fortran90Parser.FILE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(Fortran90Parser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public PositionSpecListContext positionSpecList() {
			return GetRuleContext<PositionSpecListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(Fortran90Parser.RPAREN, 0); }
		public EndfileStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_endfileStmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortran90ParserListener typedListener = listener as IFortran90ParserListener;
			if (typedListener != null) typedListener.EnterEndfileStmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortran90ParserListener typedListener = listener as IFortran90ParserListener;
			if (typedListener != null) typedListener.ExitEndfileStmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFortran90ParserVisitor<TResult> typedVisitor = visitor as IFortran90ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEndfileStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EndfileStmtContext endfileStmt() {
		EndfileStmtContext _localctx = new EndfileStmtContext(Context, State);
		EnterRule(_localctx, 544, RULE_endfileStmt);
		try {
			State = 3062;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,251,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				{
				State = 3050;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case ENDFILE:
					{
					State = 3047;
					Match(ENDFILE);
					}
					break;
				case END:
					{
					State = 3048;
					Match(END);
					State = 3049;
					Match(FILE);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 3052;
				unitIdentifier();
				}
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				{
				State = 3056;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case ENDFILE:
					{
					State = 3053;
					Match(ENDFILE);
					}
					break;
				case END:
					{
					State = 3054;
					Match(END);
					State = 3055;
					Match(FILE);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 3058;
				Match(LPAREN);
				State = 3059;
				positionSpecList();
				State = 3060;
				Match(RPAREN);
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ContinueStmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONTINUE() { return GetToken(Fortran90Parser.CONTINUE, 0); }
		public ContinueStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_continueStmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortran90ParserListener typedListener = listener as IFortran90ParserListener;
			if (typedListener != null) typedListener.EnterContinueStmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortran90ParserListener typedListener = listener as IFortran90ParserListener;
			if (typedListener != null) typedListener.ExitContinueStmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFortran90ParserVisitor<TResult> typedVisitor = visitor as IFortran90ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitContinueStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ContinueStmtContext continueStmt() {
		ContinueStmtContext _localctx = new ContinueStmtContext(Context, State);
		EnterRule(_localctx, 546, RULE_continueStmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3064;
			Match(CONTINUE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CloseStmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE() { return GetToken(Fortran90Parser.CLOSE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(Fortran90Parser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public CloseSpecListContext closeSpecList() {
			return GetRuleContext<CloseSpecListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(Fortran90Parser.RPAREN, 0); }
		public CloseStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_closeStmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortran90ParserListener typedListener = listener as IFortran90ParserListener;
			if (typedListener != null) typedListener.EnterCloseStmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortran90ParserListener typedListener = listener as IFortran90ParserListener;
			if (typedListener != null) typedListener.ExitCloseStmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFortran90ParserVisitor<TResult> typedVisitor = visitor as IFortran90ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCloseStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CloseStmtContext closeStmt() {
		CloseStmtContext _localctx = new CloseStmtContext(Context, State);
		EnterRule(_localctx, 548, RULE_closeStmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3066;
			Match(CLOSE);
			State = 3067;
			Match(LPAREN);
			State = 3068;
			closeSpecList();
			State = 3069;
			Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CloseSpecListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public UnitIdentifierCommaContext unitIdentifierComma() {
			return GetRuleContext<UnitIdentifierCommaContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CloseSpecContext[] closeSpec() {
			return GetRuleContexts<CloseSpecContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public CloseSpecContext closeSpec(int i) {
			return GetRuleContext<CloseSpecContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(Fortran90Parser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(Fortran90Parser.COMMA, i);
		}
		public CloseSpecListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_closeSpecList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortran90ParserListener typedListener = listener as IFortran90ParserListener;
			if (typedListener != null) typedListener.EnterCloseSpecList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortran90ParserListener typedListener = listener as IFortran90ParserListener;
			if (typedListener != null) typedListener.ExitCloseSpecList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFortran90ParserVisitor<TResult> typedVisitor = visitor as IFortran90ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCloseSpecList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CloseSpecListContext closeSpecList() {
		CloseSpecListContext _localctx = new CloseSpecListContext(Context, State);
		EnterRule(_localctx, 550, RULE_closeSpecList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3072;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==REAL || ((((_la - 84)) & ~0x3f) == 0 && ((1L << (_la - 84)) & 422762220879873L) != 0) || ((((_la - 177)) & ~0x3f) == 0 && ((1L << (_la - 177)) & 35329L) != 0)) {
				{
				State = 3071;
				unitIdentifierComma();
				}
			}

			State = 3075;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (((((_la - 77)) & ~0x3f) == 0 && ((1L << (_la - 77)) & 2098241L) != 0)) {
				{
				State = 3074;
				closeSpec();
				}
			}

			State = 3081;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 3077;
				Match(COMMA);
				State = 3078;
				closeSpec();
				}
				}
				State = 3083;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CloseSpecContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNIT() { return GetToken(Fortran90Parser.UNIT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGN() { return GetToken(Fortran90Parser.ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UnitIdentifierContext unitIdentifier() {
			return GetRuleContext<UnitIdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ERR() { return GetToken(Fortran90Parser.ERR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public LblRefContext lblRef() {
			return GetRuleContext<LblRefContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STATUS() { return GetToken(Fortran90Parser.STATUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public CExpressionContext cExpression() {
			return GetRuleContext<CExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IOSTAT() { return GetToken(Fortran90Parser.IOSTAT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ScalarVariableContext scalarVariable() {
			return GetRuleContext<ScalarVariableContext>(0);
		}
		public CloseSpecContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_closeSpec; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortran90ParserListener typedListener = listener as IFortran90ParserListener;
			if (typedListener != null) typedListener.EnterCloseSpec(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortran90ParserListener typedListener = listener as IFortran90ParserListener;
			if (typedListener != null) typedListener.ExitCloseSpec(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFortran90ParserVisitor<TResult> typedVisitor = visitor as IFortran90ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCloseSpec(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CloseSpecContext closeSpec() {
		CloseSpecContext _localctx = new CloseSpecContext(Context, State);
		EnterRule(_localctx, 552, RULE_closeSpec);
		try {
			State = 3095;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case UNIT:
				EnterOuterAlt(_localctx, 1);
				{
				State = 3084;
				Match(UNIT);
				State = 3085;
				Match(ASSIGN);
				State = 3086;
				unitIdentifier();
				}
				break;
			case ERR:
				EnterOuterAlt(_localctx, 2);
				{
				State = 3087;
				Match(ERR);
				State = 3088;
				Match(ASSIGN);
				State = 3089;
				lblRef();
				}
				break;
			case STATUS:
				EnterOuterAlt(_localctx, 3);
				{
				State = 3090;
				Match(STATUS);
				State = 3091;
				Match(ASSIGN);
				State = 3092;
				cExpression();
				}
				break;
			case IOSTAT:
				EnterOuterAlt(_localctx, 4);
				{
				State = 3093;
				Match(IOSTAT);
				State = 3094;
				scalarVariable();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public CPrimaryContext cPrimary() {
			return GetRuleContext<CPrimaryContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CPrimaryConcatOpContext[] cPrimaryConcatOp() {
			return GetRuleContexts<CPrimaryConcatOpContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public CPrimaryConcatOpContext cPrimaryConcatOp(int i) {
			return GetRuleContext<CPrimaryConcatOpContext>(i);
		}
		public CExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_cExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortran90ParserListener typedListener = listener as IFortran90ParserListener;
			if (typedListener != null) typedListener.EnterCExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortran90ParserListener typedListener = listener as IFortran90ParserListener;
			if (typedListener != null) typedListener.ExitCExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFortran90ParserVisitor<TResult> typedVisitor = visitor as IFortran90ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CExpressionContext cExpression() {
		CExpressionContext _localctx = new CExpressionContext(Context, State);
		EnterRule(_localctx, 554, RULE_cExpression);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 3097;
			cPrimary();
			State = 3101;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,256,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 3098;
					cPrimaryConcatOp();
					}
					} 
				}
				State = 3103;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,256,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CPrimaryContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public COperandContext cOperand() {
			return GetRuleContext<COperandContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(Fortran90Parser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public CExpressionContext cExpression() {
			return GetRuleContext<CExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(Fortran90Parser.RPAREN, 0); }
		public CPrimaryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_cPrimary; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortran90ParserListener typedListener = listener as IFortran90ParserListener;
			if (typedListener != null) typedListener.EnterCPrimary(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortran90ParserListener typedListener = listener as IFortran90ParserListener;
			if (typedListener != null) typedListener.ExitCPrimary(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFortran90ParserVisitor<TResult> typedVisitor = visitor as IFortran90ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCPrimary(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CPrimaryContext cPrimary() {
		CPrimaryContext _localctx = new CPrimaryContext(Context, State);
		EnterRule(_localctx, 556, RULE_cPrimary);
		try {
			State = 3109;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case REAL:
			case SIZE:
			case SCON:
			case NAME:
				EnterOuterAlt(_localctx, 1);
				{
				State = 3104;
				cOperand();
				}
				break;
			case LPAREN:
				EnterOuterAlt(_localctx, 2);
				{
				{
				State = 3105;
				Match(LPAREN);
				State = 3106;
				cExpression();
				State = 3107;
				Match(RPAREN);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class COperandContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SCON() { return GetToken(Fortran90Parser.SCON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NameDataRefContext nameDataRef() {
			return GetRuleContext<NameDataRefContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionReferenceContext functionReference() {
			return GetRuleContext<FunctionReferenceContext>(0);
		}
		public COperandContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_cOperand; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortran90ParserListener typedListener = listener as IFortran90ParserListener;
			if (typedListener != null) typedListener.EnterCOperand(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortran90ParserListener typedListener = listener as IFortran90ParserListener;
			if (typedListener != null) typedListener.ExitCOperand(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFortran90ParserVisitor<TResult> typedVisitor = visitor as IFortran90ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCOperand(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public COperandContext cOperand() {
		COperandContext _localctx = new COperandContext(Context, State);
		EnterRule(_localctx, 558, RULE_cOperand);
		try {
			State = 3114;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,258,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 3111;
				Match(SCON);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 3112;
				nameDataRef();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 3113;
				functionReference();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CPrimaryConcatOpContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public CPrimaryContext cPrimary() {
			return GetRuleContext<CPrimaryContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] DIV() { return GetTokens(Fortran90Parser.DIV); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DIV(int i) {
			return GetToken(Fortran90Parser.DIV, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SPOFF() { return GetToken(Fortran90Parser.SPOFF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SPON() { return GetToken(Fortran90Parser.SPON, 0); }
		public CPrimaryConcatOpContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_cPrimaryConcatOp; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortran90ParserListener typedListener = listener as IFortran90ParserListener;
			if (typedListener != null) typedListener.EnterCPrimaryConcatOp(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortran90ParserListener typedListener = listener as IFortran90ParserListener;
			if (typedListener != null) typedListener.ExitCPrimaryConcatOp(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFortran90ParserVisitor<TResult> typedVisitor = visitor as IFortran90ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCPrimaryConcatOp(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CPrimaryConcatOpContext cPrimaryConcatOp() {
		CPrimaryConcatOpContext _localctx = new CPrimaryConcatOpContext(Context, State);
		EnterRule(_localctx, 560, RULE_cPrimaryConcatOp);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3116;
			cPrimary();
			State = 3117;
			Match(DIV);
			State = 3118;
			Match(SPOFF);
			State = 3119;
			Match(DIV);
			State = 3120;
			Match(SPON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CallStmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CALL() { return GetToken(Fortran90Parser.CALL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SubroutineNameUseContext subroutineNameUse() {
			return GetRuleContext<SubroutineNameUseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(Fortran90Parser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SubroutineArgListContext subroutineArgList() {
			return GetRuleContext<SubroutineArgListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(Fortran90Parser.RPAREN, 0); }
		public CallStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_callStmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortran90ParserListener typedListener = listener as IFortran90ParserListener;
			if (typedListener != null) typedListener.EnterCallStmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortran90ParserListener typedListener = listener as IFortran90ParserListener;
			if (typedListener != null) typedListener.ExitCallStmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFortran90ParserVisitor<TResult> typedVisitor = visitor as IFortran90ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCallStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CallStmtContext callStmt() {
		CallStmtContext _localctx = new CallStmtContext(Context, State);
		EnterRule(_localctx, 562, RULE_callStmt);
		try {
			State = 3130;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,259,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 3122;
				Match(CALL);
				State = 3123;
				subroutineNameUse();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 3124;
				Match(CALL);
				State = 3125;
				subroutineNameUse();
				State = 3126;
				Match(LPAREN);
				State = 3127;
				subroutineArgList();
				State = 3128;
				Match(RPAREN);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SubroutineNameUseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NAME() { return GetToken(Fortran90Parser.NAME, 0); }
		public SubroutineNameUseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_subroutineNameUse; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortran90ParserListener typedListener = listener as IFortran90ParserListener;
			if (typedListener != null) typedListener.EnterSubroutineNameUse(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortran90ParserListener typedListener = listener as IFortran90ParserListener;
			if (typedListener != null) typedListener.ExitSubroutineNameUse(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFortran90ParserVisitor<TResult> typedVisitor = visitor as IFortran90ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSubroutineNameUse(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SubroutineNameUseContext subroutineNameUse() {
		SubroutineNameUseContext _localctx = new SubroutineNameUseContext(Context, State);
		EnterRule(_localctx, 564, RULE_subroutineNameUse);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3132;
			Match(NAME);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SubroutineArgListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SubroutineArgContext[] subroutineArg() {
			return GetRuleContexts<SubroutineArgContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SubroutineArgContext subroutineArg(int i) {
			return GetRuleContext<SubroutineArgContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(Fortran90Parser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(Fortran90Parser.COMMA, i);
		}
		public SubroutineArgListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_subroutineArgList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortran90ParserListener typedListener = listener as IFortran90ParserListener;
			if (typedListener != null) typedListener.EnterSubroutineArgList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortran90ParserListener typedListener = listener as IFortran90ParserListener;
			if (typedListener != null) typedListener.ExitSubroutineArgList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFortran90ParserVisitor<TResult> typedVisitor = visitor as IFortran90ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSubroutineArgList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SubroutineArgListContext subroutineArgList() {
		SubroutineArgListContext _localctx = new SubroutineArgListContext(Context, State);
		EnterRule(_localctx, 566, RULE_subroutineArgList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3135;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==DOP || _la==REAL || ((((_la - 84)) & ~0x3f) == 0 && ((1L << (_la - 84)) & 4926361848250369L) != 0) || ((((_la - 149)) & ~0x3f) == 0 && ((1L << (_la - 149)) & 9484097290307L) != 0)) {
				{
				State = 3134;
				subroutineArg();
				}
			}

			State = 3141;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 3137;
				Match(COMMA);
				State = 3138;
				subroutineArg();
				}
				}
				State = 3143;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SubroutineArgContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HOLLERITH() { return GetToken(Fortran90Parser.HOLLERITH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STAR() { return GetToken(Fortran90Parser.STAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public LblRefContext lblRef() {
			return GetRuleContext<LblRefContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NAME() { return GetToken(Fortran90Parser.NAME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGN() { return GetToken(Fortran90Parser.ASSIGN, 0); }
		public SubroutineArgContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_subroutineArg; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortran90ParserListener typedListener = listener as IFortran90ParserListener;
			if (typedListener != null) typedListener.EnterSubroutineArg(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortran90ParserListener typedListener = listener as IFortran90ParserListener;
			if (typedListener != null) typedListener.ExitSubroutineArg(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFortran90ParserVisitor<TResult> typedVisitor = visitor as IFortran90ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSubroutineArg(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SubroutineArgContext subroutineArg() {
		SubroutineArgContext _localctx = new SubroutineArgContext(Context, State);
		EnterRule(_localctx, 568, RULE_subroutineArg);
		try {
			State = 3158;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,262,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 3144;
				expression(0);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 3145;
				Match(HOLLERITH);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 3146;
				Match(STAR);
				State = 3147;
				lblRef();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 3148;
				Match(NAME);
				State = 3149;
				Match(ASSIGN);
				State = 3150;
				expression(0);
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 3151;
				Match(NAME);
				State = 3152;
				Match(ASSIGN);
				State = 3153;
				Match(HOLLERITH);
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 3154;
				Match(NAME);
				State = 3155;
				Match(ASSIGN);
				State = 3156;
				Match(STAR);
				State = 3157;
				lblRef();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArithmeticIfStmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF() { return GetToken(Fortran90Parser.IF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(Fortran90Parser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(Fortran90Parser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public LblRefContext[] lblRef() {
			return GetRuleContexts<LblRefContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public LblRefContext lblRef(int i) {
			return GetRuleContext<LblRefContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(Fortran90Parser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(Fortran90Parser.COMMA, i);
		}
		public ArithmeticIfStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arithmeticIfStmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortran90ParserListener typedListener = listener as IFortran90ParserListener;
			if (typedListener != null) typedListener.EnterArithmeticIfStmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortran90ParserListener typedListener = listener as IFortran90ParserListener;
			if (typedListener != null) typedListener.ExitArithmeticIfStmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFortran90ParserVisitor<TResult> typedVisitor = visitor as IFortran90ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArithmeticIfStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArithmeticIfStmtContext arithmeticIfStmt() {
		ArithmeticIfStmtContext _localctx = new ArithmeticIfStmtContext(Context, State);
		EnterRule(_localctx, 570, RULE_arithmeticIfStmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3160;
			Match(IF);
			State = 3161;
			Match(LPAREN);
			State = 3162;
			expression(0);
			State = 3163;
			Match(RPAREN);
			State = 3164;
			lblRef();
			State = 3165;
			Match(COMMA);
			State = 3166;
			lblRef();
			State = 3167;
			Match(COMMA);
			State = 3168;
			lblRef();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LblRefContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public LabelContext label() {
			return GetRuleContext<LabelContext>(0);
		}
		public LblRefContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lblRef; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortran90ParserListener typedListener = listener as IFortran90ParserListener;
			if (typedListener != null) typedListener.EnterLblRef(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortran90ParserListener typedListener = listener as IFortran90ParserListener;
			if (typedListener != null) typedListener.ExitLblRef(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFortran90ParserVisitor<TResult> typedVisitor = visitor as IFortran90ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLblRef(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LblRefContext lblRef() {
		LblRefContext _localctx = new LblRefContext(Context, State);
		EnterRule(_localctx, 572, RULE_lblRef);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3170;
			label();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LabelContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ICON() { return GetToken(Fortran90Parser.ICON, 0); }
		public LabelContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_label; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortran90ParserListener typedListener = listener as IFortran90ParserListener;
			if (typedListener != null) typedListener.EnterLabel(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortran90ParserListener typedListener = listener as IFortran90ParserListener;
			if (typedListener != null) typedListener.ExitLabel(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFortran90ParserVisitor<TResult> typedVisitor = visitor as IFortran90ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLabel(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LabelContext label() {
		LabelContext _localctx = new LabelContext(Context, State);
		EnterRule(_localctx, 574, RULE_label);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3172;
			Match(ICON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssignmentStmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NAME() { return GetToken(Fortran90Parser.NAME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGN() { return GetToken(Fortran90Parser.ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LabelContext label() {
			return GetRuleContext<LabelContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SFExprListRefContext sFExprListRef() {
			return GetRuleContext<SFExprListRefContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SubstringRangeContext substringRange() {
			return GetRuleContext<SubstringRangeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PCT() { return GetToken(Fortran90Parser.PCT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NameDataRefContext nameDataRef() {
			return GetRuleContext<NameDataRefContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(Fortran90Parser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SFDummyArgNameListContext sFDummyArgNameList() {
			return GetRuleContext<SFDummyArgNameListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(Fortran90Parser.RPAREN, 0); }
		public AssignmentStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assignmentStmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortran90ParserListener typedListener = listener as IFortran90ParserListener;
			if (typedListener != null) typedListener.EnterAssignmentStmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortran90ParserListener typedListener = listener as IFortran90ParserListener;
			if (typedListener != null) typedListener.ExitAssignmentStmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFortran90ParserVisitor<TResult> typedVisitor = visitor as IFortran90ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssignmentStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AssignmentStmtContext assignmentStmt() {
		AssignmentStmtContext _localctx = new AssignmentStmtContext(Context, State);
		EnterRule(_localctx, 576, RULE_assignmentStmt);
		int _la;
		try {
			State = 3204;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,267,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 3175;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==ICON) {
					{
					State = 3174;
					label();
					}
				}

				State = 3177;
				Match(NAME);
				State = 3179;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,264,Context) ) {
				case 1:
					{
					State = 3178;
					sFExprListRef();
					}
					break;
				}
				State = 3182;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==LPAREN) {
					{
					State = 3181;
					substringRange();
					}
				}

				State = 3184;
				Match(ASSIGN);
				State = 3185;
				expression(0);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 3186;
				Match(NAME);
				State = 3188;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==LPAREN) {
					{
					State = 3187;
					sFExprListRef();
					}
				}

				State = 3190;
				Match(PCT);
				State = 3191;
				nameDataRef();
				State = 3192;
				Match(ASSIGN);
				State = 3193;
				expression(0);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 3195;
				Match(NAME);
				State = 3196;
				Match(LPAREN);
				State = 3197;
				sFDummyArgNameList();
				State = 3198;
				Match(RPAREN);
				State = 3199;
				Match(PCT);
				State = 3200;
				nameDataRef();
				State = 3201;
				Match(ASSIGN);
				State = 3202;
				expression(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SFExprListRefContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(Fortran90Parser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SFExprListContext sFExprList() {
			return GetRuleContext<SFExprListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(Fortran90Parser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public CommaSectionSubscriptContext[] commaSectionSubscript() {
			return GetRuleContexts<CommaSectionSubscriptContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public CommaSectionSubscriptContext commaSectionSubscript(int i) {
			return GetRuleContext<CommaSectionSubscriptContext>(i);
		}
		public SFExprListRefContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sFExprListRef; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortran90ParserListener typedListener = listener as IFortran90ParserListener;
			if (typedListener != null) typedListener.EnterSFExprListRef(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortran90ParserListener typedListener = listener as IFortran90ParserListener;
			if (typedListener != null) typedListener.ExitSFExprListRef(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFortran90ParserVisitor<TResult> typedVisitor = visitor as IFortran90ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSFExprListRef(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SFExprListRefContext sFExprListRef() {
		SFExprListRefContext _localctx = new SFExprListRefContext(Context, State);
		EnterRule(_localctx, 578, RULE_sFExprListRef);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3206;
			Match(LPAREN);
			State = 3207;
			sFExprList();
			State = 3211;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 3208;
				commaSectionSubscript();
				}
				}
				State = 3213;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 3214;
			Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SFExprListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COLON() { return GetTokens(Fortran90Parser.COLON); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON(int i) {
			return GetToken(Fortran90Parser.COLON, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOUBLECOLON() { return GetToken(Fortran90Parser.DOUBLECOLON, 0); }
		public SFExprListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sFExprList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortran90ParserListener typedListener = listener as IFortran90ParserListener;
			if (typedListener != null) typedListener.EnterSFExprList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortran90ParserListener typedListener = listener as IFortran90ParserListener;
			if (typedListener != null) typedListener.ExitSFExprList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFortran90ParserVisitor<TResult> typedVisitor = visitor as IFortran90ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSFExprList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SFExprListContext sFExprList() {
		SFExprListContext _localctx = new SFExprListContext(Context, State);
		EnterRule(_localctx, 580, RULE_sFExprList);
		int _la;
		try {
			State = 3240;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,274,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 3216;
				expression(0);
				State = 3218;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==COLON) {
					{
					State = 3217;
					Match(COLON);
					}
				}

				State = 3221;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==DOP || _la==REAL || ((((_la - 84)) & ~0x3f) == 0 && ((1L << (_la - 84)) & 4926361848250369L) != 0) || ((((_la - 149)) & ~0x3f) == 0 && ((1L << (_la - 149)) & 688004268035L) != 0)) {
					{
					State = 3220;
					expression(0);
					}
				}

				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 3223;
				Match(COLON);
				State = 3225;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==DOP || _la==REAL || ((((_la - 84)) & ~0x3f) == 0 && ((1L << (_la - 84)) & 4926361848250369L) != 0) || ((((_la - 149)) & ~0x3f) == 0 && ((1L << (_la - 149)) & 688004268035L) != 0)) {
					{
					State = 3224;
					expression(0);
					}
				}

				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 3228;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==DOP || _la==REAL || ((((_la - 84)) & ~0x3f) == 0 && ((1L << (_la - 84)) & 4926361848250369L) != 0) || ((((_la - 149)) & ~0x3f) == 0 && ((1L << (_la - 149)) & 688004268035L) != 0)) {
					{
					State = 3227;
					expression(0);
					}
				}

				State = 3230;
				Match(COLON);
				State = 3231;
				expression(0);
				State = 3232;
				Match(COLON);
				State = 3233;
				expression(0);
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 3236;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==DOP || _la==REAL || ((((_la - 84)) & ~0x3f) == 0 && ((1L << (_la - 84)) & 4926361848250369L) != 0) || ((((_la - 149)) & ~0x3f) == 0 && ((1L << (_la - 149)) & 688004268035L) != 0)) {
					{
					State = 3235;
					expression(0);
					}
				}

				State = 3238;
				Match(DOUBLECOLON);
				State = 3239;
				expression(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CommaSectionSubscriptContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA() { return GetToken(Fortran90Parser.COMMA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SectionSubscriptContext sectionSubscript() {
			return GetRuleContext<SectionSubscriptContext>(0);
		}
		public CommaSectionSubscriptContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_commaSectionSubscript; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortran90ParserListener typedListener = listener as IFortran90ParserListener;
			if (typedListener != null) typedListener.EnterCommaSectionSubscript(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortran90ParserListener typedListener = listener as IFortran90ParserListener;
			if (typedListener != null) typedListener.ExitCommaSectionSubscript(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFortran90ParserVisitor<TResult> typedVisitor = visitor as IFortran90ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCommaSectionSubscript(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CommaSectionSubscriptContext commaSectionSubscript() {
		CommaSectionSubscriptContext _localctx = new CommaSectionSubscriptContext(Context, State);
		EnterRule(_localctx, 582, RULE_commaSectionSubscript);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3242;
			Match(COMMA);
			State = 3243;
			sectionSubscript();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssignStmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGNSTMT() { return GetToken(Fortran90Parser.ASSIGNSTMT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public LblRefContext lblRef() {
			return GetRuleContext<LblRefContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TO() { return GetToken(Fortran90Parser.TO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public VariableNameContext variableName() {
			return GetRuleContext<VariableNameContext>(0);
		}
		public AssignStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assignStmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortran90ParserListener typedListener = listener as IFortran90ParserListener;
			if (typedListener != null) typedListener.EnterAssignStmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortran90ParserListener typedListener = listener as IFortran90ParserListener;
			if (typedListener != null) typedListener.ExitAssignStmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFortran90ParserVisitor<TResult> typedVisitor = visitor as IFortran90ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssignStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AssignStmtContext assignStmt() {
		AssignStmtContext _localctx = new AssignStmtContext(Context, State);
		EnterRule(_localctx, 584, RULE_assignStmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3245;
			Match(ASSIGNSTMT);
			State = 3246;
			lblRef();
			State = 3247;
			Match(TO);
			State = 3248;
			variableName();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BackspaceStmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BACKSPACE() { return GetToken(Fortran90Parser.BACKSPACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UnitIdentifierContext unitIdentifier() {
			return GetRuleContext<UnitIdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(Fortran90Parser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public PositionSpecListContext positionSpecList() {
			return GetRuleContext<PositionSpecListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(Fortran90Parser.RPAREN, 0); }
		public BackspaceStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_backspaceStmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortran90ParserListener typedListener = listener as IFortran90ParserListener;
			if (typedListener != null) typedListener.EnterBackspaceStmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortran90ParserListener typedListener = listener as IFortran90ParserListener;
			if (typedListener != null) typedListener.ExitBackspaceStmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFortran90ParserVisitor<TResult> typedVisitor = visitor as IFortran90ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBackspaceStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BackspaceStmtContext backspaceStmt() {
		BackspaceStmtContext _localctx = new BackspaceStmtContext(Context, State);
		EnterRule(_localctx, 586, RULE_backspaceStmt);
		try {
			State = 3257;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,275,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 3250;
				Match(BACKSPACE);
				State = 3251;
				unitIdentifier();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 3252;
				Match(BACKSPACE);
				State = 3253;
				Match(LPAREN);
				State = 3254;
				positionSpecList();
				State = 3255;
				Match(RPAREN);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UnitIdentifierContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public UFExprContext uFExpr() {
			return GetRuleContext<UFExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STAR() { return GetToken(Fortran90Parser.STAR, 0); }
		public UnitIdentifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unitIdentifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortran90ParserListener typedListener = listener as IFortran90ParserListener;
			if (typedListener != null) typedListener.EnterUnitIdentifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortran90ParserListener typedListener = listener as IFortran90ParserListener;
			if (typedListener != null) typedListener.ExitUnitIdentifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFortran90ParserVisitor<TResult> typedVisitor = visitor as IFortran90ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnitIdentifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UnitIdentifierContext unitIdentifier() {
		UnitIdentifierContext _localctx = new UnitIdentifierContext(Context, State);
		EnterRule(_localctx, 588, RULE_unitIdentifier);
		try {
			State = 3261;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case REAL:
			case SIZE:
			case LPAREN:
			case MINUS:
			case PLUS:
			case SCON:
			case ICON:
			case NAME:
				EnterOuterAlt(_localctx, 1);
				{
				State = 3259;
				uFExpr(0);
				}
				break;
			case STAR:
				EnterOuterAlt(_localctx, 2);
				{
				State = 3260;
				Match(STAR);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PositionSpecListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public UnitIdentifierCommaContext unitIdentifierComma() {
			return GetRuleContext<UnitIdentifierCommaContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PositionSpecContext[] positionSpec() {
			return GetRuleContexts<PositionSpecContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public PositionSpecContext positionSpec(int i) {
			return GetRuleContext<PositionSpecContext>(i);
		}
		public PositionSpecListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_positionSpecList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortran90ParserListener typedListener = listener as IFortran90ParserListener;
			if (typedListener != null) typedListener.EnterPositionSpecList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortran90ParserListener typedListener = listener as IFortran90ParserListener;
			if (typedListener != null) typedListener.ExitPositionSpecList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFortran90ParserVisitor<TResult> typedVisitor = visitor as IFortran90ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPositionSpecList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PositionSpecListContext positionSpecList() {
		PositionSpecListContext _localctx = new PositionSpecListContext(Context, State);
		EnterRule(_localctx, 590, RULE_positionSpecList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3264;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==REAL || ((((_la - 84)) & ~0x3f) == 0 && ((1L << (_la - 84)) & 422762220879873L) != 0) || ((((_la - 177)) & ~0x3f) == 0 && ((1L << (_la - 177)) & 35329L) != 0)) {
				{
				State = 3263;
				unitIdentifierComma();
				}
			}

			State = 3267;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 3266;
				positionSpec();
				}
				}
				State = 3269;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( ((((_la - 77)) & ~0x3f) == 0 && ((1L << (_la - 77)) & 1089L) != 0) );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UnitIdentifierCommaContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public UnitIdentifierContext unitIdentifier() {
			return GetRuleContext<UnitIdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA() { return GetToken(Fortran90Parser.COMMA, 0); }
		public UnitIdentifierCommaContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unitIdentifierComma; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortran90ParserListener typedListener = listener as IFortran90ParserListener;
			if (typedListener != null) typedListener.EnterUnitIdentifierComma(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortran90ParserListener typedListener = listener as IFortran90ParserListener;
			if (typedListener != null) typedListener.ExitUnitIdentifierComma(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFortran90ParserVisitor<TResult> typedVisitor = visitor as IFortran90ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnitIdentifierComma(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UnitIdentifierCommaContext unitIdentifierComma() {
		UnitIdentifierCommaContext _localctx = new UnitIdentifierCommaContext(Context, State);
		EnterRule(_localctx, 592, RULE_unitIdentifierComma);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3271;
			unitIdentifier();
			State = 3273;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,279,Context) ) {
			case 1:
				{
				State = 3272;
				Match(COMMA);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PositionSpecContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNIT() { return GetToken(Fortran90Parser.UNIT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGN() { return GetToken(Fortran90Parser.ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UnitIdentifierContext unitIdentifier() {
			return GetRuleContext<UnitIdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ERR() { return GetToken(Fortran90Parser.ERR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public LblRefContext lblRef() {
			return GetRuleContext<LblRefContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IOSTAT() { return GetToken(Fortran90Parser.IOSTAT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ScalarVariableContext scalarVariable() {
			return GetRuleContext<ScalarVariableContext>(0);
		}
		public PositionSpecContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_positionSpec; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortran90ParserListener typedListener = listener as IFortran90ParserListener;
			if (typedListener != null) typedListener.EnterPositionSpec(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortran90ParserListener typedListener = listener as IFortran90ParserListener;
			if (typedListener != null) typedListener.ExitPositionSpec(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFortran90ParserVisitor<TResult> typedVisitor = visitor as IFortran90ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPositionSpec(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PositionSpecContext positionSpec() {
		PositionSpecContext _localctx = new PositionSpecContext(Context, State);
		EnterRule(_localctx, 594, RULE_positionSpec);
		try {
			State = 3284;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case UNIT:
				EnterOuterAlt(_localctx, 1);
				{
				State = 3275;
				Match(UNIT);
				State = 3276;
				Match(ASSIGN);
				State = 3277;
				unitIdentifier();
				}
				break;
			case ERR:
				EnterOuterAlt(_localctx, 2);
				{
				State = 3278;
				Match(ERR);
				State = 3279;
				Match(ASSIGN);
				State = 3280;
				lblRef();
				}
				break;
			case IOSTAT:
				EnterOuterAlt(_localctx, 3);
				{
				State = 3281;
				Match(IOSTAT);
				State = 3282;
				Match(ASSIGN);
				State = 3283;
				scalarVariable();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ScalarVariableContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public VariableNameContext variableName() {
			return GetRuleContext<VariableNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArrayElementContext arrayElement() {
			return GetRuleContext<ArrayElementContext>(0);
		}
		public ScalarVariableContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_scalarVariable; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortran90ParserListener typedListener = listener as IFortran90ParserListener;
			if (typedListener != null) typedListener.EnterScalarVariable(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortran90ParserListener typedListener = listener as IFortran90ParserListener;
			if (typedListener != null) typedListener.ExitScalarVariable(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFortran90ParserVisitor<TResult> typedVisitor = visitor as IFortran90ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitScalarVariable(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ScalarVariableContext scalarVariable() {
		ScalarVariableContext _localctx = new ScalarVariableContext(Context, State);
		EnterRule(_localctx, 596, RULE_scalarVariable);
		try {
			State = 3288;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,281,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 3286;
				variableName();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 3287;
				arrayElement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UFExprContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public UFTermContext uFTerm() {
			return GetRuleContext<UFTermContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PLUS() { return GetToken(Fortran90Parser.PLUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUS() { return GetToken(Fortran90Parser.MINUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UFExprContext uFExpr() {
			return GetRuleContext<UFExprContext>(0);
		}
		public UFExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_uFExpr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortran90ParserListener typedListener = listener as IFortran90ParserListener;
			if (typedListener != null) typedListener.EnterUFExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortran90ParserListener typedListener = listener as IFortran90ParserListener;
			if (typedListener != null) typedListener.ExitUFExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFortran90ParserVisitor<TResult> typedVisitor = visitor as IFortran90ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUFExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UFExprContext uFExpr() {
		return uFExpr(0);
	}

	private UFExprContext uFExpr(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		UFExprContext _localctx = new UFExprContext(Context, _parentState);
		UFExprContext _prevctx = _localctx;
		int _startState = 598;
		EnterRecursionRule(_localctx, 598, RULE_uFExpr, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 3294;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case REAL:
			case SIZE:
			case LPAREN:
			case SCON:
			case ICON:
			case NAME:
				{
				State = 3291;
				uFTerm(0);
				}
				break;
			case MINUS:
			case PLUS:
				{
				State = 3292;
				_la = TokenStream.LA(1);
				if ( !(_la==MINUS || _la==PLUS) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 3293;
				uFTerm(0);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 3301;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,283,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new UFExprContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_uFExpr);
					State = 3296;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 3297;
					_la = TokenStream.LA(1);
					if ( !(_la==MINUS || _la==PLUS) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					State = 3298;
					uFTerm(0);
					}
					} 
				}
				State = 3303;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,283,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class UFTermContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public UFFactorContext uFFactor() {
			return GetRuleContext<UFFactorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public UFTermContext uFTerm() {
			return GetRuleContext<UFTermContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STAR() { return GetToken(Fortran90Parser.STAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] DIV() { return GetTokens(Fortran90Parser.DIV); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DIV(int i) {
			return GetToken(Fortran90Parser.DIV, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public UFPrimaryContext uFPrimary() {
			return GetRuleContext<UFPrimaryContext>(0);
		}
		public UFTermContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_uFTerm; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortran90ParserListener typedListener = listener as IFortran90ParserListener;
			if (typedListener != null) typedListener.EnterUFTerm(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortran90ParserListener typedListener = listener as IFortran90ParserListener;
			if (typedListener != null) typedListener.ExitUFTerm(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFortran90ParserVisitor<TResult> typedVisitor = visitor as IFortran90ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUFTerm(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UFTermContext uFTerm() {
		return uFTerm(0);
	}

	private UFTermContext uFTerm(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		UFTermContext _localctx = new UFTermContext(Context, _parentState);
		UFTermContext _prevctx = _localctx;
		int _startState = 600;
		EnterRecursionRule(_localctx, 600, RULE_uFTerm, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 3305;
			uFFactor();
			}
			Context.Stop = TokenStream.LT(-1);
			State = 3317;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,285,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 3315;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,284,Context) ) {
					case 1:
						{
						_localctx = new UFTermContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_uFTerm);
						State = 3307;
						if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
						State = 3308;
						_la = TokenStream.LA(1);
						if ( !(_la==DIV || _la==STAR) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 3309;
						uFFactor();
						}
						break;
					case 2:
						{
						_localctx = new UFTermContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_uFTerm);
						State = 3310;
						if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
						{
						State = 3311;
						Match(DIV);
						State = 3312;
						Match(DIV);
						}
						State = 3314;
						uFPrimary();
						}
						break;
					}
					} 
				}
				State = 3319;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,285,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class UFFactorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public UFPrimaryContext uFPrimary() {
			return GetRuleContext<UFPrimaryContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode POWER() { return GetToken(Fortran90Parser.POWER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UFFactorContext uFFactor() {
			return GetRuleContext<UFFactorContext>(0);
		}
		public UFFactorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_uFFactor; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortran90ParserListener typedListener = listener as IFortran90ParserListener;
			if (typedListener != null) typedListener.EnterUFFactor(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortran90ParserListener typedListener = listener as IFortran90ParserListener;
			if (typedListener != null) typedListener.ExitUFFactor(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFortran90ParserVisitor<TResult> typedVisitor = visitor as IFortran90ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUFFactor(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UFFactorContext uFFactor() {
		UFFactorContext _localctx = new UFFactorContext(Context, State);
		EnterRule(_localctx, 602, RULE_uFFactor);
		try {
			State = 3325;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,286,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 3320;
				uFPrimary();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 3321;
				uFPrimary();
				State = 3322;
				Match(POWER);
				State = 3323;
				uFFactor();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UFPrimaryContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ICON() { return GetToken(Fortran90Parser.ICON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SCON() { return GetToken(Fortran90Parser.SCON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NameDataRefContext nameDataRef() {
			return GetRuleContext<NameDataRefContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionReferenceContext functionReference() {
			return GetRuleContext<FunctionReferenceContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(Fortran90Parser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UFExprContext uFExpr() {
			return GetRuleContext<UFExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(Fortran90Parser.RPAREN, 0); }
		public UFPrimaryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_uFPrimary; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortran90ParserListener typedListener = listener as IFortran90ParserListener;
			if (typedListener != null) typedListener.EnterUFPrimary(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortran90ParserListener typedListener = listener as IFortran90ParserListener;
			if (typedListener != null) typedListener.ExitUFPrimary(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFortran90ParserVisitor<TResult> typedVisitor = visitor as IFortran90ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUFPrimary(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UFPrimaryContext uFPrimary() {
		UFPrimaryContext _localctx = new UFPrimaryContext(Context, State);
		EnterRule(_localctx, 604, RULE_uFPrimary);
		try {
			State = 3335;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,287,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 3327;
				Match(ICON);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 3328;
				Match(SCON);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 3329;
				nameDataRef();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 3330;
				functionReference();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 3331;
				Match(LPAREN);
				State = 3332;
				uFExpr(0);
				State = 3333;
				Match(RPAREN);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SubroutineSubprogramContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SUBROUTINE() { return GetToken(Fortran90Parser.SUBROUTINE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SubroutineNameContext subroutineName() {
			return GetRuleContext<SubroutineNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SubroutineRangeContext subroutineRange() {
			return GetRuleContext<SubroutineRangeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RECURSIVE() { return GetToken(Fortran90Parser.RECURSIVE, 0); }
		public SubroutineSubprogramContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_subroutineSubprogram; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortran90ParserListener typedListener = listener as IFortran90ParserListener;
			if (typedListener != null) typedListener.EnterSubroutineSubprogram(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortran90ParserListener typedListener = listener as IFortran90ParserListener;
			if (typedListener != null) typedListener.ExitSubroutineSubprogram(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFortran90ParserVisitor<TResult> typedVisitor = visitor as IFortran90ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSubroutineSubprogram(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SubroutineSubprogramContext subroutineSubprogram() {
		SubroutineSubprogramContext _localctx = new SubroutineSubprogramContext(Context, State);
		EnterRule(_localctx, 606, RULE_subroutineSubprogram);
		try {
			State = 3346;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case SUBROUTINE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 3337;
				Match(SUBROUTINE);
				State = 3338;
				subroutineName();
				State = 3339;
				subroutineRange();
				}
				break;
			case RECURSIVE:
				EnterOuterAlt(_localctx, 2);
				{
				State = 3341;
				Match(RECURSIVE);
				State = 3342;
				Match(SUBROUTINE);
				State = 3343;
				subroutineName();
				State = 3344;
				subroutineRange();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SubroutineNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NAME() { return GetToken(Fortran90Parser.NAME, 0); }
		public SubroutineNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_subroutineName; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortran90ParserListener typedListener = listener as IFortran90ParserListener;
			if (typedListener != null) typedListener.EnterSubroutineName(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortran90ParserListener typedListener = listener as IFortran90ParserListener;
			if (typedListener != null) typedListener.ExitSubroutineName(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFortran90ParserVisitor<TResult> typedVisitor = visitor as IFortran90ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSubroutineName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SubroutineNameContext subroutineName() {
		SubroutineNameContext _localctx = new SubroutineNameContext(Context, State);
		EnterRule(_localctx, 608, RULE_subroutineName);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3348;
			Match(NAME);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SubroutineRangeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SubroutineParListContext subroutineParList() {
			return GetRuleContext<SubroutineParListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public EndSubroutineStmtContext endSubroutineStmt() {
			return GetRuleContext<EndSubroutineStmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BodyContext body() {
			return GetRuleContext<BodyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BodyPlusInternalsContext bodyPlusInternals() {
			return GetRuleContext<BodyPlusInternalsContext>(0);
		}
		public SubroutineRangeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_subroutineRange; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortran90ParserListener typedListener = listener as IFortran90ParserListener;
			if (typedListener != null) typedListener.EnterSubroutineRange(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortran90ParserListener typedListener = listener as IFortran90ParserListener;
			if (typedListener != null) typedListener.ExitSubroutineRange(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFortran90ParserVisitor<TResult> typedVisitor = visitor as IFortran90ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSubroutineRange(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SubroutineRangeContext subroutineRange() {
		SubroutineRangeContext _localctx = new SubroutineRangeContext(Context, State);
		EnterRule(_localctx, 610, RULE_subroutineRange);
		try {
			State = 3360;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,290,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 3350;
				subroutineParList();
				State = 3352;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,289,Context) ) {
				case 1:
					{
					State = 3351;
					body();
					}
					break;
				}
				State = 3354;
				endSubroutineStmt();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 3356;
				subroutineParList();
				State = 3357;
				bodyPlusInternals(0);
				State = 3358;
				endSubroutineStmt();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IncludeStmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INCLUDE() { return GetToken(Fortran90Parser.INCLUDE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SCON() { return GetToken(Fortran90Parser.SCON, 0); }
		public IncludeStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_includeStmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortran90ParserListener typedListener = listener as IFortran90ParserListener;
			if (typedListener != null) typedListener.EnterIncludeStmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortran90ParserListener typedListener = listener as IFortran90ParserListener;
			if (typedListener != null) typedListener.ExitIncludeStmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFortran90ParserVisitor<TResult> typedVisitor = visitor as IFortran90ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIncludeStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IncludeStmtContext includeStmt() {
		IncludeStmtContext _localctx = new IncludeStmtContext(Context, State);
		EnterRule(_localctx, 612, RULE_includeStmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3362;
			Match(INCLUDE);
			State = 3363;
			Match(SCON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ImplicitStmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IMPLICIT() { return GetToken(Fortran90Parser.IMPLICIT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ImplicitSpecListContext implicitSpecList() {
			return GetRuleContext<ImplicitSpecListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NONE() { return GetToken(Fortran90Parser.NONE, 0); }
		public ImplicitStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_implicitStmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortran90ParserListener typedListener = listener as IFortran90ParserListener;
			if (typedListener != null) typedListener.EnterImplicitStmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortran90ParserListener typedListener = listener as IFortran90ParserListener;
			if (typedListener != null) typedListener.ExitImplicitStmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFortran90ParserVisitor<TResult> typedVisitor = visitor as IFortran90ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitImplicitStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ImplicitStmtContext implicitStmt() {
		ImplicitStmtContext _localctx = new ImplicitStmtContext(Context, State);
		EnterRule(_localctx, 614, RULE_implicitStmt);
		try {
			State = 3369;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,291,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 3365;
				Match(IMPLICIT);
				State = 3366;
				implicitSpecList();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 3367;
				Match(IMPLICIT);
				State = 3368;
				Match(NONE);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ImplicitSpecListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ImplicitSpecContext[] implicitSpec() {
			return GetRuleContexts<ImplicitSpecContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ImplicitSpecContext implicitSpec(int i) {
			return GetRuleContext<ImplicitSpecContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(Fortran90Parser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(Fortran90Parser.COMMA, i);
		}
		public ImplicitSpecListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_implicitSpecList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortran90ParserListener typedListener = listener as IFortran90ParserListener;
			if (typedListener != null) typedListener.EnterImplicitSpecList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortran90ParserListener typedListener = listener as IFortran90ParserListener;
			if (typedListener != null) typedListener.ExitImplicitSpecList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFortran90ParserVisitor<TResult> typedVisitor = visitor as IFortran90ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitImplicitSpecList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ImplicitSpecListContext implicitSpecList() {
		ImplicitSpecListContext _localctx = new ImplicitSpecListContext(Context, State);
		EnterRule(_localctx, 616, RULE_implicitSpecList);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 3371;
			implicitSpec();
			State = 3376;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,292,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 3372;
					Match(COMMA);
					State = 3373;
					implicitSpec();
					}
					} 
				}
				State = 3378;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,292,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ImplicitSpecContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypeSpecContext typeSpec() {
			return GetRuleContext<TypeSpecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ImplicitRangesContext implicitRanges() {
			return GetRuleContext<ImplicitRangesContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(Fortran90Parser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(Fortran90Parser.RPAREN, 0); }
		public ImplicitSpecContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_implicitSpec; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortran90ParserListener typedListener = listener as IFortran90ParserListener;
			if (typedListener != null) typedListener.EnterImplicitSpec(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortran90ParserListener typedListener = listener as IFortran90ParserListener;
			if (typedListener != null) typedListener.ExitImplicitSpec(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFortran90ParserVisitor<TResult> typedVisitor = visitor as IFortran90ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitImplicitSpec(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ImplicitSpecContext implicitSpec() {
		ImplicitSpecContext _localctx = new ImplicitSpecContext(Context, State);
		EnterRule(_localctx, 618, RULE_implicitSpec);
		try {
			State = 3387;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,293,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 3379;
				typeSpec();
				State = 3380;
				implicitRanges();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 3382;
				typeSpec();
				State = 3383;
				Match(LPAREN);
				State = 3384;
				implicitRanges();
				State = 3385;
				Match(RPAREN);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ImplicitRangesContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ImplicitRangeContext[] implicitRange() {
			return GetRuleContexts<ImplicitRangeContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ImplicitRangeContext implicitRange(int i) {
			return GetRuleContext<ImplicitRangeContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(Fortran90Parser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(Fortran90Parser.COMMA, i);
		}
		public ImplicitRangesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_implicitRanges; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortran90ParserListener typedListener = listener as IFortran90ParserListener;
			if (typedListener != null) typedListener.EnterImplicitRanges(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortran90ParserListener typedListener = listener as IFortran90ParserListener;
			if (typedListener != null) typedListener.ExitImplicitRanges(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFortran90ParserVisitor<TResult> typedVisitor = visitor as IFortran90ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitImplicitRanges(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ImplicitRangesContext implicitRanges() {
		ImplicitRangesContext _localctx = new ImplicitRangesContext(Context, State);
		EnterRule(_localctx, 620, RULE_implicitRanges);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 3390;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,294,Context) ) {
			case 1:
				{
				State = 3389;
				implicitRange();
				}
				break;
			}
			State = 3396;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,295,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 3392;
					Match(COMMA);
					State = 3393;
					implicitRange();
					}
					} 
				}
				State = 3398;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,295,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ImplicitRangeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NAME() { return GetTokens(Fortran90Parser.NAME); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NAME(int i) {
			return GetToken(Fortran90Parser.NAME, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUS() { return GetToken(Fortran90Parser.MINUS, 0); }
		public ImplicitRangeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_implicitRange; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortran90ParserListener typedListener = listener as IFortran90ParserListener;
			if (typedListener != null) typedListener.EnterImplicitRange(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortran90ParserListener typedListener = listener as IFortran90ParserListener;
			if (typedListener != null) typedListener.ExitImplicitRange(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFortran90ParserVisitor<TResult> typedVisitor = visitor as IFortran90ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitImplicitRange(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ImplicitRangeContext implicitRange() {
		ImplicitRangeContext _localctx = new ImplicitRangeContext(Context, State);
		EnterRule(_localctx, 622, RULE_implicitRange);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3399;
			Match(NAME);
			State = 3400;
			Match(MINUS);
			State = 3401;
			Match(NAME);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Level5ExprContext level5Expr() {
			return GetRuleContext<Level5ExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DefinedBinaryOpContext definedBinaryOp() {
			return GetRuleContext<DefinedBinaryOpContext>(0);
		}
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortran90ParserListener typedListener = listener as IFortran90ParserListener;
			if (typedListener != null) typedListener.EnterExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortran90ParserListener typedListener = listener as IFortran90ParserListener;
			if (typedListener != null) typedListener.ExitExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFortran90ParserVisitor<TResult> typedVisitor = visitor as IFortran90ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		return expression(0);
	}

	private ExpressionContext expression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ExpressionContext _localctx = new ExpressionContext(Context, _parentState);
		ExpressionContext _prevctx = _localctx;
		int _startState = 624;
		EnterRecursionRule(_localctx, 624, RULE_expression, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 3404;
			level5Expr();
			}
			Context.Stop = TokenStream.LT(-1);
			State = 3412;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,296,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new ExpressionContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_expression);
					State = 3406;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 3407;
					definedBinaryOp();
					State = 3408;
					level5Expr();
					}
					} 
				}
				State = 3414;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,296,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class DefinedBinaryOpContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOP() { return GetToken(Fortran90Parser.DOP, 0); }
		public DefinedBinaryOpContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_definedBinaryOp; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortran90ParserListener typedListener = listener as IFortran90ParserListener;
			if (typedListener != null) typedListener.EnterDefinedBinaryOp(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortran90ParserListener typedListener = listener as IFortran90ParserListener;
			if (typedListener != null) typedListener.ExitDefinedBinaryOp(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFortran90ParserVisitor<TResult> typedVisitor = visitor as IFortran90ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDefinedBinaryOp(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DefinedBinaryOpContext definedBinaryOp() {
		DefinedBinaryOpContext _localctx = new DefinedBinaryOpContext(Context, State);
		EnterRule(_localctx, 626, RULE_definedBinaryOp);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3415;
			Match(DOP);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Level5ExprContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public EquivOperandContext[] equivOperand() {
			return GetRuleContexts<EquivOperandContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public EquivOperandContext equivOperand(int i) {
			return GetRuleContext<EquivOperandContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NEQV() { return GetTokens(Fortran90Parser.NEQV); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NEQV(int i) {
			return GetToken(Fortran90Parser.NEQV, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] EQV() { return GetTokens(Fortran90Parser.EQV); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQV(int i) {
			return GetToken(Fortran90Parser.EQV, i);
		}
		public Level5ExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_level5Expr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortran90ParserListener typedListener = listener as IFortran90ParserListener;
			if (typedListener != null) typedListener.EnterLevel5Expr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortran90ParserListener typedListener = listener as IFortran90ParserListener;
			if (typedListener != null) typedListener.ExitLevel5Expr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFortran90ParserVisitor<TResult> typedVisitor = visitor as IFortran90ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLevel5Expr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Level5ExprContext level5Expr() {
		Level5ExprContext _localctx = new Level5ExprContext(Context, State);
		EnterRule(_localctx, 628, RULE_level5Expr);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 3417;
			equivOperand();
			State = 3422;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,297,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 3418;
					_la = TokenStream.LA(1);
					if ( !(_la==EQV || _la==NEQV) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					State = 3419;
					equivOperand();
					}
					} 
				}
				State = 3424;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,297,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EquivOperandContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public OrOperandContext[] orOperand() {
			return GetRuleContexts<OrOperandContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public OrOperandContext orOperand(int i) {
			return GetRuleContext<OrOperandContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] LOR() { return GetTokens(Fortran90Parser.LOR); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOR(int i) {
			return GetToken(Fortran90Parser.LOR, i);
		}
		public EquivOperandContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_equivOperand; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortran90ParserListener typedListener = listener as IFortran90ParserListener;
			if (typedListener != null) typedListener.EnterEquivOperand(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortran90ParserListener typedListener = listener as IFortran90ParserListener;
			if (typedListener != null) typedListener.ExitEquivOperand(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFortran90ParserVisitor<TResult> typedVisitor = visitor as IFortran90ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEquivOperand(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EquivOperandContext equivOperand() {
		EquivOperandContext _localctx = new EquivOperandContext(Context, State);
		EnterRule(_localctx, 630, RULE_equivOperand);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 3425;
			orOperand();
			State = 3430;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,298,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 3426;
					Match(LOR);
					State = 3427;
					orOperand();
					}
					} 
				}
				State = 3432;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,298,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OrOperandContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public AndOperandContext[] andOperand() {
			return GetRuleContexts<AndOperandContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AndOperandContext andOperand(int i) {
			return GetRuleContext<AndOperandContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] LAND() { return GetTokens(Fortran90Parser.LAND); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LAND(int i) {
			return GetToken(Fortran90Parser.LAND, i);
		}
		public OrOperandContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_orOperand; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortran90ParserListener typedListener = listener as IFortran90ParserListener;
			if (typedListener != null) typedListener.EnterOrOperand(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortran90ParserListener typedListener = listener as IFortran90ParserListener;
			if (typedListener != null) typedListener.ExitOrOperand(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFortran90ParserVisitor<TResult> typedVisitor = visitor as IFortran90ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOrOperand(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OrOperandContext orOperand() {
		OrOperandContext _localctx = new OrOperandContext(Context, State);
		EnterRule(_localctx, 632, RULE_orOperand);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 3433;
			andOperand();
			State = 3438;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,299,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 3434;
					Match(LAND);
					State = 3435;
					andOperand();
					}
					} 
				}
				State = 3440;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,299,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AndOperandContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Level4ExprContext level4Expr() {
			return GetRuleContext<Level4ExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LNOT() { return GetToken(Fortran90Parser.LNOT, 0); }
		public AndOperandContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_andOperand; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortran90ParserListener typedListener = listener as IFortran90ParserListener;
			if (typedListener != null) typedListener.EnterAndOperand(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortran90ParserListener typedListener = listener as IFortran90ParserListener;
			if (typedListener != null) typedListener.ExitAndOperand(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFortran90ParserVisitor<TResult> typedVisitor = visitor as IFortran90ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAndOperand(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AndOperandContext andOperand() {
		AndOperandContext _localctx = new AndOperandContext(Context, State);
		EnterRule(_localctx, 634, RULE_andOperand);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3442;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LNOT) {
				{
				State = 3441;
				Match(LNOT);
				}
			}

			State = 3444;
			level4Expr();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RelOpContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LT() { return GetToken(Fortran90Parser.LT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LE() { return GetToken(Fortran90Parser.LE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQ() { return GetToken(Fortran90Parser.EQ, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NE() { return GetToken(Fortran90Parser.NE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GT() { return GetToken(Fortran90Parser.GT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GE() { return GetToken(Fortran90Parser.GE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP() { return GetToken(Fortran90Parser.OP, 0); }
		public RelOpContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_relOp; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortran90ParserListener typedListener = listener as IFortran90ParserListener;
			if (typedListener != null) typedListener.EnterRelOp(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortran90ParserListener typedListener = listener as IFortran90ParserListener;
			if (typedListener != null) typedListener.ExitRelOp(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFortran90ParserVisitor<TResult> typedVisitor = visitor as IFortran90ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRelOp(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RelOpContext relOp() {
		RelOpContext _localctx = new RelOpContext(Context, State);
		EnterRule(_localctx, 636, RULE_relOp);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3446;
			_la = TokenStream.LA(1);
			if ( !(_la==OP || ((((_la - 143)) & ~0x3f) == 0 && ((1L << (_la - 143)) & 63L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Level4ExprContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Level3ExprContext[] level3Expr() {
			return GetRuleContexts<Level3ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Level3ExprContext level3Expr(int i) {
			return GetRuleContext<Level3ExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RelOpContext[] relOp() {
			return GetRuleContexts<RelOpContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public RelOpContext relOp(int i) {
			return GetRuleContext<RelOpContext>(i);
		}
		public Level4ExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_level4Expr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortran90ParserListener typedListener = listener as IFortran90ParserListener;
			if (typedListener != null) typedListener.EnterLevel4Expr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortran90ParserListener typedListener = listener as IFortran90ParserListener;
			if (typedListener != null) typedListener.ExitLevel4Expr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFortran90ParserVisitor<TResult> typedVisitor = visitor as IFortran90ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLevel4Expr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Level4ExprContext level4Expr() {
		Level4ExprContext _localctx = new Level4ExprContext(Context, State);
		EnterRule(_localctx, 638, RULE_level4Expr);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 3448;
			level3Expr();
			State = 3454;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,301,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 3449;
					relOp();
					State = 3450;
					level3Expr();
					}
					} 
				}
				State = 3456;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,301,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Level3ExprContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Level2ExprContext[] level2Expr() {
			return GetRuleContexts<Level2ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Level2ExprContext level2Expr(int i) {
			return GetRuleContext<Level2ExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] DIV() { return GetTokens(Fortran90Parser.DIV); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DIV(int i) {
			return GetToken(Fortran90Parser.DIV, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SPOFF() { return GetTokens(Fortran90Parser.SPOFF); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SPOFF(int i) {
			return GetToken(Fortran90Parser.SPOFF, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SPON() { return GetTokens(Fortran90Parser.SPON); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SPON(int i) {
			return GetToken(Fortran90Parser.SPON, i);
		}
		public Level3ExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_level3Expr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortran90ParserListener typedListener = listener as IFortran90ParserListener;
			if (typedListener != null) typedListener.EnterLevel3Expr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortran90ParserListener typedListener = listener as IFortran90ParserListener;
			if (typedListener != null) typedListener.ExitLevel3Expr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFortran90ParserVisitor<TResult> typedVisitor = visitor as IFortran90ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLevel3Expr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Level3ExprContext level3Expr() {
		Level3ExprContext _localctx = new Level3ExprContext(Context, State);
		EnterRule(_localctx, 640, RULE_level3Expr);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 3457;
			level2Expr();
			State = 3469;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,304,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 3458;
					Match(DIV);
					State = 3460;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==SPOFF) {
						{
						State = 3459;
						Match(SPOFF);
						}
					}

					State = 3462;
					Match(DIV);
					State = 3464;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==SPON) {
						{
						State = 3463;
						Match(SPON);
						}
					}

					State = 3466;
					level2Expr();
					}
					} 
				}
				State = 3471;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,304,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Level2ExprContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public AddOperandContext[] addOperand() {
			return GetRuleContexts<AddOperandContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AddOperandContext addOperand(int i) {
			return GetRuleContext<AddOperandContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SignContext sign() {
			return GetRuleContext<SignContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] PLUS() { return GetTokens(Fortran90Parser.PLUS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PLUS(int i) {
			return GetToken(Fortran90Parser.PLUS, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] MINUS() { return GetTokens(Fortran90Parser.MINUS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUS(int i) {
			return GetToken(Fortran90Parser.MINUS, i);
		}
		public Level2ExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_level2Expr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortran90ParserListener typedListener = listener as IFortran90ParserListener;
			if (typedListener != null) typedListener.EnterLevel2Expr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortran90ParserListener typedListener = listener as IFortran90ParserListener;
			if (typedListener != null) typedListener.ExitLevel2Expr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFortran90ParserVisitor<TResult> typedVisitor = visitor as IFortran90ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLevel2Expr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Level2ExprContext level2Expr() {
		Level2ExprContext _localctx = new Level2ExprContext(Context, State);
		EnterRule(_localctx, 642, RULE_level2Expr);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 3473;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==MINUS || _la==PLUS) {
				{
				State = 3472;
				sign();
				}
			}

			State = 3475;
			addOperand();
			State = 3480;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,306,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 3476;
					_la = TokenStream.LA(1);
					if ( !(_la==MINUS || _la==PLUS) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					State = 3477;
					addOperand();
					}
					} 
				}
				State = 3482;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,306,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SignContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PLUS() { return GetToken(Fortran90Parser.PLUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUS() { return GetToken(Fortran90Parser.MINUS, 0); }
		public SignContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sign; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortran90ParserListener typedListener = listener as IFortran90ParserListener;
			if (typedListener != null) typedListener.EnterSign(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortran90ParserListener typedListener = listener as IFortran90ParserListener;
			if (typedListener != null) typedListener.ExitSign(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFortran90ParserVisitor<TResult> typedVisitor = visitor as IFortran90ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSign(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SignContext sign() {
		SignContext _localctx = new SignContext(Context, State);
		EnterRule(_localctx, 644, RULE_sign);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3483;
			_la = TokenStream.LA(1);
			if ( !(_la==MINUS || _la==PLUS) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AddOperandContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public MultOperandContext[] multOperand() {
			return GetRuleContexts<MultOperandContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public MultOperandContext multOperand(int i) {
			return GetRuleContext<MultOperandContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] STAR() { return GetTokens(Fortran90Parser.STAR); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STAR(int i) {
			return GetToken(Fortran90Parser.STAR, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] DIV() { return GetTokens(Fortran90Parser.DIV); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DIV(int i) {
			return GetToken(Fortran90Parser.DIV, i);
		}
		public AddOperandContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_addOperand; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortran90ParserListener typedListener = listener as IFortran90ParserListener;
			if (typedListener != null) typedListener.EnterAddOperand(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortran90ParserListener typedListener = listener as IFortran90ParserListener;
			if (typedListener != null) typedListener.ExitAddOperand(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFortran90ParserVisitor<TResult> typedVisitor = visitor as IFortran90ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAddOperand(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AddOperandContext addOperand() {
		AddOperandContext _localctx = new AddOperandContext(Context, State);
		EnterRule(_localctx, 646, RULE_addOperand);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 3485;
			multOperand();
			State = 3490;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,307,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 3486;
					_la = TokenStream.LA(1);
					if ( !(_la==DIV || _la==STAR) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					State = 3487;
					multOperand();
					}
					} 
				}
				State = 3492;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,307,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MultOperandContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Level1ExprContext[] level1Expr() {
			return GetRuleContexts<Level1ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Level1ExprContext level1Expr(int i) {
			return GetRuleContext<Level1ExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] POWER() { return GetTokens(Fortran90Parser.POWER); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode POWER(int i) {
			return GetToken(Fortran90Parser.POWER, i);
		}
		public MultOperandContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_multOperand; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortran90ParserListener typedListener = listener as IFortran90ParserListener;
			if (typedListener != null) typedListener.EnterMultOperand(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortran90ParserListener typedListener = listener as IFortran90ParserListener;
			if (typedListener != null) typedListener.ExitMultOperand(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFortran90ParserVisitor<TResult> typedVisitor = visitor as IFortran90ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMultOperand(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MultOperandContext multOperand() {
		MultOperandContext _localctx = new MultOperandContext(Context, State);
		EnterRule(_localctx, 648, RULE_multOperand);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 3493;
			level1Expr();
			State = 3498;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,308,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 3494;
					Match(POWER);
					State = 3495;
					level1Expr();
					}
					} 
				}
				State = 3500;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,308,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Level1ExprContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public PrimaryContext primary() {
			return GetRuleContext<PrimaryContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DefinedUnaryOpContext definedUnaryOp() {
			return GetRuleContext<DefinedUnaryOpContext>(0);
		}
		public Level1ExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_level1Expr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortran90ParserListener typedListener = listener as IFortran90ParserListener;
			if (typedListener != null) typedListener.EnterLevel1Expr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortran90ParserListener typedListener = listener as IFortran90ParserListener;
			if (typedListener != null) typedListener.ExitLevel1Expr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFortran90ParserVisitor<TResult> typedVisitor = visitor as IFortran90ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLevel1Expr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Level1ExprContext level1Expr() {
		Level1ExprContext _localctx = new Level1ExprContext(Context, State);
		EnterRule(_localctx, 650, RULE_level1Expr);
		try {
			State = 3505;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case REAL:
			case SIZE:
			case LPAREN:
			case TRUE:
			case FALSE:
			case OBRACKETSLASH:
			case SCON:
			case RDCON:
			case ICON:
			case NAME:
				EnterOuterAlt(_localctx, 1);
				{
				State = 3501;
				primary();
				}
				break;
			case DOP:
				EnterOuterAlt(_localctx, 2);
				{
				State = 3502;
				definedUnaryOp();
				State = 3503;
				primary();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DefinedUnaryOpContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOP() { return GetToken(Fortran90Parser.DOP, 0); }
		public DefinedUnaryOpContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_definedUnaryOp; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortran90ParserListener typedListener = listener as IFortran90ParserListener;
			if (typedListener != null) typedListener.EnterDefinedUnaryOp(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortran90ParserListener typedListener = listener as IFortran90ParserListener;
			if (typedListener != null) typedListener.ExitDefinedUnaryOp(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFortran90ParserVisitor<TResult> typedVisitor = visitor as IFortran90ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDefinedUnaryOp(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DefinedUnaryOpContext definedUnaryOp() {
		DefinedUnaryOpContext _localctx = new DefinedUnaryOpContext(Context, State);
		EnterRule(_localctx, 652, RULE_definedUnaryOp);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3507;
			Match(DOP);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PrimaryContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public UnsignedArithmeticConstantContext unsignedArithmeticConstant() {
			return GetRuleContext<UnsignedArithmeticConstantContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NameDataRefContext nameDataRef() {
			return GetRuleContext<NameDataRefContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionReferenceContext functionReference() {
			return GetRuleContext<FunctionReferenceContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(Fortran90Parser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(Fortran90Parser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SCON() { return GetToken(Fortran90Parser.SCON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public LogicalConstantContext logicalConstant() {
			return GetRuleContext<LogicalConstantContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArrayConstructorContext arrayConstructor() {
			return GetRuleContext<ArrayConstructorContext>(0);
		}
		public PrimaryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_primary; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortran90ParserListener typedListener = listener as IFortran90ParserListener;
			if (typedListener != null) typedListener.EnterPrimary(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortran90ParserListener typedListener = listener as IFortran90ParserListener;
			if (typedListener != null) typedListener.ExitPrimary(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFortran90ParserVisitor<TResult> typedVisitor = visitor as IFortran90ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrimary(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PrimaryContext primary() {
		PrimaryContext _localctx = new PrimaryContext(Context, State);
		EnterRule(_localctx, 654, RULE_primary);
		try {
			State = 3519;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,310,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 3509;
				unsignedArithmeticConstant();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 3510;
				nameDataRef();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 3511;
				functionReference();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 3512;
				Match(LPAREN);
				State = 3513;
				expression(0);
				State = 3514;
				Match(RPAREN);
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 3516;
				Match(SCON);
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 3517;
				logicalConstant();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 3518;
				arrayConstructor();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArrayConstructorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OBRACKETSLASH() { return GetToken(Fortran90Parser.OBRACKETSLASH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public AcValueListContext acValueList() {
			return GetRuleContext<AcValueListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CBRACKETSLASH() { return GetToken(Fortran90Parser.CBRACKETSLASH, 0); }
		public ArrayConstructorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arrayConstructor; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortran90ParserListener typedListener = listener as IFortran90ParserListener;
			if (typedListener != null) typedListener.EnterArrayConstructor(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortran90ParserListener typedListener = listener as IFortran90ParserListener;
			if (typedListener != null) typedListener.ExitArrayConstructor(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFortran90ParserVisitor<TResult> typedVisitor = visitor as IFortran90ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArrayConstructor(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArrayConstructorContext arrayConstructor() {
		ArrayConstructorContext _localctx = new ArrayConstructorContext(Context, State);
		EnterRule(_localctx, 656, RULE_arrayConstructor);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3521;
			Match(OBRACKETSLASH);
			State = 3522;
			acValueList();
			State = 3523;
			Match(CBRACKETSLASH);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AcValueListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AcValueList1Context acValueList1() {
			return GetRuleContext<AcValueList1Context>(0);
		}
		public AcValueListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_acValueList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortran90ParserListener typedListener = listener as IFortran90ParserListener;
			if (typedListener != null) typedListener.EnterAcValueList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortran90ParserListener typedListener = listener as IFortran90ParserListener;
			if (typedListener != null) typedListener.ExitAcValueList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFortran90ParserVisitor<TResult> typedVisitor = visitor as IFortran90ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAcValueList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AcValueListContext acValueList() {
		AcValueListContext _localctx = new AcValueListContext(Context, State);
		EnterRule(_localctx, 658, RULE_acValueList);
		try {
			State = 3527;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,311,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 3525;
				expression(0);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 3526;
				acValueList1(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AcValueList1Context : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA() { return GetToken(Fortran90Parser.COMMA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public AcImpliedDoContext acImpliedDo() {
			return GetRuleContext<AcImpliedDoContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AcValueList1Context acValueList1() {
			return GetRuleContext<AcValueList1Context>(0);
		}
		public AcValueList1Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_acValueList1; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortran90ParserListener typedListener = listener as IFortran90ParserListener;
			if (typedListener != null) typedListener.EnterAcValueList1(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortran90ParserListener typedListener = listener as IFortran90ParserListener;
			if (typedListener != null) typedListener.ExitAcValueList1(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFortran90ParserVisitor<TResult> typedVisitor = visitor as IFortran90ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAcValueList1(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AcValueList1Context acValueList1() {
		return acValueList1(0);
	}

	private AcValueList1Context acValueList1(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		AcValueList1Context _localctx = new AcValueList1Context(Context, _parentState);
		AcValueList1Context _prevctx = _localctx;
		int _startState = 660;
		EnterRecursionRule(_localctx, 660, RULE_acValueList1, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 3539;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,312,Context) ) {
			case 1:
				{
				State = 3530;
				expression(0);
				State = 3531;
				Match(COMMA);
				State = 3532;
				expression(0);
				}
				break;
			case 2:
				{
				State = 3534;
				expression(0);
				State = 3535;
				Match(COMMA);
				State = 3536;
				acImpliedDo();
				}
				break;
			case 3:
				{
				State = 3538;
				acImpliedDo();
				}
				break;
			}
			Context.Stop = TokenStream.LT(-1);
			State = 3549;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,314,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 3547;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,313,Context) ) {
					case 1:
						{
						_localctx = new AcValueList1Context(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_acValueList1);
						State = 3541;
						if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
						State = 3542;
						Match(COMMA);
						State = 3543;
						expression(0);
						}
						break;
					case 2:
						{
						_localctx = new AcValueList1Context(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_acValueList1);
						State = 3544;
						if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
						State = 3545;
						Match(COMMA);
						State = 3546;
						acImpliedDo();
						}
						break;
					}
					} 
				}
				State = 3551;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,314,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class AcImpliedDoContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(Fortran90Parser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(Fortran90Parser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(Fortran90Parser.COMMA, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ImpliedDoVariableContext impliedDoVariable() {
			return GetRuleContext<ImpliedDoVariableContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGN() { return GetToken(Fortran90Parser.ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(Fortran90Parser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public AcImpliedDoContext acImpliedDo() {
			return GetRuleContext<AcImpliedDoContext>(0);
		}
		public AcImpliedDoContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_acImpliedDo; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortran90ParserListener typedListener = listener as IFortran90ParserListener;
			if (typedListener != null) typedListener.EnterAcImpliedDo(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortran90ParserListener typedListener = listener as IFortran90ParserListener;
			if (typedListener != null) typedListener.ExitAcImpliedDo(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFortran90ParserVisitor<TResult> typedVisitor = visitor as IFortran90ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAcImpliedDo(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AcImpliedDoContext acImpliedDo() {
		AcImpliedDoContext _localctx = new AcImpliedDoContext(Context, State);
		EnterRule(_localctx, 662, RULE_acImpliedDo);
		try {
			State = 3596;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,315,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 3552;
				Match(LPAREN);
				State = 3553;
				expression(0);
				State = 3554;
				Match(COMMA);
				State = 3555;
				impliedDoVariable();
				State = 3556;
				Match(ASSIGN);
				State = 3557;
				expression(0);
				State = 3558;
				Match(COMMA);
				State = 3559;
				expression(0);
				State = 3560;
				Match(RPAREN);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 3562;
				Match(LPAREN);
				State = 3563;
				expression(0);
				State = 3564;
				Match(COMMA);
				State = 3565;
				impliedDoVariable();
				State = 3566;
				Match(ASSIGN);
				State = 3567;
				expression(0);
				State = 3568;
				Match(COMMA);
				State = 3569;
				expression(0);
				State = 3570;
				Match(COMMA);
				State = 3571;
				expression(0);
				State = 3572;
				Match(RPAREN);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 3574;
				Match(LPAREN);
				State = 3575;
				acImpliedDo();
				State = 3576;
				Match(COMMA);
				State = 3577;
				impliedDoVariable();
				State = 3578;
				Match(ASSIGN);
				State = 3579;
				expression(0);
				State = 3580;
				Match(COMMA);
				State = 3581;
				expression(0);
				State = 3582;
				Match(RPAREN);
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 3584;
				Match(LPAREN);
				State = 3585;
				acImpliedDo();
				State = 3586;
				Match(COMMA);
				State = 3587;
				impliedDoVariable();
				State = 3588;
				Match(ASSIGN);
				State = 3589;
				expression(0);
				State = 3590;
				Match(COMMA);
				State = 3591;
				expression(0);
				State = 3592;
				Match(COMMA);
				State = 3593;
				expression(0);
				State = 3594;
				Match(RPAREN);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionReferenceContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NAME() { return GetToken(Fortran90Parser.NAME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(Fortran90Parser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(Fortran90Parser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FunctionArgListContext functionArgList() {
			return GetRuleContext<FunctionArgListContext>(0);
		}
		public FunctionReferenceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionReference; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortran90ParserListener typedListener = listener as IFortran90ParserListener;
			if (typedListener != null) typedListener.EnterFunctionReference(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortran90ParserListener typedListener = listener as IFortran90ParserListener;
			if (typedListener != null) typedListener.ExitFunctionReference(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFortran90ParserVisitor<TResult> typedVisitor = visitor as IFortran90ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionReference(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionReferenceContext functionReference() {
		FunctionReferenceContext _localctx = new FunctionReferenceContext(Context, State);
		EnterRule(_localctx, 664, RULE_functionReference);
		try {
			State = 3606;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,316,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 3598;
				Match(NAME);
				State = 3599;
				Match(LPAREN);
				State = 3600;
				Match(RPAREN);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 3601;
				Match(NAME);
				State = 3602;
				Match(LPAREN);
				State = 3603;
				functionArgList(0);
				State = 3604;
				Match(RPAREN);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionArgListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FunctionArgContext functionArg() {
			return GetRuleContext<FunctionArgContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SectionSubscriptListContext sectionSubscriptList() {
			return GetRuleContext<SectionSubscriptListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA() { return GetToken(Fortran90Parser.COMMA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FunctionArgListContext functionArgList() {
			return GetRuleContext<FunctionArgListContext>(0);
		}
		public FunctionArgListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionArgList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortran90ParserListener typedListener = listener as IFortran90ParserListener;
			if (typedListener != null) typedListener.EnterFunctionArgList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortran90ParserListener typedListener = listener as IFortran90ParserListener;
			if (typedListener != null) typedListener.ExitFunctionArgList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFortran90ParserVisitor<TResult> typedVisitor = visitor as IFortran90ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionArgList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionArgListContext functionArgList() {
		return functionArgList(0);
	}

	private FunctionArgListContext functionArgList(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		FunctionArgListContext _localctx = new FunctionArgListContext(Context, _parentState);
		FunctionArgListContext _prevctx = _localctx;
		int _startState = 666;
		EnterRecursionRule(_localctx, 666, RULE_functionArgList, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 3614;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,317,Context) ) {
			case 1:
				{
				State = 3609;
				functionArg();
				}
				break;
			case 2:
				{
				State = 3610;
				sectionSubscriptList();
				State = 3611;
				Match(COMMA);
				State = 3612;
				functionArg();
				}
				break;
			}
			Context.Stop = TokenStream.LT(-1);
			State = 3621;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,318,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new FunctionArgListContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_functionArgList);
					State = 3616;
					if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
					State = 3617;
					Match(COMMA);
					State = 3618;
					functionArg();
					}
					} 
				}
				State = 3623;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,318,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class FunctionArgContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NAME() { return GetToken(Fortran90Parser.NAME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGN() { return GetToken(Fortran90Parser.ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public FunctionArgContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionArg; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortran90ParserListener typedListener = listener as IFortran90ParserListener;
			if (typedListener != null) typedListener.EnterFunctionArg(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortran90ParserListener typedListener = listener as IFortran90ParserListener;
			if (typedListener != null) typedListener.ExitFunctionArg(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFortran90ParserVisitor<TResult> typedVisitor = visitor as IFortran90ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionArg(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionArgContext functionArg() {
		FunctionArgContext _localctx = new FunctionArgContext(Context, State);
		EnterRule(_localctx, 668, RULE_functionArg);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3624;
			Match(NAME);
			State = 3625;
			Match(ASSIGN);
			State = 3626;
			expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NameDataRefContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NAME() { return GetToken(Fortran90Parser.NAME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REAL() { return GetToken(Fortran90Parser.REAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SIZE() { return GetToken(Fortran90Parser.SIZE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ComplexDataRefTailContext[] complexDataRefTail() {
			return GetRuleContexts<ComplexDataRefTailContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ComplexDataRefTailContext complexDataRefTail(int i) {
			return GetRuleContext<ComplexDataRefTailContext>(i);
		}
		public NameDataRefContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_nameDataRef; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortran90ParserListener typedListener = listener as IFortran90ParserListener;
			if (typedListener != null) typedListener.EnterNameDataRef(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortran90ParserListener typedListener = listener as IFortran90ParserListener;
			if (typedListener != null) typedListener.ExitNameDataRef(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFortran90ParserVisitor<TResult> typedVisitor = visitor as IFortran90ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNameDataRef(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NameDataRefContext nameDataRef() {
		NameDataRefContext _localctx = new NameDataRefContext(Context, State);
		EnterRule(_localctx, 670, RULE_nameDataRef);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 3628;
			_la = TokenStream.LA(1);
			if ( !(_la==REAL || _la==SIZE || _la==NAME) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 3632;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,319,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 3629;
					complexDataRefTail();
					}
					} 
				}
				State = 3634;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,319,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ComplexDataRefTailContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SectionSubscriptRefContext sectionSubscriptRef() {
			return GetRuleContext<SectionSubscriptRefContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PCT() { return GetToken(Fortran90Parser.PCT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NAME() { return GetToken(Fortran90Parser.NAME, 0); }
		public ComplexDataRefTailContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_complexDataRefTail; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortran90ParserListener typedListener = listener as IFortran90ParserListener;
			if (typedListener != null) typedListener.EnterComplexDataRefTail(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortran90ParserListener typedListener = listener as IFortran90ParserListener;
			if (typedListener != null) typedListener.ExitComplexDataRefTail(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFortran90ParserVisitor<TResult> typedVisitor = visitor as IFortran90ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitComplexDataRefTail(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ComplexDataRefTailContext complexDataRefTail() {
		ComplexDataRefTailContext _localctx = new ComplexDataRefTailContext(Context, State);
		EnterRule(_localctx, 672, RULE_complexDataRefTail);
		try {
			State = 3638;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case LPAREN:
				EnterOuterAlt(_localctx, 1);
				{
				State = 3635;
				sectionSubscriptRef();
				}
				break;
			case PCT:
				EnterOuterAlt(_localctx, 2);
				{
				State = 3636;
				Match(PCT);
				State = 3637;
				Match(NAME);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SectionSubscriptRefContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(Fortran90Parser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SectionSubscriptListContext sectionSubscriptList() {
			return GetRuleContext<SectionSubscriptListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(Fortran90Parser.RPAREN, 0); }
		public SectionSubscriptRefContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sectionSubscriptRef; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortran90ParserListener typedListener = listener as IFortran90ParserListener;
			if (typedListener != null) typedListener.EnterSectionSubscriptRef(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortran90ParserListener typedListener = listener as IFortran90ParserListener;
			if (typedListener != null) typedListener.ExitSectionSubscriptRef(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFortran90ParserVisitor<TResult> typedVisitor = visitor as IFortran90ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSectionSubscriptRef(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SectionSubscriptRefContext sectionSubscriptRef() {
		SectionSubscriptRefContext _localctx = new SectionSubscriptRefContext(Context, State);
		EnterRule(_localctx, 674, RULE_sectionSubscriptRef);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3640;
			Match(LPAREN);
			State = 3641;
			sectionSubscriptList();
			State = 3642;
			Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SectionSubscriptListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SectionSubscriptContext[] sectionSubscript() {
			return GetRuleContexts<SectionSubscriptContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SectionSubscriptContext sectionSubscript(int i) {
			return GetRuleContext<SectionSubscriptContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(Fortran90Parser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(Fortran90Parser.COMMA, i);
		}
		public SectionSubscriptListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sectionSubscriptList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortran90ParserListener typedListener = listener as IFortran90ParserListener;
			if (typedListener != null) typedListener.EnterSectionSubscriptList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortran90ParserListener typedListener = listener as IFortran90ParserListener;
			if (typedListener != null) typedListener.ExitSectionSubscriptList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFortran90ParserVisitor<TResult> typedVisitor = visitor as IFortran90ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSectionSubscriptList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SectionSubscriptListContext sectionSubscriptList() {
		SectionSubscriptListContext _localctx = new SectionSubscriptListContext(Context, State);
		EnterRule(_localctx, 676, RULE_sectionSubscriptList);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 3644;
			sectionSubscript();
			State = 3649;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,321,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 3645;
					Match(COMMA);
					State = 3646;
					sectionSubscript();
					}
					} 
				}
				State = 3651;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,321,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SectionSubscriptContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SubscriptTripletTailContext subscriptTripletTail() {
			return GetRuleContext<SubscriptTripletTailContext>(0);
		}
		public SectionSubscriptContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sectionSubscript; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortran90ParserListener typedListener = listener as IFortran90ParserListener;
			if (typedListener != null) typedListener.EnterSectionSubscript(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortran90ParserListener typedListener = listener as IFortran90ParserListener;
			if (typedListener != null) typedListener.ExitSectionSubscript(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFortran90ParserVisitor<TResult> typedVisitor = visitor as IFortran90ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSectionSubscript(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SectionSubscriptContext sectionSubscript() {
		SectionSubscriptContext _localctx = new SectionSubscriptContext(Context, State);
		EnterRule(_localctx, 678, RULE_sectionSubscript);
		int _la;
		try {
			State = 3657;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case DOP:
			case REAL:
			case SIZE:
			case LPAREN:
			case MINUS:
			case PLUS:
			case LNOT:
			case TRUE:
			case FALSE:
			case OBRACKETSLASH:
			case SCON:
			case RDCON:
			case ICON:
			case NAME:
				EnterOuterAlt(_localctx, 1);
				{
				State = 3652;
				expression(0);
				State = 3654;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==DOUBLECOLON || _la==COLON) {
					{
					State = 3653;
					subscriptTripletTail();
					}
				}

				}
				break;
			case DOUBLECOLON:
			case COLON:
				EnterOuterAlt(_localctx, 2);
				{
				State = 3656;
				subscriptTripletTail();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SubscriptTripletTailContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COLON() { return GetTokens(Fortran90Parser.COLON); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON(int i) {
			return GetToken(Fortran90Parser.COLON, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOUBLECOLON() { return GetToken(Fortran90Parser.DOUBLECOLON, 0); }
		public SubscriptTripletTailContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_subscriptTripletTail; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortran90ParserListener typedListener = listener as IFortran90ParserListener;
			if (typedListener != null) typedListener.EnterSubscriptTripletTail(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortran90ParserListener typedListener = listener as IFortran90ParserListener;
			if (typedListener != null) typedListener.ExitSubscriptTripletTail(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFortran90ParserVisitor<TResult> typedVisitor = visitor as IFortran90ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSubscriptTripletTail(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SubscriptTripletTailContext subscriptTripletTail() {
		SubscriptTripletTailContext _localctx = new SubscriptTripletTailContext(Context, State);
		EnterRule(_localctx, 680, RULE_subscriptTripletTail);
		int _la;
		try {
			State = 3670;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,325,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 3659;
				Match(COLON);
				State = 3661;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==DOP || _la==REAL || ((((_la - 84)) & ~0x3f) == 0 && ((1L << (_la - 84)) & 4926361848250369L) != 0) || ((((_la - 149)) & ~0x3f) == 0 && ((1L << (_la - 149)) & 688004268035L) != 0)) {
					{
					State = 3660;
					expression(0);
					}
				}

				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 3663;
				Match(COLON);
				State = 3664;
				expression(0);
				State = 3665;
				Match(COLON);
				State = 3666;
				expression(0);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 3668;
				Match(DOUBLECOLON);
				State = 3669;
				expression(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LogicalConstantContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TRUE() { return GetToken(Fortran90Parser.TRUE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FALSE() { return GetToken(Fortran90Parser.FALSE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNDERSCORE() { return GetToken(Fortran90Parser.UNDERSCORE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public KindParamContext kindParam() {
			return GetRuleContext<KindParamContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT() { return GetToken(Fortran90Parser.DOT, 0); }
		public LogicalConstantContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_logicalConstant; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortran90ParserListener typedListener = listener as IFortran90ParserListener;
			if (typedListener != null) typedListener.EnterLogicalConstant(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortran90ParserListener typedListener = listener as IFortran90ParserListener;
			if (typedListener != null) typedListener.ExitLogicalConstant(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFortran90ParserVisitor<TResult> typedVisitor = visitor as IFortran90ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLogicalConstant(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LogicalConstantContext logicalConstant() {
		LogicalConstantContext _localctx = new LogicalConstantContext(Context, State);
		EnterRule(_localctx, 682, RULE_logicalConstant);
		int _la;
		try {
			State = 3681;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,326,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 3672;
				_la = TokenStream.LA(1);
				if ( !(_la==TRUE || _la==FALSE) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 3673;
				Match(TRUE);
				State = 3674;
				Match(UNDERSCORE);
				State = 3675;
				kindParam();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 3676;
				Match(FALSE);
				State = 3677;
				Match(UNDERSCORE);
				State = 3678;
				kindParam();
				State = 3679;
				Match(DOT);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class KindParamContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ICON() { return GetToken(Fortran90Parser.ICON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NamedConstantUseContext namedConstantUse() {
			return GetRuleContext<NamedConstantUseContext>(0);
		}
		public KindParamContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_kindParam; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortran90ParserListener typedListener = listener as IFortran90ParserListener;
			if (typedListener != null) typedListener.EnterKindParam(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortran90ParserListener typedListener = listener as IFortran90ParserListener;
			if (typedListener != null) typedListener.ExitKindParam(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFortran90ParserVisitor<TResult> typedVisitor = visitor as IFortran90ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitKindParam(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public KindParamContext kindParam() {
		KindParamContext _localctx = new KindParamContext(Context, State);
		EnterRule(_localctx, 684, RULE_kindParam);
		try {
			State = 3685;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ICON:
				EnterOuterAlt(_localctx, 1);
				{
				State = 3683;
				Match(ICON);
				}
				break;
			case NAME:
				EnterOuterAlt(_localctx, 2);
				{
				State = 3684;
				namedConstantUse();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UnsignedArithmeticConstantContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ICON() { return GetToken(Fortran90Parser.ICON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RDCON() { return GetToken(Fortran90Parser.RDCON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ComplexConstContext complexConst() {
			return GetRuleContext<ComplexConstContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNDERSCORE() { return GetToken(Fortran90Parser.UNDERSCORE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public KindParamContext kindParam() {
			return GetRuleContext<KindParamContext>(0);
		}
		public UnsignedArithmeticConstantContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unsignedArithmeticConstant; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortran90ParserListener typedListener = listener as IFortran90ParserListener;
			if (typedListener != null) typedListener.EnterUnsignedArithmeticConstant(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortran90ParserListener typedListener = listener as IFortran90ParserListener;
			if (typedListener != null) typedListener.ExitUnsignedArithmeticConstant(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFortran90ParserVisitor<TResult> typedVisitor = visitor as IFortran90ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnsignedArithmeticConstant(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UnsignedArithmeticConstantContext unsignedArithmeticConstant() {
		UnsignedArithmeticConstantContext _localctx = new UnsignedArithmeticConstantContext(Context, State);
		EnterRule(_localctx, 686, RULE_unsignedArithmeticConstant);
		int _la;
		try {
			State = 3695;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,328,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 3687;
				_la = TokenStream.LA(1);
				if ( !(_la==RDCON || _la==ICON) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 3688;
				complexConst();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 3689;
				Match(ICON);
				State = 3690;
				Match(UNDERSCORE);
				State = 3691;
				kindParam();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 3692;
				Match(RDCON);
				State = 3693;
				Match(UNDERSCORE);
				State = 3694;
				kindParam();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ComplexConstContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(Fortran90Parser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ComplexComponentContext complexComponent() {
			return GetRuleContext<ComplexComponentContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA() { return GetToken(Fortran90Parser.COMMA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(Fortran90Parser.RPAREN, 0); }
		public ComplexConstContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_complexConst; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortran90ParserListener typedListener = listener as IFortran90ParserListener;
			if (typedListener != null) typedListener.EnterComplexConst(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortran90ParserListener typedListener = listener as IFortran90ParserListener;
			if (typedListener != null) typedListener.ExitComplexConst(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFortran90ParserVisitor<TResult> typedVisitor = visitor as IFortran90ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitComplexConst(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ComplexConstContext complexConst() {
		ComplexConstContext _localctx = new ComplexConstContext(Context, State);
		EnterRule(_localctx, 688, RULE_complexConst);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3697;
			Match(LPAREN);
			State = 3698;
			complexComponent();
			State = 3699;
			Match(COMMA);
			State = 3700;
			Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ComplexComponentContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ICON() { return GetToken(Fortran90Parser.ICON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PLUS() { return GetToken(Fortran90Parser.PLUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUS() { return GetToken(Fortran90Parser.MINUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RDCON() { return GetToken(Fortran90Parser.RDCON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NAME() { return GetToken(Fortran90Parser.NAME, 0); }
		public ComplexComponentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_complexComponent; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortran90ParserListener typedListener = listener as IFortran90ParserListener;
			if (typedListener != null) typedListener.EnterComplexComponent(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortran90ParserListener typedListener = listener as IFortran90ParserListener;
			if (typedListener != null) typedListener.ExitComplexComponent(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFortran90ParserVisitor<TResult> typedVisitor = visitor as IFortran90ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitComplexComponent(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ComplexComponentContext complexComponent() {
		ComplexComponentContext _localctx = new ComplexComponentContext(Context, State);
		EnterRule(_localctx, 690, RULE_complexComponent);
		int _la;
		try {
			State = 3708;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case MINUS:
			case PLUS:
			case ICON:
				EnterOuterAlt(_localctx, 1);
				{
				State = 3703;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==MINUS || _la==PLUS) {
					{
					State = 3702;
					_la = TokenStream.LA(1);
					if ( !(_la==MINUS || _la==PLUS) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
				}

				State = 3705;
				Match(ICON);
				}
				break;
			case RDCON:
				EnterOuterAlt(_localctx, 2);
				{
				State = 3706;
				Match(RDCON);
				}
				break;
			case NAME:
				EnterOuterAlt(_localctx, 3);
				{
				State = 3707;
				Match(NAME);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConstantExprContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ConstantExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constantExpr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortran90ParserListener typedListener = listener as IFortran90ParserListener;
			if (typedListener != null) typedListener.EnterConstantExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortran90ParserListener typedListener = listener as IFortran90ParserListener;
			if (typedListener != null) typedListener.ExitConstantExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFortran90ParserVisitor<TResult> typedVisitor = visitor as IFortran90ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConstantExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConstantExprContext constantExpr() {
		ConstantExprContext _localctx = new ConstantExprContext(Context, State);
		EnterRule(_localctx, 692, RULE_constantExpr);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3710;
			expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IfStmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF() { return GetToken(Fortran90Parser.IF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(Fortran90Parser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(Fortran90Parser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ActionStmtContext actionStmt() {
			return GetRuleContext<ActionStmtContext>(0);
		}
		public IfStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ifStmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortran90ParserListener typedListener = listener as IFortran90ParserListener;
			if (typedListener != null) typedListener.EnterIfStmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortran90ParserListener typedListener = listener as IFortran90ParserListener;
			if (typedListener != null) typedListener.ExitIfStmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFortran90ParserVisitor<TResult> typedVisitor = visitor as IFortran90ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIfStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IfStmtContext ifStmt() {
		IfStmtContext _localctx = new IfStmtContext(Context, State);
		EnterRule(_localctx, 694, RULE_ifStmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3712;
			Match(IF);
			State = 3713;
			Match(LPAREN);
			State = 3714;
			expression(0);
			State = 3715;
			Match(RPAREN);
			State = 3716;
			actionStmt();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 6: return bodyPlusInternals_sempred((BodyPlusInternalsContext)_localctx, predIndex);
		case 21: return blockDataBody_sempred((BlockDataBodyContext)_localctx, predIndex);
		case 25: return fmtSpec_sempred((FmtSpecContext)_localctx, predIndex);
		case 47: return namelistGroups_sempred((NamelistGroupsContext)_localctx, predIndex);
		case 81: return comlist_sempred((ComlistContext)_localctx, predIndex);
		case 87: return attrSpecSeq_sempred((AttrSpecSeqContext)_localctx, predIndex);
		case 93: return assumedShapeSpecList_sempred((AssumedShapeSpecListContext)_localctx, predIndex);
		case 101: return interfaceBlockBody_sempred((InterfaceBlockBodyContext)_localctx, predIndex);
		case 115: return subprogramInterfaceBody_sempred((SubprogramInterfaceBodyContext)_localctx, predIndex);
		case 120: return derivedTypeBody_sempred((DerivedTypeBodyContext)_localctx, predIndex);
		case 151: return moduleBody_sempred((ModuleBodyContext)_localctx, predIndex);
		case 162: return elseWhere_sempred((ElseWhereContext)_localctx, predIndex);
		case 165: return where_sempred((WhereContext)_localctx, predIndex);
		case 171: return selectCaseBody_sempred((SelectCaseBodyContext)_localctx, predIndex);
		case 210: return structureComponent_sempred((StructureComponentContext)_localctx, predIndex);
		case 225: return pointerField_sempred((PointerFieldContext)_localctx, predIndex);
		case 233: return allocateObject_sempred((AllocateObjectContext)_localctx, predIndex);
		case 237: return ioControlSpecList_sempred((IoControlSpecListContext)_localctx, predIndex);
		case 253: return rdIoCtlSpecList_sempred((RdIoCtlSpecListContext)_localctx, predIndex);
		case 257: return outputItemList1_sempred((OutputItemList1Context)_localctx, predIndex);
		case 299: return uFExpr_sempred((UFExprContext)_localctx, predIndex);
		case 300: return uFTerm_sempred((UFTermContext)_localctx, predIndex);
		case 312: return expression_sempred((ExpressionContext)_localctx, predIndex);
		case 330: return acValueList1_sempred((AcValueList1Context)_localctx, predIndex);
		case 333: return functionArgList_sempred((FunctionArgListContext)_localctx, predIndex);
		}
		return true;
	}
	private bool bodyPlusInternals_sempred(BodyPlusInternalsContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 1);
		}
		return true;
	}
	private bool blockDataBody_sempred(BlockDataBodyContext _localctx, int predIndex) {
		switch (predIndex) {
		case 1: return Precpred(Context, 1);
		}
		return true;
	}
	private bool fmtSpec_sempred(FmtSpecContext _localctx, int predIndex) {
		switch (predIndex) {
		case 2: return Precpred(Context, 5);
		case 3: return Precpred(Context, 4);
		case 4: return Precpred(Context, 3);
		case 5: return Precpred(Context, 2);
		case 6: return Precpred(Context, 1);
		}
		return true;
	}
	private bool namelistGroups_sempred(NamelistGroupsContext _localctx, int predIndex) {
		switch (predIndex) {
		case 7: return Precpred(Context, 3);
		case 8: return Precpred(Context, 2);
		case 9: return Precpred(Context, 1);
		}
		return true;
	}
	private bool comlist_sempred(ComlistContext _localctx, int predIndex) {
		switch (predIndex) {
		case 10: return Precpred(Context, 2);
		case 11: return Precpred(Context, 1);
		}
		return true;
	}
	private bool attrSpecSeq_sempred(AttrSpecSeqContext _localctx, int predIndex) {
		switch (predIndex) {
		case 12: return Precpred(Context, 1);
		}
		return true;
	}
	private bool assumedShapeSpecList_sempred(AssumedShapeSpecListContext _localctx, int predIndex) {
		switch (predIndex) {
		case 13: return Precpred(Context, 1);
		}
		return true;
	}
	private bool interfaceBlockBody_sempred(InterfaceBlockBodyContext _localctx, int predIndex) {
		switch (predIndex) {
		case 14: return Precpred(Context, 1);
		}
		return true;
	}
	private bool subprogramInterfaceBody_sempred(SubprogramInterfaceBodyContext _localctx, int predIndex) {
		switch (predIndex) {
		case 15: return Precpred(Context, 1);
		}
		return true;
	}
	private bool derivedTypeBody_sempred(DerivedTypeBodyContext _localctx, int predIndex) {
		switch (predIndex) {
		case 16: return Precpred(Context, 1);
		}
		return true;
	}
	private bool moduleBody_sempred(ModuleBodyContext _localctx, int predIndex) {
		switch (predIndex) {
		case 17: return Precpred(Context, 2);
		case 18: return Precpred(Context, 1);
		}
		return true;
	}
	private bool elseWhere_sempred(ElseWhereContext _localctx, int predIndex) {
		switch (predIndex) {
		case 19: return Precpred(Context, 1);
		}
		return true;
	}
	private bool where_sempred(WhereContext _localctx, int predIndex) {
		switch (predIndex) {
		case 20: return Precpred(Context, 1);
		}
		return true;
	}
	private bool selectCaseBody_sempred(SelectCaseBodyContext _localctx, int predIndex) {
		switch (predIndex) {
		case 21: return Precpred(Context, 1);
		}
		return true;
	}
	private bool structureComponent_sempred(StructureComponentContext _localctx, int predIndex) {
		switch (predIndex) {
		case 22: return Precpred(Context, 1);
		}
		return true;
	}
	private bool pointerField_sempred(PointerFieldContext _localctx, int predIndex) {
		switch (predIndex) {
		case 23: return Precpred(Context, 1);
		}
		return true;
	}
	private bool allocateObject_sempred(AllocateObjectContext _localctx, int predIndex) {
		switch (predIndex) {
		case 24: return Precpred(Context, 1);
		}
		return true;
	}
	private bool ioControlSpecList_sempred(IoControlSpecListContext _localctx, int predIndex) {
		switch (predIndex) {
		case 25: return Precpred(Context, 1);
		}
		return true;
	}
	private bool rdIoCtlSpecList_sempred(RdIoCtlSpecListContext _localctx, int predIndex) {
		switch (predIndex) {
		case 26: return Precpred(Context, 1);
		}
		return true;
	}
	private bool outputItemList1_sempred(OutputItemList1Context _localctx, int predIndex) {
		switch (predIndex) {
		case 27: return Precpred(Context, 2);
		case 28: return Precpred(Context, 1);
		}
		return true;
	}
	private bool uFExpr_sempred(UFExprContext _localctx, int predIndex) {
		switch (predIndex) {
		case 29: return Precpred(Context, 1);
		}
		return true;
	}
	private bool uFTerm_sempred(UFTermContext _localctx, int predIndex) {
		switch (predIndex) {
		case 30: return Precpred(Context, 2);
		case 31: return Precpred(Context, 1);
		}
		return true;
	}
	private bool expression_sempred(ExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 32: return Precpred(Context, 1);
		}
		return true;
	}
	private bool acValueList1_sempred(AcValueList1Context _localctx, int predIndex) {
		switch (predIndex) {
		case 33: return Precpred(Context, 2);
		case 34: return Precpred(Context, 1);
		}
		return true;
	}
	private bool functionArgList_sempred(FunctionArgListContext _localctx, int predIndex) {
		switch (predIndex) {
		case 35: return Precpred(Context, 2);
		}
		return true;
	}

	private static int[] _serializedATN = {
		4,1,195,3719,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,
		7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,7,14,
		2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,7,21,
		2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,7,28,
		2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,2,35,7,35,
		2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,2,42,7,42,
		2,43,7,43,2,44,7,44,2,45,7,45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,
		2,50,7,50,2,51,7,51,2,52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,7,56,
		2,57,7,57,2,58,7,58,2,59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,7,63,
		2,64,7,64,2,65,7,65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,2,70,7,70,
		2,71,7,71,2,72,7,72,2,73,7,73,2,74,7,74,2,75,7,75,2,76,7,76,2,77,7,77,
		2,78,7,78,2,79,7,79,2,80,7,80,2,81,7,81,2,82,7,82,2,83,7,83,2,84,7,84,
		2,85,7,85,2,86,7,86,2,87,7,87,2,88,7,88,2,89,7,89,2,90,7,90,2,91,7,91,
		2,92,7,92,2,93,7,93,2,94,7,94,2,95,7,95,2,96,7,96,2,97,7,97,2,98,7,98,
		2,99,7,99,2,100,7,100,2,101,7,101,2,102,7,102,2,103,7,103,2,104,7,104,
		2,105,7,105,2,106,7,106,2,107,7,107,2,108,7,108,2,109,7,109,2,110,7,110,
		2,111,7,111,2,112,7,112,2,113,7,113,2,114,7,114,2,115,7,115,2,116,7,116,
		2,117,7,117,2,118,7,118,2,119,7,119,2,120,7,120,2,121,7,121,2,122,7,122,
		2,123,7,123,2,124,7,124,2,125,7,125,2,126,7,126,2,127,7,127,2,128,7,128,
		2,129,7,129,2,130,7,130,2,131,7,131,2,132,7,132,2,133,7,133,2,134,7,134,
		2,135,7,135,2,136,7,136,2,137,7,137,2,138,7,138,2,139,7,139,2,140,7,140,
		2,141,7,141,2,142,7,142,2,143,7,143,2,144,7,144,2,145,7,145,2,146,7,146,
		2,147,7,147,2,148,7,148,2,149,7,149,2,150,7,150,2,151,7,151,2,152,7,152,
		2,153,7,153,2,154,7,154,2,155,7,155,2,156,7,156,2,157,7,157,2,158,7,158,
		2,159,7,159,2,160,7,160,2,161,7,161,2,162,7,162,2,163,7,163,2,164,7,164,
		2,165,7,165,2,166,7,166,2,167,7,167,2,168,7,168,2,169,7,169,2,170,7,170,
		2,171,7,171,2,172,7,172,2,173,7,173,2,174,7,174,2,175,7,175,2,176,7,176,
		2,177,7,177,2,178,7,178,2,179,7,179,2,180,7,180,2,181,7,181,2,182,7,182,
		2,183,7,183,2,184,7,184,2,185,7,185,2,186,7,186,2,187,7,187,2,188,7,188,
		2,189,7,189,2,190,7,190,2,191,7,191,2,192,7,192,2,193,7,193,2,194,7,194,
		2,195,7,195,2,196,7,196,2,197,7,197,2,198,7,198,2,199,7,199,2,200,7,200,
		2,201,7,201,2,202,7,202,2,203,7,203,2,204,7,204,2,205,7,205,2,206,7,206,
		2,207,7,207,2,208,7,208,2,209,7,209,2,210,7,210,2,211,7,211,2,212,7,212,
		2,213,7,213,2,214,7,214,2,215,7,215,2,216,7,216,2,217,7,217,2,218,7,218,
		2,219,7,219,2,220,7,220,2,221,7,221,2,222,7,222,2,223,7,223,2,224,7,224,
		2,225,7,225,2,226,7,226,2,227,7,227,2,228,7,228,2,229,7,229,2,230,7,230,
		2,231,7,231,2,232,7,232,2,233,7,233,2,234,7,234,2,235,7,235,2,236,7,236,
		2,237,7,237,2,238,7,238,2,239,7,239,2,240,7,240,2,241,7,241,2,242,7,242,
		2,243,7,243,2,244,7,244,2,245,7,245,2,246,7,246,2,247,7,247,2,248,7,248,
		2,249,7,249,2,250,7,250,2,251,7,251,2,252,7,252,2,253,7,253,2,254,7,254,
		2,255,7,255,2,256,7,256,2,257,7,257,2,258,7,258,2,259,7,259,2,260,7,260,
		2,261,7,261,2,262,7,262,2,263,7,263,2,264,7,264,2,265,7,265,2,266,7,266,
		2,267,7,267,2,268,7,268,2,269,7,269,2,270,7,270,2,271,7,271,2,272,7,272,
		2,273,7,273,2,274,7,274,2,275,7,275,2,276,7,276,2,277,7,277,2,278,7,278,
		2,279,7,279,2,280,7,280,2,281,7,281,2,282,7,282,2,283,7,283,2,284,7,284,
		2,285,7,285,2,286,7,286,2,287,7,287,2,288,7,288,2,289,7,289,2,290,7,290,
		2,291,7,291,2,292,7,292,2,293,7,293,2,294,7,294,2,295,7,295,2,296,7,296,
		2,297,7,297,2,298,7,298,2,299,7,299,2,300,7,300,2,301,7,301,2,302,7,302,
		2,303,7,303,2,304,7,304,2,305,7,305,2,306,7,306,2,307,7,307,2,308,7,308,
		2,309,7,309,2,310,7,310,2,311,7,311,2,312,7,312,2,313,7,313,2,314,7,314,
		2,315,7,315,2,316,7,316,2,317,7,317,2,318,7,318,2,319,7,319,2,320,7,320,
		2,321,7,321,2,322,7,322,2,323,7,323,2,324,7,324,2,325,7,325,2,326,7,326,
		2,327,7,327,2,328,7,328,2,329,7,329,2,330,7,330,2,331,7,331,2,332,7,332,
		2,333,7,333,2,334,7,334,2,335,7,335,2,336,7,336,2,337,7,337,2,338,7,338,
		2,339,7,339,2,340,7,340,2,341,7,341,2,342,7,342,2,343,7,343,2,344,7,344,
		2,345,7,345,2,346,7,346,2,347,7,347,1,0,1,0,1,0,1,1,4,1,701,8,1,11,1,12,
		1,702,1,2,1,2,1,2,1,2,1,2,3,2,710,8,2,1,3,3,3,713,8,3,1,3,1,3,1,4,1,4,
		1,4,1,5,3,5,721,8,5,1,5,1,5,1,5,1,5,3,5,727,8,5,1,6,1,6,1,6,1,6,1,6,1,
		6,1,6,1,6,3,6,737,8,6,1,6,1,6,5,6,741,8,6,10,6,12,6,744,9,6,1,7,1,7,3,
		7,748,8,7,1,8,1,8,1,8,1,8,1,8,1,8,1,8,3,8,757,8,8,1,9,1,9,1,9,1,9,1,9,
		1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,3,9,776,8,9,1,10,1,10,
		1,10,5,10,781,8,10,10,10,12,10,784,9,10,1,11,1,11,1,11,1,11,1,11,1,11,
		3,11,792,8,11,1,12,1,12,1,12,5,12,797,8,12,10,12,12,12,800,9,12,1,13,1,
		13,1,13,1,13,1,14,1,14,1,15,1,15,1,15,1,15,1,15,1,16,4,16,814,8,16,11,
		16,12,16,815,1,17,1,17,1,17,1,17,1,18,1,18,1,18,1,18,3,18,826,8,18,3,18,
		828,8,18,1,19,1,19,1,19,1,19,1,19,1,19,1,19,3,19,837,8,19,1,20,1,20,3,
		20,841,8,20,1,20,1,20,1,20,3,20,846,8,20,3,20,848,8,20,1,21,1,21,1,21,
		1,21,1,21,5,21,855,8,21,10,21,12,21,858,9,21,1,22,1,22,1,23,1,23,3,23,
		864,8,23,1,23,1,23,1,23,3,23,869,8,23,1,23,1,23,1,23,3,23,874,8,23,1,23,
		1,23,1,23,1,23,3,23,880,8,23,1,23,3,23,883,8,23,1,24,1,24,1,24,1,24,3,
		24,889,8,24,1,24,1,24,1,25,1,25,1,25,1,25,1,25,3,25,898,8,25,1,25,1,25,
		1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,5,25,
		915,8,25,10,25,12,25,918,9,25,1,26,1,26,1,26,1,26,1,26,1,26,1,26,1,26,
		1,26,1,26,3,26,930,8,26,1,27,1,27,1,27,1,27,1,27,1,27,1,27,1,27,1,27,3,
		27,941,8,27,1,28,1,28,1,28,1,28,1,28,1,28,1,28,1,28,3,28,951,8,28,1,29,
		1,29,1,29,1,29,1,29,1,29,1,29,3,29,960,8,29,1,30,1,30,1,30,3,30,965,8,
		30,1,30,1,30,3,30,969,8,30,1,30,3,30,972,8,30,1,31,1,31,1,31,1,31,1,31,
		1,31,1,31,1,31,1,32,1,32,3,32,984,8,32,1,32,3,32,987,8,32,1,33,1,33,1,
		33,5,33,992,8,33,10,33,12,33,995,9,33,1,34,1,34,3,34,999,8,34,1,35,1,35,
		1,35,1,35,3,35,1005,8,35,1,36,1,36,1,36,1,36,1,36,1,36,1,36,1,36,1,36,
		1,36,1,36,1,36,1,36,1,36,3,36,1021,8,36,1,37,1,37,3,37,1025,8,37,1,37,
		1,37,1,38,1,38,1,38,5,38,1032,8,38,10,38,12,38,1035,9,38,1,39,1,39,1,39,
		1,39,1,39,1,39,3,39,1043,8,39,1,40,1,40,3,40,1047,8,40,1,40,1,40,1,41,
		1,41,1,41,5,41,1054,8,41,10,41,12,41,1057,9,41,1,42,1,42,1,42,1,42,1,42,
		1,42,3,42,1065,8,42,1,43,1,43,3,43,1069,8,43,1,43,1,43,1,44,1,44,1,44,
		5,44,1076,8,44,10,44,12,44,1079,9,44,1,45,1,45,1,46,1,46,1,46,1,47,1,47,
		1,47,1,47,1,47,1,47,1,47,1,47,1,47,1,47,1,47,1,47,1,47,1,47,1,47,1,47,
		1,47,1,47,1,47,1,47,1,47,1,47,5,47,1108,8,47,10,47,12,47,1111,9,47,1,48,
		1,48,1,49,1,49,1,50,1,50,1,50,1,50,1,50,3,50,1122,8,50,1,50,1,50,1,51,
		1,51,1,51,1,51,1,52,1,52,1,53,1,53,1,54,1,54,1,55,1,55,3,55,1138,8,55,
		1,55,1,55,1,56,1,56,1,56,5,56,1145,8,56,10,56,12,56,1148,9,56,1,57,1,57,
		1,57,1,57,1,57,1,57,3,57,1156,8,57,1,58,1,58,1,59,1,59,3,59,1162,8,59,
		1,59,1,59,3,59,1166,8,59,1,60,1,60,1,60,5,60,1171,8,60,10,60,12,60,1174,
		9,60,1,61,1,61,3,61,1178,8,61,1,62,1,62,1,63,1,63,1,63,1,63,1,63,1,63,
		3,63,1188,8,63,1,64,4,64,1191,8,64,11,64,12,64,1192,1,65,1,65,3,65,1197,
		8,65,1,66,1,66,1,66,1,66,1,67,1,67,1,67,1,68,4,68,1207,8,68,11,68,12,68,
		1208,1,69,1,69,1,70,1,70,1,70,1,71,4,71,1217,8,71,11,71,12,71,1218,1,72,
		1,72,1,73,1,73,1,73,1,74,4,74,1227,8,74,11,74,12,74,1228,1,75,1,75,1,75,
		1,75,1,75,1,75,1,76,1,76,1,77,4,77,1240,8,77,11,77,12,77,1241,1,78,1,78,
		1,78,1,78,1,78,3,78,1249,8,78,1,79,4,79,1252,8,79,11,79,12,79,1253,1,80,
		1,80,1,80,1,81,1,81,3,81,1261,8,81,1,81,1,81,1,81,1,81,1,81,3,81,1268,
		8,81,1,81,1,81,1,81,1,81,1,81,5,81,1275,8,81,10,81,12,81,1278,9,81,1,82,
		1,82,3,82,1282,8,82,1,83,1,83,1,83,1,83,1,83,1,84,1,84,1,84,1,84,1,84,
		1,84,1,84,1,84,3,84,1297,8,84,1,85,1,85,1,86,1,86,1,86,1,86,1,86,3,86,
		1306,8,86,1,86,1,86,1,86,3,86,1311,8,86,1,87,1,87,1,87,1,87,1,87,1,87,
		1,87,5,87,1320,8,87,10,87,12,87,1323,9,87,1,88,1,88,1,88,1,88,1,88,1,88,
		1,88,1,88,1,88,1,88,1,88,1,88,1,88,1,88,1,88,1,88,1,88,1,88,1,88,3,88,
		1344,8,88,1,89,1,89,1,89,5,89,1349,8,89,10,89,12,89,1352,9,89,1,90,1,90,
		1,90,1,90,1,90,1,90,1,90,1,90,1,90,1,90,1,90,1,90,1,90,1,90,1,90,1,90,
		1,90,1,90,1,90,1,90,1,90,1,90,1,90,1,90,1,90,1,90,1,90,1,90,1,90,1,90,
		1,90,1,90,1,90,1,90,1,90,1,90,1,90,1,90,1,90,1,90,1,90,1,90,1,90,3,90,
		1397,8,90,1,91,1,91,1,92,1,92,1,92,1,92,3,92,1405,8,92,1,93,1,93,1,93,
		1,93,1,93,1,93,1,93,1,93,1,93,3,93,1416,8,93,1,93,1,93,1,93,5,93,1421,
		8,93,10,93,12,93,1424,9,93,1,94,1,94,1,94,1,94,3,94,1430,8,94,1,95,1,95,
		1,95,1,95,1,95,1,95,1,95,1,95,1,95,1,95,1,95,1,95,1,95,1,95,1,95,3,95,
		1447,8,95,1,96,1,96,1,96,1,96,1,97,1,97,1,97,3,97,1456,8,97,1,97,3,97,
		1459,8,97,1,98,1,98,1,98,1,98,1,98,3,98,1466,8,98,1,99,1,99,1,99,1,99,
		1,99,1,99,1,99,1,99,1,99,3,99,1477,8,99,1,100,1,100,1,100,1,100,1,100,
		1,100,1,100,1,100,1,100,1,100,1,100,1,100,1,100,3,100,1492,8,100,1,101,
		1,101,1,101,1,101,1,101,5,101,1499,8,101,10,101,12,101,1502,9,101,1,102,
		1,102,3,102,1506,8,102,1,103,1,103,1,103,1,103,1,104,1,104,1,104,5,104,
		1515,8,104,10,104,12,104,1518,9,104,1,105,1,105,1,106,1,106,1,106,1,106,
		1,106,1,106,1,106,3,106,1529,8,106,1,107,1,107,3,107,1533,8,107,1,107,
		1,107,1,108,1,108,1,108,1,108,3,108,1541,8,108,3,108,1543,8,108,1,109,
		1,109,1,110,3,110,1548,8,110,1,110,3,110,1551,8,110,1,110,1,110,1,110,
		1,110,1,110,3,110,1558,8,110,1,111,1,111,3,111,1562,8,111,1,111,1,111,
		1,112,1,112,3,112,1568,8,112,1,112,1,112,1,113,1,113,1,113,5,113,1575,
		8,113,10,113,12,113,1578,9,113,1,114,1,114,1,115,1,115,1,115,1,115,1,115,
		5,115,1587,8,115,10,115,12,115,1590,9,115,1,116,1,116,1,116,1,116,3,116,
		1596,8,116,3,116,1598,8,116,1,117,1,117,1,117,1,117,1,118,1,118,1,118,
		1,118,1,118,1,118,1,118,1,118,3,118,1612,8,118,1,119,1,119,1,119,1,119,
		1,119,1,119,1,119,1,119,1,119,1,119,3,119,1624,8,119,1,120,1,120,1,120,
		1,120,1,120,5,120,1631,8,120,10,120,12,120,1634,9,120,1,121,1,121,3,121,
		1638,8,121,1,122,1,122,1,123,1,123,1,123,1,123,1,123,1,123,1,123,1,123,
		1,123,1,123,1,123,1,123,1,123,3,123,1655,8,123,1,124,1,124,1,124,5,124,
		1660,8,124,10,124,12,124,1663,9,124,1,125,1,125,1,125,1,125,1,125,1,125,
		1,125,1,125,1,125,1,125,1,125,1,125,1,125,1,125,1,125,1,125,1,125,1,125,
		1,125,1,125,1,125,1,125,1,125,1,125,1,125,1,125,1,125,1,125,1,125,1,125,
		1,125,1,125,1,125,1,125,1,125,1,125,1,125,1,125,1,125,1,125,1,125,1,125,
		1,125,3,125,1708,8,125,1,126,1,126,1,127,1,127,1,127,5,127,1715,8,127,
		10,127,12,127,1718,9,127,1,128,1,128,1,128,1,128,1,128,1,128,3,128,1726,
		8,128,1,129,1,129,3,129,1730,8,129,1,130,1,130,1,130,5,130,1735,8,130,
		10,130,12,130,1738,9,130,1,131,1,131,1,131,1,131,1,131,3,131,1745,8,131,
		1,132,1,132,1,133,1,133,1,134,1,134,1,134,5,134,1754,8,134,10,134,12,134,
		1757,9,134,1,135,1,135,1,136,1,136,1,136,1,136,1,136,1,136,1,136,1,136,
		1,136,1,136,1,136,1,136,1,136,1,136,1,136,1,136,1,136,1,136,1,136,1,136,
		1,136,1,136,1,136,1,136,1,136,3,136,1786,8,136,1,137,1,137,1,137,1,137,
		1,137,1,137,1,137,1,137,1,137,1,137,3,137,1798,8,137,1,138,1,138,1,139,
		1,139,1,139,1,139,1,139,1,139,1,139,1,139,1,139,1,139,1,139,1,139,1,139,
		1,139,1,139,1,139,1,139,1,139,1,139,1,139,1,139,1,139,1,139,1,139,1,139,
		1,139,1,139,1,139,1,139,1,139,1,139,1,139,1,139,1,139,3,139,1836,8,139,
		1,140,1,140,1,140,1,140,1,140,1,140,3,140,1844,8,140,1,141,1,141,1,141,
		1,141,1,141,3,141,1851,8,141,1,142,1,142,3,142,1855,8,142,1,142,1,142,
		1,142,1,142,1,142,1,142,1,142,1,142,1,142,1,142,1,142,1,142,1,142,3,142,
		1870,8,142,1,143,1,143,1,144,1,144,1,144,1,144,1,144,1,145,1,145,1,145,
		1,145,1,146,1,146,1,147,1,147,3,147,1887,8,147,1,148,1,148,1,148,1,149,
		1,149,1,150,1,150,1,151,1,151,1,151,3,151,1899,8,151,1,151,1,151,1,151,
		1,151,5,151,1905,8,151,10,151,12,151,1908,9,151,1,152,1,152,3,152,1912,
		8,152,1,153,1,153,1,154,1,154,3,154,1918,8,154,1,155,1,155,1,155,1,155,
		1,156,1,156,1,157,1,157,3,157,1928,8,157,1,157,1,157,1,157,1,157,1,157,
		1,157,1,157,1,157,3,157,1938,8,157,1,157,1,157,1,157,1,157,1,157,1,157,
		1,157,1,157,1,157,1,157,1,157,1,157,1,157,1,157,3,157,1954,8,157,1,158,
		4,158,1957,8,158,11,158,12,158,1958,1,159,1,159,3,159,1963,8,159,1,160,
		1,160,1,160,1,160,1,160,3,160,1970,8,160,1,161,1,161,1,161,1,161,1,161,
		1,161,3,161,1978,8,161,1,162,1,162,1,162,1,162,1,162,1,162,5,162,1986,
		8,162,10,162,12,162,1989,9,162,1,163,1,163,1,164,1,164,1,164,3,164,1996,
		8,164,1,165,1,165,1,165,1,165,1,165,5,165,2003,8,165,10,165,12,165,2006,
		9,165,1,166,1,166,1,166,1,166,1,166,1,167,1,167,1,168,1,168,1,168,1,168,
		1,168,1,168,1,168,1,168,1,168,1,168,1,168,1,168,1,168,1,168,1,168,1,168,
		1,168,1,168,1,168,1,168,1,168,1,168,1,168,1,168,1,168,1,168,1,168,1,168,
		1,168,1,168,3,168,2045,8,168,1,169,1,169,1,169,1,169,3,169,2051,8,169,
		1,170,1,170,3,170,2055,8,170,1,170,1,170,1,170,3,170,2060,8,170,3,170,
		2062,8,170,1,171,1,171,1,171,1,171,1,171,5,171,2069,8,171,10,171,12,171,
		2072,9,171,1,172,1,172,3,172,2076,8,172,1,173,1,173,1,173,1,173,1,173,
		1,173,3,173,2084,8,173,1,174,1,174,1,174,1,174,1,174,3,174,2091,8,174,
		1,175,4,175,2094,8,175,11,175,12,175,2095,1,176,1,176,1,176,1,176,1,176,
		1,176,1,176,1,176,1,176,1,176,3,176,2108,8,176,1,177,1,177,1,177,5,177,
		2113,8,177,10,177,12,177,2116,9,177,1,177,3,177,2119,8,177,1,177,1,177,
		1,178,1,178,1,178,1,178,1,178,1,178,1,179,5,179,2130,8,179,10,179,12,179,
		2133,9,179,1,180,1,180,1,180,1,181,1,181,1,181,1,181,1,181,1,181,1,181,
		1,181,1,181,1,181,1,181,1,181,1,181,3,181,2151,8,181,1,182,1,182,1,182,
		1,183,1,183,1,184,1,184,1,184,3,184,2161,8,184,1,185,1,185,3,185,2165,
		8,185,1,186,3,186,2168,8,186,1,186,1,186,3,186,2172,8,186,1,186,5,186,
		2175,8,186,10,186,12,186,2178,9,186,1,186,1,186,1,187,1,187,3,187,2184,
		8,187,1,187,1,187,1,187,3,187,2189,8,187,3,187,2191,8,187,1,188,1,188,
		1,189,1,189,1,189,1,190,1,190,1,190,1,190,5,190,2202,8,190,10,190,12,190,
		2205,9,190,1,190,1,190,1,190,1,191,1,191,1,192,1,192,1,193,1,193,1,194,
		1,194,1,194,1,194,1,194,3,194,2221,8,194,1,195,1,195,1,195,1,195,1,196,
		1,196,1,196,3,196,2230,8,196,1,196,5,196,2233,8,196,10,196,12,196,2236,
		9,196,1,197,1,197,1,197,1,198,1,198,1,198,5,198,2244,8,198,10,198,12,198,
		2247,9,198,1,198,1,198,1,199,1,199,1,199,5,199,2254,8,199,10,199,12,199,
		2257,9,199,1,199,1,199,1,200,1,200,1,200,1,200,1,200,1,200,1,200,1,200,
		1,200,3,200,2270,8,200,1,201,1,201,3,201,2274,8,201,1,202,1,202,3,202,
		2278,8,202,1,202,3,202,2281,8,202,1,203,1,203,1,203,1,203,1,204,4,204,
		2288,8,204,11,204,12,204,2289,1,205,1,205,1,206,1,206,3,206,2296,8,206,
		1,206,1,206,1,206,1,207,1,207,1,207,1,207,1,207,1,207,1,207,1,207,1,207,
		1,207,1,207,1,207,1,207,1,207,1,207,1,207,1,207,1,207,1,207,1,207,1,207,
		1,207,3,207,2323,8,207,1,208,4,208,2326,8,208,11,208,12,208,2327,1,209,
		1,209,1,209,3,209,2333,8,209,1,210,1,210,1,210,1,210,1,210,1,210,5,210,
		2341,8,210,10,210,12,210,2344,9,210,1,211,1,211,1,211,1,211,1,211,1,211,
		1,211,1,211,3,211,2354,8,211,1,212,1,212,1,212,1,212,1,212,1,212,1,212,
		1,212,1,212,1,212,3,212,2366,8,212,1,213,1,213,1,214,3,214,2371,8,214,
		1,214,1,214,1,215,1,215,1,215,1,215,1,215,1,215,3,215,2381,8,215,1,215,
		1,215,1,215,1,215,1,215,3,215,2388,8,215,1,216,1,216,1,217,1,217,1,217,
		1,218,1,218,1,218,1,218,1,218,1,218,1,218,1,218,1,218,1,218,1,218,1,218,
		1,218,1,218,1,218,1,218,1,218,1,218,1,218,1,218,1,218,1,218,1,218,1,218,
		1,218,1,218,1,218,1,218,1,218,3,218,2424,8,218,1,219,1,219,1,219,1,219,
		1,219,1,219,1,220,1,220,1,220,1,220,1,220,3,220,2437,8,220,1,220,1,220,
		1,220,1,220,1,220,3,220,2444,8,220,1,221,1,221,1,222,1,222,1,222,1,222,
		1,222,1,223,1,223,1,223,5,223,2456,8,223,10,223,12,223,2459,9,223,1,224,
		1,224,3,224,2463,8,224,1,225,1,225,1,225,3,225,2468,8,225,1,225,1,225,
		1,225,1,225,1,225,5,225,2475,8,225,10,225,12,225,2478,9,225,1,226,1,226,
		3,226,2482,8,226,1,227,1,227,1,227,1,227,1,227,1,227,1,227,1,227,1,227,
		1,227,1,227,1,227,1,227,1,227,3,227,2498,8,227,1,228,1,228,1,228,5,228,
		2503,8,228,10,228,12,228,2506,9,228,1,229,1,229,3,229,2510,8,229,1,230,
		1,230,1,230,1,230,1,230,1,230,1,230,1,230,1,230,1,230,1,230,1,230,1,230,
		1,230,3,230,2526,8,230,1,231,1,231,1,231,5,231,2531,8,231,10,231,12,231,
		2534,9,231,1,232,1,232,1,232,1,232,3,232,2540,8,232,1,233,1,233,1,233,
		1,233,1,233,5,233,2547,8,233,10,233,12,233,2550,9,233,1,234,1,234,1,234,
		1,234,1,235,1,235,3,235,2558,8,235,1,236,1,236,1,236,1,236,1,236,3,236,
		2565,8,236,1,237,1,237,1,237,1,237,1,237,1,237,1,237,1,237,1,237,1,237,
		1,237,1,237,1,237,1,237,3,237,2581,8,237,1,237,1,237,1,237,5,237,2586,
		8,237,10,237,12,237,2589,9,237,1,238,1,238,1,238,1,239,1,239,3,239,2596,
		8,239,1,239,1,239,1,239,1,239,1,240,1,240,1,240,5,240,2605,8,240,10,240,
		12,240,2608,9,240,1,241,1,241,1,242,1,242,3,242,2614,8,242,1,243,1,243,
		1,243,1,243,1,243,1,243,1,243,3,243,2623,8,243,1,244,1,244,1,244,3,244,
		2628,8,244,1,244,1,244,1,244,3,244,2633,8,244,3,244,2635,8,244,1,245,1,
		245,1,245,1,246,1,246,1,246,1,246,1,246,1,246,1,246,1,246,1,246,1,246,
		1,246,1,246,1,246,1,246,1,246,1,246,1,246,3,246,2657,8,246,1,247,1,247,
		1,247,1,247,1,248,1,248,1,248,5,248,2666,8,248,10,248,12,248,2669,9,248,
		1,249,1,249,3,249,2673,8,249,1,250,1,250,1,250,1,250,1,250,1,250,1,250,
		1,250,1,250,3,250,2684,8,250,1,250,1,250,1,251,1,251,1,251,1,251,1,251,
		3,251,2693,8,251,1,252,1,252,1,252,1,252,1,252,1,252,1,252,3,252,2702,
		8,252,1,253,1,253,1,253,1,253,1,253,1,253,1,253,1,253,1,253,1,253,3,253,
		2714,8,253,1,253,1,253,1,253,5,253,2719,8,253,10,253,12,253,2722,9,253,
		1,254,1,254,1,254,1,254,1,254,1,254,1,254,1,254,1,254,1,254,1,254,1,254,
		1,254,1,254,1,254,1,254,1,254,1,254,1,254,1,254,1,254,1,254,1,254,1,254,
		1,254,1,254,1,254,1,254,1,254,1,254,3,254,2754,8,254,1,255,1,255,1,255,
		1,255,1,255,1,255,1,255,3,255,2763,8,255,1,256,1,256,3,256,2767,8,256,
		1,257,1,257,1,257,1,257,1,257,1,257,1,257,1,257,1,257,1,257,3,257,2779,
		8,257,1,257,1,257,1,257,1,257,1,257,1,257,5,257,2787,8,257,10,257,12,257,
		2790,9,257,1,258,1,258,1,258,1,258,1,258,1,258,1,258,1,258,1,258,3,258,
		2801,8,258,1,258,1,258,1,258,1,258,1,258,1,258,1,258,1,258,1,258,1,258,
		1,258,3,258,2814,8,258,1,258,1,258,3,258,2818,8,258,1,259,1,259,1,259,
		3,259,2823,8,259,1,260,1,260,3,260,2827,8,260,1,261,1,261,1,261,1,261,
		1,261,1,262,3,262,2835,8,262,1,262,3,262,2838,8,262,1,262,1,262,5,262,
		2842,8,262,10,262,12,262,2845,9,262,1,263,1,263,1,263,1,263,1,263,1,263,
		1,263,1,263,1,263,1,263,1,263,1,263,1,263,1,263,1,263,1,263,1,263,1,263,
		1,263,1,263,1,263,1,263,1,263,1,263,1,263,1,263,1,263,1,263,1,263,1,263,
		1,263,1,263,1,263,1,263,1,263,1,263,1,263,1,263,1,263,3,263,2886,8,263,
		1,264,1,264,1,264,1,264,1,264,1,264,1,264,1,264,1,264,1,264,1,264,1,264,
		1,264,3,264,2901,8,264,1,265,3,265,2904,8,265,1,265,3,265,2907,8,265,1,
		265,1,265,5,265,2911,8,265,10,265,12,265,2914,9,265,1,266,1,266,1,266,
		1,266,1,266,1,266,1,266,1,266,1,266,1,266,1,266,1,266,1,266,1,266,1,266,
		1,266,1,266,1,266,1,266,1,266,1,266,1,266,1,266,1,266,1,266,1,266,1,266,
		1,266,1,266,1,266,1,266,1,266,1,266,1,266,1,266,1,266,1,266,1,266,1,266,
		1,266,1,266,1,266,1,266,1,266,1,266,1,266,1,266,1,266,1,266,1,266,1,266,
		1,266,1,266,1,266,1,266,1,266,1,266,1,266,1,266,1,266,1,266,1,266,1,266,
		1,266,1,266,1,266,1,266,1,266,1,266,1,266,1,266,1,266,1,266,1,266,1,266,
		3,266,2991,8,266,1,267,1,267,1,267,3,267,2996,8,267,1,267,1,267,1,267,
		1,267,3,267,3002,8,267,1,267,1,267,1,267,1,267,1,267,1,267,1,267,1,267,
		3,267,3012,8,267,1,267,1,267,1,267,1,267,1,267,3,267,3019,8,267,1,268,
		1,268,1,268,1,269,1,269,1,269,3,269,3027,8,269,1,269,1,269,1,270,1,270,
		1,270,1,270,1,270,3,270,3036,8,270,1,270,1,270,1,271,1,271,1,271,5,271,
		3043,8,271,10,271,12,271,3046,9,271,1,272,1,272,1,272,3,272,3051,8,272,
		1,272,1,272,1,272,1,272,3,272,3057,8,272,1,272,1,272,1,272,1,272,3,272,
		3063,8,272,1,273,1,273,1,274,1,274,1,274,1,274,1,274,1,275,3,275,3073,
		8,275,1,275,3,275,3076,8,275,1,275,1,275,5,275,3080,8,275,10,275,12,275,
		3083,9,275,1,276,1,276,1,276,1,276,1,276,1,276,1,276,1,276,1,276,1,276,
		1,276,3,276,3096,8,276,1,277,1,277,5,277,3100,8,277,10,277,12,277,3103,
		9,277,1,278,1,278,1,278,1,278,1,278,3,278,3110,8,278,1,279,1,279,1,279,
		3,279,3115,8,279,1,280,1,280,1,280,1,280,1,280,1,280,1,281,1,281,1,281,
		1,281,1,281,1,281,1,281,1,281,3,281,3131,8,281,1,282,1,282,1,283,3,283,
		3136,8,283,1,283,1,283,5,283,3140,8,283,10,283,12,283,3143,9,283,1,284,
		1,284,1,284,1,284,1,284,1,284,1,284,1,284,1,284,1,284,1,284,1,284,1,284,
		1,284,3,284,3159,8,284,1,285,1,285,1,285,1,285,1,285,1,285,1,285,1,285,
		1,285,1,285,1,286,1,286,1,287,1,287,1,288,3,288,3176,8,288,1,288,1,288,
		3,288,3180,8,288,1,288,3,288,3183,8,288,1,288,1,288,1,288,1,288,3,288,
		3189,8,288,1,288,1,288,1,288,1,288,1,288,1,288,1,288,1,288,1,288,1,288,
		1,288,1,288,1,288,1,288,3,288,3205,8,288,1,289,1,289,1,289,5,289,3210,
		8,289,10,289,12,289,3213,9,289,1,289,1,289,1,290,1,290,3,290,3219,8,290,
		1,290,3,290,3222,8,290,1,290,1,290,3,290,3226,8,290,1,290,3,290,3229,8,
		290,1,290,1,290,1,290,1,290,1,290,1,290,3,290,3237,8,290,1,290,1,290,3,
		290,3241,8,290,1,291,1,291,1,291,1,292,1,292,1,292,1,292,1,292,1,293,1,
		293,1,293,1,293,1,293,1,293,1,293,3,293,3258,8,293,1,294,1,294,3,294,3262,
		8,294,1,295,3,295,3265,8,295,1,295,4,295,3268,8,295,11,295,12,295,3269,
		1,296,1,296,3,296,3274,8,296,1,297,1,297,1,297,1,297,1,297,1,297,1,297,
		1,297,1,297,3,297,3285,8,297,1,298,1,298,3,298,3289,8,298,1,299,1,299,
		1,299,1,299,3,299,3295,8,299,1,299,1,299,1,299,5,299,3300,8,299,10,299,
		12,299,3303,9,299,1,300,1,300,1,300,1,300,1,300,1,300,1,300,1,300,1,300,
		1,300,1,300,5,300,3316,8,300,10,300,12,300,3319,9,300,1,301,1,301,1,301,
		1,301,1,301,3,301,3326,8,301,1,302,1,302,1,302,1,302,1,302,1,302,1,302,
		1,302,3,302,3336,8,302,1,303,1,303,1,303,1,303,1,303,1,303,1,303,1,303,
		1,303,3,303,3347,8,303,1,304,1,304,1,305,1,305,3,305,3353,8,305,1,305,
		1,305,1,305,1,305,1,305,1,305,3,305,3361,8,305,1,306,1,306,1,306,1,307,
		1,307,1,307,1,307,3,307,3370,8,307,1,308,1,308,1,308,5,308,3375,8,308,
		10,308,12,308,3378,9,308,1,309,1,309,1,309,1,309,1,309,1,309,1,309,1,309,
		3,309,3388,8,309,1,310,3,310,3391,8,310,1,310,1,310,5,310,3395,8,310,10,
		310,12,310,3398,9,310,1,311,1,311,1,311,1,311,1,312,1,312,1,312,1,312,
		1,312,1,312,1,312,5,312,3411,8,312,10,312,12,312,3414,9,312,1,313,1,313,
		1,314,1,314,1,314,5,314,3421,8,314,10,314,12,314,3424,9,314,1,315,1,315,
		1,315,5,315,3429,8,315,10,315,12,315,3432,9,315,1,316,1,316,1,316,5,316,
		3437,8,316,10,316,12,316,3440,9,316,1,317,3,317,3443,8,317,1,317,1,317,
		1,318,1,318,1,319,1,319,1,319,1,319,5,319,3453,8,319,10,319,12,319,3456,
		9,319,1,320,1,320,1,320,3,320,3461,8,320,1,320,1,320,3,320,3465,8,320,
		1,320,5,320,3468,8,320,10,320,12,320,3471,9,320,1,321,3,321,3474,8,321,
		1,321,1,321,1,321,5,321,3479,8,321,10,321,12,321,3482,9,321,1,322,1,322,
		1,323,1,323,1,323,5,323,3489,8,323,10,323,12,323,3492,9,323,1,324,1,324,
		1,324,5,324,3497,8,324,10,324,12,324,3500,9,324,1,325,1,325,1,325,1,325,
		3,325,3506,8,325,1,326,1,326,1,327,1,327,1,327,1,327,1,327,1,327,1,327,
		1,327,1,327,1,327,3,327,3520,8,327,1,328,1,328,1,328,1,328,1,329,1,329,
		3,329,3528,8,329,1,330,1,330,1,330,1,330,1,330,1,330,1,330,1,330,1,330,
		1,330,3,330,3540,8,330,1,330,1,330,1,330,1,330,1,330,1,330,5,330,3548,
		8,330,10,330,12,330,3551,9,330,1,331,1,331,1,331,1,331,1,331,1,331,1,331,
		1,331,1,331,1,331,1,331,1,331,1,331,1,331,1,331,1,331,1,331,1,331,1,331,
		1,331,1,331,1,331,1,331,1,331,1,331,1,331,1,331,1,331,1,331,1,331,1,331,
		1,331,1,331,1,331,1,331,1,331,1,331,1,331,1,331,1,331,1,331,1,331,1,331,
		1,331,3,331,3597,8,331,1,332,1,332,1,332,1,332,1,332,1,332,1,332,1,332,
		3,332,3607,8,332,1,333,1,333,1,333,1,333,1,333,1,333,3,333,3615,8,333,
		1,333,1,333,1,333,5,333,3620,8,333,10,333,12,333,3623,9,333,1,334,1,334,
		1,334,1,334,1,335,1,335,5,335,3631,8,335,10,335,12,335,3634,9,335,1,336,
		1,336,1,336,3,336,3639,8,336,1,337,1,337,1,337,1,337,1,338,1,338,1,338,
		5,338,3648,8,338,10,338,12,338,3651,9,338,1,339,1,339,3,339,3655,8,339,
		1,339,3,339,3658,8,339,1,340,1,340,3,340,3662,8,340,1,340,1,340,1,340,
		1,340,1,340,1,340,1,340,3,340,3671,8,340,1,341,1,341,1,341,1,341,1,341,
		1,341,1,341,1,341,1,341,3,341,3682,8,341,1,342,1,342,3,342,3686,8,342,
		1,343,1,343,1,343,1,343,1,343,1,343,1,343,1,343,3,343,3696,8,343,1,344,
		1,344,1,344,1,344,1,344,1,345,3,345,3704,8,345,1,345,1,345,1,345,3,345,
		3709,8,345,1,346,1,346,1,347,1,347,1,347,1,347,1,347,1,347,1,347,0,25,
		12,42,50,94,162,174,186,202,230,240,302,324,330,342,420,450,466,474,506,
		514,598,600,624,660,666,348,0,2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,
		32,34,36,38,40,42,44,46,48,50,52,54,56,58,60,62,64,66,68,70,72,74,76,78,
		80,82,84,86,88,90,92,94,96,98,100,102,104,106,108,110,112,114,116,118,
		120,122,124,126,128,130,132,134,136,138,140,142,144,146,148,150,152,154,
		156,158,160,162,164,166,168,170,172,174,176,178,180,182,184,186,188,190,
		192,194,196,198,200,202,204,206,208,210,212,214,216,218,220,222,224,226,
		228,230,232,234,236,238,240,242,244,246,248,250,252,254,256,258,260,262,
		264,266,268,270,272,274,276,278,280,282,284,286,288,290,292,294,296,298,
		300,302,304,306,308,310,312,314,316,318,320,322,324,326,328,330,332,334,
		336,338,340,342,344,346,348,350,352,354,356,358,360,362,364,366,368,370,
		372,374,376,378,380,382,384,386,388,390,392,394,396,398,400,402,404,406,
		408,410,412,414,416,418,420,422,424,426,428,430,432,434,436,438,440,442,
		444,446,448,450,452,454,456,458,460,462,464,466,468,470,472,474,476,478,
		480,482,484,486,488,490,492,494,496,498,500,502,504,506,508,510,512,514,
		516,518,520,522,524,526,528,530,532,534,536,538,540,542,544,546,548,550,
		552,554,556,558,560,562,564,566,568,570,572,574,576,578,580,582,584,586,
		588,590,592,594,596,598,600,602,604,606,608,610,612,614,616,618,620,622,
		624,626,628,630,632,634,636,638,640,642,644,646,648,650,652,654,656,658,
		660,662,664,666,668,670,672,674,676,678,680,682,684,686,688,690,692,694,
		0,12,1,0,19,21,1,0,131,132,1,0,143,148,1,0,139,140,1,0,38,39,1,0,174,176,
		2,0,177,177,186,186,2,0,133,133,192,192,2,0,28,28,143,148,3,0,34,34,84,
		84,188,188,1,0,149,150,2,0,178,178,186,186,3923,0,696,1,0,0,0,2,700,1,
		0,0,0,4,709,1,0,0,0,6,712,1,0,0,0,8,716,1,0,0,0,10,726,1,0,0,0,12,736,
		1,0,0,0,14,747,1,0,0,0,16,756,1,0,0,0,18,775,1,0,0,0,20,777,1,0,0,0,22,
		791,1,0,0,0,24,793,1,0,0,0,26,801,1,0,0,0,28,805,1,0,0,0,30,807,1,0,0,
		0,32,813,1,0,0,0,34,817,1,0,0,0,36,827,1,0,0,0,38,836,1,0,0,0,40,847,1,
		0,0,0,42,849,1,0,0,0,44,859,1,0,0,0,46,882,1,0,0,0,48,884,1,0,0,0,50,897,
		1,0,0,0,52,929,1,0,0,0,54,940,1,0,0,0,56,950,1,0,0,0,58,959,1,0,0,0,60,
		971,1,0,0,0,62,973,1,0,0,0,64,986,1,0,0,0,66,988,1,0,0,0,68,998,1,0,0,
		0,70,1004,1,0,0,0,72,1020,1,0,0,0,74,1022,1,0,0,0,76,1028,1,0,0,0,78,1042,
		1,0,0,0,80,1044,1,0,0,0,82,1050,1,0,0,0,84,1064,1,0,0,0,86,1066,1,0,0,
		0,88,1072,1,0,0,0,90,1080,1,0,0,0,92,1082,1,0,0,0,94,1085,1,0,0,0,96,1112,
		1,0,0,0,98,1114,1,0,0,0,100,1116,1,0,0,0,102,1125,1,0,0,0,104,1129,1,0,
		0,0,106,1131,1,0,0,0,108,1133,1,0,0,0,110,1135,1,0,0,0,112,1141,1,0,0,
		0,114,1155,1,0,0,0,116,1157,1,0,0,0,118,1165,1,0,0,0,120,1167,1,0,0,0,
		122,1177,1,0,0,0,124,1179,1,0,0,0,126,1187,1,0,0,0,128,1190,1,0,0,0,130,
		1196,1,0,0,0,132,1198,1,0,0,0,134,1202,1,0,0,0,136,1206,1,0,0,0,138,1210,
		1,0,0,0,140,1212,1,0,0,0,142,1216,1,0,0,0,144,1220,1,0,0,0,146,1222,1,
		0,0,0,148,1226,1,0,0,0,150,1230,1,0,0,0,152,1236,1,0,0,0,154,1239,1,0,
		0,0,156,1248,1,0,0,0,158,1251,1,0,0,0,160,1255,1,0,0,0,162,1258,1,0,0,
		0,164,1281,1,0,0,0,166,1283,1,0,0,0,168,1296,1,0,0,0,170,1298,1,0,0,0,
		172,1310,1,0,0,0,174,1312,1,0,0,0,176,1343,1,0,0,0,178,1345,1,0,0,0,180,
		1396,1,0,0,0,182,1398,1,0,0,0,184,1404,1,0,0,0,186,1415,1,0,0,0,188,1429,
		1,0,0,0,190,1446,1,0,0,0,192,1448,1,0,0,0,194,1455,1,0,0,0,196,1465,1,
		0,0,0,198,1476,1,0,0,0,200,1491,1,0,0,0,202,1493,1,0,0,0,204,1505,1,0,
		0,0,206,1507,1,0,0,0,208,1511,1,0,0,0,210,1519,1,0,0,0,212,1528,1,0,0,
		0,214,1530,1,0,0,0,216,1542,1,0,0,0,218,1544,1,0,0,0,220,1557,1,0,0,0,
		222,1559,1,0,0,0,224,1565,1,0,0,0,226,1571,1,0,0,0,228,1579,1,0,0,0,230,
		1581,1,0,0,0,232,1597,1,0,0,0,234,1599,1,0,0,0,236,1611,1,0,0,0,238,1623,
		1,0,0,0,240,1625,1,0,0,0,242,1637,1,0,0,0,244,1639,1,0,0,0,246,1654,1,
		0,0,0,248,1656,1,0,0,0,250,1707,1,0,0,0,252,1709,1,0,0,0,254,1711,1,0,
		0,0,256,1725,1,0,0,0,258,1729,1,0,0,0,260,1731,1,0,0,0,262,1744,1,0,0,
		0,264,1746,1,0,0,0,266,1748,1,0,0,0,268,1750,1,0,0,0,270,1758,1,0,0,0,
		272,1785,1,0,0,0,274,1797,1,0,0,0,276,1799,1,0,0,0,278,1835,1,0,0,0,280,
		1843,1,0,0,0,282,1850,1,0,0,0,284,1869,1,0,0,0,286,1871,1,0,0,0,288,1873,
		1,0,0,0,290,1878,1,0,0,0,292,1882,1,0,0,0,294,1886,1,0,0,0,296,1888,1,
		0,0,0,298,1891,1,0,0,0,300,1893,1,0,0,0,302,1898,1,0,0,0,304,1911,1,0,
		0,0,306,1913,1,0,0,0,308,1917,1,0,0,0,310,1919,1,0,0,0,312,1923,1,0,0,
		0,314,1953,1,0,0,0,316,1956,1,0,0,0,318,1962,1,0,0,0,320,1969,1,0,0,0,
		322,1977,1,0,0,0,324,1979,1,0,0,0,326,1990,1,0,0,0,328,1995,1,0,0,0,330,
		1997,1,0,0,0,332,2007,1,0,0,0,334,2012,1,0,0,0,336,2044,1,0,0,0,338,2050,
		1,0,0,0,340,2061,1,0,0,0,342,2063,1,0,0,0,344,2075,1,0,0,0,346,2083,1,
		0,0,0,348,2090,1,0,0,0,350,2093,1,0,0,0,352,2107,1,0,0,0,354,2109,1,0,
		0,0,356,2122,1,0,0,0,358,2131,1,0,0,0,360,2134,1,0,0,0,362,2150,1,0,0,
		0,364,2152,1,0,0,0,366,2155,1,0,0,0,368,2160,1,0,0,0,370,2164,1,0,0,0,
		372,2167,1,0,0,0,374,2190,1,0,0,0,376,2192,1,0,0,0,378,2194,1,0,0,0,380,
		2197,1,0,0,0,382,2209,1,0,0,0,384,2211,1,0,0,0,386,2213,1,0,0,0,388,2220,
		1,0,0,0,390,2222,1,0,0,0,392,2226,1,0,0,0,394,2237,1,0,0,0,396,2240,1,
		0,0,0,398,2250,1,0,0,0,400,2269,1,0,0,0,402,2273,1,0,0,0,404,2275,1,0,
		0,0,406,2282,1,0,0,0,408,2287,1,0,0,0,410,2291,1,0,0,0,412,2293,1,0,0,
		0,414,2322,1,0,0,0,416,2325,1,0,0,0,418,2332,1,0,0,0,420,2334,1,0,0,0,
		422,2353,1,0,0,0,424,2365,1,0,0,0,426,2367,1,0,0,0,428,2370,1,0,0,0,430,
		2387,1,0,0,0,432,2389,1,0,0,0,434,2391,1,0,0,0,436,2423,1,0,0,0,438,2425,
		1,0,0,0,440,2443,1,0,0,0,442,2445,1,0,0,0,444,2447,1,0,0,0,446,2452,1,
		0,0,0,448,2462,1,0,0,0,450,2464,1,0,0,0,452,2479,1,0,0,0,454,2497,1,0,
		0,0,456,2499,1,0,0,0,458,2507,1,0,0,0,460,2525,1,0,0,0,462,2527,1,0,0,
		0,464,2539,1,0,0,0,466,2541,1,0,0,0,468,2551,1,0,0,0,470,2555,1,0,0,0,
		472,2559,1,0,0,0,474,2580,1,0,0,0,476,2590,1,0,0,0,478,2593,1,0,0,0,480,
		2601,1,0,0,0,482,2609,1,0,0,0,484,2611,1,0,0,0,486,2622,1,0,0,0,488,2634,
		1,0,0,0,490,2636,1,0,0,0,492,2656,1,0,0,0,494,2658,1,0,0,0,496,2662,1,
		0,0,0,498,2672,1,0,0,0,500,2674,1,0,0,0,502,2692,1,0,0,0,504,2701,1,0,
		0,0,506,2713,1,0,0,0,508,2753,1,0,0,0,510,2762,1,0,0,0,512,2766,1,0,0,
		0,514,2778,1,0,0,0,516,2817,1,0,0,0,518,2822,1,0,0,0,520,2824,1,0,0,0,
		522,2828,1,0,0,0,524,2834,1,0,0,0,526,2885,1,0,0,0,528,2900,1,0,0,0,530,
		2903,1,0,0,0,532,2990,1,0,0,0,534,3018,1,0,0,0,536,3020,1,0,0,0,538,3026,
		1,0,0,0,540,3030,1,0,0,0,542,3039,1,0,0,0,544,3062,1,0,0,0,546,3064,1,
		0,0,0,548,3066,1,0,0,0,550,3072,1,0,0,0,552,3095,1,0,0,0,554,3097,1,0,
		0,0,556,3109,1,0,0,0,558,3114,1,0,0,0,560,3116,1,0,0,0,562,3130,1,0,0,
		0,564,3132,1,0,0,0,566,3135,1,0,0,0,568,3158,1,0,0,0,570,3160,1,0,0,0,
		572,3170,1,0,0,0,574,3172,1,0,0,0,576,3204,1,0,0,0,578,3206,1,0,0,0,580,
		3240,1,0,0,0,582,3242,1,0,0,0,584,3245,1,0,0,0,586,3257,1,0,0,0,588,3261,
		1,0,0,0,590,3264,1,0,0,0,592,3271,1,0,0,0,594,3284,1,0,0,0,596,3288,1,
		0,0,0,598,3294,1,0,0,0,600,3304,1,0,0,0,602,3325,1,0,0,0,604,3335,1,0,
		0,0,606,3346,1,0,0,0,608,3348,1,0,0,0,610,3360,1,0,0,0,612,3362,1,0,0,
		0,614,3369,1,0,0,0,616,3371,1,0,0,0,618,3387,1,0,0,0,620,3390,1,0,0,0,
		622,3399,1,0,0,0,624,3403,1,0,0,0,626,3415,1,0,0,0,628,3417,1,0,0,0,630,
		3425,1,0,0,0,632,3433,1,0,0,0,634,3442,1,0,0,0,636,3446,1,0,0,0,638,3448,
		1,0,0,0,640,3457,1,0,0,0,642,3473,1,0,0,0,644,3483,1,0,0,0,646,3485,1,
		0,0,0,648,3493,1,0,0,0,650,3505,1,0,0,0,652,3507,1,0,0,0,654,3519,1,0,
		0,0,656,3521,1,0,0,0,658,3527,1,0,0,0,660,3539,1,0,0,0,662,3596,1,0,0,
		0,664,3606,1,0,0,0,666,3614,1,0,0,0,668,3624,1,0,0,0,670,3628,1,0,0,0,
		672,3638,1,0,0,0,674,3640,1,0,0,0,676,3644,1,0,0,0,678,3657,1,0,0,0,680,
		3670,1,0,0,0,682,3681,1,0,0,0,684,3685,1,0,0,0,686,3695,1,0,0,0,688,3697,
		1,0,0,0,690,3708,1,0,0,0,692,3710,1,0,0,0,694,3712,1,0,0,0,696,697,3,2,
		1,0,697,698,5,0,0,1,698,1,1,0,0,0,699,701,3,4,2,0,700,699,1,0,0,0,701,
		702,1,0,0,0,702,700,1,0,0,0,702,703,1,0,0,0,703,3,1,0,0,0,704,710,3,6,
		3,0,705,710,3,310,155,0,706,710,3,606,303,0,707,710,3,38,19,0,708,710,
		3,58,29,0,709,704,1,0,0,0,709,705,1,0,0,0,709,706,1,0,0,0,709,707,1,0,
		0,0,709,708,1,0,0,0,710,5,1,0,0,0,711,713,3,8,4,0,712,711,1,0,0,0,712,
		713,1,0,0,0,713,714,1,0,0,0,714,715,3,10,5,0,715,7,1,0,0,0,716,717,5,5,
		0,0,717,718,5,188,0,0,718,9,1,0,0,0,719,721,3,316,158,0,720,719,1,0,0,
		0,720,721,1,0,0,0,721,722,1,0,0,0,722,727,3,36,18,0,723,724,3,12,6,0,724,
		725,3,36,18,0,725,727,1,0,0,0,726,720,1,0,0,0,726,723,1,0,0,0,727,11,1,
		0,0,0,728,729,6,6,-1,0,729,730,3,316,158,0,730,731,3,306,153,0,731,732,
		3,14,7,0,732,737,1,0,0,0,733,734,3,306,153,0,734,735,3,14,7,0,735,737,
		1,0,0,0,736,728,1,0,0,0,736,733,1,0,0,0,737,742,1,0,0,0,738,739,10,1,0,
		0,739,741,3,14,7,0,740,738,1,0,0,0,741,744,1,0,0,0,742,740,1,0,0,0,742,
		743,1,0,0,0,743,13,1,0,0,0,744,742,1,0,0,0,745,748,3,310,155,0,746,748,
		3,606,303,0,747,745,1,0,0,0,747,746,1,0,0,0,748,15,1,0,0,0,749,757,3,614,
		307,0,750,757,3,30,15,0,751,757,3,48,24,0,752,757,3,62,31,0,753,757,3,
		70,35,0,754,757,3,612,306,0,755,757,3,18,9,0,756,749,1,0,0,0,756,750,1,
		0,0,0,756,751,1,0,0,0,756,752,1,0,0,0,756,753,1,0,0,0,756,754,1,0,0,0,
		756,755,1,0,0,0,757,17,1,0,0,0,758,759,5,23,0,0,759,776,5,188,0,0,760,
		761,5,23,0,0,761,762,5,188,0,0,762,763,5,122,0,0,763,764,5,24,0,0,764,
		776,5,129,0,0,765,766,5,23,0,0,766,767,5,188,0,0,767,768,5,122,0,0,768,
		776,3,24,12,0,769,770,5,23,0,0,770,771,5,188,0,0,771,772,5,122,0,0,772,
		773,5,24,0,0,773,774,5,129,0,0,774,776,3,20,10,0,775,758,1,0,0,0,775,760,
		1,0,0,0,775,765,1,0,0,0,775,769,1,0,0,0,776,19,1,0,0,0,777,782,3,22,11,
		0,778,779,5,122,0,0,779,781,3,22,11,0,780,778,1,0,0,0,781,784,1,0,0,0,
		782,780,1,0,0,0,782,783,1,0,0,0,783,21,1,0,0,0,784,782,1,0,0,0,785,792,
		3,198,99,0,786,787,3,300,150,0,787,788,5,25,0,0,788,789,3,28,14,0,789,
		792,1,0,0,0,790,792,3,28,14,0,791,785,1,0,0,0,791,786,1,0,0,0,791,790,
		1,0,0,0,792,23,1,0,0,0,793,798,3,26,13,0,794,795,5,122,0,0,795,797,3,26,
		13,0,796,794,1,0,0,0,797,800,1,0,0,0,798,796,1,0,0,0,798,799,1,0,0,0,799,
		25,1,0,0,0,800,798,1,0,0,0,801,802,3,300,150,0,802,803,5,25,0,0,803,804,
		3,28,14,0,804,27,1,0,0,0,805,806,3,300,150,0,806,29,1,0,0,0,807,808,5,
		44,0,0,808,809,5,123,0,0,809,810,3,32,16,0,810,811,5,128,0,0,811,31,1,
		0,0,0,812,814,3,34,17,0,813,812,1,0,0,0,814,815,1,0,0,0,815,813,1,0,0,
		0,815,816,1,0,0,0,816,33,1,0,0,0,817,818,5,188,0,0,818,819,5,130,0,0,819,
		820,3,624,312,0,820,35,1,0,0,0,821,828,5,12,0,0,822,823,5,12,0,0,823,825,
		5,5,0,0,824,826,5,188,0,0,825,824,1,0,0,0,825,826,1,0,0,0,826,828,1,0,
		0,0,827,821,1,0,0,0,827,822,1,0,0,0,828,37,1,0,0,0,829,830,3,40,20,0,830,
		831,3,42,21,0,831,832,3,46,23,0,832,837,1,0,0,0,833,834,3,40,20,0,834,
		835,3,46,23,0,835,837,1,0,0,0,836,829,1,0,0,0,836,833,1,0,0,0,837,39,1,
		0,0,0,838,840,5,36,0,0,839,841,5,188,0,0,840,839,1,0,0,0,840,841,1,0,0,
		0,841,848,1,0,0,0,842,843,5,8,0,0,843,845,5,48,0,0,844,846,5,188,0,0,845,
		844,1,0,0,0,845,846,1,0,0,0,846,848,1,0,0,0,847,838,1,0,0,0,847,842,1,
		0,0,0,848,41,1,0,0,0,849,850,6,21,-1,0,850,851,3,44,22,0,851,856,1,0,0,
		0,852,853,10,1,0,0,853,855,3,44,22,0,854,852,1,0,0,0,855,858,1,0,0,0,856,
		854,1,0,0,0,856,857,1,0,0,0,857,43,1,0,0,0,858,856,1,0,0,0,859,860,3,16,
		8,0,860,45,1,0,0,0,861,863,5,115,0,0,862,864,5,188,0,0,863,862,1,0,0,0,
		863,864,1,0,0,0,864,883,1,0,0,0,865,866,5,12,0,0,866,868,5,36,0,0,867,
		869,5,188,0,0,868,867,1,0,0,0,868,869,1,0,0,0,869,883,1,0,0,0,870,871,
		5,116,0,0,871,873,5,48,0,0,872,874,5,188,0,0,873,872,1,0,0,0,873,874,1,
		0,0,0,874,883,1,0,0,0,875,876,5,12,0,0,876,877,5,8,0,0,877,879,5,48,0,
		0,878,880,5,188,0,0,879,878,1,0,0,0,879,880,1,0,0,0,880,883,1,0,0,0,881,
		883,5,12,0,0,882,861,1,0,0,0,882,865,1,0,0,0,882,870,1,0,0,0,882,875,1,
		0,0,0,882,881,1,0,0,0,883,47,1,0,0,0,884,885,5,186,0,0,885,886,5,88,0,
		0,886,888,5,123,0,0,887,889,3,50,25,0,888,887,1,0,0,0,888,889,1,0,0,0,
		889,890,1,0,0,0,890,891,5,128,0,0,891,49,1,0,0,0,892,893,6,25,-1,0,893,
		898,3,52,26,0,894,898,5,134,0,0,895,896,5,134,0,0,896,898,3,52,26,0,897,
		892,1,0,0,0,897,894,1,0,0,0,897,895,1,0,0,0,898,916,1,0,0,0,899,900,10,
		5,0,0,900,915,5,134,0,0,901,902,10,4,0,0,902,903,5,134,0,0,903,915,3,52,
		26,0,904,905,10,3,0,0,905,906,5,122,0,0,906,915,3,52,26,0,907,908,10,2,
		0,0,908,909,5,122,0,0,909,915,5,134,0,0,910,911,10,1,0,0,911,912,5,122,
		0,0,912,913,5,134,0,0,913,915,3,52,26,0,914,899,1,0,0,0,914,901,1,0,0,
		0,914,904,1,0,0,0,914,907,1,0,0,0,914,910,1,0,0,0,915,918,1,0,0,0,916,
		914,1,0,0,0,916,917,1,0,0,0,917,51,1,0,0,0,918,916,1,0,0,0,919,930,3,54,
		27,0,920,921,5,186,0,0,921,930,3,54,27,0,922,930,5,151,0,0,923,930,5,152,
		0,0,924,925,5,152,0,0,925,930,3,54,27,0,926,927,5,152,0,0,927,928,5,186,
		0,0,928,930,3,54,27,0,929,919,1,0,0,0,929,920,1,0,0,0,929,922,1,0,0,0,
		929,923,1,0,0,0,929,924,1,0,0,0,929,926,1,0,0,0,930,53,1,0,0,0,931,941,
		5,153,0,0,932,941,3,56,28,0,933,941,5,177,0,0,934,941,5,155,0,0,935,941,
		5,188,0,0,936,937,5,123,0,0,937,938,3,50,25,0,938,939,5,128,0,0,939,941,
		1,0,0,0,940,931,1,0,0,0,940,932,1,0,0,0,940,933,1,0,0,0,940,934,1,0,0,
		0,940,935,1,0,0,0,940,936,1,0,0,0,941,55,1,0,0,0,942,943,5,178,0,0,943,
		944,5,184,0,0,944,945,5,178,0,0,945,951,5,185,0,0,946,947,5,188,0,0,947,
		948,5,184,0,0,948,949,5,178,0,0,949,951,5,185,0,0,950,942,1,0,0,0,950,
		946,1,0,0,0,951,57,1,0,0,0,952,953,3,296,148,0,953,954,3,302,151,0,954,
		955,3,60,30,0,955,960,1,0,0,0,956,957,3,296,148,0,957,958,3,60,30,0,958,
		960,1,0,0,0,959,952,1,0,0,0,959,956,1,0,0,0,960,59,1,0,0,0,961,962,5,12,
		0,0,962,964,5,3,0,0,963,965,5,188,0,0,964,963,1,0,0,0,964,965,1,0,0,0,
		965,972,1,0,0,0,966,968,5,4,0,0,967,969,5,188,0,0,968,967,1,0,0,0,968,
		969,1,0,0,0,969,972,1,0,0,0,970,972,5,12,0,0,971,961,1,0,0,0,971,966,1,
		0,0,0,971,970,1,0,0,0,972,61,1,0,0,0,973,974,5,6,0,0,974,975,5,188,0,0,
		975,976,3,64,32,0,976,977,5,55,0,0,977,978,5,123,0,0,978,979,5,188,0,0,
		979,980,5,128,0,0,980,63,1,0,0,0,981,983,5,123,0,0,982,984,3,66,33,0,983,
		982,1,0,0,0,983,984,1,0,0,0,984,985,1,0,0,0,985,987,5,128,0,0,986,981,
		1,0,0,0,986,987,1,0,0,0,987,65,1,0,0,0,988,993,3,68,34,0,989,990,5,122,
		0,0,990,992,3,68,34,0,991,989,1,0,0,0,992,995,1,0,0,0,993,991,1,0,0,0,
		993,994,1,0,0,0,994,67,1,0,0,0,995,993,1,0,0,0,996,999,3,106,53,0,997,
		999,5,192,0,0,998,996,1,0,0,0,998,997,1,0,0,0,999,69,1,0,0,0,1000,1005,
		3,234,117,0,1001,1005,3,192,96,0,1002,1005,3,172,86,0,1003,1005,3,72,36,
		0,1004,1000,1,0,0,0,1004,1001,1,0,0,0,1004,1002,1,0,0,0,1004,1003,1,0,
		0,0,1005,71,1,0,0,0,1006,1021,3,160,80,0,1007,1021,3,392,196,0,1008,1021,
		3,156,78,0,1009,1021,3,146,73,0,1010,1021,3,140,70,0,1011,1021,3,134,67,
		0,1012,1021,3,126,63,0,1013,1021,3,118,59,0,1014,1021,3,110,55,0,1015,
		1021,3,100,50,0,1016,1021,3,92,46,0,1017,1021,3,86,43,0,1018,1021,3,80,
		40,0,1019,1021,3,74,37,0,1020,1006,1,0,0,0,1020,1007,1,0,0,0,1020,1008,
		1,0,0,0,1020,1009,1,0,0,0,1020,1010,1,0,0,0,1020,1011,1,0,0,0,1020,1012,
		1,0,0,0,1020,1013,1,0,0,0,1020,1014,1,0,0,0,1020,1015,1,0,0,0,1020,1016,
		1,0,0,0,1020,1017,1,0,0,0,1020,1018,1,0,0,0,1020,1019,1,0,0,0,1021,73,
		1,0,0,0,1022,1024,5,14,0,0,1023,1025,5,30,0,0,1024,1023,1,0,0,0,1024,1025,
		1,0,0,0,1025,1026,1,0,0,0,1026,1027,3,76,38,0,1027,75,1,0,0,0,1028,1033,
		3,78,39,0,1029,1030,5,122,0,0,1030,1032,3,78,39,0,1031,1029,1,0,0,0,1032,
		1035,1,0,0,0,1033,1031,1,0,0,0,1033,1034,1,0,0,0,1034,77,1,0,0,0,1035,
		1033,1,0,0,0,1036,1043,3,182,91,0,1037,1038,3,182,91,0,1038,1039,5,123,
		0,0,1039,1040,3,184,92,0,1040,1041,5,128,0,0,1041,1043,1,0,0,0,1042,1036,
		1,0,0,0,1042,1037,1,0,0,0,1043,79,1,0,0,0,1044,1046,5,37,0,0,1045,1047,
		5,30,0,0,1046,1045,1,0,0,0,1046,1047,1,0,0,0,1047,1048,1,0,0,0,1048,1049,
		3,82,41,0,1049,81,1,0,0,0,1050,1055,3,84,42,0,1051,1052,5,122,0,0,1052,
		1054,3,84,42,0,1053,1051,1,0,0,0,1054,1057,1,0,0,0,1055,1053,1,0,0,0,1055,
		1056,1,0,0,0,1056,83,1,0,0,0,1057,1055,1,0,0,0,1058,1065,3,182,91,0,1059,
		1060,3,182,91,0,1060,1061,5,123,0,0,1061,1062,3,268,134,0,1062,1063,5,
		128,0,0,1063,1065,1,0,0,0,1064,1058,1,0,0,0,1064,1059,1,0,0,0,1065,85,
		1,0,0,0,1066,1068,5,16,0,0,1067,1069,5,30,0,0,1068,1067,1,0,0,0,1068,1069,
		1,0,0,0,1069,1070,1,0,0,0,1070,1071,3,88,44,0,1071,87,1,0,0,0,1072,1077,
		3,90,45,0,1073,1074,5,122,0,0,1074,1076,3,90,45,0,1075,1073,1,0,0,0,1076,
		1079,1,0,0,0,1077,1075,1,0,0,0,1077,1078,1,0,0,0,1078,89,1,0,0,0,1079,
		1077,1,0,0,0,1080,1081,3,106,53,0,1081,91,1,0,0,0,1082,1083,5,17,0,0,1083,
		1084,3,94,47,0,1084,93,1,0,0,0,1085,1086,6,47,-1,0,1086,1087,5,133,0,0,
		1087,1088,3,96,48,0,1088,1089,5,133,0,0,1089,1090,3,98,49,0,1090,1109,
		1,0,0,0,1091,1092,10,3,0,0,1092,1093,5,133,0,0,1093,1094,3,96,48,0,1094,
		1095,5,133,0,0,1095,1096,3,98,49,0,1096,1108,1,0,0,0,1097,1098,10,2,0,
		0,1098,1099,5,122,0,0,1099,1100,5,133,0,0,1100,1101,3,96,48,0,1101,1102,
		5,133,0,0,1102,1103,3,98,49,0,1103,1108,1,0,0,0,1104,1105,10,1,0,0,1105,
		1106,5,122,0,0,1106,1108,3,98,49,0,1107,1091,1,0,0,0,1107,1097,1,0,0,0,
		1107,1104,1,0,0,0,1108,1111,1,0,0,0,1109,1107,1,0,0,0,1109,1110,1,0,0,
		0,1110,95,1,0,0,0,1111,1109,1,0,0,0,1112,1113,5,188,0,0,1113,97,1,0,0,
		0,1114,1115,3,432,216,0,1115,99,1,0,0,0,1116,1117,5,18,0,0,1117,1118,5,
		123,0,0,1118,1119,3,108,54,0,1119,1121,5,128,0,0,1120,1122,5,30,0,0,1121,
		1120,1,0,0,0,1121,1122,1,0,0,0,1122,1123,1,0,0,0,1123,1124,3,102,51,0,
		1124,101,1,0,0,0,1125,1126,3,104,52,0,1126,1127,5,122,0,0,1127,1128,3,
		104,52,0,1128,103,1,0,0,0,1129,1130,3,106,53,0,1130,105,1,0,0,0,1131,1132,
		5,188,0,0,1132,107,1,0,0,0,1133,1134,7,0,0,0,1134,109,1,0,0,0,1135,1137,
		5,15,0,0,1136,1138,5,30,0,0,1137,1136,1,0,0,0,1137,1138,1,0,0,0,1138,1139,
		1,0,0,0,1139,1140,3,112,56,0,1140,111,1,0,0,0,1141,1146,3,114,57,0,1142,
		1143,5,122,0,0,1143,1145,3,114,57,0,1144,1142,1,0,0,0,1145,1148,1,0,0,
		0,1146,1144,1,0,0,0,1146,1147,1,0,0,0,1147,113,1,0,0,0,1148,1146,1,0,0,
		0,1149,1156,3,116,58,0,1150,1151,3,116,58,0,1151,1152,5,123,0,0,1152,1153,
		3,268,134,0,1153,1154,5,128,0,0,1154,1156,1,0,0,0,1155,1149,1,0,0,0,1155,
		1150,1,0,0,0,1156,115,1,0,0,0,1157,1158,3,300,150,0,1158,117,1,0,0,0,1159,
		1161,5,40,0,0,1160,1162,5,30,0,0,1161,1160,1,0,0,0,1161,1162,1,0,0,0,1162,
		1163,1,0,0,0,1163,1166,3,120,60,0,1164,1166,5,40,0,0,1165,1159,1,0,0,0,
		1165,1164,1,0,0,0,1166,119,1,0,0,0,1167,1172,3,122,61,0,1168,1169,5,122,
		0,0,1169,1171,3,122,61,0,1170,1168,1,0,0,0,1171,1174,1,0,0,0,1172,1170,
		1,0,0,0,1172,1173,1,0,0,0,1173,121,1,0,0,0,1174,1172,1,0,0,0,1175,1178,
		3,124,62,0,1176,1178,3,198,99,0,1177,1175,1,0,0,0,1177,1176,1,0,0,0,1178,
		123,1,0,0,0,1179,1180,3,300,150,0,1180,125,1,0,0,0,1181,1188,5,47,0,0,
		1182,1183,5,47,0,0,1183,1188,3,128,64,0,1184,1185,5,47,0,0,1185,1186,5,
		30,0,0,1186,1188,3,128,64,0,1187,1181,1,0,0,0,1187,1182,1,0,0,0,1187,1184,
		1,0,0,0,1188,127,1,0,0,0,1189,1191,3,130,65,0,1190,1189,1,0,0,0,1191,1192,
		1,0,0,0,1192,1190,1,0,0,0,1192,1193,1,0,0,0,1193,129,1,0,0,0,1194,1197,
		3,432,216,0,1195,1197,3,132,66,0,1196,1194,1,0,0,0,1196,1195,1,0,0,0,1197,
		131,1,0,0,0,1198,1199,5,133,0,0,1199,1200,3,170,85,0,1200,1201,5,133,0,
		0,1201,133,1,0,0,0,1202,1203,5,46,0,0,1203,1204,3,136,68,0,1204,135,1,
		0,0,0,1205,1207,3,138,69,0,1206,1205,1,0,0,0,1207,1208,1,0,0,0,1208,1206,
		1,0,0,0,1208,1209,1,0,0,0,1209,137,1,0,0,0,1210,1211,5,188,0,0,1211,139,
		1,0,0,0,1212,1213,5,45,0,0,1213,1214,3,142,71,0,1214,141,1,0,0,0,1215,
		1217,3,144,72,0,1216,1215,1,0,0,0,1217,1218,1,0,0,0,1218,1216,1,0,0,0,
		1218,1219,1,0,0,0,1219,143,1,0,0,0,1220,1221,5,188,0,0,1221,145,1,0,0,
		0,1222,1223,5,35,0,0,1223,1224,3,148,74,0,1224,147,1,0,0,0,1225,1227,3,
		150,75,0,1226,1225,1,0,0,0,1227,1228,1,0,0,0,1228,1226,1,0,0,0,1228,1229,
		1,0,0,0,1229,149,1,0,0,0,1230,1231,5,123,0,0,1231,1232,3,152,76,0,1232,
		1233,5,122,0,0,1233,1234,3,154,77,0,1234,1235,5,128,0,0,1235,151,1,0,0,
		0,1236,1237,3,404,202,0,1237,153,1,0,0,0,1238,1240,3,152,76,0,1239,1238,
		1,0,0,0,1240,1241,1,0,0,0,1241,1239,1,0,0,0,1241,1242,1,0,0,0,1242,155,
		1,0,0,0,1243,1244,5,13,0,0,1244,1249,3,158,79,0,1245,1246,5,13,0,0,1246,
		1247,5,30,0,0,1247,1249,3,158,79,0,1248,1243,1,0,0,0,1248,1245,1,0,0,0,
		1249,157,1,0,0,0,1250,1252,3,166,83,0,1251,1250,1,0,0,0,1252,1253,1,0,
		0,0,1253,1251,1,0,0,0,1253,1254,1,0,0,0,1254,159,1,0,0,0,1255,1256,5,32,
		0,0,1256,1257,3,162,81,0,1257,161,1,0,0,0,1258,1260,6,81,-1,0,1259,1261,
		3,168,84,0,1260,1259,1,0,0,0,1260,1261,1,0,0,0,1261,1262,1,0,0,0,1262,
		1263,3,164,82,0,1263,1276,1,0,0,0,1264,1265,10,2,0,0,1265,1267,5,122,0,
		0,1266,1268,3,168,84,0,1267,1266,1,0,0,0,1267,1268,1,0,0,0,1268,1269,1,
		0,0,0,1269,1275,3,164,82,0,1270,1271,10,1,0,0,1271,1272,3,168,84,0,1272,
		1273,3,164,82,0,1273,1275,1,0,0,0,1274,1264,1,0,0,0,1274,1270,1,0,0,0,
		1275,1278,1,0,0,0,1276,1274,1,0,0,0,1276,1277,1,0,0,0,1277,163,1,0,0,0,
		1278,1276,1,0,0,0,1279,1282,3,432,216,0,1280,1282,3,166,83,0,1281,1279,
		1,0,0,0,1281,1280,1,0,0,0,1282,165,1,0,0,0,1283,1284,3,432,216,0,1284,
		1285,5,123,0,0,1285,1286,3,184,92,0,1286,1287,5,128,0,0,1287,167,1,0,0,
		0,1288,1289,5,133,0,0,1289,1290,5,184,0,0,1290,1291,5,133,0,0,1291,1297,
		5,185,0,0,1292,1293,5,133,0,0,1293,1294,3,170,85,0,1294,1295,5,133,0,0,
		1295,1297,1,0,0,0,1296,1288,1,0,0,0,1296,1292,1,0,0,0,1297,169,1,0,0,0,
		1298,1299,5,188,0,0,1299,171,1,0,0,0,1300,1301,3,272,136,0,1301,1302,3,
		178,89,0,1302,1311,1,0,0,0,1303,1305,3,272,136,0,1304,1306,3,174,87,0,
		1305,1304,1,0,0,0,1305,1306,1,0,0,0,1306,1307,1,0,0,0,1307,1308,5,30,0,
		0,1308,1309,3,178,89,0,1309,1311,1,0,0,0,1310,1300,1,0,0,0,1310,1303,1,
		0,0,0,1311,173,1,0,0,0,1312,1313,6,87,-1,0,1313,1314,5,122,0,0,1314,1315,
		3,176,88,0,1315,1321,1,0,0,0,1316,1317,10,1,0,0,1317,1318,5,122,0,0,1318,
		1320,3,176,88,0,1319,1316,1,0,0,0,1320,1323,1,0,0,0,1321,1319,1,0,0,0,
		1321,1322,1,0,0,0,1322,175,1,0,0,0,1323,1321,1,0,0,0,1324,1344,5,44,0,
		0,1325,1344,5,40,0,0,1326,1344,5,15,0,0,1327,1328,5,13,0,0,1328,1329,5,
		123,0,0,1329,1330,3,184,92,0,1330,1331,5,128,0,0,1331,1344,1,0,0,0,1332,
		1344,5,45,0,0,1333,1334,5,18,0,0,1334,1335,5,123,0,0,1335,1336,3,108,54,
		0,1336,1337,5,128,0,0,1337,1344,1,0,0,0,1338,1344,5,46,0,0,1339,1344,5,
		16,0,0,1340,1344,5,37,0,0,1341,1344,5,47,0,0,1342,1344,5,14,0,0,1343,1324,
		1,0,0,0,1343,1325,1,0,0,0,1343,1326,1,0,0,0,1343,1327,1,0,0,0,1343,1332,
		1,0,0,0,1343,1333,1,0,0,0,1343,1338,1,0,0,0,1343,1339,1,0,0,0,1343,1340,
		1,0,0,0,1343,1341,1,0,0,0,1343,1342,1,0,0,0,1344,177,1,0,0,0,1345,1350,
		3,180,90,0,1346,1347,5,122,0,0,1347,1349,3,180,90,0,1348,1346,1,0,0,0,
		1349,1352,1,0,0,0,1350,1348,1,0,0,0,1350,1351,1,0,0,0,1351,179,1,0,0,0,
		1352,1350,1,0,0,0,1353,1397,3,182,91,0,1354,1355,3,182,91,0,1355,1356,
		5,123,0,0,1356,1357,3,184,92,0,1357,1358,5,128,0,0,1358,1397,1,0,0,0,1359,
		1360,3,182,91,0,1360,1361,5,192,0,0,1361,1362,3,282,141,0,1362,1397,1,
		0,0,0,1363,1364,3,182,91,0,1364,1365,5,123,0,0,1365,1366,3,184,92,0,1366,
		1367,5,128,0,0,1367,1368,5,192,0,0,1368,1369,3,282,141,0,1369,1397,1,0,
		0,0,1370,1371,3,182,91,0,1371,1372,5,130,0,0,1372,1373,3,624,312,0,1373,
		1397,1,0,0,0,1374,1375,3,182,91,0,1375,1376,5,123,0,0,1376,1377,3,184,
		92,0,1377,1378,5,128,0,0,1378,1379,5,130,0,0,1379,1380,3,624,312,0,1380,
		1397,1,0,0,0,1381,1382,3,182,91,0,1382,1383,5,192,0,0,1383,1384,3,282,
		141,0,1384,1385,5,130,0,0,1385,1386,3,624,312,0,1386,1397,1,0,0,0,1387,
		1388,3,182,91,0,1388,1389,5,192,0,0,1389,1390,3,282,141,0,1390,1391,5,
		123,0,0,1391,1392,3,184,92,0,1392,1393,5,128,0,0,1393,1394,5,130,0,0,1394,
		1395,3,624,312,0,1395,1397,1,0,0,0,1396,1353,1,0,0,0,1396,1354,1,0,0,0,
		1396,1359,1,0,0,0,1396,1363,1,0,0,0,1396,1370,1,0,0,0,1396,1374,1,0,0,
		0,1396,1381,1,0,0,0,1396,1387,1,0,0,0,1397,181,1,0,0,0,1398,1399,5,188,
		0,0,1399,183,1,0,0,0,1400,1405,3,260,130,0,1401,1405,3,190,95,0,1402,1405,
		3,186,93,0,1403,1405,3,268,134,0,1404,1400,1,0,0,0,1404,1401,1,0,0,0,1404,
		1402,1,0,0,0,1404,1403,1,0,0,0,1405,185,1,0,0,0,1406,1407,6,93,-1,0,1407,
		1408,3,264,132,0,1408,1409,5,129,0,0,1409,1416,1,0,0,0,1410,1411,3,268,
		134,0,1411,1412,5,122,0,0,1412,1413,3,264,132,0,1413,1414,5,129,0,0,1414,
		1416,1,0,0,0,1415,1406,1,0,0,0,1415,1410,1,0,0,0,1416,1422,1,0,0,0,1417,
		1418,10,1,0,0,1418,1419,5,122,0,0,1419,1421,3,188,94,0,1420,1417,1,0,0,
		0,1421,1424,1,0,0,0,1422,1420,1,0,0,0,1422,1423,1,0,0,0,1423,187,1,0,0,
		0,1424,1422,1,0,0,0,1425,1426,3,264,132,0,1426,1427,5,129,0,0,1427,1430,
		1,0,0,0,1428,1430,5,129,0,0,1429,1425,1,0,0,0,1429,1428,1,0,0,0,1430,189,
		1,0,0,0,1431,1447,5,192,0,0,1432,1433,3,264,132,0,1433,1434,5,129,0,0,
		1434,1435,5,192,0,0,1435,1447,1,0,0,0,1436,1437,3,260,130,0,1437,1438,
		5,122,0,0,1438,1439,5,192,0,0,1439,1447,1,0,0,0,1440,1441,3,260,130,0,
		1441,1442,5,122,0,0,1442,1443,3,264,132,0,1443,1444,5,129,0,0,1444,1445,
		5,192,0,0,1445,1447,1,0,0,0,1446,1431,1,0,0,0,1446,1432,1,0,0,0,1446,1436,
		1,0,0,0,1446,1440,1,0,0,0,1447,191,1,0,0,0,1448,1449,3,196,98,0,1449,1450,
		3,202,101,0,1450,1451,3,194,97,0,1451,193,1,0,0,0,1452,1456,5,10,0,0,1453,
		1454,5,12,0,0,1454,1456,5,183,0,0,1455,1452,1,0,0,0,1455,1453,1,0,0,0,
		1456,1458,1,0,0,0,1457,1459,5,188,0,0,1458,1457,1,0,0,0,1458,1459,1,0,
		0,0,1459,195,1,0,0,0,1460,1461,5,183,0,0,1461,1466,5,188,0,0,1462,1463,
		5,183,0,0,1463,1466,3,198,99,0,1464,1466,5,183,0,0,1465,1460,1,0,0,0,1465,
		1462,1,0,0,0,1465,1464,1,0,0,0,1466,197,1,0,0,0,1467,1468,5,22,0,0,1468,
		1469,5,123,0,0,1469,1470,3,200,100,0,1470,1471,5,128,0,0,1471,1477,1,0,
		0,0,1472,1473,5,26,0,0,1473,1474,5,123,0,0,1474,1475,5,130,0,0,1475,1477,
		5,128,0,0,1476,1467,1,0,0,0,1476,1472,1,0,0,0,1477,199,1,0,0,0,1478,1492,
		5,27,0,0,1479,1492,5,135,0,0,1480,1492,5,192,0,0,1481,1492,7,1,0,0,1482,
		1492,7,2,0,0,1483,1484,5,133,0,0,1484,1485,5,184,0,0,1485,1486,5,133,0,
		0,1486,1492,5,185,0,0,1487,1492,5,136,0,0,1488,1492,5,137,0,0,1489,1492,
		5,138,0,0,1490,1492,7,3,0,0,1491,1478,1,0,0,0,1491,1479,1,0,0,0,1491,1480,
		1,0,0,0,1491,1481,1,0,0,0,1491,1482,1,0,0,0,1491,1483,1,0,0,0,1491,1487,
		1,0,0,0,1491,1488,1,0,0,0,1491,1489,1,0,0,0,1491,1490,1,0,0,0,1492,201,
		1,0,0,0,1493,1494,6,101,-1,0,1494,1495,3,204,102,0,1495,1500,1,0,0,0,1496,
		1497,10,1,0,0,1497,1499,3,204,102,0,1498,1496,1,0,0,0,1499,1502,1,0,0,
		0,1500,1498,1,0,0,0,1500,1501,1,0,0,0,1501,203,1,0,0,0,1502,1500,1,0,0,
		0,1503,1506,3,212,106,0,1504,1506,3,206,103,0,1505,1503,1,0,0,0,1505,1504,
		1,0,0,0,1506,205,1,0,0,0,1507,1508,5,3,0,0,1508,1509,5,11,0,0,1509,1510,
		3,208,104,0,1510,207,1,0,0,0,1511,1516,3,210,105,0,1512,1513,5,122,0,0,
		1513,1515,3,210,105,0,1514,1512,1,0,0,0,1515,1518,1,0,0,0,1516,1514,1,
		0,0,0,1516,1517,1,0,0,0,1517,209,1,0,0,0,1518,1516,1,0,0,0,1519,1520,3,
		300,150,0,1520,211,1,0,0,0,1521,1522,3,220,110,0,1522,1523,5,188,0,0,1523,
		1524,3,222,111,0,1524,1529,1,0,0,0,1525,1526,5,9,0,0,1526,1527,5,188,0,
		0,1527,1529,3,214,107,0,1528,1521,1,0,0,0,1528,1525,1,0,0,0,1529,213,1,
		0,0,0,1530,1532,3,64,32,0,1531,1533,3,230,115,0,1532,1531,1,0,0,0,1532,
		1533,1,0,0,0,1533,1534,1,0,0,0,1534,1535,3,216,108,0,1535,215,1,0,0,0,
		1536,1543,5,12,0,0,1537,1538,5,12,0,0,1538,1540,5,9,0,0,1539,1541,5,188,
		0,0,1540,1539,1,0,0,0,1540,1541,1,0,0,0,1541,1543,1,0,0,0,1542,1536,1,
		0,0,0,1542,1537,1,0,0,0,1543,217,1,0,0,0,1544,1545,5,1,0,0,1545,219,1,
		0,0,0,1546,1548,3,218,109,0,1547,1546,1,0,0,0,1547,1548,1,0,0,0,1548,1550,
		1,0,0,0,1549,1551,3,272,136,0,1550,1549,1,0,0,0,1550,1551,1,0,0,0,1551,
		1552,1,0,0,0,1552,1558,5,7,0,0,1553,1554,3,272,136,0,1554,1555,5,1,0,0,
		1555,1556,5,7,0,0,1556,1558,1,0,0,0,1557,1547,1,0,0,0,1557,1553,1,0,0,
		0,1558,221,1,0,0,0,1559,1561,3,224,112,0,1560,1562,3,230,115,0,1561,1560,
		1,0,0,0,1561,1562,1,0,0,0,1562,1563,1,0,0,0,1563,1564,3,232,116,0,1564,
		223,1,0,0,0,1565,1567,5,123,0,0,1566,1568,3,226,113,0,1567,1566,1,0,0,
		0,1567,1568,1,0,0,0,1568,1569,1,0,0,0,1569,1570,5,128,0,0,1570,225,1,0,
		0,0,1571,1576,3,228,114,0,1572,1573,5,122,0,0,1573,1575,3,228,114,0,1574,
		1572,1,0,0,0,1575,1578,1,0,0,0,1576,1574,1,0,0,0,1576,1577,1,0,0,0,1577,
		227,1,0,0,0,1578,1576,1,0,0,0,1579,1580,3,106,53,0,1580,229,1,0,0,0,1581,
		1582,6,115,-1,0,1582,1583,3,16,8,0,1583,1588,1,0,0,0,1584,1585,10,1,0,
		0,1585,1587,3,16,8,0,1586,1584,1,0,0,0,1587,1590,1,0,0,0,1588,1586,1,0,
		0,0,1588,1589,1,0,0,0,1589,231,1,0,0,0,1590,1588,1,0,0,0,1591,1598,5,12,
		0,0,1592,1593,5,12,0,0,1593,1595,5,7,0,0,1594,1596,5,188,0,0,1595,1594,
		1,0,0,0,1595,1596,1,0,0,0,1596,1598,1,0,0,0,1597,1591,1,0,0,0,1597,1592,
		1,0,0,0,1598,233,1,0,0,0,1599,1600,3,238,119,0,1600,1601,3,240,120,0,1601,
		1602,3,236,118,0,1602,235,1,0,0,0,1603,1604,5,182,0,0,1604,1612,5,188,
		0,0,1605,1612,5,182,0,0,1606,1607,5,12,0,0,1607,1608,5,187,0,0,1608,1612,
		5,188,0,0,1609,1610,5,12,0,0,1610,1612,5,187,0,0,1611,1603,1,0,0,0,1611,
		1605,1,0,0,0,1611,1606,1,0,0,0,1611,1609,1,0,0,0,1612,237,1,0,0,0,1613,
		1614,5,187,0,0,1614,1624,5,188,0,0,1615,1616,5,187,0,0,1616,1617,5,30,
		0,0,1617,1624,5,188,0,0,1618,1619,5,187,0,0,1619,1620,5,122,0,0,1620,1621,
		5,40,0,0,1621,1622,5,30,0,0,1622,1624,5,188,0,0,1623,1613,1,0,0,0,1623,
		1615,1,0,0,0,1623,1618,1,0,0,0,1624,239,1,0,0,0,1625,1626,6,120,-1,0,1626,
		1627,3,242,121,0,1627,1632,1,0,0,0,1628,1629,10,1,0,0,1629,1631,3,242,
		121,0,1630,1628,1,0,0,0,1631,1634,1,0,0,0,1632,1630,1,0,0,0,1632,1633,
		1,0,0,0,1633,241,1,0,0,0,1634,1632,1,0,0,0,1635,1638,3,244,122,0,1636,
		1638,3,246,123,0,1637,1635,1,0,0,0,1637,1636,1,0,0,0,1638,243,1,0,0,0,
		1639,1640,7,4,0,0,1640,245,1,0,0,0,1641,1642,3,272,136,0,1642,1643,5,122,
		0,0,1643,1644,3,254,127,0,1644,1645,5,30,0,0,1645,1646,3,248,124,0,1646,
		1655,1,0,0,0,1647,1648,3,272,136,0,1648,1649,5,30,0,0,1649,1650,3,248,
		124,0,1650,1655,1,0,0,0,1651,1652,3,272,136,0,1652,1653,3,248,124,0,1653,
		1655,1,0,0,0,1654,1641,1,0,0,0,1654,1647,1,0,0,0,1654,1651,1,0,0,0,1655,
		247,1,0,0,0,1656,1661,3,250,125,0,1657,1658,5,122,0,0,1658,1660,3,250,
		125,0,1659,1657,1,0,0,0,1660,1663,1,0,0,0,1661,1659,1,0,0,0,1661,1662,
		1,0,0,0,1662,249,1,0,0,0,1663,1661,1,0,0,0,1664,1665,3,252,126,0,1665,
		1666,5,123,0,0,1666,1667,3,258,129,0,1667,1668,5,128,0,0,1668,1669,5,192,
		0,0,1669,1670,3,282,141,0,1670,1708,1,0,0,0,1671,1672,3,252,126,0,1672,
		1673,5,123,0,0,1673,1674,3,258,129,0,1674,1675,5,128,0,0,1675,1676,5,130,
		0,0,1676,1677,3,624,312,0,1677,1708,1,0,0,0,1678,1679,3,252,126,0,1679,
		1680,5,123,0,0,1680,1681,3,258,129,0,1681,1682,5,128,0,0,1682,1708,1,0,
		0,0,1683,1684,3,252,126,0,1684,1685,5,192,0,0,1685,1686,3,282,141,0,1686,
		1708,1,0,0,0,1687,1688,3,252,126,0,1688,1689,5,130,0,0,1689,1690,3,624,
		312,0,1690,1708,1,0,0,0,1691,1692,3,252,126,0,1692,1693,5,192,0,0,1693,
		1694,3,282,141,0,1694,1695,5,130,0,0,1695,1696,3,624,312,0,1696,1708,1,
		0,0,0,1697,1698,3,252,126,0,1698,1699,5,192,0,0,1699,1700,3,282,141,0,
		1700,1701,5,123,0,0,1701,1702,3,258,129,0,1702,1703,5,128,0,0,1703,1704,
		5,130,0,0,1704,1705,3,624,312,0,1705,1708,1,0,0,0,1706,1708,3,252,126,
		0,1707,1664,1,0,0,0,1707,1671,1,0,0,0,1707,1678,1,0,0,0,1707,1683,1,0,
		0,0,1707,1687,1,0,0,0,1707,1691,1,0,0,0,1707,1697,1,0,0,0,1707,1706,1,
		0,0,0,1708,251,1,0,0,0,1709,1710,5,188,0,0,1710,253,1,0,0,0,1711,1716,
		3,256,128,0,1712,1713,5,122,0,0,1713,1715,3,256,128,0,1714,1712,1,0,0,
		0,1715,1718,1,0,0,0,1716,1714,1,0,0,0,1716,1717,1,0,0,0,1717,255,1,0,0,
		0,1718,1716,1,0,0,0,1719,1726,5,37,0,0,1720,1721,5,13,0,0,1721,1722,5,
		123,0,0,1722,1723,3,258,129,0,1723,1724,5,128,0,0,1724,1726,1,0,0,0,1725,
		1719,1,0,0,0,1725,1720,1,0,0,0,1726,257,1,0,0,0,1727,1730,3,260,130,0,
		1728,1730,3,268,134,0,1729,1727,1,0,0,0,1729,1728,1,0,0,0,1730,259,1,0,
		0,0,1731,1736,3,262,131,0,1732,1733,5,122,0,0,1733,1735,3,262,131,0,1734,
		1732,1,0,0,0,1735,1738,1,0,0,0,1736,1734,1,0,0,0,1736,1737,1,0,0,0,1737,
		261,1,0,0,0,1738,1736,1,0,0,0,1739,1740,3,264,132,0,1740,1741,5,129,0,
		0,1741,1742,3,266,133,0,1742,1745,1,0,0,0,1743,1745,3,266,133,0,1744,1739,
		1,0,0,0,1744,1743,1,0,0,0,1745,263,1,0,0,0,1746,1747,3,624,312,0,1747,
		265,1,0,0,0,1748,1749,3,624,312,0,1749,267,1,0,0,0,1750,1755,3,270,135,
		0,1751,1752,5,122,0,0,1752,1754,3,270,135,0,1753,1751,1,0,0,0,1754,1757,
		1,0,0,0,1755,1753,1,0,0,0,1755,1756,1,0,0,0,1756,269,1,0,0,0,1757,1755,
		1,0,0,0,1758,1759,5,129,0,0,1759,271,1,0,0,0,1760,1786,5,168,0,0,1761,
		1786,5,34,0,0,1762,1786,5,29,0,0,1763,1786,5,166,0,0,1764,1786,5,169,0,
		0,1765,1786,5,43,0,0,1766,1767,5,43,0,0,1767,1786,3,280,140,0,1768,1769,
		5,168,0,0,1769,1786,3,274,137,0,1770,1771,5,34,0,0,1771,1786,3,274,137,
		0,1772,1773,5,93,0,0,1773,1786,5,167,0,0,1774,1775,5,166,0,0,1775,1786,
		3,274,137,0,1776,1777,5,43,0,0,1777,1786,3,278,139,0,1778,1779,5,169,0,
		0,1779,1786,3,274,137,0,1780,1781,5,187,0,0,1781,1782,5,123,0,0,1782,1783,
		3,276,138,0,1783,1784,5,128,0,0,1784,1786,1,0,0,0,1785,1760,1,0,0,0,1785,
		1761,1,0,0,0,1785,1762,1,0,0,0,1785,1763,1,0,0,0,1785,1764,1,0,0,0,1785,
		1765,1,0,0,0,1785,1766,1,0,0,0,1785,1768,1,0,0,0,1785,1770,1,0,0,0,1785,
		1772,1,0,0,0,1785,1774,1,0,0,0,1785,1776,1,0,0,0,1785,1778,1,0,0,0,1785,
		1780,1,0,0,0,1786,273,1,0,0,0,1787,1788,5,123,0,0,1788,1789,5,117,0,0,
		1789,1790,5,130,0,0,1790,1791,3,624,312,0,1791,1792,5,128,0,0,1792,1798,
		1,0,0,0,1793,1794,5,123,0,0,1794,1795,3,624,312,0,1795,1796,5,128,0,0,
		1796,1798,1,0,0,0,1797,1787,1,0,0,0,1797,1793,1,0,0,0,1798,275,1,0,0,0,
		1799,1800,3,300,150,0,1800,277,1,0,0,0,1801,1802,5,123,0,0,1802,1803,5,
		118,0,0,1803,1804,5,130,0,0,1804,1805,3,294,147,0,1805,1806,5,122,0,0,
		1806,1807,5,117,0,0,1807,1808,5,130,0,0,1808,1809,3,624,312,0,1809,1810,
		5,128,0,0,1810,1836,1,0,0,0,1811,1812,5,123,0,0,1812,1813,5,118,0,0,1813,
		1814,5,130,0,0,1814,1815,3,294,147,0,1815,1816,5,122,0,0,1816,1817,3,624,
		312,0,1817,1818,5,128,0,0,1818,1836,1,0,0,0,1819,1820,5,123,0,0,1820,1821,
		5,118,0,0,1821,1822,5,130,0,0,1822,1823,3,294,147,0,1823,1824,5,128,0,
		0,1824,1836,1,0,0,0,1825,1826,5,123,0,0,1826,1827,5,117,0,0,1827,1828,
		5,130,0,0,1828,1829,3,624,312,0,1829,1830,5,128,0,0,1830,1836,1,0,0,0,
		1831,1832,5,123,0,0,1832,1833,3,624,312,0,1833,1834,5,128,0,0,1834,1836,
		1,0,0,0,1835,1801,1,0,0,0,1835,1811,1,0,0,0,1835,1819,1,0,0,0,1835,1825,
		1,0,0,0,1835,1831,1,0,0,0,1836,279,1,0,0,0,1837,1838,5,192,0,0,1838,1844,
		3,282,141,0,1839,1840,5,123,0,0,1840,1841,3,294,147,0,1841,1842,5,128,
		0,0,1842,1844,1,0,0,0,1843,1837,1,0,0,0,1843,1839,1,0,0,0,1844,281,1,0,
		0,0,1845,1846,5,123,0,0,1846,1847,3,294,147,0,1847,1848,5,128,0,0,1848,
		1851,1,0,0,0,1849,1851,3,284,142,0,1850,1845,1,0,0,0,1850,1849,1,0,0,0,
		1851,283,1,0,0,0,1852,1870,3,292,146,0,1853,1855,7,1,0,0,1854,1853,1,0,
		0,0,1854,1855,1,0,0,0,1855,1856,1,0,0,0,1856,1870,3,686,343,0,1857,1870,
		5,177,0,0,1858,1870,5,155,0,0,1859,1870,3,682,341,0,1860,1861,5,186,0,
		0,1861,1862,5,170,0,0,1862,1870,5,177,0,0,1863,1864,3,292,146,0,1864,1865,
		5,170,0,0,1865,1866,5,177,0,0,1866,1870,1,0,0,0,1867,1870,3,288,144,0,
		1868,1870,3,286,143,0,1869,1852,1,0,0,0,1869,1854,1,0,0,0,1869,1857,1,
		0,0,0,1869,1858,1,0,0,0,1869,1859,1,0,0,0,1869,1860,1,0,0,0,1869,1863,
		1,0,0,0,1869,1867,1,0,0,0,1869,1868,1,0,0,0,1870,285,1,0,0,0,1871,1872,
		7,5,0,0,1872,287,1,0,0,0,1873,1874,3,276,138,0,1874,1875,5,123,0,0,1875,
		1876,3,290,145,0,1876,1877,5,128,0,0,1877,289,1,0,0,0,1878,1879,3,624,
		312,0,1879,1880,5,122,0,0,1880,1881,3,624,312,0,1881,291,1,0,0,0,1882,
		1883,5,188,0,0,1883,293,1,0,0,0,1884,1887,3,624,312,0,1885,1887,5,192,
		0,0,1886,1884,1,0,0,0,1886,1885,1,0,0,0,1887,295,1,0,0,0,1888,1889,5,3,
		0,0,1889,1890,3,298,149,0,1890,297,1,0,0,0,1891,1892,3,300,150,0,1892,
		299,1,0,0,0,1893,1894,5,188,0,0,1894,301,1,0,0,0,1895,1896,6,151,-1,0,
		1896,1899,3,16,8,0,1897,1899,3,304,152,0,1898,1895,1,0,0,0,1898,1897,1,
		0,0,0,1899,1906,1,0,0,0,1900,1901,10,2,0,0,1901,1905,3,16,8,0,1902,1903,
		10,1,0,0,1903,1905,3,304,152,0,1904,1900,1,0,0,0,1904,1902,1,0,0,0,1905,
		1908,1,0,0,0,1906,1904,1,0,0,0,1906,1907,1,0,0,0,1907,303,1,0,0,0,1908,
		1906,1,0,0,0,1909,1912,3,306,153,0,1910,1912,3,308,154,0,1911,1909,1,0,
		0,0,1911,1910,1,0,0,0,1912,305,1,0,0,0,1913,1914,5,2,0,0,1914,307,1,0,
		0,0,1915,1918,3,310,155,0,1916,1918,3,606,303,0,1917,1915,1,0,0,0,1917,
		1916,1,0,0,0,1918,309,1,0,0,0,1919,1920,3,220,110,0,1920,1921,3,312,156,
		0,1921,1922,3,314,157,0,1922,311,1,0,0,0,1923,1924,5,188,0,0,1924,313,
		1,0,0,0,1925,1927,3,224,112,0,1926,1928,3,316,158,0,1927,1926,1,0,0,0,
		1927,1928,1,0,0,0,1928,1929,1,0,0,0,1929,1930,3,232,116,0,1930,1954,1,
		0,0,0,1931,1932,3,224,112,0,1932,1933,5,55,0,0,1933,1934,5,123,0,0,1934,
		1935,5,188,0,0,1935,1937,5,128,0,0,1936,1938,3,316,158,0,1937,1936,1,0,
		0,0,1937,1938,1,0,0,0,1938,1939,1,0,0,0,1939,1940,3,232,116,0,1940,1954,
		1,0,0,0,1941,1942,3,224,112,0,1942,1943,5,55,0,0,1943,1944,5,123,0,0,1944,
		1945,5,188,0,0,1945,1946,5,128,0,0,1946,1947,3,12,6,0,1947,1948,3,232,
		116,0,1948,1954,1,0,0,0,1949,1950,3,224,112,0,1950,1951,3,12,6,0,1951,
		1952,3,232,116,0,1952,1954,1,0,0,0,1953,1925,1,0,0,0,1953,1931,1,0,0,0,
		1953,1941,1,0,0,0,1953,1949,1,0,0,0,1954,315,1,0,0,0,1955,1957,3,318,159,
		0,1956,1955,1,0,0,0,1957,1958,1,0,0,0,1958,1956,1,0,0,0,1958,1959,1,0,
		0,0,1959,317,1,0,0,0,1960,1963,3,16,8,0,1961,1963,3,320,160,0,1962,1960,
		1,0,0,0,1962,1961,1,0,0,0,1963,319,1,0,0,0,1964,1970,3,436,218,0,1965,
		1970,3,370,185,0,1966,1970,3,354,177,0,1967,1970,3,336,168,0,1968,1970,
		3,322,161,0,1969,1964,1,0,0,0,1969,1965,1,0,0,0,1969,1966,1,0,0,0,1969,
		1967,1,0,0,0,1969,1968,1,0,0,0,1970,321,1,0,0,0,1971,1972,3,330,165,0,
		1972,1973,3,328,164,0,1973,1978,1,0,0,0,1974,1975,3,324,162,0,1975,1976,
		3,328,164,0,1976,1978,1,0,0,0,1977,1971,1,0,0,0,1977,1974,1,0,0,0,1978,
		323,1,0,0,0,1979,1980,6,162,-1,0,1980,1981,3,330,165,0,1981,1982,3,326,
		163,0,1982,1987,1,0,0,0,1983,1984,10,1,0,0,1984,1986,3,576,288,0,1985,
		1983,1,0,0,0,1986,1989,1,0,0,0,1987,1985,1,0,0,0,1987,1988,1,0,0,0,1988,
		325,1,0,0,0,1989,1987,1,0,0,0,1990,1991,5,33,0,0,1991,327,1,0,0,0,1992,
		1996,5,60,0,0,1993,1994,5,12,0,0,1994,1996,5,61,0,0,1995,1992,1,0,0,0,
		1995,1993,1,0,0,0,1996,329,1,0,0,0,1997,1998,6,165,-1,0,1998,1999,3,332,
		166,0,1999,2004,1,0,0,0,2000,2001,10,1,0,0,2001,2003,3,576,288,0,2002,
		2000,1,0,0,0,2003,2006,1,0,0,0,2004,2002,1,0,0,0,2004,2005,1,0,0,0,2005,
		331,1,0,0,0,2006,2004,1,0,0,0,2007,2008,5,61,0,0,2008,2009,5,123,0,0,2009,
		2010,3,334,167,0,2010,2011,5,128,0,0,2011,333,1,0,0,0,2012,2013,3,624,
		312,0,2013,335,1,0,0,0,2014,2015,5,188,0,0,2015,2016,5,129,0,0,2016,2017,
		5,63,0,0,2017,2018,5,123,0,0,2018,2019,3,624,312,0,2019,2020,5,128,0,0,
		2020,2021,3,338,169,0,2021,2045,1,0,0,0,2022,2023,5,63,0,0,2023,2024,5,
		123,0,0,2024,2025,3,624,312,0,2025,2026,5,128,0,0,2026,2027,3,338,169,
		0,2027,2045,1,0,0,0,2028,2029,5,188,0,0,2029,2030,5,129,0,0,2030,2031,
		5,64,0,0,2031,2032,5,65,0,0,2032,2033,5,123,0,0,2033,2034,3,624,312,0,
		2034,2035,5,128,0,0,2035,2036,3,338,169,0,2036,2045,1,0,0,0,2037,2038,
		5,64,0,0,2038,2039,5,65,0,0,2039,2040,5,123,0,0,2040,2041,3,624,312,0,
		2041,2042,5,128,0,0,2042,2043,3,338,169,0,2043,2045,1,0,0,0,2044,2014,
		1,0,0,0,2044,2022,1,0,0,0,2044,2028,1,0,0,0,2044,2037,1,0,0,0,2045,337,
		1,0,0,0,2046,2047,3,342,171,0,2047,2048,3,340,170,0,2048,2051,1,0,0,0,
		2049,2051,3,340,170,0,2050,2046,1,0,0,0,2050,2049,1,0,0,0,2051,339,1,0,
		0,0,2052,2054,5,62,0,0,2053,2055,5,188,0,0,2054,2053,1,0,0,0,2054,2055,
		1,0,0,0,2055,2062,1,0,0,0,2056,2057,5,12,0,0,2057,2059,5,64,0,0,2058,2060,
		5,188,0,0,2059,2058,1,0,0,0,2059,2060,1,0,0,0,2060,2062,1,0,0,0,2061,2052,
		1,0,0,0,2061,2056,1,0,0,0,2062,341,1,0,0,0,2063,2064,6,171,-1,0,2064,2065,
		3,346,173,0,2065,2070,1,0,0,0,2066,2067,10,1,0,0,2067,2069,3,344,172,0,
		2068,2066,1,0,0,0,2069,2072,1,0,0,0,2070,2068,1,0,0,0,2070,2071,1,0,0,
		0,2071,343,1,0,0,0,2072,2070,1,0,0,0,2073,2076,3,346,173,0,2074,2076,3,
		388,194,0,2075,2073,1,0,0,0,2075,2074,1,0,0,0,2076,345,1,0,0,0,2077,2078,
		5,65,0,0,2078,2084,3,348,174,0,2079,2080,5,65,0,0,2080,2081,3,348,174,
		0,2081,2082,5,188,0,0,2082,2084,1,0,0,0,2083,2077,1,0,0,0,2083,2079,1,
		0,0,0,2084,347,1,0,0,0,2085,2086,5,123,0,0,2086,2087,3,350,175,0,2087,
		2088,5,128,0,0,2088,2091,1,0,0,0,2089,2091,5,66,0,0,2090,2085,1,0,0,0,
		2090,2089,1,0,0,0,2091,349,1,0,0,0,2092,2094,3,352,176,0,2093,2092,1,0,
		0,0,2094,2095,1,0,0,0,2095,2093,1,0,0,0,2095,2096,1,0,0,0,2096,351,1,0,
		0,0,2097,2108,3,624,312,0,2098,2099,3,624,312,0,2099,2100,5,129,0,0,2100,
		2108,1,0,0,0,2101,2102,5,129,0,0,2102,2108,3,624,312,0,2103,2104,3,624,
		312,0,2104,2105,5,129,0,0,2105,2106,3,624,312,0,2106,2108,1,0,0,0,2107,
		2097,1,0,0,0,2107,2098,1,0,0,0,2107,2101,1,0,0,0,2107,2103,1,0,0,0,2108,
		353,1,0,0,0,2109,2110,3,356,178,0,2110,2114,3,358,179,0,2111,2113,3,360,
		180,0,2112,2111,1,0,0,0,2113,2116,1,0,0,0,2114,2112,1,0,0,0,2114,2115,
		1,0,0,0,2115,2118,1,0,0,0,2116,2114,1,0,0,0,2117,2119,3,364,182,0,2118,
		2117,1,0,0,0,2118,2119,1,0,0,0,2119,2120,1,0,0,0,2120,2121,3,368,184,0,
		2121,355,1,0,0,0,2122,2123,5,51,0,0,2123,2124,5,123,0,0,2124,2125,3,624,
		312,0,2125,2126,5,128,0,0,2126,2127,5,52,0,0,2127,357,1,0,0,0,2128,2130,
		3,388,194,0,2129,2128,1,0,0,0,2130,2133,1,0,0,0,2131,2129,1,0,0,0,2131,
		2132,1,0,0,0,2132,359,1,0,0,0,2133,2131,1,0,0,0,2134,2135,3,362,181,0,
		2135,2136,3,358,179,0,2136,361,1,0,0,0,2137,2138,5,56,0,0,2138,2139,5,
		123,0,0,2139,2140,3,624,312,0,2140,2141,5,128,0,0,2141,2142,5,52,0,0,2142,
		2151,1,0,0,0,2143,2144,5,53,0,0,2144,2145,5,51,0,0,2145,2146,5,123,0,0,
		2146,2147,3,624,312,0,2147,2148,5,128,0,0,2148,2149,5,52,0,0,2149,2151,
		1,0,0,0,2150,2137,1,0,0,0,2150,2143,1,0,0,0,2151,363,1,0,0,0,2152,2153,
		3,366,183,0,2153,2154,3,358,179,0,2154,365,1,0,0,0,2155,2156,5,53,0,0,
		2156,367,1,0,0,0,2157,2161,5,54,0,0,2158,2159,5,12,0,0,2159,2161,5,51,
		0,0,2160,2157,1,0,0,0,2160,2158,1,0,0,0,2161,369,1,0,0,0,2162,2165,3,380,
		190,0,2163,2165,3,372,186,0,2164,2162,1,0,0,0,2164,2163,1,0,0,0,2165,371,
		1,0,0,0,2166,2168,3,378,189,0,2167,2166,1,0,0,0,2167,2168,1,0,0,0,2168,
		2169,1,0,0,0,2169,2171,5,57,0,0,2170,2172,3,428,214,0,2171,2170,1,0,0,
		0,2171,2172,1,0,0,0,2172,2176,1,0,0,0,2173,2175,3,388,194,0,2174,2173,
		1,0,0,0,2175,2178,1,0,0,0,2176,2174,1,0,0,0,2176,2177,1,0,0,0,2177,2179,
		1,0,0,0,2178,2176,1,0,0,0,2179,2180,3,374,187,0,2180,373,1,0,0,0,2181,
		2183,5,70,0,0,2182,2184,3,376,188,0,2183,2182,1,0,0,0,2183,2184,1,0,0,
		0,2184,2191,1,0,0,0,2185,2186,5,12,0,0,2186,2188,5,57,0,0,2187,2189,3,
		376,188,0,2188,2187,1,0,0,0,2188,2189,1,0,0,0,2189,2191,1,0,0,0,2190,2181,
		1,0,0,0,2190,2185,1,0,0,0,2191,375,1,0,0,0,2192,2193,3,300,150,0,2193,
		377,1,0,0,0,2194,2195,5,188,0,0,2195,2196,5,129,0,0,2196,379,1,0,0,0,2197,
		2198,5,57,0,0,2198,2199,3,382,191,0,2199,2203,3,428,214,0,2200,2202,3,
		388,194,0,2201,2200,1,0,0,0,2202,2205,1,0,0,0,2203,2201,1,0,0,0,2203,2204,
		1,0,0,0,2204,2206,1,0,0,0,2205,2203,1,0,0,0,2206,2207,3,384,192,0,2207,
		2208,3,386,193,0,2208,381,1,0,0,0,2209,2210,5,186,0,0,2210,383,1,0,0,0,
		2211,2212,5,186,0,0,2212,385,1,0,0,0,2213,2214,3,436,218,0,2214,387,1,
		0,0,0,2215,2221,3,320,160,0,2216,2221,3,48,24,0,2217,2221,3,392,196,0,
		2218,2221,3,62,31,0,2219,2221,3,390,195,0,2220,2215,1,0,0,0,2220,2216,
		1,0,0,0,2220,2217,1,0,0,0,2220,2218,1,0,0,0,2220,2219,1,0,0,0,2221,389,
		1,0,0,0,2222,2223,5,57,0,0,2223,2224,3,572,286,0,2224,2225,3,428,214,0,
		2225,391,1,0,0,0,2226,2227,5,48,0,0,2227,2234,3,394,197,0,2228,2230,5,
		122,0,0,2229,2228,1,0,0,0,2229,2230,1,0,0,0,2230,2231,1,0,0,0,2231,2233,
		3,394,197,0,2232,2229,1,0,0,0,2233,2236,1,0,0,0,2234,2232,1,0,0,0,2234,
		2235,1,0,0,0,2235,393,1,0,0,0,2236,2234,1,0,0,0,2237,2238,3,396,198,0,
		2238,2239,3,398,199,0,2239,395,1,0,0,0,2240,2245,3,402,201,0,2241,2242,
		5,122,0,0,2242,2244,3,402,201,0,2243,2241,1,0,0,0,2244,2247,1,0,0,0,2245,
		2243,1,0,0,0,2245,2246,1,0,0,0,2246,2248,1,0,0,0,2247,2245,1,0,0,0,2248,
		2249,5,133,0,0,2249,397,1,0,0,0,2250,2255,3,400,200,0,2251,2252,5,122,
		0,0,2252,2254,3,400,200,0,2253,2251,1,0,0,0,2254,2257,1,0,0,0,2255,2253,
		1,0,0,0,2255,2256,1,0,0,0,2256,2258,1,0,0,0,2257,2255,1,0,0,0,2258,2259,
		5,133,0,0,2259,399,1,0,0,0,2260,2270,3,284,142,0,2261,2262,3,284,142,0,
		2262,2263,5,192,0,0,2263,2264,3,284,142,0,2264,2270,1,0,0,0,2265,2266,
		3,292,146,0,2266,2267,5,192,0,0,2267,2268,3,284,142,0,2268,2270,1,0,0,
		0,2269,2260,1,0,0,0,2269,2261,1,0,0,0,2269,2265,1,0,0,0,2270,401,1,0,0,
		0,2271,2274,3,404,202,0,2272,2274,3,414,207,0,2273,2271,1,0,0,0,2273,2272,
		1,0,0,0,2274,403,1,0,0,0,2275,2277,3,432,216,0,2276,2278,3,406,203,0,2277,
		2276,1,0,0,0,2277,2278,1,0,0,0,2278,2280,1,0,0,0,2279,2281,3,412,206,0,
		2280,2279,1,0,0,0,2280,2281,1,0,0,0,2281,405,1,0,0,0,2282,2283,5,123,0,
		0,2283,2284,3,408,204,0,2284,2285,5,128,0,0,2285,407,1,0,0,0,2286,2288,
		3,410,205,0,2287,2286,1,0,0,0,2288,2289,1,0,0,0,2289,2287,1,0,0,0,2289,
		2290,1,0,0,0,2290,409,1,0,0,0,2291,2292,3,624,312,0,2292,411,1,0,0,0,2293,
		2295,5,123,0,0,2294,2296,3,624,312,0,2295,2294,1,0,0,0,2295,2296,1,0,0,
		0,2296,2297,1,0,0,0,2297,2298,3,680,340,0,2298,2299,5,128,0,0,2299,413,
		1,0,0,0,2300,2301,5,123,0,0,2301,2302,3,416,208,0,2302,2303,5,122,0,0,
		2303,2304,3,426,213,0,2304,2305,5,130,0,0,2305,2306,3,624,312,0,2306,2307,
		5,122,0,0,2307,2308,3,624,312,0,2308,2309,5,128,0,0,2309,2323,1,0,0,0,
		2310,2311,5,123,0,0,2311,2312,3,416,208,0,2312,2313,5,122,0,0,2313,2314,
		3,426,213,0,2314,2315,5,130,0,0,2315,2316,3,624,312,0,2316,2317,5,122,
		0,0,2317,2318,3,624,312,0,2318,2319,5,122,0,0,2319,2320,3,624,312,0,2320,
		2321,5,128,0,0,2321,2323,1,0,0,0,2322,2300,1,0,0,0,2322,2310,1,0,0,0,2323,
		415,1,0,0,0,2324,2326,3,418,209,0,2325,2324,1,0,0,0,2326,2327,1,0,0,0,
		2327,2325,1,0,0,0,2327,2328,1,0,0,0,2328,417,1,0,0,0,2329,2333,3,424,212,
		0,2330,2333,3,414,207,0,2331,2333,3,420,210,0,2332,2329,1,0,0,0,2332,2330,
		1,0,0,0,2332,2331,1,0,0,0,2333,419,1,0,0,0,2334,2335,6,210,-1,0,2335,2336,
		3,432,216,0,2336,2337,3,422,211,0,2337,2342,1,0,0,0,2338,2339,10,1,0,0,
		2339,2341,3,422,211,0,2340,2338,1,0,0,0,2341,2344,1,0,0,0,2342,2340,1,
		0,0,0,2342,2343,1,0,0,0,2343,421,1,0,0,0,2344,2342,1,0,0,0,2345,2346,5,
		123,0,0,2346,2347,3,676,338,0,2347,2348,5,128,0,0,2348,2349,5,124,0,0,
		2349,2350,5,188,0,0,2350,2354,1,0,0,0,2351,2352,5,124,0,0,2352,2354,5,
		188,0,0,2353,2345,1,0,0,0,2353,2351,1,0,0,0,2354,423,1,0,0,0,2355,2356,
		3,432,216,0,2356,2357,5,123,0,0,2357,2358,3,676,338,0,2358,2359,5,128,
		0,0,2359,2366,1,0,0,0,2360,2361,3,420,210,0,2361,2362,5,123,0,0,2362,2363,
		3,676,338,0,2363,2364,5,128,0,0,2364,2366,1,0,0,0,2365,2355,1,0,0,0,2365,
		2360,1,0,0,0,2366,425,1,0,0,0,2367,2368,5,188,0,0,2368,427,1,0,0,0,2369,
		2371,5,122,0,0,2370,2369,1,0,0,0,2370,2371,1,0,0,0,2371,2372,1,0,0,0,2372,
		2373,3,430,215,0,2373,429,1,0,0,0,2374,2375,3,432,216,0,2375,2376,5,130,
		0,0,2376,2377,3,624,312,0,2377,2378,5,122,0,0,2378,2380,3,624,312,0,2379,
		2381,3,434,217,0,2380,2379,1,0,0,0,2380,2381,1,0,0,0,2381,2388,1,0,0,0,
		2382,2383,5,125,0,0,2383,2384,5,123,0,0,2384,2385,3,624,312,0,2385,2386,
		5,128,0,0,2386,2388,1,0,0,0,2387,2374,1,0,0,0,2387,2382,1,0,0,0,2388,431,
		1,0,0,0,2389,2390,5,188,0,0,2390,433,1,0,0,0,2391,2392,5,122,0,0,2392,
		2393,3,624,312,0,2393,435,1,0,0,0,2394,2424,3,570,285,0,2395,2424,3,576,
		288,0,2396,2424,3,584,292,0,2397,2424,3,586,293,0,2398,2424,3,562,281,
		0,2399,2424,3,548,274,0,2400,2424,3,546,273,0,2401,2424,3,544,272,0,2402,
		2424,3,538,269,0,2403,2424,3,540,270,0,2404,2424,3,534,267,0,2405,2424,
		3,694,347,0,2406,2424,3,528,264,0,2407,2424,3,522,261,0,2408,2424,3,520,
		260,0,2409,2424,3,510,255,0,2410,2424,3,488,244,0,2411,2424,3,484,242,
		0,2412,2424,3,486,243,0,2413,2424,3,476,238,0,2414,2424,3,470,235,0,2415,
		2424,3,472,236,0,2416,2424,3,460,230,0,2417,2424,3,458,229,0,2418,2424,
		3,454,227,0,2419,2424,3,452,226,0,2420,2424,3,444,222,0,2421,2424,3,440,
		220,0,2422,2424,3,438,219,0,2423,2394,1,0,0,0,2423,2395,1,0,0,0,2423,2396,
		1,0,0,0,2423,2397,1,0,0,0,2423,2398,1,0,0,0,2423,2399,1,0,0,0,2423,2400,
		1,0,0,0,2423,2401,1,0,0,0,2423,2402,1,0,0,0,2423,2403,1,0,0,0,2423,2404,
		1,0,0,0,2423,2405,1,0,0,0,2423,2406,1,0,0,0,2423,2407,1,0,0,0,2423,2408,
		1,0,0,0,2423,2409,1,0,0,0,2423,2410,1,0,0,0,2423,2411,1,0,0,0,2423,2412,
		1,0,0,0,2423,2413,1,0,0,0,2423,2414,1,0,0,0,2423,2415,1,0,0,0,2423,2416,
		1,0,0,0,2423,2417,1,0,0,0,2423,2418,1,0,0,0,2423,2419,1,0,0,0,2423,2420,
		1,0,0,0,2423,2421,1,0,0,0,2423,2422,1,0,0,0,2424,437,1,0,0,0,2425,2426,
		5,61,0,0,2426,2427,5,123,0,0,2427,2428,3,334,167,0,2428,2429,5,128,0,0,
		2429,2430,3,576,288,0,2430,439,1,0,0,0,2431,2432,5,188,0,0,2432,2433,5,
		25,0,0,2433,2444,3,442,221,0,2434,2436,5,188,0,0,2435,2437,3,578,289,0,
		2436,2435,1,0,0,0,2436,2437,1,0,0,0,2437,2438,1,0,0,0,2438,2439,5,124,
		0,0,2439,2440,3,670,335,0,2440,2441,5,25,0,0,2441,2442,3,442,221,0,2442,
		2444,1,0,0,0,2443,2431,1,0,0,0,2443,2434,1,0,0,0,2444,441,1,0,0,0,2445,
		2446,3,624,312,0,2446,443,1,0,0,0,2447,2448,5,180,0,0,2448,2449,5,123,
		0,0,2449,2450,3,446,223,0,2450,2451,5,128,0,0,2451,445,1,0,0,0,2452,2457,
		3,448,224,0,2453,2454,5,122,0,0,2454,2456,3,448,224,0,2455,2453,1,0,0,
		0,2456,2459,1,0,0,0,2457,2455,1,0,0,0,2457,2458,1,0,0,0,2458,447,1,0,0,
		0,2459,2457,1,0,0,0,2460,2463,5,188,0,0,2461,2463,3,450,225,0,2462,2460,
		1,0,0,0,2462,2461,1,0,0,0,2463,449,1,0,0,0,2464,2465,6,225,-1,0,2465,2467,
		5,188,0,0,2466,2468,3,578,289,0,2467,2466,1,0,0,0,2467,2468,1,0,0,0,2468,
		2469,1,0,0,0,2469,2470,5,124,0,0,2470,2471,5,188,0,0,2471,2476,1,0,0,0,
		2472,2473,10,1,0,0,2473,2475,3,422,211,0,2474,2472,1,0,0,0,2475,2478,1,
		0,0,0,2476,2474,1,0,0,0,2476,2477,1,0,0,0,2477,451,1,0,0,0,2478,2476,1,
		0,0,0,2479,2481,5,189,0,0,2480,2482,3,376,188,0,2481,2480,1,0,0,0,2481,
		2482,1,0,0,0,2482,453,1,0,0,0,2483,2484,5,179,0,0,2484,2485,5,123,0,0,
		2485,2486,3,456,228,0,2486,2487,5,122,0,0,2487,2488,5,127,0,0,2488,2489,
		5,130,0,0,2489,2490,3,404,202,0,2490,2491,5,128,0,0,2491,2498,1,0,0,0,
		2492,2493,5,179,0,0,2493,2494,5,123,0,0,2494,2495,3,456,228,0,2495,2496,
		5,128,0,0,2496,2498,1,0,0,0,2497,2483,1,0,0,0,2497,2492,1,0,0,0,2498,455,
		1,0,0,0,2499,2504,3,466,233,0,2500,2501,5,122,0,0,2501,2503,3,466,233,
		0,2502,2500,1,0,0,0,2503,2506,1,0,0,0,2504,2502,1,0,0,0,2504,2505,1,0,
		0,0,2505,457,1,0,0,0,2506,2504,1,0,0,0,2507,2509,5,181,0,0,2508,2510,3,
		376,188,0,2509,2508,1,0,0,0,2509,2510,1,0,0,0,2510,459,1,0,0,0,2511,2512,
		5,126,0,0,2512,2513,5,123,0,0,2513,2514,3,462,231,0,2514,2515,5,122,0,
		0,2515,2516,5,127,0,0,2516,2517,5,130,0,0,2517,2518,3,404,202,0,2518,2519,
		5,128,0,0,2519,2526,1,0,0,0,2520,2521,5,126,0,0,2521,2522,5,123,0,0,2522,
		2523,3,462,231,0,2523,2524,5,128,0,0,2524,2526,1,0,0,0,2525,2511,1,0,0,
		0,2525,2520,1,0,0,0,2526,461,1,0,0,0,2527,2532,3,464,232,0,2528,2529,5,
		122,0,0,2529,2531,3,464,232,0,2530,2528,1,0,0,0,2531,2534,1,0,0,0,2532,
		2530,1,0,0,0,2532,2533,1,0,0,0,2533,463,1,0,0,0,2534,2532,1,0,0,0,2535,
		2540,3,466,233,0,2536,2537,3,466,233,0,2537,2538,3,468,234,0,2538,2540,
		1,0,0,0,2539,2535,1,0,0,0,2539,2536,1,0,0,0,2540,465,1,0,0,0,2541,2542,
		6,233,-1,0,2542,2543,3,432,216,0,2543,2548,1,0,0,0,2544,2545,10,1,0,0,
		2545,2547,3,422,211,0,2546,2544,1,0,0,0,2547,2550,1,0,0,0,2548,2546,1,
		0,0,0,2548,2549,1,0,0,0,2549,467,1,0,0,0,2550,2548,1,0,0,0,2551,2552,5,
		123,0,0,2552,2553,3,676,338,0,2553,2554,5,128,0,0,2554,469,1,0,0,0,2555,
		2557,5,68,0,0,2556,2558,7,6,0,0,2557,2556,1,0,0,0,2557,2558,1,0,0,0,2558,
		471,1,0,0,0,2559,2560,5,72,0,0,2560,2561,5,123,0,0,2561,2562,3,474,237,
		0,2562,2564,5,128,0,0,2563,2565,3,512,256,0,2564,2563,1,0,0,0,2564,2565,
		1,0,0,0,2565,473,1,0,0,0,2566,2567,6,237,-1,0,2567,2568,3,588,294,0,2568,
		2569,5,121,0,0,2569,2570,5,122,0,0,2570,2581,1,0,0,0,2571,2572,3,588,294,
		0,2572,2573,5,122,0,0,2573,2574,3,518,259,0,2574,2581,1,0,0,0,2575,2576,
		3,588,294,0,2576,2577,5,122,0,0,2577,2578,3,508,254,0,2578,2581,1,0,0,
		0,2579,2581,3,508,254,0,2580,2566,1,0,0,0,2580,2571,1,0,0,0,2580,2575,
		1,0,0,0,2580,2579,1,0,0,0,2581,2587,1,0,0,0,2582,2583,10,1,0,0,2583,2584,
		5,122,0,0,2584,2586,3,508,254,0,2585,2582,1,0,0,0,2586,2589,1,0,0,0,2587,
		2585,1,0,0,0,2587,2588,1,0,0,0,2588,475,1,0,0,0,2589,2587,1,0,0,0,2590,
		2591,5,188,0,0,2591,2592,3,478,239,0,2592,477,1,0,0,0,2593,2595,5,123,
		0,0,2594,2596,3,480,240,0,2595,2594,1,0,0,0,2595,2596,1,0,0,0,2596,2597,
		1,0,0,0,2597,2598,5,128,0,0,2598,2599,5,130,0,0,2599,2600,3,624,312,0,
		2600,479,1,0,0,0,2601,2606,3,482,241,0,2602,2603,5,122,0,0,2603,2605,3,
		482,241,0,2604,2602,1,0,0,0,2605,2608,1,0,0,0,2606,2604,1,0,0,0,2606,2607,
		1,0,0,0,2607,481,1,0,0,0,2608,2606,1,0,0,0,2609,2610,5,188,0,0,2610,483,
		1,0,0,0,2611,2613,5,91,0,0,2612,2614,3,624,312,0,2613,2612,1,0,0,0,2613,
		2614,1,0,0,0,2614,485,1,0,0,0,2615,2616,5,114,0,0,2616,2623,3,588,294,
		0,2617,2618,5,114,0,0,2618,2619,5,123,0,0,2619,2620,3,590,295,0,2620,2621,
		5,128,0,0,2621,2623,1,0,0,0,2622,2615,1,0,0,0,2622,2617,1,0,0,0,2623,487,
		1,0,0,0,2624,2625,5,73,0,0,2625,2627,3,502,251,0,2626,2628,3,496,248,0,
		2627,2626,1,0,0,0,2627,2628,1,0,0,0,2628,2635,1,0,0,0,2629,2630,5,73,0,
		0,2630,2632,3,492,246,0,2631,2633,3,490,245,0,2632,2631,1,0,0,0,2632,2633,
		1,0,0,0,2633,2635,1,0,0,0,2634,2624,1,0,0,0,2634,2629,1,0,0,0,2635,489,
		1,0,0,0,2636,2637,5,122,0,0,2637,2638,3,496,248,0,2638,491,1,0,0,0,2639,
		2657,3,572,286,0,2640,2657,5,192,0,0,2641,2657,3,558,279,0,2642,2643,3,
		558,279,0,2643,2644,5,133,0,0,2644,2645,5,184,0,0,2645,2646,5,133,0,0,
		2646,2647,5,185,0,0,2647,2648,3,556,278,0,2648,2657,1,0,0,0,2649,2650,
		3,494,247,0,2650,2651,5,133,0,0,2651,2652,5,184,0,0,2652,2653,5,133,0,
		0,2653,2654,5,185,0,0,2654,2655,3,556,278,0,2655,2657,1,0,0,0,2656,2639,
		1,0,0,0,2656,2640,1,0,0,0,2656,2641,1,0,0,0,2656,2642,1,0,0,0,2656,2649,
		1,0,0,0,2657,493,1,0,0,0,2658,2659,5,123,0,0,2659,2660,3,598,299,0,2660,
		2661,5,128,0,0,2661,495,1,0,0,0,2662,2667,3,498,249,0,2663,2664,5,122,
		0,0,2664,2666,3,498,249,0,2665,2663,1,0,0,0,2666,2669,1,0,0,0,2667,2665,
		1,0,0,0,2667,2668,1,0,0,0,2668,497,1,0,0,0,2669,2667,1,0,0,0,2670,2673,
		3,670,335,0,2671,2673,3,500,250,0,2672,2670,1,0,0,0,2672,2671,1,0,0,0,
		2673,499,1,0,0,0,2674,2675,5,123,0,0,2675,2676,3,496,248,0,2676,2677,5,
		122,0,0,2677,2678,3,426,213,0,2678,2679,5,130,0,0,2679,2680,3,624,312,
		0,2680,2681,5,122,0,0,2681,2683,3,624,312,0,2682,2684,3,434,217,0,2683,
		2682,1,0,0,0,2683,2684,1,0,0,0,2684,2685,1,0,0,0,2685,2686,5,128,0,0,2686,
		501,1,0,0,0,2687,2693,3,504,252,0,2688,2689,5,123,0,0,2689,2690,3,506,
		253,0,2690,2691,5,128,0,0,2691,2693,1,0,0,0,2692,2687,1,0,0,0,2692,2688,
		1,0,0,0,2693,503,1,0,0,0,2694,2695,5,123,0,0,2695,2696,3,598,299,0,2696,
		2697,5,128,0,0,2697,2702,1,0,0,0,2698,2699,5,123,0,0,2699,2700,5,192,0,
		0,2700,2702,5,128,0,0,2701,2694,1,0,0,0,2701,2698,1,0,0,0,2702,505,1,0,
		0,0,2703,2704,6,253,-1,0,2704,2705,3,588,294,0,2705,2706,5,122,0,0,2706,
		2707,3,508,254,0,2707,2714,1,0,0,0,2708,2709,3,588,294,0,2709,2710,5,122,
		0,0,2710,2711,3,518,259,0,2711,2714,1,0,0,0,2712,2714,3,508,254,0,2713,
		2703,1,0,0,0,2713,2708,1,0,0,0,2713,2712,1,0,0,0,2714,2720,1,0,0,0,2715,
		2716,10,1,0,0,2716,2717,5,122,0,0,2717,2719,3,508,254,0,2718,2715,1,0,
		0,0,2719,2722,1,0,0,0,2720,2718,1,0,0,0,2720,2721,1,0,0,0,2721,507,1,0,
		0,0,2722,2720,1,0,0,0,2723,2724,5,76,0,0,2724,2725,5,130,0,0,2725,2754,
		3,518,259,0,2726,2727,5,77,0,0,2727,2728,5,130,0,0,2728,2754,3,588,294,
		0,2729,2730,5,69,0,0,2730,2731,5,130,0,0,2731,2754,3,624,312,0,2732,2733,
		5,12,0,0,2733,2734,5,130,0,0,2734,2754,3,572,286,0,2735,2736,5,83,0,0,
		2736,2737,5,130,0,0,2737,2754,3,572,286,0,2738,2739,5,87,0,0,2739,2740,
		5,130,0,0,2740,2754,3,596,298,0,2741,2742,5,86,0,0,2742,2743,5,130,0,0,
		2743,2754,3,96,48,0,2744,2745,5,85,0,0,2745,2746,5,130,0,0,2746,2754,3,
		554,277,0,2747,2748,5,84,0,0,2748,2749,5,130,0,0,2749,2754,3,404,202,0,
		2750,2751,5,142,0,0,2751,2752,5,130,0,0,2752,2754,3,572,286,0,2753,2723,
		1,0,0,0,2753,2726,1,0,0,0,2753,2729,1,0,0,0,2753,2732,1,0,0,0,2753,2735,
		1,0,0,0,2753,2738,1,0,0,0,2753,2741,1,0,0,0,2753,2744,1,0,0,0,2753,2747,
		1,0,0,0,2753,2750,1,0,0,0,2754,509,1,0,0,0,2755,2756,5,74,0,0,2756,2757,
		3,518,259,0,2757,2758,5,122,0,0,2758,2759,3,512,256,0,2759,2763,1,0,0,
		0,2760,2761,5,74,0,0,2761,2763,3,518,259,0,2762,2755,1,0,0,0,2762,2760,
		1,0,0,0,2763,511,1,0,0,0,2764,2767,3,624,312,0,2765,2767,3,514,257,0,2766,
		2764,1,0,0,0,2766,2765,1,0,0,0,2767,513,1,0,0,0,2768,2769,6,257,-1,0,2769,
		2770,3,624,312,0,2770,2771,5,122,0,0,2771,2772,3,624,312,0,2772,2779,1,
		0,0,0,2773,2774,3,624,312,0,2774,2775,5,122,0,0,2775,2776,3,516,258,0,
		2776,2779,1,0,0,0,2777,2779,3,516,258,0,2778,2768,1,0,0,0,2778,2773,1,
		0,0,0,2778,2777,1,0,0,0,2779,2788,1,0,0,0,2780,2781,10,2,0,0,2781,2782,
		5,122,0,0,2782,2787,3,624,312,0,2783,2784,10,1,0,0,2784,2785,5,122,0,0,
		2785,2787,3,516,258,0,2786,2780,1,0,0,0,2786,2783,1,0,0,0,2787,2790,1,
		0,0,0,2788,2786,1,0,0,0,2788,2789,1,0,0,0,2789,515,1,0,0,0,2790,2788,1,
		0,0,0,2791,2792,5,123,0,0,2792,2793,3,624,312,0,2793,2794,5,122,0,0,2794,
		2795,3,426,213,0,2795,2796,5,130,0,0,2796,2797,3,624,312,0,2797,2798,5,
		122,0,0,2798,2800,3,624,312,0,2799,2801,3,434,217,0,2800,2799,1,0,0,0,
		2800,2801,1,0,0,0,2801,2802,1,0,0,0,2802,2803,5,128,0,0,2803,2818,1,0,
		0,0,2804,2805,5,123,0,0,2805,2806,3,514,257,0,2806,2807,5,122,0,0,2807,
		2808,3,426,213,0,2808,2809,5,130,0,0,2809,2810,3,624,312,0,2810,2811,5,
		122,0,0,2811,2813,3,624,312,0,2812,2814,3,434,217,0,2813,2812,1,0,0,0,
		2813,2814,1,0,0,0,2814,2815,1,0,0,0,2815,2816,5,128,0,0,2816,2818,1,0,
		0,0,2817,2791,1,0,0,0,2817,2804,1,0,0,0,2818,517,1,0,0,0,2819,2823,3,572,
		286,0,2820,2823,3,554,277,0,2821,2823,5,192,0,0,2822,2819,1,0,0,0,2822,
		2820,1,0,0,0,2822,2821,1,0,0,0,2823,519,1,0,0,0,2824,2826,5,71,0,0,2825,
		2827,7,6,0,0,2826,2825,1,0,0,0,2826,2827,1,0,0,0,2827,521,1,0,0,0,2828,
		2829,5,75,0,0,2829,2830,5,123,0,0,2830,2831,3,524,262,0,2831,2832,5,128,
		0,0,2832,523,1,0,0,0,2833,2835,3,592,296,0,2834,2833,1,0,0,0,2834,2835,
		1,0,0,0,2835,2837,1,0,0,0,2836,2838,3,526,263,0,2837,2836,1,0,0,0,2837,
		2838,1,0,0,0,2838,2843,1,0,0,0,2839,2840,5,122,0,0,2840,2842,3,526,263,
		0,2841,2839,1,0,0,0,2842,2845,1,0,0,0,2843,2841,1,0,0,0,2843,2844,1,0,
		0,0,2844,525,1,0,0,0,2845,2843,1,0,0,0,2846,2847,5,77,0,0,2847,2848,5,
		130,0,0,2848,2886,3,588,294,0,2849,2850,5,83,0,0,2850,2851,5,130,0,0,2851,
		2886,3,572,286,0,2852,2853,5,97,0,0,2853,2854,5,130,0,0,2854,2886,3,554,
		277,0,2855,2856,5,98,0,0,2856,2857,5,130,0,0,2857,2886,3,554,277,0,2858,
		2859,5,99,0,0,2859,2860,5,130,0,0,2860,2886,3,554,277,0,2861,2862,5,101,
		0,0,2862,2863,5,130,0,0,2863,2886,3,554,277,0,2864,2865,5,102,0,0,2865,
		2866,5,130,0,0,2866,2886,3,624,312,0,2867,2868,5,190,0,0,2868,2869,5,130,
		0,0,2869,2886,3,554,277,0,2870,2871,5,87,0,0,2871,2872,5,130,0,0,2872,
		2886,3,596,298,0,2873,2874,5,100,0,0,2874,2875,5,130,0,0,2875,2886,3,554,
		277,0,2876,2877,5,79,0,0,2877,2878,5,130,0,0,2878,2886,3,554,277,0,2879,
		2880,5,80,0,0,2880,2881,5,130,0,0,2881,2886,3,554,277,0,2882,2883,5,78,
		0,0,2883,2884,5,130,0,0,2884,2886,3,554,277,0,2885,2846,1,0,0,0,2885,2849,
		1,0,0,0,2885,2852,1,0,0,0,2885,2855,1,0,0,0,2885,2858,1,0,0,0,2885,2861,
		1,0,0,0,2885,2864,1,0,0,0,2885,2867,1,0,0,0,2885,2870,1,0,0,0,2885,2873,
		1,0,0,0,2885,2876,1,0,0,0,2885,2879,1,0,0,0,2885,2882,1,0,0,0,2886,527,
		1,0,0,0,2887,2888,5,111,0,0,2888,2889,5,123,0,0,2889,2890,3,530,265,0,
		2890,2891,5,128,0,0,2891,2901,1,0,0,0,2892,2893,5,111,0,0,2893,2894,5,
		123,0,0,2894,2895,5,81,0,0,2895,2896,5,130,0,0,2896,2897,3,596,298,0,2897,
		2898,5,128,0,0,2898,2899,3,512,256,0,2899,2901,1,0,0,0,2900,2887,1,0,0,
		0,2900,2892,1,0,0,0,2901,529,1,0,0,0,2902,2904,3,588,294,0,2903,2902,1,
		0,0,0,2903,2904,1,0,0,0,2904,2906,1,0,0,0,2905,2907,3,532,266,0,2906,2905,
		1,0,0,0,2906,2907,1,0,0,0,2907,2912,1,0,0,0,2908,2909,5,122,0,0,2909,2911,
		3,532,266,0,2910,2908,1,0,0,0,2911,2914,1,0,0,0,2912,2910,1,0,0,0,2912,
		2913,1,0,0,0,2913,531,1,0,0,0,2914,2912,1,0,0,0,2915,2916,5,77,0,0,2916,
		2917,5,130,0,0,2917,2991,3,588,294,0,2918,2919,5,97,0,0,2919,2920,5,130,
		0,0,2920,2991,3,554,277,0,2921,2922,5,83,0,0,2922,2923,5,130,0,0,2923,
		2991,3,572,286,0,2924,2925,5,87,0,0,2925,2926,5,130,0,0,2926,2991,3,596,
		298,0,2927,2928,5,103,0,0,2928,2929,5,130,0,0,2929,2991,3,596,298,0,2930,
		2931,5,104,0,0,2931,2932,5,130,0,0,2932,2991,3,596,298,0,2933,2934,5,105,
		0,0,2934,2935,5,130,0,0,2935,2991,3,596,298,0,2936,2937,5,106,0,0,2937,
		2938,5,130,0,0,2938,2991,3,596,298,0,2939,2940,5,188,0,0,2940,2941,5,130,
		0,0,2941,2991,3,596,298,0,2942,2943,5,99,0,0,2943,2944,5,130,0,0,2944,
		2991,3,596,298,0,2945,2946,5,95,0,0,2946,2947,5,130,0,0,2947,2991,3,596,
		298,0,2948,2949,5,67,0,0,2949,2950,5,130,0,0,2950,2991,3,596,298,0,2951,
		2952,5,101,0,0,2952,2953,5,130,0,0,2953,2991,3,596,298,0,2954,2955,5,108,
		0,0,2955,2956,5,130,0,0,2956,2991,3,596,298,0,2957,2958,5,109,0,0,2958,
		2959,5,130,0,0,2959,2991,3,596,298,0,2960,2961,5,102,0,0,2961,2962,5,130,
		0,0,2962,2991,3,624,312,0,2963,2964,5,110,0,0,2964,2965,5,130,0,0,2965,
		2991,3,596,298,0,2966,2967,5,190,0,0,2967,2968,5,130,0,0,2968,2991,3,596,
		298,0,2969,2970,5,100,0,0,2970,2971,5,130,0,0,2971,2991,3,596,298,0,2972,
		2973,5,79,0,0,2973,2974,5,130,0,0,2974,2991,3,596,298,0,2975,2976,5,73,
		0,0,2976,2977,5,130,0,0,2977,2991,3,596,298,0,2978,2979,5,72,0,0,2979,
		2980,5,130,0,0,2980,2991,3,596,298,0,2981,2982,5,82,0,0,2982,2983,5,130,
		0,0,2983,2991,3,596,298,0,2984,2985,5,80,0,0,2985,2986,5,130,0,0,2986,
		2991,3,596,298,0,2987,2988,5,78,0,0,2988,2989,5,130,0,0,2989,2991,3,596,
		298,0,2990,2915,1,0,0,0,2990,2918,1,0,0,0,2990,2921,1,0,0,0,2990,2924,
		1,0,0,0,2990,2927,1,0,0,0,2990,2930,1,0,0,0,2990,2933,1,0,0,0,2990,2936,
		1,0,0,0,2990,2939,1,0,0,0,2990,2942,1,0,0,0,2990,2945,1,0,0,0,2990,2948,
		1,0,0,0,2990,2951,1,0,0,0,2990,2954,1,0,0,0,2990,2957,1,0,0,0,2990,2960,
		1,0,0,0,2990,2963,1,0,0,0,2990,2966,1,0,0,0,2990,2969,1,0,0,0,2990,2972,
		1,0,0,0,2990,2975,1,0,0,0,2990,2978,1,0,0,0,2990,2981,1,0,0,0,2990,2984,
		1,0,0,0,2990,2987,1,0,0,0,2991,533,1,0,0,0,2992,2996,5,50,0,0,2993,2994,
		5,49,0,0,2994,2996,5,159,0,0,2995,2992,1,0,0,0,2995,2993,1,0,0,0,2996,
		2997,1,0,0,0,2997,3019,3,432,216,0,2998,3002,5,50,0,0,2999,3000,5,49,0,
		0,3000,3002,5,159,0,0,3001,2998,1,0,0,0,3001,2999,1,0,0,0,3002,3003,1,
		0,0,0,3003,3004,3,432,216,0,3004,3005,5,123,0,0,3005,3006,3,542,271,0,
		3006,3007,5,128,0,0,3007,3019,1,0,0,0,3008,3012,5,50,0,0,3009,3010,5,49,
		0,0,3010,3012,5,159,0,0,3011,3008,1,0,0,0,3011,3009,1,0,0,0,3012,3013,
		1,0,0,0,3013,3014,3,536,268,0,3014,3015,5,123,0,0,3015,3016,3,542,271,
		0,3016,3017,5,128,0,0,3017,3019,1,0,0,0,3018,2995,1,0,0,0,3018,3001,1,
		0,0,0,3018,3011,1,0,0,0,3019,535,1,0,0,0,3020,3021,3,432,216,0,3021,3022,
		5,122,0,0,3022,537,1,0,0,0,3023,3027,5,50,0,0,3024,3025,5,49,0,0,3025,
		3027,5,159,0,0,3026,3023,1,0,0,0,3026,3024,1,0,0,0,3027,3028,1,0,0,0,3028,
		3029,3,572,286,0,3029,539,1,0,0,0,3030,3031,5,50,0,0,3031,3032,5,123,0,
		0,3032,3033,3,542,271,0,3033,3035,5,128,0,0,3034,3036,5,122,0,0,3035,3034,
		1,0,0,0,3035,3036,1,0,0,0,3036,3037,1,0,0,0,3037,3038,3,624,312,0,3038,
		541,1,0,0,0,3039,3044,3,572,286,0,3040,3041,5,122,0,0,3041,3043,3,572,
		286,0,3042,3040,1,0,0,0,3043,3046,1,0,0,0,3044,3042,1,0,0,0,3044,3045,
		1,0,0,0,3045,543,1,0,0,0,3046,3044,1,0,0,0,3047,3051,5,113,0,0,3048,3049,
		5,12,0,0,3049,3051,5,97,0,0,3050,3047,1,0,0,0,3050,3048,1,0,0,0,3051,3052,
		1,0,0,0,3052,3063,3,588,294,0,3053,3057,5,113,0,0,3054,3055,5,12,0,0,3055,
		3057,5,97,0,0,3056,3053,1,0,0,0,3056,3054,1,0,0,0,3057,3058,1,0,0,0,3058,
		3059,5,123,0,0,3059,3060,3,590,295,0,3060,3061,5,128,0,0,3061,3063,1,0,
		0,0,3062,3050,1,0,0,0,3062,3056,1,0,0,0,3063,545,1,0,0,0,3064,3065,5,59,
		0,0,3065,547,1,0,0,0,3066,3067,5,92,0,0,3067,3068,5,123,0,0,3068,3069,
		3,550,275,0,3069,3070,5,128,0,0,3070,549,1,0,0,0,3071,3073,3,592,296,0,
		3072,3071,1,0,0,0,3072,3073,1,0,0,0,3073,3075,1,0,0,0,3074,3076,3,552,
		276,0,3075,3074,1,0,0,0,3075,3076,1,0,0,0,3076,3081,1,0,0,0,3077,3078,
		5,122,0,0,3078,3080,3,552,276,0,3079,3077,1,0,0,0,3080,3083,1,0,0,0,3081,
		3079,1,0,0,0,3081,3082,1,0,0,0,3082,551,1,0,0,0,3083,3081,1,0,0,0,3084,
		3085,5,77,0,0,3085,3086,5,130,0,0,3086,3096,3,588,294,0,3087,3088,5,83,
		0,0,3088,3089,5,130,0,0,3089,3096,3,572,286,0,3090,3091,5,98,0,0,3091,
		3092,5,130,0,0,3092,3096,3,554,277,0,3093,3094,5,87,0,0,3094,3096,3,596,
		298,0,3095,3084,1,0,0,0,3095,3087,1,0,0,0,3095,3090,1,0,0,0,3095,3093,
		1,0,0,0,3096,553,1,0,0,0,3097,3101,3,556,278,0,3098,3100,3,560,280,0,3099,
		3098,1,0,0,0,3100,3103,1,0,0,0,3101,3099,1,0,0,0,3101,3102,1,0,0,0,3102,
		555,1,0,0,0,3103,3101,1,0,0,0,3104,3110,3,558,279,0,3105,3106,5,123,0,
		0,3106,3107,3,554,277,0,3107,3108,5,128,0,0,3108,3110,1,0,0,0,3109,3104,
		1,0,0,0,3109,3105,1,0,0,0,3110,557,1,0,0,0,3111,3115,5,177,0,0,3112,3115,
		3,670,335,0,3113,3115,3,664,332,0,3114,3111,1,0,0,0,3114,3112,1,0,0,0,
		3114,3113,1,0,0,0,3115,559,1,0,0,0,3116,3117,3,556,278,0,3117,3118,5,133,
		0,0,3118,3119,5,184,0,0,3119,3120,5,133,0,0,3120,3121,5,185,0,0,3121,561,
		1,0,0,0,3122,3123,5,90,0,0,3123,3131,3,564,282,0,3124,3125,5,90,0,0,3125,
		3126,3,564,282,0,3126,3127,5,123,0,0,3127,3128,3,566,283,0,3128,3129,5,
		128,0,0,3129,3131,1,0,0,0,3130,3122,1,0,0,0,3130,3124,1,0,0,0,3131,563,
		1,0,0,0,3132,3133,5,188,0,0,3133,565,1,0,0,0,3134,3136,3,568,284,0,3135,
		3134,1,0,0,0,3135,3136,1,0,0,0,3136,3141,1,0,0,0,3137,3138,5,122,0,0,3138,
		3140,3,568,284,0,3139,3137,1,0,0,0,3140,3143,1,0,0,0,3141,3139,1,0,0,0,
		3141,3142,1,0,0,0,3142,567,1,0,0,0,3143,3141,1,0,0,0,3144,3159,3,624,312,
		0,3145,3159,5,155,0,0,3146,3147,5,192,0,0,3147,3159,3,572,286,0,3148,3149,
		5,188,0,0,3149,3150,5,130,0,0,3150,3159,3,624,312,0,3151,3152,5,188,0,
		0,3152,3153,5,130,0,0,3153,3159,5,155,0,0,3154,3155,5,188,0,0,3155,3156,
		5,130,0,0,3156,3157,5,192,0,0,3157,3159,3,572,286,0,3158,3144,1,0,0,0,
		3158,3145,1,0,0,0,3158,3146,1,0,0,0,3158,3148,1,0,0,0,3158,3151,1,0,0,
		0,3158,3154,1,0,0,0,3159,569,1,0,0,0,3160,3161,5,51,0,0,3161,3162,5,123,
		0,0,3162,3163,3,624,312,0,3163,3164,5,128,0,0,3164,3165,3,572,286,0,3165,
		3166,5,122,0,0,3166,3167,3,572,286,0,3167,3168,5,122,0,0,3168,3169,3,572,
		286,0,3169,571,1,0,0,0,3170,3171,3,574,287,0,3171,573,1,0,0,0,3172,3173,
		5,186,0,0,3173,575,1,0,0,0,3174,3176,3,574,287,0,3175,3174,1,0,0,0,3175,
		3176,1,0,0,0,3176,3177,1,0,0,0,3177,3179,5,188,0,0,3178,3180,3,578,289,
		0,3179,3178,1,0,0,0,3179,3180,1,0,0,0,3180,3182,1,0,0,0,3181,3183,3,412,
		206,0,3182,3181,1,0,0,0,3182,3183,1,0,0,0,3183,3184,1,0,0,0,3184,3185,
		5,130,0,0,3185,3205,3,624,312,0,3186,3188,5,188,0,0,3187,3189,3,578,289,
		0,3188,3187,1,0,0,0,3188,3189,1,0,0,0,3189,3190,1,0,0,0,3190,3191,5,124,
		0,0,3191,3192,3,670,335,0,3192,3193,5,130,0,0,3193,3194,3,624,312,0,3194,
		3205,1,0,0,0,3195,3196,5,188,0,0,3196,3197,5,123,0,0,3197,3198,3,480,240,
		0,3198,3199,5,128,0,0,3199,3200,5,124,0,0,3200,3201,3,670,335,0,3201,3202,
		5,130,0,0,3202,3203,3,624,312,0,3203,3205,1,0,0,0,3204,3175,1,0,0,0,3204,
		3186,1,0,0,0,3204,3195,1,0,0,0,3205,577,1,0,0,0,3206,3207,5,123,0,0,3207,
		3211,3,580,290,0,3208,3210,3,582,291,0,3209,3208,1,0,0,0,3210,3213,1,0,
		0,0,3211,3209,1,0,0,0,3211,3212,1,0,0,0,3212,3214,1,0,0,0,3213,3211,1,
		0,0,0,3214,3215,5,128,0,0,3215,579,1,0,0,0,3216,3218,3,624,312,0,3217,
		3219,5,129,0,0,3218,3217,1,0,0,0,3218,3219,1,0,0,0,3219,3221,1,0,0,0,3220,
		3222,3,624,312,0,3221,3220,1,0,0,0,3221,3222,1,0,0,0,3222,3241,1,0,0,0,
		3223,3225,5,129,0,0,3224,3226,3,624,312,0,3225,3224,1,0,0,0,3225,3226,
		1,0,0,0,3226,3241,1,0,0,0,3227,3229,3,624,312,0,3228,3227,1,0,0,0,3228,
		3229,1,0,0,0,3229,3230,1,0,0,0,3230,3231,5,129,0,0,3231,3232,3,624,312,
		0,3232,3233,5,129,0,0,3233,3234,3,624,312,0,3234,3241,1,0,0,0,3235,3237,
		3,624,312,0,3236,3235,1,0,0,0,3236,3237,1,0,0,0,3237,3238,1,0,0,0,3238,
		3239,5,30,0,0,3239,3241,3,624,312,0,3240,3216,1,0,0,0,3240,3223,1,0,0,
		0,3240,3228,1,0,0,0,3240,3236,1,0,0,0,3241,581,1,0,0,0,3242,3243,5,122,
		0,0,3243,3244,3,678,339,0,3244,583,1,0,0,0,3245,3246,5,31,0,0,3246,3247,
		3,572,286,0,3247,3248,5,159,0,0,3248,3249,3,432,216,0,3249,585,1,0,0,0,
		3250,3251,5,112,0,0,3251,3258,3,588,294,0,3252,3253,5,112,0,0,3253,3254,
		5,123,0,0,3254,3255,3,590,295,0,3255,3256,5,128,0,0,3256,3258,1,0,0,0,
		3257,3250,1,0,0,0,3257,3252,1,0,0,0,3258,587,1,0,0,0,3259,3262,3,598,299,
		0,3260,3262,5,192,0,0,3261,3259,1,0,0,0,3261,3260,1,0,0,0,3262,589,1,0,
		0,0,3263,3265,3,592,296,0,3264,3263,1,0,0,0,3264,3265,1,0,0,0,3265,3267,
		1,0,0,0,3266,3268,3,594,297,0,3267,3266,1,0,0,0,3268,3269,1,0,0,0,3269,
		3267,1,0,0,0,3269,3270,1,0,0,0,3270,591,1,0,0,0,3271,3273,3,588,294,0,
		3272,3274,5,122,0,0,3273,3272,1,0,0,0,3273,3274,1,0,0,0,3274,593,1,0,0,
		0,3275,3276,5,77,0,0,3276,3277,5,130,0,0,3277,3285,3,588,294,0,3278,3279,
		5,83,0,0,3279,3280,5,130,0,0,3280,3285,3,572,286,0,3281,3282,5,87,0,0,
		3282,3283,5,130,0,0,3283,3285,3,596,298,0,3284,3275,1,0,0,0,3284,3278,
		1,0,0,0,3284,3281,1,0,0,0,3285,595,1,0,0,0,3286,3289,3,432,216,0,3287,
		3289,3,424,212,0,3288,3286,1,0,0,0,3288,3287,1,0,0,0,3289,597,1,0,0,0,
		3290,3291,6,299,-1,0,3291,3295,3,600,300,0,3292,3293,7,1,0,0,3293,3295,
		3,600,300,0,3294,3290,1,0,0,0,3294,3292,1,0,0,0,3295,3301,1,0,0,0,3296,
		3297,10,1,0,0,3297,3298,7,1,0,0,3298,3300,3,600,300,0,3299,3296,1,0,0,
		0,3300,3303,1,0,0,0,3301,3299,1,0,0,0,3301,3302,1,0,0,0,3302,599,1,0,0,
		0,3303,3301,1,0,0,0,3304,3305,6,300,-1,0,3305,3306,3,602,301,0,3306,3317,
		1,0,0,0,3307,3308,10,2,0,0,3308,3309,7,7,0,0,3309,3316,3,602,301,0,3310,
		3311,10,1,0,0,3311,3312,5,133,0,0,3312,3313,5,133,0,0,3313,3314,1,0,0,
		0,3314,3316,3,604,302,0,3315,3307,1,0,0,0,3315,3310,1,0,0,0,3316,3319,
		1,0,0,0,3317,3315,1,0,0,0,3317,3318,1,0,0,0,3318,601,1,0,0,0,3319,3317,
		1,0,0,0,3320,3326,3,604,302,0,3321,3322,3,604,302,0,3322,3323,5,135,0,
		0,3323,3324,3,602,301,0,3324,3326,1,0,0,0,3325,3320,1,0,0,0,3325,3321,
		1,0,0,0,3326,603,1,0,0,0,3327,3336,5,186,0,0,3328,3336,5,177,0,0,3329,
		3336,3,670,335,0,3330,3336,3,664,332,0,3331,3332,5,123,0,0,3332,3333,3,
		598,299,0,3333,3334,5,128,0,0,3334,3336,1,0,0,0,3335,3327,1,0,0,0,3335,
		3328,1,0,0,0,3335,3329,1,0,0,0,3335,3330,1,0,0,0,3335,3331,1,0,0,0,3336,
		605,1,0,0,0,3337,3338,5,9,0,0,3338,3339,3,608,304,0,3339,3340,3,610,305,
		0,3340,3347,1,0,0,0,3341,3342,5,1,0,0,3342,3343,5,9,0,0,3343,3344,3,608,
		304,0,3344,3345,3,610,305,0,3345,3347,1,0,0,0,3346,3337,1,0,0,0,3346,3341,
		1,0,0,0,3347,607,1,0,0,0,3348,3349,5,188,0,0,3349,609,1,0,0,0,3350,3352,
		3,64,32,0,3351,3353,3,316,158,0,3352,3351,1,0,0,0,3352,3353,1,0,0,0,3353,
		3354,1,0,0,0,3354,3355,3,216,108,0,3355,3361,1,0,0,0,3356,3357,3,64,32,
		0,3357,3358,3,12,6,0,3358,3359,3,216,108,0,3359,3361,1,0,0,0,3360,3350,
		1,0,0,0,3360,3356,1,0,0,0,3361,611,1,0,0,0,3362,3363,5,58,0,0,3363,3364,
		5,177,0,0,3364,613,1,0,0,0,3365,3366,5,41,0,0,3366,3370,3,616,308,0,3367,
		3368,5,41,0,0,3368,3370,5,42,0,0,3369,3365,1,0,0,0,3369,3367,1,0,0,0,3370,
		615,1,0,0,0,3371,3376,3,618,309,0,3372,3373,5,122,0,0,3373,3375,3,618,
		309,0,3374,3372,1,0,0,0,3375,3378,1,0,0,0,3376,3374,1,0,0,0,3376,3377,
		1,0,0,0,3377,617,1,0,0,0,3378,3376,1,0,0,0,3379,3380,3,272,136,0,3380,
		3381,3,620,310,0,3381,3388,1,0,0,0,3382,3383,3,272,136,0,3383,3384,5,123,
		0,0,3384,3385,3,620,310,0,3385,3386,5,128,0,0,3386,3388,1,0,0,0,3387,3379,
		1,0,0,0,3387,3382,1,0,0,0,3388,619,1,0,0,0,3389,3391,3,622,311,0,3390,
		3389,1,0,0,0,3390,3391,1,0,0,0,3391,3396,1,0,0,0,3392,3393,5,122,0,0,3393,
		3395,3,622,311,0,3394,3392,1,0,0,0,3395,3398,1,0,0,0,3396,3394,1,0,0,0,
		3396,3397,1,0,0,0,3397,621,1,0,0,0,3398,3396,1,0,0,0,3399,3400,5,188,0,
		0,3400,3401,5,131,0,0,3401,3402,5,188,0,0,3402,623,1,0,0,0,3403,3404,6,
		312,-1,0,3404,3405,3,628,314,0,3405,3412,1,0,0,0,3406,3407,10,1,0,0,3407,
		3408,3,626,313,0,3408,3409,3,628,314,0,3409,3411,1,0,0,0,3410,3406,1,0,
		0,0,3411,3414,1,0,0,0,3412,3410,1,0,0,0,3412,3413,1,0,0,0,3413,625,1,0,
		0,0,3414,3412,1,0,0,0,3415,3416,5,27,0,0,3416,627,1,0,0,0,3417,3422,3,
		630,315,0,3418,3419,7,3,0,0,3419,3421,3,630,315,0,3420,3418,1,0,0,0,3421,
		3424,1,0,0,0,3422,3420,1,0,0,0,3422,3423,1,0,0,0,3423,629,1,0,0,0,3424,
		3422,1,0,0,0,3425,3430,3,632,316,0,3426,3427,5,138,0,0,3427,3429,3,632,
		316,0,3428,3426,1,0,0,0,3429,3432,1,0,0,0,3430,3428,1,0,0,0,3430,3431,
		1,0,0,0,3431,631,1,0,0,0,3432,3430,1,0,0,0,3433,3438,3,634,317,0,3434,
		3435,5,137,0,0,3435,3437,3,634,317,0,3436,3434,1,0,0,0,3437,3440,1,0,0,
		0,3438,3436,1,0,0,0,3438,3439,1,0,0,0,3439,633,1,0,0,0,3440,3438,1,0,0,
		0,3441,3443,5,136,0,0,3442,3441,1,0,0,0,3442,3443,1,0,0,0,3443,3444,1,
		0,0,0,3444,3445,3,638,319,0,3445,635,1,0,0,0,3446,3447,7,8,0,0,3447,637,
		1,0,0,0,3448,3454,3,640,320,0,3449,3450,3,636,318,0,3450,3451,3,640,320,
		0,3451,3453,1,0,0,0,3452,3449,1,0,0,0,3453,3456,1,0,0,0,3454,3452,1,0,
		0,0,3454,3455,1,0,0,0,3455,639,1,0,0,0,3456,3454,1,0,0,0,3457,3469,3,642,
		321,0,3458,3460,5,133,0,0,3459,3461,5,184,0,0,3460,3459,1,0,0,0,3460,3461,
		1,0,0,0,3461,3462,1,0,0,0,3462,3464,5,133,0,0,3463,3465,5,185,0,0,3464,
		3463,1,0,0,0,3464,3465,1,0,0,0,3465,3466,1,0,0,0,3466,3468,3,642,321,0,
		3467,3458,1,0,0,0,3468,3471,1,0,0,0,3469,3467,1,0,0,0,3469,3470,1,0,0,
		0,3470,641,1,0,0,0,3471,3469,1,0,0,0,3472,3474,3,644,322,0,3473,3472,1,
		0,0,0,3473,3474,1,0,0,0,3474,3475,1,0,0,0,3475,3480,3,646,323,0,3476,3477,
		7,1,0,0,3477,3479,3,646,323,0,3478,3476,1,0,0,0,3479,3482,1,0,0,0,3480,
		3478,1,0,0,0,3480,3481,1,0,0,0,3481,643,1,0,0,0,3482,3480,1,0,0,0,3483,
		3484,7,1,0,0,3484,645,1,0,0,0,3485,3490,3,648,324,0,3486,3487,7,7,0,0,
		3487,3489,3,648,324,0,3488,3486,1,0,0,0,3489,3492,1,0,0,0,3490,3488,1,
		0,0,0,3490,3491,1,0,0,0,3491,647,1,0,0,0,3492,3490,1,0,0,0,3493,3498,3,
		650,325,0,3494,3495,5,135,0,0,3495,3497,3,650,325,0,3496,3494,1,0,0,0,
		3497,3500,1,0,0,0,3498,3496,1,0,0,0,3498,3499,1,0,0,0,3499,649,1,0,0,0,
		3500,3498,1,0,0,0,3501,3506,3,654,327,0,3502,3503,3,652,326,0,3503,3504,
		3,654,327,0,3504,3506,1,0,0,0,3505,3501,1,0,0,0,3505,3502,1,0,0,0,3506,
		651,1,0,0,0,3507,3508,5,27,0,0,3508,653,1,0,0,0,3509,3520,3,686,343,0,
		3510,3520,3,670,335,0,3511,3520,3,664,332,0,3512,3513,5,123,0,0,3513,3514,
		3,624,312,0,3514,3515,5,128,0,0,3515,3520,1,0,0,0,3516,3520,5,177,0,0,
		3517,3520,3,682,341,0,3518,3520,3,656,328,0,3519,3509,1,0,0,0,3519,3510,
		1,0,0,0,3519,3511,1,0,0,0,3519,3512,1,0,0,0,3519,3516,1,0,0,0,3519,3517,
		1,0,0,0,3519,3518,1,0,0,0,3520,655,1,0,0,0,3521,3522,5,171,0,0,3522,3523,
		3,658,329,0,3523,3524,5,173,0,0,3524,657,1,0,0,0,3525,3528,3,624,312,0,
		3526,3528,3,660,330,0,3527,3525,1,0,0,0,3527,3526,1,0,0,0,3528,659,1,0,
		0,0,3529,3530,6,330,-1,0,3530,3531,3,624,312,0,3531,3532,5,122,0,0,3532,
		3533,3,624,312,0,3533,3540,1,0,0,0,3534,3535,3,624,312,0,3535,3536,5,122,
		0,0,3536,3537,3,662,331,0,3537,3540,1,0,0,0,3538,3540,3,662,331,0,3539,
		3529,1,0,0,0,3539,3534,1,0,0,0,3539,3538,1,0,0,0,3540,3549,1,0,0,0,3541,
		3542,10,2,0,0,3542,3543,5,122,0,0,3543,3548,3,624,312,0,3544,3545,10,1,
		0,0,3545,3546,5,122,0,0,3546,3548,3,662,331,0,3547,3541,1,0,0,0,3547,3544,
		1,0,0,0,3548,3551,1,0,0,0,3549,3547,1,0,0,0,3549,3550,1,0,0,0,3550,661,
		1,0,0,0,3551,3549,1,0,0,0,3552,3553,5,123,0,0,3553,3554,3,624,312,0,3554,
		3555,5,122,0,0,3555,3556,3,426,213,0,3556,3557,5,130,0,0,3557,3558,3,624,
		312,0,3558,3559,5,122,0,0,3559,3560,3,624,312,0,3560,3561,5,128,0,0,3561,
		3597,1,0,0,0,3562,3563,5,123,0,0,3563,3564,3,624,312,0,3564,3565,5,122,
		0,0,3565,3566,3,426,213,0,3566,3567,5,130,0,0,3567,3568,3,624,312,0,3568,
		3569,5,122,0,0,3569,3570,3,624,312,0,3570,3571,5,122,0,0,3571,3572,3,624,
		312,0,3572,3573,5,128,0,0,3573,3597,1,0,0,0,3574,3575,5,123,0,0,3575,3576,
		3,662,331,0,3576,3577,5,122,0,0,3577,3578,3,426,213,0,3578,3579,5,130,
		0,0,3579,3580,3,624,312,0,3580,3581,5,122,0,0,3581,3582,3,624,312,0,3582,
		3583,5,128,0,0,3583,3597,1,0,0,0,3584,3585,5,123,0,0,3585,3586,3,662,331,
		0,3586,3587,5,122,0,0,3587,3588,3,426,213,0,3588,3589,5,130,0,0,3589,3590,
		3,624,312,0,3590,3591,5,122,0,0,3591,3592,3,624,312,0,3592,3593,5,122,
		0,0,3593,3594,3,624,312,0,3594,3595,5,128,0,0,3595,3597,1,0,0,0,3596,3552,
		1,0,0,0,3596,3562,1,0,0,0,3596,3574,1,0,0,0,3596,3584,1,0,0,0,3597,663,
		1,0,0,0,3598,3599,5,188,0,0,3599,3600,5,123,0,0,3600,3607,5,128,0,0,3601,
		3602,5,188,0,0,3602,3603,5,123,0,0,3603,3604,3,666,333,0,3604,3605,5,128,
		0,0,3605,3607,1,0,0,0,3606,3598,1,0,0,0,3606,3601,1,0,0,0,3607,665,1,0,
		0,0,3608,3609,6,333,-1,0,3609,3615,3,668,334,0,3610,3611,3,676,338,0,3611,
		3612,5,122,0,0,3612,3613,3,668,334,0,3613,3615,1,0,0,0,3614,3608,1,0,0,
		0,3614,3610,1,0,0,0,3615,3621,1,0,0,0,3616,3617,10,2,0,0,3617,3618,5,122,
		0,0,3618,3620,3,668,334,0,3619,3616,1,0,0,0,3620,3623,1,0,0,0,3621,3619,
		1,0,0,0,3621,3622,1,0,0,0,3622,667,1,0,0,0,3623,3621,1,0,0,0,3624,3625,
		5,188,0,0,3625,3626,5,130,0,0,3626,3627,3,624,312,0,3627,669,1,0,0,0,3628,
		3632,7,9,0,0,3629,3631,3,672,336,0,3630,3629,1,0,0,0,3631,3634,1,0,0,0,
		3632,3630,1,0,0,0,3632,3633,1,0,0,0,3633,671,1,0,0,0,3634,3632,1,0,0,0,
		3635,3639,3,674,337,0,3636,3637,5,124,0,0,3637,3639,5,188,0,0,3638,3635,
		1,0,0,0,3638,3636,1,0,0,0,3639,673,1,0,0,0,3640,3641,5,123,0,0,3641,3642,
		3,676,338,0,3642,3643,5,128,0,0,3643,675,1,0,0,0,3644,3649,3,678,339,0,
		3645,3646,5,122,0,0,3646,3648,3,678,339,0,3647,3645,1,0,0,0,3648,3651,
		1,0,0,0,3649,3647,1,0,0,0,3649,3650,1,0,0,0,3650,677,1,0,0,0,3651,3649,
		1,0,0,0,3652,3654,3,624,312,0,3653,3655,3,680,340,0,3654,3653,1,0,0,0,
		3654,3655,1,0,0,0,3655,3658,1,0,0,0,3656,3658,3,680,340,0,3657,3652,1,
		0,0,0,3657,3656,1,0,0,0,3658,679,1,0,0,0,3659,3661,5,129,0,0,3660,3662,
		3,624,312,0,3661,3660,1,0,0,0,3661,3662,1,0,0,0,3662,3671,1,0,0,0,3663,
		3664,5,129,0,0,3664,3665,3,624,312,0,3665,3666,5,129,0,0,3666,3667,3,624,
		312,0,3667,3671,1,0,0,0,3668,3669,5,30,0,0,3669,3671,3,624,312,0,3670,
		3659,1,0,0,0,3670,3663,1,0,0,0,3670,3668,1,0,0,0,3671,681,1,0,0,0,3672,
		3682,7,10,0,0,3673,3674,5,149,0,0,3674,3675,5,170,0,0,3675,3682,3,684,
		342,0,3676,3677,5,150,0,0,3677,3678,5,170,0,0,3678,3679,3,684,342,0,3679,
		3680,5,172,0,0,3680,3682,1,0,0,0,3681,3672,1,0,0,0,3681,3673,1,0,0,0,3681,
		3676,1,0,0,0,3682,683,1,0,0,0,3683,3686,5,186,0,0,3684,3686,3,292,146,
		0,3685,3683,1,0,0,0,3685,3684,1,0,0,0,3686,685,1,0,0,0,3687,3696,7,11,
		0,0,3688,3696,3,688,344,0,3689,3690,5,186,0,0,3690,3691,5,170,0,0,3691,
		3696,3,684,342,0,3692,3693,5,178,0,0,3693,3694,5,170,0,0,3694,3696,3,684,
		342,0,3695,3687,1,0,0,0,3695,3688,1,0,0,0,3695,3689,1,0,0,0,3695,3692,
		1,0,0,0,3696,687,1,0,0,0,3697,3698,5,123,0,0,3698,3699,3,690,345,0,3699,
		3700,5,122,0,0,3700,3701,5,128,0,0,3701,689,1,0,0,0,3702,3704,7,1,0,0,
		3703,3702,1,0,0,0,3703,3704,1,0,0,0,3704,3705,1,0,0,0,3705,3709,5,186,
		0,0,3706,3709,5,178,0,0,3707,3709,5,188,0,0,3708,3703,1,0,0,0,3708,3706,
		1,0,0,0,3708,3707,1,0,0,0,3709,691,1,0,0,0,3710,3711,3,624,312,0,3711,
		693,1,0,0,0,3712,3713,5,51,0,0,3713,3714,5,123,0,0,3714,3715,3,624,312,
		0,3715,3716,5,128,0,0,3716,3717,3,436,218,0,3717,695,1,0,0,0,331,702,709,
		712,720,726,736,742,747,756,775,782,791,798,815,825,827,836,840,845,847,
		856,863,868,873,879,882,888,897,914,916,929,940,950,959,964,968,971,983,
		986,993,998,1004,1020,1024,1033,1042,1046,1055,1064,1068,1077,1107,1109,
		1121,1137,1146,1155,1161,1165,1172,1177,1187,1192,1196,1208,1218,1228,
		1241,1248,1253,1260,1267,1274,1276,1281,1296,1305,1310,1321,1343,1350,
		1396,1404,1415,1422,1429,1446,1455,1458,1465,1476,1491,1500,1505,1516,
		1528,1532,1540,1542,1547,1550,1557,1561,1567,1576,1588,1595,1597,1611,
		1623,1632,1637,1654,1661,1707,1716,1725,1729,1736,1744,1755,1785,1797,
		1835,1843,1850,1854,1869,1886,1898,1904,1906,1911,1917,1927,1937,1953,
		1958,1962,1969,1977,1987,1995,2004,2044,2050,2054,2059,2061,2070,2075,
		2083,2090,2095,2107,2114,2118,2131,2150,2160,2164,2167,2171,2176,2183,
		2188,2190,2203,2220,2229,2234,2245,2255,2269,2273,2277,2280,2289,2295,
		2322,2327,2332,2342,2353,2365,2370,2380,2387,2423,2436,2443,2457,2462,
		2467,2476,2481,2497,2504,2509,2525,2532,2539,2548,2557,2564,2580,2587,
		2595,2606,2613,2622,2627,2632,2634,2656,2667,2672,2683,2692,2701,2713,
		2720,2753,2762,2766,2778,2786,2788,2800,2813,2817,2822,2826,2834,2837,
		2843,2885,2900,2903,2906,2912,2990,2995,3001,3011,3018,3026,3035,3044,
		3050,3056,3062,3072,3075,3081,3095,3101,3109,3114,3130,3135,3141,3158,
		3175,3179,3182,3188,3204,3211,3218,3221,3225,3228,3236,3240,3257,3261,
		3264,3269,3273,3284,3288,3294,3301,3315,3317,3325,3335,3346,3352,3360,
		3369,3376,3387,3390,3396,3412,3422,3430,3438,3442,3454,3460,3464,3469,
		3473,3480,3490,3498,3505,3519,3527,3539,3547,3549,3596,3606,3614,3621,
		3632,3638,3649,3654,3657,3661,3670,3681,3685,3695,3703,3708
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
