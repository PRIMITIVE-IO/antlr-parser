//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.10.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from /Users/maxfarsikov/IdeaProjects/antlr-parser/antlr-parser/grammars/KotlinParser.g4 by ANTLR 4.10.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.10.1")]
[System.CLSCompliant(false)]
public partial class KotlinParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		ShebangLine=1, DelimitedComment=2, LineComment=3, WS=4, NL=5, RESERVED=6, 
		DOT=7, COMMA=8, LPAREN=9, RPAREN=10, LSQUARE=11, RSQUARE=12, LCURL=13, 
		RCURL=14, MULT=15, MOD=16, DIV=17, ADD=18, SUB=19, INCR=20, DECR=21, CONJ=22, 
		DISJ=23, EXCL=24, COLON=25, SEMICOLON=26, ASSIGNMENT=27, ADD_ASSIGNMENT=28, 
		SUB_ASSIGNMENT=29, MULT_ASSIGNMENT=30, DIV_ASSIGNMENT=31, MOD_ASSIGNMENT=32, 
		ARROW=33, DOUBLE_ARROW=34, RANGE=35, COLONCOLON=36, Q_COLONCOLON=37, DOUBLE_SEMICOLON=38, 
		HASH=39, AT=40, QUEST=41, ELVIS=42, LANGLE=43, RANGLE=44, LE=45, GE=46, 
		EXCL_EQ=47, EXCL_EQEQ=48, AS_SAFE=49, EQEQ=50, EQEQEQ=51, SINGLE_QUOTE=52, 
		RETURN_AT=53, CONTINUE_AT=54, BREAK_AT=55, FILE=56, PACKAGE=57, IMPORT=58, 
		CLASS=59, INTERFACE=60, FUN=61, OBJECT=62, VAL=63, VAR=64, TYPE_ALIAS=65, 
		CONSTRUCTOR=66, BY=67, COMPANION=68, INIT=69, THIS=70, SUPER=71, TYPEOF=72, 
		WHERE=73, IF=74, ELSE=75, WHEN=76, TRY=77, CATCH=78, FINALLY=79, FOR=80, 
		DO=81, WHILE=82, THROW=83, RETURN=84, CONTINUE=85, BREAK=86, AS=87, IS=88, 
		IN=89, NOT_IS=90, NOT_IN=91, OUT=92, FIELD=93, PROPERTY=94, GET=95, SET=96, 
		GETTER=97, SETTER=98, RECEIVER=99, PARAM=100, SETPARAM=101, DELEGATE=102, 
		DYNAMIC=103, PUBLIC=104, PRIVATE=105, PROTECTED=106, INTERNAL=107, ENUM=108, 
		SEALED=109, ANNOTATION=110, DATA=111, INNER=112, TAILREC=113, OPERATOR=114, 
		INLINE=115, INFIX=116, EXTERNAL=117, SUSPEND=118, OVERRIDE=119, ABSTRACT=120, 
		FINAL=121, OPEN=122, CONST=123, LATEINIT=124, VARARG=125, NOINLINE=126, 
		CROSSINLINE=127, REIFIED=128, QUOTE_OPEN=129, TRIPLE_QUOTE_OPEN=130, RealLiteral=131, 
		FloatLiteral=132, DoubleLiteral=133, LongLiteral=134, IntegerLiteral=135, 
		HexLiteral=136, BinLiteral=137, BooleanLiteral=138, NullLiteral=139, Identifier=140, 
		LabelReference=141, LabelDefinition=142, FieldIdentifier=143, CharacterLiteral=144, 
		UNICODE_CLASS_LL=145, UNICODE_CLASS_LM=146, UNICODE_CLASS_LO=147, UNICODE_CLASS_LT=148, 
		UNICODE_CLASS_LU=149, UNICODE_CLASS_ND=150, UNICODE_CLASS_NL=151, Inside_Comment=152, 
		Inside_WS=153, Inside_NL=154, QUOTE_CLOSE=155, LineStrRef=156, LineStrText=157, 
		LineStrEscapedChar=158, LineStrExprStart=159, TRIPLE_QUOTE_CLOSE=160, 
		MultiLineStringQuote=161, MultiLineStrRef=162, MultiLineStrText=163, MultiLineStrEscapedChar=164, 
		MultiLineStrExprStart=165, MultiLineNL=166, StrExpr_IN=167, StrExpr_Comment=168, 
		StrExpr_WS=169, StrExpr_NL=170;
	public const int
		RULE_kotlinFile = 0, RULE_script = 1, RULE_preamble = 2, RULE_fileAnnotations = 3, 
		RULE_fileAnnotation = 4, RULE_packageHeader = 5, RULE_importList = 6, 
		RULE_importHeader = 7, RULE_importAlias = 8, RULE_topLevelObject = 9, 
		RULE_classDeclaration = 10, RULE_primaryConstructor = 11, RULE_classParameters = 12, 
		RULE_classParameter = 13, RULE_delegationSpecifiers = 14, RULE_delegationSpecifier = 15, 
		RULE_constructorInvocation = 16, RULE_explicitDelegation = 17, RULE_classBody = 18, 
		RULE_classMemberDeclaration = 19, RULE_anonymousInitializer = 20, RULE_secondaryConstructor = 21, 
		RULE_constructorDelegationCall = 22, RULE_enumClassBody = 23, RULE_enumEntries = 24, 
		RULE_enumEntry = 25, RULE_functionDeclaration = 26, RULE_functionValueParameters = 27, 
		RULE_functionValueParameter = 28, RULE_parameter = 29, RULE_functionBody = 30, 
		RULE_objectDeclaration = 31, RULE_companionObject = 32, RULE_propertyDeclaration = 33, 
		RULE_multiVariableDeclaration = 34, RULE_variableDeclaration = 35, RULE_getter = 36, 
		RULE_setter = 37, RULE_typeAlias = 38, RULE_typeParameters = 39, RULE_typeParameter = 40, 
		RULE_type = 41, RULE_typeModifierList = 42, RULE_parenthesizedType = 43, 
		RULE_nullableType = 44, RULE_typeReference = 45, RULE_functionType = 46, 
		RULE_functionTypeReceiver = 47, RULE_userType = 48, RULE_simpleUserType = 49, 
		RULE_functionTypeParameters = 50, RULE_typeConstraints = 51, RULE_typeConstraint = 52, 
		RULE_block = 53, RULE_statements = 54, RULE_statement = 55, RULE_blockLevelExpression = 56, 
		RULE_declaration = 57, RULE_expression = 58, RULE_disjunction = 59, RULE_conjunction = 60, 
		RULE_equalityComparison = 61, RULE_comparison = 62, RULE_namedInfix = 63, 
		RULE_elvisExpression = 64, RULE_infixFunctionCall = 65, RULE_rangeExpression = 66, 
		RULE_additiveExpression = 67, RULE_multiplicativeExpression = 68, RULE_typeRHS = 69, 
		RULE_prefixUnaryExpression = 70, RULE_postfixUnaryExpression = 71, RULE_atomicExpression = 72, 
		RULE_parenthesizedExpression = 73, RULE_callSuffix = 74, RULE_annotatedLambda = 75, 
		RULE_arrayAccess = 76, RULE_valueArguments = 77, RULE_typeArguments = 78, 
		RULE_typeProjection = 79, RULE_typeProjectionModifierList = 80, RULE_valueArgument = 81, 
		RULE_literalConstant = 82, RULE_stringLiteral = 83, RULE_lineStringLiteral = 84, 
		RULE_multiLineStringLiteral = 85, RULE_lineStringContent = 86, RULE_lineStringExpression = 87, 
		RULE_multiLineStringContent = 88, RULE_multiLineStringExpression = 89, 
		RULE_functionLiteral = 90, RULE_lambdaParameters = 91, RULE_lambdaParameter = 92, 
		RULE_objectLiteral = 93, RULE_collectionLiteral = 94, RULE_thisExpression = 95, 
		RULE_superExpression = 96, RULE_conditionalExpression = 97, RULE_ifExpression = 98, 
		RULE_controlStructureBody = 99, RULE_whenExpression = 100, RULE_whenEntry = 101, 
		RULE_whenCondition = 102, RULE_rangeTest = 103, RULE_typeTest = 104, RULE_tryExpression = 105, 
		RULE_catchBlock = 106, RULE_finallyBlock = 107, RULE_loopExpression = 108, 
		RULE_forExpression = 109, RULE_whileExpression = 110, RULE_doWhileExpression = 111, 
		RULE_jumpExpression = 112, RULE_callableReference = 113, RULE_assignmentOperator = 114, 
		RULE_equalityOperation = 115, RULE_comparisonOperator = 116, RULE_inOperator = 117, 
		RULE_isOperator = 118, RULE_additiveOperator = 119, RULE_multiplicativeOperation = 120, 
		RULE_typeOperation = 121, RULE_prefixUnaryOperation = 122, RULE_postfixUnaryOperation = 123, 
		RULE_memberAccessOperator = 124, RULE_modifierList = 125, RULE_modifier = 126, 
		RULE_classModifier = 127, RULE_memberModifier = 128, RULE_visibilityModifier = 129, 
		RULE_varianceAnnotation = 130, RULE_functionModifier = 131, RULE_propertyModifier = 132, 
		RULE_inheritanceModifier = 133, RULE_parameterModifier = 134, RULE_typeParameterModifier = 135, 
		RULE_labelDefinition = 136, RULE_annotations = 137, RULE_annotation = 138, 
		RULE_annotationList = 139, RULE_annotationUseSiteTarget = 140, RULE_unescapedAnnotation = 141, 
		RULE_identifier = 142, RULE_simpleIdentifier = 143, RULE_semi = 144, RULE_anysemi = 145;
	public static readonly string[] ruleNames = {
		"kotlinFile", "script", "preamble", "fileAnnotations", "fileAnnotation", 
		"packageHeader", "importList", "importHeader", "importAlias", "topLevelObject", 
		"classDeclaration", "primaryConstructor", "classParameters", "classParameter", 
		"delegationSpecifiers", "delegationSpecifier", "constructorInvocation", 
		"explicitDelegation", "classBody", "classMemberDeclaration", "anonymousInitializer", 
		"secondaryConstructor", "constructorDelegationCall", "enumClassBody", 
		"enumEntries", "enumEntry", "functionDeclaration", "functionValueParameters", 
		"functionValueParameter", "parameter", "functionBody", "objectDeclaration", 
		"companionObject", "propertyDeclaration", "multiVariableDeclaration", 
		"variableDeclaration", "getter", "setter", "typeAlias", "typeParameters", 
		"typeParameter", "type", "typeModifierList", "parenthesizedType", "nullableType", 
		"typeReference", "functionType", "functionTypeReceiver", "userType", "simpleUserType", 
		"functionTypeParameters", "typeConstraints", "typeConstraint", "block", 
		"statements", "statement", "blockLevelExpression", "declaration", "expression", 
		"disjunction", "conjunction", "equalityComparison", "comparison", "namedInfix", 
		"elvisExpression", "infixFunctionCall", "rangeExpression", "additiveExpression", 
		"multiplicativeExpression", "typeRHS", "prefixUnaryExpression", "postfixUnaryExpression", 
		"atomicExpression", "parenthesizedExpression", "callSuffix", "annotatedLambda", 
		"arrayAccess", "valueArguments", "typeArguments", "typeProjection", "typeProjectionModifierList", 
		"valueArgument", "literalConstant", "stringLiteral", "lineStringLiteral", 
		"multiLineStringLiteral", "lineStringContent", "lineStringExpression", 
		"multiLineStringContent", "multiLineStringExpression", "functionLiteral", 
		"lambdaParameters", "lambdaParameter", "objectLiteral", "collectionLiteral", 
		"thisExpression", "superExpression", "conditionalExpression", "ifExpression", 
		"controlStructureBody", "whenExpression", "whenEntry", "whenCondition", 
		"rangeTest", "typeTest", "tryExpression", "catchBlock", "finallyBlock", 
		"loopExpression", "forExpression", "whileExpression", "doWhileExpression", 
		"jumpExpression", "callableReference", "assignmentOperator", "equalityOperation", 
		"comparisonOperator", "inOperator", "isOperator", "additiveOperator", 
		"multiplicativeOperation", "typeOperation", "prefixUnaryOperation", "postfixUnaryOperation", 
		"memberAccessOperator", "modifierList", "modifier", "classModifier", "memberModifier", 
		"visibilityModifier", "varianceAnnotation", "functionModifier", "propertyModifier", 
		"inheritanceModifier", "parameterModifier", "typeParameterModifier", "labelDefinition", 
		"annotations", "annotation", "annotationList", "annotationUseSiteTarget", 
		"unescapedAnnotation", "identifier", "simpleIdentifier", "semi", "anysemi"
	};

	private static readonly string[] _LiteralNames = {
		null, null, null, null, null, null, "'...'", "'.'", "','", "'('", null, 
		"'['", null, "'{'", "'}'", "'*'", "'%'", "'/'", "'+'", "'-'", "'++'", 
		"'--'", "'&&'", "'||'", "'!'", "':'", "';'", "'='", "'+='", "'-='", "'*='", 
		"'/='", "'%='", "'->'", "'=>'", "'..'", "'::'", "'?::'", "';;'", "'#'", 
		"'@'", "'?'", "'?:'", "'<'", "'>'", "'<='", "'>='", "'!='", "'!=='", "'as?'", 
		"'=='", "'==='", "'''", null, null, null, "'@file'", "'package'", "'import'", 
		"'class'", "'interface'", "'fun'", "'object'", "'val'", "'var'", "'typealias'", 
		"'constructor'", "'by'", "'companion'", "'init'", "'this'", "'super'", 
		"'typeof'", "'where'", "'if'", "'else'", "'when'", "'try'", "'catch'", 
		"'finally'", "'for'", "'do'", "'while'", "'throw'", "'return'", "'continue'", 
		"'break'", "'as'", "'is'", "'in'", null, null, "'out'", "'@field'", "'@property'", 
		"'@get'", "'@set'", "'get'", "'set'", "'@receiver'", "'@param'", "'@setparam'", 
		"'@delegate'", "'dynamic'", "'public'", "'private'", "'protected'", "'internal'", 
		"'enum'", "'sealed'", "'annotation'", "'data'", "'inner'", "'tailrec'", 
		"'operator'", "'inline'", "'infix'", "'external'", "'suspend'", "'override'", 
		"'abstract'", "'final'", "'open'", "'const'", "'lateinit'", "'vararg'", 
		"'noinline'", "'crossinline'", "'reified'", null, "'\"\"\"'", null, null, 
		null, null, null, null, null, null, "'null'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "ShebangLine", "DelimitedComment", "LineComment", "WS", "NL", "RESERVED", 
		"DOT", "COMMA", "LPAREN", "RPAREN", "LSQUARE", "RSQUARE", "LCURL", "RCURL", 
		"MULT", "MOD", "DIV", "ADD", "SUB", "INCR", "DECR", "CONJ", "DISJ", "EXCL", 
		"COLON", "SEMICOLON", "ASSIGNMENT", "ADD_ASSIGNMENT", "SUB_ASSIGNMENT", 
		"MULT_ASSIGNMENT", "DIV_ASSIGNMENT", "MOD_ASSIGNMENT", "ARROW", "DOUBLE_ARROW", 
		"RANGE", "COLONCOLON", "Q_COLONCOLON", "DOUBLE_SEMICOLON", "HASH", "AT", 
		"QUEST", "ELVIS", "LANGLE", "RANGLE", "LE", "GE", "EXCL_EQ", "EXCL_EQEQ", 
		"AS_SAFE", "EQEQ", "EQEQEQ", "SINGLE_QUOTE", "RETURN_AT", "CONTINUE_AT", 
		"BREAK_AT", "FILE", "PACKAGE", "IMPORT", "CLASS", "INTERFACE", "FUN", 
		"OBJECT", "VAL", "VAR", "TYPE_ALIAS", "CONSTRUCTOR", "BY", "COMPANION", 
		"INIT", "THIS", "SUPER", "TYPEOF", "WHERE", "IF", "ELSE", "WHEN", "TRY", 
		"CATCH", "FINALLY", "FOR", "DO", "WHILE", "THROW", "RETURN", "CONTINUE", 
		"BREAK", "AS", "IS", "IN", "NOT_IS", "NOT_IN", "OUT", "FIELD", "PROPERTY", 
		"GET", "SET", "GETTER", "SETTER", "RECEIVER", "PARAM", "SETPARAM", "DELEGATE", 
		"DYNAMIC", "PUBLIC", "PRIVATE", "PROTECTED", "INTERNAL", "ENUM", "SEALED", 
		"ANNOTATION", "DATA", "INNER", "TAILREC", "OPERATOR", "INLINE", "INFIX", 
		"EXTERNAL", "SUSPEND", "OVERRIDE", "ABSTRACT", "FINAL", "OPEN", "CONST", 
		"LATEINIT", "VARARG", "NOINLINE", "CROSSINLINE", "REIFIED", "QUOTE_OPEN", 
		"TRIPLE_QUOTE_OPEN", "RealLiteral", "FloatLiteral", "DoubleLiteral", "LongLiteral", 
		"IntegerLiteral", "HexLiteral", "BinLiteral", "BooleanLiteral", "NullLiteral", 
		"Identifier", "LabelReference", "LabelDefinition", "FieldIdentifier", 
		"CharacterLiteral", "UNICODE_CLASS_LL", "UNICODE_CLASS_LM", "UNICODE_CLASS_LO", 
		"UNICODE_CLASS_LT", "UNICODE_CLASS_LU", "UNICODE_CLASS_ND", "UNICODE_CLASS_NL", 
		"Inside_Comment", "Inside_WS", "Inside_NL", "QUOTE_CLOSE", "LineStrRef", 
		"LineStrText", "LineStrEscapedChar", "LineStrExprStart", "TRIPLE_QUOTE_CLOSE", 
		"MultiLineStringQuote", "MultiLineStrRef", "MultiLineStrText", "MultiLineStrEscapedChar", 
		"MultiLineStrExprStart", "MultiLineNL", "StrExpr_IN", "StrExpr_Comment", 
		"StrExpr_WS", "StrExpr_NL"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "KotlinParser.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static KotlinParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public KotlinParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public KotlinParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class KotlinFileContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public PreambleContext preamble() {
			return GetRuleContext<PreambleContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(KotlinParser.Eof, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NL() { return GetTokens(KotlinParser.NL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NL(int i) {
			return GetToken(KotlinParser.NL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AnysemiContext[] anysemi() {
			return GetRuleContexts<AnysemiContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AnysemiContext anysemi(int i) {
			return GetRuleContext<AnysemiContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TopLevelObjectContext[] topLevelObject() {
			return GetRuleContexts<TopLevelObjectContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TopLevelObjectContext topLevelObject(int i) {
			return GetRuleContext<TopLevelObjectContext>(i);
		}
		public KotlinFileContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_kotlinFile; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IKotlinParserListener typedListener = listener as IKotlinParserListener;
			if (typedListener != null) typedListener.EnterKotlinFile(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IKotlinParserListener typedListener = listener as IKotlinParserListener;
			if (typedListener != null) typedListener.ExitKotlinFile(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKotlinParserVisitor<TResult> typedVisitor = visitor as IKotlinParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitKotlinFile(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public KotlinFileContext kotlinFile() {
		KotlinFileContext _localctx = new KotlinFileContext(Context, State);
		EnterRule(_localctx, 0, RULE_kotlinFile);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 295;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,0,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 292;
					Match(NL);
					}
					} 
				}
				State = 297;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,0,Context);
			}
			State = 298;
			preamble();
			State = 302;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==NL || _la==SEMICOLON) {
				{
				{
				State = 299;
				anysemi();
				}
				}
				State = 304;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 319;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (((((_la - 40)) & ~0x3f) == 0 && ((1L << (_la - 40)) & ((1L << (AT - 40)) | (1L << (FILE - 40)) | (1L << (CLASS - 40)) | (1L << (INTERFACE - 40)) | (1L << (FUN - 40)) | (1L << (OBJECT - 40)) | (1L << (VAL - 40)) | (1L << (VAR - 40)) | (1L << (TYPE_ALIAS - 40)) | (1L << (IN - 40)) | (1L << (OUT - 40)) | (1L << (FIELD - 40)) | (1L << (PROPERTY - 40)) | (1L << (GET - 40)) | (1L << (SET - 40)) | (1L << (RECEIVER - 40)) | (1L << (PARAM - 40)) | (1L << (SETPARAM - 40)) | (1L << (DELEGATE - 40)))) != 0) || ((((_la - 104)) & ~0x3f) == 0 && ((1L << (_la - 104)) & ((1L << (PUBLIC - 104)) | (1L << (PRIVATE - 104)) | (1L << (PROTECTED - 104)) | (1L << (INTERNAL - 104)) | (1L << (ENUM - 104)) | (1L << (SEALED - 104)) | (1L << (ANNOTATION - 104)) | (1L << (DATA - 104)) | (1L << (INNER - 104)) | (1L << (TAILREC - 104)) | (1L << (OPERATOR - 104)) | (1L << (INLINE - 104)) | (1L << (INFIX - 104)) | (1L << (EXTERNAL - 104)) | (1L << (SUSPEND - 104)) | (1L << (OVERRIDE - 104)) | (1L << (ABSTRACT - 104)) | (1L << (FINAL - 104)) | (1L << (OPEN - 104)) | (1L << (CONST - 104)) | (1L << (LATEINIT - 104)) | (1L << (VARARG - 104)) | (1L << (NOINLINE - 104)) | (1L << (CROSSINLINE - 104)) | (1L << (REIFIED - 104)) | (1L << (LabelReference - 104)))) != 0)) {
				{
				State = 305;
				topLevelObject();
				State = 316;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==NL || _la==SEMICOLON) {
					{
					{
					State = 307;
					ErrorHandler.Sync(this);
					_alt = 1;
					do {
						switch (_alt) {
						case 1:
							{
							{
							State = 306;
							anysemi();
							}
							}
							break;
						default:
							throw new NoViableAltException(this);
						}
						State = 309;
						ErrorHandler.Sync(this);
						_alt = Interpreter.AdaptivePredict(TokenStream,2,Context);
					} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
					State = 312;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (((((_la - 40)) & ~0x3f) == 0 && ((1L << (_la - 40)) & ((1L << (AT - 40)) | (1L << (FILE - 40)) | (1L << (CLASS - 40)) | (1L << (INTERFACE - 40)) | (1L << (FUN - 40)) | (1L << (OBJECT - 40)) | (1L << (VAL - 40)) | (1L << (VAR - 40)) | (1L << (TYPE_ALIAS - 40)) | (1L << (IN - 40)) | (1L << (OUT - 40)) | (1L << (FIELD - 40)) | (1L << (PROPERTY - 40)) | (1L << (GET - 40)) | (1L << (SET - 40)) | (1L << (RECEIVER - 40)) | (1L << (PARAM - 40)) | (1L << (SETPARAM - 40)) | (1L << (DELEGATE - 40)))) != 0) || ((((_la - 104)) & ~0x3f) == 0 && ((1L << (_la - 104)) & ((1L << (PUBLIC - 104)) | (1L << (PRIVATE - 104)) | (1L << (PROTECTED - 104)) | (1L << (INTERNAL - 104)) | (1L << (ENUM - 104)) | (1L << (SEALED - 104)) | (1L << (ANNOTATION - 104)) | (1L << (DATA - 104)) | (1L << (INNER - 104)) | (1L << (TAILREC - 104)) | (1L << (OPERATOR - 104)) | (1L << (INLINE - 104)) | (1L << (INFIX - 104)) | (1L << (EXTERNAL - 104)) | (1L << (SUSPEND - 104)) | (1L << (OVERRIDE - 104)) | (1L << (ABSTRACT - 104)) | (1L << (FINAL - 104)) | (1L << (OPEN - 104)) | (1L << (CONST - 104)) | (1L << (LATEINIT - 104)) | (1L << (VARARG - 104)) | (1L << (NOINLINE - 104)) | (1L << (CROSSINLINE - 104)) | (1L << (REIFIED - 104)) | (1L << (LabelReference - 104)))) != 0)) {
						{
						State = 311;
						topLevelObject();
						}
					}

					}
					}
					State = 318;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
			}

			State = 321;
			Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ScriptContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public PreambleContext preamble() {
			return GetRuleContext<PreambleContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(KotlinParser.Eof, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NL() { return GetTokens(KotlinParser.NL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NL(int i) {
			return GetToken(KotlinParser.NL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AnysemiContext[] anysemi() {
			return GetRuleContexts<AnysemiContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AnysemiContext anysemi(int i) {
			return GetRuleContext<AnysemiContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ScriptContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_script; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IKotlinParserListener typedListener = listener as IKotlinParserListener;
			if (typedListener != null) typedListener.EnterScript(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IKotlinParserListener typedListener = listener as IKotlinParserListener;
			if (typedListener != null) typedListener.ExitScript(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKotlinParserVisitor<TResult> typedVisitor = visitor as IKotlinParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitScript(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ScriptContext script() {
		ScriptContext _localctx = new ScriptContext(Context, State);
		EnterRule(_localctx, 2, RULE_script);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 326;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,6,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 323;
					Match(NL);
					}
					} 
				}
				State = 328;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,6,Context);
			}
			State = 329;
			preamble();
			State = 333;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,7,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 330;
					anysemi();
					}
					} 
				}
				State = 335;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,7,Context);
			}
			State = 350;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << NL) | (1L << LPAREN) | (1L << LSQUARE) | (1L << LCURL) | (1L << ADD) | (1L << SUB) | (1L << INCR) | (1L << DECR) | (1L << EXCL) | (1L << COLONCOLON) | (1L << Q_COLONCOLON) | (1L << AT) | (1L << RETURN_AT) | (1L << CONTINUE_AT) | (1L << BREAK_AT) | (1L << FILE) | (1L << IMPORT) | (1L << OBJECT))) != 0) || ((((_la - 66)) & ~0x3f) == 0 && ((1L << (_la - 66)) & ((1L << (CONSTRUCTOR - 66)) | (1L << (BY - 66)) | (1L << (COMPANION - 66)) | (1L << (INIT - 66)) | (1L << (THIS - 66)) | (1L << (SUPER - 66)) | (1L << (WHERE - 66)) | (1L << (IF - 66)) | (1L << (WHEN - 66)) | (1L << (TRY - 66)) | (1L << (CATCH - 66)) | (1L << (FINALLY - 66)) | (1L << (FOR - 66)) | (1L << (DO - 66)) | (1L << (WHILE - 66)) | (1L << (THROW - 66)) | (1L << (RETURN - 66)) | (1L << (CONTINUE - 66)) | (1L << (BREAK - 66)) | (1L << (OUT - 66)) | (1L << (FIELD - 66)) | (1L << (PROPERTY - 66)) | (1L << (GET - 66)) | (1L << (SET - 66)) | (1L << (GETTER - 66)) | (1L << (SETTER - 66)) | (1L << (RECEIVER - 66)) | (1L << (PARAM - 66)) | (1L << (SETPARAM - 66)) | (1L << (DELEGATE - 66)) | (1L << (DYNAMIC - 66)) | (1L << (PUBLIC - 66)) | (1L << (PRIVATE - 66)) | (1L << (PROTECTED - 66)) | (1L << (INTERNAL - 66)) | (1L << (ENUM - 66)) | (1L << (SEALED - 66)) | (1L << (ANNOTATION - 66)) | (1L << (DATA - 66)) | (1L << (INNER - 66)) | (1L << (TAILREC - 66)) | (1L << (OPERATOR - 66)) | (1L << (INLINE - 66)) | (1L << (INFIX - 66)) | (1L << (EXTERNAL - 66)) | (1L << (SUSPEND - 66)) | (1L << (OVERRIDE - 66)) | (1L << (ABSTRACT - 66)) | (1L << (FINAL - 66)) | (1L << (OPEN - 66)) | (1L << (CONST - 66)) | (1L << (LATEINIT - 66)) | (1L << (VARARG - 66)) | (1L << (NOINLINE - 66)) | (1L << (CROSSINLINE - 66)) | (1L << (REIFIED - 66)) | (1L << (QUOTE_OPEN - 66)))) != 0) || ((((_la - 130)) & ~0x3f) == 0 && ((1L << (_la - 130)) & ((1L << (TRIPLE_QUOTE_OPEN - 130)) | (1L << (RealLiteral - 130)) | (1L << (LongLiteral - 130)) | (1L << (IntegerLiteral - 130)) | (1L << (HexLiteral - 130)) | (1L << (BinLiteral - 130)) | (1L << (BooleanLiteral - 130)) | (1L << (NullLiteral - 130)) | (1L << (Identifier - 130)) | (1L << (LabelReference - 130)) | (1L << (LabelDefinition - 130)) | (1L << (CharacterLiteral - 130)))) != 0)) {
				{
				State = 336;
				expression();
				State = 347;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==NL || _la==SEMICOLON) {
					{
					{
					State = 338;
					ErrorHandler.Sync(this);
					_alt = 1;
					do {
						switch (_alt) {
						case 1:
							{
							{
							State = 337;
							anysemi();
							}
							}
							break;
						default:
							throw new NoViableAltException(this);
						}
						State = 340;
						ErrorHandler.Sync(this);
						_alt = Interpreter.AdaptivePredict(TokenStream,8,Context);
					} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
					State = 343;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,9,Context) ) {
					case 1:
						{
						State = 342;
						expression();
						}
						break;
					}
					}
					}
					State = 349;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
			}

			State = 352;
			Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PreambleContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public PackageHeaderContext packageHeader() {
			return GetRuleContext<PackageHeaderContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ImportListContext importList() {
			return GetRuleContext<ImportListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FileAnnotationsContext fileAnnotations() {
			return GetRuleContext<FileAnnotationsContext>(0);
		}
		public PreambleContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_preamble; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IKotlinParserListener typedListener = listener as IKotlinParserListener;
			if (typedListener != null) typedListener.EnterPreamble(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IKotlinParserListener typedListener = listener as IKotlinParserListener;
			if (typedListener != null) typedListener.ExitPreamble(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKotlinParserVisitor<TResult> typedVisitor = visitor as IKotlinParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPreamble(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PreambleContext preamble() {
		PreambleContext _localctx = new PreambleContext(Context, State);
		EnterRule(_localctx, 4, RULE_preamble);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 355;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,12,Context) ) {
			case 1:
				{
				State = 354;
				fileAnnotations();
				}
				break;
			}
			State = 357;
			packageHeader();
			State = 358;
			importList();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FileAnnotationsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FileAnnotationContext[] fileAnnotation() {
			return GetRuleContexts<FileAnnotationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public FileAnnotationContext fileAnnotation(int i) {
			return GetRuleContext<FileAnnotationContext>(i);
		}
		public FileAnnotationsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fileAnnotations; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IKotlinParserListener typedListener = listener as IKotlinParserListener;
			if (typedListener != null) typedListener.EnterFileAnnotations(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IKotlinParserListener typedListener = listener as IKotlinParserListener;
			if (typedListener != null) typedListener.ExitFileAnnotations(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKotlinParserVisitor<TResult> typedVisitor = visitor as IKotlinParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFileAnnotations(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FileAnnotationsContext fileAnnotations() {
		FileAnnotationsContext _localctx = new FileAnnotationsContext(Context, State);
		EnterRule(_localctx, 6, RULE_fileAnnotations);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 361;
			ErrorHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 360;
					fileAnnotation();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 363;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,13,Context);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FileAnnotationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] FILE() { return GetTokens(KotlinParser.FILE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FILE(int i) {
			return GetToken(KotlinParser.FILE, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COLON() { return GetTokens(KotlinParser.COLON); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON(int i) {
			return GetToken(KotlinParser.COLON, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] LSQUARE() { return GetTokens(KotlinParser.LSQUARE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LSQUARE(int i) {
			return GetToken(KotlinParser.LSQUARE, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] RSQUARE() { return GetTokens(KotlinParser.RSQUARE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RSQUARE(int i) {
			return GetToken(KotlinParser.RSQUARE, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public UnescapedAnnotationContext[] unescapedAnnotation() {
			return GetRuleContexts<UnescapedAnnotationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public UnescapedAnnotationContext unescapedAnnotation(int i) {
			return GetRuleContext<UnescapedAnnotationContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SemiContext[] semi() {
			return GetRuleContexts<SemiContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SemiContext semi(int i) {
			return GetRuleContext<SemiContext>(i);
		}
		public FileAnnotationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fileAnnotation; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IKotlinParserListener typedListener = listener as IKotlinParserListener;
			if (typedListener != null) typedListener.EnterFileAnnotation(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IKotlinParserListener typedListener = listener as IKotlinParserListener;
			if (typedListener != null) typedListener.ExitFileAnnotation(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKotlinParserVisitor<TResult> typedVisitor = visitor as IKotlinParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFileAnnotation(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FileAnnotationContext fileAnnotation() {
		FileAnnotationContext _localctx = new FileAnnotationContext(Context, State);
		EnterRule(_localctx, 8, RULE_fileAnnotation);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 381;
			ErrorHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 365;
					Match(FILE);
					State = 366;
					Match(COLON);
					State = 376;
					ErrorHandler.Sync(this);
					switch (TokenStream.LA(1)) {
					case LSQUARE:
						{
						State = 367;
						Match(LSQUARE);
						State = 369;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						do {
							{
							{
							State = 368;
							unescapedAnnotation();
							}
							}
							State = 371;
							ErrorHandler.Sync(this);
							_la = TokenStream.LA(1);
						} while ( ((((_la - 58)) & ~0x3f) == 0 && ((1L << (_la - 58)) & ((1L << (IMPORT - 58)) | (1L << (CONSTRUCTOR - 58)) | (1L << (BY - 58)) | (1L << (COMPANION - 58)) | (1L << (INIT - 58)) | (1L << (WHERE - 58)) | (1L << (CATCH - 58)) | (1L << (FINALLY - 58)) | (1L << (OUT - 58)) | (1L << (GETTER - 58)) | (1L << (SETTER - 58)) | (1L << (DYNAMIC - 58)) | (1L << (PUBLIC - 58)) | (1L << (PRIVATE - 58)) | (1L << (PROTECTED - 58)) | (1L << (INTERNAL - 58)) | (1L << (ENUM - 58)) | (1L << (SEALED - 58)) | (1L << (ANNOTATION - 58)) | (1L << (DATA - 58)) | (1L << (INNER - 58)) | (1L << (TAILREC - 58)) | (1L << (OPERATOR - 58)) | (1L << (INLINE - 58)) | (1L << (INFIX - 58)) | (1L << (EXTERNAL - 58)) | (1L << (SUSPEND - 58)) | (1L << (OVERRIDE - 58)) | (1L << (ABSTRACT - 58)) | (1L << (FINAL - 58)))) != 0) || ((((_la - 122)) & ~0x3f) == 0 && ((1L << (_la - 122)) & ((1L << (OPEN - 122)) | (1L << (CONST - 122)) | (1L << (LATEINIT - 122)) | (1L << (VARARG - 122)) | (1L << (NOINLINE - 122)) | (1L << (CROSSINLINE - 122)) | (1L << (REIFIED - 122)) | (1L << (Identifier - 122)))) != 0) );
						State = 373;
						Match(RSQUARE);
						}
						break;
					case IMPORT:
					case CONSTRUCTOR:
					case BY:
					case COMPANION:
					case INIT:
					case WHERE:
					case CATCH:
					case FINALLY:
					case OUT:
					case GETTER:
					case SETTER:
					case DYNAMIC:
					case PUBLIC:
					case PRIVATE:
					case PROTECTED:
					case INTERNAL:
					case ENUM:
					case SEALED:
					case ANNOTATION:
					case DATA:
					case INNER:
					case TAILREC:
					case OPERATOR:
					case INLINE:
					case INFIX:
					case EXTERNAL:
					case SUSPEND:
					case OVERRIDE:
					case ABSTRACT:
					case FINAL:
					case OPEN:
					case CONST:
					case LATEINIT:
					case VARARG:
					case NOINLINE:
					case CROSSINLINE:
					case REIFIED:
					case Identifier:
						{
						State = 375;
						unescapedAnnotation();
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 379;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,16,Context) ) {
					case 1:
						{
						State = 378;
						semi();
						}
						break;
					}
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 383;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,17,Context);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PackageHeaderContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PACKAGE() { return GetToken(KotlinParser.PACKAGE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ModifierListContext modifierList() {
			return GetRuleContext<ModifierListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SemiContext semi() {
			return GetRuleContext<SemiContext>(0);
		}
		public PackageHeaderContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_packageHeader; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IKotlinParserListener typedListener = listener as IKotlinParserListener;
			if (typedListener != null) typedListener.EnterPackageHeader(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IKotlinParserListener typedListener = listener as IKotlinParserListener;
			if (typedListener != null) typedListener.ExitPackageHeader(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKotlinParserVisitor<TResult> typedVisitor = visitor as IKotlinParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPackageHeader(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PackageHeaderContext packageHeader() {
		PackageHeaderContext _localctx = new PackageHeaderContext(Context, State);
		EnterRule(_localctx, 10, RULE_packageHeader);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 393;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,20,Context) ) {
			case 1:
				{
				State = 386;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==AT || _la==FILE || ((((_la - 89)) & ~0x3f) == 0 && ((1L << (_la - 89)) & ((1L << (IN - 89)) | (1L << (OUT - 89)) | (1L << (FIELD - 89)) | (1L << (PROPERTY - 89)) | (1L << (GET - 89)) | (1L << (SET - 89)) | (1L << (RECEIVER - 89)) | (1L << (PARAM - 89)) | (1L << (SETPARAM - 89)) | (1L << (DELEGATE - 89)) | (1L << (PUBLIC - 89)) | (1L << (PRIVATE - 89)) | (1L << (PROTECTED - 89)) | (1L << (INTERNAL - 89)) | (1L << (ENUM - 89)) | (1L << (SEALED - 89)) | (1L << (ANNOTATION - 89)) | (1L << (DATA - 89)) | (1L << (INNER - 89)) | (1L << (TAILREC - 89)) | (1L << (OPERATOR - 89)) | (1L << (INLINE - 89)) | (1L << (INFIX - 89)) | (1L << (EXTERNAL - 89)) | (1L << (SUSPEND - 89)) | (1L << (OVERRIDE - 89)) | (1L << (ABSTRACT - 89)) | (1L << (FINAL - 89)) | (1L << (OPEN - 89)) | (1L << (CONST - 89)) | (1L << (LATEINIT - 89)) | (1L << (VARARG - 89)) | (1L << (NOINLINE - 89)) | (1L << (CROSSINLINE - 89)) | (1L << (REIFIED - 89)) | (1L << (LabelReference - 89)))) != 0)) {
					{
					State = 385;
					modifierList();
					}
				}

				State = 388;
				Match(PACKAGE);
				State = 389;
				identifier();
				State = 391;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,19,Context) ) {
				case 1:
					{
					State = 390;
					semi();
					}
					break;
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ImportListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ImportHeaderContext[] importHeader() {
			return GetRuleContexts<ImportHeaderContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ImportHeaderContext importHeader(int i) {
			return GetRuleContext<ImportHeaderContext>(i);
		}
		public ImportListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_importList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IKotlinParserListener typedListener = listener as IKotlinParserListener;
			if (typedListener != null) typedListener.EnterImportList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IKotlinParserListener typedListener = listener as IKotlinParserListener;
			if (typedListener != null) typedListener.ExitImportList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKotlinParserVisitor<TResult> typedVisitor = visitor as IKotlinParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitImportList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ImportListContext importList() {
		ImportListContext _localctx = new ImportListContext(Context, State);
		EnterRule(_localctx, 12, RULE_importList);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 398;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,21,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 395;
					importHeader();
					}
					} 
				}
				State = 400;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,21,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ImportHeaderContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IMPORT() { return GetToken(KotlinParser.IMPORT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT() { return GetToken(KotlinParser.DOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MULT() { return GetToken(KotlinParser.MULT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ImportAliasContext importAlias() {
			return GetRuleContext<ImportAliasContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SemiContext semi() {
			return GetRuleContext<SemiContext>(0);
		}
		public ImportHeaderContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_importHeader; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IKotlinParserListener typedListener = listener as IKotlinParserListener;
			if (typedListener != null) typedListener.EnterImportHeader(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IKotlinParserListener typedListener = listener as IKotlinParserListener;
			if (typedListener != null) typedListener.ExitImportHeader(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKotlinParserVisitor<TResult> typedVisitor = visitor as IKotlinParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitImportHeader(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ImportHeaderContext importHeader() {
		ImportHeaderContext _localctx = new ImportHeaderContext(Context, State);
		EnterRule(_localctx, 14, RULE_importHeader);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 401;
			Match(IMPORT);
			State = 402;
			identifier();
			State = 406;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case DOT:
				{
				State = 403;
				Match(DOT);
				State = 404;
				Match(MULT);
				}
				break;
			case AS:
				{
				State = 405;
				importAlias();
				}
				break;
			case Eof:
			case NL:
			case LPAREN:
			case LSQUARE:
			case LCURL:
			case ADD:
			case SUB:
			case INCR:
			case DECR:
			case EXCL:
			case SEMICOLON:
			case COLONCOLON:
			case Q_COLONCOLON:
			case AT:
			case RETURN_AT:
			case CONTINUE_AT:
			case BREAK_AT:
			case FILE:
			case IMPORT:
			case CLASS:
			case INTERFACE:
			case FUN:
			case OBJECT:
			case VAL:
			case VAR:
			case TYPE_ALIAS:
			case CONSTRUCTOR:
			case BY:
			case COMPANION:
			case INIT:
			case THIS:
			case SUPER:
			case WHERE:
			case IF:
			case WHEN:
			case TRY:
			case CATCH:
			case FINALLY:
			case FOR:
			case DO:
			case WHILE:
			case THROW:
			case RETURN:
			case CONTINUE:
			case BREAK:
			case IN:
			case OUT:
			case FIELD:
			case PROPERTY:
			case GET:
			case SET:
			case GETTER:
			case SETTER:
			case RECEIVER:
			case PARAM:
			case SETPARAM:
			case DELEGATE:
			case DYNAMIC:
			case PUBLIC:
			case PRIVATE:
			case PROTECTED:
			case INTERNAL:
			case ENUM:
			case SEALED:
			case ANNOTATION:
			case DATA:
			case INNER:
			case TAILREC:
			case OPERATOR:
			case INLINE:
			case INFIX:
			case EXTERNAL:
			case SUSPEND:
			case OVERRIDE:
			case ABSTRACT:
			case FINAL:
			case OPEN:
			case CONST:
			case LATEINIT:
			case VARARG:
			case NOINLINE:
			case CROSSINLINE:
			case REIFIED:
			case QUOTE_OPEN:
			case TRIPLE_QUOTE_OPEN:
			case RealLiteral:
			case LongLiteral:
			case IntegerLiteral:
			case HexLiteral:
			case BinLiteral:
			case BooleanLiteral:
			case NullLiteral:
			case Identifier:
			case LabelReference:
			case LabelDefinition:
			case CharacterLiteral:
				break;
			default:
				break;
			}
			State = 409;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,23,Context) ) {
			case 1:
				{
				State = 408;
				semi();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ImportAliasContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AS() { return GetToken(KotlinParser.AS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SimpleIdentifierContext simpleIdentifier() {
			return GetRuleContext<SimpleIdentifierContext>(0);
		}
		public ImportAliasContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_importAlias; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IKotlinParserListener typedListener = listener as IKotlinParserListener;
			if (typedListener != null) typedListener.EnterImportAlias(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IKotlinParserListener typedListener = listener as IKotlinParserListener;
			if (typedListener != null) typedListener.ExitImportAlias(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKotlinParserVisitor<TResult> typedVisitor = visitor as IKotlinParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitImportAlias(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ImportAliasContext importAlias() {
		ImportAliasContext _localctx = new ImportAliasContext(Context, State);
		EnterRule(_localctx, 16, RULE_importAlias);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 411;
			Match(AS);
			State = 412;
			simpleIdentifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TopLevelObjectContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ClassDeclarationContext classDeclaration() {
			return GetRuleContext<ClassDeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ObjectDeclarationContext objectDeclaration() {
			return GetRuleContext<ObjectDeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionDeclarationContext functionDeclaration() {
			return GetRuleContext<FunctionDeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PropertyDeclarationContext propertyDeclaration() {
			return GetRuleContext<PropertyDeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeAliasContext typeAlias() {
			return GetRuleContext<TypeAliasContext>(0);
		}
		public TopLevelObjectContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_topLevelObject; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IKotlinParserListener typedListener = listener as IKotlinParserListener;
			if (typedListener != null) typedListener.EnterTopLevelObject(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IKotlinParserListener typedListener = listener as IKotlinParserListener;
			if (typedListener != null) typedListener.ExitTopLevelObject(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKotlinParserVisitor<TResult> typedVisitor = visitor as IKotlinParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTopLevelObject(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TopLevelObjectContext topLevelObject() {
		TopLevelObjectContext _localctx = new TopLevelObjectContext(Context, State);
		EnterRule(_localctx, 18, RULE_topLevelObject);
		try {
			State = 419;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,24,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 414;
				classDeclaration();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 415;
				objectDeclaration();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 416;
				functionDeclaration();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 417;
				propertyDeclaration();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 418;
				typeAlias();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClassDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SimpleIdentifierContext simpleIdentifier() {
			return GetRuleContext<SimpleIdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLASS() { return GetToken(KotlinParser.CLASS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTERFACE() { return GetToken(KotlinParser.INTERFACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ModifierListContext modifierList() {
			return GetRuleContext<ModifierListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NL() { return GetTokens(KotlinParser.NL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NL(int i) {
			return GetToken(KotlinParser.NL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeParametersContext typeParameters() {
			return GetRuleContext<TypeParametersContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PrimaryConstructorContext primaryConstructor() {
			return GetRuleContext<PrimaryConstructorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(KotlinParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public DelegationSpecifiersContext delegationSpecifiers() {
			return GetRuleContext<DelegationSpecifiersContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeConstraintsContext typeConstraints() {
			return GetRuleContext<TypeConstraintsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ClassBodyContext classBody() {
			return GetRuleContext<ClassBodyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public EnumClassBodyContext enumClassBody() {
			return GetRuleContext<EnumClassBodyContext>(0);
		}
		public ClassDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_classDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IKotlinParserListener typedListener = listener as IKotlinParserListener;
			if (typedListener != null) typedListener.EnterClassDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IKotlinParserListener typedListener = listener as IKotlinParserListener;
			if (typedListener != null) typedListener.ExitClassDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKotlinParserVisitor<TResult> typedVisitor = visitor as IKotlinParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClassDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ClassDeclarationContext classDeclaration() {
		ClassDeclarationContext _localctx = new ClassDeclarationContext(Context, State);
		EnterRule(_localctx, 20, RULE_classDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 422;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==AT || _la==FILE || ((((_la - 89)) & ~0x3f) == 0 && ((1L << (_la - 89)) & ((1L << (IN - 89)) | (1L << (OUT - 89)) | (1L << (FIELD - 89)) | (1L << (PROPERTY - 89)) | (1L << (GET - 89)) | (1L << (SET - 89)) | (1L << (RECEIVER - 89)) | (1L << (PARAM - 89)) | (1L << (SETPARAM - 89)) | (1L << (DELEGATE - 89)) | (1L << (PUBLIC - 89)) | (1L << (PRIVATE - 89)) | (1L << (PROTECTED - 89)) | (1L << (INTERNAL - 89)) | (1L << (ENUM - 89)) | (1L << (SEALED - 89)) | (1L << (ANNOTATION - 89)) | (1L << (DATA - 89)) | (1L << (INNER - 89)) | (1L << (TAILREC - 89)) | (1L << (OPERATOR - 89)) | (1L << (INLINE - 89)) | (1L << (INFIX - 89)) | (1L << (EXTERNAL - 89)) | (1L << (SUSPEND - 89)) | (1L << (OVERRIDE - 89)) | (1L << (ABSTRACT - 89)) | (1L << (FINAL - 89)) | (1L << (OPEN - 89)) | (1L << (CONST - 89)) | (1L << (LATEINIT - 89)) | (1L << (VARARG - 89)) | (1L << (NOINLINE - 89)) | (1L << (CROSSINLINE - 89)) | (1L << (REIFIED - 89)) | (1L << (LabelReference - 89)))) != 0)) {
				{
				State = 421;
				modifierList();
				}
			}

			State = 424;
			_la = TokenStream.LA(1);
			if ( !(_la==CLASS || _la==INTERFACE) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 428;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==NL) {
				{
				{
				State = 425;
				Match(NL);
				}
				}
				State = 430;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 431;
			simpleIdentifier();
			State = 439;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,28,Context) ) {
			case 1:
				{
				State = 435;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==NL) {
					{
					{
					State = 432;
					Match(NL);
					}
					}
					State = 437;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 438;
				typeParameters();
				}
				break;
			}
			State = 448;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,30,Context) ) {
			case 1:
				{
				State = 444;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==NL) {
					{
					{
					State = 441;
					Match(NL);
					}
					}
					State = 446;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 447;
				primaryConstructor();
				}
				break;
			}
			State = 464;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,33,Context) ) {
			case 1:
				{
				State = 453;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==NL) {
					{
					{
					State = 450;
					Match(NL);
					}
					}
					State = 455;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 456;
				Match(COLON);
				State = 460;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==NL) {
					{
					{
					State = 457;
					Match(NL);
					}
					}
					State = 462;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 463;
				delegationSpecifiers();
				}
				break;
			}
			State = 473;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,35,Context) ) {
			case 1:
				{
				State = 469;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==NL) {
					{
					{
					State = 466;
					Match(NL);
					}
					}
					State = 471;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 472;
				typeConstraints();
				}
				break;
			}
			State = 489;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,38,Context) ) {
			case 1:
				{
				State = 478;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==NL) {
					{
					{
					State = 475;
					Match(NL);
					}
					}
					State = 480;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 481;
				classBody();
				}
				break;
			case 2:
				{
				State = 485;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==NL) {
					{
					{
					State = 482;
					Match(NL);
					}
					}
					State = 487;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 488;
				enumClassBody();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PrimaryConstructorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ClassParametersContext classParameters() {
			return GetRuleContext<ClassParametersContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ModifierListContext modifierList() {
			return GetRuleContext<ModifierListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONSTRUCTOR() { return GetToken(KotlinParser.CONSTRUCTOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NL() { return GetTokens(KotlinParser.NL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NL(int i) {
			return GetToken(KotlinParser.NL, i);
		}
		public PrimaryConstructorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_primaryConstructor; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IKotlinParserListener typedListener = listener as IKotlinParserListener;
			if (typedListener != null) typedListener.EnterPrimaryConstructor(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IKotlinParserListener typedListener = listener as IKotlinParserListener;
			if (typedListener != null) typedListener.ExitPrimaryConstructor(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKotlinParserVisitor<TResult> typedVisitor = visitor as IKotlinParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrimaryConstructor(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PrimaryConstructorContext primaryConstructor() {
		PrimaryConstructorContext _localctx = new PrimaryConstructorContext(Context, State);
		EnterRule(_localctx, 22, RULE_primaryConstructor);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 492;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==AT || _la==FILE || ((((_la - 89)) & ~0x3f) == 0 && ((1L << (_la - 89)) & ((1L << (IN - 89)) | (1L << (OUT - 89)) | (1L << (FIELD - 89)) | (1L << (PROPERTY - 89)) | (1L << (GET - 89)) | (1L << (SET - 89)) | (1L << (RECEIVER - 89)) | (1L << (PARAM - 89)) | (1L << (SETPARAM - 89)) | (1L << (DELEGATE - 89)) | (1L << (PUBLIC - 89)) | (1L << (PRIVATE - 89)) | (1L << (PROTECTED - 89)) | (1L << (INTERNAL - 89)) | (1L << (ENUM - 89)) | (1L << (SEALED - 89)) | (1L << (ANNOTATION - 89)) | (1L << (DATA - 89)) | (1L << (INNER - 89)) | (1L << (TAILREC - 89)) | (1L << (OPERATOR - 89)) | (1L << (INLINE - 89)) | (1L << (INFIX - 89)) | (1L << (EXTERNAL - 89)) | (1L << (SUSPEND - 89)) | (1L << (OVERRIDE - 89)) | (1L << (ABSTRACT - 89)) | (1L << (FINAL - 89)) | (1L << (OPEN - 89)) | (1L << (CONST - 89)) | (1L << (LATEINIT - 89)) | (1L << (VARARG - 89)) | (1L << (NOINLINE - 89)) | (1L << (CROSSINLINE - 89)) | (1L << (REIFIED - 89)) | (1L << (LabelReference - 89)))) != 0)) {
				{
				State = 491;
				modifierList();
				}
			}

			State = 501;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==CONSTRUCTOR) {
				{
				State = 494;
				Match(CONSTRUCTOR);
				State = 498;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==NL) {
					{
					{
					State = 495;
					Match(NL);
					}
					}
					State = 500;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
			}

			State = 503;
			classParameters();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClassParametersContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(KotlinParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(KotlinParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ClassParameterContext[] classParameter() {
			return GetRuleContexts<ClassParameterContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ClassParameterContext classParameter(int i) {
			return GetRuleContext<ClassParameterContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(KotlinParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(KotlinParser.COMMA, i);
		}
		public ClassParametersContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_classParameters; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IKotlinParserListener typedListener = listener as IKotlinParserListener;
			if (typedListener != null) typedListener.EnterClassParameters(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IKotlinParserListener typedListener = listener as IKotlinParserListener;
			if (typedListener != null) typedListener.ExitClassParameters(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKotlinParserVisitor<TResult> typedVisitor = visitor as IKotlinParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClassParameters(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ClassParametersContext classParameters() {
		ClassParametersContext _localctx = new ClassParametersContext(Context, State);
		EnterRule(_localctx, 24, RULE_classParameters);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 505;
			Match(LPAREN);
			State = 514;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (((((_la - 40)) & ~0x3f) == 0 && ((1L << (_la - 40)) & ((1L << (AT - 40)) | (1L << (FILE - 40)) | (1L << (IMPORT - 40)) | (1L << (VAL - 40)) | (1L << (VAR - 40)) | (1L << (CONSTRUCTOR - 40)) | (1L << (BY - 40)) | (1L << (COMPANION - 40)) | (1L << (INIT - 40)) | (1L << (WHERE - 40)) | (1L << (CATCH - 40)) | (1L << (FINALLY - 40)) | (1L << (IN - 40)) | (1L << (OUT - 40)) | (1L << (FIELD - 40)) | (1L << (PROPERTY - 40)) | (1L << (GET - 40)) | (1L << (SET - 40)) | (1L << (GETTER - 40)) | (1L << (SETTER - 40)) | (1L << (RECEIVER - 40)) | (1L << (PARAM - 40)) | (1L << (SETPARAM - 40)) | (1L << (DELEGATE - 40)) | (1L << (DYNAMIC - 40)))) != 0) || ((((_la - 104)) & ~0x3f) == 0 && ((1L << (_la - 104)) & ((1L << (PUBLIC - 104)) | (1L << (PRIVATE - 104)) | (1L << (PROTECTED - 104)) | (1L << (INTERNAL - 104)) | (1L << (ENUM - 104)) | (1L << (SEALED - 104)) | (1L << (ANNOTATION - 104)) | (1L << (DATA - 104)) | (1L << (INNER - 104)) | (1L << (TAILREC - 104)) | (1L << (OPERATOR - 104)) | (1L << (INLINE - 104)) | (1L << (INFIX - 104)) | (1L << (EXTERNAL - 104)) | (1L << (SUSPEND - 104)) | (1L << (OVERRIDE - 104)) | (1L << (ABSTRACT - 104)) | (1L << (FINAL - 104)) | (1L << (OPEN - 104)) | (1L << (CONST - 104)) | (1L << (LATEINIT - 104)) | (1L << (VARARG - 104)) | (1L << (NOINLINE - 104)) | (1L << (CROSSINLINE - 104)) | (1L << (REIFIED - 104)) | (1L << (Identifier - 104)) | (1L << (LabelReference - 104)))) != 0)) {
				{
				State = 506;
				classParameter();
				State = 511;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 507;
					Match(COMMA);
					State = 508;
					classParameter();
					}
					}
					State = 513;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
			}

			State = 516;
			Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClassParameterContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SimpleIdentifierContext simpleIdentifier() {
			return GetRuleContext<SimpleIdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(KotlinParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ModifierListContext modifierList() {
			return GetRuleContext<ModifierListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGNMENT() { return GetToken(KotlinParser.ASSIGNMENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VAL() { return GetToken(KotlinParser.VAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VAR() { return GetToken(KotlinParser.VAR, 0); }
		public ClassParameterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_classParameter; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IKotlinParserListener typedListener = listener as IKotlinParserListener;
			if (typedListener != null) typedListener.EnterClassParameter(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IKotlinParserListener typedListener = listener as IKotlinParserListener;
			if (typedListener != null) typedListener.ExitClassParameter(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKotlinParserVisitor<TResult> typedVisitor = visitor as IKotlinParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClassParameter(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ClassParameterContext classParameter() {
		ClassParameterContext _localctx = new ClassParameterContext(Context, State);
		EnterRule(_localctx, 26, RULE_classParameter);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 519;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,44,Context) ) {
			case 1:
				{
				State = 518;
				modifierList();
				}
				break;
			}
			State = 522;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==VAL || _la==VAR) {
				{
				State = 521;
				_la = TokenStream.LA(1);
				if ( !(_la==VAL || _la==VAR) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
			}

			State = 524;
			simpleIdentifier();
			State = 525;
			Match(COLON);
			State = 526;
			type();
			State = 529;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ASSIGNMENT) {
				{
				State = 527;
				Match(ASSIGNMENT);
				State = 528;
				expression();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DelegationSpecifiersContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public DelegationSpecifierContext[] delegationSpecifier() {
			return GetRuleContexts<DelegationSpecifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public DelegationSpecifierContext delegationSpecifier(int i) {
			return GetRuleContext<DelegationSpecifierContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AnnotationsContext[] annotations() {
			return GetRuleContexts<AnnotationsContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AnnotationsContext annotations(int i) {
			return GetRuleContext<AnnotationsContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(KotlinParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(KotlinParser.COMMA, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NL() { return GetTokens(KotlinParser.NL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NL(int i) {
			return GetToken(KotlinParser.NL, i);
		}
		public DelegationSpecifiersContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_delegationSpecifiers; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IKotlinParserListener typedListener = listener as IKotlinParserListener;
			if (typedListener != null) typedListener.EnterDelegationSpecifiers(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IKotlinParserListener typedListener = listener as IKotlinParserListener;
			if (typedListener != null) typedListener.ExitDelegationSpecifiers(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKotlinParserVisitor<TResult> typedVisitor = visitor as IKotlinParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDelegationSpecifiers(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DelegationSpecifiersContext delegationSpecifiers() {
		DelegationSpecifiersContext _localctx = new DelegationSpecifiersContext(Context, State);
		EnterRule(_localctx, 28, RULE_delegationSpecifiers);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 534;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==AT || _la==FILE || ((((_la - 93)) & ~0x3f) == 0 && ((1L << (_la - 93)) & ((1L << (FIELD - 93)) | (1L << (PROPERTY - 93)) | (1L << (GET - 93)) | (1L << (SET - 93)) | (1L << (RECEIVER - 93)) | (1L << (PARAM - 93)) | (1L << (SETPARAM - 93)) | (1L << (DELEGATE - 93)) | (1L << (LabelReference - 93)))) != 0)) {
				{
				{
				State = 531;
				annotations();
				}
				}
				State = 536;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 537;
			delegationSpecifier();
			State = 554;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,50,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 541;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (_la==NL) {
						{
						{
						State = 538;
						Match(NL);
						}
						}
						State = 543;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					State = 544;
					Match(COMMA);
					State = 548;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (_la==NL) {
						{
						{
						State = 545;
						Match(NL);
						}
						}
						State = 550;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					State = 551;
					delegationSpecifier();
					}
					} 
				}
				State = 556;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,50,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DelegationSpecifierContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ConstructorInvocationContext constructorInvocation() {
			return GetRuleContext<ConstructorInvocationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public UserTypeContext userType() {
			return GetRuleContext<UserTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExplicitDelegationContext explicitDelegation() {
			return GetRuleContext<ExplicitDelegationContext>(0);
		}
		public DelegationSpecifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_delegationSpecifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IKotlinParserListener typedListener = listener as IKotlinParserListener;
			if (typedListener != null) typedListener.EnterDelegationSpecifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IKotlinParserListener typedListener = listener as IKotlinParserListener;
			if (typedListener != null) typedListener.ExitDelegationSpecifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKotlinParserVisitor<TResult> typedVisitor = visitor as IKotlinParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDelegationSpecifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DelegationSpecifierContext delegationSpecifier() {
		DelegationSpecifierContext _localctx = new DelegationSpecifierContext(Context, State);
		EnterRule(_localctx, 30, RULE_delegationSpecifier);
		try {
			State = 560;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,51,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 557;
				constructorInvocation();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 558;
				userType();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 559;
				explicitDelegation();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConstructorInvocationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public UserTypeContext userType() {
			return GetRuleContext<UserTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CallSuffixContext callSuffix() {
			return GetRuleContext<CallSuffixContext>(0);
		}
		public ConstructorInvocationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constructorInvocation; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IKotlinParserListener typedListener = listener as IKotlinParserListener;
			if (typedListener != null) typedListener.EnterConstructorInvocation(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IKotlinParserListener typedListener = listener as IKotlinParserListener;
			if (typedListener != null) typedListener.ExitConstructorInvocation(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKotlinParserVisitor<TResult> typedVisitor = visitor as IKotlinParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConstructorInvocation(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConstructorInvocationContext constructorInvocation() {
		ConstructorInvocationContext _localctx = new ConstructorInvocationContext(Context, State);
		EnterRule(_localctx, 32, RULE_constructorInvocation);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 562;
			userType();
			State = 563;
			callSuffix();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExplicitDelegationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public UserTypeContext userType() {
			return GetRuleContext<UserTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BY() { return GetToken(KotlinParser.BY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NL() { return GetTokens(KotlinParser.NL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NL(int i) {
			return GetToken(KotlinParser.NL, i);
		}
		public ExplicitDelegationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_explicitDelegation; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IKotlinParserListener typedListener = listener as IKotlinParserListener;
			if (typedListener != null) typedListener.EnterExplicitDelegation(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IKotlinParserListener typedListener = listener as IKotlinParserListener;
			if (typedListener != null) typedListener.ExitExplicitDelegation(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKotlinParserVisitor<TResult> typedVisitor = visitor as IKotlinParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExplicitDelegation(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExplicitDelegationContext explicitDelegation() {
		ExplicitDelegationContext _localctx = new ExplicitDelegationContext(Context, State);
		EnterRule(_localctx, 34, RULE_explicitDelegation);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 565;
			userType();
			State = 569;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==NL) {
				{
				{
				State = 566;
				Match(NL);
				}
				}
				State = 571;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 572;
			Match(BY);
			State = 576;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,53,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 573;
					Match(NL);
					}
					} 
				}
				State = 578;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,53,Context);
			}
			State = 579;
			expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClassBodyContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LCURL() { return GetToken(KotlinParser.LCURL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RCURL() { return GetToken(KotlinParser.RCURL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NL() { return GetTokens(KotlinParser.NL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NL(int i) {
			return GetToken(KotlinParser.NL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ClassMemberDeclarationContext[] classMemberDeclaration() {
			return GetRuleContexts<ClassMemberDeclarationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ClassMemberDeclarationContext classMemberDeclaration(int i) {
			return GetRuleContext<ClassMemberDeclarationContext>(i);
		}
		public ClassBodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_classBody; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IKotlinParserListener typedListener = listener as IKotlinParserListener;
			if (typedListener != null) typedListener.EnterClassBody(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IKotlinParserListener typedListener = listener as IKotlinParserListener;
			if (typedListener != null) typedListener.ExitClassBody(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKotlinParserVisitor<TResult> typedVisitor = visitor as IKotlinParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClassBody(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ClassBodyContext classBody() {
		ClassBodyContext _localctx = new ClassBodyContext(Context, State);
		EnterRule(_localctx, 36, RULE_classBody);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 581;
			Match(LCURL);
			State = 585;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,54,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 582;
					Match(NL);
					}
					} 
				}
				State = 587;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,54,Context);
			}
			State = 591;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (((((_la - 40)) & ~0x3f) == 0 && ((1L << (_la - 40)) & ((1L << (AT - 40)) | (1L << (FILE - 40)) | (1L << (CLASS - 40)) | (1L << (INTERFACE - 40)) | (1L << (FUN - 40)) | (1L << (OBJECT - 40)) | (1L << (VAL - 40)) | (1L << (VAR - 40)) | (1L << (TYPE_ALIAS - 40)) | (1L << (CONSTRUCTOR - 40)) | (1L << (COMPANION - 40)) | (1L << (INIT - 40)) | (1L << (IN - 40)) | (1L << (OUT - 40)) | (1L << (FIELD - 40)) | (1L << (PROPERTY - 40)) | (1L << (GET - 40)) | (1L << (SET - 40)) | (1L << (RECEIVER - 40)) | (1L << (PARAM - 40)) | (1L << (SETPARAM - 40)) | (1L << (DELEGATE - 40)))) != 0) || ((((_la - 104)) & ~0x3f) == 0 && ((1L << (_la - 104)) & ((1L << (PUBLIC - 104)) | (1L << (PRIVATE - 104)) | (1L << (PROTECTED - 104)) | (1L << (INTERNAL - 104)) | (1L << (ENUM - 104)) | (1L << (SEALED - 104)) | (1L << (ANNOTATION - 104)) | (1L << (DATA - 104)) | (1L << (INNER - 104)) | (1L << (TAILREC - 104)) | (1L << (OPERATOR - 104)) | (1L << (INLINE - 104)) | (1L << (INFIX - 104)) | (1L << (EXTERNAL - 104)) | (1L << (SUSPEND - 104)) | (1L << (OVERRIDE - 104)) | (1L << (ABSTRACT - 104)) | (1L << (FINAL - 104)) | (1L << (OPEN - 104)) | (1L << (CONST - 104)) | (1L << (LATEINIT - 104)) | (1L << (VARARG - 104)) | (1L << (NOINLINE - 104)) | (1L << (CROSSINLINE - 104)) | (1L << (REIFIED - 104)) | (1L << (LabelReference - 104)))) != 0)) {
				{
				{
				State = 588;
				classMemberDeclaration();
				}
				}
				State = 593;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 597;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==NL) {
				{
				{
				State = 594;
				Match(NL);
				}
				}
				State = 599;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 600;
			Match(RCURL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClassMemberDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ClassDeclarationContext classDeclaration() {
			return GetRuleContext<ClassDeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionDeclarationContext functionDeclaration() {
			return GetRuleContext<FunctionDeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ObjectDeclarationContext objectDeclaration() {
			return GetRuleContext<ObjectDeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CompanionObjectContext companionObject() {
			return GetRuleContext<CompanionObjectContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PropertyDeclarationContext propertyDeclaration() {
			return GetRuleContext<PropertyDeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AnonymousInitializerContext anonymousInitializer() {
			return GetRuleContext<AnonymousInitializerContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SecondaryConstructorContext secondaryConstructor() {
			return GetRuleContext<SecondaryConstructorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeAliasContext typeAlias() {
			return GetRuleContext<TypeAliasContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AnysemiContext[] anysemi() {
			return GetRuleContexts<AnysemiContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AnysemiContext anysemi(int i) {
			return GetRuleContext<AnysemiContext>(i);
		}
		public ClassMemberDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_classMemberDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IKotlinParserListener typedListener = listener as IKotlinParserListener;
			if (typedListener != null) typedListener.EnterClassMemberDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IKotlinParserListener typedListener = listener as IKotlinParserListener;
			if (typedListener != null) typedListener.ExitClassMemberDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKotlinParserVisitor<TResult> typedVisitor = visitor as IKotlinParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClassMemberDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ClassMemberDeclarationContext classMemberDeclaration() {
		ClassMemberDeclarationContext _localctx = new ClassMemberDeclarationContext(Context, State);
		EnterRule(_localctx, 38, RULE_classMemberDeclaration);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 610;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,57,Context) ) {
			case 1:
				{
				State = 602;
				classDeclaration();
				}
				break;
			case 2:
				{
				State = 603;
				functionDeclaration();
				}
				break;
			case 3:
				{
				State = 604;
				objectDeclaration();
				}
				break;
			case 4:
				{
				State = 605;
				companionObject();
				}
				break;
			case 5:
				{
				State = 606;
				propertyDeclaration();
				}
				break;
			case 6:
				{
				State = 607;
				anonymousInitializer();
				}
				break;
			case 7:
				{
				State = 608;
				secondaryConstructor();
				}
				break;
			case 8:
				{
				State = 609;
				typeAlias();
				}
				break;
			}
			State = 613;
			ErrorHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 612;
					anysemi();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 615;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,58,Context);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AnonymousInitializerContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INIT() { return GetToken(KotlinParser.INIT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NL() { return GetTokens(KotlinParser.NL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NL(int i) {
			return GetToken(KotlinParser.NL, i);
		}
		public AnonymousInitializerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_anonymousInitializer; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IKotlinParserListener typedListener = listener as IKotlinParserListener;
			if (typedListener != null) typedListener.EnterAnonymousInitializer(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IKotlinParserListener typedListener = listener as IKotlinParserListener;
			if (typedListener != null) typedListener.ExitAnonymousInitializer(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKotlinParserVisitor<TResult> typedVisitor = visitor as IKotlinParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAnonymousInitializer(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AnonymousInitializerContext anonymousInitializer() {
		AnonymousInitializerContext _localctx = new AnonymousInitializerContext(Context, State);
		EnterRule(_localctx, 40, RULE_anonymousInitializer);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 617;
			Match(INIT);
			State = 621;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==NL) {
				{
				{
				State = 618;
				Match(NL);
				}
				}
				State = 623;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 624;
			block();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SecondaryConstructorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONSTRUCTOR() { return GetToken(KotlinParser.CONSTRUCTOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FunctionValueParametersContext functionValueParameters() {
			return GetRuleContext<FunctionValueParametersContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ModifierListContext modifierList() {
			return GetRuleContext<ModifierListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NL() { return GetTokens(KotlinParser.NL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NL(int i) {
			return GetToken(KotlinParser.NL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(KotlinParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ConstructorDelegationCallContext constructorDelegationCall() {
			return GetRuleContext<ConstructorDelegationCallContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public SecondaryConstructorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_secondaryConstructor; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IKotlinParserListener typedListener = listener as IKotlinParserListener;
			if (typedListener != null) typedListener.EnterSecondaryConstructor(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IKotlinParserListener typedListener = listener as IKotlinParserListener;
			if (typedListener != null) typedListener.ExitSecondaryConstructor(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKotlinParserVisitor<TResult> typedVisitor = visitor as IKotlinParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSecondaryConstructor(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SecondaryConstructorContext secondaryConstructor() {
		SecondaryConstructorContext _localctx = new SecondaryConstructorContext(Context, State);
		EnterRule(_localctx, 42, RULE_secondaryConstructor);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 627;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==AT || _la==FILE || ((((_la - 89)) & ~0x3f) == 0 && ((1L << (_la - 89)) & ((1L << (IN - 89)) | (1L << (OUT - 89)) | (1L << (FIELD - 89)) | (1L << (PROPERTY - 89)) | (1L << (GET - 89)) | (1L << (SET - 89)) | (1L << (RECEIVER - 89)) | (1L << (PARAM - 89)) | (1L << (SETPARAM - 89)) | (1L << (DELEGATE - 89)) | (1L << (PUBLIC - 89)) | (1L << (PRIVATE - 89)) | (1L << (PROTECTED - 89)) | (1L << (INTERNAL - 89)) | (1L << (ENUM - 89)) | (1L << (SEALED - 89)) | (1L << (ANNOTATION - 89)) | (1L << (DATA - 89)) | (1L << (INNER - 89)) | (1L << (TAILREC - 89)) | (1L << (OPERATOR - 89)) | (1L << (INLINE - 89)) | (1L << (INFIX - 89)) | (1L << (EXTERNAL - 89)) | (1L << (SUSPEND - 89)) | (1L << (OVERRIDE - 89)) | (1L << (ABSTRACT - 89)) | (1L << (FINAL - 89)) | (1L << (OPEN - 89)) | (1L << (CONST - 89)) | (1L << (LATEINIT - 89)) | (1L << (VARARG - 89)) | (1L << (NOINLINE - 89)) | (1L << (CROSSINLINE - 89)) | (1L << (REIFIED - 89)) | (1L << (LabelReference - 89)))) != 0)) {
				{
				State = 626;
				modifierList();
				}
			}

			State = 629;
			Match(CONSTRUCTOR);
			State = 633;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==NL) {
				{
				{
				State = 630;
				Match(NL);
				}
				}
				State = 635;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 636;
			functionValueParameters();
			State = 651;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,64,Context) ) {
			case 1:
				{
				State = 640;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==NL) {
					{
					{
					State = 637;
					Match(NL);
					}
					}
					State = 642;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 643;
				Match(COLON);
				State = 647;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==NL) {
					{
					{
					State = 644;
					Match(NL);
					}
					}
					State = 649;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 650;
				constructorDelegationCall();
				}
				break;
			}
			State = 656;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,65,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 653;
					Match(NL);
					}
					} 
				}
				State = 658;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,65,Context);
			}
			State = 660;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LCURL) {
				{
				State = 659;
				block();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConstructorDelegationCallContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode THIS() { return GetToken(KotlinParser.THIS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ValueArgumentsContext valueArguments() {
			return GetRuleContext<ValueArgumentsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NL() { return GetTokens(KotlinParser.NL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NL(int i) {
			return GetToken(KotlinParser.NL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SUPER() { return GetToken(KotlinParser.SUPER, 0); }
		public ConstructorDelegationCallContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constructorDelegationCall; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IKotlinParserListener typedListener = listener as IKotlinParserListener;
			if (typedListener != null) typedListener.EnterConstructorDelegationCall(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IKotlinParserListener typedListener = listener as IKotlinParserListener;
			if (typedListener != null) typedListener.ExitConstructorDelegationCall(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKotlinParserVisitor<TResult> typedVisitor = visitor as IKotlinParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConstructorDelegationCall(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConstructorDelegationCallContext constructorDelegationCall() {
		ConstructorDelegationCallContext _localctx = new ConstructorDelegationCallContext(Context, State);
		EnterRule(_localctx, 44, RULE_constructorDelegationCall);
		int _la;
		try {
			State = 678;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case THIS:
				EnterOuterAlt(_localctx, 1);
				{
				State = 662;
				Match(THIS);
				State = 666;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==NL) {
					{
					{
					State = 663;
					Match(NL);
					}
					}
					State = 668;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 669;
				valueArguments();
				}
				break;
			case SUPER:
				EnterOuterAlt(_localctx, 2);
				{
				State = 670;
				Match(SUPER);
				State = 674;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==NL) {
					{
					{
					State = 671;
					Match(NL);
					}
					}
					State = 676;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 677;
				valueArguments();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EnumClassBodyContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LCURL() { return GetToken(KotlinParser.LCURL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RCURL() { return GetToken(KotlinParser.RCURL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NL() { return GetTokens(KotlinParser.NL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NL(int i) {
			return GetToken(KotlinParser.NL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public EnumEntriesContext enumEntries() {
			return GetRuleContext<EnumEntriesContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON() { return GetToken(KotlinParser.SEMICOLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ClassMemberDeclarationContext[] classMemberDeclaration() {
			return GetRuleContexts<ClassMemberDeclarationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ClassMemberDeclarationContext classMemberDeclaration(int i) {
			return GetRuleContext<ClassMemberDeclarationContext>(i);
		}
		public EnumClassBodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enumClassBody; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IKotlinParserListener typedListener = listener as IKotlinParserListener;
			if (typedListener != null) typedListener.EnterEnumClassBody(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IKotlinParserListener typedListener = listener as IKotlinParserListener;
			if (typedListener != null) typedListener.ExitEnumClassBody(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKotlinParserVisitor<TResult> typedVisitor = visitor as IKotlinParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEnumClassBody(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EnumClassBodyContext enumClassBody() {
		EnumClassBodyContext _localctx = new EnumClassBodyContext(Context, State);
		EnterRule(_localctx, 46, RULE_enumClassBody);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 680;
			Match(LCURL);
			State = 684;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,70,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 681;
					Match(NL);
					}
					} 
				}
				State = 686;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,70,Context);
			}
			State = 688;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (((((_la - 58)) & ~0x3f) == 0 && ((1L << (_la - 58)) & ((1L << (IMPORT - 58)) | (1L << (CONSTRUCTOR - 58)) | (1L << (BY - 58)) | (1L << (COMPANION - 58)) | (1L << (INIT - 58)) | (1L << (WHERE - 58)) | (1L << (CATCH - 58)) | (1L << (FINALLY - 58)) | (1L << (OUT - 58)) | (1L << (GETTER - 58)) | (1L << (SETTER - 58)) | (1L << (DYNAMIC - 58)) | (1L << (PUBLIC - 58)) | (1L << (PRIVATE - 58)) | (1L << (PROTECTED - 58)) | (1L << (INTERNAL - 58)) | (1L << (ENUM - 58)) | (1L << (SEALED - 58)) | (1L << (ANNOTATION - 58)) | (1L << (DATA - 58)) | (1L << (INNER - 58)) | (1L << (TAILREC - 58)) | (1L << (OPERATOR - 58)) | (1L << (INLINE - 58)) | (1L << (INFIX - 58)) | (1L << (EXTERNAL - 58)) | (1L << (SUSPEND - 58)) | (1L << (OVERRIDE - 58)) | (1L << (ABSTRACT - 58)) | (1L << (FINAL - 58)))) != 0) || ((((_la - 122)) & ~0x3f) == 0 && ((1L << (_la - 122)) & ((1L << (OPEN - 122)) | (1L << (CONST - 122)) | (1L << (LATEINIT - 122)) | (1L << (VARARG - 122)) | (1L << (NOINLINE - 122)) | (1L << (CROSSINLINE - 122)) | (1L << (REIFIED - 122)) | (1L << (Identifier - 122)))) != 0)) {
				{
				State = 687;
				enumEntries();
				}
			}

			State = 709;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,75,Context) ) {
			case 1:
				{
				State = 693;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==NL) {
					{
					{
					State = 690;
					Match(NL);
					}
					}
					State = 695;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 696;
				Match(SEMICOLON);
				State = 700;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,73,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 697;
						Match(NL);
						}
						} 
					}
					State = 702;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,73,Context);
				}
				State = 706;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (((((_la - 40)) & ~0x3f) == 0 && ((1L << (_la - 40)) & ((1L << (AT - 40)) | (1L << (FILE - 40)) | (1L << (CLASS - 40)) | (1L << (INTERFACE - 40)) | (1L << (FUN - 40)) | (1L << (OBJECT - 40)) | (1L << (VAL - 40)) | (1L << (VAR - 40)) | (1L << (TYPE_ALIAS - 40)) | (1L << (CONSTRUCTOR - 40)) | (1L << (COMPANION - 40)) | (1L << (INIT - 40)) | (1L << (IN - 40)) | (1L << (OUT - 40)) | (1L << (FIELD - 40)) | (1L << (PROPERTY - 40)) | (1L << (GET - 40)) | (1L << (SET - 40)) | (1L << (RECEIVER - 40)) | (1L << (PARAM - 40)) | (1L << (SETPARAM - 40)) | (1L << (DELEGATE - 40)))) != 0) || ((((_la - 104)) & ~0x3f) == 0 && ((1L << (_la - 104)) & ((1L << (PUBLIC - 104)) | (1L << (PRIVATE - 104)) | (1L << (PROTECTED - 104)) | (1L << (INTERNAL - 104)) | (1L << (ENUM - 104)) | (1L << (SEALED - 104)) | (1L << (ANNOTATION - 104)) | (1L << (DATA - 104)) | (1L << (INNER - 104)) | (1L << (TAILREC - 104)) | (1L << (OPERATOR - 104)) | (1L << (INLINE - 104)) | (1L << (INFIX - 104)) | (1L << (EXTERNAL - 104)) | (1L << (SUSPEND - 104)) | (1L << (OVERRIDE - 104)) | (1L << (ABSTRACT - 104)) | (1L << (FINAL - 104)) | (1L << (OPEN - 104)) | (1L << (CONST - 104)) | (1L << (LATEINIT - 104)) | (1L << (VARARG - 104)) | (1L << (NOINLINE - 104)) | (1L << (CROSSINLINE - 104)) | (1L << (REIFIED - 104)) | (1L << (LabelReference - 104)))) != 0)) {
					{
					{
					State = 703;
					classMemberDeclaration();
					}
					}
					State = 708;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				break;
			}
			State = 714;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==NL) {
				{
				{
				State = 711;
				Match(NL);
				}
				}
				State = 716;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 717;
			Match(RCURL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EnumEntriesContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public EnumEntryContext[] enumEntry() {
			return GetRuleContexts<EnumEntryContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public EnumEntryContext enumEntry(int i) {
			return GetRuleContext<EnumEntryContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON() { return GetToken(KotlinParser.SEMICOLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NL() { return GetTokens(KotlinParser.NL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NL(int i) {
			return GetToken(KotlinParser.NL, i);
		}
		public EnumEntriesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enumEntries; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IKotlinParserListener typedListener = listener as IKotlinParserListener;
			if (typedListener != null) typedListener.EnterEnumEntries(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IKotlinParserListener typedListener = listener as IKotlinParserListener;
			if (typedListener != null) typedListener.ExitEnumEntries(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKotlinParserVisitor<TResult> typedVisitor = visitor as IKotlinParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEnumEntries(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EnumEntriesContext enumEntries() {
		EnumEntriesContext _localctx = new EnumEntriesContext(Context, State);
		EnterRule(_localctx, 48, RULE_enumEntries);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 726;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 719;
				enumEntry();
				State = 723;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,77,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 720;
						Match(NL);
						}
						} 
					}
					State = 725;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,77,Context);
				}
				}
				}
				State = 728;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( ((((_la - 58)) & ~0x3f) == 0 && ((1L << (_la - 58)) & ((1L << (IMPORT - 58)) | (1L << (CONSTRUCTOR - 58)) | (1L << (BY - 58)) | (1L << (COMPANION - 58)) | (1L << (INIT - 58)) | (1L << (WHERE - 58)) | (1L << (CATCH - 58)) | (1L << (FINALLY - 58)) | (1L << (OUT - 58)) | (1L << (GETTER - 58)) | (1L << (SETTER - 58)) | (1L << (DYNAMIC - 58)) | (1L << (PUBLIC - 58)) | (1L << (PRIVATE - 58)) | (1L << (PROTECTED - 58)) | (1L << (INTERNAL - 58)) | (1L << (ENUM - 58)) | (1L << (SEALED - 58)) | (1L << (ANNOTATION - 58)) | (1L << (DATA - 58)) | (1L << (INNER - 58)) | (1L << (TAILREC - 58)) | (1L << (OPERATOR - 58)) | (1L << (INLINE - 58)) | (1L << (INFIX - 58)) | (1L << (EXTERNAL - 58)) | (1L << (SUSPEND - 58)) | (1L << (OVERRIDE - 58)) | (1L << (ABSTRACT - 58)) | (1L << (FINAL - 58)))) != 0) || ((((_la - 122)) & ~0x3f) == 0 && ((1L << (_la - 122)) & ((1L << (OPEN - 122)) | (1L << (CONST - 122)) | (1L << (LATEINIT - 122)) | (1L << (VARARG - 122)) | (1L << (NOINLINE - 122)) | (1L << (CROSSINLINE - 122)) | (1L << (REIFIED - 122)) | (1L << (Identifier - 122)))) != 0) );
			State = 731;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,79,Context) ) {
			case 1:
				{
				State = 730;
				Match(SEMICOLON);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EnumEntryContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SimpleIdentifierContext simpleIdentifier() {
			return GetRuleContext<SimpleIdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ValueArgumentsContext valueArguments() {
			return GetRuleContext<ValueArgumentsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ClassBodyContext classBody() {
			return GetRuleContext<ClassBodyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA() { return GetToken(KotlinParser.COMMA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NL() { return GetTokens(KotlinParser.NL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NL(int i) {
			return GetToken(KotlinParser.NL, i);
		}
		public EnumEntryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enumEntry; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IKotlinParserListener typedListener = listener as IKotlinParserListener;
			if (typedListener != null) typedListener.EnterEnumEntry(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IKotlinParserListener typedListener = listener as IKotlinParserListener;
			if (typedListener != null) typedListener.ExitEnumEntry(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKotlinParserVisitor<TResult> typedVisitor = visitor as IKotlinParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEnumEntry(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EnumEntryContext enumEntry() {
		EnumEntryContext _localctx = new EnumEntryContext(Context, State);
		EnterRule(_localctx, 50, RULE_enumEntry);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 733;
			simpleIdentifier();
			State = 741;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,81,Context) ) {
			case 1:
				{
				State = 737;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==NL) {
					{
					{
					State = 734;
					Match(NL);
					}
					}
					State = 739;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 740;
				valueArguments();
				}
				break;
			}
			State = 750;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,83,Context) ) {
			case 1:
				{
				State = 746;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==NL) {
					{
					{
					State = 743;
					Match(NL);
					}
					}
					State = 748;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 749;
				classBody();
				}
				break;
			}
			State = 759;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,85,Context) ) {
			case 1:
				{
				State = 755;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==NL) {
					{
					{
					State = 752;
					Match(NL);
					}
					}
					State = 757;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 758;
				Match(COMMA);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FUN() { return GetToken(KotlinParser.FUN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FunctionValueParametersContext functionValueParameters() {
			return GetRuleContext<FunctionValueParametersContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ModifierListContext modifierList() {
			return GetRuleContext<ModifierListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext[] type() {
			return GetRuleContexts<TypeContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type(int i) {
			return GetRuleContext<TypeContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT() { return GetToken(KotlinParser.DOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeParametersContext typeParameters() {
			return GetRuleContext<TypeParametersContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NL() { return GetTokens(KotlinParser.NL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NL(int i) {
			return GetToken(KotlinParser.NL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(KotlinParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeConstraintsContext typeConstraints() {
			return GetRuleContext<TypeConstraintsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionBodyContext functionBody() {
			return GetRuleContext<FunctionBodyContext>(0);
		}
		public FunctionDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IKotlinParserListener typedListener = listener as IKotlinParserListener;
			if (typedListener != null) typedListener.EnterFunctionDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IKotlinParserListener typedListener = listener as IKotlinParserListener;
			if (typedListener != null) typedListener.ExitFunctionDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKotlinParserVisitor<TResult> typedVisitor = visitor as IKotlinParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionDeclarationContext functionDeclaration() {
		FunctionDeclarationContext _localctx = new FunctionDeclarationContext(Context, State);
		EnterRule(_localctx, 52, RULE_functionDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 762;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==AT || _la==FILE || ((((_la - 89)) & ~0x3f) == 0 && ((1L << (_la - 89)) & ((1L << (IN - 89)) | (1L << (OUT - 89)) | (1L << (FIELD - 89)) | (1L << (PROPERTY - 89)) | (1L << (GET - 89)) | (1L << (SET - 89)) | (1L << (RECEIVER - 89)) | (1L << (PARAM - 89)) | (1L << (SETPARAM - 89)) | (1L << (DELEGATE - 89)) | (1L << (PUBLIC - 89)) | (1L << (PRIVATE - 89)) | (1L << (PROTECTED - 89)) | (1L << (INTERNAL - 89)) | (1L << (ENUM - 89)) | (1L << (SEALED - 89)) | (1L << (ANNOTATION - 89)) | (1L << (DATA - 89)) | (1L << (INNER - 89)) | (1L << (TAILREC - 89)) | (1L << (OPERATOR - 89)) | (1L << (INLINE - 89)) | (1L << (INFIX - 89)) | (1L << (EXTERNAL - 89)) | (1L << (SUSPEND - 89)) | (1L << (OVERRIDE - 89)) | (1L << (ABSTRACT - 89)) | (1L << (FINAL - 89)) | (1L << (OPEN - 89)) | (1L << (CONST - 89)) | (1L << (LATEINIT - 89)) | (1L << (VARARG - 89)) | (1L << (NOINLINE - 89)) | (1L << (CROSSINLINE - 89)) | (1L << (REIFIED - 89)) | (1L << (LabelReference - 89)))) != 0)) {
				{
				State = 761;
				modifierList();
				}
			}

			State = 764;
			Match(FUN);
			State = 780;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,89,Context) ) {
			case 1:
				{
				State = 768;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==NL) {
					{
					{
					State = 765;
					Match(NL);
					}
					}
					State = 770;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 771;
				type();
				State = 775;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==NL) {
					{
					{
					State = 772;
					Match(NL);
					}
					}
					State = 777;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 778;
				Match(DOT);
				}
				break;
			}
			State = 789;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,91,Context) ) {
			case 1:
				{
				State = 785;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==NL) {
					{
					{
					State = 782;
					Match(NL);
					}
					}
					State = 787;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 788;
				typeParameters();
				}
				break;
			}
			State = 798;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,93,Context) ) {
			case 1:
				{
				State = 794;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==NL) {
					{
					{
					State = 791;
					Match(NL);
					}
					}
					State = 796;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 797;
				identifier();
				}
				break;
			}
			State = 803;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==NL) {
				{
				{
				State = 800;
				Match(NL);
				}
				}
				State = 805;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 806;
			functionValueParameters();
			State = 821;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,97,Context) ) {
			case 1:
				{
				State = 810;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==NL) {
					{
					{
					State = 807;
					Match(NL);
					}
					}
					State = 812;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 813;
				Match(COLON);
				State = 817;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==NL) {
					{
					{
					State = 814;
					Match(NL);
					}
					}
					State = 819;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 820;
				type();
				}
				break;
			}
			State = 830;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,99,Context) ) {
			case 1:
				{
				State = 826;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==NL) {
					{
					{
					State = 823;
					Match(NL);
					}
					}
					State = 828;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 829;
				typeConstraints();
				}
				break;
			}
			State = 839;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,101,Context) ) {
			case 1:
				{
				State = 835;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==NL) {
					{
					{
					State = 832;
					Match(NL);
					}
					}
					State = 837;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 838;
				functionBody();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionValueParametersContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(KotlinParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(KotlinParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FunctionValueParameterContext[] functionValueParameter() {
			return GetRuleContexts<FunctionValueParameterContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionValueParameterContext functionValueParameter(int i) {
			return GetRuleContext<FunctionValueParameterContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(KotlinParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(KotlinParser.COMMA, i);
		}
		public FunctionValueParametersContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionValueParameters; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IKotlinParserListener typedListener = listener as IKotlinParserListener;
			if (typedListener != null) typedListener.EnterFunctionValueParameters(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IKotlinParserListener typedListener = listener as IKotlinParserListener;
			if (typedListener != null) typedListener.ExitFunctionValueParameters(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKotlinParserVisitor<TResult> typedVisitor = visitor as IKotlinParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionValueParameters(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionValueParametersContext functionValueParameters() {
		FunctionValueParametersContext _localctx = new FunctionValueParametersContext(Context, State);
		EnterRule(_localctx, 54, RULE_functionValueParameters);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 841;
			Match(LPAREN);
			State = 850;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (((((_la - 40)) & ~0x3f) == 0 && ((1L << (_la - 40)) & ((1L << (AT - 40)) | (1L << (FILE - 40)) | (1L << (IMPORT - 40)) | (1L << (CONSTRUCTOR - 40)) | (1L << (BY - 40)) | (1L << (COMPANION - 40)) | (1L << (INIT - 40)) | (1L << (WHERE - 40)) | (1L << (CATCH - 40)) | (1L << (FINALLY - 40)) | (1L << (IN - 40)) | (1L << (OUT - 40)) | (1L << (FIELD - 40)) | (1L << (PROPERTY - 40)) | (1L << (GET - 40)) | (1L << (SET - 40)) | (1L << (GETTER - 40)) | (1L << (SETTER - 40)) | (1L << (RECEIVER - 40)) | (1L << (PARAM - 40)) | (1L << (SETPARAM - 40)) | (1L << (DELEGATE - 40)) | (1L << (DYNAMIC - 40)))) != 0) || ((((_la - 104)) & ~0x3f) == 0 && ((1L << (_la - 104)) & ((1L << (PUBLIC - 104)) | (1L << (PRIVATE - 104)) | (1L << (PROTECTED - 104)) | (1L << (INTERNAL - 104)) | (1L << (ENUM - 104)) | (1L << (SEALED - 104)) | (1L << (ANNOTATION - 104)) | (1L << (DATA - 104)) | (1L << (INNER - 104)) | (1L << (TAILREC - 104)) | (1L << (OPERATOR - 104)) | (1L << (INLINE - 104)) | (1L << (INFIX - 104)) | (1L << (EXTERNAL - 104)) | (1L << (SUSPEND - 104)) | (1L << (OVERRIDE - 104)) | (1L << (ABSTRACT - 104)) | (1L << (FINAL - 104)) | (1L << (OPEN - 104)) | (1L << (CONST - 104)) | (1L << (LATEINIT - 104)) | (1L << (VARARG - 104)) | (1L << (NOINLINE - 104)) | (1L << (CROSSINLINE - 104)) | (1L << (REIFIED - 104)) | (1L << (Identifier - 104)) | (1L << (LabelReference - 104)))) != 0)) {
				{
				State = 842;
				functionValueParameter();
				State = 847;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 843;
					Match(COMMA);
					State = 844;
					functionValueParameter();
					}
					}
					State = 849;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
			}

			State = 852;
			Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionValueParameterContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ParameterContext parameter() {
			return GetRuleContext<ParameterContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ModifierListContext modifierList() {
			return GetRuleContext<ModifierListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGNMENT() { return GetToken(KotlinParser.ASSIGNMENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public FunctionValueParameterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionValueParameter; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IKotlinParserListener typedListener = listener as IKotlinParserListener;
			if (typedListener != null) typedListener.EnterFunctionValueParameter(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IKotlinParserListener typedListener = listener as IKotlinParserListener;
			if (typedListener != null) typedListener.ExitFunctionValueParameter(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKotlinParserVisitor<TResult> typedVisitor = visitor as IKotlinParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionValueParameter(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionValueParameterContext functionValueParameter() {
		FunctionValueParameterContext _localctx = new FunctionValueParameterContext(Context, State);
		EnterRule(_localctx, 56, RULE_functionValueParameter);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 855;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,104,Context) ) {
			case 1:
				{
				State = 854;
				modifierList();
				}
				break;
			}
			State = 857;
			parameter();
			State = 860;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ASSIGNMENT) {
				{
				State = 858;
				Match(ASSIGNMENT);
				State = 859;
				expression();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParameterContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SimpleIdentifierContext simpleIdentifier() {
			return GetRuleContext<SimpleIdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(KotlinParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public ParameterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parameter; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IKotlinParserListener typedListener = listener as IKotlinParserListener;
			if (typedListener != null) typedListener.EnterParameter(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IKotlinParserListener typedListener = listener as IKotlinParserListener;
			if (typedListener != null) typedListener.ExitParameter(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKotlinParserVisitor<TResult> typedVisitor = visitor as IKotlinParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParameter(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ParameterContext parameter() {
		ParameterContext _localctx = new ParameterContext(Context, State);
		EnterRule(_localctx, 58, RULE_parameter);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 862;
			simpleIdentifier();
			State = 863;
			Match(COLON);
			State = 864;
			type();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionBodyContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGNMENT() { return GetToken(KotlinParser.ASSIGNMENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NL() { return GetTokens(KotlinParser.NL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NL(int i) {
			return GetToken(KotlinParser.NL, i);
		}
		public FunctionBodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionBody; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IKotlinParserListener typedListener = listener as IKotlinParserListener;
			if (typedListener != null) typedListener.EnterFunctionBody(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IKotlinParserListener typedListener = listener as IKotlinParserListener;
			if (typedListener != null) typedListener.ExitFunctionBody(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKotlinParserVisitor<TResult> typedVisitor = visitor as IKotlinParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionBody(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionBodyContext functionBody() {
		FunctionBodyContext _localctx = new FunctionBodyContext(Context, State);
		EnterRule(_localctx, 60, RULE_functionBody);
		try {
			int _alt;
			State = 875;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case LCURL:
				EnterOuterAlt(_localctx, 1);
				{
				State = 866;
				block();
				}
				break;
			case ASSIGNMENT:
				EnterOuterAlt(_localctx, 2);
				{
				State = 867;
				Match(ASSIGNMENT);
				State = 871;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,106,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 868;
						Match(NL);
						}
						} 
					}
					State = 873;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,106,Context);
				}
				State = 874;
				expression();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ObjectDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OBJECT() { return GetToken(KotlinParser.OBJECT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SimpleIdentifierContext simpleIdentifier() {
			return GetRuleContext<SimpleIdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ModifierListContext modifierList() {
			return GetRuleContext<ModifierListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NL() { return GetTokens(KotlinParser.NL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NL(int i) {
			return GetToken(KotlinParser.NL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PrimaryConstructorContext primaryConstructor() {
			return GetRuleContext<PrimaryConstructorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(KotlinParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public DelegationSpecifiersContext delegationSpecifiers() {
			return GetRuleContext<DelegationSpecifiersContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ClassBodyContext classBody() {
			return GetRuleContext<ClassBodyContext>(0);
		}
		public ObjectDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_objectDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IKotlinParserListener typedListener = listener as IKotlinParserListener;
			if (typedListener != null) typedListener.EnterObjectDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IKotlinParserListener typedListener = listener as IKotlinParserListener;
			if (typedListener != null) typedListener.ExitObjectDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKotlinParserVisitor<TResult> typedVisitor = visitor as IKotlinParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitObjectDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ObjectDeclarationContext objectDeclaration() {
		ObjectDeclarationContext _localctx = new ObjectDeclarationContext(Context, State);
		EnterRule(_localctx, 62, RULE_objectDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 878;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==AT || _la==FILE || ((((_la - 89)) & ~0x3f) == 0 && ((1L << (_la - 89)) & ((1L << (IN - 89)) | (1L << (OUT - 89)) | (1L << (FIELD - 89)) | (1L << (PROPERTY - 89)) | (1L << (GET - 89)) | (1L << (SET - 89)) | (1L << (RECEIVER - 89)) | (1L << (PARAM - 89)) | (1L << (SETPARAM - 89)) | (1L << (DELEGATE - 89)) | (1L << (PUBLIC - 89)) | (1L << (PRIVATE - 89)) | (1L << (PROTECTED - 89)) | (1L << (INTERNAL - 89)) | (1L << (ENUM - 89)) | (1L << (SEALED - 89)) | (1L << (ANNOTATION - 89)) | (1L << (DATA - 89)) | (1L << (INNER - 89)) | (1L << (TAILREC - 89)) | (1L << (OPERATOR - 89)) | (1L << (INLINE - 89)) | (1L << (INFIX - 89)) | (1L << (EXTERNAL - 89)) | (1L << (SUSPEND - 89)) | (1L << (OVERRIDE - 89)) | (1L << (ABSTRACT - 89)) | (1L << (FINAL - 89)) | (1L << (OPEN - 89)) | (1L << (CONST - 89)) | (1L << (LATEINIT - 89)) | (1L << (VARARG - 89)) | (1L << (NOINLINE - 89)) | (1L << (CROSSINLINE - 89)) | (1L << (REIFIED - 89)) | (1L << (LabelReference - 89)))) != 0)) {
				{
				State = 877;
				modifierList();
				}
			}

			State = 880;
			Match(OBJECT);
			State = 884;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==NL) {
				{
				{
				State = 881;
				Match(NL);
				}
				}
				State = 886;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 887;
			simpleIdentifier();
			State = 895;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,111,Context) ) {
			case 1:
				{
				State = 891;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==NL) {
					{
					{
					State = 888;
					Match(NL);
					}
					}
					State = 893;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 894;
				primaryConstructor();
				}
				break;
			}
			State = 911;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,114,Context) ) {
			case 1:
				{
				State = 900;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==NL) {
					{
					{
					State = 897;
					Match(NL);
					}
					}
					State = 902;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 903;
				Match(COLON);
				State = 907;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==NL) {
					{
					{
					State = 904;
					Match(NL);
					}
					}
					State = 909;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 910;
				delegationSpecifiers();
				}
				break;
			}
			State = 920;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,116,Context) ) {
			case 1:
				{
				State = 916;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==NL) {
					{
					{
					State = 913;
					Match(NL);
					}
					}
					State = 918;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 919;
				classBody();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CompanionObjectContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMPANION() { return GetToken(KotlinParser.COMPANION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OBJECT() { return GetToken(KotlinParser.OBJECT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ModifierListContext[] modifierList() {
			return GetRuleContexts<ModifierListContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ModifierListContext modifierList(int i) {
			return GetRuleContext<ModifierListContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NL() { return GetTokens(KotlinParser.NL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NL(int i) {
			return GetToken(KotlinParser.NL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SimpleIdentifierContext simpleIdentifier() {
			return GetRuleContext<SimpleIdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(KotlinParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public DelegationSpecifiersContext delegationSpecifiers() {
			return GetRuleContext<DelegationSpecifiersContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ClassBodyContext classBody() {
			return GetRuleContext<ClassBodyContext>(0);
		}
		public CompanionObjectContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_companionObject; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IKotlinParserListener typedListener = listener as IKotlinParserListener;
			if (typedListener != null) typedListener.EnterCompanionObject(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IKotlinParserListener typedListener = listener as IKotlinParserListener;
			if (typedListener != null) typedListener.ExitCompanionObject(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKotlinParserVisitor<TResult> typedVisitor = visitor as IKotlinParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCompanionObject(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CompanionObjectContext companionObject() {
		CompanionObjectContext _localctx = new CompanionObjectContext(Context, State);
		EnterRule(_localctx, 64, RULE_companionObject);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 923;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==AT || _la==FILE || ((((_la - 89)) & ~0x3f) == 0 && ((1L << (_la - 89)) & ((1L << (IN - 89)) | (1L << (OUT - 89)) | (1L << (FIELD - 89)) | (1L << (PROPERTY - 89)) | (1L << (GET - 89)) | (1L << (SET - 89)) | (1L << (RECEIVER - 89)) | (1L << (PARAM - 89)) | (1L << (SETPARAM - 89)) | (1L << (DELEGATE - 89)) | (1L << (PUBLIC - 89)) | (1L << (PRIVATE - 89)) | (1L << (PROTECTED - 89)) | (1L << (INTERNAL - 89)) | (1L << (ENUM - 89)) | (1L << (SEALED - 89)) | (1L << (ANNOTATION - 89)) | (1L << (DATA - 89)) | (1L << (INNER - 89)) | (1L << (TAILREC - 89)) | (1L << (OPERATOR - 89)) | (1L << (INLINE - 89)) | (1L << (INFIX - 89)) | (1L << (EXTERNAL - 89)) | (1L << (SUSPEND - 89)) | (1L << (OVERRIDE - 89)) | (1L << (ABSTRACT - 89)) | (1L << (FINAL - 89)) | (1L << (OPEN - 89)) | (1L << (CONST - 89)) | (1L << (LATEINIT - 89)) | (1L << (VARARG - 89)) | (1L << (NOINLINE - 89)) | (1L << (CROSSINLINE - 89)) | (1L << (REIFIED - 89)) | (1L << (LabelReference - 89)))) != 0)) {
				{
				State = 922;
				modifierList();
				}
			}

			State = 925;
			Match(COMPANION);
			State = 929;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==NL) {
				{
				{
				State = 926;
				Match(NL);
				}
				}
				State = 931;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 933;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==AT || _la==FILE || ((((_la - 89)) & ~0x3f) == 0 && ((1L << (_la - 89)) & ((1L << (IN - 89)) | (1L << (OUT - 89)) | (1L << (FIELD - 89)) | (1L << (PROPERTY - 89)) | (1L << (GET - 89)) | (1L << (SET - 89)) | (1L << (RECEIVER - 89)) | (1L << (PARAM - 89)) | (1L << (SETPARAM - 89)) | (1L << (DELEGATE - 89)) | (1L << (PUBLIC - 89)) | (1L << (PRIVATE - 89)) | (1L << (PROTECTED - 89)) | (1L << (INTERNAL - 89)) | (1L << (ENUM - 89)) | (1L << (SEALED - 89)) | (1L << (ANNOTATION - 89)) | (1L << (DATA - 89)) | (1L << (INNER - 89)) | (1L << (TAILREC - 89)) | (1L << (OPERATOR - 89)) | (1L << (INLINE - 89)) | (1L << (INFIX - 89)) | (1L << (EXTERNAL - 89)) | (1L << (SUSPEND - 89)) | (1L << (OVERRIDE - 89)) | (1L << (ABSTRACT - 89)) | (1L << (FINAL - 89)) | (1L << (OPEN - 89)) | (1L << (CONST - 89)) | (1L << (LATEINIT - 89)) | (1L << (VARARG - 89)) | (1L << (NOINLINE - 89)) | (1L << (CROSSINLINE - 89)) | (1L << (REIFIED - 89)) | (1L << (LabelReference - 89)))) != 0)) {
				{
				State = 932;
				modifierList();
				}
			}

			State = 935;
			Match(OBJECT);
			State = 943;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,121,Context) ) {
			case 1:
				{
				State = 939;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==NL) {
					{
					{
					State = 936;
					Match(NL);
					}
					}
					State = 941;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 942;
				simpleIdentifier();
				}
				break;
			}
			State = 959;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,124,Context) ) {
			case 1:
				{
				State = 948;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==NL) {
					{
					{
					State = 945;
					Match(NL);
					}
					}
					State = 950;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 951;
				Match(COLON);
				State = 955;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==NL) {
					{
					{
					State = 952;
					Match(NL);
					}
					}
					State = 957;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 958;
				delegationSpecifiers();
				}
				break;
			}
			State = 968;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,126,Context) ) {
			case 1:
				{
				State = 964;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==NL) {
					{
					{
					State = 961;
					Match(NL);
					}
					}
					State = 966;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 967;
				classBody();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PropertyDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VAL() { return GetToken(KotlinParser.VAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VAR() { return GetToken(KotlinParser.VAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ModifierListContext modifierList() {
			return GetRuleContext<ModifierListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeParametersContext typeParameters() {
			return GetRuleContext<TypeParametersContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT() { return GetToken(KotlinParser.DOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeConstraintsContext typeConstraints() {
			return GetRuleContext<TypeConstraintsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public GetterContext getter() {
			return GetRuleContext<GetterContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SetterContext setter() {
			return GetRuleContext<SetterContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MultiVariableDeclarationContext multiVariableDeclaration() {
			return GetRuleContext<MultiVariableDeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public VariableDeclarationContext variableDeclaration() {
			return GetRuleContext<VariableDeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BY() { return GetToken(KotlinParser.BY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGNMENT() { return GetToken(KotlinParser.ASSIGNMENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NL() { return GetTokens(KotlinParser.NL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NL(int i) {
			return GetToken(KotlinParser.NL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SemiContext semi() {
			return GetRuleContext<SemiContext>(0);
		}
		public PropertyDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_propertyDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IKotlinParserListener typedListener = listener as IKotlinParserListener;
			if (typedListener != null) typedListener.EnterPropertyDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IKotlinParserListener typedListener = listener as IKotlinParserListener;
			if (typedListener != null) typedListener.ExitPropertyDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKotlinParserVisitor<TResult> typedVisitor = visitor as IKotlinParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPropertyDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PropertyDeclarationContext propertyDeclaration() {
		PropertyDeclarationContext _localctx = new PropertyDeclarationContext(Context, State);
		EnterRule(_localctx, 66, RULE_propertyDeclaration);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 971;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==AT || _la==FILE || ((((_la - 89)) & ~0x3f) == 0 && ((1L << (_la - 89)) & ((1L << (IN - 89)) | (1L << (OUT - 89)) | (1L << (FIELD - 89)) | (1L << (PROPERTY - 89)) | (1L << (GET - 89)) | (1L << (SET - 89)) | (1L << (RECEIVER - 89)) | (1L << (PARAM - 89)) | (1L << (SETPARAM - 89)) | (1L << (DELEGATE - 89)) | (1L << (PUBLIC - 89)) | (1L << (PRIVATE - 89)) | (1L << (PROTECTED - 89)) | (1L << (INTERNAL - 89)) | (1L << (ENUM - 89)) | (1L << (SEALED - 89)) | (1L << (ANNOTATION - 89)) | (1L << (DATA - 89)) | (1L << (INNER - 89)) | (1L << (TAILREC - 89)) | (1L << (OPERATOR - 89)) | (1L << (INLINE - 89)) | (1L << (INFIX - 89)) | (1L << (EXTERNAL - 89)) | (1L << (SUSPEND - 89)) | (1L << (OVERRIDE - 89)) | (1L << (ABSTRACT - 89)) | (1L << (FINAL - 89)) | (1L << (OPEN - 89)) | (1L << (CONST - 89)) | (1L << (LATEINIT - 89)) | (1L << (VARARG - 89)) | (1L << (NOINLINE - 89)) | (1L << (CROSSINLINE - 89)) | (1L << (REIFIED - 89)) | (1L << (LabelReference - 89)))) != 0)) {
				{
				State = 970;
				modifierList();
				}
			}

			State = 973;
			_la = TokenStream.LA(1);
			if ( !(_la==VAL || _la==VAR) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 981;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,129,Context) ) {
			case 1:
				{
				State = 977;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==NL) {
					{
					{
					State = 974;
					Match(NL);
					}
					}
					State = 979;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 980;
				typeParameters();
				}
				break;
			}
			State = 998;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,132,Context) ) {
			case 1:
				{
				State = 986;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==NL) {
					{
					{
					State = 983;
					Match(NL);
					}
					}
					State = 988;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 989;
				type();
				State = 993;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==NL) {
					{
					{
					State = 990;
					Match(NL);
					}
					}
					State = 995;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 996;
				Match(DOT);
				}
				break;
			}
			{
			State = 1003;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==NL) {
				{
				{
				State = 1000;
				Match(NL);
				}
				}
				State = 1005;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 1008;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case LPAREN:
				{
				State = 1006;
				multiVariableDeclaration();
				}
				break;
			case IMPORT:
			case CONSTRUCTOR:
			case BY:
			case COMPANION:
			case INIT:
			case WHERE:
			case CATCH:
			case FINALLY:
			case OUT:
			case GETTER:
			case SETTER:
			case DYNAMIC:
			case PUBLIC:
			case PRIVATE:
			case PROTECTED:
			case INTERNAL:
			case ENUM:
			case SEALED:
			case ANNOTATION:
			case DATA:
			case INNER:
			case TAILREC:
			case OPERATOR:
			case INLINE:
			case INFIX:
			case EXTERNAL:
			case SUSPEND:
			case OVERRIDE:
			case ABSTRACT:
			case FINAL:
			case OPEN:
			case CONST:
			case LATEINIT:
			case VARARG:
			case NOINLINE:
			case CROSSINLINE:
			case REIFIED:
			case Identifier:
				{
				State = 1007;
				variableDeclaration();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
			State = 1017;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,136,Context) ) {
			case 1:
				{
				State = 1013;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==NL) {
					{
					{
					State = 1010;
					Match(NL);
					}
					}
					State = 1015;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 1016;
				typeConstraints();
				}
				break;
			}
			State = 1033;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,139,Context) ) {
			case 1:
				{
				State = 1022;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==NL) {
					{
					{
					State = 1019;
					Match(NL);
					}
					}
					State = 1024;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 1025;
				_la = TokenStream.LA(1);
				if ( !(_la==ASSIGNMENT || _la==BY) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 1029;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,138,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 1026;
						Match(NL);
						}
						} 
					}
					State = 1031;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,138,Context);
				}
				State = 1032;
				expression();
				}
				break;
			}
			State = 1047;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,142,Context) ) {
			case 1:
				{
				State = 1035;
				getter();
				State = 1039;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,140,Context) ) {
				case 1:
					{
					State = 1036;
					semi();
					State = 1037;
					setter();
					}
					break;
				}
				}
				break;
			case 2:
				{
				State = 1041;
				setter();
				State = 1045;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,141,Context) ) {
				case 1:
					{
					State = 1042;
					semi();
					State = 1043;
					getter();
					}
					break;
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MultiVariableDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(KotlinParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public VariableDeclarationContext[] variableDeclaration() {
			return GetRuleContexts<VariableDeclarationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public VariableDeclarationContext variableDeclaration(int i) {
			return GetRuleContext<VariableDeclarationContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(KotlinParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(KotlinParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(KotlinParser.COMMA, i);
		}
		public MultiVariableDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_multiVariableDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IKotlinParserListener typedListener = listener as IKotlinParserListener;
			if (typedListener != null) typedListener.EnterMultiVariableDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IKotlinParserListener typedListener = listener as IKotlinParserListener;
			if (typedListener != null) typedListener.ExitMultiVariableDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKotlinParserVisitor<TResult> typedVisitor = visitor as IKotlinParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMultiVariableDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MultiVariableDeclarationContext multiVariableDeclaration() {
		MultiVariableDeclarationContext _localctx = new MultiVariableDeclarationContext(Context, State);
		EnterRule(_localctx, 68, RULE_multiVariableDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1049;
			Match(LPAREN);
			State = 1050;
			variableDeclaration();
			State = 1055;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 1051;
				Match(COMMA);
				State = 1052;
				variableDeclaration();
				}
				}
				State = 1057;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 1058;
			Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariableDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SimpleIdentifierContext simpleIdentifier() {
			return GetRuleContext<SimpleIdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(KotlinParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public VariableDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variableDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IKotlinParserListener typedListener = listener as IKotlinParserListener;
			if (typedListener != null) typedListener.EnterVariableDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IKotlinParserListener typedListener = listener as IKotlinParserListener;
			if (typedListener != null) typedListener.ExitVariableDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKotlinParserVisitor<TResult> typedVisitor = visitor as IKotlinParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariableDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VariableDeclarationContext variableDeclaration() {
		VariableDeclarationContext _localctx = new VariableDeclarationContext(Context, State);
		EnterRule(_localctx, 70, RULE_variableDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1060;
			simpleIdentifier();
			State = 1063;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==COLON) {
				{
				State = 1061;
				Match(COLON);
				State = 1062;
				type();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GetterContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GETTER() { return GetToken(KotlinParser.GETTER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ModifierListContext modifierList() {
			return GetRuleContext<ModifierListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(KotlinParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(KotlinParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGNMENT() { return GetToken(KotlinParser.ASSIGNMENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NL() { return GetTokens(KotlinParser.NL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NL(int i) {
			return GetToken(KotlinParser.NL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(KotlinParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public GetterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_getter; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IKotlinParserListener typedListener = listener as IKotlinParserListener;
			if (typedListener != null) typedListener.EnterGetter(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IKotlinParserListener typedListener = listener as IKotlinParserListener;
			if (typedListener != null) typedListener.ExitGetter(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKotlinParserVisitor<TResult> typedVisitor = visitor as IKotlinParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGetter(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public GetterContext getter() {
		GetterContext _localctx = new GetterContext(Context, State);
		EnterRule(_localctx, 72, RULE_getter);
		int _la;
		try {
			int _alt;
			State = 1114;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,154,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1066;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==AT || _la==FILE || ((((_la - 89)) & ~0x3f) == 0 && ((1L << (_la - 89)) & ((1L << (IN - 89)) | (1L << (OUT - 89)) | (1L << (FIELD - 89)) | (1L << (PROPERTY - 89)) | (1L << (GET - 89)) | (1L << (SET - 89)) | (1L << (RECEIVER - 89)) | (1L << (PARAM - 89)) | (1L << (SETPARAM - 89)) | (1L << (DELEGATE - 89)) | (1L << (PUBLIC - 89)) | (1L << (PRIVATE - 89)) | (1L << (PROTECTED - 89)) | (1L << (INTERNAL - 89)) | (1L << (ENUM - 89)) | (1L << (SEALED - 89)) | (1L << (ANNOTATION - 89)) | (1L << (DATA - 89)) | (1L << (INNER - 89)) | (1L << (TAILREC - 89)) | (1L << (OPERATOR - 89)) | (1L << (INLINE - 89)) | (1L << (INFIX - 89)) | (1L << (EXTERNAL - 89)) | (1L << (SUSPEND - 89)) | (1L << (OVERRIDE - 89)) | (1L << (ABSTRACT - 89)) | (1L << (FINAL - 89)) | (1L << (OPEN - 89)) | (1L << (CONST - 89)) | (1L << (LATEINIT - 89)) | (1L << (VARARG - 89)) | (1L << (NOINLINE - 89)) | (1L << (CROSSINLINE - 89)) | (1L << (REIFIED - 89)) | (1L << (LabelReference - 89)))) != 0)) {
					{
					State = 1065;
					modifierList();
					}
				}

				State = 1068;
				Match(GETTER);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1070;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==AT || _la==FILE || ((((_la - 89)) & ~0x3f) == 0 && ((1L << (_la - 89)) & ((1L << (IN - 89)) | (1L << (OUT - 89)) | (1L << (FIELD - 89)) | (1L << (PROPERTY - 89)) | (1L << (GET - 89)) | (1L << (SET - 89)) | (1L << (RECEIVER - 89)) | (1L << (PARAM - 89)) | (1L << (SETPARAM - 89)) | (1L << (DELEGATE - 89)) | (1L << (PUBLIC - 89)) | (1L << (PRIVATE - 89)) | (1L << (PROTECTED - 89)) | (1L << (INTERNAL - 89)) | (1L << (ENUM - 89)) | (1L << (SEALED - 89)) | (1L << (ANNOTATION - 89)) | (1L << (DATA - 89)) | (1L << (INNER - 89)) | (1L << (TAILREC - 89)) | (1L << (OPERATOR - 89)) | (1L << (INLINE - 89)) | (1L << (INFIX - 89)) | (1L << (EXTERNAL - 89)) | (1L << (SUSPEND - 89)) | (1L << (OVERRIDE - 89)) | (1L << (ABSTRACT - 89)) | (1L << (FINAL - 89)) | (1L << (OPEN - 89)) | (1L << (CONST - 89)) | (1L << (LATEINIT - 89)) | (1L << (VARARG - 89)) | (1L << (NOINLINE - 89)) | (1L << (CROSSINLINE - 89)) | (1L << (REIFIED - 89)) | (1L << (LabelReference - 89)))) != 0)) {
					{
					State = 1069;
					modifierList();
					}
				}

				State = 1072;
				Match(GETTER);
				State = 1076;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==NL) {
					{
					{
					State = 1073;
					Match(NL);
					}
					}
					State = 1078;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 1079;
				Match(LPAREN);
				State = 1080;
				Match(RPAREN);
				State = 1095;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,150,Context) ) {
				case 1:
					{
					State = 1084;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (_la==NL) {
						{
						{
						State = 1081;
						Match(NL);
						}
						}
						State = 1086;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					State = 1087;
					Match(COLON);
					State = 1091;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (_la==NL) {
						{
						{
						State = 1088;
						Match(NL);
						}
						}
						State = 1093;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					State = 1094;
					type();
					}
					break;
				}
				State = 1100;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==NL) {
					{
					{
					State = 1097;
					Match(NL);
					}
					}
					State = 1102;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 1112;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case LCURL:
					{
					State = 1103;
					block();
					}
					break;
				case ASSIGNMENT:
					{
					State = 1104;
					Match(ASSIGNMENT);
					State = 1108;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,152,Context);
					while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
						if ( _alt==1 ) {
							{
							{
							State = 1105;
							Match(NL);
							}
							} 
						}
						State = 1110;
						ErrorHandler.Sync(this);
						_alt = Interpreter.AdaptivePredict(TokenStream,152,Context);
					}
					State = 1111;
					expression();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SetterContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SETTER() { return GetToken(KotlinParser.SETTER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ModifierListContext modifierList() {
			return GetRuleContext<ModifierListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(KotlinParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(KotlinParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FunctionBodyContext functionBody() {
			return GetRuleContext<FunctionBodyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SimpleIdentifierContext simpleIdentifier() {
			return GetRuleContext<SimpleIdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ParameterContext parameter() {
			return GetRuleContext<ParameterContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NL() { return GetTokens(KotlinParser.NL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NL(int i) {
			return GetToken(KotlinParser.NL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AnnotationsContext[] annotations() {
			return GetRuleContexts<AnnotationsContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AnnotationsContext annotations(int i) {
			return GetRuleContext<AnnotationsContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ParameterModifierContext[] parameterModifier() {
			return GetRuleContexts<ParameterModifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ParameterModifierContext parameterModifier(int i) {
			return GetRuleContext<ParameterModifierContext>(i);
		}
		public SetterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_setter; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IKotlinParserListener typedListener = listener as IKotlinParserListener;
			if (typedListener != null) typedListener.EnterSetter(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IKotlinParserListener typedListener = listener as IKotlinParserListener;
			if (typedListener != null) typedListener.ExitSetter(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKotlinParserVisitor<TResult> typedVisitor = visitor as IKotlinParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSetter(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SetterContext setter() {
		SetterContext _localctx = new SetterContext(Context, State);
		EnterRule(_localctx, 74, RULE_setter);
		int _la;
		try {
			int _alt;
			State = 1151;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,162,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1117;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==AT || _la==FILE || ((((_la - 89)) & ~0x3f) == 0 && ((1L << (_la - 89)) & ((1L << (IN - 89)) | (1L << (OUT - 89)) | (1L << (FIELD - 89)) | (1L << (PROPERTY - 89)) | (1L << (GET - 89)) | (1L << (SET - 89)) | (1L << (RECEIVER - 89)) | (1L << (PARAM - 89)) | (1L << (SETPARAM - 89)) | (1L << (DELEGATE - 89)) | (1L << (PUBLIC - 89)) | (1L << (PRIVATE - 89)) | (1L << (PROTECTED - 89)) | (1L << (INTERNAL - 89)) | (1L << (ENUM - 89)) | (1L << (SEALED - 89)) | (1L << (ANNOTATION - 89)) | (1L << (DATA - 89)) | (1L << (INNER - 89)) | (1L << (TAILREC - 89)) | (1L << (OPERATOR - 89)) | (1L << (INLINE - 89)) | (1L << (INFIX - 89)) | (1L << (EXTERNAL - 89)) | (1L << (SUSPEND - 89)) | (1L << (OVERRIDE - 89)) | (1L << (ABSTRACT - 89)) | (1L << (FINAL - 89)) | (1L << (OPEN - 89)) | (1L << (CONST - 89)) | (1L << (LATEINIT - 89)) | (1L << (VARARG - 89)) | (1L << (NOINLINE - 89)) | (1L << (CROSSINLINE - 89)) | (1L << (REIFIED - 89)) | (1L << (LabelReference - 89)))) != 0)) {
					{
					State = 1116;
					modifierList();
					}
				}

				State = 1119;
				Match(SETTER);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1121;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==AT || _la==FILE || ((((_la - 89)) & ~0x3f) == 0 && ((1L << (_la - 89)) & ((1L << (IN - 89)) | (1L << (OUT - 89)) | (1L << (FIELD - 89)) | (1L << (PROPERTY - 89)) | (1L << (GET - 89)) | (1L << (SET - 89)) | (1L << (RECEIVER - 89)) | (1L << (PARAM - 89)) | (1L << (SETPARAM - 89)) | (1L << (DELEGATE - 89)) | (1L << (PUBLIC - 89)) | (1L << (PRIVATE - 89)) | (1L << (PROTECTED - 89)) | (1L << (INTERNAL - 89)) | (1L << (ENUM - 89)) | (1L << (SEALED - 89)) | (1L << (ANNOTATION - 89)) | (1L << (DATA - 89)) | (1L << (INNER - 89)) | (1L << (TAILREC - 89)) | (1L << (OPERATOR - 89)) | (1L << (INLINE - 89)) | (1L << (INFIX - 89)) | (1L << (EXTERNAL - 89)) | (1L << (SUSPEND - 89)) | (1L << (OVERRIDE - 89)) | (1L << (ABSTRACT - 89)) | (1L << (FINAL - 89)) | (1L << (OPEN - 89)) | (1L << (CONST - 89)) | (1L << (LATEINIT - 89)) | (1L << (VARARG - 89)) | (1L << (NOINLINE - 89)) | (1L << (CROSSINLINE - 89)) | (1L << (REIFIED - 89)) | (1L << (LabelReference - 89)))) != 0)) {
					{
					State = 1120;
					modifierList();
					}
				}

				State = 1123;
				Match(SETTER);
				State = 1127;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==NL) {
					{
					{
					State = 1124;
					Match(NL);
					}
					}
					State = 1129;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 1130;
				Match(LPAREN);
				State = 1135;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,159,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						State = 1133;
						ErrorHandler.Sync(this);
						switch (TokenStream.LA(1)) {
						case AT:
						case FILE:
						case FIELD:
						case PROPERTY:
						case GET:
						case SET:
						case RECEIVER:
						case PARAM:
						case SETPARAM:
						case DELEGATE:
						case LabelReference:
							{
							State = 1131;
							annotations();
							}
							break;
						case VARARG:
						case NOINLINE:
						case CROSSINLINE:
							{
							State = 1132;
							parameterModifier();
							}
							break;
						default:
							throw new NoViableAltException(this);
						}
						} 
					}
					State = 1137;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,159,Context);
				}
				State = 1140;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,160,Context) ) {
				case 1:
					{
					State = 1138;
					simpleIdentifier();
					}
					break;
				case 2:
					{
					State = 1139;
					parameter();
					}
					break;
				}
				State = 1142;
				Match(RPAREN);
				State = 1146;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==NL) {
					{
					{
					State = 1143;
					Match(NL);
					}
					}
					State = 1148;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 1149;
				functionBody();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeAliasContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TYPE_ALIAS() { return GetToken(KotlinParser.TYPE_ALIAS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SimpleIdentifierContext simpleIdentifier() {
			return GetRuleContext<SimpleIdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGNMENT() { return GetToken(KotlinParser.ASSIGNMENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ModifierListContext modifierList() {
			return GetRuleContext<ModifierListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NL() { return GetTokens(KotlinParser.NL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NL(int i) {
			return GetToken(KotlinParser.NL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeParametersContext typeParameters() {
			return GetRuleContext<TypeParametersContext>(0);
		}
		public TypeAliasContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeAlias; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IKotlinParserListener typedListener = listener as IKotlinParserListener;
			if (typedListener != null) typedListener.EnterTypeAlias(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IKotlinParserListener typedListener = listener as IKotlinParserListener;
			if (typedListener != null) typedListener.ExitTypeAlias(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKotlinParserVisitor<TResult> typedVisitor = visitor as IKotlinParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeAlias(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeAliasContext typeAlias() {
		TypeAliasContext _localctx = new TypeAliasContext(Context, State);
		EnterRule(_localctx, 76, RULE_typeAlias);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1154;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==AT || _la==FILE || ((((_la - 89)) & ~0x3f) == 0 && ((1L << (_la - 89)) & ((1L << (IN - 89)) | (1L << (OUT - 89)) | (1L << (FIELD - 89)) | (1L << (PROPERTY - 89)) | (1L << (GET - 89)) | (1L << (SET - 89)) | (1L << (RECEIVER - 89)) | (1L << (PARAM - 89)) | (1L << (SETPARAM - 89)) | (1L << (DELEGATE - 89)) | (1L << (PUBLIC - 89)) | (1L << (PRIVATE - 89)) | (1L << (PROTECTED - 89)) | (1L << (INTERNAL - 89)) | (1L << (ENUM - 89)) | (1L << (SEALED - 89)) | (1L << (ANNOTATION - 89)) | (1L << (DATA - 89)) | (1L << (INNER - 89)) | (1L << (TAILREC - 89)) | (1L << (OPERATOR - 89)) | (1L << (INLINE - 89)) | (1L << (INFIX - 89)) | (1L << (EXTERNAL - 89)) | (1L << (SUSPEND - 89)) | (1L << (OVERRIDE - 89)) | (1L << (ABSTRACT - 89)) | (1L << (FINAL - 89)) | (1L << (OPEN - 89)) | (1L << (CONST - 89)) | (1L << (LATEINIT - 89)) | (1L << (VARARG - 89)) | (1L << (NOINLINE - 89)) | (1L << (CROSSINLINE - 89)) | (1L << (REIFIED - 89)) | (1L << (LabelReference - 89)))) != 0)) {
				{
				State = 1153;
				modifierList();
				}
			}

			State = 1156;
			Match(TYPE_ALIAS);
			State = 1160;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==NL) {
				{
				{
				State = 1157;
				Match(NL);
				}
				}
				State = 1162;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 1163;
			simpleIdentifier();
			State = 1171;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,166,Context) ) {
			case 1:
				{
				State = 1167;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==NL) {
					{
					{
					State = 1164;
					Match(NL);
					}
					}
					State = 1169;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 1170;
				typeParameters();
				}
				break;
			}
			State = 1176;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==NL) {
				{
				{
				State = 1173;
				Match(NL);
				}
				}
				State = 1178;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 1179;
			Match(ASSIGNMENT);
			State = 1183;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==NL) {
				{
				{
				State = 1180;
				Match(NL);
				}
				}
				State = 1185;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 1186;
			type();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeParametersContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LANGLE() { return GetToken(KotlinParser.LANGLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeParameterContext[] typeParameter() {
			return GetRuleContexts<TypeParameterContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeParameterContext typeParameter(int i) {
			return GetRuleContext<TypeParameterContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RANGLE() { return GetToken(KotlinParser.RANGLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NL() { return GetTokens(KotlinParser.NL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NL(int i) {
			return GetToken(KotlinParser.NL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(KotlinParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(KotlinParser.COMMA, i);
		}
		public TypeParametersContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeParameters; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IKotlinParserListener typedListener = listener as IKotlinParserListener;
			if (typedListener != null) typedListener.EnterTypeParameters(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IKotlinParserListener typedListener = listener as IKotlinParserListener;
			if (typedListener != null) typedListener.ExitTypeParameters(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKotlinParserVisitor<TResult> typedVisitor = visitor as IKotlinParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeParameters(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeParametersContext typeParameters() {
		TypeParametersContext _localctx = new TypeParametersContext(Context, State);
		EnterRule(_localctx, 78, RULE_typeParameters);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1188;
			Match(LANGLE);
			State = 1192;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,169,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 1189;
					Match(NL);
					}
					} 
				}
				State = 1194;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,169,Context);
			}
			State = 1195;
			typeParameter();
			State = 1212;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,172,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 1199;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (_la==NL) {
						{
						{
						State = 1196;
						Match(NL);
						}
						}
						State = 1201;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					State = 1202;
					Match(COMMA);
					State = 1206;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,171,Context);
					while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
						if ( _alt==1 ) {
							{
							{
							State = 1203;
							Match(NL);
							}
							} 
						}
						State = 1208;
						ErrorHandler.Sync(this);
						_alt = Interpreter.AdaptivePredict(TokenStream,171,Context);
					}
					State = 1209;
					typeParameter();
					}
					} 
				}
				State = 1214;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,172,Context);
			}
			State = 1218;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==NL) {
				{
				{
				State = 1215;
				Match(NL);
				}
				}
				State = 1220;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 1221;
			Match(RANGLE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeParameterContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SimpleIdentifierContext simpleIdentifier() {
			return GetRuleContext<SimpleIdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ModifierListContext modifierList() {
			return GetRuleContext<ModifierListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NL() { return GetTokens(KotlinParser.NL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NL(int i) {
			return GetToken(KotlinParser.NL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(KotlinParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public TypeParameterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeParameter; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IKotlinParserListener typedListener = listener as IKotlinParserListener;
			if (typedListener != null) typedListener.EnterTypeParameter(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IKotlinParserListener typedListener = listener as IKotlinParserListener;
			if (typedListener != null) typedListener.ExitTypeParameter(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKotlinParserVisitor<TResult> typedVisitor = visitor as IKotlinParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeParameter(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeParameterContext typeParameter() {
		TypeParameterContext _localctx = new TypeParameterContext(Context, State);
		EnterRule(_localctx, 80, RULE_typeParameter);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1224;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,174,Context) ) {
			case 1:
				{
				State = 1223;
				modifierList();
				}
				break;
			}
			State = 1229;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==NL) {
				{
				{
				State = 1226;
				Match(NL);
				}
				}
				State = 1231;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 1232;
			simpleIdentifier();
			State = 1247;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,178,Context) ) {
			case 1:
				{
				State = 1236;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==NL) {
					{
					{
					State = 1233;
					Match(NL);
					}
					}
					State = 1238;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 1239;
				Match(COLON);
				State = 1243;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==NL) {
					{
					{
					State = 1240;
					Match(NL);
					}
					}
					State = 1245;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 1246;
				type();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FunctionTypeContext functionType() {
			return GetRuleContext<FunctionTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ParenthesizedTypeContext parenthesizedType() {
			return GetRuleContext<ParenthesizedTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NullableTypeContext nullableType() {
			return GetRuleContext<NullableTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeReferenceContext typeReference() {
			return GetRuleContext<TypeReferenceContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeModifierListContext typeModifierList() {
			return GetRuleContext<TypeModifierListContext>(0);
		}
		public TypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IKotlinParserListener typedListener = listener as IKotlinParserListener;
			if (typedListener != null) typedListener.EnterType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IKotlinParserListener typedListener = listener as IKotlinParserListener;
			if (typedListener != null) typedListener.ExitType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKotlinParserVisitor<TResult> typedVisitor = visitor as IKotlinParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeContext type() {
		TypeContext _localctx = new TypeContext(Context, State);
		EnterRule(_localctx, 82, RULE_type);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1250;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,179,Context) ) {
			case 1:
				{
				State = 1249;
				typeModifierList();
				}
				break;
			}
			State = 1256;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,180,Context) ) {
			case 1:
				{
				State = 1252;
				functionType();
				}
				break;
			case 2:
				{
				State = 1253;
				parenthesizedType();
				}
				break;
			case 3:
				{
				State = 1254;
				nullableType();
				}
				break;
			case 4:
				{
				State = 1255;
				typeReference();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeModifierListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public AnnotationsContext[] annotations() {
			return GetRuleContexts<AnnotationsContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AnnotationsContext annotations(int i) {
			return GetRuleContext<AnnotationsContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SUSPEND() { return GetTokens(KotlinParser.SUSPEND); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SUSPEND(int i) {
			return GetToken(KotlinParser.SUSPEND, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NL() { return GetTokens(KotlinParser.NL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NL(int i) {
			return GetToken(KotlinParser.NL, i);
		}
		public TypeModifierListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeModifierList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IKotlinParserListener typedListener = listener as IKotlinParserListener;
			if (typedListener != null) typedListener.EnterTypeModifierList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IKotlinParserListener typedListener = listener as IKotlinParserListener;
			if (typedListener != null) typedListener.ExitTypeModifierList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKotlinParserVisitor<TResult> typedVisitor = visitor as IKotlinParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeModifierList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeModifierListContext typeModifierList() {
		TypeModifierListContext _localctx = new TypeModifierListContext(Context, State);
		EnterRule(_localctx, 84, RULE_typeModifierList);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1266;
			ErrorHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					State = 1266;
					ErrorHandler.Sync(this);
					switch (TokenStream.LA(1)) {
					case AT:
					case FILE:
					case FIELD:
					case PROPERTY:
					case GET:
					case SET:
					case RECEIVER:
					case PARAM:
					case SETPARAM:
					case DELEGATE:
					case LabelReference:
						{
						State = 1258;
						annotations();
						}
						break;
					case SUSPEND:
						{
						State = 1259;
						Match(SUSPEND);
						State = 1263;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						while (_la==NL) {
							{
							{
							State = 1260;
							Match(NL);
							}
							}
							State = 1265;
							ErrorHandler.Sync(this);
							_la = TokenStream.LA(1);
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 1268;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,183,Context);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParenthesizedTypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(KotlinParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(KotlinParser.RPAREN, 0); }
		public ParenthesizedTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parenthesizedType; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IKotlinParserListener typedListener = listener as IKotlinParserListener;
			if (typedListener != null) typedListener.EnterParenthesizedType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IKotlinParserListener typedListener = listener as IKotlinParserListener;
			if (typedListener != null) typedListener.ExitParenthesizedType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKotlinParserVisitor<TResult> typedVisitor = visitor as IKotlinParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParenthesizedType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ParenthesizedTypeContext parenthesizedType() {
		ParenthesizedTypeContext _localctx = new ParenthesizedTypeContext(Context, State);
		EnterRule(_localctx, 86, RULE_parenthesizedType);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1270;
			Match(LPAREN);
			State = 1271;
			type();
			State = 1272;
			Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NullableTypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypeReferenceContext typeReference() {
			return GetRuleContext<TypeReferenceContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ParenthesizedTypeContext parenthesizedType() {
			return GetRuleContext<ParenthesizedTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NL() { return GetTokens(KotlinParser.NL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NL(int i) {
			return GetToken(KotlinParser.NL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] QUEST() { return GetTokens(KotlinParser.QUEST); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode QUEST(int i) {
			return GetToken(KotlinParser.QUEST, i);
		}
		public NullableTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_nullableType; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IKotlinParserListener typedListener = listener as IKotlinParserListener;
			if (typedListener != null) typedListener.EnterNullableType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IKotlinParserListener typedListener = listener as IKotlinParserListener;
			if (typedListener != null) typedListener.ExitNullableType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKotlinParserVisitor<TResult> typedVisitor = visitor as IKotlinParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNullableType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NullableTypeContext nullableType() {
		NullableTypeContext _localctx = new NullableTypeContext(Context, State);
		EnterRule(_localctx, 88, RULE_nullableType);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1276;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,184,Context) ) {
			case 1:
				{
				State = 1274;
				typeReference();
				}
				break;
			case 2:
				{
				State = 1275;
				parenthesizedType();
				}
				break;
			}
			State = 1281;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==NL) {
				{
				{
				State = 1278;
				Match(NL);
				}
				}
				State = 1283;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 1285;
			ErrorHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 1284;
					Match(QUEST);
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 1287;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,186,Context);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeReferenceContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(KotlinParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeReferenceContext typeReference() {
			return GetRuleContext<TypeReferenceContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(KotlinParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UserTypeContext userType() {
			return GetRuleContext<UserTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DYNAMIC() { return GetToken(KotlinParser.DYNAMIC, 0); }
		public TypeReferenceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeReference; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IKotlinParserListener typedListener = listener as IKotlinParserListener;
			if (typedListener != null) typedListener.EnterTypeReference(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IKotlinParserListener typedListener = listener as IKotlinParserListener;
			if (typedListener != null) typedListener.ExitTypeReference(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKotlinParserVisitor<TResult> typedVisitor = visitor as IKotlinParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeReference(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeReferenceContext typeReference() {
		TypeReferenceContext _localctx = new TypeReferenceContext(Context, State);
		EnterRule(_localctx, 90, RULE_typeReference);
		try {
			State = 1295;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,187,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1289;
				Match(LPAREN);
				State = 1290;
				typeReference();
				State = 1291;
				Match(RPAREN);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1293;
				userType();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1294;
				Match(DYNAMIC);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionTypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FunctionTypeParametersContext functionTypeParameters() {
			return GetRuleContext<FunctionTypeParametersContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ARROW() { return GetToken(KotlinParser.ARROW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionTypeReceiverContext functionTypeReceiver() {
			return GetRuleContext<FunctionTypeReceiverContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT() { return GetToken(KotlinParser.DOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NL() { return GetTokens(KotlinParser.NL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NL(int i) {
			return GetToken(KotlinParser.NL, i);
		}
		public FunctionTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionType; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IKotlinParserListener typedListener = listener as IKotlinParserListener;
			if (typedListener != null) typedListener.EnterFunctionType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IKotlinParserListener typedListener = listener as IKotlinParserListener;
			if (typedListener != null) typedListener.ExitFunctionType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKotlinParserVisitor<TResult> typedVisitor = visitor as IKotlinParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionTypeContext functionType() {
		FunctionTypeContext _localctx = new FunctionTypeContext(Context, State);
		EnterRule(_localctx, 92, RULE_functionType);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1311;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,190,Context) ) {
			case 1:
				{
				State = 1297;
				functionTypeReceiver();
				State = 1301;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==NL) {
					{
					{
					State = 1298;
					Match(NL);
					}
					}
					State = 1303;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 1304;
				Match(DOT);
				State = 1308;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==NL) {
					{
					{
					State = 1305;
					Match(NL);
					}
					}
					State = 1310;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				break;
			}
			State = 1313;
			functionTypeParameters();
			State = 1317;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==NL) {
				{
				{
				State = 1314;
				Match(NL);
				}
				}
				State = 1319;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 1320;
			Match(ARROW);
			{
			State = 1324;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==NL) {
				{
				{
				State = 1321;
				Match(NL);
				}
				}
				State = 1326;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 1327;
			type();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionTypeReceiverContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ParenthesizedTypeContext parenthesizedType() {
			return GetRuleContext<ParenthesizedTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NullableTypeContext nullableType() {
			return GetRuleContext<NullableTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeReferenceContext typeReference() {
			return GetRuleContext<TypeReferenceContext>(0);
		}
		public FunctionTypeReceiverContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionTypeReceiver; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IKotlinParserListener typedListener = listener as IKotlinParserListener;
			if (typedListener != null) typedListener.EnterFunctionTypeReceiver(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IKotlinParserListener typedListener = listener as IKotlinParserListener;
			if (typedListener != null) typedListener.ExitFunctionTypeReceiver(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKotlinParserVisitor<TResult> typedVisitor = visitor as IKotlinParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionTypeReceiver(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionTypeReceiverContext functionTypeReceiver() {
		FunctionTypeReceiverContext _localctx = new FunctionTypeReceiverContext(Context, State);
		EnterRule(_localctx, 94, RULE_functionTypeReceiver);
		try {
			State = 1332;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,193,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1329;
				parenthesizedType();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1330;
				nullableType();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1331;
				typeReference();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UserTypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SimpleUserTypeContext[] simpleUserType() {
			return GetRuleContexts<SimpleUserTypeContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SimpleUserTypeContext simpleUserType(int i) {
			return GetRuleContext<SimpleUserTypeContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] DOT() { return GetTokens(KotlinParser.DOT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT(int i) {
			return GetToken(KotlinParser.DOT, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NL() { return GetTokens(KotlinParser.NL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NL(int i) {
			return GetToken(KotlinParser.NL, i);
		}
		public UserTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_userType; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IKotlinParserListener typedListener = listener as IKotlinParserListener;
			if (typedListener != null) typedListener.EnterUserType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IKotlinParserListener typedListener = listener as IKotlinParserListener;
			if (typedListener != null) typedListener.ExitUserType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKotlinParserVisitor<TResult> typedVisitor = visitor as IKotlinParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUserType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UserTypeContext userType() {
		UserTypeContext _localctx = new UserTypeContext(Context, State);
		EnterRule(_localctx, 96, RULE_userType);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1334;
			simpleUserType();
			State = 1351;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,196,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 1338;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (_la==NL) {
						{
						{
						State = 1335;
						Match(NL);
						}
						}
						State = 1340;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					State = 1341;
					Match(DOT);
					State = 1345;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (_la==NL) {
						{
						{
						State = 1342;
						Match(NL);
						}
						}
						State = 1347;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					State = 1348;
					simpleUserType();
					}
					} 
				}
				State = 1353;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,196,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SimpleUserTypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SimpleIdentifierContext simpleIdentifier() {
			return GetRuleContext<SimpleIdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeArgumentsContext typeArguments() {
			return GetRuleContext<TypeArgumentsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NL() { return GetTokens(KotlinParser.NL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NL(int i) {
			return GetToken(KotlinParser.NL, i);
		}
		public SimpleUserTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_simpleUserType; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IKotlinParserListener typedListener = listener as IKotlinParserListener;
			if (typedListener != null) typedListener.EnterSimpleUserType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IKotlinParserListener typedListener = listener as IKotlinParserListener;
			if (typedListener != null) typedListener.ExitSimpleUserType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKotlinParserVisitor<TResult> typedVisitor = visitor as IKotlinParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSimpleUserType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SimpleUserTypeContext simpleUserType() {
		SimpleUserTypeContext _localctx = new SimpleUserTypeContext(Context, State);
		EnterRule(_localctx, 98, RULE_simpleUserType);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1354;
			simpleIdentifier();
			State = 1362;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,198,Context) ) {
			case 1:
				{
				State = 1358;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==NL) {
					{
					{
					State = 1355;
					Match(NL);
					}
					}
					State = 1360;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 1361;
				typeArguments();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionTypeParametersContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(KotlinParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(KotlinParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ParameterContext[] parameter() {
			return GetRuleContexts<ParameterContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ParameterContext parameter(int i) {
			return GetRuleContext<ParameterContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext[] type() {
			return GetRuleContexts<TypeContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type(int i) {
			return GetRuleContext<TypeContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(KotlinParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(KotlinParser.COMMA, i);
		}
		public FunctionTypeParametersContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionTypeParameters; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IKotlinParserListener typedListener = listener as IKotlinParserListener;
			if (typedListener != null) typedListener.EnterFunctionTypeParameters(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IKotlinParserListener typedListener = listener as IKotlinParserListener;
			if (typedListener != null) typedListener.ExitFunctionTypeParameters(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKotlinParserVisitor<TResult> typedVisitor = visitor as IKotlinParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionTypeParameters(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionTypeParametersContext functionTypeParameters() {
		FunctionTypeParametersContext _localctx = new FunctionTypeParametersContext(Context, State);
		EnterRule(_localctx, 100, RULE_functionTypeParameters);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1364;
			Match(LPAREN);
			State = 1367;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,199,Context) ) {
			case 1:
				{
				State = 1365;
				parameter();
				}
				break;
			case 2:
				{
				State = 1366;
				type();
				}
				break;
			}
			State = 1376;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 1369;
				Match(COMMA);
				State = 1372;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,200,Context) ) {
				case 1:
					{
					State = 1370;
					parameter();
					}
					break;
				case 2:
					{
					State = 1371;
					type();
					}
					break;
				}
				}
				}
				State = 1378;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 1379;
			Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeConstraintsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WHERE() { return GetToken(KotlinParser.WHERE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeConstraintContext[] typeConstraint() {
			return GetRuleContexts<TypeConstraintContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeConstraintContext typeConstraint(int i) {
			return GetRuleContext<TypeConstraintContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NL() { return GetTokens(KotlinParser.NL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NL(int i) {
			return GetToken(KotlinParser.NL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(KotlinParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(KotlinParser.COMMA, i);
		}
		public TypeConstraintsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeConstraints; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IKotlinParserListener typedListener = listener as IKotlinParserListener;
			if (typedListener != null) typedListener.EnterTypeConstraints(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IKotlinParserListener typedListener = listener as IKotlinParserListener;
			if (typedListener != null) typedListener.ExitTypeConstraints(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKotlinParserVisitor<TResult> typedVisitor = visitor as IKotlinParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeConstraints(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeConstraintsContext typeConstraints() {
		TypeConstraintsContext _localctx = new TypeConstraintsContext(Context, State);
		EnterRule(_localctx, 102, RULE_typeConstraints);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1381;
			Match(WHERE);
			State = 1385;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==NL) {
				{
				{
				State = 1382;
				Match(NL);
				}
				}
				State = 1387;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 1388;
			typeConstraint();
			State = 1405;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,205,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 1392;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (_la==NL) {
						{
						{
						State = 1389;
						Match(NL);
						}
						}
						State = 1394;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					State = 1395;
					Match(COMMA);
					State = 1399;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (_la==NL) {
						{
						{
						State = 1396;
						Match(NL);
						}
						}
						State = 1401;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					State = 1402;
					typeConstraint();
					}
					} 
				}
				State = 1407;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,205,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeConstraintContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SimpleIdentifierContext simpleIdentifier() {
			return GetRuleContext<SimpleIdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(KotlinParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AnnotationsContext[] annotations() {
			return GetRuleContexts<AnnotationsContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AnnotationsContext annotations(int i) {
			return GetRuleContext<AnnotationsContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NL() { return GetTokens(KotlinParser.NL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NL(int i) {
			return GetToken(KotlinParser.NL, i);
		}
		public TypeConstraintContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeConstraint; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IKotlinParserListener typedListener = listener as IKotlinParserListener;
			if (typedListener != null) typedListener.EnterTypeConstraint(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IKotlinParserListener typedListener = listener as IKotlinParserListener;
			if (typedListener != null) typedListener.ExitTypeConstraint(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKotlinParserVisitor<TResult> typedVisitor = visitor as IKotlinParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeConstraint(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeConstraintContext typeConstraint() {
		TypeConstraintContext _localctx = new TypeConstraintContext(Context, State);
		EnterRule(_localctx, 104, RULE_typeConstraint);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1411;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==AT || _la==FILE || ((((_la - 93)) & ~0x3f) == 0 && ((1L << (_la - 93)) & ((1L << (FIELD - 93)) | (1L << (PROPERTY - 93)) | (1L << (GET - 93)) | (1L << (SET - 93)) | (1L << (RECEIVER - 93)) | (1L << (PARAM - 93)) | (1L << (SETPARAM - 93)) | (1L << (DELEGATE - 93)) | (1L << (LabelReference - 93)))) != 0)) {
				{
				{
				State = 1408;
				annotations();
				}
				}
				State = 1413;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 1414;
			simpleIdentifier();
			State = 1418;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==NL) {
				{
				{
				State = 1415;
				Match(NL);
				}
				}
				State = 1420;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 1421;
			Match(COLON);
			State = 1425;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==NL) {
				{
				{
				State = 1422;
				Match(NL);
				}
				}
				State = 1427;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 1428;
			type();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlockContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LCURL() { return GetToken(KotlinParser.LCURL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementsContext statements() {
			return GetRuleContext<StatementsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RCURL() { return GetToken(KotlinParser.RCURL, 0); }
		public BlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_block; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IKotlinParserListener typedListener = listener as IKotlinParserListener;
			if (typedListener != null) typedListener.EnterBlock(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IKotlinParserListener typedListener = listener as IKotlinParserListener;
			if (typedListener != null) typedListener.ExitBlock(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKotlinParserVisitor<TResult> typedVisitor = visitor as IKotlinParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BlockContext block() {
		BlockContext _localctx = new BlockContext(Context, State);
		EnterRule(_localctx, 106, RULE_block);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1430;
			Match(LCURL);
			State = 1431;
			statements();
			State = 1432;
			Match(RCURL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public AnysemiContext[] anysemi() {
			return GetRuleContexts<AnysemiContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AnysemiContext anysemi(int i) {
			return GetRuleContext<AnysemiContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public StatementsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statements; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IKotlinParserListener typedListener = listener as IKotlinParserListener;
			if (typedListener != null) typedListener.EnterStatements(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IKotlinParserListener typedListener = listener as IKotlinParserListener;
			if (typedListener != null) typedListener.ExitStatements(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKotlinParserVisitor<TResult> typedVisitor = visitor as IKotlinParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatements(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementsContext statements() {
		StatementsContext _localctx = new StatementsContext(Context, State);
		EnterRule(_localctx, 108, RULE_statements);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1437;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,209,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 1434;
					anysemi();
					}
					} 
				}
				State = 1439;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,209,Context);
			}
			State = 1454;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,213,Context) ) {
			case 1:
				{
				State = 1440;
				statement();
				State = 1451;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,212,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 1442;
						ErrorHandler.Sync(this);
						_alt = 1;
						do {
							switch (_alt) {
							case 1:
								{
								{
								State = 1441;
								anysemi();
								}
								}
								break;
							default:
								throw new NoViableAltException(this);
							}
							State = 1444;
							ErrorHandler.Sync(this);
							_alt = Interpreter.AdaptivePredict(TokenStream,210,Context);
						} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
						State = 1447;
						ErrorHandler.Sync(this);
						switch ( Interpreter.AdaptivePredict(TokenStream,211,Context) ) {
						case 1:
							{
							State = 1446;
							statement();
							}
							break;
						}
						}
						} 
					}
					State = 1453;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,212,Context);
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public DeclarationContext declaration() {
			return GetRuleContext<DeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BlockLevelExpressionContext blockLevelExpression() {
			return GetRuleContext<BlockLevelExpressionContext>(0);
		}
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IKotlinParserListener typedListener = listener as IKotlinParserListener;
			if (typedListener != null) typedListener.EnterStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IKotlinParserListener typedListener = listener as IKotlinParserListener;
			if (typedListener != null) typedListener.ExitStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKotlinParserVisitor<TResult> typedVisitor = visitor as IKotlinParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		StatementContext _localctx = new StatementContext(Context, State);
		EnterRule(_localctx, 110, RULE_statement);
		try {
			State = 1458;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,214,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1456;
				declaration();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1457;
				blockLevelExpression();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlockLevelExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AnnotationsContext[] annotations() {
			return GetRuleContexts<AnnotationsContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AnnotationsContext annotations(int i) {
			return GetRuleContext<AnnotationsContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NL() { return GetTokens(KotlinParser.NL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NL(int i) {
			return GetToken(KotlinParser.NL, i);
		}
		public BlockLevelExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_blockLevelExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IKotlinParserListener typedListener = listener as IKotlinParserListener;
			if (typedListener != null) typedListener.EnterBlockLevelExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IKotlinParserListener typedListener = listener as IKotlinParserListener;
			if (typedListener != null) typedListener.ExitBlockLevelExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKotlinParserVisitor<TResult> typedVisitor = visitor as IKotlinParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBlockLevelExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BlockLevelExpressionContext blockLevelExpression() {
		BlockLevelExpressionContext _localctx = new BlockLevelExpressionContext(Context, State);
		EnterRule(_localctx, 112, RULE_blockLevelExpression);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1463;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,215,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 1460;
					annotations();
					}
					} 
				}
				State = 1465;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,215,Context);
			}
			State = 1469;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,216,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 1466;
					Match(NL);
					}
					} 
				}
				State = 1471;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,216,Context);
			}
			State = 1472;
			expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ClassDeclarationContext classDeclaration() {
			return GetRuleContext<ClassDeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionDeclarationContext functionDeclaration() {
			return GetRuleContext<FunctionDeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PropertyDeclarationContext propertyDeclaration() {
			return GetRuleContext<PropertyDeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeAliasContext typeAlias() {
			return GetRuleContext<TypeAliasContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LabelDefinitionContext[] labelDefinition() {
			return GetRuleContexts<LabelDefinitionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public LabelDefinitionContext labelDefinition(int i) {
			return GetRuleContext<LabelDefinitionContext>(i);
		}
		public DeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_declaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IKotlinParserListener typedListener = listener as IKotlinParserListener;
			if (typedListener != null) typedListener.EnterDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IKotlinParserListener typedListener = listener as IKotlinParserListener;
			if (typedListener != null) typedListener.ExitDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKotlinParserVisitor<TResult> typedVisitor = visitor as IKotlinParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DeclarationContext declaration() {
		DeclarationContext _localctx = new DeclarationContext(Context, State);
		EnterRule(_localctx, 114, RULE_declaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1477;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==LabelDefinition) {
				{
				{
				State = 1474;
				labelDefinition();
				}
				}
				State = 1479;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 1484;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,218,Context) ) {
			case 1:
				{
				State = 1480;
				classDeclaration();
				}
				break;
			case 2:
				{
				State = 1481;
				functionDeclaration();
				}
				break;
			case 3:
				{
				State = 1482;
				propertyDeclaration();
				}
				break;
			case 4:
				{
				State = 1483;
				typeAlias();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public DisjunctionContext[] disjunction() {
			return GetRuleContexts<DisjunctionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public DisjunctionContext disjunction(int i) {
			return GetRuleContext<DisjunctionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AssignmentOperatorContext[] assignmentOperator() {
			return GetRuleContexts<AssignmentOperatorContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AssignmentOperatorContext assignmentOperator(int i) {
			return GetRuleContext<AssignmentOperatorContext>(i);
		}
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IKotlinParserListener typedListener = listener as IKotlinParserListener;
			if (typedListener != null) typedListener.EnterExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IKotlinParserListener typedListener = listener as IKotlinParserListener;
			if (typedListener != null) typedListener.ExitExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKotlinParserVisitor<TResult> typedVisitor = visitor as IKotlinParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		ExpressionContext _localctx = new ExpressionContext(Context, State);
		EnterRule(_localctx, 116, RULE_expression);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1486;
			disjunction();
			State = 1492;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,219,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 1487;
					assignmentOperator();
					State = 1488;
					disjunction();
					}
					} 
				}
				State = 1494;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,219,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DisjunctionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ConjunctionContext[] conjunction() {
			return GetRuleContexts<ConjunctionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ConjunctionContext conjunction(int i) {
			return GetRuleContext<ConjunctionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] DISJ() { return GetTokens(KotlinParser.DISJ); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DISJ(int i) {
			return GetToken(KotlinParser.DISJ, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NL() { return GetTokens(KotlinParser.NL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NL(int i) {
			return GetToken(KotlinParser.NL, i);
		}
		public DisjunctionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_disjunction; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IKotlinParserListener typedListener = listener as IKotlinParserListener;
			if (typedListener != null) typedListener.EnterDisjunction(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IKotlinParserListener typedListener = listener as IKotlinParserListener;
			if (typedListener != null) typedListener.ExitDisjunction(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKotlinParserVisitor<TResult> typedVisitor = visitor as IKotlinParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDisjunction(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DisjunctionContext disjunction() {
		DisjunctionContext _localctx = new DisjunctionContext(Context, State);
		EnterRule(_localctx, 118, RULE_disjunction);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1495;
			conjunction();
			State = 1512;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,222,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 1499;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (_la==NL) {
						{
						{
						State = 1496;
						Match(NL);
						}
						}
						State = 1501;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					State = 1502;
					Match(DISJ);
					State = 1506;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,221,Context);
					while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
						if ( _alt==1 ) {
							{
							{
							State = 1503;
							Match(NL);
							}
							} 
						}
						State = 1508;
						ErrorHandler.Sync(this);
						_alt = Interpreter.AdaptivePredict(TokenStream,221,Context);
					}
					State = 1509;
					conjunction();
					}
					} 
				}
				State = 1514;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,222,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConjunctionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public EqualityComparisonContext[] equalityComparison() {
			return GetRuleContexts<EqualityComparisonContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public EqualityComparisonContext equalityComparison(int i) {
			return GetRuleContext<EqualityComparisonContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] CONJ() { return GetTokens(KotlinParser.CONJ); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONJ(int i) {
			return GetToken(KotlinParser.CONJ, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NL() { return GetTokens(KotlinParser.NL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NL(int i) {
			return GetToken(KotlinParser.NL, i);
		}
		public ConjunctionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_conjunction; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IKotlinParserListener typedListener = listener as IKotlinParserListener;
			if (typedListener != null) typedListener.EnterConjunction(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IKotlinParserListener typedListener = listener as IKotlinParserListener;
			if (typedListener != null) typedListener.ExitConjunction(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKotlinParserVisitor<TResult> typedVisitor = visitor as IKotlinParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConjunction(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConjunctionContext conjunction() {
		ConjunctionContext _localctx = new ConjunctionContext(Context, State);
		EnterRule(_localctx, 120, RULE_conjunction);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1515;
			equalityComparison();
			State = 1532;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,225,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 1519;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (_la==NL) {
						{
						{
						State = 1516;
						Match(NL);
						}
						}
						State = 1521;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					State = 1522;
					Match(CONJ);
					State = 1526;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,224,Context);
					while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
						if ( _alt==1 ) {
							{
							{
							State = 1523;
							Match(NL);
							}
							} 
						}
						State = 1528;
						ErrorHandler.Sync(this);
						_alt = Interpreter.AdaptivePredict(TokenStream,224,Context);
					}
					State = 1529;
					equalityComparison();
					}
					} 
				}
				State = 1534;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,225,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EqualityComparisonContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ComparisonContext[] comparison() {
			return GetRuleContexts<ComparisonContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ComparisonContext comparison(int i) {
			return GetRuleContext<ComparisonContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public EqualityOperationContext[] equalityOperation() {
			return GetRuleContexts<EqualityOperationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public EqualityOperationContext equalityOperation(int i) {
			return GetRuleContext<EqualityOperationContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NL() { return GetTokens(KotlinParser.NL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NL(int i) {
			return GetToken(KotlinParser.NL, i);
		}
		public EqualityComparisonContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_equalityComparison; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IKotlinParserListener typedListener = listener as IKotlinParserListener;
			if (typedListener != null) typedListener.EnterEqualityComparison(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IKotlinParserListener typedListener = listener as IKotlinParserListener;
			if (typedListener != null) typedListener.ExitEqualityComparison(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKotlinParserVisitor<TResult> typedVisitor = visitor as IKotlinParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEqualityComparison(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EqualityComparisonContext equalityComparison() {
		EqualityComparisonContext _localctx = new EqualityComparisonContext(Context, State);
		EnterRule(_localctx, 122, RULE_equalityComparison);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1535;
			comparison();
			State = 1547;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,227,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 1536;
					equalityOperation();
					State = 1540;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,226,Context);
					while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
						if ( _alt==1 ) {
							{
							{
							State = 1537;
							Match(NL);
							}
							} 
						}
						State = 1542;
						ErrorHandler.Sync(this);
						_alt = Interpreter.AdaptivePredict(TokenStream,226,Context);
					}
					State = 1543;
					comparison();
					}
					} 
				}
				State = 1549;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,227,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ComparisonContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public NamedInfixContext[] namedInfix() {
			return GetRuleContexts<NamedInfixContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public NamedInfixContext namedInfix(int i) {
			return GetRuleContext<NamedInfixContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ComparisonOperatorContext comparisonOperator() {
			return GetRuleContext<ComparisonOperatorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NL() { return GetTokens(KotlinParser.NL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NL(int i) {
			return GetToken(KotlinParser.NL, i);
		}
		public ComparisonContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_comparison; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IKotlinParserListener typedListener = listener as IKotlinParserListener;
			if (typedListener != null) typedListener.EnterComparison(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IKotlinParserListener typedListener = listener as IKotlinParserListener;
			if (typedListener != null) typedListener.ExitComparison(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKotlinParserVisitor<TResult> typedVisitor = visitor as IKotlinParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitComparison(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ComparisonContext comparison() {
		ComparisonContext _localctx = new ComparisonContext(Context, State);
		EnterRule(_localctx, 124, RULE_comparison);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1550;
			namedInfix();
			State = 1560;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,229,Context) ) {
			case 1:
				{
				State = 1551;
				comparisonOperator();
				State = 1555;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,228,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 1552;
						Match(NL);
						}
						} 
					}
					State = 1557;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,228,Context);
				}
				State = 1558;
				namedInfix();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NamedInfixContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ElvisExpressionContext[] elvisExpression() {
			return GetRuleContexts<ElvisExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ElvisExpressionContext elvisExpression(int i) {
			return GetRuleContext<ElvisExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IsOperatorContext isOperator() {
			return GetRuleContext<IsOperatorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public InOperatorContext[] inOperator() {
			return GetRuleContexts<InOperatorContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public InOperatorContext inOperator(int i) {
			return GetRuleContext<InOperatorContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NL() { return GetTokens(KotlinParser.NL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NL(int i) {
			return GetToken(KotlinParser.NL, i);
		}
		public NamedInfixContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_namedInfix; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IKotlinParserListener typedListener = listener as IKotlinParserListener;
			if (typedListener != null) typedListener.EnterNamedInfix(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IKotlinParserListener typedListener = listener as IKotlinParserListener;
			if (typedListener != null) typedListener.ExitNamedInfix(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKotlinParserVisitor<TResult> typedVisitor = visitor as IKotlinParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNamedInfix(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NamedInfixContext namedInfix() {
		NamedInfixContext _localctx = new NamedInfixContext(Context, State);
		EnterRule(_localctx, 126, RULE_namedInfix);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1562;
			elvisExpression();
			State = 1585;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,233,Context) ) {
			case 1:
				{
				State = 1572;
				ErrorHandler.Sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						State = 1563;
						inOperator();
						State = 1567;
						ErrorHandler.Sync(this);
						_alt = Interpreter.AdaptivePredict(TokenStream,230,Context);
						while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
							if ( _alt==1 ) {
								{
								{
								State = 1564;
								Match(NL);
								}
								} 
							}
							State = 1569;
							ErrorHandler.Sync(this);
							_alt = Interpreter.AdaptivePredict(TokenStream,230,Context);
						}
						State = 1570;
						elvisExpression();
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 1574;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,231,Context);
				} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
				}
				break;
			case 2:
				{
				{
				State = 1576;
				isOperator();
				State = 1580;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==NL) {
					{
					{
					State = 1577;
					Match(NL);
					}
					}
					State = 1582;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 1583;
				type();
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ElvisExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public InfixFunctionCallContext[] infixFunctionCall() {
			return GetRuleContexts<InfixFunctionCallContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public InfixFunctionCallContext infixFunctionCall(int i) {
			return GetRuleContext<InfixFunctionCallContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] ELVIS() { return GetTokens(KotlinParser.ELVIS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ELVIS(int i) {
			return GetToken(KotlinParser.ELVIS, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NL() { return GetTokens(KotlinParser.NL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NL(int i) {
			return GetToken(KotlinParser.NL, i);
		}
		public ElvisExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_elvisExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IKotlinParserListener typedListener = listener as IKotlinParserListener;
			if (typedListener != null) typedListener.EnterElvisExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IKotlinParserListener typedListener = listener as IKotlinParserListener;
			if (typedListener != null) typedListener.ExitElvisExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKotlinParserVisitor<TResult> typedVisitor = visitor as IKotlinParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitElvisExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ElvisExpressionContext elvisExpression() {
		ElvisExpressionContext _localctx = new ElvisExpressionContext(Context, State);
		EnterRule(_localctx, 128, RULE_elvisExpression);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1587;
			infixFunctionCall();
			State = 1604;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,236,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 1591;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (_la==NL) {
						{
						{
						State = 1588;
						Match(NL);
						}
						}
						State = 1593;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					State = 1594;
					Match(ELVIS);
					State = 1598;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,235,Context);
					while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
						if ( _alt==1 ) {
							{
							{
							State = 1595;
							Match(NL);
							}
							} 
						}
						State = 1600;
						ErrorHandler.Sync(this);
						_alt = Interpreter.AdaptivePredict(TokenStream,235,Context);
					}
					State = 1601;
					infixFunctionCall();
					}
					} 
				}
				State = 1606;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,236,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InfixFunctionCallContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public RangeExpressionContext[] rangeExpression() {
			return GetRuleContexts<RangeExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public RangeExpressionContext rangeExpression(int i) {
			return GetRuleContext<RangeExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SimpleIdentifierContext[] simpleIdentifier() {
			return GetRuleContexts<SimpleIdentifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SimpleIdentifierContext simpleIdentifier(int i) {
			return GetRuleContext<SimpleIdentifierContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NL() { return GetTokens(KotlinParser.NL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NL(int i) {
			return GetToken(KotlinParser.NL, i);
		}
		public InfixFunctionCallContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_infixFunctionCall; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IKotlinParserListener typedListener = listener as IKotlinParserListener;
			if (typedListener != null) typedListener.EnterInfixFunctionCall(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IKotlinParserListener typedListener = listener as IKotlinParserListener;
			if (typedListener != null) typedListener.ExitInfixFunctionCall(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKotlinParserVisitor<TResult> typedVisitor = visitor as IKotlinParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInfixFunctionCall(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InfixFunctionCallContext infixFunctionCall() {
		InfixFunctionCallContext _localctx = new InfixFunctionCallContext(Context, State);
		EnterRule(_localctx, 130, RULE_infixFunctionCall);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1607;
			rangeExpression();
			State = 1619;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,238,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 1608;
					simpleIdentifier();
					State = 1612;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,237,Context);
					while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
						if ( _alt==1 ) {
							{
							{
							State = 1609;
							Match(NL);
							}
							} 
						}
						State = 1614;
						ErrorHandler.Sync(this);
						_alt = Interpreter.AdaptivePredict(TokenStream,237,Context);
					}
					State = 1615;
					rangeExpression();
					}
					} 
				}
				State = 1621;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,238,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RangeExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public AdditiveExpressionContext[] additiveExpression() {
			return GetRuleContexts<AdditiveExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AdditiveExpressionContext additiveExpression(int i) {
			return GetRuleContext<AdditiveExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] RANGE() { return GetTokens(KotlinParser.RANGE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RANGE(int i) {
			return GetToken(KotlinParser.RANGE, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NL() { return GetTokens(KotlinParser.NL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NL(int i) {
			return GetToken(KotlinParser.NL, i);
		}
		public RangeExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rangeExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IKotlinParserListener typedListener = listener as IKotlinParserListener;
			if (typedListener != null) typedListener.EnterRangeExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IKotlinParserListener typedListener = listener as IKotlinParserListener;
			if (typedListener != null) typedListener.ExitRangeExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKotlinParserVisitor<TResult> typedVisitor = visitor as IKotlinParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRangeExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RangeExpressionContext rangeExpression() {
		RangeExpressionContext _localctx = new RangeExpressionContext(Context, State);
		EnterRule(_localctx, 132, RULE_rangeExpression);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1622;
			additiveExpression();
			State = 1633;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,240,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 1623;
					Match(RANGE);
					State = 1627;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,239,Context);
					while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
						if ( _alt==1 ) {
							{
							{
							State = 1624;
							Match(NL);
							}
							} 
						}
						State = 1629;
						ErrorHandler.Sync(this);
						_alt = Interpreter.AdaptivePredict(TokenStream,239,Context);
					}
					State = 1630;
					additiveExpression();
					}
					} 
				}
				State = 1635;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,240,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AdditiveExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public MultiplicativeExpressionContext[] multiplicativeExpression() {
			return GetRuleContexts<MultiplicativeExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public MultiplicativeExpressionContext multiplicativeExpression(int i) {
			return GetRuleContext<MultiplicativeExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AdditiveOperatorContext[] additiveOperator() {
			return GetRuleContexts<AdditiveOperatorContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AdditiveOperatorContext additiveOperator(int i) {
			return GetRuleContext<AdditiveOperatorContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NL() { return GetTokens(KotlinParser.NL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NL(int i) {
			return GetToken(KotlinParser.NL, i);
		}
		public AdditiveExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_additiveExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IKotlinParserListener typedListener = listener as IKotlinParserListener;
			if (typedListener != null) typedListener.EnterAdditiveExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IKotlinParserListener typedListener = listener as IKotlinParserListener;
			if (typedListener != null) typedListener.ExitAdditiveExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKotlinParserVisitor<TResult> typedVisitor = visitor as IKotlinParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAdditiveExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AdditiveExpressionContext additiveExpression() {
		AdditiveExpressionContext _localctx = new AdditiveExpressionContext(Context, State);
		EnterRule(_localctx, 134, RULE_additiveExpression);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1636;
			multiplicativeExpression();
			State = 1648;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,242,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 1637;
					additiveOperator();
					State = 1641;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,241,Context);
					while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
						if ( _alt==1 ) {
							{
							{
							State = 1638;
							Match(NL);
							}
							} 
						}
						State = 1643;
						ErrorHandler.Sync(this);
						_alt = Interpreter.AdaptivePredict(TokenStream,241,Context);
					}
					State = 1644;
					multiplicativeExpression();
					}
					} 
				}
				State = 1650;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,242,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MultiplicativeExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypeRHSContext[] typeRHS() {
			return GetRuleContexts<TypeRHSContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeRHSContext typeRHS(int i) {
			return GetRuleContext<TypeRHSContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MultiplicativeOperationContext[] multiplicativeOperation() {
			return GetRuleContexts<MultiplicativeOperationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public MultiplicativeOperationContext multiplicativeOperation(int i) {
			return GetRuleContext<MultiplicativeOperationContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NL() { return GetTokens(KotlinParser.NL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NL(int i) {
			return GetToken(KotlinParser.NL, i);
		}
		public MultiplicativeExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_multiplicativeExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IKotlinParserListener typedListener = listener as IKotlinParserListener;
			if (typedListener != null) typedListener.EnterMultiplicativeExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IKotlinParserListener typedListener = listener as IKotlinParserListener;
			if (typedListener != null) typedListener.ExitMultiplicativeExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKotlinParserVisitor<TResult> typedVisitor = visitor as IKotlinParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMultiplicativeExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MultiplicativeExpressionContext multiplicativeExpression() {
		MultiplicativeExpressionContext _localctx = new MultiplicativeExpressionContext(Context, State);
		EnterRule(_localctx, 136, RULE_multiplicativeExpression);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1651;
			typeRHS();
			State = 1663;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,244,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 1652;
					multiplicativeOperation();
					State = 1656;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,243,Context);
					while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
						if ( _alt==1 ) {
							{
							{
							State = 1653;
							Match(NL);
							}
							} 
						}
						State = 1658;
						ErrorHandler.Sync(this);
						_alt = Interpreter.AdaptivePredict(TokenStream,243,Context);
					}
					State = 1659;
					typeRHS();
					}
					} 
				}
				State = 1665;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,244,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeRHSContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public PrefixUnaryExpressionContext[] prefixUnaryExpression() {
			return GetRuleContexts<PrefixUnaryExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public PrefixUnaryExpressionContext prefixUnaryExpression(int i) {
			return GetRuleContext<PrefixUnaryExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeOperationContext[] typeOperation() {
			return GetRuleContexts<TypeOperationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeOperationContext typeOperation(int i) {
			return GetRuleContext<TypeOperationContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NL() { return GetTokens(KotlinParser.NL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NL(int i) {
			return GetToken(KotlinParser.NL, i);
		}
		public TypeRHSContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeRHS; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IKotlinParserListener typedListener = listener as IKotlinParserListener;
			if (typedListener != null) typedListener.EnterTypeRHS(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IKotlinParserListener typedListener = listener as IKotlinParserListener;
			if (typedListener != null) typedListener.ExitTypeRHS(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKotlinParserVisitor<TResult> typedVisitor = visitor as IKotlinParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeRHS(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeRHSContext typeRHS() {
		TypeRHSContext _localctx = new TypeRHSContext(Context, State);
		EnterRule(_localctx, 138, RULE_typeRHS);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1666;
			prefixUnaryExpression();
			State = 1678;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,246,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 1670;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (_la==NL) {
						{
						{
						State = 1667;
						Match(NL);
						}
						}
						State = 1672;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					State = 1673;
					typeOperation();
					State = 1674;
					prefixUnaryExpression();
					}
					} 
				}
				State = 1680;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,246,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PrefixUnaryExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public PostfixUnaryExpressionContext postfixUnaryExpression() {
			return GetRuleContext<PostfixUnaryExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PrefixUnaryOperationContext[] prefixUnaryOperation() {
			return GetRuleContexts<PrefixUnaryOperationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public PrefixUnaryOperationContext prefixUnaryOperation(int i) {
			return GetRuleContext<PrefixUnaryOperationContext>(i);
		}
		public PrefixUnaryExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_prefixUnaryExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IKotlinParserListener typedListener = listener as IKotlinParserListener;
			if (typedListener != null) typedListener.EnterPrefixUnaryExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IKotlinParserListener typedListener = listener as IKotlinParserListener;
			if (typedListener != null) typedListener.ExitPrefixUnaryExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKotlinParserVisitor<TResult> typedVisitor = visitor as IKotlinParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrefixUnaryExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PrefixUnaryExpressionContext prefixUnaryExpression() {
		PrefixUnaryExpressionContext _localctx = new PrefixUnaryExpressionContext(Context, State);
		EnterRule(_localctx, 140, RULE_prefixUnaryExpression);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1684;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,247,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 1681;
					prefixUnaryOperation();
					}
					} 
				}
				State = 1686;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,247,Context);
			}
			State = 1687;
			postfixUnaryExpression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PostfixUnaryExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public AtomicExpressionContext atomicExpression() {
			return GetRuleContext<AtomicExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CallableReferenceContext callableReference() {
			return GetRuleContext<CallableReferenceContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PostfixUnaryOperationContext[] postfixUnaryOperation() {
			return GetRuleContexts<PostfixUnaryOperationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public PostfixUnaryOperationContext postfixUnaryOperation(int i) {
			return GetRuleContext<PostfixUnaryOperationContext>(i);
		}
		public PostfixUnaryExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_postfixUnaryExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IKotlinParserListener typedListener = listener as IKotlinParserListener;
			if (typedListener != null) typedListener.EnterPostfixUnaryExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IKotlinParserListener typedListener = listener as IKotlinParserListener;
			if (typedListener != null) typedListener.ExitPostfixUnaryExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKotlinParserVisitor<TResult> typedVisitor = visitor as IKotlinParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPostfixUnaryExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PostfixUnaryExpressionContext postfixUnaryExpression() {
		PostfixUnaryExpressionContext _localctx = new PostfixUnaryExpressionContext(Context, State);
		EnterRule(_localctx, 142, RULE_postfixUnaryExpression);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1691;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,248,Context) ) {
			case 1:
				{
				State = 1689;
				atomicExpression();
				}
				break;
			case 2:
				{
				State = 1690;
				callableReference();
				}
				break;
			}
			State = 1696;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,249,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 1693;
					postfixUnaryOperation();
					}
					} 
				}
				State = 1698;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,249,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AtomicExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ParenthesizedExpressionContext parenthesizedExpression() {
			return GetRuleContext<ParenthesizedExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LiteralConstantContext literalConstant() {
			return GetRuleContext<LiteralConstantContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionLiteralContext functionLiteral() {
			return GetRuleContext<FunctionLiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ThisExpressionContext thisExpression() {
			return GetRuleContext<ThisExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SuperExpressionContext superExpression() {
			return GetRuleContext<SuperExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ConditionalExpressionContext conditionalExpression() {
			return GetRuleContext<ConditionalExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TryExpressionContext tryExpression() {
			return GetRuleContext<TryExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ObjectLiteralContext objectLiteral() {
			return GetRuleContext<ObjectLiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public JumpExpressionContext jumpExpression() {
			return GetRuleContext<JumpExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LoopExpressionContext loopExpression() {
			return GetRuleContext<LoopExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CollectionLiteralContext collectionLiteral() {
			return GetRuleContext<CollectionLiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SimpleIdentifierContext simpleIdentifier() {
			return GetRuleContext<SimpleIdentifierContext>(0);
		}
		public AtomicExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_atomicExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IKotlinParserListener typedListener = listener as IKotlinParserListener;
			if (typedListener != null) typedListener.EnterAtomicExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IKotlinParserListener typedListener = listener as IKotlinParserListener;
			if (typedListener != null) typedListener.ExitAtomicExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKotlinParserVisitor<TResult> typedVisitor = visitor as IKotlinParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAtomicExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AtomicExpressionContext atomicExpression() {
		AtomicExpressionContext _localctx = new AtomicExpressionContext(Context, State);
		EnterRule(_localctx, 144, RULE_atomicExpression);
		try {
			State = 1711;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case LPAREN:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1699;
				parenthesizedExpression();
				}
				break;
			case QUOTE_OPEN:
			case TRIPLE_QUOTE_OPEN:
			case RealLiteral:
			case LongLiteral:
			case IntegerLiteral:
			case HexLiteral:
			case BinLiteral:
			case BooleanLiteral:
			case NullLiteral:
			case CharacterLiteral:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1700;
				literalConstant();
				}
				break;
			case LCURL:
			case AT:
			case FILE:
			case FIELD:
			case PROPERTY:
			case GET:
			case SET:
			case RECEIVER:
			case PARAM:
			case SETPARAM:
			case DELEGATE:
			case LabelReference:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1701;
				functionLiteral();
				}
				break;
			case THIS:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1702;
				thisExpression();
				}
				break;
			case SUPER:
				EnterOuterAlt(_localctx, 5);
				{
				State = 1703;
				superExpression();
				}
				break;
			case IF:
			case WHEN:
				EnterOuterAlt(_localctx, 6);
				{
				State = 1704;
				conditionalExpression();
				}
				break;
			case TRY:
				EnterOuterAlt(_localctx, 7);
				{
				State = 1705;
				tryExpression();
				}
				break;
			case OBJECT:
				EnterOuterAlt(_localctx, 8);
				{
				State = 1706;
				objectLiteral();
				}
				break;
			case RETURN_AT:
			case CONTINUE_AT:
			case BREAK_AT:
			case THROW:
			case RETURN:
			case CONTINUE:
			case BREAK:
				EnterOuterAlt(_localctx, 9);
				{
				State = 1707;
				jumpExpression();
				}
				break;
			case FOR:
			case DO:
			case WHILE:
				EnterOuterAlt(_localctx, 10);
				{
				State = 1708;
				loopExpression();
				}
				break;
			case LSQUARE:
				EnterOuterAlt(_localctx, 11);
				{
				State = 1709;
				collectionLiteral();
				}
				break;
			case IMPORT:
			case CONSTRUCTOR:
			case BY:
			case COMPANION:
			case INIT:
			case WHERE:
			case CATCH:
			case FINALLY:
			case OUT:
			case GETTER:
			case SETTER:
			case DYNAMIC:
			case PUBLIC:
			case PRIVATE:
			case PROTECTED:
			case INTERNAL:
			case ENUM:
			case SEALED:
			case ANNOTATION:
			case DATA:
			case INNER:
			case TAILREC:
			case OPERATOR:
			case INLINE:
			case INFIX:
			case EXTERNAL:
			case SUSPEND:
			case OVERRIDE:
			case ABSTRACT:
			case FINAL:
			case OPEN:
			case CONST:
			case LATEINIT:
			case VARARG:
			case NOINLINE:
			case CROSSINLINE:
			case REIFIED:
			case Identifier:
				EnterOuterAlt(_localctx, 12);
				{
				State = 1710;
				simpleIdentifier();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParenthesizedExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(KotlinParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(KotlinParser.RPAREN, 0); }
		public ParenthesizedExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parenthesizedExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IKotlinParserListener typedListener = listener as IKotlinParserListener;
			if (typedListener != null) typedListener.EnterParenthesizedExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IKotlinParserListener typedListener = listener as IKotlinParserListener;
			if (typedListener != null) typedListener.ExitParenthesizedExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKotlinParserVisitor<TResult> typedVisitor = visitor as IKotlinParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParenthesizedExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ParenthesizedExpressionContext parenthesizedExpression() {
		ParenthesizedExpressionContext _localctx = new ParenthesizedExpressionContext(Context, State);
		EnterRule(_localctx, 146, RULE_parenthesizedExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1713;
			Match(LPAREN);
			State = 1714;
			expression();
			State = 1715;
			Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CallSuffixContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypeArgumentsContext typeArguments() {
			return GetRuleContext<TypeArgumentsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ValueArgumentsContext valueArguments() {
			return GetRuleContext<ValueArgumentsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AnnotatedLambdaContext[] annotatedLambda() {
			return GetRuleContexts<AnnotatedLambdaContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AnnotatedLambdaContext annotatedLambda(int i) {
			return GetRuleContext<AnnotatedLambdaContext>(i);
		}
		public CallSuffixContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_callSuffix; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IKotlinParserListener typedListener = listener as IKotlinParserListener;
			if (typedListener != null) typedListener.EnterCallSuffix(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IKotlinParserListener typedListener = listener as IKotlinParserListener;
			if (typedListener != null) typedListener.ExitCallSuffix(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKotlinParserVisitor<TResult> typedVisitor = visitor as IKotlinParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCallSuffix(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CallSuffixContext callSuffix() {
		CallSuffixContext _localctx = new CallSuffixContext(Context, State);
		EnterRule(_localctx, 148, RULE_callSuffix);
		try {
			int _alt;
			State = 1739;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case LANGLE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1717;
				typeArguments();
				State = 1719;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,251,Context) ) {
				case 1:
					{
					State = 1718;
					valueArguments();
					}
					break;
				}
				State = 1724;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,252,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 1721;
						annotatedLambda();
						}
						} 
					}
					State = 1726;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,252,Context);
				}
				}
				break;
			case LPAREN:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1727;
				valueArguments();
				State = 1731;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,253,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 1728;
						annotatedLambda();
						}
						} 
					}
					State = 1733;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,253,Context);
				}
				}
				break;
			case NL:
			case LCURL:
			case AT:
			case FILE:
			case IMPORT:
			case CONSTRUCTOR:
			case BY:
			case COMPANION:
			case INIT:
			case WHERE:
			case CATCH:
			case FINALLY:
			case OUT:
			case FIELD:
			case PROPERTY:
			case GET:
			case SET:
			case GETTER:
			case SETTER:
			case RECEIVER:
			case PARAM:
			case SETPARAM:
			case DELEGATE:
			case DYNAMIC:
			case PUBLIC:
			case PRIVATE:
			case PROTECTED:
			case INTERNAL:
			case ENUM:
			case SEALED:
			case ANNOTATION:
			case DATA:
			case INNER:
			case TAILREC:
			case OPERATOR:
			case INLINE:
			case INFIX:
			case EXTERNAL:
			case SUSPEND:
			case OVERRIDE:
			case ABSTRACT:
			case FINAL:
			case OPEN:
			case CONST:
			case LATEINIT:
			case VARARG:
			case NOINLINE:
			case CROSSINLINE:
			case REIFIED:
			case Identifier:
			case LabelReference:
			case LabelDefinition:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1735;
				ErrorHandler.Sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						State = 1734;
						annotatedLambda();
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 1737;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,254,Context);
				} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AnnotatedLambdaContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FunctionLiteralContext functionLiteral() {
			return GetRuleContext<FunctionLiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public UnescapedAnnotationContext[] unescapedAnnotation() {
			return GetRuleContexts<UnescapedAnnotationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public UnescapedAnnotationContext unescapedAnnotation(int i) {
			return GetRuleContext<UnescapedAnnotationContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LabelDefinition() { return GetToken(KotlinParser.LabelDefinition, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NL() { return GetTokens(KotlinParser.NL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NL(int i) {
			return GetToken(KotlinParser.NL, i);
		}
		public AnnotatedLambdaContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_annotatedLambda; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IKotlinParserListener typedListener = listener as IKotlinParserListener;
			if (typedListener != null) typedListener.EnterAnnotatedLambda(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IKotlinParserListener typedListener = listener as IKotlinParserListener;
			if (typedListener != null) typedListener.ExitAnnotatedLambda(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKotlinParserVisitor<TResult> typedVisitor = visitor as IKotlinParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAnnotatedLambda(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AnnotatedLambdaContext annotatedLambda() {
		AnnotatedLambdaContext _localctx = new AnnotatedLambdaContext(Context, State);
		EnterRule(_localctx, 150, RULE_annotatedLambda);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1744;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (((((_la - 58)) & ~0x3f) == 0 && ((1L << (_la - 58)) & ((1L << (IMPORT - 58)) | (1L << (CONSTRUCTOR - 58)) | (1L << (BY - 58)) | (1L << (COMPANION - 58)) | (1L << (INIT - 58)) | (1L << (WHERE - 58)) | (1L << (CATCH - 58)) | (1L << (FINALLY - 58)) | (1L << (OUT - 58)) | (1L << (GETTER - 58)) | (1L << (SETTER - 58)) | (1L << (DYNAMIC - 58)) | (1L << (PUBLIC - 58)) | (1L << (PRIVATE - 58)) | (1L << (PROTECTED - 58)) | (1L << (INTERNAL - 58)) | (1L << (ENUM - 58)) | (1L << (SEALED - 58)) | (1L << (ANNOTATION - 58)) | (1L << (DATA - 58)) | (1L << (INNER - 58)) | (1L << (TAILREC - 58)) | (1L << (OPERATOR - 58)) | (1L << (INLINE - 58)) | (1L << (INFIX - 58)) | (1L << (EXTERNAL - 58)) | (1L << (SUSPEND - 58)) | (1L << (OVERRIDE - 58)) | (1L << (ABSTRACT - 58)) | (1L << (FINAL - 58)))) != 0) || ((((_la - 122)) & ~0x3f) == 0 && ((1L << (_la - 122)) & ((1L << (OPEN - 122)) | (1L << (CONST - 122)) | (1L << (LATEINIT - 122)) | (1L << (VARARG - 122)) | (1L << (NOINLINE - 122)) | (1L << (CROSSINLINE - 122)) | (1L << (REIFIED - 122)) | (1L << (Identifier - 122)))) != 0)) {
				{
				{
				State = 1741;
				unescapedAnnotation();
				}
				}
				State = 1746;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 1748;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LabelDefinition) {
				{
				State = 1747;
				Match(LabelDefinition);
				}
			}

			State = 1753;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==NL) {
				{
				{
				State = 1750;
				Match(NL);
				}
				}
				State = 1755;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 1756;
			functionLiteral();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArrayAccessContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LSQUARE() { return GetToken(KotlinParser.LSQUARE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RSQUARE() { return GetToken(KotlinParser.RSQUARE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(KotlinParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(KotlinParser.COMMA, i);
		}
		public ArrayAccessContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arrayAccess; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IKotlinParserListener typedListener = listener as IKotlinParserListener;
			if (typedListener != null) typedListener.EnterArrayAccess(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IKotlinParserListener typedListener = listener as IKotlinParserListener;
			if (typedListener != null) typedListener.ExitArrayAccess(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKotlinParserVisitor<TResult> typedVisitor = visitor as IKotlinParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArrayAccess(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArrayAccessContext arrayAccess() {
		ArrayAccessContext _localctx = new ArrayAccessContext(Context, State);
		EnterRule(_localctx, 152, RULE_arrayAccess);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1758;
			Match(LSQUARE);
			State = 1767;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << NL) | (1L << LPAREN) | (1L << LSQUARE) | (1L << LCURL) | (1L << ADD) | (1L << SUB) | (1L << INCR) | (1L << DECR) | (1L << EXCL) | (1L << COLONCOLON) | (1L << Q_COLONCOLON) | (1L << AT) | (1L << RETURN_AT) | (1L << CONTINUE_AT) | (1L << BREAK_AT) | (1L << FILE) | (1L << IMPORT) | (1L << OBJECT))) != 0) || ((((_la - 66)) & ~0x3f) == 0 && ((1L << (_la - 66)) & ((1L << (CONSTRUCTOR - 66)) | (1L << (BY - 66)) | (1L << (COMPANION - 66)) | (1L << (INIT - 66)) | (1L << (THIS - 66)) | (1L << (SUPER - 66)) | (1L << (WHERE - 66)) | (1L << (IF - 66)) | (1L << (WHEN - 66)) | (1L << (TRY - 66)) | (1L << (CATCH - 66)) | (1L << (FINALLY - 66)) | (1L << (FOR - 66)) | (1L << (DO - 66)) | (1L << (WHILE - 66)) | (1L << (THROW - 66)) | (1L << (RETURN - 66)) | (1L << (CONTINUE - 66)) | (1L << (BREAK - 66)) | (1L << (OUT - 66)) | (1L << (FIELD - 66)) | (1L << (PROPERTY - 66)) | (1L << (GET - 66)) | (1L << (SET - 66)) | (1L << (GETTER - 66)) | (1L << (SETTER - 66)) | (1L << (RECEIVER - 66)) | (1L << (PARAM - 66)) | (1L << (SETPARAM - 66)) | (1L << (DELEGATE - 66)) | (1L << (DYNAMIC - 66)) | (1L << (PUBLIC - 66)) | (1L << (PRIVATE - 66)) | (1L << (PROTECTED - 66)) | (1L << (INTERNAL - 66)) | (1L << (ENUM - 66)) | (1L << (SEALED - 66)) | (1L << (ANNOTATION - 66)) | (1L << (DATA - 66)) | (1L << (INNER - 66)) | (1L << (TAILREC - 66)) | (1L << (OPERATOR - 66)) | (1L << (INLINE - 66)) | (1L << (INFIX - 66)) | (1L << (EXTERNAL - 66)) | (1L << (SUSPEND - 66)) | (1L << (OVERRIDE - 66)) | (1L << (ABSTRACT - 66)) | (1L << (FINAL - 66)) | (1L << (OPEN - 66)) | (1L << (CONST - 66)) | (1L << (LATEINIT - 66)) | (1L << (VARARG - 66)) | (1L << (NOINLINE - 66)) | (1L << (CROSSINLINE - 66)) | (1L << (REIFIED - 66)) | (1L << (QUOTE_OPEN - 66)))) != 0) || ((((_la - 130)) & ~0x3f) == 0 && ((1L << (_la - 130)) & ((1L << (TRIPLE_QUOTE_OPEN - 130)) | (1L << (RealLiteral - 130)) | (1L << (LongLiteral - 130)) | (1L << (IntegerLiteral - 130)) | (1L << (HexLiteral - 130)) | (1L << (BinLiteral - 130)) | (1L << (BooleanLiteral - 130)) | (1L << (NullLiteral - 130)) | (1L << (Identifier - 130)) | (1L << (LabelReference - 130)) | (1L << (LabelDefinition - 130)) | (1L << (CharacterLiteral - 130)))) != 0)) {
				{
				State = 1759;
				expression();
				State = 1764;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 1760;
					Match(COMMA);
					State = 1761;
					expression();
					}
					}
					State = 1766;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
			}

			State = 1769;
			Match(RSQUARE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ValueArgumentsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(KotlinParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(KotlinParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ValueArgumentContext[] valueArgument() {
			return GetRuleContexts<ValueArgumentContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ValueArgumentContext valueArgument(int i) {
			return GetRuleContext<ValueArgumentContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(KotlinParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(KotlinParser.COMMA, i);
		}
		public ValueArgumentsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_valueArguments; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IKotlinParserListener typedListener = listener as IKotlinParserListener;
			if (typedListener != null) typedListener.EnterValueArguments(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IKotlinParserListener typedListener = listener as IKotlinParserListener;
			if (typedListener != null) typedListener.ExitValueArguments(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKotlinParserVisitor<TResult> typedVisitor = visitor as IKotlinParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitValueArguments(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ValueArgumentsContext valueArguments() {
		ValueArgumentsContext _localctx = new ValueArgumentsContext(Context, State);
		EnterRule(_localctx, 154, RULE_valueArguments);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1771;
			Match(LPAREN);
			State = 1780;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << NL) | (1L << LPAREN) | (1L << LSQUARE) | (1L << LCURL) | (1L << MULT) | (1L << ADD) | (1L << SUB) | (1L << INCR) | (1L << DECR) | (1L << EXCL) | (1L << COLONCOLON) | (1L << Q_COLONCOLON) | (1L << AT) | (1L << RETURN_AT) | (1L << CONTINUE_AT) | (1L << BREAK_AT) | (1L << FILE) | (1L << IMPORT) | (1L << OBJECT))) != 0) || ((((_la - 66)) & ~0x3f) == 0 && ((1L << (_la - 66)) & ((1L << (CONSTRUCTOR - 66)) | (1L << (BY - 66)) | (1L << (COMPANION - 66)) | (1L << (INIT - 66)) | (1L << (THIS - 66)) | (1L << (SUPER - 66)) | (1L << (WHERE - 66)) | (1L << (IF - 66)) | (1L << (WHEN - 66)) | (1L << (TRY - 66)) | (1L << (CATCH - 66)) | (1L << (FINALLY - 66)) | (1L << (FOR - 66)) | (1L << (DO - 66)) | (1L << (WHILE - 66)) | (1L << (THROW - 66)) | (1L << (RETURN - 66)) | (1L << (CONTINUE - 66)) | (1L << (BREAK - 66)) | (1L << (OUT - 66)) | (1L << (FIELD - 66)) | (1L << (PROPERTY - 66)) | (1L << (GET - 66)) | (1L << (SET - 66)) | (1L << (GETTER - 66)) | (1L << (SETTER - 66)) | (1L << (RECEIVER - 66)) | (1L << (PARAM - 66)) | (1L << (SETPARAM - 66)) | (1L << (DELEGATE - 66)) | (1L << (DYNAMIC - 66)) | (1L << (PUBLIC - 66)) | (1L << (PRIVATE - 66)) | (1L << (PROTECTED - 66)) | (1L << (INTERNAL - 66)) | (1L << (ENUM - 66)) | (1L << (SEALED - 66)) | (1L << (ANNOTATION - 66)) | (1L << (DATA - 66)) | (1L << (INNER - 66)) | (1L << (TAILREC - 66)) | (1L << (OPERATOR - 66)) | (1L << (INLINE - 66)) | (1L << (INFIX - 66)) | (1L << (EXTERNAL - 66)) | (1L << (SUSPEND - 66)) | (1L << (OVERRIDE - 66)) | (1L << (ABSTRACT - 66)) | (1L << (FINAL - 66)) | (1L << (OPEN - 66)) | (1L << (CONST - 66)) | (1L << (LATEINIT - 66)) | (1L << (VARARG - 66)) | (1L << (NOINLINE - 66)) | (1L << (CROSSINLINE - 66)) | (1L << (REIFIED - 66)) | (1L << (QUOTE_OPEN - 66)))) != 0) || ((((_la - 130)) & ~0x3f) == 0 && ((1L << (_la - 130)) & ((1L << (TRIPLE_QUOTE_OPEN - 130)) | (1L << (RealLiteral - 130)) | (1L << (LongLiteral - 130)) | (1L << (IntegerLiteral - 130)) | (1L << (HexLiteral - 130)) | (1L << (BinLiteral - 130)) | (1L << (BooleanLiteral - 130)) | (1L << (NullLiteral - 130)) | (1L << (Identifier - 130)) | (1L << (LabelReference - 130)) | (1L << (LabelDefinition - 130)) | (1L << (CharacterLiteral - 130)))) != 0)) {
				{
				State = 1772;
				valueArgument();
				State = 1777;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 1773;
					Match(COMMA);
					State = 1774;
					valueArgument();
					}
					}
					State = 1779;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
			}

			State = 1782;
			Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeArgumentsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LANGLE() { return GetToken(KotlinParser.LANGLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeProjectionContext[] typeProjection() {
			return GetRuleContexts<TypeProjectionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeProjectionContext typeProjection(int i) {
			return GetRuleContext<TypeProjectionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RANGLE() { return GetToken(KotlinParser.RANGLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NL() { return GetTokens(KotlinParser.NL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NL(int i) {
			return GetToken(KotlinParser.NL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(KotlinParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(KotlinParser.COMMA, i);
		}
		public TypeArgumentsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeArguments; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IKotlinParserListener typedListener = listener as IKotlinParserListener;
			if (typedListener != null) typedListener.EnterTypeArguments(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IKotlinParserListener typedListener = listener as IKotlinParserListener;
			if (typedListener != null) typedListener.ExitTypeArguments(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKotlinParserVisitor<TResult> typedVisitor = visitor as IKotlinParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeArguments(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeArgumentsContext typeArguments() {
		TypeArgumentsContext _localctx = new TypeArgumentsContext(Context, State);
		EnterRule(_localctx, 156, RULE_typeArguments);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1784;
			Match(LANGLE);
			State = 1788;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==NL) {
				{
				{
				State = 1785;
				Match(NL);
				}
				}
				State = 1790;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 1791;
			typeProjection();
			State = 1802;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,265,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 1795;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (_la==NL) {
						{
						{
						State = 1792;
						Match(NL);
						}
						}
						State = 1797;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					State = 1798;
					Match(COMMA);
					State = 1799;
					typeProjection();
					}
					} 
				}
				State = 1804;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,265,Context);
			}
			State = 1808;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==NL) {
				{
				{
				State = 1805;
				Match(NL);
				}
				}
				State = 1810;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 1811;
			Match(RANGLE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeProjectionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeProjectionModifierListContext typeProjectionModifierList() {
			return GetRuleContext<TypeProjectionModifierListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MULT() { return GetToken(KotlinParser.MULT, 0); }
		public TypeProjectionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeProjection; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IKotlinParserListener typedListener = listener as IKotlinParserListener;
			if (typedListener != null) typedListener.EnterTypeProjection(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IKotlinParserListener typedListener = listener as IKotlinParserListener;
			if (typedListener != null) typedListener.ExitTypeProjection(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKotlinParserVisitor<TResult> typedVisitor = visitor as IKotlinParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeProjection(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeProjectionContext typeProjection() {
		TypeProjectionContext _localctx = new TypeProjectionContext(Context, State);
		EnterRule(_localctx, 158, RULE_typeProjection);
		try {
			State = 1818;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case LPAREN:
			case AT:
			case FILE:
			case IMPORT:
			case CONSTRUCTOR:
			case BY:
			case COMPANION:
			case INIT:
			case WHERE:
			case CATCH:
			case FINALLY:
			case IN:
			case OUT:
			case FIELD:
			case PROPERTY:
			case GET:
			case SET:
			case GETTER:
			case SETTER:
			case RECEIVER:
			case PARAM:
			case SETPARAM:
			case DELEGATE:
			case DYNAMIC:
			case PUBLIC:
			case PRIVATE:
			case PROTECTED:
			case INTERNAL:
			case ENUM:
			case SEALED:
			case ANNOTATION:
			case DATA:
			case INNER:
			case TAILREC:
			case OPERATOR:
			case INLINE:
			case INFIX:
			case EXTERNAL:
			case SUSPEND:
			case OVERRIDE:
			case ABSTRACT:
			case FINAL:
			case OPEN:
			case CONST:
			case LATEINIT:
			case VARARG:
			case NOINLINE:
			case CROSSINLINE:
			case REIFIED:
			case Identifier:
			case LabelReference:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1814;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,267,Context) ) {
				case 1:
					{
					State = 1813;
					typeProjectionModifierList();
					}
					break;
				}
				State = 1816;
				type();
				}
				break;
			case MULT:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1817;
				Match(MULT);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeProjectionModifierListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public VarianceAnnotationContext[] varianceAnnotation() {
			return GetRuleContexts<VarianceAnnotationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public VarianceAnnotationContext varianceAnnotation(int i) {
			return GetRuleContext<VarianceAnnotationContext>(i);
		}
		public TypeProjectionModifierListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeProjectionModifierList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IKotlinParserListener typedListener = listener as IKotlinParserListener;
			if (typedListener != null) typedListener.EnterTypeProjectionModifierList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IKotlinParserListener typedListener = listener as IKotlinParserListener;
			if (typedListener != null) typedListener.ExitTypeProjectionModifierList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKotlinParserVisitor<TResult> typedVisitor = visitor as IKotlinParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeProjectionModifierList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeProjectionModifierListContext typeProjectionModifierList() {
		TypeProjectionModifierListContext _localctx = new TypeProjectionModifierListContext(Context, State);
		EnterRule(_localctx, 160, RULE_typeProjectionModifierList);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1821;
			ErrorHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 1820;
					varianceAnnotation();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 1823;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,269,Context);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ValueArgumentContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SimpleIdentifierContext simpleIdentifier() {
			return GetRuleContext<SimpleIdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGNMENT() { return GetToken(KotlinParser.ASSIGNMENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MULT() { return GetToken(KotlinParser.MULT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NL() { return GetTokens(KotlinParser.NL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NL(int i) {
			return GetToken(KotlinParser.NL, i);
		}
		public ValueArgumentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_valueArgument; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IKotlinParserListener typedListener = listener as IKotlinParserListener;
			if (typedListener != null) typedListener.EnterValueArgument(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IKotlinParserListener typedListener = listener as IKotlinParserListener;
			if (typedListener != null) typedListener.ExitValueArgument(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKotlinParserVisitor<TResult> typedVisitor = visitor as IKotlinParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitValueArgument(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ValueArgumentContext valueArgument() {
		ValueArgumentContext _localctx = new ValueArgumentContext(Context, State);
		EnterRule(_localctx, 162, RULE_valueArgument);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1839;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,272,Context) ) {
			case 1:
				{
				State = 1825;
				simpleIdentifier();
				State = 1829;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==NL) {
					{
					{
					State = 1826;
					Match(NL);
					}
					}
					State = 1831;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 1832;
				Match(ASSIGNMENT);
				State = 1836;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,271,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 1833;
						Match(NL);
						}
						} 
					}
					State = 1838;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,271,Context);
				}
				}
				break;
			}
			State = 1842;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==MULT) {
				{
				State = 1841;
				Match(MULT);
				}
			}

			State = 1847;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,274,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 1844;
					Match(NL);
					}
					} 
				}
				State = 1849;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,274,Context);
			}
			State = 1850;
			expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LiteralConstantContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BooleanLiteral() { return GetToken(KotlinParser.BooleanLiteral, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IntegerLiteral() { return GetToken(KotlinParser.IntegerLiteral, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StringLiteralContext stringLiteral() {
			return GetRuleContext<StringLiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HexLiteral() { return GetToken(KotlinParser.HexLiteral, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BinLiteral() { return GetToken(KotlinParser.BinLiteral, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CharacterLiteral() { return GetToken(KotlinParser.CharacterLiteral, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RealLiteral() { return GetToken(KotlinParser.RealLiteral, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NullLiteral() { return GetToken(KotlinParser.NullLiteral, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LongLiteral() { return GetToken(KotlinParser.LongLiteral, 0); }
		public LiteralConstantContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_literalConstant; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IKotlinParserListener typedListener = listener as IKotlinParserListener;
			if (typedListener != null) typedListener.EnterLiteralConstant(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IKotlinParserListener typedListener = listener as IKotlinParserListener;
			if (typedListener != null) typedListener.ExitLiteralConstant(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKotlinParserVisitor<TResult> typedVisitor = visitor as IKotlinParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLiteralConstant(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LiteralConstantContext literalConstant() {
		LiteralConstantContext _localctx = new LiteralConstantContext(Context, State);
		EnterRule(_localctx, 164, RULE_literalConstant);
		try {
			State = 1861;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case BooleanLiteral:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1852;
				Match(BooleanLiteral);
				}
				break;
			case IntegerLiteral:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1853;
				Match(IntegerLiteral);
				}
				break;
			case QUOTE_OPEN:
			case TRIPLE_QUOTE_OPEN:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1854;
				stringLiteral();
				}
				break;
			case HexLiteral:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1855;
				Match(HexLiteral);
				}
				break;
			case BinLiteral:
				EnterOuterAlt(_localctx, 5);
				{
				State = 1856;
				Match(BinLiteral);
				}
				break;
			case CharacterLiteral:
				EnterOuterAlt(_localctx, 6);
				{
				State = 1857;
				Match(CharacterLiteral);
				}
				break;
			case RealLiteral:
				EnterOuterAlt(_localctx, 7);
				{
				State = 1858;
				Match(RealLiteral);
				}
				break;
			case NullLiteral:
				EnterOuterAlt(_localctx, 8);
				{
				State = 1859;
				Match(NullLiteral);
				}
				break;
			case LongLiteral:
				EnterOuterAlt(_localctx, 9);
				{
				State = 1860;
				Match(LongLiteral);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StringLiteralContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public LineStringLiteralContext lineStringLiteral() {
			return GetRuleContext<LineStringLiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MultiLineStringLiteralContext multiLineStringLiteral() {
			return GetRuleContext<MultiLineStringLiteralContext>(0);
		}
		public StringLiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stringLiteral; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IKotlinParserListener typedListener = listener as IKotlinParserListener;
			if (typedListener != null) typedListener.EnterStringLiteral(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IKotlinParserListener typedListener = listener as IKotlinParserListener;
			if (typedListener != null) typedListener.ExitStringLiteral(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKotlinParserVisitor<TResult> typedVisitor = visitor as IKotlinParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStringLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StringLiteralContext stringLiteral() {
		StringLiteralContext _localctx = new StringLiteralContext(Context, State);
		EnterRule(_localctx, 166, RULE_stringLiteral);
		try {
			State = 1865;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case QUOTE_OPEN:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1863;
				lineStringLiteral();
				}
				break;
			case TRIPLE_QUOTE_OPEN:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1864;
				multiLineStringLiteral();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LineStringLiteralContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode QUOTE_OPEN() { return GetToken(KotlinParser.QUOTE_OPEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode QUOTE_CLOSE() { return GetToken(KotlinParser.QUOTE_CLOSE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public LineStringContentContext[] lineStringContent() {
			return GetRuleContexts<LineStringContentContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public LineStringContentContext lineStringContent(int i) {
			return GetRuleContext<LineStringContentContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LineStringExpressionContext[] lineStringExpression() {
			return GetRuleContexts<LineStringExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public LineStringExpressionContext lineStringExpression(int i) {
			return GetRuleContext<LineStringExpressionContext>(i);
		}
		public LineStringLiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lineStringLiteral; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IKotlinParserListener typedListener = listener as IKotlinParserListener;
			if (typedListener != null) typedListener.EnterLineStringLiteral(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IKotlinParserListener typedListener = listener as IKotlinParserListener;
			if (typedListener != null) typedListener.ExitLineStringLiteral(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKotlinParserVisitor<TResult> typedVisitor = visitor as IKotlinParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLineStringLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LineStringLiteralContext lineStringLiteral() {
		LineStringLiteralContext _localctx = new LineStringLiteralContext(Context, State);
		EnterRule(_localctx, 168, RULE_lineStringLiteral);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1867;
			Match(QUOTE_OPEN);
			State = 1872;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (((((_la - 156)) & ~0x3f) == 0 && ((1L << (_la - 156)) & ((1L << (LineStrRef - 156)) | (1L << (LineStrText - 156)) | (1L << (LineStrEscapedChar - 156)) | (1L << (LineStrExprStart - 156)))) != 0)) {
				{
				State = 1870;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case LineStrRef:
				case LineStrText:
				case LineStrEscapedChar:
					{
					State = 1868;
					lineStringContent();
					}
					break;
				case LineStrExprStart:
					{
					State = 1869;
					lineStringExpression();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				State = 1874;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 1875;
			Match(QUOTE_CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MultiLineStringLiteralContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TRIPLE_QUOTE_OPEN() { return GetToken(KotlinParser.TRIPLE_QUOTE_OPEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TRIPLE_QUOTE_CLOSE() { return GetToken(KotlinParser.TRIPLE_QUOTE_CLOSE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public MultiLineStringContentContext[] multiLineStringContent() {
			return GetRuleContexts<MultiLineStringContentContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public MultiLineStringContentContext multiLineStringContent(int i) {
			return GetRuleContext<MultiLineStringContentContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MultiLineStringExpressionContext[] multiLineStringExpression() {
			return GetRuleContexts<MultiLineStringExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public MultiLineStringExpressionContext multiLineStringExpression(int i) {
			return GetRuleContext<MultiLineStringExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LineStringLiteralContext[] lineStringLiteral() {
			return GetRuleContexts<LineStringLiteralContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public LineStringLiteralContext lineStringLiteral(int i) {
			return GetRuleContext<LineStringLiteralContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] MultiLineStringQuote() { return GetTokens(KotlinParser.MultiLineStringQuote); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MultiLineStringQuote(int i) {
			return GetToken(KotlinParser.MultiLineStringQuote, i);
		}
		public MultiLineStringLiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_multiLineStringLiteral; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IKotlinParserListener typedListener = listener as IKotlinParserListener;
			if (typedListener != null) typedListener.EnterMultiLineStringLiteral(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IKotlinParserListener typedListener = listener as IKotlinParserListener;
			if (typedListener != null) typedListener.ExitMultiLineStringLiteral(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKotlinParserVisitor<TResult> typedVisitor = visitor as IKotlinParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMultiLineStringLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MultiLineStringLiteralContext multiLineStringLiteral() {
		MultiLineStringLiteralContext _localctx = new MultiLineStringLiteralContext(Context, State);
		EnterRule(_localctx, 170, RULE_multiLineStringLiteral);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1877;
			Match(TRIPLE_QUOTE_OPEN);
			State = 1884;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (((((_la - 129)) & ~0x3f) == 0 && ((1L << (_la - 129)) & ((1L << (QUOTE_OPEN - 129)) | (1L << (MultiLineStringQuote - 129)) | (1L << (MultiLineStrRef - 129)) | (1L << (MultiLineStrText - 129)) | (1L << (MultiLineStrEscapedChar - 129)) | (1L << (MultiLineStrExprStart - 129)))) != 0)) {
				{
				State = 1882;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case MultiLineStrRef:
				case MultiLineStrText:
				case MultiLineStrEscapedChar:
					{
					State = 1878;
					multiLineStringContent();
					}
					break;
				case MultiLineStrExprStart:
					{
					State = 1879;
					multiLineStringExpression();
					}
					break;
				case QUOTE_OPEN:
					{
					State = 1880;
					lineStringLiteral();
					}
					break;
				case MultiLineStringQuote:
					{
					State = 1881;
					Match(MultiLineStringQuote);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				State = 1886;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 1887;
			Match(TRIPLE_QUOTE_CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LineStringContentContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LineStrText() { return GetToken(KotlinParser.LineStrText, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LineStrEscapedChar() { return GetToken(KotlinParser.LineStrEscapedChar, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LineStrRef() { return GetToken(KotlinParser.LineStrRef, 0); }
		public LineStringContentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lineStringContent; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IKotlinParserListener typedListener = listener as IKotlinParserListener;
			if (typedListener != null) typedListener.EnterLineStringContent(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IKotlinParserListener typedListener = listener as IKotlinParserListener;
			if (typedListener != null) typedListener.ExitLineStringContent(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKotlinParserVisitor<TResult> typedVisitor = visitor as IKotlinParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLineStringContent(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LineStringContentContext lineStringContent() {
		LineStringContentContext _localctx = new LineStringContentContext(Context, State);
		EnterRule(_localctx, 172, RULE_lineStringContent);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1889;
			_la = TokenStream.LA(1);
			if ( !(((((_la - 156)) & ~0x3f) == 0 && ((1L << (_la - 156)) & ((1L << (LineStrRef - 156)) | (1L << (LineStrText - 156)) | (1L << (LineStrEscapedChar - 156)))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LineStringExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LineStrExprStart() { return GetToken(KotlinParser.LineStrExprStart, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RCURL() { return GetToken(KotlinParser.RCURL, 0); }
		public LineStringExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lineStringExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IKotlinParserListener typedListener = listener as IKotlinParserListener;
			if (typedListener != null) typedListener.EnterLineStringExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IKotlinParserListener typedListener = listener as IKotlinParserListener;
			if (typedListener != null) typedListener.ExitLineStringExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKotlinParserVisitor<TResult> typedVisitor = visitor as IKotlinParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLineStringExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LineStringExpressionContext lineStringExpression() {
		LineStringExpressionContext _localctx = new LineStringExpressionContext(Context, State);
		EnterRule(_localctx, 174, RULE_lineStringExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1891;
			Match(LineStrExprStart);
			State = 1892;
			expression();
			State = 1893;
			Match(RCURL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MultiLineStringContentContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MultiLineStrText() { return GetToken(KotlinParser.MultiLineStrText, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MultiLineStrEscapedChar() { return GetToken(KotlinParser.MultiLineStrEscapedChar, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MultiLineStrRef() { return GetToken(KotlinParser.MultiLineStrRef, 0); }
		public MultiLineStringContentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_multiLineStringContent; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IKotlinParserListener typedListener = listener as IKotlinParserListener;
			if (typedListener != null) typedListener.EnterMultiLineStringContent(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IKotlinParserListener typedListener = listener as IKotlinParserListener;
			if (typedListener != null) typedListener.ExitMultiLineStringContent(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKotlinParserVisitor<TResult> typedVisitor = visitor as IKotlinParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMultiLineStringContent(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MultiLineStringContentContext multiLineStringContent() {
		MultiLineStringContentContext _localctx = new MultiLineStringContentContext(Context, State);
		EnterRule(_localctx, 176, RULE_multiLineStringContent);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1895;
			_la = TokenStream.LA(1);
			if ( !(((((_la - 162)) & ~0x3f) == 0 && ((1L << (_la - 162)) & ((1L << (MultiLineStrRef - 162)) | (1L << (MultiLineStrText - 162)) | (1L << (MultiLineStrEscapedChar - 162)))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MultiLineStringExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MultiLineStrExprStart() { return GetToken(KotlinParser.MultiLineStrExprStart, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RCURL() { return GetToken(KotlinParser.RCURL, 0); }
		public MultiLineStringExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_multiLineStringExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IKotlinParserListener typedListener = listener as IKotlinParserListener;
			if (typedListener != null) typedListener.EnterMultiLineStringExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IKotlinParserListener typedListener = listener as IKotlinParserListener;
			if (typedListener != null) typedListener.ExitMultiLineStringExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKotlinParserVisitor<TResult> typedVisitor = visitor as IKotlinParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMultiLineStringExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MultiLineStringExpressionContext multiLineStringExpression() {
		MultiLineStringExpressionContext _localctx = new MultiLineStringExpressionContext(Context, State);
		EnterRule(_localctx, 178, RULE_multiLineStringExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1897;
			Match(MultiLineStrExprStart);
			State = 1898;
			expression();
			State = 1899;
			Match(RCURL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionLiteralContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LCURL() { return GetToken(KotlinParser.LCURL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementsContext statements() {
			return GetRuleContext<StatementsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RCURL() { return GetToken(KotlinParser.RCURL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public LambdaParametersContext lambdaParameters() {
			return GetRuleContext<LambdaParametersContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ARROW() { return GetToken(KotlinParser.ARROW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public AnnotationsContext[] annotations() {
			return GetRuleContexts<AnnotationsContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AnnotationsContext annotations(int i) {
			return GetRuleContext<AnnotationsContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NL() { return GetTokens(KotlinParser.NL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NL(int i) {
			return GetToken(KotlinParser.NL, i);
		}
		public FunctionLiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionLiteral; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IKotlinParserListener typedListener = listener as IKotlinParserListener;
			if (typedListener != null) typedListener.EnterFunctionLiteral(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IKotlinParserListener typedListener = listener as IKotlinParserListener;
			if (typedListener != null) typedListener.ExitFunctionLiteral(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKotlinParserVisitor<TResult> typedVisitor = visitor as IKotlinParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionLiteralContext functionLiteral() {
		FunctionLiteralContext _localctx = new FunctionLiteralContext(Context, State);
		EnterRule(_localctx, 180, RULE_functionLiteral);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1904;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==AT || _la==FILE || ((((_la - 93)) & ~0x3f) == 0 && ((1L << (_la - 93)) & ((1L << (FIELD - 93)) | (1L << (PROPERTY - 93)) | (1L << (GET - 93)) | (1L << (SET - 93)) | (1L << (RECEIVER - 93)) | (1L << (PARAM - 93)) | (1L << (SETPARAM - 93)) | (1L << (DELEGATE - 93)) | (1L << (LabelReference - 93)))) != 0)) {
				{
				{
				State = 1901;
				annotations();
				}
				}
				State = 1906;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 1953;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,288,Context) ) {
			case 1:
				{
				State = 1907;
				Match(LCURL);
				State = 1911;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,282,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 1908;
						Match(NL);
						}
						} 
					}
					State = 1913;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,282,Context);
				}
				State = 1914;
				statements();
				State = 1918;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==NL) {
					{
					{
					State = 1915;
					Match(NL);
					}
					}
					State = 1920;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 1921;
				Match(RCURL);
				}
				break;
			case 2:
				{
				State = 1923;
				Match(LCURL);
				State = 1927;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,284,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 1924;
						Match(NL);
						}
						} 
					}
					State = 1929;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,284,Context);
				}
				State = 1930;
				lambdaParameters();
				State = 1934;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==NL) {
					{
					{
					State = 1931;
					Match(NL);
					}
					}
					State = 1936;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 1937;
				Match(ARROW);
				State = 1941;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,286,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 1938;
						Match(NL);
						}
						} 
					}
					State = 1943;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,286,Context);
				}
				State = 1944;
				statements();
				State = 1948;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==NL) {
					{
					{
					State = 1945;
					Match(NL);
					}
					}
					State = 1950;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 1951;
				Match(RCURL);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LambdaParametersContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public LambdaParameterContext[] lambdaParameter() {
			return GetRuleContexts<LambdaParameterContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public LambdaParameterContext lambdaParameter(int i) {
			return GetRuleContext<LambdaParameterContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(KotlinParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(KotlinParser.COMMA, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NL() { return GetTokens(KotlinParser.NL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NL(int i) {
			return GetToken(KotlinParser.NL, i);
		}
		public LambdaParametersContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lambdaParameters; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IKotlinParserListener typedListener = listener as IKotlinParserListener;
			if (typedListener != null) typedListener.EnterLambdaParameters(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IKotlinParserListener typedListener = listener as IKotlinParserListener;
			if (typedListener != null) typedListener.ExitLambdaParameters(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKotlinParserVisitor<TResult> typedVisitor = visitor as IKotlinParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLambdaParameters(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LambdaParametersContext lambdaParameters() {
		LambdaParametersContext _localctx = new LambdaParametersContext(Context, State);
		EnterRule(_localctx, 182, RULE_lambdaParameters);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1956;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LPAREN || _la==IMPORT || ((((_la - 66)) & ~0x3f) == 0 && ((1L << (_la - 66)) & ((1L << (CONSTRUCTOR - 66)) | (1L << (BY - 66)) | (1L << (COMPANION - 66)) | (1L << (INIT - 66)) | (1L << (WHERE - 66)) | (1L << (CATCH - 66)) | (1L << (FINALLY - 66)) | (1L << (OUT - 66)) | (1L << (GETTER - 66)) | (1L << (SETTER - 66)) | (1L << (DYNAMIC - 66)) | (1L << (PUBLIC - 66)) | (1L << (PRIVATE - 66)) | (1L << (PROTECTED - 66)) | (1L << (INTERNAL - 66)) | (1L << (ENUM - 66)) | (1L << (SEALED - 66)) | (1L << (ANNOTATION - 66)) | (1L << (DATA - 66)) | (1L << (INNER - 66)) | (1L << (TAILREC - 66)) | (1L << (OPERATOR - 66)) | (1L << (INLINE - 66)) | (1L << (INFIX - 66)) | (1L << (EXTERNAL - 66)) | (1L << (SUSPEND - 66)) | (1L << (OVERRIDE - 66)) | (1L << (ABSTRACT - 66)) | (1L << (FINAL - 66)) | (1L << (OPEN - 66)) | (1L << (CONST - 66)) | (1L << (LATEINIT - 66)) | (1L << (VARARG - 66)) | (1L << (NOINLINE - 66)) | (1L << (CROSSINLINE - 66)) | (1L << (REIFIED - 66)))) != 0) || _la==Identifier) {
				{
				State = 1955;
				lambdaParameter();
				}
			}

			State = 1974;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,292,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 1961;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (_la==NL) {
						{
						{
						State = 1958;
						Match(NL);
						}
						}
						State = 1963;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					State = 1964;
					Match(COMMA);
					State = 1968;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (_la==NL) {
						{
						{
						State = 1965;
						Match(NL);
						}
						}
						State = 1970;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					State = 1971;
					lambdaParameter();
					}
					} 
				}
				State = 1976;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,292,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LambdaParameterContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public VariableDeclarationContext variableDeclaration() {
			return GetRuleContext<VariableDeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MultiVariableDeclarationContext multiVariableDeclaration() {
			return GetRuleContext<MultiVariableDeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(KotlinParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NL() { return GetTokens(KotlinParser.NL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NL(int i) {
			return GetToken(KotlinParser.NL, i);
		}
		public LambdaParameterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lambdaParameter; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IKotlinParserListener typedListener = listener as IKotlinParserListener;
			if (typedListener != null) typedListener.EnterLambdaParameter(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IKotlinParserListener typedListener = listener as IKotlinParserListener;
			if (typedListener != null) typedListener.ExitLambdaParameter(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKotlinParserVisitor<TResult> typedVisitor = visitor as IKotlinParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLambdaParameter(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LambdaParameterContext lambdaParameter() {
		LambdaParameterContext _localctx = new LambdaParameterContext(Context, State);
		EnterRule(_localctx, 184, RULE_lambdaParameter);
		int _la;
		try {
			State = 1995;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case IMPORT:
			case CONSTRUCTOR:
			case BY:
			case COMPANION:
			case INIT:
			case WHERE:
			case CATCH:
			case FINALLY:
			case OUT:
			case GETTER:
			case SETTER:
			case DYNAMIC:
			case PUBLIC:
			case PRIVATE:
			case PROTECTED:
			case INTERNAL:
			case ENUM:
			case SEALED:
			case ANNOTATION:
			case DATA:
			case INNER:
			case TAILREC:
			case OPERATOR:
			case INLINE:
			case INFIX:
			case EXTERNAL:
			case SUSPEND:
			case OVERRIDE:
			case ABSTRACT:
			case FINAL:
			case OPEN:
			case CONST:
			case LATEINIT:
			case VARARG:
			case NOINLINE:
			case CROSSINLINE:
			case REIFIED:
			case Identifier:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1977;
				variableDeclaration();
				}
				break;
			case LPAREN:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1978;
				multiVariableDeclaration();
				State = 1993;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,295,Context) ) {
				case 1:
					{
					State = 1982;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (_la==NL) {
						{
						{
						State = 1979;
						Match(NL);
						}
						}
						State = 1984;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					State = 1985;
					Match(COLON);
					State = 1989;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (_la==NL) {
						{
						{
						State = 1986;
						Match(NL);
						}
						}
						State = 1991;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					State = 1992;
					type();
					}
					break;
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ObjectLiteralContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OBJECT() { return GetToken(KotlinParser.OBJECT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ClassBodyContext classBody() {
			return GetRuleContext<ClassBodyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(KotlinParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public DelegationSpecifiersContext delegationSpecifiers() {
			return GetRuleContext<DelegationSpecifiersContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NL() { return GetTokens(KotlinParser.NL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NL(int i) {
			return GetToken(KotlinParser.NL, i);
		}
		public ObjectLiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_objectLiteral; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IKotlinParserListener typedListener = listener as IKotlinParserListener;
			if (typedListener != null) typedListener.EnterObjectLiteral(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IKotlinParserListener typedListener = listener as IKotlinParserListener;
			if (typedListener != null) typedListener.ExitObjectLiteral(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKotlinParserVisitor<TResult> typedVisitor = visitor as IKotlinParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitObjectLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ObjectLiteralContext objectLiteral() {
		ObjectLiteralContext _localctx = new ObjectLiteralContext(Context, State);
		EnterRule(_localctx, 186, RULE_objectLiteral);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1997;
			Match(OBJECT);
			State = 2012;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,299,Context) ) {
			case 1:
				{
				State = 2001;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==NL) {
					{
					{
					State = 1998;
					Match(NL);
					}
					}
					State = 2003;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 2004;
				Match(COLON);
				State = 2008;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==NL) {
					{
					{
					State = 2005;
					Match(NL);
					}
					}
					State = 2010;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 2011;
				delegationSpecifiers();
				}
				break;
			}
			State = 2017;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==NL) {
				{
				{
				State = 2014;
				Match(NL);
				}
				}
				State = 2019;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 2020;
			classBody();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CollectionLiteralContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LSQUARE() { return GetToken(KotlinParser.LSQUARE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RSQUARE() { return GetToken(KotlinParser.RSQUARE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(KotlinParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(KotlinParser.COMMA, i);
		}
		public CollectionLiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_collectionLiteral; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IKotlinParserListener typedListener = listener as IKotlinParserListener;
			if (typedListener != null) typedListener.EnterCollectionLiteral(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IKotlinParserListener typedListener = listener as IKotlinParserListener;
			if (typedListener != null) typedListener.ExitCollectionLiteral(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKotlinParserVisitor<TResult> typedVisitor = visitor as IKotlinParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCollectionLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CollectionLiteralContext collectionLiteral() {
		CollectionLiteralContext _localctx = new CollectionLiteralContext(Context, State);
		EnterRule(_localctx, 188, RULE_collectionLiteral);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2022;
			Match(LSQUARE);
			State = 2024;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << NL) | (1L << LPAREN) | (1L << LSQUARE) | (1L << LCURL) | (1L << ADD) | (1L << SUB) | (1L << INCR) | (1L << DECR) | (1L << EXCL) | (1L << COLONCOLON) | (1L << Q_COLONCOLON) | (1L << AT) | (1L << RETURN_AT) | (1L << CONTINUE_AT) | (1L << BREAK_AT) | (1L << FILE) | (1L << IMPORT) | (1L << OBJECT))) != 0) || ((((_la - 66)) & ~0x3f) == 0 && ((1L << (_la - 66)) & ((1L << (CONSTRUCTOR - 66)) | (1L << (BY - 66)) | (1L << (COMPANION - 66)) | (1L << (INIT - 66)) | (1L << (THIS - 66)) | (1L << (SUPER - 66)) | (1L << (WHERE - 66)) | (1L << (IF - 66)) | (1L << (WHEN - 66)) | (1L << (TRY - 66)) | (1L << (CATCH - 66)) | (1L << (FINALLY - 66)) | (1L << (FOR - 66)) | (1L << (DO - 66)) | (1L << (WHILE - 66)) | (1L << (THROW - 66)) | (1L << (RETURN - 66)) | (1L << (CONTINUE - 66)) | (1L << (BREAK - 66)) | (1L << (OUT - 66)) | (1L << (FIELD - 66)) | (1L << (PROPERTY - 66)) | (1L << (GET - 66)) | (1L << (SET - 66)) | (1L << (GETTER - 66)) | (1L << (SETTER - 66)) | (1L << (RECEIVER - 66)) | (1L << (PARAM - 66)) | (1L << (SETPARAM - 66)) | (1L << (DELEGATE - 66)) | (1L << (DYNAMIC - 66)) | (1L << (PUBLIC - 66)) | (1L << (PRIVATE - 66)) | (1L << (PROTECTED - 66)) | (1L << (INTERNAL - 66)) | (1L << (ENUM - 66)) | (1L << (SEALED - 66)) | (1L << (ANNOTATION - 66)) | (1L << (DATA - 66)) | (1L << (INNER - 66)) | (1L << (TAILREC - 66)) | (1L << (OPERATOR - 66)) | (1L << (INLINE - 66)) | (1L << (INFIX - 66)) | (1L << (EXTERNAL - 66)) | (1L << (SUSPEND - 66)) | (1L << (OVERRIDE - 66)) | (1L << (ABSTRACT - 66)) | (1L << (FINAL - 66)) | (1L << (OPEN - 66)) | (1L << (CONST - 66)) | (1L << (LATEINIT - 66)) | (1L << (VARARG - 66)) | (1L << (NOINLINE - 66)) | (1L << (CROSSINLINE - 66)) | (1L << (REIFIED - 66)) | (1L << (QUOTE_OPEN - 66)))) != 0) || ((((_la - 130)) & ~0x3f) == 0 && ((1L << (_la - 130)) & ((1L << (TRIPLE_QUOTE_OPEN - 130)) | (1L << (RealLiteral - 130)) | (1L << (LongLiteral - 130)) | (1L << (IntegerLiteral - 130)) | (1L << (HexLiteral - 130)) | (1L << (BinLiteral - 130)) | (1L << (BooleanLiteral - 130)) | (1L << (NullLiteral - 130)) | (1L << (Identifier - 130)) | (1L << (LabelReference - 130)) | (1L << (LabelDefinition - 130)) | (1L << (CharacterLiteral - 130)))) != 0)) {
				{
				State = 2023;
				expression();
				}
			}

			State = 2030;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 2026;
				Match(COMMA);
				State = 2027;
				expression();
				}
				}
				State = 2032;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 2033;
			Match(RSQUARE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ThisExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode THIS() { return GetToken(KotlinParser.THIS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LabelReference() { return GetToken(KotlinParser.LabelReference, 0); }
		public ThisExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_thisExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IKotlinParserListener typedListener = listener as IKotlinParserListener;
			if (typedListener != null) typedListener.EnterThisExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IKotlinParserListener typedListener = listener as IKotlinParserListener;
			if (typedListener != null) typedListener.ExitThisExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKotlinParserVisitor<TResult> typedVisitor = visitor as IKotlinParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitThisExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ThisExpressionContext thisExpression() {
		ThisExpressionContext _localctx = new ThisExpressionContext(Context, State);
		EnterRule(_localctx, 190, RULE_thisExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2035;
			Match(THIS);
			State = 2037;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,303,Context) ) {
			case 1:
				{
				State = 2036;
				Match(LabelReference);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SuperExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SUPER() { return GetToken(KotlinParser.SUPER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LANGLE() { return GetToken(KotlinParser.LANGLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RANGLE() { return GetToken(KotlinParser.RANGLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LabelReference() { return GetToken(KotlinParser.LabelReference, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NL() { return GetTokens(KotlinParser.NL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NL(int i) {
			return GetToken(KotlinParser.NL, i);
		}
		public SuperExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_superExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IKotlinParserListener typedListener = listener as IKotlinParserListener;
			if (typedListener != null) typedListener.EnterSuperExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IKotlinParserListener typedListener = listener as IKotlinParserListener;
			if (typedListener != null) typedListener.ExitSuperExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKotlinParserVisitor<TResult> typedVisitor = visitor as IKotlinParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSuperExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SuperExpressionContext superExpression() {
		SuperExpressionContext _localctx = new SuperExpressionContext(Context, State);
		EnterRule(_localctx, 192, RULE_superExpression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2039;
			Match(SUPER);
			State = 2056;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,306,Context) ) {
			case 1:
				{
				State = 2040;
				Match(LANGLE);
				State = 2044;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==NL) {
					{
					{
					State = 2041;
					Match(NL);
					}
					}
					State = 2046;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 2047;
				type();
				State = 2051;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==NL) {
					{
					{
					State = 2048;
					Match(NL);
					}
					}
					State = 2053;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 2054;
				Match(RANGLE);
				}
				break;
			}
			State = 2059;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,307,Context) ) {
			case 1:
				{
				State = 2058;
				Match(LabelReference);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConditionalExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IfExpressionContext ifExpression() {
			return GetRuleContext<IfExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public WhenExpressionContext whenExpression() {
			return GetRuleContext<WhenExpressionContext>(0);
		}
		public ConditionalExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_conditionalExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IKotlinParserListener typedListener = listener as IKotlinParserListener;
			if (typedListener != null) typedListener.EnterConditionalExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IKotlinParserListener typedListener = listener as IKotlinParserListener;
			if (typedListener != null) typedListener.ExitConditionalExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKotlinParserVisitor<TResult> typedVisitor = visitor as IKotlinParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConditionalExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConditionalExpressionContext conditionalExpression() {
		ConditionalExpressionContext _localctx = new ConditionalExpressionContext(Context, State);
		EnterRule(_localctx, 194, RULE_conditionalExpression);
		try {
			State = 2063;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case IF:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2061;
				ifExpression();
				}
				break;
			case WHEN:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2062;
				whenExpression();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IfExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF() { return GetToken(KotlinParser.IF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(KotlinParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(KotlinParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NL() { return GetTokens(KotlinParser.NL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NL(int i) {
			return GetToken(KotlinParser.NL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ControlStructureBodyContext[] controlStructureBody() {
			return GetRuleContexts<ControlStructureBodyContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ControlStructureBodyContext controlStructureBody(int i) {
			return GetRuleContext<ControlStructureBodyContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON() { return GetToken(KotlinParser.SEMICOLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ELSE() { return GetToken(KotlinParser.ELSE, 0); }
		public IfExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ifExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IKotlinParserListener typedListener = listener as IKotlinParserListener;
			if (typedListener != null) typedListener.EnterIfExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IKotlinParserListener typedListener = listener as IKotlinParserListener;
			if (typedListener != null) typedListener.ExitIfExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKotlinParserVisitor<TResult> typedVisitor = visitor as IKotlinParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIfExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IfExpressionContext ifExpression() {
		IfExpressionContext _localctx = new IfExpressionContext(Context, State);
		EnterRule(_localctx, 196, RULE_ifExpression);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 2065;
			Match(IF);
			State = 2069;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==NL) {
				{
				{
				State = 2066;
				Match(NL);
				}
				}
				State = 2071;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 2072;
			Match(LPAREN);
			State = 2073;
			expression();
			State = 2074;
			Match(RPAREN);
			State = 2078;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,310,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 2075;
					Match(NL);
					}
					} 
				}
				State = 2080;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,310,Context);
			}
			State = 2082;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,311,Context) ) {
			case 1:
				{
				State = 2081;
				controlStructureBody();
				}
				break;
			}
			State = 2085;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,312,Context) ) {
			case 1:
				{
				State = 2084;
				Match(SEMICOLON);
				}
				break;
			}
			State = 2103;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,316,Context) ) {
			case 1:
				{
				State = 2090;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==NL) {
					{
					{
					State = 2087;
					Match(NL);
					}
					}
					State = 2092;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 2093;
				Match(ELSE);
				State = 2097;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,314,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 2094;
						Match(NL);
						}
						} 
					}
					State = 2099;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,314,Context);
				}
				State = 2101;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,315,Context) ) {
				case 1:
					{
					State = 2100;
					controlStructureBody();
					}
					break;
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ControlStructureBodyContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ControlStructureBodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_controlStructureBody; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IKotlinParserListener typedListener = listener as IKotlinParserListener;
			if (typedListener != null) typedListener.EnterControlStructureBody(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IKotlinParserListener typedListener = listener as IKotlinParserListener;
			if (typedListener != null) typedListener.ExitControlStructureBody(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKotlinParserVisitor<TResult> typedVisitor = visitor as IKotlinParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitControlStructureBody(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ControlStructureBodyContext controlStructureBody() {
		ControlStructureBodyContext _localctx = new ControlStructureBodyContext(Context, State);
		EnterRule(_localctx, 198, RULE_controlStructureBody);
		try {
			State = 2107;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,317,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2105;
				block();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2106;
				expression();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WhenExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WHEN() { return GetToken(KotlinParser.WHEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LCURL() { return GetToken(KotlinParser.LCURL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RCURL() { return GetToken(KotlinParser.RCURL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NL() { return GetTokens(KotlinParser.NL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NL(int i) {
			return GetToken(KotlinParser.NL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(KotlinParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(KotlinParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public WhenEntryContext[] whenEntry() {
			return GetRuleContexts<WhenEntryContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public WhenEntryContext whenEntry(int i) {
			return GetRuleContext<WhenEntryContext>(i);
		}
		public WhenExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_whenExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IKotlinParserListener typedListener = listener as IKotlinParserListener;
			if (typedListener != null) typedListener.EnterWhenExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IKotlinParserListener typedListener = listener as IKotlinParserListener;
			if (typedListener != null) typedListener.ExitWhenExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKotlinParserVisitor<TResult> typedVisitor = visitor as IKotlinParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWhenExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public WhenExpressionContext whenExpression() {
		WhenExpressionContext _localctx = new WhenExpressionContext(Context, State);
		EnterRule(_localctx, 200, RULE_whenExpression);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 2109;
			Match(WHEN);
			State = 2113;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,318,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 2110;
					Match(NL);
					}
					} 
				}
				State = 2115;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,318,Context);
			}
			State = 2120;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LPAREN) {
				{
				State = 2116;
				Match(LPAREN);
				State = 2117;
				expression();
				State = 2118;
				Match(RPAREN);
				}
			}

			State = 2125;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==NL) {
				{
				{
				State = 2122;
				Match(NL);
				}
				}
				State = 2127;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 2128;
			Match(LCURL);
			State = 2132;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,321,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 2129;
					Match(NL);
					}
					} 
				}
				State = 2134;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,321,Context);
			}
			State = 2144;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,323,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 2135;
					whenEntry();
					State = 2139;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,322,Context);
					while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
						if ( _alt==1 ) {
							{
							{
							State = 2136;
							Match(NL);
							}
							} 
						}
						State = 2141;
						ErrorHandler.Sync(this);
						_alt = Interpreter.AdaptivePredict(TokenStream,322,Context);
					}
					}
					} 
				}
				State = 2146;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,323,Context);
			}
			State = 2150;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==NL) {
				{
				{
				State = 2147;
				Match(NL);
				}
				}
				State = 2152;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 2153;
			Match(RCURL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WhenEntryContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public WhenConditionContext[] whenCondition() {
			return GetRuleContexts<WhenConditionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public WhenConditionContext whenCondition(int i) {
			return GetRuleContext<WhenConditionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ARROW() { return GetToken(KotlinParser.ARROW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ControlStructureBodyContext controlStructureBody() {
			return GetRuleContext<ControlStructureBodyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(KotlinParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(KotlinParser.COMMA, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NL() { return GetTokens(KotlinParser.NL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NL(int i) {
			return GetToken(KotlinParser.NL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SemiContext semi() {
			return GetRuleContext<SemiContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ELSE() { return GetToken(KotlinParser.ELSE, 0); }
		public WhenEntryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_whenEntry; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IKotlinParserListener typedListener = listener as IKotlinParserListener;
			if (typedListener != null) typedListener.EnterWhenEntry(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IKotlinParserListener typedListener = listener as IKotlinParserListener;
			if (typedListener != null) typedListener.ExitWhenEntry(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKotlinParserVisitor<TResult> typedVisitor = visitor as IKotlinParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWhenEntry(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public WhenEntryContext whenEntry() {
		WhenEntryContext _localctx = new WhenEntryContext(Context, State);
		EnterRule(_localctx, 202, RULE_whenEntry);
		int _la;
		try {
			int _alt;
			State = 2207;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case NL:
			case LPAREN:
			case LSQUARE:
			case LCURL:
			case ADD:
			case SUB:
			case INCR:
			case DECR:
			case EXCL:
			case COLONCOLON:
			case Q_COLONCOLON:
			case AT:
			case RETURN_AT:
			case CONTINUE_AT:
			case BREAK_AT:
			case FILE:
			case IMPORT:
			case OBJECT:
			case CONSTRUCTOR:
			case BY:
			case COMPANION:
			case INIT:
			case THIS:
			case SUPER:
			case WHERE:
			case IF:
			case WHEN:
			case TRY:
			case CATCH:
			case FINALLY:
			case FOR:
			case DO:
			case WHILE:
			case THROW:
			case RETURN:
			case CONTINUE:
			case BREAK:
			case IS:
			case IN:
			case NOT_IS:
			case NOT_IN:
			case OUT:
			case FIELD:
			case PROPERTY:
			case GET:
			case SET:
			case GETTER:
			case SETTER:
			case RECEIVER:
			case PARAM:
			case SETPARAM:
			case DELEGATE:
			case DYNAMIC:
			case PUBLIC:
			case PRIVATE:
			case PROTECTED:
			case INTERNAL:
			case ENUM:
			case SEALED:
			case ANNOTATION:
			case DATA:
			case INNER:
			case TAILREC:
			case OPERATOR:
			case INLINE:
			case INFIX:
			case EXTERNAL:
			case SUSPEND:
			case OVERRIDE:
			case ABSTRACT:
			case FINAL:
			case OPEN:
			case CONST:
			case LATEINIT:
			case VARARG:
			case NOINLINE:
			case CROSSINLINE:
			case REIFIED:
			case QUOTE_OPEN:
			case TRIPLE_QUOTE_OPEN:
			case RealLiteral:
			case LongLiteral:
			case IntegerLiteral:
			case HexLiteral:
			case BinLiteral:
			case BooleanLiteral:
			case NullLiteral:
			case Identifier:
			case LabelReference:
			case LabelDefinition:
			case CharacterLiteral:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2155;
				whenCondition();
				State = 2172;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,327,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 2159;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						while (_la==NL) {
							{
							{
							State = 2156;
							Match(NL);
							}
							}
							State = 2161;
							ErrorHandler.Sync(this);
							_la = TokenStream.LA(1);
						}
						State = 2162;
						Match(COMMA);
						State = 2166;
						ErrorHandler.Sync(this);
						_alt = Interpreter.AdaptivePredict(TokenStream,326,Context);
						while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
							if ( _alt==1 ) {
								{
								{
								State = 2163;
								Match(NL);
								}
								} 
							}
							State = 2168;
							ErrorHandler.Sync(this);
							_alt = Interpreter.AdaptivePredict(TokenStream,326,Context);
						}
						State = 2169;
						whenCondition();
						}
						} 
					}
					State = 2174;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,327,Context);
				}
				State = 2178;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==NL) {
					{
					{
					State = 2175;
					Match(NL);
					}
					}
					State = 2180;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 2181;
				Match(ARROW);
				State = 2185;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,329,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 2182;
						Match(NL);
						}
						} 
					}
					State = 2187;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,329,Context);
				}
				State = 2188;
				controlStructureBody();
				State = 2190;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,330,Context) ) {
				case 1:
					{
					State = 2189;
					semi();
					}
					break;
				}
				}
				break;
			case ELSE:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2192;
				Match(ELSE);
				State = 2196;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==NL) {
					{
					{
					State = 2193;
					Match(NL);
					}
					}
					State = 2198;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 2199;
				Match(ARROW);
				State = 2203;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,332,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 2200;
						Match(NL);
						}
						} 
					}
					State = 2205;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,332,Context);
				}
				State = 2206;
				controlStructureBody();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WhenConditionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RangeTestContext rangeTest() {
			return GetRuleContext<RangeTestContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeTestContext typeTest() {
			return GetRuleContext<TypeTestContext>(0);
		}
		public WhenConditionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_whenCondition; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IKotlinParserListener typedListener = listener as IKotlinParserListener;
			if (typedListener != null) typedListener.EnterWhenCondition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IKotlinParserListener typedListener = listener as IKotlinParserListener;
			if (typedListener != null) typedListener.ExitWhenCondition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKotlinParserVisitor<TResult> typedVisitor = visitor as IKotlinParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWhenCondition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public WhenConditionContext whenCondition() {
		WhenConditionContext _localctx = new WhenConditionContext(Context, State);
		EnterRule(_localctx, 204, RULE_whenCondition);
		try {
			State = 2212;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case NL:
			case LPAREN:
			case LSQUARE:
			case LCURL:
			case ADD:
			case SUB:
			case INCR:
			case DECR:
			case EXCL:
			case COLONCOLON:
			case Q_COLONCOLON:
			case AT:
			case RETURN_AT:
			case CONTINUE_AT:
			case BREAK_AT:
			case FILE:
			case IMPORT:
			case OBJECT:
			case CONSTRUCTOR:
			case BY:
			case COMPANION:
			case INIT:
			case THIS:
			case SUPER:
			case WHERE:
			case IF:
			case WHEN:
			case TRY:
			case CATCH:
			case FINALLY:
			case FOR:
			case DO:
			case WHILE:
			case THROW:
			case RETURN:
			case CONTINUE:
			case BREAK:
			case OUT:
			case FIELD:
			case PROPERTY:
			case GET:
			case SET:
			case GETTER:
			case SETTER:
			case RECEIVER:
			case PARAM:
			case SETPARAM:
			case DELEGATE:
			case DYNAMIC:
			case PUBLIC:
			case PRIVATE:
			case PROTECTED:
			case INTERNAL:
			case ENUM:
			case SEALED:
			case ANNOTATION:
			case DATA:
			case INNER:
			case TAILREC:
			case OPERATOR:
			case INLINE:
			case INFIX:
			case EXTERNAL:
			case SUSPEND:
			case OVERRIDE:
			case ABSTRACT:
			case FINAL:
			case OPEN:
			case CONST:
			case LATEINIT:
			case VARARG:
			case NOINLINE:
			case CROSSINLINE:
			case REIFIED:
			case QUOTE_OPEN:
			case TRIPLE_QUOTE_OPEN:
			case RealLiteral:
			case LongLiteral:
			case IntegerLiteral:
			case HexLiteral:
			case BinLiteral:
			case BooleanLiteral:
			case NullLiteral:
			case Identifier:
			case LabelReference:
			case LabelDefinition:
			case CharacterLiteral:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2209;
				expression();
				}
				break;
			case IN:
			case NOT_IN:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2210;
				rangeTest();
				}
				break;
			case IS:
			case NOT_IS:
				EnterOuterAlt(_localctx, 3);
				{
				State = 2211;
				typeTest();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RangeTestContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public InOperatorContext inOperator() {
			return GetRuleContext<InOperatorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NL() { return GetTokens(KotlinParser.NL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NL(int i) {
			return GetToken(KotlinParser.NL, i);
		}
		public RangeTestContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rangeTest; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IKotlinParserListener typedListener = listener as IKotlinParserListener;
			if (typedListener != null) typedListener.EnterRangeTest(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IKotlinParserListener typedListener = listener as IKotlinParserListener;
			if (typedListener != null) typedListener.ExitRangeTest(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKotlinParserVisitor<TResult> typedVisitor = visitor as IKotlinParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRangeTest(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RangeTestContext rangeTest() {
		RangeTestContext _localctx = new RangeTestContext(Context, State);
		EnterRule(_localctx, 206, RULE_rangeTest);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 2214;
			inOperator();
			State = 2218;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,335,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 2215;
					Match(NL);
					}
					} 
				}
				State = 2220;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,335,Context);
			}
			State = 2221;
			expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeTestContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IsOperatorContext isOperator() {
			return GetRuleContext<IsOperatorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NL() { return GetTokens(KotlinParser.NL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NL(int i) {
			return GetToken(KotlinParser.NL, i);
		}
		public TypeTestContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeTest; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IKotlinParserListener typedListener = listener as IKotlinParserListener;
			if (typedListener != null) typedListener.EnterTypeTest(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IKotlinParserListener typedListener = listener as IKotlinParserListener;
			if (typedListener != null) typedListener.ExitTypeTest(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKotlinParserVisitor<TResult> typedVisitor = visitor as IKotlinParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeTest(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeTestContext typeTest() {
		TypeTestContext _localctx = new TypeTestContext(Context, State);
		EnterRule(_localctx, 208, RULE_typeTest);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2223;
			isOperator();
			State = 2227;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==NL) {
				{
				{
				State = 2224;
				Match(NL);
				}
				}
				State = 2229;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 2230;
			type();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TryExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TRY() { return GetToken(KotlinParser.TRY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NL() { return GetTokens(KotlinParser.NL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NL(int i) {
			return GetToken(KotlinParser.NL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CatchBlockContext[] catchBlock() {
			return GetRuleContexts<CatchBlockContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public CatchBlockContext catchBlock(int i) {
			return GetRuleContext<CatchBlockContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FinallyBlockContext finallyBlock() {
			return GetRuleContext<FinallyBlockContext>(0);
		}
		public TryExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tryExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IKotlinParserListener typedListener = listener as IKotlinParserListener;
			if (typedListener != null) typedListener.EnterTryExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IKotlinParserListener typedListener = listener as IKotlinParserListener;
			if (typedListener != null) typedListener.ExitTryExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKotlinParserVisitor<TResult> typedVisitor = visitor as IKotlinParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTryExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TryExpressionContext tryExpression() {
		TryExpressionContext _localctx = new TryExpressionContext(Context, State);
		EnterRule(_localctx, 210, RULE_tryExpression);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 2232;
			Match(TRY);
			State = 2236;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==NL) {
				{
				{
				State = 2233;
				Match(NL);
				}
				}
				State = 2238;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 2239;
			block();
			State = 2249;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,339,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 2243;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (_la==NL) {
						{
						{
						State = 2240;
						Match(NL);
						}
						}
						State = 2245;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					State = 2246;
					catchBlock();
					}
					} 
				}
				State = 2251;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,339,Context);
			}
			State = 2259;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,341,Context) ) {
			case 1:
				{
				State = 2255;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==NL) {
					{
					{
					State = 2252;
					Match(NL);
					}
					}
					State = 2257;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 2258;
				finallyBlock();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CatchBlockContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CATCH() { return GetToken(KotlinParser.CATCH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(KotlinParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SimpleIdentifierContext simpleIdentifier() {
			return GetRuleContext<SimpleIdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(KotlinParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UserTypeContext userType() {
			return GetRuleContext<UserTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(KotlinParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NL() { return GetTokens(KotlinParser.NL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NL(int i) {
			return GetToken(KotlinParser.NL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AnnotationsContext[] annotations() {
			return GetRuleContexts<AnnotationsContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AnnotationsContext annotations(int i) {
			return GetRuleContext<AnnotationsContext>(i);
		}
		public CatchBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_catchBlock; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IKotlinParserListener typedListener = listener as IKotlinParserListener;
			if (typedListener != null) typedListener.EnterCatchBlock(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IKotlinParserListener typedListener = listener as IKotlinParserListener;
			if (typedListener != null) typedListener.ExitCatchBlock(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKotlinParserVisitor<TResult> typedVisitor = visitor as IKotlinParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCatchBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CatchBlockContext catchBlock() {
		CatchBlockContext _localctx = new CatchBlockContext(Context, State);
		EnterRule(_localctx, 212, RULE_catchBlock);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2261;
			Match(CATCH);
			State = 2265;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==NL) {
				{
				{
				State = 2262;
				Match(NL);
				}
				}
				State = 2267;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 2268;
			Match(LPAREN);
			State = 2272;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==AT || _la==FILE || ((((_la - 93)) & ~0x3f) == 0 && ((1L << (_la - 93)) & ((1L << (FIELD - 93)) | (1L << (PROPERTY - 93)) | (1L << (GET - 93)) | (1L << (SET - 93)) | (1L << (RECEIVER - 93)) | (1L << (PARAM - 93)) | (1L << (SETPARAM - 93)) | (1L << (DELEGATE - 93)) | (1L << (LabelReference - 93)))) != 0)) {
				{
				{
				State = 2269;
				annotations();
				}
				}
				State = 2274;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 2275;
			simpleIdentifier();
			State = 2276;
			Match(COLON);
			State = 2277;
			userType();
			State = 2278;
			Match(RPAREN);
			State = 2282;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==NL) {
				{
				{
				State = 2279;
				Match(NL);
				}
				}
				State = 2284;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 2285;
			block();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FinallyBlockContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FINALLY() { return GetToken(KotlinParser.FINALLY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NL() { return GetTokens(KotlinParser.NL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NL(int i) {
			return GetToken(KotlinParser.NL, i);
		}
		public FinallyBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_finallyBlock; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IKotlinParserListener typedListener = listener as IKotlinParserListener;
			if (typedListener != null) typedListener.EnterFinallyBlock(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IKotlinParserListener typedListener = listener as IKotlinParserListener;
			if (typedListener != null) typedListener.ExitFinallyBlock(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKotlinParserVisitor<TResult> typedVisitor = visitor as IKotlinParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFinallyBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FinallyBlockContext finallyBlock() {
		FinallyBlockContext _localctx = new FinallyBlockContext(Context, State);
		EnterRule(_localctx, 214, RULE_finallyBlock);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2287;
			Match(FINALLY);
			State = 2291;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==NL) {
				{
				{
				State = 2288;
				Match(NL);
				}
				}
				State = 2293;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 2294;
			block();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LoopExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ForExpressionContext forExpression() {
			return GetRuleContext<ForExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public WhileExpressionContext whileExpression() {
			return GetRuleContext<WhileExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DoWhileExpressionContext doWhileExpression() {
			return GetRuleContext<DoWhileExpressionContext>(0);
		}
		public LoopExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_loopExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IKotlinParserListener typedListener = listener as IKotlinParserListener;
			if (typedListener != null) typedListener.EnterLoopExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IKotlinParserListener typedListener = listener as IKotlinParserListener;
			if (typedListener != null) typedListener.ExitLoopExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKotlinParserVisitor<TResult> typedVisitor = visitor as IKotlinParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLoopExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LoopExpressionContext loopExpression() {
		LoopExpressionContext _localctx = new LoopExpressionContext(Context, State);
		EnterRule(_localctx, 216, RULE_loopExpression);
		try {
			State = 2299;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case FOR:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2296;
				forExpression();
				}
				break;
			case WHILE:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2297;
				whileExpression();
				}
				break;
			case DO:
				EnterOuterAlt(_localctx, 3);
				{
				State = 2298;
				doWhileExpression();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ForExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOR() { return GetToken(KotlinParser.FOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(KotlinParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IN() { return GetToken(KotlinParser.IN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(KotlinParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public VariableDeclarationContext variableDeclaration() {
			return GetRuleContext<VariableDeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MultiVariableDeclarationContext multiVariableDeclaration() {
			return GetRuleContext<MultiVariableDeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NL() { return GetTokens(KotlinParser.NL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NL(int i) {
			return GetToken(KotlinParser.NL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AnnotationsContext[] annotations() {
			return GetRuleContexts<AnnotationsContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AnnotationsContext annotations(int i) {
			return GetRuleContext<AnnotationsContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ControlStructureBodyContext controlStructureBody() {
			return GetRuleContext<ControlStructureBodyContext>(0);
		}
		public ForExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_forExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IKotlinParserListener typedListener = listener as IKotlinParserListener;
			if (typedListener != null) typedListener.EnterForExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IKotlinParserListener typedListener = listener as IKotlinParserListener;
			if (typedListener != null) typedListener.ExitForExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKotlinParserVisitor<TResult> typedVisitor = visitor as IKotlinParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ForExpressionContext forExpression() {
		ForExpressionContext _localctx = new ForExpressionContext(Context, State);
		EnterRule(_localctx, 218, RULE_forExpression);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 2301;
			Match(FOR);
			State = 2305;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==NL) {
				{
				{
				State = 2302;
				Match(NL);
				}
				}
				State = 2307;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 2308;
			Match(LPAREN);
			State = 2312;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==AT || _la==FILE || ((((_la - 93)) & ~0x3f) == 0 && ((1L << (_la - 93)) & ((1L << (FIELD - 93)) | (1L << (PROPERTY - 93)) | (1L << (GET - 93)) | (1L << (SET - 93)) | (1L << (RECEIVER - 93)) | (1L << (PARAM - 93)) | (1L << (SETPARAM - 93)) | (1L << (DELEGATE - 93)) | (1L << (LabelReference - 93)))) != 0)) {
				{
				{
				State = 2309;
				annotations();
				}
				}
				State = 2314;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 2317;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case IMPORT:
			case CONSTRUCTOR:
			case BY:
			case COMPANION:
			case INIT:
			case WHERE:
			case CATCH:
			case FINALLY:
			case OUT:
			case GETTER:
			case SETTER:
			case DYNAMIC:
			case PUBLIC:
			case PRIVATE:
			case PROTECTED:
			case INTERNAL:
			case ENUM:
			case SEALED:
			case ANNOTATION:
			case DATA:
			case INNER:
			case TAILREC:
			case OPERATOR:
			case INLINE:
			case INFIX:
			case EXTERNAL:
			case SUSPEND:
			case OVERRIDE:
			case ABSTRACT:
			case FINAL:
			case OPEN:
			case CONST:
			case LATEINIT:
			case VARARG:
			case NOINLINE:
			case CROSSINLINE:
			case REIFIED:
			case Identifier:
				{
				State = 2315;
				variableDeclaration();
				}
				break;
			case LPAREN:
				{
				State = 2316;
				multiVariableDeclaration();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 2319;
			Match(IN);
			State = 2320;
			expression();
			State = 2321;
			Match(RPAREN);
			State = 2325;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,350,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 2322;
					Match(NL);
					}
					} 
				}
				State = 2327;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,350,Context);
			}
			State = 2329;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,351,Context) ) {
			case 1:
				{
				State = 2328;
				controlStructureBody();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WhileExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WHILE() { return GetToken(KotlinParser.WHILE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(KotlinParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(KotlinParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NL() { return GetTokens(KotlinParser.NL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NL(int i) {
			return GetToken(KotlinParser.NL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ControlStructureBodyContext controlStructureBody() {
			return GetRuleContext<ControlStructureBodyContext>(0);
		}
		public WhileExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_whileExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IKotlinParserListener typedListener = listener as IKotlinParserListener;
			if (typedListener != null) typedListener.EnterWhileExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IKotlinParserListener typedListener = listener as IKotlinParserListener;
			if (typedListener != null) typedListener.ExitWhileExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKotlinParserVisitor<TResult> typedVisitor = visitor as IKotlinParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWhileExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public WhileExpressionContext whileExpression() {
		WhileExpressionContext _localctx = new WhileExpressionContext(Context, State);
		EnterRule(_localctx, 220, RULE_whileExpression);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 2331;
			Match(WHILE);
			State = 2335;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==NL) {
				{
				{
				State = 2332;
				Match(NL);
				}
				}
				State = 2337;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 2338;
			Match(LPAREN);
			State = 2339;
			expression();
			State = 2340;
			Match(RPAREN);
			State = 2344;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,353,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 2341;
					Match(NL);
					}
					} 
				}
				State = 2346;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,353,Context);
			}
			State = 2348;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,354,Context) ) {
			case 1:
				{
				State = 2347;
				controlStructureBody();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DoWhileExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DO() { return GetToken(KotlinParser.DO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WHILE() { return GetToken(KotlinParser.WHILE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(KotlinParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(KotlinParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NL() { return GetTokens(KotlinParser.NL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NL(int i) {
			return GetToken(KotlinParser.NL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ControlStructureBodyContext controlStructureBody() {
			return GetRuleContext<ControlStructureBodyContext>(0);
		}
		public DoWhileExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_doWhileExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IKotlinParserListener typedListener = listener as IKotlinParserListener;
			if (typedListener != null) typedListener.EnterDoWhileExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IKotlinParserListener typedListener = listener as IKotlinParserListener;
			if (typedListener != null) typedListener.ExitDoWhileExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKotlinParserVisitor<TResult> typedVisitor = visitor as IKotlinParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDoWhileExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DoWhileExpressionContext doWhileExpression() {
		DoWhileExpressionContext _localctx = new DoWhileExpressionContext(Context, State);
		EnterRule(_localctx, 222, RULE_doWhileExpression);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 2350;
			Match(DO);
			State = 2354;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,355,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 2351;
					Match(NL);
					}
					} 
				}
				State = 2356;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,355,Context);
			}
			State = 2358;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,356,Context) ) {
			case 1:
				{
				State = 2357;
				controlStructureBody();
				}
				break;
			}
			State = 2363;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==NL) {
				{
				{
				State = 2360;
				Match(NL);
				}
				}
				State = 2365;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 2366;
			Match(WHILE);
			State = 2370;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==NL) {
				{
				{
				State = 2367;
				Match(NL);
				}
				}
				State = 2372;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 2373;
			Match(LPAREN);
			State = 2374;
			expression();
			State = 2375;
			Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class JumpExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode THROW() { return GetToken(KotlinParser.THROW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NL() { return GetTokens(KotlinParser.NL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NL(int i) {
			return GetToken(KotlinParser.NL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RETURN() { return GetToken(KotlinParser.RETURN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RETURN_AT() { return GetToken(KotlinParser.RETURN_AT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONTINUE() { return GetToken(KotlinParser.CONTINUE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONTINUE_AT() { return GetToken(KotlinParser.CONTINUE_AT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BREAK() { return GetToken(KotlinParser.BREAK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BREAK_AT() { return GetToken(KotlinParser.BREAK_AT, 0); }
		public JumpExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_jumpExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IKotlinParserListener typedListener = listener as IKotlinParserListener;
			if (typedListener != null) typedListener.EnterJumpExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IKotlinParserListener typedListener = listener as IKotlinParserListener;
			if (typedListener != null) typedListener.ExitJumpExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKotlinParserVisitor<TResult> typedVisitor = visitor as IKotlinParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitJumpExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public JumpExpressionContext jumpExpression() {
		JumpExpressionContext _localctx = new JumpExpressionContext(Context, State);
		EnterRule(_localctx, 224, RULE_jumpExpression);
		int _la;
		try {
			int _alt;
			State = 2393;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case THROW:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2377;
				Match(THROW);
				State = 2381;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,359,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 2378;
						Match(NL);
						}
						} 
					}
					State = 2383;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,359,Context);
				}
				State = 2384;
				expression();
				}
				break;
			case RETURN_AT:
			case RETURN:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2385;
				_la = TokenStream.LA(1);
				if ( !(_la==RETURN_AT || _la==RETURN) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 2387;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,360,Context) ) {
				case 1:
					{
					State = 2386;
					expression();
					}
					break;
				}
				}
				break;
			case CONTINUE:
				EnterOuterAlt(_localctx, 3);
				{
				State = 2389;
				Match(CONTINUE);
				}
				break;
			case CONTINUE_AT:
				EnterOuterAlt(_localctx, 4);
				{
				State = 2390;
				Match(CONTINUE_AT);
				}
				break;
			case BREAK:
				EnterOuterAlt(_localctx, 5);
				{
				State = 2391;
				Match(BREAK);
				}
				break;
			case BREAK_AT:
				EnterOuterAlt(_localctx, 6);
				{
				State = 2392;
				Match(BREAK_AT);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CallableReferenceContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLONCOLON() { return GetToken(KotlinParser.COLONCOLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Q_COLONCOLON() { return GetToken(KotlinParser.Q_COLONCOLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLASS() { return GetToken(KotlinParser.CLASS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UserTypeContext userType() {
			return GetRuleContext<UserTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NL() { return GetTokens(KotlinParser.NL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NL(int i) {
			return GetToken(KotlinParser.NL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] QUEST() { return GetTokens(KotlinParser.QUEST); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode QUEST(int i) {
			return GetToken(KotlinParser.QUEST, i);
		}
		public CallableReferenceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_callableReference; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IKotlinParserListener typedListener = listener as IKotlinParserListener;
			if (typedListener != null) typedListener.EnterCallableReference(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IKotlinParserListener typedListener = listener as IKotlinParserListener;
			if (typedListener != null) typedListener.ExitCallableReference(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKotlinParserVisitor<TResult> typedVisitor = visitor as IKotlinParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCallableReference(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CallableReferenceContext callableReference() {
		CallableReferenceContext _localctx = new CallableReferenceContext(Context, State);
		EnterRule(_localctx, 226, RULE_callableReference);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 2408;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (((((_la - 58)) & ~0x3f) == 0 && ((1L << (_la - 58)) & ((1L << (IMPORT - 58)) | (1L << (CONSTRUCTOR - 58)) | (1L << (BY - 58)) | (1L << (COMPANION - 58)) | (1L << (INIT - 58)) | (1L << (WHERE - 58)) | (1L << (CATCH - 58)) | (1L << (FINALLY - 58)) | (1L << (OUT - 58)) | (1L << (GETTER - 58)) | (1L << (SETTER - 58)) | (1L << (DYNAMIC - 58)) | (1L << (PUBLIC - 58)) | (1L << (PRIVATE - 58)) | (1L << (PROTECTED - 58)) | (1L << (INTERNAL - 58)) | (1L << (ENUM - 58)) | (1L << (SEALED - 58)) | (1L << (ANNOTATION - 58)) | (1L << (DATA - 58)) | (1L << (INNER - 58)) | (1L << (TAILREC - 58)) | (1L << (OPERATOR - 58)) | (1L << (INLINE - 58)) | (1L << (INFIX - 58)) | (1L << (EXTERNAL - 58)) | (1L << (SUSPEND - 58)) | (1L << (OVERRIDE - 58)) | (1L << (ABSTRACT - 58)) | (1L << (FINAL - 58)))) != 0) || ((((_la - 122)) & ~0x3f) == 0 && ((1L << (_la - 122)) & ((1L << (OPEN - 122)) | (1L << (CONST - 122)) | (1L << (LATEINIT - 122)) | (1L << (VARARG - 122)) | (1L << (NOINLINE - 122)) | (1L << (CROSSINLINE - 122)) | (1L << (REIFIED - 122)) | (1L << (Identifier - 122)))) != 0)) {
				{
				State = 2395;
				userType();
				State = 2405;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==QUEST) {
					{
					{
					State = 2396;
					Match(QUEST);
					State = 2400;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,362,Context);
					while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
						if ( _alt==1 ) {
							{
							{
							State = 2397;
							Match(NL);
							}
							} 
						}
						State = 2402;
						ErrorHandler.Sync(this);
						_alt = Interpreter.AdaptivePredict(TokenStream,362,Context);
					}
					}
					}
					State = 2407;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
			}

			State = 2413;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==NL) {
				{
				{
				State = 2410;
				Match(NL);
				}
				}
				State = 2415;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 2416;
			_la = TokenStream.LA(1);
			if ( !(_la==COLONCOLON || _la==Q_COLONCOLON) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 2420;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==NL) {
				{
				{
				State = 2417;
				Match(NL);
				}
				}
				State = 2422;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 2425;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case IMPORT:
			case CONSTRUCTOR:
			case BY:
			case COMPANION:
			case INIT:
			case WHERE:
			case CATCH:
			case FINALLY:
			case OUT:
			case GETTER:
			case SETTER:
			case DYNAMIC:
			case PUBLIC:
			case PRIVATE:
			case PROTECTED:
			case INTERNAL:
			case ENUM:
			case SEALED:
			case ANNOTATION:
			case DATA:
			case INNER:
			case TAILREC:
			case OPERATOR:
			case INLINE:
			case INFIX:
			case EXTERNAL:
			case SUSPEND:
			case OVERRIDE:
			case ABSTRACT:
			case FINAL:
			case OPEN:
			case CONST:
			case LATEINIT:
			case VARARG:
			case NOINLINE:
			case CROSSINLINE:
			case REIFIED:
			case Identifier:
				{
				State = 2423;
				identifier();
				}
				break;
			case CLASS:
				{
				State = 2424;
				Match(CLASS);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssignmentOperatorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGNMENT() { return GetToken(KotlinParser.ASSIGNMENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ADD_ASSIGNMENT() { return GetToken(KotlinParser.ADD_ASSIGNMENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SUB_ASSIGNMENT() { return GetToken(KotlinParser.SUB_ASSIGNMENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MULT_ASSIGNMENT() { return GetToken(KotlinParser.MULT_ASSIGNMENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DIV_ASSIGNMENT() { return GetToken(KotlinParser.DIV_ASSIGNMENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MOD_ASSIGNMENT() { return GetToken(KotlinParser.MOD_ASSIGNMENT, 0); }
		public AssignmentOperatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assignmentOperator; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IKotlinParserListener typedListener = listener as IKotlinParserListener;
			if (typedListener != null) typedListener.EnterAssignmentOperator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IKotlinParserListener typedListener = listener as IKotlinParserListener;
			if (typedListener != null) typedListener.ExitAssignmentOperator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKotlinParserVisitor<TResult> typedVisitor = visitor as IKotlinParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssignmentOperator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AssignmentOperatorContext assignmentOperator() {
		AssignmentOperatorContext _localctx = new AssignmentOperatorContext(Context, State);
		EnterRule(_localctx, 228, RULE_assignmentOperator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2427;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ASSIGNMENT) | (1L << ADD_ASSIGNMENT) | (1L << SUB_ASSIGNMENT) | (1L << MULT_ASSIGNMENT) | (1L << DIV_ASSIGNMENT) | (1L << MOD_ASSIGNMENT))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EqualityOperationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXCL_EQ() { return GetToken(KotlinParser.EXCL_EQ, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXCL_EQEQ() { return GetToken(KotlinParser.EXCL_EQEQ, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQEQ() { return GetToken(KotlinParser.EQEQ, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQEQEQ() { return GetToken(KotlinParser.EQEQEQ, 0); }
		public EqualityOperationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_equalityOperation; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IKotlinParserListener typedListener = listener as IKotlinParserListener;
			if (typedListener != null) typedListener.EnterEqualityOperation(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IKotlinParserListener typedListener = listener as IKotlinParserListener;
			if (typedListener != null) typedListener.ExitEqualityOperation(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKotlinParserVisitor<TResult> typedVisitor = visitor as IKotlinParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEqualityOperation(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EqualityOperationContext equalityOperation() {
		EqualityOperationContext _localctx = new EqualityOperationContext(Context, State);
		EnterRule(_localctx, 230, RULE_equalityOperation);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2429;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << EXCL_EQ) | (1L << EXCL_EQEQ) | (1L << EQEQ) | (1L << EQEQEQ))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ComparisonOperatorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LANGLE() { return GetToken(KotlinParser.LANGLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RANGLE() { return GetToken(KotlinParser.RANGLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LE() { return GetToken(KotlinParser.LE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GE() { return GetToken(KotlinParser.GE, 0); }
		public ComparisonOperatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_comparisonOperator; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IKotlinParserListener typedListener = listener as IKotlinParserListener;
			if (typedListener != null) typedListener.EnterComparisonOperator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IKotlinParserListener typedListener = listener as IKotlinParserListener;
			if (typedListener != null) typedListener.ExitComparisonOperator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKotlinParserVisitor<TResult> typedVisitor = visitor as IKotlinParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitComparisonOperator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ComparisonOperatorContext comparisonOperator() {
		ComparisonOperatorContext _localctx = new ComparisonOperatorContext(Context, State);
		EnterRule(_localctx, 232, RULE_comparisonOperator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2431;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << LANGLE) | (1L << RANGLE) | (1L << LE) | (1L << GE))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InOperatorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IN() { return GetToken(KotlinParser.IN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT_IN() { return GetToken(KotlinParser.NOT_IN, 0); }
		public InOperatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_inOperator; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IKotlinParserListener typedListener = listener as IKotlinParserListener;
			if (typedListener != null) typedListener.EnterInOperator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IKotlinParserListener typedListener = listener as IKotlinParserListener;
			if (typedListener != null) typedListener.ExitInOperator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKotlinParserVisitor<TResult> typedVisitor = visitor as IKotlinParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInOperator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InOperatorContext inOperator() {
		InOperatorContext _localctx = new InOperatorContext(Context, State);
		EnterRule(_localctx, 234, RULE_inOperator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2433;
			_la = TokenStream.LA(1);
			if ( !(_la==IN || _la==NOT_IN) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IsOperatorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IS() { return GetToken(KotlinParser.IS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT_IS() { return GetToken(KotlinParser.NOT_IS, 0); }
		public IsOperatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_isOperator; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IKotlinParserListener typedListener = listener as IKotlinParserListener;
			if (typedListener != null) typedListener.EnterIsOperator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IKotlinParserListener typedListener = listener as IKotlinParserListener;
			if (typedListener != null) typedListener.ExitIsOperator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKotlinParserVisitor<TResult> typedVisitor = visitor as IKotlinParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIsOperator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IsOperatorContext isOperator() {
		IsOperatorContext _localctx = new IsOperatorContext(Context, State);
		EnterRule(_localctx, 236, RULE_isOperator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2435;
			_la = TokenStream.LA(1);
			if ( !(_la==IS || _la==NOT_IS) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AdditiveOperatorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ADD() { return GetToken(KotlinParser.ADD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SUB() { return GetToken(KotlinParser.SUB, 0); }
		public AdditiveOperatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_additiveOperator; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IKotlinParserListener typedListener = listener as IKotlinParserListener;
			if (typedListener != null) typedListener.EnterAdditiveOperator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IKotlinParserListener typedListener = listener as IKotlinParserListener;
			if (typedListener != null) typedListener.ExitAdditiveOperator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKotlinParserVisitor<TResult> typedVisitor = visitor as IKotlinParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAdditiveOperator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AdditiveOperatorContext additiveOperator() {
		AdditiveOperatorContext _localctx = new AdditiveOperatorContext(Context, State);
		EnterRule(_localctx, 238, RULE_additiveOperator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2437;
			_la = TokenStream.LA(1);
			if ( !(_la==ADD || _la==SUB) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MultiplicativeOperationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MULT() { return GetToken(KotlinParser.MULT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DIV() { return GetToken(KotlinParser.DIV, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MOD() { return GetToken(KotlinParser.MOD, 0); }
		public MultiplicativeOperationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_multiplicativeOperation; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IKotlinParserListener typedListener = listener as IKotlinParserListener;
			if (typedListener != null) typedListener.EnterMultiplicativeOperation(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IKotlinParserListener typedListener = listener as IKotlinParserListener;
			if (typedListener != null) typedListener.ExitMultiplicativeOperation(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKotlinParserVisitor<TResult> typedVisitor = visitor as IKotlinParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMultiplicativeOperation(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MultiplicativeOperationContext multiplicativeOperation() {
		MultiplicativeOperationContext _localctx = new MultiplicativeOperationContext(Context, State);
		EnterRule(_localctx, 240, RULE_multiplicativeOperation);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2439;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << MULT) | (1L << MOD) | (1L << DIV))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeOperationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AS() { return GetToken(KotlinParser.AS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AS_SAFE() { return GetToken(KotlinParser.AS_SAFE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(KotlinParser.COLON, 0); }
		public TypeOperationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeOperation; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IKotlinParserListener typedListener = listener as IKotlinParserListener;
			if (typedListener != null) typedListener.EnterTypeOperation(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IKotlinParserListener typedListener = listener as IKotlinParserListener;
			if (typedListener != null) typedListener.ExitTypeOperation(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKotlinParserVisitor<TResult> typedVisitor = visitor as IKotlinParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeOperation(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeOperationContext typeOperation() {
		TypeOperationContext _localctx = new TypeOperationContext(Context, State);
		EnterRule(_localctx, 242, RULE_typeOperation);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2441;
			_la = TokenStream.LA(1);
			if ( !(((((_la - 25)) & ~0x3f) == 0 && ((1L << (_la - 25)) & ((1L << (COLON - 25)) | (1L << (AS_SAFE - 25)) | (1L << (AS - 25)))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PrefixUnaryOperationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INCR() { return GetToken(KotlinParser.INCR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DECR() { return GetToken(KotlinParser.DECR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ADD() { return GetToken(KotlinParser.ADD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SUB() { return GetToken(KotlinParser.SUB, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXCL() { return GetToken(KotlinParser.EXCL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public AnnotationsContext annotations() {
			return GetRuleContext<AnnotationsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LabelDefinitionContext labelDefinition() {
			return GetRuleContext<LabelDefinitionContext>(0);
		}
		public PrefixUnaryOperationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_prefixUnaryOperation; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IKotlinParserListener typedListener = listener as IKotlinParserListener;
			if (typedListener != null) typedListener.EnterPrefixUnaryOperation(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IKotlinParserListener typedListener = listener as IKotlinParserListener;
			if (typedListener != null) typedListener.ExitPrefixUnaryOperation(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKotlinParserVisitor<TResult> typedVisitor = visitor as IKotlinParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrefixUnaryOperation(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PrefixUnaryOperationContext prefixUnaryOperation() {
		PrefixUnaryOperationContext _localctx = new PrefixUnaryOperationContext(Context, State);
		EnterRule(_localctx, 244, RULE_prefixUnaryOperation);
		try {
			State = 2450;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case INCR:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2443;
				Match(INCR);
				}
				break;
			case DECR:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2444;
				Match(DECR);
				}
				break;
			case ADD:
				EnterOuterAlt(_localctx, 3);
				{
				State = 2445;
				Match(ADD);
				}
				break;
			case SUB:
				EnterOuterAlt(_localctx, 4);
				{
				State = 2446;
				Match(SUB);
				}
				break;
			case EXCL:
				EnterOuterAlt(_localctx, 5);
				{
				State = 2447;
				Match(EXCL);
				}
				break;
			case AT:
			case FILE:
			case FIELD:
			case PROPERTY:
			case GET:
			case SET:
			case RECEIVER:
			case PARAM:
			case SETPARAM:
			case DELEGATE:
			case LabelReference:
				EnterOuterAlt(_localctx, 6);
				{
				State = 2448;
				annotations();
				}
				break;
			case LabelDefinition:
				EnterOuterAlt(_localctx, 7);
				{
				State = 2449;
				labelDefinition();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PostfixUnaryOperationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INCR() { return GetToken(KotlinParser.INCR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DECR() { return GetToken(KotlinParser.DECR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] EXCL() { return GetTokens(KotlinParser.EXCL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXCL(int i) {
			return GetToken(KotlinParser.EXCL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CallSuffixContext callSuffix() {
			return GetRuleContext<CallSuffixContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArrayAccessContext arrayAccess() {
			return GetRuleContext<ArrayAccessContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MemberAccessOperatorContext memberAccessOperator() {
			return GetRuleContext<MemberAccessOperatorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PostfixUnaryExpressionContext postfixUnaryExpression() {
			return GetRuleContext<PostfixUnaryExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NL() { return GetTokens(KotlinParser.NL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NL(int i) {
			return GetToken(KotlinParser.NL, i);
		}
		public PostfixUnaryOperationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_postfixUnaryOperation; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IKotlinParserListener typedListener = listener as IKotlinParserListener;
			if (typedListener != null) typedListener.EnterPostfixUnaryOperation(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IKotlinParserListener typedListener = listener as IKotlinParserListener;
			if (typedListener != null) typedListener.ExitPostfixUnaryOperation(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKotlinParserVisitor<TResult> typedVisitor = visitor as IKotlinParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPostfixUnaryOperation(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PostfixUnaryOperationContext postfixUnaryOperation() {
		PostfixUnaryOperationContext _localctx = new PostfixUnaryOperationContext(Context, State);
		EnterRule(_localctx, 246, RULE_postfixUnaryOperation);
		int _la;
		try {
			State = 2467;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,370,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2452;
				Match(INCR);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2453;
				Match(DECR);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 2454;
				Match(EXCL);
				State = 2455;
				Match(EXCL);
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 2456;
				callSuffix();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 2457;
				arrayAccess();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 2461;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==NL) {
					{
					{
					State = 2458;
					Match(NL);
					}
					}
					State = 2463;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 2464;
				memberAccessOperator();
				State = 2465;
				postfixUnaryExpression();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MemberAccessOperatorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT() { return GetToken(KotlinParser.DOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode QUEST() { return GetToken(KotlinParser.QUEST, 0); }
		public MemberAccessOperatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_memberAccessOperator; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IKotlinParserListener typedListener = listener as IKotlinParserListener;
			if (typedListener != null) typedListener.EnterMemberAccessOperator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IKotlinParserListener typedListener = listener as IKotlinParserListener;
			if (typedListener != null) typedListener.ExitMemberAccessOperator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKotlinParserVisitor<TResult> typedVisitor = visitor as IKotlinParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMemberAccessOperator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MemberAccessOperatorContext memberAccessOperator() {
		MemberAccessOperatorContext _localctx = new MemberAccessOperatorContext(Context, State);
		EnterRule(_localctx, 248, RULE_memberAccessOperator);
		try {
			State = 2472;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case DOT:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2469;
				Match(DOT);
				}
				break;
			case QUEST:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2470;
				Match(QUEST);
				State = 2471;
				Match(DOT);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ModifierListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public AnnotationsContext[] annotations() {
			return GetRuleContexts<AnnotationsContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AnnotationsContext annotations(int i) {
			return GetRuleContext<AnnotationsContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ModifierContext[] modifier() {
			return GetRuleContexts<ModifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ModifierContext modifier(int i) {
			return GetRuleContext<ModifierContext>(i);
		}
		public ModifierListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_modifierList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IKotlinParserListener typedListener = listener as IKotlinParserListener;
			if (typedListener != null) typedListener.EnterModifierList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IKotlinParserListener typedListener = listener as IKotlinParserListener;
			if (typedListener != null) typedListener.ExitModifierList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKotlinParserVisitor<TResult> typedVisitor = visitor as IKotlinParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitModifierList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ModifierListContext modifierList() {
		ModifierListContext _localctx = new ModifierListContext(Context, State);
		EnterRule(_localctx, 250, RULE_modifierList);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 2476;
			ErrorHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					State = 2476;
					ErrorHandler.Sync(this);
					switch (TokenStream.LA(1)) {
					case AT:
					case FILE:
					case FIELD:
					case PROPERTY:
					case GET:
					case SET:
					case RECEIVER:
					case PARAM:
					case SETPARAM:
					case DELEGATE:
					case LabelReference:
						{
						State = 2474;
						annotations();
						}
						break;
					case IN:
					case OUT:
					case PUBLIC:
					case PRIVATE:
					case PROTECTED:
					case INTERNAL:
					case ENUM:
					case SEALED:
					case ANNOTATION:
					case DATA:
					case INNER:
					case TAILREC:
					case OPERATOR:
					case INLINE:
					case INFIX:
					case EXTERNAL:
					case SUSPEND:
					case OVERRIDE:
					case ABSTRACT:
					case FINAL:
					case OPEN:
					case CONST:
					case LATEINIT:
					case VARARG:
					case NOINLINE:
					case CROSSINLINE:
					case REIFIED:
						{
						State = 2475;
						modifier();
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 2478;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,373,Context);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ModifierContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ClassModifierContext classModifier() {
			return GetRuleContext<ClassModifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MemberModifierContext memberModifier() {
			return GetRuleContext<MemberModifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public VisibilityModifierContext visibilityModifier() {
			return GetRuleContext<VisibilityModifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public VarianceAnnotationContext varianceAnnotation() {
			return GetRuleContext<VarianceAnnotationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionModifierContext functionModifier() {
			return GetRuleContext<FunctionModifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PropertyModifierContext propertyModifier() {
			return GetRuleContext<PropertyModifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public InheritanceModifierContext inheritanceModifier() {
			return GetRuleContext<InheritanceModifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ParameterModifierContext parameterModifier() {
			return GetRuleContext<ParameterModifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeParameterModifierContext typeParameterModifier() {
			return GetRuleContext<TypeParameterModifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NL() { return GetTokens(KotlinParser.NL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NL(int i) {
			return GetToken(KotlinParser.NL, i);
		}
		public ModifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_modifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IKotlinParserListener typedListener = listener as IKotlinParserListener;
			if (typedListener != null) typedListener.EnterModifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IKotlinParserListener typedListener = listener as IKotlinParserListener;
			if (typedListener != null) typedListener.ExitModifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKotlinParserVisitor<TResult> typedVisitor = visitor as IKotlinParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitModifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ModifierContext modifier() {
		ModifierContext _localctx = new ModifierContext(Context, State);
		EnterRule(_localctx, 252, RULE_modifier);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 2489;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ENUM:
			case SEALED:
			case ANNOTATION:
			case DATA:
			case INNER:
				{
				State = 2480;
				classModifier();
				}
				break;
			case OVERRIDE:
			case LATEINIT:
				{
				State = 2481;
				memberModifier();
				}
				break;
			case PUBLIC:
			case PRIVATE:
			case PROTECTED:
			case INTERNAL:
				{
				State = 2482;
				visibilityModifier();
				}
				break;
			case IN:
			case OUT:
				{
				State = 2483;
				varianceAnnotation();
				}
				break;
			case TAILREC:
			case OPERATOR:
			case INLINE:
			case INFIX:
			case EXTERNAL:
			case SUSPEND:
				{
				State = 2484;
				functionModifier();
				}
				break;
			case CONST:
				{
				State = 2485;
				propertyModifier();
				}
				break;
			case ABSTRACT:
			case FINAL:
			case OPEN:
				{
				State = 2486;
				inheritanceModifier();
				}
				break;
			case VARARG:
			case NOINLINE:
			case CROSSINLINE:
				{
				State = 2487;
				parameterModifier();
				}
				break;
			case REIFIED:
				{
				State = 2488;
				typeParameterModifier();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 2494;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,375,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 2491;
					Match(NL);
					}
					} 
				}
				State = 2496;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,375,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClassModifierContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ENUM() { return GetToken(KotlinParser.ENUM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEALED() { return GetToken(KotlinParser.SEALED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ANNOTATION() { return GetToken(KotlinParser.ANNOTATION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DATA() { return GetToken(KotlinParser.DATA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INNER() { return GetToken(KotlinParser.INNER, 0); }
		public ClassModifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_classModifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IKotlinParserListener typedListener = listener as IKotlinParserListener;
			if (typedListener != null) typedListener.EnterClassModifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IKotlinParserListener typedListener = listener as IKotlinParserListener;
			if (typedListener != null) typedListener.ExitClassModifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKotlinParserVisitor<TResult> typedVisitor = visitor as IKotlinParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClassModifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ClassModifierContext classModifier() {
		ClassModifierContext _localctx = new ClassModifierContext(Context, State);
		EnterRule(_localctx, 254, RULE_classModifier);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2497;
			_la = TokenStream.LA(1);
			if ( !(((((_la - 108)) & ~0x3f) == 0 && ((1L << (_la - 108)) & ((1L << (ENUM - 108)) | (1L << (SEALED - 108)) | (1L << (ANNOTATION - 108)) | (1L << (DATA - 108)) | (1L << (INNER - 108)))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MemberModifierContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OVERRIDE() { return GetToken(KotlinParser.OVERRIDE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LATEINIT() { return GetToken(KotlinParser.LATEINIT, 0); }
		public MemberModifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_memberModifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IKotlinParserListener typedListener = listener as IKotlinParserListener;
			if (typedListener != null) typedListener.EnterMemberModifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IKotlinParserListener typedListener = listener as IKotlinParserListener;
			if (typedListener != null) typedListener.ExitMemberModifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKotlinParserVisitor<TResult> typedVisitor = visitor as IKotlinParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMemberModifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MemberModifierContext memberModifier() {
		MemberModifierContext _localctx = new MemberModifierContext(Context, State);
		EnterRule(_localctx, 256, RULE_memberModifier);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2499;
			_la = TokenStream.LA(1);
			if ( !(_la==OVERRIDE || _la==LATEINIT) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VisibilityModifierContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PUBLIC() { return GetToken(KotlinParser.PUBLIC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PRIVATE() { return GetToken(KotlinParser.PRIVATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTERNAL() { return GetToken(KotlinParser.INTERNAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PROTECTED() { return GetToken(KotlinParser.PROTECTED, 0); }
		public VisibilityModifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_visibilityModifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IKotlinParserListener typedListener = listener as IKotlinParserListener;
			if (typedListener != null) typedListener.EnterVisibilityModifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IKotlinParserListener typedListener = listener as IKotlinParserListener;
			if (typedListener != null) typedListener.ExitVisibilityModifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKotlinParserVisitor<TResult> typedVisitor = visitor as IKotlinParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVisibilityModifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VisibilityModifierContext visibilityModifier() {
		VisibilityModifierContext _localctx = new VisibilityModifierContext(Context, State);
		EnterRule(_localctx, 258, RULE_visibilityModifier);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2501;
			_la = TokenStream.LA(1);
			if ( !(((((_la - 104)) & ~0x3f) == 0 && ((1L << (_la - 104)) & ((1L << (PUBLIC - 104)) | (1L << (PRIVATE - 104)) | (1L << (PROTECTED - 104)) | (1L << (INTERNAL - 104)))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VarianceAnnotationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IN() { return GetToken(KotlinParser.IN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OUT() { return GetToken(KotlinParser.OUT, 0); }
		public VarianceAnnotationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_varianceAnnotation; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IKotlinParserListener typedListener = listener as IKotlinParserListener;
			if (typedListener != null) typedListener.EnterVarianceAnnotation(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IKotlinParserListener typedListener = listener as IKotlinParserListener;
			if (typedListener != null) typedListener.ExitVarianceAnnotation(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKotlinParserVisitor<TResult> typedVisitor = visitor as IKotlinParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVarianceAnnotation(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VarianceAnnotationContext varianceAnnotation() {
		VarianceAnnotationContext _localctx = new VarianceAnnotationContext(Context, State);
		EnterRule(_localctx, 260, RULE_varianceAnnotation);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2503;
			_la = TokenStream.LA(1);
			if ( !(_la==IN || _la==OUT) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionModifierContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TAILREC() { return GetToken(KotlinParser.TAILREC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPERATOR() { return GetToken(KotlinParser.OPERATOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INFIX() { return GetToken(KotlinParser.INFIX, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INLINE() { return GetToken(KotlinParser.INLINE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXTERNAL() { return GetToken(KotlinParser.EXTERNAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SUSPEND() { return GetToken(KotlinParser.SUSPEND, 0); }
		public FunctionModifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionModifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IKotlinParserListener typedListener = listener as IKotlinParserListener;
			if (typedListener != null) typedListener.EnterFunctionModifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IKotlinParserListener typedListener = listener as IKotlinParserListener;
			if (typedListener != null) typedListener.ExitFunctionModifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKotlinParserVisitor<TResult> typedVisitor = visitor as IKotlinParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionModifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionModifierContext functionModifier() {
		FunctionModifierContext _localctx = new FunctionModifierContext(Context, State);
		EnterRule(_localctx, 262, RULE_functionModifier);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2505;
			_la = TokenStream.LA(1);
			if ( !(((((_la - 113)) & ~0x3f) == 0 && ((1L << (_la - 113)) & ((1L << (TAILREC - 113)) | (1L << (OPERATOR - 113)) | (1L << (INLINE - 113)) | (1L << (INFIX - 113)) | (1L << (EXTERNAL - 113)) | (1L << (SUSPEND - 113)))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PropertyModifierContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONST() { return GetToken(KotlinParser.CONST, 0); }
		public PropertyModifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_propertyModifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IKotlinParserListener typedListener = listener as IKotlinParserListener;
			if (typedListener != null) typedListener.EnterPropertyModifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IKotlinParserListener typedListener = listener as IKotlinParserListener;
			if (typedListener != null) typedListener.ExitPropertyModifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKotlinParserVisitor<TResult> typedVisitor = visitor as IKotlinParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPropertyModifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PropertyModifierContext propertyModifier() {
		PropertyModifierContext _localctx = new PropertyModifierContext(Context, State);
		EnterRule(_localctx, 264, RULE_propertyModifier);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2507;
			Match(CONST);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InheritanceModifierContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ABSTRACT() { return GetToken(KotlinParser.ABSTRACT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FINAL() { return GetToken(KotlinParser.FINAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN() { return GetToken(KotlinParser.OPEN, 0); }
		public InheritanceModifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_inheritanceModifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IKotlinParserListener typedListener = listener as IKotlinParserListener;
			if (typedListener != null) typedListener.EnterInheritanceModifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IKotlinParserListener typedListener = listener as IKotlinParserListener;
			if (typedListener != null) typedListener.ExitInheritanceModifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKotlinParserVisitor<TResult> typedVisitor = visitor as IKotlinParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInheritanceModifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InheritanceModifierContext inheritanceModifier() {
		InheritanceModifierContext _localctx = new InheritanceModifierContext(Context, State);
		EnterRule(_localctx, 266, RULE_inheritanceModifier);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2509;
			_la = TokenStream.LA(1);
			if ( !(((((_la - 120)) & ~0x3f) == 0 && ((1L << (_la - 120)) & ((1L << (ABSTRACT - 120)) | (1L << (FINAL - 120)) | (1L << (OPEN - 120)))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParameterModifierContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARARG() { return GetToken(KotlinParser.VARARG, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOINLINE() { return GetToken(KotlinParser.NOINLINE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CROSSINLINE() { return GetToken(KotlinParser.CROSSINLINE, 0); }
		public ParameterModifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parameterModifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IKotlinParserListener typedListener = listener as IKotlinParserListener;
			if (typedListener != null) typedListener.EnterParameterModifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IKotlinParserListener typedListener = listener as IKotlinParserListener;
			if (typedListener != null) typedListener.ExitParameterModifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKotlinParserVisitor<TResult> typedVisitor = visitor as IKotlinParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParameterModifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ParameterModifierContext parameterModifier() {
		ParameterModifierContext _localctx = new ParameterModifierContext(Context, State);
		EnterRule(_localctx, 268, RULE_parameterModifier);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2511;
			_la = TokenStream.LA(1);
			if ( !(((((_la - 125)) & ~0x3f) == 0 && ((1L << (_la - 125)) & ((1L << (VARARG - 125)) | (1L << (NOINLINE - 125)) | (1L << (CROSSINLINE - 125)))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeParameterModifierContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REIFIED() { return GetToken(KotlinParser.REIFIED, 0); }
		public TypeParameterModifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeParameterModifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IKotlinParserListener typedListener = listener as IKotlinParserListener;
			if (typedListener != null) typedListener.EnterTypeParameterModifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IKotlinParserListener typedListener = listener as IKotlinParserListener;
			if (typedListener != null) typedListener.ExitTypeParameterModifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKotlinParserVisitor<TResult> typedVisitor = visitor as IKotlinParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeParameterModifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeParameterModifierContext typeParameterModifier() {
		TypeParameterModifierContext _localctx = new TypeParameterModifierContext(Context, State);
		EnterRule(_localctx, 270, RULE_typeParameterModifier);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2513;
			Match(REIFIED);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LabelDefinitionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LabelDefinition() { return GetToken(KotlinParser.LabelDefinition, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NL() { return GetTokens(KotlinParser.NL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NL(int i) {
			return GetToken(KotlinParser.NL, i);
		}
		public LabelDefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_labelDefinition; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IKotlinParserListener typedListener = listener as IKotlinParserListener;
			if (typedListener != null) typedListener.EnterLabelDefinition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IKotlinParserListener typedListener = listener as IKotlinParserListener;
			if (typedListener != null) typedListener.ExitLabelDefinition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKotlinParserVisitor<TResult> typedVisitor = visitor as IKotlinParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLabelDefinition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LabelDefinitionContext labelDefinition() {
		LabelDefinitionContext _localctx = new LabelDefinitionContext(Context, State);
		EnterRule(_localctx, 272, RULE_labelDefinition);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 2515;
			Match(LabelDefinition);
			State = 2519;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,376,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 2516;
					Match(NL);
					}
					} 
				}
				State = 2521;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,376,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AnnotationsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public AnnotationContext annotation() {
			return GetRuleContext<AnnotationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AnnotationListContext annotationList() {
			return GetRuleContext<AnnotationListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NL() { return GetTokens(KotlinParser.NL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NL(int i) {
			return GetToken(KotlinParser.NL, i);
		}
		public AnnotationsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_annotations; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IKotlinParserListener typedListener = listener as IKotlinParserListener;
			if (typedListener != null) typedListener.EnterAnnotations(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IKotlinParserListener typedListener = listener as IKotlinParserListener;
			if (typedListener != null) typedListener.ExitAnnotations(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKotlinParserVisitor<TResult> typedVisitor = visitor as IKotlinParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAnnotations(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AnnotationsContext annotations() {
		AnnotationsContext _localctx = new AnnotationsContext(Context, State);
		EnterRule(_localctx, 274, RULE_annotations);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 2524;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,377,Context) ) {
			case 1:
				{
				State = 2522;
				annotation();
				}
				break;
			case 2:
				{
				State = 2523;
				annotationList();
				}
				break;
			}
			State = 2529;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,378,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 2526;
					Match(NL);
					}
					} 
				}
				State = 2531;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,378,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AnnotationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public AnnotationUseSiteTargetContext annotationUseSiteTarget() {
			return GetRuleContext<AnnotationUseSiteTargetContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(KotlinParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UnescapedAnnotationContext unescapedAnnotation() {
			return GetRuleContext<UnescapedAnnotationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NL() { return GetTokens(KotlinParser.NL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NL(int i) {
			return GetToken(KotlinParser.NL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LabelReference() { return GetToken(KotlinParser.LabelReference, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeArgumentsContext typeArguments() {
			return GetRuleContext<TypeArgumentsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ValueArgumentsContext valueArguments() {
			return GetRuleContext<ValueArgumentsContext>(0);
		}
		public AnnotationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_annotation; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IKotlinParserListener typedListener = listener as IKotlinParserListener;
			if (typedListener != null) typedListener.EnterAnnotation(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IKotlinParserListener typedListener = listener as IKotlinParserListener;
			if (typedListener != null) typedListener.ExitAnnotation(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKotlinParserVisitor<TResult> typedVisitor = visitor as IKotlinParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAnnotation(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AnnotationContext annotation() {
		AnnotationContext _localctx = new AnnotationContext(Context, State);
		EnterRule(_localctx, 276, RULE_annotation);
		int _la;
		try {
			State = 2567;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case FILE:
			case FIELD:
			case PROPERTY:
			case GET:
			case SET:
			case RECEIVER:
			case PARAM:
			case SETPARAM:
			case DELEGATE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2532;
				annotationUseSiteTarget();
				State = 2536;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==NL) {
					{
					{
					State = 2533;
					Match(NL);
					}
					}
					State = 2538;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 2539;
				Match(COLON);
				State = 2543;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==NL) {
					{
					{
					State = 2540;
					Match(NL);
					}
					}
					State = 2545;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 2546;
				unescapedAnnotation();
				}
				break;
			case LabelReference:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2548;
				Match(LabelReference);
				State = 2556;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,382,Context) ) {
				case 1:
					{
					State = 2552;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (_la==NL) {
						{
						{
						State = 2549;
						Match(NL);
						}
						}
						State = 2554;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					State = 2555;
					typeArguments();
					}
					break;
				}
				State = 2565;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,384,Context) ) {
				case 1:
					{
					State = 2561;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (_la==NL) {
						{
						{
						State = 2558;
						Match(NL);
						}
						}
						State = 2563;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					State = 2564;
					valueArguments();
					}
					break;
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AnnotationListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public AnnotationUseSiteTargetContext annotationUseSiteTarget() {
			return GetRuleContext<AnnotationUseSiteTargetContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(KotlinParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LSQUARE() { return GetToken(KotlinParser.LSQUARE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RSQUARE() { return GetToken(KotlinParser.RSQUARE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UnescapedAnnotationContext[] unescapedAnnotation() {
			return GetRuleContexts<UnescapedAnnotationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public UnescapedAnnotationContext unescapedAnnotation(int i) {
			return GetRuleContext<UnescapedAnnotationContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AT() { return GetToken(KotlinParser.AT, 0); }
		public AnnotationListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_annotationList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IKotlinParserListener typedListener = listener as IKotlinParserListener;
			if (typedListener != null) typedListener.EnterAnnotationList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IKotlinParserListener typedListener = listener as IKotlinParserListener;
			if (typedListener != null) typedListener.ExitAnnotationList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKotlinParserVisitor<TResult> typedVisitor = visitor as IKotlinParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAnnotationList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AnnotationListContext annotationList() {
		AnnotationListContext _localctx = new AnnotationListContext(Context, State);
		EnterRule(_localctx, 278, RULE_annotationList);
		int _la;
		try {
			State = 2588;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case FILE:
			case FIELD:
			case PROPERTY:
			case GET:
			case SET:
			case RECEIVER:
			case PARAM:
			case SETPARAM:
			case DELEGATE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2569;
				annotationUseSiteTarget();
				State = 2570;
				Match(COLON);
				State = 2571;
				Match(LSQUARE);
				State = 2573;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 2572;
					unescapedAnnotation();
					}
					}
					State = 2575;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( ((((_la - 58)) & ~0x3f) == 0 && ((1L << (_la - 58)) & ((1L << (IMPORT - 58)) | (1L << (CONSTRUCTOR - 58)) | (1L << (BY - 58)) | (1L << (COMPANION - 58)) | (1L << (INIT - 58)) | (1L << (WHERE - 58)) | (1L << (CATCH - 58)) | (1L << (FINALLY - 58)) | (1L << (OUT - 58)) | (1L << (GETTER - 58)) | (1L << (SETTER - 58)) | (1L << (DYNAMIC - 58)) | (1L << (PUBLIC - 58)) | (1L << (PRIVATE - 58)) | (1L << (PROTECTED - 58)) | (1L << (INTERNAL - 58)) | (1L << (ENUM - 58)) | (1L << (SEALED - 58)) | (1L << (ANNOTATION - 58)) | (1L << (DATA - 58)) | (1L << (INNER - 58)) | (1L << (TAILREC - 58)) | (1L << (OPERATOR - 58)) | (1L << (INLINE - 58)) | (1L << (INFIX - 58)) | (1L << (EXTERNAL - 58)) | (1L << (SUSPEND - 58)) | (1L << (OVERRIDE - 58)) | (1L << (ABSTRACT - 58)) | (1L << (FINAL - 58)))) != 0) || ((((_la - 122)) & ~0x3f) == 0 && ((1L << (_la - 122)) & ((1L << (OPEN - 122)) | (1L << (CONST - 122)) | (1L << (LATEINIT - 122)) | (1L << (VARARG - 122)) | (1L << (NOINLINE - 122)) | (1L << (CROSSINLINE - 122)) | (1L << (REIFIED - 122)) | (1L << (Identifier - 122)))) != 0) );
				State = 2577;
				Match(RSQUARE);
				}
				break;
			case AT:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2579;
				Match(AT);
				State = 2580;
				Match(LSQUARE);
				State = 2582;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 2581;
					unescapedAnnotation();
					}
					}
					State = 2584;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( ((((_la - 58)) & ~0x3f) == 0 && ((1L << (_la - 58)) & ((1L << (IMPORT - 58)) | (1L << (CONSTRUCTOR - 58)) | (1L << (BY - 58)) | (1L << (COMPANION - 58)) | (1L << (INIT - 58)) | (1L << (WHERE - 58)) | (1L << (CATCH - 58)) | (1L << (FINALLY - 58)) | (1L << (OUT - 58)) | (1L << (GETTER - 58)) | (1L << (SETTER - 58)) | (1L << (DYNAMIC - 58)) | (1L << (PUBLIC - 58)) | (1L << (PRIVATE - 58)) | (1L << (PROTECTED - 58)) | (1L << (INTERNAL - 58)) | (1L << (ENUM - 58)) | (1L << (SEALED - 58)) | (1L << (ANNOTATION - 58)) | (1L << (DATA - 58)) | (1L << (INNER - 58)) | (1L << (TAILREC - 58)) | (1L << (OPERATOR - 58)) | (1L << (INLINE - 58)) | (1L << (INFIX - 58)) | (1L << (EXTERNAL - 58)) | (1L << (SUSPEND - 58)) | (1L << (OVERRIDE - 58)) | (1L << (ABSTRACT - 58)) | (1L << (FINAL - 58)))) != 0) || ((((_la - 122)) & ~0x3f) == 0 && ((1L << (_la - 122)) & ((1L << (OPEN - 122)) | (1L << (CONST - 122)) | (1L << (LATEINIT - 122)) | (1L << (VARARG - 122)) | (1L << (NOINLINE - 122)) | (1L << (CROSSINLINE - 122)) | (1L << (REIFIED - 122)) | (1L << (Identifier - 122)))) != 0) );
				State = 2586;
				Match(RSQUARE);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AnnotationUseSiteTargetContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FIELD() { return GetToken(KotlinParser.FIELD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FILE() { return GetToken(KotlinParser.FILE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PROPERTY() { return GetToken(KotlinParser.PROPERTY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GET() { return GetToken(KotlinParser.GET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SET() { return GetToken(KotlinParser.SET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RECEIVER() { return GetToken(KotlinParser.RECEIVER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARAM() { return GetToken(KotlinParser.PARAM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SETPARAM() { return GetToken(KotlinParser.SETPARAM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DELEGATE() { return GetToken(KotlinParser.DELEGATE, 0); }
		public AnnotationUseSiteTargetContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_annotationUseSiteTarget; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IKotlinParserListener typedListener = listener as IKotlinParserListener;
			if (typedListener != null) typedListener.EnterAnnotationUseSiteTarget(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IKotlinParserListener typedListener = listener as IKotlinParserListener;
			if (typedListener != null) typedListener.ExitAnnotationUseSiteTarget(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKotlinParserVisitor<TResult> typedVisitor = visitor as IKotlinParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAnnotationUseSiteTarget(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AnnotationUseSiteTargetContext annotationUseSiteTarget() {
		AnnotationUseSiteTargetContext _localctx = new AnnotationUseSiteTargetContext(Context, State);
		EnterRule(_localctx, 280, RULE_annotationUseSiteTarget);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2590;
			_la = TokenStream.LA(1);
			if ( !(((((_la - 56)) & ~0x3f) == 0 && ((1L << (_la - 56)) & ((1L << (FILE - 56)) | (1L << (FIELD - 56)) | (1L << (PROPERTY - 56)) | (1L << (GET - 56)) | (1L << (SET - 56)) | (1L << (RECEIVER - 56)) | (1L << (PARAM - 56)) | (1L << (SETPARAM - 56)) | (1L << (DELEGATE - 56)))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UnescapedAnnotationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeArgumentsContext typeArguments() {
			return GetRuleContext<TypeArgumentsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ValueArgumentsContext valueArguments() {
			return GetRuleContext<ValueArgumentsContext>(0);
		}
		public UnescapedAnnotationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unescapedAnnotation; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IKotlinParserListener typedListener = listener as IKotlinParserListener;
			if (typedListener != null) typedListener.EnterUnescapedAnnotation(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IKotlinParserListener typedListener = listener as IKotlinParserListener;
			if (typedListener != null) typedListener.ExitUnescapedAnnotation(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKotlinParserVisitor<TResult> typedVisitor = visitor as IKotlinParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnescapedAnnotation(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UnescapedAnnotationContext unescapedAnnotation() {
		UnescapedAnnotationContext _localctx = new UnescapedAnnotationContext(Context, State);
		EnterRule(_localctx, 282, RULE_unescapedAnnotation);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2592;
			identifier();
			State = 2594;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LANGLE) {
				{
				State = 2593;
				typeArguments();
				}
			}

			State = 2597;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,390,Context) ) {
			case 1:
				{
				State = 2596;
				valueArguments();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IdentifierContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SimpleIdentifierContext[] simpleIdentifier() {
			return GetRuleContexts<SimpleIdentifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SimpleIdentifierContext simpleIdentifier(int i) {
			return GetRuleContext<SimpleIdentifierContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] DOT() { return GetTokens(KotlinParser.DOT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT(int i) {
			return GetToken(KotlinParser.DOT, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NL() { return GetTokens(KotlinParser.NL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NL(int i) {
			return GetToken(KotlinParser.NL, i);
		}
		public IdentifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_identifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IKotlinParserListener typedListener = listener as IKotlinParserListener;
			if (typedListener != null) typedListener.EnterIdentifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IKotlinParserListener typedListener = listener as IKotlinParserListener;
			if (typedListener != null) typedListener.ExitIdentifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKotlinParserVisitor<TResult> typedVisitor = visitor as IKotlinParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIdentifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IdentifierContext identifier() {
		IdentifierContext _localctx = new IdentifierContext(Context, State);
		EnterRule(_localctx, 284, RULE_identifier);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 2599;
			simpleIdentifier();
			State = 2610;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,392,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 2603;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (_la==NL) {
						{
						{
						State = 2600;
						Match(NL);
						}
						}
						State = 2605;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					State = 2606;
					Match(DOT);
					State = 2607;
					simpleIdentifier();
					}
					} 
				}
				State = 2612;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,392,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SimpleIdentifierContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(KotlinParser.Identifier, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ABSTRACT() { return GetToken(KotlinParser.ABSTRACT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ANNOTATION() { return GetToken(KotlinParser.ANNOTATION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BY() { return GetToken(KotlinParser.BY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CATCH() { return GetToken(KotlinParser.CATCH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMPANION() { return GetToken(KotlinParser.COMPANION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONSTRUCTOR() { return GetToken(KotlinParser.CONSTRUCTOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CROSSINLINE() { return GetToken(KotlinParser.CROSSINLINE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DATA() { return GetToken(KotlinParser.DATA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DYNAMIC() { return GetToken(KotlinParser.DYNAMIC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ENUM() { return GetToken(KotlinParser.ENUM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXTERNAL() { return GetToken(KotlinParser.EXTERNAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FINAL() { return GetToken(KotlinParser.FINAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FINALLY() { return GetToken(KotlinParser.FINALLY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GETTER() { return GetToken(KotlinParser.GETTER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IMPORT() { return GetToken(KotlinParser.IMPORT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INFIX() { return GetToken(KotlinParser.INFIX, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INIT() { return GetToken(KotlinParser.INIT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INLINE() { return GetToken(KotlinParser.INLINE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INNER() { return GetToken(KotlinParser.INNER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTERNAL() { return GetToken(KotlinParser.INTERNAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LATEINIT() { return GetToken(KotlinParser.LATEINIT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOINLINE() { return GetToken(KotlinParser.NOINLINE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN() { return GetToken(KotlinParser.OPEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPERATOR() { return GetToken(KotlinParser.OPERATOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OUT() { return GetToken(KotlinParser.OUT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OVERRIDE() { return GetToken(KotlinParser.OVERRIDE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PRIVATE() { return GetToken(KotlinParser.PRIVATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PROTECTED() { return GetToken(KotlinParser.PROTECTED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PUBLIC() { return GetToken(KotlinParser.PUBLIC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REIFIED() { return GetToken(KotlinParser.REIFIED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEALED() { return GetToken(KotlinParser.SEALED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TAILREC() { return GetToken(KotlinParser.TAILREC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SETTER() { return GetToken(KotlinParser.SETTER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARARG() { return GetToken(KotlinParser.VARARG, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WHERE() { return GetToken(KotlinParser.WHERE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONST() { return GetToken(KotlinParser.CONST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SUSPEND() { return GetToken(KotlinParser.SUSPEND, 0); }
		public SimpleIdentifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_simpleIdentifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IKotlinParserListener typedListener = listener as IKotlinParserListener;
			if (typedListener != null) typedListener.EnterSimpleIdentifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IKotlinParserListener typedListener = listener as IKotlinParserListener;
			if (typedListener != null) typedListener.ExitSimpleIdentifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKotlinParserVisitor<TResult> typedVisitor = visitor as IKotlinParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSimpleIdentifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SimpleIdentifierContext simpleIdentifier() {
		SimpleIdentifierContext _localctx = new SimpleIdentifierContext(Context, State);
		EnterRule(_localctx, 286, RULE_simpleIdentifier);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2613;
			_la = TokenStream.LA(1);
			if ( !(((((_la - 58)) & ~0x3f) == 0 && ((1L << (_la - 58)) & ((1L << (IMPORT - 58)) | (1L << (CONSTRUCTOR - 58)) | (1L << (BY - 58)) | (1L << (COMPANION - 58)) | (1L << (INIT - 58)) | (1L << (WHERE - 58)) | (1L << (CATCH - 58)) | (1L << (FINALLY - 58)) | (1L << (OUT - 58)) | (1L << (GETTER - 58)) | (1L << (SETTER - 58)) | (1L << (DYNAMIC - 58)) | (1L << (PUBLIC - 58)) | (1L << (PRIVATE - 58)) | (1L << (PROTECTED - 58)) | (1L << (INTERNAL - 58)) | (1L << (ENUM - 58)) | (1L << (SEALED - 58)) | (1L << (ANNOTATION - 58)) | (1L << (DATA - 58)) | (1L << (INNER - 58)) | (1L << (TAILREC - 58)) | (1L << (OPERATOR - 58)) | (1L << (INLINE - 58)) | (1L << (INFIX - 58)) | (1L << (EXTERNAL - 58)) | (1L << (SUSPEND - 58)) | (1L << (OVERRIDE - 58)) | (1L << (ABSTRACT - 58)) | (1L << (FINAL - 58)))) != 0) || ((((_la - 122)) & ~0x3f) == 0 && ((1L << (_la - 122)) & ((1L << (OPEN - 122)) | (1L << (CONST - 122)) | (1L << (LATEINIT - 122)) | (1L << (VARARG - 122)) | (1L << (NOINLINE - 122)) | (1L << (CROSSINLINE - 122)) | (1L << (REIFIED - 122)) | (1L << (Identifier - 122)))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SemiContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NL() { return GetTokens(KotlinParser.NL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NL(int i) {
			return GetToken(KotlinParser.NL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON() { return GetToken(KotlinParser.SEMICOLON, 0); }
		public SemiContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_semi; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IKotlinParserListener typedListener = listener as IKotlinParserListener;
			if (typedListener != null) typedListener.EnterSemi(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IKotlinParserListener typedListener = listener as IKotlinParserListener;
			if (typedListener != null) typedListener.ExitSemi(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKotlinParserVisitor<TResult> typedVisitor = visitor as IKotlinParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSemi(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SemiContext semi() {
		SemiContext _localctx = new SemiContext(Context, State);
		EnterRule(_localctx, 288, RULE_semi);
		int _la;
		try {
			int _alt;
			State = 2633;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,396,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2616;
				ErrorHandler.Sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						State = 2615;
						Match(NL);
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 2618;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,393,Context);
				} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2623;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==NL) {
					{
					{
					State = 2620;
					Match(NL);
					}
					}
					State = 2625;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 2626;
				Match(SEMICOLON);
				State = 2630;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,395,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 2627;
						Match(NL);
						}
						} 
					}
					State = 2632;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,395,Context);
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AnysemiContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NL() { return GetToken(KotlinParser.NL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON() { return GetToken(KotlinParser.SEMICOLON, 0); }
		public AnysemiContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_anysemi; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IKotlinParserListener typedListener = listener as IKotlinParserListener;
			if (typedListener != null) typedListener.EnterAnysemi(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IKotlinParserListener typedListener = listener as IKotlinParserListener;
			if (typedListener != null) typedListener.ExitAnysemi(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKotlinParserVisitor<TResult> typedVisitor = visitor as IKotlinParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAnysemi(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AnysemiContext anysemi() {
		AnysemiContext _localctx = new AnysemiContext(Context, State);
		EnterRule(_localctx, 290, RULE_anysemi);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2635;
			_la = TokenStream.LA(1);
			if ( !(_la==NL || _la==SEMICOLON) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static int[] _serializedATN = {
		4,1,170,2638,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,
		7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,7,14,
		2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,7,21,
		2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,7,28,
		2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,2,35,7,35,
		2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,2,42,7,42,
		2,43,7,43,2,44,7,44,2,45,7,45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,
		2,50,7,50,2,51,7,51,2,52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,7,56,
		2,57,7,57,2,58,7,58,2,59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,7,63,
		2,64,7,64,2,65,7,65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,2,70,7,70,
		2,71,7,71,2,72,7,72,2,73,7,73,2,74,7,74,2,75,7,75,2,76,7,76,2,77,7,77,
		2,78,7,78,2,79,7,79,2,80,7,80,2,81,7,81,2,82,7,82,2,83,7,83,2,84,7,84,
		2,85,7,85,2,86,7,86,2,87,7,87,2,88,7,88,2,89,7,89,2,90,7,90,2,91,7,91,
		2,92,7,92,2,93,7,93,2,94,7,94,2,95,7,95,2,96,7,96,2,97,7,97,2,98,7,98,
		2,99,7,99,2,100,7,100,2,101,7,101,2,102,7,102,2,103,7,103,2,104,7,104,
		2,105,7,105,2,106,7,106,2,107,7,107,2,108,7,108,2,109,7,109,2,110,7,110,
		2,111,7,111,2,112,7,112,2,113,7,113,2,114,7,114,2,115,7,115,2,116,7,116,
		2,117,7,117,2,118,7,118,2,119,7,119,2,120,7,120,2,121,7,121,2,122,7,122,
		2,123,7,123,2,124,7,124,2,125,7,125,2,126,7,126,2,127,7,127,2,128,7,128,
		2,129,7,129,2,130,7,130,2,131,7,131,2,132,7,132,2,133,7,133,2,134,7,134,
		2,135,7,135,2,136,7,136,2,137,7,137,2,138,7,138,2,139,7,139,2,140,7,140,
		2,141,7,141,2,142,7,142,2,143,7,143,2,144,7,144,2,145,7,145,1,0,5,0,294,
		8,0,10,0,12,0,297,9,0,1,0,1,0,5,0,301,8,0,10,0,12,0,304,9,0,1,0,1,0,4,
		0,308,8,0,11,0,12,0,309,1,0,3,0,313,8,0,5,0,315,8,0,10,0,12,0,318,9,0,
		3,0,320,8,0,1,0,1,0,1,1,5,1,325,8,1,10,1,12,1,328,9,1,1,1,1,1,5,1,332,
		8,1,10,1,12,1,335,9,1,1,1,1,1,4,1,339,8,1,11,1,12,1,340,1,1,3,1,344,8,
		1,5,1,346,8,1,10,1,12,1,349,9,1,3,1,351,8,1,1,1,1,1,1,2,3,2,356,8,2,1,
		2,1,2,1,2,1,3,4,3,362,8,3,11,3,12,3,363,1,4,1,4,1,4,1,4,4,4,370,8,4,11,
		4,12,4,371,1,4,1,4,1,4,3,4,377,8,4,1,4,3,4,380,8,4,4,4,382,8,4,11,4,12,
		4,383,1,5,3,5,387,8,5,1,5,1,5,1,5,3,5,392,8,5,3,5,394,8,5,1,6,5,6,397,
		8,6,10,6,12,6,400,9,6,1,7,1,7,1,7,1,7,1,7,3,7,407,8,7,1,7,3,7,410,8,7,
		1,8,1,8,1,8,1,9,1,9,1,9,1,9,1,9,3,9,420,8,9,1,10,3,10,423,8,10,1,10,1,
		10,5,10,427,8,10,10,10,12,10,430,9,10,1,10,1,10,5,10,434,8,10,10,10,12,
		10,437,9,10,1,10,3,10,440,8,10,1,10,5,10,443,8,10,10,10,12,10,446,9,10,
		1,10,3,10,449,8,10,1,10,5,10,452,8,10,10,10,12,10,455,9,10,1,10,1,10,5,
		10,459,8,10,10,10,12,10,462,9,10,1,10,3,10,465,8,10,1,10,5,10,468,8,10,
		10,10,12,10,471,9,10,1,10,3,10,474,8,10,1,10,5,10,477,8,10,10,10,12,10,
		480,9,10,1,10,1,10,5,10,484,8,10,10,10,12,10,487,9,10,1,10,3,10,490,8,
		10,1,11,3,11,493,8,11,1,11,1,11,5,11,497,8,11,10,11,12,11,500,9,11,3,11,
		502,8,11,1,11,1,11,1,12,1,12,1,12,1,12,5,12,510,8,12,10,12,12,12,513,9,
		12,3,12,515,8,12,1,12,1,12,1,13,3,13,520,8,13,1,13,3,13,523,8,13,1,13,
		1,13,1,13,1,13,1,13,3,13,530,8,13,1,14,5,14,533,8,14,10,14,12,14,536,9,
		14,1,14,1,14,5,14,540,8,14,10,14,12,14,543,9,14,1,14,1,14,5,14,547,8,14,
		10,14,12,14,550,9,14,1,14,5,14,553,8,14,10,14,12,14,556,9,14,1,15,1,15,
		1,15,3,15,561,8,15,1,16,1,16,1,16,1,17,1,17,5,17,568,8,17,10,17,12,17,
		571,9,17,1,17,1,17,5,17,575,8,17,10,17,12,17,578,9,17,1,17,1,17,1,18,1,
		18,5,18,584,8,18,10,18,12,18,587,9,18,1,18,5,18,590,8,18,10,18,12,18,593,
		9,18,1,18,5,18,596,8,18,10,18,12,18,599,9,18,1,18,1,18,1,19,1,19,1,19,
		1,19,1,19,1,19,1,19,1,19,3,19,611,8,19,1,19,4,19,614,8,19,11,19,12,19,
		615,1,20,1,20,5,20,620,8,20,10,20,12,20,623,9,20,1,20,1,20,1,21,3,21,628,
		8,21,1,21,1,21,5,21,632,8,21,10,21,12,21,635,9,21,1,21,1,21,5,21,639,8,
		21,10,21,12,21,642,9,21,1,21,1,21,5,21,646,8,21,10,21,12,21,649,9,21,1,
		21,3,21,652,8,21,1,21,5,21,655,8,21,10,21,12,21,658,9,21,1,21,3,21,661,
		8,21,1,22,1,22,5,22,665,8,22,10,22,12,22,668,9,22,1,22,1,22,1,22,5,22,
		673,8,22,10,22,12,22,676,9,22,1,22,3,22,679,8,22,1,23,1,23,5,23,683,8,
		23,10,23,12,23,686,9,23,1,23,3,23,689,8,23,1,23,5,23,692,8,23,10,23,12,
		23,695,9,23,1,23,1,23,5,23,699,8,23,10,23,12,23,702,9,23,1,23,5,23,705,
		8,23,10,23,12,23,708,9,23,3,23,710,8,23,1,23,5,23,713,8,23,10,23,12,23,
		716,9,23,1,23,1,23,1,24,1,24,5,24,722,8,24,10,24,12,24,725,9,24,4,24,727,
		8,24,11,24,12,24,728,1,24,3,24,732,8,24,1,25,1,25,5,25,736,8,25,10,25,
		12,25,739,9,25,1,25,3,25,742,8,25,1,25,5,25,745,8,25,10,25,12,25,748,9,
		25,1,25,3,25,751,8,25,1,25,5,25,754,8,25,10,25,12,25,757,9,25,1,25,3,25,
		760,8,25,1,26,3,26,763,8,26,1,26,1,26,5,26,767,8,26,10,26,12,26,770,9,
		26,1,26,1,26,5,26,774,8,26,10,26,12,26,777,9,26,1,26,1,26,3,26,781,8,26,
		1,26,5,26,784,8,26,10,26,12,26,787,9,26,1,26,3,26,790,8,26,1,26,5,26,793,
		8,26,10,26,12,26,796,9,26,1,26,3,26,799,8,26,1,26,5,26,802,8,26,10,26,
		12,26,805,9,26,1,26,1,26,5,26,809,8,26,10,26,12,26,812,9,26,1,26,1,26,
		5,26,816,8,26,10,26,12,26,819,9,26,1,26,3,26,822,8,26,1,26,5,26,825,8,
		26,10,26,12,26,828,9,26,1,26,3,26,831,8,26,1,26,5,26,834,8,26,10,26,12,
		26,837,9,26,1,26,3,26,840,8,26,1,27,1,27,1,27,1,27,5,27,846,8,27,10,27,
		12,27,849,9,27,3,27,851,8,27,1,27,1,27,1,28,3,28,856,8,28,1,28,1,28,1,
		28,3,28,861,8,28,1,29,1,29,1,29,1,29,1,30,1,30,1,30,5,30,870,8,30,10,30,
		12,30,873,9,30,1,30,3,30,876,8,30,1,31,3,31,879,8,31,1,31,1,31,5,31,883,
		8,31,10,31,12,31,886,9,31,1,31,1,31,5,31,890,8,31,10,31,12,31,893,9,31,
		1,31,3,31,896,8,31,1,31,5,31,899,8,31,10,31,12,31,902,9,31,1,31,1,31,5,
		31,906,8,31,10,31,12,31,909,9,31,1,31,3,31,912,8,31,1,31,5,31,915,8,31,
		10,31,12,31,918,9,31,1,31,3,31,921,8,31,1,32,3,32,924,8,32,1,32,1,32,5,
		32,928,8,32,10,32,12,32,931,9,32,1,32,3,32,934,8,32,1,32,1,32,5,32,938,
		8,32,10,32,12,32,941,9,32,1,32,3,32,944,8,32,1,32,5,32,947,8,32,10,32,
		12,32,950,9,32,1,32,1,32,5,32,954,8,32,10,32,12,32,957,9,32,1,32,3,32,
		960,8,32,1,32,5,32,963,8,32,10,32,12,32,966,9,32,1,32,3,32,969,8,32,1,
		33,3,33,972,8,33,1,33,1,33,5,33,976,8,33,10,33,12,33,979,9,33,1,33,3,33,
		982,8,33,1,33,5,33,985,8,33,10,33,12,33,988,9,33,1,33,1,33,5,33,992,8,
		33,10,33,12,33,995,9,33,1,33,1,33,3,33,999,8,33,1,33,5,33,1002,8,33,10,
		33,12,33,1005,9,33,1,33,1,33,3,33,1009,8,33,1,33,5,33,1012,8,33,10,33,
		12,33,1015,9,33,1,33,3,33,1018,8,33,1,33,5,33,1021,8,33,10,33,12,33,1024,
		9,33,1,33,1,33,5,33,1028,8,33,10,33,12,33,1031,9,33,1,33,3,33,1034,8,33,
		1,33,1,33,1,33,1,33,3,33,1040,8,33,1,33,1,33,1,33,1,33,3,33,1046,8,33,
		3,33,1048,8,33,1,34,1,34,1,34,1,34,5,34,1054,8,34,10,34,12,34,1057,9,34,
		1,34,1,34,1,35,1,35,1,35,3,35,1064,8,35,1,36,3,36,1067,8,36,1,36,1,36,
		3,36,1071,8,36,1,36,1,36,5,36,1075,8,36,10,36,12,36,1078,9,36,1,36,1,36,
		1,36,5,36,1083,8,36,10,36,12,36,1086,9,36,1,36,1,36,5,36,1090,8,36,10,
		36,12,36,1093,9,36,1,36,3,36,1096,8,36,1,36,5,36,1099,8,36,10,36,12,36,
		1102,9,36,1,36,1,36,1,36,5,36,1107,8,36,10,36,12,36,1110,9,36,1,36,3,36,
		1113,8,36,3,36,1115,8,36,1,37,3,37,1118,8,37,1,37,1,37,3,37,1122,8,37,
		1,37,1,37,5,37,1126,8,37,10,37,12,37,1129,9,37,1,37,1,37,1,37,5,37,1134,
		8,37,10,37,12,37,1137,9,37,1,37,1,37,3,37,1141,8,37,1,37,1,37,5,37,1145,
		8,37,10,37,12,37,1148,9,37,1,37,1,37,3,37,1152,8,37,1,38,3,38,1155,8,38,
		1,38,1,38,5,38,1159,8,38,10,38,12,38,1162,9,38,1,38,1,38,5,38,1166,8,38,
		10,38,12,38,1169,9,38,1,38,3,38,1172,8,38,1,38,5,38,1175,8,38,10,38,12,
		38,1178,9,38,1,38,1,38,5,38,1182,8,38,10,38,12,38,1185,9,38,1,38,1,38,
		1,39,1,39,5,39,1191,8,39,10,39,12,39,1194,9,39,1,39,1,39,5,39,1198,8,39,
		10,39,12,39,1201,9,39,1,39,1,39,5,39,1205,8,39,10,39,12,39,1208,9,39,1,
		39,5,39,1211,8,39,10,39,12,39,1214,9,39,1,39,5,39,1217,8,39,10,39,12,39,
		1220,9,39,1,39,1,39,1,40,3,40,1225,8,40,1,40,5,40,1228,8,40,10,40,12,40,
		1231,9,40,1,40,1,40,5,40,1235,8,40,10,40,12,40,1238,9,40,1,40,1,40,5,40,
		1242,8,40,10,40,12,40,1245,9,40,1,40,3,40,1248,8,40,1,41,3,41,1251,8,41,
		1,41,1,41,1,41,1,41,3,41,1257,8,41,1,42,1,42,1,42,5,42,1262,8,42,10,42,
		12,42,1265,9,42,4,42,1267,8,42,11,42,12,42,1268,1,43,1,43,1,43,1,43,1,
		44,1,44,3,44,1277,8,44,1,44,5,44,1280,8,44,10,44,12,44,1283,9,44,1,44,
		4,44,1286,8,44,11,44,12,44,1287,1,45,1,45,1,45,1,45,1,45,1,45,3,45,1296,
		8,45,1,46,1,46,5,46,1300,8,46,10,46,12,46,1303,9,46,1,46,1,46,5,46,1307,
		8,46,10,46,12,46,1310,9,46,3,46,1312,8,46,1,46,1,46,5,46,1316,8,46,10,
		46,12,46,1319,9,46,1,46,1,46,5,46,1323,8,46,10,46,12,46,1326,9,46,1,46,
		1,46,1,47,1,47,1,47,3,47,1333,8,47,1,48,1,48,5,48,1337,8,48,10,48,12,48,
		1340,9,48,1,48,1,48,5,48,1344,8,48,10,48,12,48,1347,9,48,1,48,5,48,1350,
		8,48,10,48,12,48,1353,9,48,1,49,1,49,5,49,1357,8,49,10,49,12,49,1360,9,
		49,1,49,3,49,1363,8,49,1,50,1,50,1,50,3,50,1368,8,50,1,50,1,50,1,50,3,
		50,1373,8,50,5,50,1375,8,50,10,50,12,50,1378,9,50,1,50,1,50,1,51,1,51,
		5,51,1384,8,51,10,51,12,51,1387,9,51,1,51,1,51,5,51,1391,8,51,10,51,12,
		51,1394,9,51,1,51,1,51,5,51,1398,8,51,10,51,12,51,1401,9,51,1,51,5,51,
		1404,8,51,10,51,12,51,1407,9,51,1,52,5,52,1410,8,52,10,52,12,52,1413,9,
		52,1,52,1,52,5,52,1417,8,52,10,52,12,52,1420,9,52,1,52,1,52,5,52,1424,
		8,52,10,52,12,52,1427,9,52,1,52,1,52,1,53,1,53,1,53,1,53,1,54,5,54,1436,
		8,54,10,54,12,54,1439,9,54,1,54,1,54,4,54,1443,8,54,11,54,12,54,1444,1,
		54,3,54,1448,8,54,5,54,1450,8,54,10,54,12,54,1453,9,54,3,54,1455,8,54,
		1,55,1,55,3,55,1459,8,55,1,56,5,56,1462,8,56,10,56,12,56,1465,9,56,1,56,
		5,56,1468,8,56,10,56,12,56,1471,9,56,1,56,1,56,1,57,5,57,1476,8,57,10,
		57,12,57,1479,9,57,1,57,1,57,1,57,1,57,3,57,1485,8,57,1,58,1,58,1,58,1,
		58,5,58,1491,8,58,10,58,12,58,1494,9,58,1,59,1,59,5,59,1498,8,59,10,59,
		12,59,1501,9,59,1,59,1,59,5,59,1505,8,59,10,59,12,59,1508,9,59,1,59,5,
		59,1511,8,59,10,59,12,59,1514,9,59,1,60,1,60,5,60,1518,8,60,10,60,12,60,
		1521,9,60,1,60,1,60,5,60,1525,8,60,10,60,12,60,1528,9,60,1,60,5,60,1531,
		8,60,10,60,12,60,1534,9,60,1,61,1,61,1,61,5,61,1539,8,61,10,61,12,61,1542,
		9,61,1,61,1,61,5,61,1546,8,61,10,61,12,61,1549,9,61,1,62,1,62,1,62,5,62,
		1554,8,62,10,62,12,62,1557,9,62,1,62,1,62,3,62,1561,8,62,1,63,1,63,1,63,
		5,63,1566,8,63,10,63,12,63,1569,9,63,1,63,1,63,4,63,1573,8,63,11,63,12,
		63,1574,1,63,1,63,5,63,1579,8,63,10,63,12,63,1582,9,63,1,63,1,63,3,63,
		1586,8,63,1,64,1,64,5,64,1590,8,64,10,64,12,64,1593,9,64,1,64,1,64,5,64,
		1597,8,64,10,64,12,64,1600,9,64,1,64,5,64,1603,8,64,10,64,12,64,1606,9,
		64,1,65,1,65,1,65,5,65,1611,8,65,10,65,12,65,1614,9,65,1,65,1,65,5,65,
		1618,8,65,10,65,12,65,1621,9,65,1,66,1,66,1,66,5,66,1626,8,66,10,66,12,
		66,1629,9,66,1,66,5,66,1632,8,66,10,66,12,66,1635,9,66,1,67,1,67,1,67,
		5,67,1640,8,67,10,67,12,67,1643,9,67,1,67,1,67,5,67,1647,8,67,10,67,12,
		67,1650,9,67,1,68,1,68,1,68,5,68,1655,8,68,10,68,12,68,1658,9,68,1,68,
		1,68,5,68,1662,8,68,10,68,12,68,1665,9,68,1,69,1,69,5,69,1669,8,69,10,
		69,12,69,1672,9,69,1,69,1,69,1,69,5,69,1677,8,69,10,69,12,69,1680,9,69,
		1,70,5,70,1683,8,70,10,70,12,70,1686,9,70,1,70,1,70,1,71,1,71,3,71,1692,
		8,71,1,71,5,71,1695,8,71,10,71,12,71,1698,9,71,1,72,1,72,1,72,1,72,1,72,
		1,72,1,72,1,72,1,72,1,72,1,72,1,72,3,72,1712,8,72,1,73,1,73,1,73,1,73,
		1,74,1,74,3,74,1720,8,74,1,74,5,74,1723,8,74,10,74,12,74,1726,9,74,1,74,
		1,74,5,74,1730,8,74,10,74,12,74,1733,9,74,1,74,4,74,1736,8,74,11,74,12,
		74,1737,3,74,1740,8,74,1,75,5,75,1743,8,75,10,75,12,75,1746,9,75,1,75,
		3,75,1749,8,75,1,75,5,75,1752,8,75,10,75,12,75,1755,9,75,1,75,1,75,1,76,
		1,76,1,76,1,76,5,76,1763,8,76,10,76,12,76,1766,9,76,3,76,1768,8,76,1,76,
		1,76,1,77,1,77,1,77,1,77,5,77,1776,8,77,10,77,12,77,1779,9,77,3,77,1781,
		8,77,1,77,1,77,1,78,1,78,5,78,1787,8,78,10,78,12,78,1790,9,78,1,78,1,78,
		5,78,1794,8,78,10,78,12,78,1797,9,78,1,78,1,78,5,78,1801,8,78,10,78,12,
		78,1804,9,78,1,78,5,78,1807,8,78,10,78,12,78,1810,9,78,1,78,1,78,1,79,
		3,79,1815,8,79,1,79,1,79,3,79,1819,8,79,1,80,4,80,1822,8,80,11,80,12,80,
		1823,1,81,1,81,5,81,1828,8,81,10,81,12,81,1831,9,81,1,81,1,81,5,81,1835,
		8,81,10,81,12,81,1838,9,81,3,81,1840,8,81,1,81,3,81,1843,8,81,1,81,5,81,
		1846,8,81,10,81,12,81,1849,9,81,1,81,1,81,1,82,1,82,1,82,1,82,1,82,1,82,
		1,82,1,82,1,82,3,82,1862,8,82,1,83,1,83,3,83,1866,8,83,1,84,1,84,1,84,
		5,84,1871,8,84,10,84,12,84,1874,9,84,1,84,1,84,1,85,1,85,1,85,1,85,1,85,
		5,85,1883,8,85,10,85,12,85,1886,9,85,1,85,1,85,1,86,1,86,1,87,1,87,1,87,
		1,87,1,88,1,88,1,89,1,89,1,89,1,89,1,90,5,90,1903,8,90,10,90,12,90,1906,
		9,90,1,90,1,90,5,90,1910,8,90,10,90,12,90,1913,9,90,1,90,1,90,5,90,1917,
		8,90,10,90,12,90,1920,9,90,1,90,1,90,1,90,1,90,5,90,1926,8,90,10,90,12,
		90,1929,9,90,1,90,1,90,5,90,1933,8,90,10,90,12,90,1936,9,90,1,90,1,90,
		5,90,1940,8,90,10,90,12,90,1943,9,90,1,90,1,90,5,90,1947,8,90,10,90,12,
		90,1950,9,90,1,90,1,90,3,90,1954,8,90,1,91,3,91,1957,8,91,1,91,5,91,1960,
		8,91,10,91,12,91,1963,9,91,1,91,1,91,5,91,1967,8,91,10,91,12,91,1970,9,
		91,1,91,5,91,1973,8,91,10,91,12,91,1976,9,91,1,92,1,92,1,92,5,92,1981,
		8,92,10,92,12,92,1984,9,92,1,92,1,92,5,92,1988,8,92,10,92,12,92,1991,9,
		92,1,92,3,92,1994,8,92,3,92,1996,8,92,1,93,1,93,5,93,2000,8,93,10,93,12,
		93,2003,9,93,1,93,1,93,5,93,2007,8,93,10,93,12,93,2010,9,93,1,93,3,93,
		2013,8,93,1,93,5,93,2016,8,93,10,93,12,93,2019,9,93,1,93,1,93,1,94,1,94,
		3,94,2025,8,94,1,94,1,94,5,94,2029,8,94,10,94,12,94,2032,9,94,1,94,1,94,
		1,95,1,95,3,95,2038,8,95,1,96,1,96,1,96,5,96,2043,8,96,10,96,12,96,2046,
		9,96,1,96,1,96,5,96,2050,8,96,10,96,12,96,2053,9,96,1,96,1,96,3,96,2057,
		8,96,1,96,3,96,2060,8,96,1,97,1,97,3,97,2064,8,97,1,98,1,98,5,98,2068,
		8,98,10,98,12,98,2071,9,98,1,98,1,98,1,98,1,98,5,98,2077,8,98,10,98,12,
		98,2080,9,98,1,98,3,98,2083,8,98,1,98,3,98,2086,8,98,1,98,5,98,2089,8,
		98,10,98,12,98,2092,9,98,1,98,1,98,5,98,2096,8,98,10,98,12,98,2099,9,98,
		1,98,3,98,2102,8,98,3,98,2104,8,98,1,99,1,99,3,99,2108,8,99,1,100,1,100,
		5,100,2112,8,100,10,100,12,100,2115,9,100,1,100,1,100,1,100,1,100,3,100,
		2121,8,100,1,100,5,100,2124,8,100,10,100,12,100,2127,9,100,1,100,1,100,
		5,100,2131,8,100,10,100,12,100,2134,9,100,1,100,1,100,5,100,2138,8,100,
		10,100,12,100,2141,9,100,5,100,2143,8,100,10,100,12,100,2146,9,100,1,100,
		5,100,2149,8,100,10,100,12,100,2152,9,100,1,100,1,100,1,101,1,101,5,101,
		2158,8,101,10,101,12,101,2161,9,101,1,101,1,101,5,101,2165,8,101,10,101,
		12,101,2168,9,101,1,101,5,101,2171,8,101,10,101,12,101,2174,9,101,1,101,
		5,101,2177,8,101,10,101,12,101,2180,9,101,1,101,1,101,5,101,2184,8,101,
		10,101,12,101,2187,9,101,1,101,1,101,3,101,2191,8,101,1,101,1,101,5,101,
		2195,8,101,10,101,12,101,2198,9,101,1,101,1,101,5,101,2202,8,101,10,101,
		12,101,2205,9,101,1,101,3,101,2208,8,101,1,102,1,102,1,102,3,102,2213,
		8,102,1,103,1,103,5,103,2217,8,103,10,103,12,103,2220,9,103,1,103,1,103,
		1,104,1,104,5,104,2226,8,104,10,104,12,104,2229,9,104,1,104,1,104,1,105,
		1,105,5,105,2235,8,105,10,105,12,105,2238,9,105,1,105,1,105,5,105,2242,
		8,105,10,105,12,105,2245,9,105,1,105,5,105,2248,8,105,10,105,12,105,2251,
		9,105,1,105,5,105,2254,8,105,10,105,12,105,2257,9,105,1,105,3,105,2260,
		8,105,1,106,1,106,5,106,2264,8,106,10,106,12,106,2267,9,106,1,106,1,106,
		5,106,2271,8,106,10,106,12,106,2274,9,106,1,106,1,106,1,106,1,106,1,106,
		5,106,2281,8,106,10,106,12,106,2284,9,106,1,106,1,106,1,107,1,107,5,107,
		2290,8,107,10,107,12,107,2293,9,107,1,107,1,107,1,108,1,108,1,108,3,108,
		2300,8,108,1,109,1,109,5,109,2304,8,109,10,109,12,109,2307,9,109,1,109,
		1,109,5,109,2311,8,109,10,109,12,109,2314,9,109,1,109,1,109,3,109,2318,
		8,109,1,109,1,109,1,109,1,109,5,109,2324,8,109,10,109,12,109,2327,9,109,
		1,109,3,109,2330,8,109,1,110,1,110,5,110,2334,8,110,10,110,12,110,2337,
		9,110,1,110,1,110,1,110,1,110,5,110,2343,8,110,10,110,12,110,2346,9,110,
		1,110,3,110,2349,8,110,1,111,1,111,5,111,2353,8,111,10,111,12,111,2356,
		9,111,1,111,3,111,2359,8,111,1,111,5,111,2362,8,111,10,111,12,111,2365,
		9,111,1,111,1,111,5,111,2369,8,111,10,111,12,111,2372,9,111,1,111,1,111,
		1,111,1,111,1,112,1,112,5,112,2380,8,112,10,112,12,112,2383,9,112,1,112,
		1,112,1,112,3,112,2388,8,112,1,112,1,112,1,112,1,112,3,112,2394,8,112,
		1,113,1,113,1,113,5,113,2399,8,113,10,113,12,113,2402,9,113,5,113,2404,
		8,113,10,113,12,113,2407,9,113,3,113,2409,8,113,1,113,5,113,2412,8,113,
		10,113,12,113,2415,9,113,1,113,1,113,5,113,2419,8,113,10,113,12,113,2422,
		9,113,1,113,1,113,3,113,2426,8,113,1,114,1,114,1,115,1,115,1,116,1,116,
		1,117,1,117,1,118,1,118,1,119,1,119,1,120,1,120,1,121,1,121,1,122,1,122,
		1,122,1,122,1,122,1,122,1,122,3,122,2451,8,122,1,123,1,123,1,123,1,123,
		1,123,1,123,1,123,5,123,2460,8,123,10,123,12,123,2463,9,123,1,123,1,123,
		1,123,3,123,2468,8,123,1,124,1,124,1,124,3,124,2473,8,124,1,125,1,125,
		4,125,2477,8,125,11,125,12,125,2478,1,126,1,126,1,126,1,126,1,126,1,126,
		1,126,1,126,1,126,3,126,2490,8,126,1,126,5,126,2493,8,126,10,126,12,126,
		2496,9,126,1,127,1,127,1,128,1,128,1,129,1,129,1,130,1,130,1,131,1,131,
		1,132,1,132,1,133,1,133,1,134,1,134,1,135,1,135,1,136,1,136,5,136,2518,
		8,136,10,136,12,136,2521,9,136,1,137,1,137,3,137,2525,8,137,1,137,5,137,
		2528,8,137,10,137,12,137,2531,9,137,1,138,1,138,5,138,2535,8,138,10,138,
		12,138,2538,9,138,1,138,1,138,5,138,2542,8,138,10,138,12,138,2545,9,138,
		1,138,1,138,1,138,1,138,5,138,2551,8,138,10,138,12,138,2554,9,138,1,138,
		3,138,2557,8,138,1,138,5,138,2560,8,138,10,138,12,138,2563,9,138,1,138,
		3,138,2566,8,138,3,138,2568,8,138,1,139,1,139,1,139,1,139,4,139,2574,8,
		139,11,139,12,139,2575,1,139,1,139,1,139,1,139,1,139,4,139,2583,8,139,
		11,139,12,139,2584,1,139,1,139,3,139,2589,8,139,1,140,1,140,1,141,1,141,
		3,141,2595,8,141,1,141,3,141,2598,8,141,1,142,1,142,5,142,2602,8,142,10,
		142,12,142,2605,9,142,1,142,1,142,5,142,2609,8,142,10,142,12,142,2612,
		9,142,1,143,1,143,1,144,4,144,2617,8,144,11,144,12,144,2618,1,144,5,144,
		2622,8,144,10,144,12,144,2625,9,144,1,144,1,144,5,144,2629,8,144,10,144,
		12,144,2632,9,144,3,144,2634,8,144,1,145,1,145,1,145,0,0,146,0,2,4,6,8,
		10,12,14,16,18,20,22,24,26,28,30,32,34,36,38,40,42,44,46,48,50,52,54,56,
		58,60,62,64,66,68,70,72,74,76,78,80,82,84,86,88,90,92,94,96,98,100,102,
		104,106,108,110,112,114,116,118,120,122,124,126,128,130,132,134,136,138,
		140,142,144,146,148,150,152,154,156,158,160,162,164,166,168,170,172,174,
		176,178,180,182,184,186,188,190,192,194,196,198,200,202,204,206,208,210,
		212,214,216,218,220,222,224,226,228,230,232,234,236,238,240,242,244,246,
		248,250,252,254,256,258,260,262,264,266,268,270,272,274,276,278,280,282,
		284,286,288,290,0,25,1,0,59,60,1,0,63,64,2,0,27,27,67,67,1,0,156,158,1,
		0,162,164,2,0,53,53,84,84,1,0,36,37,1,0,27,32,2,0,47,48,50,51,1,0,43,46,
		2,0,89,89,91,91,2,0,88,88,90,90,1,0,18,19,1,0,15,17,3,0,25,25,49,49,87,
		87,1,0,108,112,2,0,119,119,124,124,1,0,104,107,2,0,89,89,92,92,1,0,113,
		118,1,0,120,122,1,0,125,127,3,0,56,56,93,96,99,102,8,0,58,58,66,69,73,
		73,78,79,92,92,97,98,103,128,140,140,2,0,5,5,26,26,2951,0,295,1,0,0,0,
		2,326,1,0,0,0,4,355,1,0,0,0,6,361,1,0,0,0,8,381,1,0,0,0,10,393,1,0,0,0,
		12,398,1,0,0,0,14,401,1,0,0,0,16,411,1,0,0,0,18,419,1,0,0,0,20,422,1,0,
		0,0,22,492,1,0,0,0,24,505,1,0,0,0,26,519,1,0,0,0,28,534,1,0,0,0,30,560,
		1,0,0,0,32,562,1,0,0,0,34,565,1,0,0,0,36,581,1,0,0,0,38,610,1,0,0,0,40,
		617,1,0,0,0,42,627,1,0,0,0,44,678,1,0,0,0,46,680,1,0,0,0,48,726,1,0,0,
		0,50,733,1,0,0,0,52,762,1,0,0,0,54,841,1,0,0,0,56,855,1,0,0,0,58,862,1,
		0,0,0,60,875,1,0,0,0,62,878,1,0,0,0,64,923,1,0,0,0,66,971,1,0,0,0,68,1049,
		1,0,0,0,70,1060,1,0,0,0,72,1114,1,0,0,0,74,1151,1,0,0,0,76,1154,1,0,0,
		0,78,1188,1,0,0,0,80,1224,1,0,0,0,82,1250,1,0,0,0,84,1266,1,0,0,0,86,1270,
		1,0,0,0,88,1276,1,0,0,0,90,1295,1,0,0,0,92,1311,1,0,0,0,94,1332,1,0,0,
		0,96,1334,1,0,0,0,98,1354,1,0,0,0,100,1364,1,0,0,0,102,1381,1,0,0,0,104,
		1411,1,0,0,0,106,1430,1,0,0,0,108,1437,1,0,0,0,110,1458,1,0,0,0,112,1463,
		1,0,0,0,114,1477,1,0,0,0,116,1486,1,0,0,0,118,1495,1,0,0,0,120,1515,1,
		0,0,0,122,1535,1,0,0,0,124,1550,1,0,0,0,126,1562,1,0,0,0,128,1587,1,0,
		0,0,130,1607,1,0,0,0,132,1622,1,0,0,0,134,1636,1,0,0,0,136,1651,1,0,0,
		0,138,1666,1,0,0,0,140,1684,1,0,0,0,142,1691,1,0,0,0,144,1711,1,0,0,0,
		146,1713,1,0,0,0,148,1739,1,0,0,0,150,1744,1,0,0,0,152,1758,1,0,0,0,154,
		1771,1,0,0,0,156,1784,1,0,0,0,158,1818,1,0,0,0,160,1821,1,0,0,0,162,1839,
		1,0,0,0,164,1861,1,0,0,0,166,1865,1,0,0,0,168,1867,1,0,0,0,170,1877,1,
		0,0,0,172,1889,1,0,0,0,174,1891,1,0,0,0,176,1895,1,0,0,0,178,1897,1,0,
		0,0,180,1904,1,0,0,0,182,1956,1,0,0,0,184,1995,1,0,0,0,186,1997,1,0,0,
		0,188,2022,1,0,0,0,190,2035,1,0,0,0,192,2039,1,0,0,0,194,2063,1,0,0,0,
		196,2065,1,0,0,0,198,2107,1,0,0,0,200,2109,1,0,0,0,202,2207,1,0,0,0,204,
		2212,1,0,0,0,206,2214,1,0,0,0,208,2223,1,0,0,0,210,2232,1,0,0,0,212,2261,
		1,0,0,0,214,2287,1,0,0,0,216,2299,1,0,0,0,218,2301,1,0,0,0,220,2331,1,
		0,0,0,222,2350,1,0,0,0,224,2393,1,0,0,0,226,2408,1,0,0,0,228,2427,1,0,
		0,0,230,2429,1,0,0,0,232,2431,1,0,0,0,234,2433,1,0,0,0,236,2435,1,0,0,
		0,238,2437,1,0,0,0,240,2439,1,0,0,0,242,2441,1,0,0,0,244,2450,1,0,0,0,
		246,2467,1,0,0,0,248,2472,1,0,0,0,250,2476,1,0,0,0,252,2489,1,0,0,0,254,
		2497,1,0,0,0,256,2499,1,0,0,0,258,2501,1,0,0,0,260,2503,1,0,0,0,262,2505,
		1,0,0,0,264,2507,1,0,0,0,266,2509,1,0,0,0,268,2511,1,0,0,0,270,2513,1,
		0,0,0,272,2515,1,0,0,0,274,2524,1,0,0,0,276,2567,1,0,0,0,278,2588,1,0,
		0,0,280,2590,1,0,0,0,282,2592,1,0,0,0,284,2599,1,0,0,0,286,2613,1,0,0,
		0,288,2633,1,0,0,0,290,2635,1,0,0,0,292,294,5,5,0,0,293,292,1,0,0,0,294,
		297,1,0,0,0,295,293,1,0,0,0,295,296,1,0,0,0,296,298,1,0,0,0,297,295,1,
		0,0,0,298,302,3,4,2,0,299,301,3,290,145,0,300,299,1,0,0,0,301,304,1,0,
		0,0,302,300,1,0,0,0,302,303,1,0,0,0,303,319,1,0,0,0,304,302,1,0,0,0,305,
		316,3,18,9,0,306,308,3,290,145,0,307,306,1,0,0,0,308,309,1,0,0,0,309,307,
		1,0,0,0,309,310,1,0,0,0,310,312,1,0,0,0,311,313,3,18,9,0,312,311,1,0,0,
		0,312,313,1,0,0,0,313,315,1,0,0,0,314,307,1,0,0,0,315,318,1,0,0,0,316,
		314,1,0,0,0,316,317,1,0,0,0,317,320,1,0,0,0,318,316,1,0,0,0,319,305,1,
		0,0,0,319,320,1,0,0,0,320,321,1,0,0,0,321,322,5,0,0,1,322,1,1,0,0,0,323,
		325,5,5,0,0,324,323,1,0,0,0,325,328,1,0,0,0,326,324,1,0,0,0,326,327,1,
		0,0,0,327,329,1,0,0,0,328,326,1,0,0,0,329,333,3,4,2,0,330,332,3,290,145,
		0,331,330,1,0,0,0,332,335,1,0,0,0,333,331,1,0,0,0,333,334,1,0,0,0,334,
		350,1,0,0,0,335,333,1,0,0,0,336,347,3,116,58,0,337,339,3,290,145,0,338,
		337,1,0,0,0,339,340,1,0,0,0,340,338,1,0,0,0,340,341,1,0,0,0,341,343,1,
		0,0,0,342,344,3,116,58,0,343,342,1,0,0,0,343,344,1,0,0,0,344,346,1,0,0,
		0,345,338,1,0,0,0,346,349,1,0,0,0,347,345,1,0,0,0,347,348,1,0,0,0,348,
		351,1,0,0,0,349,347,1,0,0,0,350,336,1,0,0,0,350,351,1,0,0,0,351,352,1,
		0,0,0,352,353,5,0,0,1,353,3,1,0,0,0,354,356,3,6,3,0,355,354,1,0,0,0,355,
		356,1,0,0,0,356,357,1,0,0,0,357,358,3,10,5,0,358,359,3,12,6,0,359,5,1,
		0,0,0,360,362,3,8,4,0,361,360,1,0,0,0,362,363,1,0,0,0,363,361,1,0,0,0,
		363,364,1,0,0,0,364,7,1,0,0,0,365,366,5,56,0,0,366,376,5,25,0,0,367,369,
		5,11,0,0,368,370,3,282,141,0,369,368,1,0,0,0,370,371,1,0,0,0,371,369,1,
		0,0,0,371,372,1,0,0,0,372,373,1,0,0,0,373,374,5,12,0,0,374,377,1,0,0,0,
		375,377,3,282,141,0,376,367,1,0,0,0,376,375,1,0,0,0,377,379,1,0,0,0,378,
		380,3,288,144,0,379,378,1,0,0,0,379,380,1,0,0,0,380,382,1,0,0,0,381,365,
		1,0,0,0,382,383,1,0,0,0,383,381,1,0,0,0,383,384,1,0,0,0,384,9,1,0,0,0,
		385,387,3,250,125,0,386,385,1,0,0,0,386,387,1,0,0,0,387,388,1,0,0,0,388,
		389,5,57,0,0,389,391,3,284,142,0,390,392,3,288,144,0,391,390,1,0,0,0,391,
		392,1,0,0,0,392,394,1,0,0,0,393,386,1,0,0,0,393,394,1,0,0,0,394,11,1,0,
		0,0,395,397,3,14,7,0,396,395,1,0,0,0,397,400,1,0,0,0,398,396,1,0,0,0,398,
		399,1,0,0,0,399,13,1,0,0,0,400,398,1,0,0,0,401,402,5,58,0,0,402,406,3,
		284,142,0,403,404,5,7,0,0,404,407,5,15,0,0,405,407,3,16,8,0,406,403,1,
		0,0,0,406,405,1,0,0,0,406,407,1,0,0,0,407,409,1,0,0,0,408,410,3,288,144,
		0,409,408,1,0,0,0,409,410,1,0,0,0,410,15,1,0,0,0,411,412,5,87,0,0,412,
		413,3,286,143,0,413,17,1,0,0,0,414,420,3,20,10,0,415,420,3,62,31,0,416,
		420,3,52,26,0,417,420,3,66,33,0,418,420,3,76,38,0,419,414,1,0,0,0,419,
		415,1,0,0,0,419,416,1,0,0,0,419,417,1,0,0,0,419,418,1,0,0,0,420,19,1,0,
		0,0,421,423,3,250,125,0,422,421,1,0,0,0,422,423,1,0,0,0,423,424,1,0,0,
		0,424,428,7,0,0,0,425,427,5,5,0,0,426,425,1,0,0,0,427,430,1,0,0,0,428,
		426,1,0,0,0,428,429,1,0,0,0,429,431,1,0,0,0,430,428,1,0,0,0,431,439,3,
		286,143,0,432,434,5,5,0,0,433,432,1,0,0,0,434,437,1,0,0,0,435,433,1,0,
		0,0,435,436,1,0,0,0,436,438,1,0,0,0,437,435,1,0,0,0,438,440,3,78,39,0,
		439,435,1,0,0,0,439,440,1,0,0,0,440,448,1,0,0,0,441,443,5,5,0,0,442,441,
		1,0,0,0,443,446,1,0,0,0,444,442,1,0,0,0,444,445,1,0,0,0,445,447,1,0,0,
		0,446,444,1,0,0,0,447,449,3,22,11,0,448,444,1,0,0,0,448,449,1,0,0,0,449,
		464,1,0,0,0,450,452,5,5,0,0,451,450,1,0,0,0,452,455,1,0,0,0,453,451,1,
		0,0,0,453,454,1,0,0,0,454,456,1,0,0,0,455,453,1,0,0,0,456,460,5,25,0,0,
		457,459,5,5,0,0,458,457,1,0,0,0,459,462,1,0,0,0,460,458,1,0,0,0,460,461,
		1,0,0,0,461,463,1,0,0,0,462,460,1,0,0,0,463,465,3,28,14,0,464,453,1,0,
		0,0,464,465,1,0,0,0,465,473,1,0,0,0,466,468,5,5,0,0,467,466,1,0,0,0,468,
		471,1,0,0,0,469,467,1,0,0,0,469,470,1,0,0,0,470,472,1,0,0,0,471,469,1,
		0,0,0,472,474,3,102,51,0,473,469,1,0,0,0,473,474,1,0,0,0,474,489,1,0,0,
		0,475,477,5,5,0,0,476,475,1,0,0,0,477,480,1,0,0,0,478,476,1,0,0,0,478,
		479,1,0,0,0,479,481,1,0,0,0,480,478,1,0,0,0,481,490,3,36,18,0,482,484,
		5,5,0,0,483,482,1,0,0,0,484,487,1,0,0,0,485,483,1,0,0,0,485,486,1,0,0,
		0,486,488,1,0,0,0,487,485,1,0,0,0,488,490,3,46,23,0,489,478,1,0,0,0,489,
		485,1,0,0,0,489,490,1,0,0,0,490,21,1,0,0,0,491,493,3,250,125,0,492,491,
		1,0,0,0,492,493,1,0,0,0,493,501,1,0,0,0,494,498,5,66,0,0,495,497,5,5,0,
		0,496,495,1,0,0,0,497,500,1,0,0,0,498,496,1,0,0,0,498,499,1,0,0,0,499,
		502,1,0,0,0,500,498,1,0,0,0,501,494,1,0,0,0,501,502,1,0,0,0,502,503,1,
		0,0,0,503,504,3,24,12,0,504,23,1,0,0,0,505,514,5,9,0,0,506,511,3,26,13,
		0,507,508,5,8,0,0,508,510,3,26,13,0,509,507,1,0,0,0,510,513,1,0,0,0,511,
		509,1,0,0,0,511,512,1,0,0,0,512,515,1,0,0,0,513,511,1,0,0,0,514,506,1,
		0,0,0,514,515,1,0,0,0,515,516,1,0,0,0,516,517,5,10,0,0,517,25,1,0,0,0,
		518,520,3,250,125,0,519,518,1,0,0,0,519,520,1,0,0,0,520,522,1,0,0,0,521,
		523,7,1,0,0,522,521,1,0,0,0,522,523,1,0,0,0,523,524,1,0,0,0,524,525,3,
		286,143,0,525,526,5,25,0,0,526,529,3,82,41,0,527,528,5,27,0,0,528,530,
		3,116,58,0,529,527,1,0,0,0,529,530,1,0,0,0,530,27,1,0,0,0,531,533,3,274,
		137,0,532,531,1,0,0,0,533,536,1,0,0,0,534,532,1,0,0,0,534,535,1,0,0,0,
		535,537,1,0,0,0,536,534,1,0,0,0,537,554,3,30,15,0,538,540,5,5,0,0,539,
		538,1,0,0,0,540,543,1,0,0,0,541,539,1,0,0,0,541,542,1,0,0,0,542,544,1,
		0,0,0,543,541,1,0,0,0,544,548,5,8,0,0,545,547,5,5,0,0,546,545,1,0,0,0,
		547,550,1,0,0,0,548,546,1,0,0,0,548,549,1,0,0,0,549,551,1,0,0,0,550,548,
		1,0,0,0,551,553,3,30,15,0,552,541,1,0,0,0,553,556,1,0,0,0,554,552,1,0,
		0,0,554,555,1,0,0,0,555,29,1,0,0,0,556,554,1,0,0,0,557,561,3,32,16,0,558,
		561,3,96,48,0,559,561,3,34,17,0,560,557,1,0,0,0,560,558,1,0,0,0,560,559,
		1,0,0,0,561,31,1,0,0,0,562,563,3,96,48,0,563,564,3,148,74,0,564,33,1,0,
		0,0,565,569,3,96,48,0,566,568,5,5,0,0,567,566,1,0,0,0,568,571,1,0,0,0,
		569,567,1,0,0,0,569,570,1,0,0,0,570,572,1,0,0,0,571,569,1,0,0,0,572,576,
		5,67,0,0,573,575,5,5,0,0,574,573,1,0,0,0,575,578,1,0,0,0,576,574,1,0,0,
		0,576,577,1,0,0,0,577,579,1,0,0,0,578,576,1,0,0,0,579,580,3,116,58,0,580,
		35,1,0,0,0,581,585,5,13,0,0,582,584,5,5,0,0,583,582,1,0,0,0,584,587,1,
		0,0,0,585,583,1,0,0,0,585,586,1,0,0,0,586,591,1,0,0,0,587,585,1,0,0,0,
		588,590,3,38,19,0,589,588,1,0,0,0,590,593,1,0,0,0,591,589,1,0,0,0,591,
		592,1,0,0,0,592,597,1,0,0,0,593,591,1,0,0,0,594,596,5,5,0,0,595,594,1,
		0,0,0,596,599,1,0,0,0,597,595,1,0,0,0,597,598,1,0,0,0,598,600,1,0,0,0,
		599,597,1,0,0,0,600,601,5,14,0,0,601,37,1,0,0,0,602,611,3,20,10,0,603,
		611,3,52,26,0,604,611,3,62,31,0,605,611,3,64,32,0,606,611,3,66,33,0,607,
		611,3,40,20,0,608,611,3,42,21,0,609,611,3,76,38,0,610,602,1,0,0,0,610,
		603,1,0,0,0,610,604,1,0,0,0,610,605,1,0,0,0,610,606,1,0,0,0,610,607,1,
		0,0,0,610,608,1,0,0,0,610,609,1,0,0,0,611,613,1,0,0,0,612,614,3,290,145,
		0,613,612,1,0,0,0,614,615,1,0,0,0,615,613,1,0,0,0,615,616,1,0,0,0,616,
		39,1,0,0,0,617,621,5,69,0,0,618,620,5,5,0,0,619,618,1,0,0,0,620,623,1,
		0,0,0,621,619,1,0,0,0,621,622,1,0,0,0,622,624,1,0,0,0,623,621,1,0,0,0,
		624,625,3,106,53,0,625,41,1,0,0,0,626,628,3,250,125,0,627,626,1,0,0,0,
		627,628,1,0,0,0,628,629,1,0,0,0,629,633,5,66,0,0,630,632,5,5,0,0,631,630,
		1,0,0,0,632,635,1,0,0,0,633,631,1,0,0,0,633,634,1,0,0,0,634,636,1,0,0,
		0,635,633,1,0,0,0,636,651,3,54,27,0,637,639,5,5,0,0,638,637,1,0,0,0,639,
		642,1,0,0,0,640,638,1,0,0,0,640,641,1,0,0,0,641,643,1,0,0,0,642,640,1,
		0,0,0,643,647,5,25,0,0,644,646,5,5,0,0,645,644,1,0,0,0,646,649,1,0,0,0,
		647,645,1,0,0,0,647,648,1,0,0,0,648,650,1,0,0,0,649,647,1,0,0,0,650,652,
		3,44,22,0,651,640,1,0,0,0,651,652,1,0,0,0,652,656,1,0,0,0,653,655,5,5,
		0,0,654,653,1,0,0,0,655,658,1,0,0,0,656,654,1,0,0,0,656,657,1,0,0,0,657,
		660,1,0,0,0,658,656,1,0,0,0,659,661,3,106,53,0,660,659,1,0,0,0,660,661,
		1,0,0,0,661,43,1,0,0,0,662,666,5,70,0,0,663,665,5,5,0,0,664,663,1,0,0,
		0,665,668,1,0,0,0,666,664,1,0,0,0,666,667,1,0,0,0,667,669,1,0,0,0,668,
		666,1,0,0,0,669,679,3,154,77,0,670,674,5,71,0,0,671,673,5,5,0,0,672,671,
		1,0,0,0,673,676,1,0,0,0,674,672,1,0,0,0,674,675,1,0,0,0,675,677,1,0,0,
		0,676,674,1,0,0,0,677,679,3,154,77,0,678,662,1,0,0,0,678,670,1,0,0,0,679,
		45,1,0,0,0,680,684,5,13,0,0,681,683,5,5,0,0,682,681,1,0,0,0,683,686,1,
		0,0,0,684,682,1,0,0,0,684,685,1,0,0,0,685,688,1,0,0,0,686,684,1,0,0,0,
		687,689,3,48,24,0,688,687,1,0,0,0,688,689,1,0,0,0,689,709,1,0,0,0,690,
		692,5,5,0,0,691,690,1,0,0,0,692,695,1,0,0,0,693,691,1,0,0,0,693,694,1,
		0,0,0,694,696,1,0,0,0,695,693,1,0,0,0,696,700,5,26,0,0,697,699,5,5,0,0,
		698,697,1,0,0,0,699,702,1,0,0,0,700,698,1,0,0,0,700,701,1,0,0,0,701,706,
		1,0,0,0,702,700,1,0,0,0,703,705,3,38,19,0,704,703,1,0,0,0,705,708,1,0,
		0,0,706,704,1,0,0,0,706,707,1,0,0,0,707,710,1,0,0,0,708,706,1,0,0,0,709,
		693,1,0,0,0,709,710,1,0,0,0,710,714,1,0,0,0,711,713,5,5,0,0,712,711,1,
		0,0,0,713,716,1,0,0,0,714,712,1,0,0,0,714,715,1,0,0,0,715,717,1,0,0,0,
		716,714,1,0,0,0,717,718,5,14,0,0,718,47,1,0,0,0,719,723,3,50,25,0,720,
		722,5,5,0,0,721,720,1,0,0,0,722,725,1,0,0,0,723,721,1,0,0,0,723,724,1,
		0,0,0,724,727,1,0,0,0,725,723,1,0,0,0,726,719,1,0,0,0,727,728,1,0,0,0,
		728,726,1,0,0,0,728,729,1,0,0,0,729,731,1,0,0,0,730,732,5,26,0,0,731,730,
		1,0,0,0,731,732,1,0,0,0,732,49,1,0,0,0,733,741,3,286,143,0,734,736,5,5,
		0,0,735,734,1,0,0,0,736,739,1,0,0,0,737,735,1,0,0,0,737,738,1,0,0,0,738,
		740,1,0,0,0,739,737,1,0,0,0,740,742,3,154,77,0,741,737,1,0,0,0,741,742,
		1,0,0,0,742,750,1,0,0,0,743,745,5,5,0,0,744,743,1,0,0,0,745,748,1,0,0,
		0,746,744,1,0,0,0,746,747,1,0,0,0,747,749,1,0,0,0,748,746,1,0,0,0,749,
		751,3,36,18,0,750,746,1,0,0,0,750,751,1,0,0,0,751,759,1,0,0,0,752,754,
		5,5,0,0,753,752,1,0,0,0,754,757,1,0,0,0,755,753,1,0,0,0,755,756,1,0,0,
		0,756,758,1,0,0,0,757,755,1,0,0,0,758,760,5,8,0,0,759,755,1,0,0,0,759,
		760,1,0,0,0,760,51,1,0,0,0,761,763,3,250,125,0,762,761,1,0,0,0,762,763,
		1,0,0,0,763,764,1,0,0,0,764,780,5,61,0,0,765,767,5,5,0,0,766,765,1,0,0,
		0,767,770,1,0,0,0,768,766,1,0,0,0,768,769,1,0,0,0,769,771,1,0,0,0,770,
		768,1,0,0,0,771,775,3,82,41,0,772,774,5,5,0,0,773,772,1,0,0,0,774,777,
		1,0,0,0,775,773,1,0,0,0,775,776,1,0,0,0,776,778,1,0,0,0,777,775,1,0,0,
		0,778,779,5,7,0,0,779,781,1,0,0,0,780,768,1,0,0,0,780,781,1,0,0,0,781,
		789,1,0,0,0,782,784,5,5,0,0,783,782,1,0,0,0,784,787,1,0,0,0,785,783,1,
		0,0,0,785,786,1,0,0,0,786,788,1,0,0,0,787,785,1,0,0,0,788,790,3,78,39,
		0,789,785,1,0,0,0,789,790,1,0,0,0,790,798,1,0,0,0,791,793,5,5,0,0,792,
		791,1,0,0,0,793,796,1,0,0,0,794,792,1,0,0,0,794,795,1,0,0,0,795,797,1,
		0,0,0,796,794,1,0,0,0,797,799,3,284,142,0,798,794,1,0,0,0,798,799,1,0,
		0,0,799,803,1,0,0,0,800,802,5,5,0,0,801,800,1,0,0,0,802,805,1,0,0,0,803,
		801,1,0,0,0,803,804,1,0,0,0,804,806,1,0,0,0,805,803,1,0,0,0,806,821,3,
		54,27,0,807,809,5,5,0,0,808,807,1,0,0,0,809,812,1,0,0,0,810,808,1,0,0,
		0,810,811,1,0,0,0,811,813,1,0,0,0,812,810,1,0,0,0,813,817,5,25,0,0,814,
		816,5,5,0,0,815,814,1,0,0,0,816,819,1,0,0,0,817,815,1,0,0,0,817,818,1,
		0,0,0,818,820,1,0,0,0,819,817,1,0,0,0,820,822,3,82,41,0,821,810,1,0,0,
		0,821,822,1,0,0,0,822,830,1,0,0,0,823,825,5,5,0,0,824,823,1,0,0,0,825,
		828,1,0,0,0,826,824,1,0,0,0,826,827,1,0,0,0,827,829,1,0,0,0,828,826,1,
		0,0,0,829,831,3,102,51,0,830,826,1,0,0,0,830,831,1,0,0,0,831,839,1,0,0,
		0,832,834,5,5,0,0,833,832,1,0,0,0,834,837,1,0,0,0,835,833,1,0,0,0,835,
		836,1,0,0,0,836,838,1,0,0,0,837,835,1,0,0,0,838,840,3,60,30,0,839,835,
		1,0,0,0,839,840,1,0,0,0,840,53,1,0,0,0,841,850,5,9,0,0,842,847,3,56,28,
		0,843,844,5,8,0,0,844,846,3,56,28,0,845,843,1,0,0,0,846,849,1,0,0,0,847,
		845,1,0,0,0,847,848,1,0,0,0,848,851,1,0,0,0,849,847,1,0,0,0,850,842,1,
		0,0,0,850,851,1,0,0,0,851,852,1,0,0,0,852,853,5,10,0,0,853,55,1,0,0,0,
		854,856,3,250,125,0,855,854,1,0,0,0,855,856,1,0,0,0,856,857,1,0,0,0,857,
		860,3,58,29,0,858,859,5,27,0,0,859,861,3,116,58,0,860,858,1,0,0,0,860,
		861,1,0,0,0,861,57,1,0,0,0,862,863,3,286,143,0,863,864,5,25,0,0,864,865,
		3,82,41,0,865,59,1,0,0,0,866,876,3,106,53,0,867,871,5,27,0,0,868,870,5,
		5,0,0,869,868,1,0,0,0,870,873,1,0,0,0,871,869,1,0,0,0,871,872,1,0,0,0,
		872,874,1,0,0,0,873,871,1,0,0,0,874,876,3,116,58,0,875,866,1,0,0,0,875,
		867,1,0,0,0,876,61,1,0,0,0,877,879,3,250,125,0,878,877,1,0,0,0,878,879,
		1,0,0,0,879,880,1,0,0,0,880,884,5,62,0,0,881,883,5,5,0,0,882,881,1,0,0,
		0,883,886,1,0,0,0,884,882,1,0,0,0,884,885,1,0,0,0,885,887,1,0,0,0,886,
		884,1,0,0,0,887,895,3,286,143,0,888,890,5,5,0,0,889,888,1,0,0,0,890,893,
		1,0,0,0,891,889,1,0,0,0,891,892,1,0,0,0,892,894,1,0,0,0,893,891,1,0,0,
		0,894,896,3,22,11,0,895,891,1,0,0,0,895,896,1,0,0,0,896,911,1,0,0,0,897,
		899,5,5,0,0,898,897,1,0,0,0,899,902,1,0,0,0,900,898,1,0,0,0,900,901,1,
		0,0,0,901,903,1,0,0,0,902,900,1,0,0,0,903,907,5,25,0,0,904,906,5,5,0,0,
		905,904,1,0,0,0,906,909,1,0,0,0,907,905,1,0,0,0,907,908,1,0,0,0,908,910,
		1,0,0,0,909,907,1,0,0,0,910,912,3,28,14,0,911,900,1,0,0,0,911,912,1,0,
		0,0,912,920,1,0,0,0,913,915,5,5,0,0,914,913,1,0,0,0,915,918,1,0,0,0,916,
		914,1,0,0,0,916,917,1,0,0,0,917,919,1,0,0,0,918,916,1,0,0,0,919,921,3,
		36,18,0,920,916,1,0,0,0,920,921,1,0,0,0,921,63,1,0,0,0,922,924,3,250,125,
		0,923,922,1,0,0,0,923,924,1,0,0,0,924,925,1,0,0,0,925,929,5,68,0,0,926,
		928,5,5,0,0,927,926,1,0,0,0,928,931,1,0,0,0,929,927,1,0,0,0,929,930,1,
		0,0,0,930,933,1,0,0,0,931,929,1,0,0,0,932,934,3,250,125,0,933,932,1,0,
		0,0,933,934,1,0,0,0,934,935,1,0,0,0,935,943,5,62,0,0,936,938,5,5,0,0,937,
		936,1,0,0,0,938,941,1,0,0,0,939,937,1,0,0,0,939,940,1,0,0,0,940,942,1,
		0,0,0,941,939,1,0,0,0,942,944,3,286,143,0,943,939,1,0,0,0,943,944,1,0,
		0,0,944,959,1,0,0,0,945,947,5,5,0,0,946,945,1,0,0,0,947,950,1,0,0,0,948,
		946,1,0,0,0,948,949,1,0,0,0,949,951,1,0,0,0,950,948,1,0,0,0,951,955,5,
		25,0,0,952,954,5,5,0,0,953,952,1,0,0,0,954,957,1,0,0,0,955,953,1,0,0,0,
		955,956,1,0,0,0,956,958,1,0,0,0,957,955,1,0,0,0,958,960,3,28,14,0,959,
		948,1,0,0,0,959,960,1,0,0,0,960,968,1,0,0,0,961,963,5,5,0,0,962,961,1,
		0,0,0,963,966,1,0,0,0,964,962,1,0,0,0,964,965,1,0,0,0,965,967,1,0,0,0,
		966,964,1,0,0,0,967,969,3,36,18,0,968,964,1,0,0,0,968,969,1,0,0,0,969,
		65,1,0,0,0,970,972,3,250,125,0,971,970,1,0,0,0,971,972,1,0,0,0,972,973,
		1,0,0,0,973,981,7,1,0,0,974,976,5,5,0,0,975,974,1,0,0,0,976,979,1,0,0,
		0,977,975,1,0,0,0,977,978,1,0,0,0,978,980,1,0,0,0,979,977,1,0,0,0,980,
		982,3,78,39,0,981,977,1,0,0,0,981,982,1,0,0,0,982,998,1,0,0,0,983,985,
		5,5,0,0,984,983,1,0,0,0,985,988,1,0,0,0,986,984,1,0,0,0,986,987,1,0,0,
		0,987,989,1,0,0,0,988,986,1,0,0,0,989,993,3,82,41,0,990,992,5,5,0,0,991,
		990,1,0,0,0,992,995,1,0,0,0,993,991,1,0,0,0,993,994,1,0,0,0,994,996,1,
		0,0,0,995,993,1,0,0,0,996,997,5,7,0,0,997,999,1,0,0,0,998,986,1,0,0,0,
		998,999,1,0,0,0,999,1003,1,0,0,0,1000,1002,5,5,0,0,1001,1000,1,0,0,0,1002,
		1005,1,0,0,0,1003,1001,1,0,0,0,1003,1004,1,0,0,0,1004,1008,1,0,0,0,1005,
		1003,1,0,0,0,1006,1009,3,68,34,0,1007,1009,3,70,35,0,1008,1006,1,0,0,0,
		1008,1007,1,0,0,0,1009,1017,1,0,0,0,1010,1012,5,5,0,0,1011,1010,1,0,0,
		0,1012,1015,1,0,0,0,1013,1011,1,0,0,0,1013,1014,1,0,0,0,1014,1016,1,0,
		0,0,1015,1013,1,0,0,0,1016,1018,3,102,51,0,1017,1013,1,0,0,0,1017,1018,
		1,0,0,0,1018,1033,1,0,0,0,1019,1021,5,5,0,0,1020,1019,1,0,0,0,1021,1024,
		1,0,0,0,1022,1020,1,0,0,0,1022,1023,1,0,0,0,1023,1025,1,0,0,0,1024,1022,
		1,0,0,0,1025,1029,7,2,0,0,1026,1028,5,5,0,0,1027,1026,1,0,0,0,1028,1031,
		1,0,0,0,1029,1027,1,0,0,0,1029,1030,1,0,0,0,1030,1032,1,0,0,0,1031,1029,
		1,0,0,0,1032,1034,3,116,58,0,1033,1022,1,0,0,0,1033,1034,1,0,0,0,1034,
		1047,1,0,0,0,1035,1039,3,72,36,0,1036,1037,3,288,144,0,1037,1038,3,74,
		37,0,1038,1040,1,0,0,0,1039,1036,1,0,0,0,1039,1040,1,0,0,0,1040,1048,1,
		0,0,0,1041,1045,3,74,37,0,1042,1043,3,288,144,0,1043,1044,3,72,36,0,1044,
		1046,1,0,0,0,1045,1042,1,0,0,0,1045,1046,1,0,0,0,1046,1048,1,0,0,0,1047,
		1035,1,0,0,0,1047,1041,1,0,0,0,1047,1048,1,0,0,0,1048,67,1,0,0,0,1049,
		1050,5,9,0,0,1050,1055,3,70,35,0,1051,1052,5,8,0,0,1052,1054,3,70,35,0,
		1053,1051,1,0,0,0,1054,1057,1,0,0,0,1055,1053,1,0,0,0,1055,1056,1,0,0,
		0,1056,1058,1,0,0,0,1057,1055,1,0,0,0,1058,1059,5,10,0,0,1059,69,1,0,0,
		0,1060,1063,3,286,143,0,1061,1062,5,25,0,0,1062,1064,3,82,41,0,1063,1061,
		1,0,0,0,1063,1064,1,0,0,0,1064,71,1,0,0,0,1065,1067,3,250,125,0,1066,1065,
		1,0,0,0,1066,1067,1,0,0,0,1067,1068,1,0,0,0,1068,1115,5,97,0,0,1069,1071,
		3,250,125,0,1070,1069,1,0,0,0,1070,1071,1,0,0,0,1071,1072,1,0,0,0,1072,
		1076,5,97,0,0,1073,1075,5,5,0,0,1074,1073,1,0,0,0,1075,1078,1,0,0,0,1076,
		1074,1,0,0,0,1076,1077,1,0,0,0,1077,1079,1,0,0,0,1078,1076,1,0,0,0,1079,
		1080,5,9,0,0,1080,1095,5,10,0,0,1081,1083,5,5,0,0,1082,1081,1,0,0,0,1083,
		1086,1,0,0,0,1084,1082,1,0,0,0,1084,1085,1,0,0,0,1085,1087,1,0,0,0,1086,
		1084,1,0,0,0,1087,1091,5,25,0,0,1088,1090,5,5,0,0,1089,1088,1,0,0,0,1090,
		1093,1,0,0,0,1091,1089,1,0,0,0,1091,1092,1,0,0,0,1092,1094,1,0,0,0,1093,
		1091,1,0,0,0,1094,1096,3,82,41,0,1095,1084,1,0,0,0,1095,1096,1,0,0,0,1096,
		1100,1,0,0,0,1097,1099,5,5,0,0,1098,1097,1,0,0,0,1099,1102,1,0,0,0,1100,
		1098,1,0,0,0,1100,1101,1,0,0,0,1101,1112,1,0,0,0,1102,1100,1,0,0,0,1103,
		1113,3,106,53,0,1104,1108,5,27,0,0,1105,1107,5,5,0,0,1106,1105,1,0,0,0,
		1107,1110,1,0,0,0,1108,1106,1,0,0,0,1108,1109,1,0,0,0,1109,1111,1,0,0,
		0,1110,1108,1,0,0,0,1111,1113,3,116,58,0,1112,1103,1,0,0,0,1112,1104,1,
		0,0,0,1113,1115,1,0,0,0,1114,1066,1,0,0,0,1114,1070,1,0,0,0,1115,73,1,
		0,0,0,1116,1118,3,250,125,0,1117,1116,1,0,0,0,1117,1118,1,0,0,0,1118,1119,
		1,0,0,0,1119,1152,5,98,0,0,1120,1122,3,250,125,0,1121,1120,1,0,0,0,1121,
		1122,1,0,0,0,1122,1123,1,0,0,0,1123,1127,5,98,0,0,1124,1126,5,5,0,0,1125,
		1124,1,0,0,0,1126,1129,1,0,0,0,1127,1125,1,0,0,0,1127,1128,1,0,0,0,1128,
		1130,1,0,0,0,1129,1127,1,0,0,0,1130,1135,5,9,0,0,1131,1134,3,274,137,0,
		1132,1134,3,268,134,0,1133,1131,1,0,0,0,1133,1132,1,0,0,0,1134,1137,1,
		0,0,0,1135,1133,1,0,0,0,1135,1136,1,0,0,0,1136,1140,1,0,0,0,1137,1135,
		1,0,0,0,1138,1141,3,286,143,0,1139,1141,3,58,29,0,1140,1138,1,0,0,0,1140,
		1139,1,0,0,0,1141,1142,1,0,0,0,1142,1146,5,10,0,0,1143,1145,5,5,0,0,1144,
		1143,1,0,0,0,1145,1148,1,0,0,0,1146,1144,1,0,0,0,1146,1147,1,0,0,0,1147,
		1149,1,0,0,0,1148,1146,1,0,0,0,1149,1150,3,60,30,0,1150,1152,1,0,0,0,1151,
		1117,1,0,0,0,1151,1121,1,0,0,0,1152,75,1,0,0,0,1153,1155,3,250,125,0,1154,
		1153,1,0,0,0,1154,1155,1,0,0,0,1155,1156,1,0,0,0,1156,1160,5,65,0,0,1157,
		1159,5,5,0,0,1158,1157,1,0,0,0,1159,1162,1,0,0,0,1160,1158,1,0,0,0,1160,
		1161,1,0,0,0,1161,1163,1,0,0,0,1162,1160,1,0,0,0,1163,1171,3,286,143,0,
		1164,1166,5,5,0,0,1165,1164,1,0,0,0,1166,1169,1,0,0,0,1167,1165,1,0,0,
		0,1167,1168,1,0,0,0,1168,1170,1,0,0,0,1169,1167,1,0,0,0,1170,1172,3,78,
		39,0,1171,1167,1,0,0,0,1171,1172,1,0,0,0,1172,1176,1,0,0,0,1173,1175,5,
		5,0,0,1174,1173,1,0,0,0,1175,1178,1,0,0,0,1176,1174,1,0,0,0,1176,1177,
		1,0,0,0,1177,1179,1,0,0,0,1178,1176,1,0,0,0,1179,1183,5,27,0,0,1180,1182,
		5,5,0,0,1181,1180,1,0,0,0,1182,1185,1,0,0,0,1183,1181,1,0,0,0,1183,1184,
		1,0,0,0,1184,1186,1,0,0,0,1185,1183,1,0,0,0,1186,1187,3,82,41,0,1187,77,
		1,0,0,0,1188,1192,5,43,0,0,1189,1191,5,5,0,0,1190,1189,1,0,0,0,1191,1194,
		1,0,0,0,1192,1190,1,0,0,0,1192,1193,1,0,0,0,1193,1195,1,0,0,0,1194,1192,
		1,0,0,0,1195,1212,3,80,40,0,1196,1198,5,5,0,0,1197,1196,1,0,0,0,1198,1201,
		1,0,0,0,1199,1197,1,0,0,0,1199,1200,1,0,0,0,1200,1202,1,0,0,0,1201,1199,
		1,0,0,0,1202,1206,5,8,0,0,1203,1205,5,5,0,0,1204,1203,1,0,0,0,1205,1208,
		1,0,0,0,1206,1204,1,0,0,0,1206,1207,1,0,0,0,1207,1209,1,0,0,0,1208,1206,
		1,0,0,0,1209,1211,3,80,40,0,1210,1199,1,0,0,0,1211,1214,1,0,0,0,1212,1210,
		1,0,0,0,1212,1213,1,0,0,0,1213,1218,1,0,0,0,1214,1212,1,0,0,0,1215,1217,
		5,5,0,0,1216,1215,1,0,0,0,1217,1220,1,0,0,0,1218,1216,1,0,0,0,1218,1219,
		1,0,0,0,1219,1221,1,0,0,0,1220,1218,1,0,0,0,1221,1222,5,44,0,0,1222,79,
		1,0,0,0,1223,1225,3,250,125,0,1224,1223,1,0,0,0,1224,1225,1,0,0,0,1225,
		1229,1,0,0,0,1226,1228,5,5,0,0,1227,1226,1,0,0,0,1228,1231,1,0,0,0,1229,
		1227,1,0,0,0,1229,1230,1,0,0,0,1230,1232,1,0,0,0,1231,1229,1,0,0,0,1232,
		1247,3,286,143,0,1233,1235,5,5,0,0,1234,1233,1,0,0,0,1235,1238,1,0,0,0,
		1236,1234,1,0,0,0,1236,1237,1,0,0,0,1237,1239,1,0,0,0,1238,1236,1,0,0,
		0,1239,1243,5,25,0,0,1240,1242,5,5,0,0,1241,1240,1,0,0,0,1242,1245,1,0,
		0,0,1243,1241,1,0,0,0,1243,1244,1,0,0,0,1244,1246,1,0,0,0,1245,1243,1,
		0,0,0,1246,1248,3,82,41,0,1247,1236,1,0,0,0,1247,1248,1,0,0,0,1248,81,
		1,0,0,0,1249,1251,3,84,42,0,1250,1249,1,0,0,0,1250,1251,1,0,0,0,1251,1256,
		1,0,0,0,1252,1257,3,92,46,0,1253,1257,3,86,43,0,1254,1257,3,88,44,0,1255,
		1257,3,90,45,0,1256,1252,1,0,0,0,1256,1253,1,0,0,0,1256,1254,1,0,0,0,1256,
		1255,1,0,0,0,1257,83,1,0,0,0,1258,1267,3,274,137,0,1259,1263,5,118,0,0,
		1260,1262,5,5,0,0,1261,1260,1,0,0,0,1262,1265,1,0,0,0,1263,1261,1,0,0,
		0,1263,1264,1,0,0,0,1264,1267,1,0,0,0,1265,1263,1,0,0,0,1266,1258,1,0,
		0,0,1266,1259,1,0,0,0,1267,1268,1,0,0,0,1268,1266,1,0,0,0,1268,1269,1,
		0,0,0,1269,85,1,0,0,0,1270,1271,5,9,0,0,1271,1272,3,82,41,0,1272,1273,
		5,10,0,0,1273,87,1,0,0,0,1274,1277,3,90,45,0,1275,1277,3,86,43,0,1276,
		1274,1,0,0,0,1276,1275,1,0,0,0,1277,1281,1,0,0,0,1278,1280,5,5,0,0,1279,
		1278,1,0,0,0,1280,1283,1,0,0,0,1281,1279,1,0,0,0,1281,1282,1,0,0,0,1282,
		1285,1,0,0,0,1283,1281,1,0,0,0,1284,1286,5,41,0,0,1285,1284,1,0,0,0,1286,
		1287,1,0,0,0,1287,1285,1,0,0,0,1287,1288,1,0,0,0,1288,89,1,0,0,0,1289,
		1290,5,9,0,0,1290,1291,3,90,45,0,1291,1292,5,10,0,0,1292,1296,1,0,0,0,
		1293,1296,3,96,48,0,1294,1296,5,103,0,0,1295,1289,1,0,0,0,1295,1293,1,
		0,0,0,1295,1294,1,0,0,0,1296,91,1,0,0,0,1297,1301,3,94,47,0,1298,1300,
		5,5,0,0,1299,1298,1,0,0,0,1300,1303,1,0,0,0,1301,1299,1,0,0,0,1301,1302,
		1,0,0,0,1302,1304,1,0,0,0,1303,1301,1,0,0,0,1304,1308,5,7,0,0,1305,1307,
		5,5,0,0,1306,1305,1,0,0,0,1307,1310,1,0,0,0,1308,1306,1,0,0,0,1308,1309,
		1,0,0,0,1309,1312,1,0,0,0,1310,1308,1,0,0,0,1311,1297,1,0,0,0,1311,1312,
		1,0,0,0,1312,1313,1,0,0,0,1313,1317,3,100,50,0,1314,1316,5,5,0,0,1315,
		1314,1,0,0,0,1316,1319,1,0,0,0,1317,1315,1,0,0,0,1317,1318,1,0,0,0,1318,
		1320,1,0,0,0,1319,1317,1,0,0,0,1320,1324,5,33,0,0,1321,1323,5,5,0,0,1322,
		1321,1,0,0,0,1323,1326,1,0,0,0,1324,1322,1,0,0,0,1324,1325,1,0,0,0,1325,
		1327,1,0,0,0,1326,1324,1,0,0,0,1327,1328,3,82,41,0,1328,93,1,0,0,0,1329,
		1333,3,86,43,0,1330,1333,3,88,44,0,1331,1333,3,90,45,0,1332,1329,1,0,0,
		0,1332,1330,1,0,0,0,1332,1331,1,0,0,0,1333,95,1,0,0,0,1334,1351,3,98,49,
		0,1335,1337,5,5,0,0,1336,1335,1,0,0,0,1337,1340,1,0,0,0,1338,1336,1,0,
		0,0,1338,1339,1,0,0,0,1339,1341,1,0,0,0,1340,1338,1,0,0,0,1341,1345,5,
		7,0,0,1342,1344,5,5,0,0,1343,1342,1,0,0,0,1344,1347,1,0,0,0,1345,1343,
		1,0,0,0,1345,1346,1,0,0,0,1346,1348,1,0,0,0,1347,1345,1,0,0,0,1348,1350,
		3,98,49,0,1349,1338,1,0,0,0,1350,1353,1,0,0,0,1351,1349,1,0,0,0,1351,1352,
		1,0,0,0,1352,97,1,0,0,0,1353,1351,1,0,0,0,1354,1362,3,286,143,0,1355,1357,
		5,5,0,0,1356,1355,1,0,0,0,1357,1360,1,0,0,0,1358,1356,1,0,0,0,1358,1359,
		1,0,0,0,1359,1361,1,0,0,0,1360,1358,1,0,0,0,1361,1363,3,156,78,0,1362,
		1358,1,0,0,0,1362,1363,1,0,0,0,1363,99,1,0,0,0,1364,1367,5,9,0,0,1365,
		1368,3,58,29,0,1366,1368,3,82,41,0,1367,1365,1,0,0,0,1367,1366,1,0,0,0,
		1367,1368,1,0,0,0,1368,1376,1,0,0,0,1369,1372,5,8,0,0,1370,1373,3,58,29,
		0,1371,1373,3,82,41,0,1372,1370,1,0,0,0,1372,1371,1,0,0,0,1373,1375,1,
		0,0,0,1374,1369,1,0,0,0,1375,1378,1,0,0,0,1376,1374,1,0,0,0,1376,1377,
		1,0,0,0,1377,1379,1,0,0,0,1378,1376,1,0,0,0,1379,1380,5,10,0,0,1380,101,
		1,0,0,0,1381,1385,5,73,0,0,1382,1384,5,5,0,0,1383,1382,1,0,0,0,1384,1387,
		1,0,0,0,1385,1383,1,0,0,0,1385,1386,1,0,0,0,1386,1388,1,0,0,0,1387,1385,
		1,0,0,0,1388,1405,3,104,52,0,1389,1391,5,5,0,0,1390,1389,1,0,0,0,1391,
		1394,1,0,0,0,1392,1390,1,0,0,0,1392,1393,1,0,0,0,1393,1395,1,0,0,0,1394,
		1392,1,0,0,0,1395,1399,5,8,0,0,1396,1398,5,5,0,0,1397,1396,1,0,0,0,1398,
		1401,1,0,0,0,1399,1397,1,0,0,0,1399,1400,1,0,0,0,1400,1402,1,0,0,0,1401,
		1399,1,0,0,0,1402,1404,3,104,52,0,1403,1392,1,0,0,0,1404,1407,1,0,0,0,
		1405,1403,1,0,0,0,1405,1406,1,0,0,0,1406,103,1,0,0,0,1407,1405,1,0,0,0,
		1408,1410,3,274,137,0,1409,1408,1,0,0,0,1410,1413,1,0,0,0,1411,1409,1,
		0,0,0,1411,1412,1,0,0,0,1412,1414,1,0,0,0,1413,1411,1,0,0,0,1414,1418,
		3,286,143,0,1415,1417,5,5,0,0,1416,1415,1,0,0,0,1417,1420,1,0,0,0,1418,
		1416,1,0,0,0,1418,1419,1,0,0,0,1419,1421,1,0,0,0,1420,1418,1,0,0,0,1421,
		1425,5,25,0,0,1422,1424,5,5,0,0,1423,1422,1,0,0,0,1424,1427,1,0,0,0,1425,
		1423,1,0,0,0,1425,1426,1,0,0,0,1426,1428,1,0,0,0,1427,1425,1,0,0,0,1428,
		1429,3,82,41,0,1429,105,1,0,0,0,1430,1431,5,13,0,0,1431,1432,3,108,54,
		0,1432,1433,5,14,0,0,1433,107,1,0,0,0,1434,1436,3,290,145,0,1435,1434,
		1,0,0,0,1436,1439,1,0,0,0,1437,1435,1,0,0,0,1437,1438,1,0,0,0,1438,1454,
		1,0,0,0,1439,1437,1,0,0,0,1440,1451,3,110,55,0,1441,1443,3,290,145,0,1442,
		1441,1,0,0,0,1443,1444,1,0,0,0,1444,1442,1,0,0,0,1444,1445,1,0,0,0,1445,
		1447,1,0,0,0,1446,1448,3,110,55,0,1447,1446,1,0,0,0,1447,1448,1,0,0,0,
		1448,1450,1,0,0,0,1449,1442,1,0,0,0,1450,1453,1,0,0,0,1451,1449,1,0,0,
		0,1451,1452,1,0,0,0,1452,1455,1,0,0,0,1453,1451,1,0,0,0,1454,1440,1,0,
		0,0,1454,1455,1,0,0,0,1455,109,1,0,0,0,1456,1459,3,114,57,0,1457,1459,
		3,112,56,0,1458,1456,1,0,0,0,1458,1457,1,0,0,0,1459,111,1,0,0,0,1460,1462,
		3,274,137,0,1461,1460,1,0,0,0,1462,1465,1,0,0,0,1463,1461,1,0,0,0,1463,
		1464,1,0,0,0,1464,1469,1,0,0,0,1465,1463,1,0,0,0,1466,1468,5,5,0,0,1467,
		1466,1,0,0,0,1468,1471,1,0,0,0,1469,1467,1,0,0,0,1469,1470,1,0,0,0,1470,
		1472,1,0,0,0,1471,1469,1,0,0,0,1472,1473,3,116,58,0,1473,113,1,0,0,0,1474,
		1476,3,272,136,0,1475,1474,1,0,0,0,1476,1479,1,0,0,0,1477,1475,1,0,0,0,
		1477,1478,1,0,0,0,1478,1484,1,0,0,0,1479,1477,1,0,0,0,1480,1485,3,20,10,
		0,1481,1485,3,52,26,0,1482,1485,3,66,33,0,1483,1485,3,76,38,0,1484,1480,
		1,0,0,0,1484,1481,1,0,0,0,1484,1482,1,0,0,0,1484,1483,1,0,0,0,1485,115,
		1,0,0,0,1486,1492,3,118,59,0,1487,1488,3,228,114,0,1488,1489,3,118,59,
		0,1489,1491,1,0,0,0,1490,1487,1,0,0,0,1491,1494,1,0,0,0,1492,1490,1,0,
		0,0,1492,1493,1,0,0,0,1493,117,1,0,0,0,1494,1492,1,0,0,0,1495,1512,3,120,
		60,0,1496,1498,5,5,0,0,1497,1496,1,0,0,0,1498,1501,1,0,0,0,1499,1497,1,
		0,0,0,1499,1500,1,0,0,0,1500,1502,1,0,0,0,1501,1499,1,0,0,0,1502,1506,
		5,23,0,0,1503,1505,5,5,0,0,1504,1503,1,0,0,0,1505,1508,1,0,0,0,1506,1504,
		1,0,0,0,1506,1507,1,0,0,0,1507,1509,1,0,0,0,1508,1506,1,0,0,0,1509,1511,
		3,120,60,0,1510,1499,1,0,0,0,1511,1514,1,0,0,0,1512,1510,1,0,0,0,1512,
		1513,1,0,0,0,1513,119,1,0,0,0,1514,1512,1,0,0,0,1515,1532,3,122,61,0,1516,
		1518,5,5,0,0,1517,1516,1,0,0,0,1518,1521,1,0,0,0,1519,1517,1,0,0,0,1519,
		1520,1,0,0,0,1520,1522,1,0,0,0,1521,1519,1,0,0,0,1522,1526,5,22,0,0,1523,
		1525,5,5,0,0,1524,1523,1,0,0,0,1525,1528,1,0,0,0,1526,1524,1,0,0,0,1526,
		1527,1,0,0,0,1527,1529,1,0,0,0,1528,1526,1,0,0,0,1529,1531,3,122,61,0,
		1530,1519,1,0,0,0,1531,1534,1,0,0,0,1532,1530,1,0,0,0,1532,1533,1,0,0,
		0,1533,121,1,0,0,0,1534,1532,1,0,0,0,1535,1547,3,124,62,0,1536,1540,3,
		230,115,0,1537,1539,5,5,0,0,1538,1537,1,0,0,0,1539,1542,1,0,0,0,1540,1538,
		1,0,0,0,1540,1541,1,0,0,0,1541,1543,1,0,0,0,1542,1540,1,0,0,0,1543,1544,
		3,124,62,0,1544,1546,1,0,0,0,1545,1536,1,0,0,0,1546,1549,1,0,0,0,1547,
		1545,1,0,0,0,1547,1548,1,0,0,0,1548,123,1,0,0,0,1549,1547,1,0,0,0,1550,
		1560,3,126,63,0,1551,1555,3,232,116,0,1552,1554,5,5,0,0,1553,1552,1,0,
		0,0,1554,1557,1,0,0,0,1555,1553,1,0,0,0,1555,1556,1,0,0,0,1556,1558,1,
		0,0,0,1557,1555,1,0,0,0,1558,1559,3,126,63,0,1559,1561,1,0,0,0,1560,1551,
		1,0,0,0,1560,1561,1,0,0,0,1561,125,1,0,0,0,1562,1585,3,128,64,0,1563,1567,
		3,234,117,0,1564,1566,5,5,0,0,1565,1564,1,0,0,0,1566,1569,1,0,0,0,1567,
		1565,1,0,0,0,1567,1568,1,0,0,0,1568,1570,1,0,0,0,1569,1567,1,0,0,0,1570,
		1571,3,128,64,0,1571,1573,1,0,0,0,1572,1563,1,0,0,0,1573,1574,1,0,0,0,
		1574,1572,1,0,0,0,1574,1575,1,0,0,0,1575,1586,1,0,0,0,1576,1580,3,236,
		118,0,1577,1579,5,5,0,0,1578,1577,1,0,0,0,1579,1582,1,0,0,0,1580,1578,
		1,0,0,0,1580,1581,1,0,0,0,1581,1583,1,0,0,0,1582,1580,1,0,0,0,1583,1584,
		3,82,41,0,1584,1586,1,0,0,0,1585,1572,1,0,0,0,1585,1576,1,0,0,0,1585,1586,
		1,0,0,0,1586,127,1,0,0,0,1587,1604,3,130,65,0,1588,1590,5,5,0,0,1589,1588,
		1,0,0,0,1590,1593,1,0,0,0,1591,1589,1,0,0,0,1591,1592,1,0,0,0,1592,1594,
		1,0,0,0,1593,1591,1,0,0,0,1594,1598,5,42,0,0,1595,1597,5,5,0,0,1596,1595,
		1,0,0,0,1597,1600,1,0,0,0,1598,1596,1,0,0,0,1598,1599,1,0,0,0,1599,1601,
		1,0,0,0,1600,1598,1,0,0,0,1601,1603,3,130,65,0,1602,1591,1,0,0,0,1603,
		1606,1,0,0,0,1604,1602,1,0,0,0,1604,1605,1,0,0,0,1605,129,1,0,0,0,1606,
		1604,1,0,0,0,1607,1619,3,132,66,0,1608,1612,3,286,143,0,1609,1611,5,5,
		0,0,1610,1609,1,0,0,0,1611,1614,1,0,0,0,1612,1610,1,0,0,0,1612,1613,1,
		0,0,0,1613,1615,1,0,0,0,1614,1612,1,0,0,0,1615,1616,3,132,66,0,1616,1618,
		1,0,0,0,1617,1608,1,0,0,0,1618,1621,1,0,0,0,1619,1617,1,0,0,0,1619,1620,
		1,0,0,0,1620,131,1,0,0,0,1621,1619,1,0,0,0,1622,1633,3,134,67,0,1623,1627,
		5,35,0,0,1624,1626,5,5,0,0,1625,1624,1,0,0,0,1626,1629,1,0,0,0,1627,1625,
		1,0,0,0,1627,1628,1,0,0,0,1628,1630,1,0,0,0,1629,1627,1,0,0,0,1630,1632,
		3,134,67,0,1631,1623,1,0,0,0,1632,1635,1,0,0,0,1633,1631,1,0,0,0,1633,
		1634,1,0,0,0,1634,133,1,0,0,0,1635,1633,1,0,0,0,1636,1648,3,136,68,0,1637,
		1641,3,238,119,0,1638,1640,5,5,0,0,1639,1638,1,0,0,0,1640,1643,1,0,0,0,
		1641,1639,1,0,0,0,1641,1642,1,0,0,0,1642,1644,1,0,0,0,1643,1641,1,0,0,
		0,1644,1645,3,136,68,0,1645,1647,1,0,0,0,1646,1637,1,0,0,0,1647,1650,1,
		0,0,0,1648,1646,1,0,0,0,1648,1649,1,0,0,0,1649,135,1,0,0,0,1650,1648,1,
		0,0,0,1651,1663,3,138,69,0,1652,1656,3,240,120,0,1653,1655,5,5,0,0,1654,
		1653,1,0,0,0,1655,1658,1,0,0,0,1656,1654,1,0,0,0,1656,1657,1,0,0,0,1657,
		1659,1,0,0,0,1658,1656,1,0,0,0,1659,1660,3,138,69,0,1660,1662,1,0,0,0,
		1661,1652,1,0,0,0,1662,1665,1,0,0,0,1663,1661,1,0,0,0,1663,1664,1,0,0,
		0,1664,137,1,0,0,0,1665,1663,1,0,0,0,1666,1678,3,140,70,0,1667,1669,5,
		5,0,0,1668,1667,1,0,0,0,1669,1672,1,0,0,0,1670,1668,1,0,0,0,1670,1671,
		1,0,0,0,1671,1673,1,0,0,0,1672,1670,1,0,0,0,1673,1674,3,242,121,0,1674,
		1675,3,140,70,0,1675,1677,1,0,0,0,1676,1670,1,0,0,0,1677,1680,1,0,0,0,
		1678,1676,1,0,0,0,1678,1679,1,0,0,0,1679,139,1,0,0,0,1680,1678,1,0,0,0,
		1681,1683,3,244,122,0,1682,1681,1,0,0,0,1683,1686,1,0,0,0,1684,1682,1,
		0,0,0,1684,1685,1,0,0,0,1685,1687,1,0,0,0,1686,1684,1,0,0,0,1687,1688,
		3,142,71,0,1688,141,1,0,0,0,1689,1692,3,144,72,0,1690,1692,3,226,113,0,
		1691,1689,1,0,0,0,1691,1690,1,0,0,0,1692,1696,1,0,0,0,1693,1695,3,246,
		123,0,1694,1693,1,0,0,0,1695,1698,1,0,0,0,1696,1694,1,0,0,0,1696,1697,
		1,0,0,0,1697,143,1,0,0,0,1698,1696,1,0,0,0,1699,1712,3,146,73,0,1700,1712,
		3,164,82,0,1701,1712,3,180,90,0,1702,1712,3,190,95,0,1703,1712,3,192,96,
		0,1704,1712,3,194,97,0,1705,1712,3,210,105,0,1706,1712,3,186,93,0,1707,
		1712,3,224,112,0,1708,1712,3,216,108,0,1709,1712,3,188,94,0,1710,1712,
		3,286,143,0,1711,1699,1,0,0,0,1711,1700,1,0,0,0,1711,1701,1,0,0,0,1711,
		1702,1,0,0,0,1711,1703,1,0,0,0,1711,1704,1,0,0,0,1711,1705,1,0,0,0,1711,
		1706,1,0,0,0,1711,1707,1,0,0,0,1711,1708,1,0,0,0,1711,1709,1,0,0,0,1711,
		1710,1,0,0,0,1712,145,1,0,0,0,1713,1714,5,9,0,0,1714,1715,3,116,58,0,1715,
		1716,5,10,0,0,1716,147,1,0,0,0,1717,1719,3,156,78,0,1718,1720,3,154,77,
		0,1719,1718,1,0,0,0,1719,1720,1,0,0,0,1720,1724,1,0,0,0,1721,1723,3,150,
		75,0,1722,1721,1,0,0,0,1723,1726,1,0,0,0,1724,1722,1,0,0,0,1724,1725,1,
		0,0,0,1725,1740,1,0,0,0,1726,1724,1,0,0,0,1727,1731,3,154,77,0,1728,1730,
		3,150,75,0,1729,1728,1,0,0,0,1730,1733,1,0,0,0,1731,1729,1,0,0,0,1731,
		1732,1,0,0,0,1732,1740,1,0,0,0,1733,1731,1,0,0,0,1734,1736,3,150,75,0,
		1735,1734,1,0,0,0,1736,1737,1,0,0,0,1737,1735,1,0,0,0,1737,1738,1,0,0,
		0,1738,1740,1,0,0,0,1739,1717,1,0,0,0,1739,1727,1,0,0,0,1739,1735,1,0,
		0,0,1740,149,1,0,0,0,1741,1743,3,282,141,0,1742,1741,1,0,0,0,1743,1746,
		1,0,0,0,1744,1742,1,0,0,0,1744,1745,1,0,0,0,1745,1748,1,0,0,0,1746,1744,
		1,0,0,0,1747,1749,5,142,0,0,1748,1747,1,0,0,0,1748,1749,1,0,0,0,1749,1753,
		1,0,0,0,1750,1752,5,5,0,0,1751,1750,1,0,0,0,1752,1755,1,0,0,0,1753,1751,
		1,0,0,0,1753,1754,1,0,0,0,1754,1756,1,0,0,0,1755,1753,1,0,0,0,1756,1757,
		3,180,90,0,1757,151,1,0,0,0,1758,1767,5,11,0,0,1759,1764,3,116,58,0,1760,
		1761,5,8,0,0,1761,1763,3,116,58,0,1762,1760,1,0,0,0,1763,1766,1,0,0,0,
		1764,1762,1,0,0,0,1764,1765,1,0,0,0,1765,1768,1,0,0,0,1766,1764,1,0,0,
		0,1767,1759,1,0,0,0,1767,1768,1,0,0,0,1768,1769,1,0,0,0,1769,1770,5,12,
		0,0,1770,153,1,0,0,0,1771,1780,5,9,0,0,1772,1777,3,162,81,0,1773,1774,
		5,8,0,0,1774,1776,3,162,81,0,1775,1773,1,0,0,0,1776,1779,1,0,0,0,1777,
		1775,1,0,0,0,1777,1778,1,0,0,0,1778,1781,1,0,0,0,1779,1777,1,0,0,0,1780,
		1772,1,0,0,0,1780,1781,1,0,0,0,1781,1782,1,0,0,0,1782,1783,5,10,0,0,1783,
		155,1,0,0,0,1784,1788,5,43,0,0,1785,1787,5,5,0,0,1786,1785,1,0,0,0,1787,
		1790,1,0,0,0,1788,1786,1,0,0,0,1788,1789,1,0,0,0,1789,1791,1,0,0,0,1790,
		1788,1,0,0,0,1791,1802,3,158,79,0,1792,1794,5,5,0,0,1793,1792,1,0,0,0,
		1794,1797,1,0,0,0,1795,1793,1,0,0,0,1795,1796,1,0,0,0,1796,1798,1,0,0,
		0,1797,1795,1,0,0,0,1798,1799,5,8,0,0,1799,1801,3,158,79,0,1800,1795,1,
		0,0,0,1801,1804,1,0,0,0,1802,1800,1,0,0,0,1802,1803,1,0,0,0,1803,1808,
		1,0,0,0,1804,1802,1,0,0,0,1805,1807,5,5,0,0,1806,1805,1,0,0,0,1807,1810,
		1,0,0,0,1808,1806,1,0,0,0,1808,1809,1,0,0,0,1809,1811,1,0,0,0,1810,1808,
		1,0,0,0,1811,1812,5,44,0,0,1812,157,1,0,0,0,1813,1815,3,160,80,0,1814,
		1813,1,0,0,0,1814,1815,1,0,0,0,1815,1816,1,0,0,0,1816,1819,3,82,41,0,1817,
		1819,5,15,0,0,1818,1814,1,0,0,0,1818,1817,1,0,0,0,1819,159,1,0,0,0,1820,
		1822,3,260,130,0,1821,1820,1,0,0,0,1822,1823,1,0,0,0,1823,1821,1,0,0,0,
		1823,1824,1,0,0,0,1824,161,1,0,0,0,1825,1829,3,286,143,0,1826,1828,5,5,
		0,0,1827,1826,1,0,0,0,1828,1831,1,0,0,0,1829,1827,1,0,0,0,1829,1830,1,
		0,0,0,1830,1832,1,0,0,0,1831,1829,1,0,0,0,1832,1836,5,27,0,0,1833,1835,
		5,5,0,0,1834,1833,1,0,0,0,1835,1838,1,0,0,0,1836,1834,1,0,0,0,1836,1837,
		1,0,0,0,1837,1840,1,0,0,0,1838,1836,1,0,0,0,1839,1825,1,0,0,0,1839,1840,
		1,0,0,0,1840,1842,1,0,0,0,1841,1843,5,15,0,0,1842,1841,1,0,0,0,1842,1843,
		1,0,0,0,1843,1847,1,0,0,0,1844,1846,5,5,0,0,1845,1844,1,0,0,0,1846,1849,
		1,0,0,0,1847,1845,1,0,0,0,1847,1848,1,0,0,0,1848,1850,1,0,0,0,1849,1847,
		1,0,0,0,1850,1851,3,116,58,0,1851,163,1,0,0,0,1852,1862,5,138,0,0,1853,
		1862,5,135,0,0,1854,1862,3,166,83,0,1855,1862,5,136,0,0,1856,1862,5,137,
		0,0,1857,1862,5,144,0,0,1858,1862,5,131,0,0,1859,1862,5,139,0,0,1860,1862,
		5,134,0,0,1861,1852,1,0,0,0,1861,1853,1,0,0,0,1861,1854,1,0,0,0,1861,1855,
		1,0,0,0,1861,1856,1,0,0,0,1861,1857,1,0,0,0,1861,1858,1,0,0,0,1861,1859,
		1,0,0,0,1861,1860,1,0,0,0,1862,165,1,0,0,0,1863,1866,3,168,84,0,1864,1866,
		3,170,85,0,1865,1863,1,0,0,0,1865,1864,1,0,0,0,1866,167,1,0,0,0,1867,1872,
		5,129,0,0,1868,1871,3,172,86,0,1869,1871,3,174,87,0,1870,1868,1,0,0,0,
		1870,1869,1,0,0,0,1871,1874,1,0,0,0,1872,1870,1,0,0,0,1872,1873,1,0,0,
		0,1873,1875,1,0,0,0,1874,1872,1,0,0,0,1875,1876,5,155,0,0,1876,169,1,0,
		0,0,1877,1884,5,130,0,0,1878,1883,3,176,88,0,1879,1883,3,178,89,0,1880,
		1883,3,168,84,0,1881,1883,5,161,0,0,1882,1878,1,0,0,0,1882,1879,1,0,0,
		0,1882,1880,1,0,0,0,1882,1881,1,0,0,0,1883,1886,1,0,0,0,1884,1882,1,0,
		0,0,1884,1885,1,0,0,0,1885,1887,1,0,0,0,1886,1884,1,0,0,0,1887,1888,5,
		160,0,0,1888,171,1,0,0,0,1889,1890,7,3,0,0,1890,173,1,0,0,0,1891,1892,
		5,159,0,0,1892,1893,3,116,58,0,1893,1894,5,14,0,0,1894,175,1,0,0,0,1895,
		1896,7,4,0,0,1896,177,1,0,0,0,1897,1898,5,165,0,0,1898,1899,3,116,58,0,
		1899,1900,5,14,0,0,1900,179,1,0,0,0,1901,1903,3,274,137,0,1902,1901,1,
		0,0,0,1903,1906,1,0,0,0,1904,1902,1,0,0,0,1904,1905,1,0,0,0,1905,1953,
		1,0,0,0,1906,1904,1,0,0,0,1907,1911,5,13,0,0,1908,1910,5,5,0,0,1909,1908,
		1,0,0,0,1910,1913,1,0,0,0,1911,1909,1,0,0,0,1911,1912,1,0,0,0,1912,1914,
		1,0,0,0,1913,1911,1,0,0,0,1914,1918,3,108,54,0,1915,1917,5,5,0,0,1916,
		1915,1,0,0,0,1917,1920,1,0,0,0,1918,1916,1,0,0,0,1918,1919,1,0,0,0,1919,
		1921,1,0,0,0,1920,1918,1,0,0,0,1921,1922,5,14,0,0,1922,1954,1,0,0,0,1923,
		1927,5,13,0,0,1924,1926,5,5,0,0,1925,1924,1,0,0,0,1926,1929,1,0,0,0,1927,
		1925,1,0,0,0,1927,1928,1,0,0,0,1928,1930,1,0,0,0,1929,1927,1,0,0,0,1930,
		1934,3,182,91,0,1931,1933,5,5,0,0,1932,1931,1,0,0,0,1933,1936,1,0,0,0,
		1934,1932,1,0,0,0,1934,1935,1,0,0,0,1935,1937,1,0,0,0,1936,1934,1,0,0,
		0,1937,1941,5,33,0,0,1938,1940,5,5,0,0,1939,1938,1,0,0,0,1940,1943,1,0,
		0,0,1941,1939,1,0,0,0,1941,1942,1,0,0,0,1942,1944,1,0,0,0,1943,1941,1,
		0,0,0,1944,1948,3,108,54,0,1945,1947,5,5,0,0,1946,1945,1,0,0,0,1947,1950,
		1,0,0,0,1948,1946,1,0,0,0,1948,1949,1,0,0,0,1949,1951,1,0,0,0,1950,1948,
		1,0,0,0,1951,1952,5,14,0,0,1952,1954,1,0,0,0,1953,1907,1,0,0,0,1953,1923,
		1,0,0,0,1954,181,1,0,0,0,1955,1957,3,184,92,0,1956,1955,1,0,0,0,1956,1957,
		1,0,0,0,1957,1974,1,0,0,0,1958,1960,5,5,0,0,1959,1958,1,0,0,0,1960,1963,
		1,0,0,0,1961,1959,1,0,0,0,1961,1962,1,0,0,0,1962,1964,1,0,0,0,1963,1961,
		1,0,0,0,1964,1968,5,8,0,0,1965,1967,5,5,0,0,1966,1965,1,0,0,0,1967,1970,
		1,0,0,0,1968,1966,1,0,0,0,1968,1969,1,0,0,0,1969,1971,1,0,0,0,1970,1968,
		1,0,0,0,1971,1973,3,184,92,0,1972,1961,1,0,0,0,1973,1976,1,0,0,0,1974,
		1972,1,0,0,0,1974,1975,1,0,0,0,1975,183,1,0,0,0,1976,1974,1,0,0,0,1977,
		1996,3,70,35,0,1978,1993,3,68,34,0,1979,1981,5,5,0,0,1980,1979,1,0,0,0,
		1981,1984,1,0,0,0,1982,1980,1,0,0,0,1982,1983,1,0,0,0,1983,1985,1,0,0,
		0,1984,1982,1,0,0,0,1985,1989,5,25,0,0,1986,1988,5,5,0,0,1987,1986,1,0,
		0,0,1988,1991,1,0,0,0,1989,1987,1,0,0,0,1989,1990,1,0,0,0,1990,1992,1,
		0,0,0,1991,1989,1,0,0,0,1992,1994,3,82,41,0,1993,1982,1,0,0,0,1993,1994,
		1,0,0,0,1994,1996,1,0,0,0,1995,1977,1,0,0,0,1995,1978,1,0,0,0,1996,185,
		1,0,0,0,1997,2012,5,62,0,0,1998,2000,5,5,0,0,1999,1998,1,0,0,0,2000,2003,
		1,0,0,0,2001,1999,1,0,0,0,2001,2002,1,0,0,0,2002,2004,1,0,0,0,2003,2001,
		1,0,0,0,2004,2008,5,25,0,0,2005,2007,5,5,0,0,2006,2005,1,0,0,0,2007,2010,
		1,0,0,0,2008,2006,1,0,0,0,2008,2009,1,0,0,0,2009,2011,1,0,0,0,2010,2008,
		1,0,0,0,2011,2013,3,28,14,0,2012,2001,1,0,0,0,2012,2013,1,0,0,0,2013,2017,
		1,0,0,0,2014,2016,5,5,0,0,2015,2014,1,0,0,0,2016,2019,1,0,0,0,2017,2015,
		1,0,0,0,2017,2018,1,0,0,0,2018,2020,1,0,0,0,2019,2017,1,0,0,0,2020,2021,
		3,36,18,0,2021,187,1,0,0,0,2022,2024,5,11,0,0,2023,2025,3,116,58,0,2024,
		2023,1,0,0,0,2024,2025,1,0,0,0,2025,2030,1,0,0,0,2026,2027,5,8,0,0,2027,
		2029,3,116,58,0,2028,2026,1,0,0,0,2029,2032,1,0,0,0,2030,2028,1,0,0,0,
		2030,2031,1,0,0,0,2031,2033,1,0,0,0,2032,2030,1,0,0,0,2033,2034,5,12,0,
		0,2034,189,1,0,0,0,2035,2037,5,70,0,0,2036,2038,5,141,0,0,2037,2036,1,
		0,0,0,2037,2038,1,0,0,0,2038,191,1,0,0,0,2039,2056,5,71,0,0,2040,2044,
		5,43,0,0,2041,2043,5,5,0,0,2042,2041,1,0,0,0,2043,2046,1,0,0,0,2044,2042,
		1,0,0,0,2044,2045,1,0,0,0,2045,2047,1,0,0,0,2046,2044,1,0,0,0,2047,2051,
		3,82,41,0,2048,2050,5,5,0,0,2049,2048,1,0,0,0,2050,2053,1,0,0,0,2051,2049,
		1,0,0,0,2051,2052,1,0,0,0,2052,2054,1,0,0,0,2053,2051,1,0,0,0,2054,2055,
		5,44,0,0,2055,2057,1,0,0,0,2056,2040,1,0,0,0,2056,2057,1,0,0,0,2057,2059,
		1,0,0,0,2058,2060,5,141,0,0,2059,2058,1,0,0,0,2059,2060,1,0,0,0,2060,193,
		1,0,0,0,2061,2064,3,196,98,0,2062,2064,3,200,100,0,2063,2061,1,0,0,0,2063,
		2062,1,0,0,0,2064,195,1,0,0,0,2065,2069,5,74,0,0,2066,2068,5,5,0,0,2067,
		2066,1,0,0,0,2068,2071,1,0,0,0,2069,2067,1,0,0,0,2069,2070,1,0,0,0,2070,
		2072,1,0,0,0,2071,2069,1,0,0,0,2072,2073,5,9,0,0,2073,2074,3,116,58,0,
		2074,2078,5,10,0,0,2075,2077,5,5,0,0,2076,2075,1,0,0,0,2077,2080,1,0,0,
		0,2078,2076,1,0,0,0,2078,2079,1,0,0,0,2079,2082,1,0,0,0,2080,2078,1,0,
		0,0,2081,2083,3,198,99,0,2082,2081,1,0,0,0,2082,2083,1,0,0,0,2083,2085,
		1,0,0,0,2084,2086,5,26,0,0,2085,2084,1,0,0,0,2085,2086,1,0,0,0,2086,2103,
		1,0,0,0,2087,2089,5,5,0,0,2088,2087,1,0,0,0,2089,2092,1,0,0,0,2090,2088,
		1,0,0,0,2090,2091,1,0,0,0,2091,2093,1,0,0,0,2092,2090,1,0,0,0,2093,2097,
		5,75,0,0,2094,2096,5,5,0,0,2095,2094,1,0,0,0,2096,2099,1,0,0,0,2097,2095,
		1,0,0,0,2097,2098,1,0,0,0,2098,2101,1,0,0,0,2099,2097,1,0,0,0,2100,2102,
		3,198,99,0,2101,2100,1,0,0,0,2101,2102,1,0,0,0,2102,2104,1,0,0,0,2103,
		2090,1,0,0,0,2103,2104,1,0,0,0,2104,197,1,0,0,0,2105,2108,3,106,53,0,2106,
		2108,3,116,58,0,2107,2105,1,0,0,0,2107,2106,1,0,0,0,2108,199,1,0,0,0,2109,
		2113,5,76,0,0,2110,2112,5,5,0,0,2111,2110,1,0,0,0,2112,2115,1,0,0,0,2113,
		2111,1,0,0,0,2113,2114,1,0,0,0,2114,2120,1,0,0,0,2115,2113,1,0,0,0,2116,
		2117,5,9,0,0,2117,2118,3,116,58,0,2118,2119,5,10,0,0,2119,2121,1,0,0,0,
		2120,2116,1,0,0,0,2120,2121,1,0,0,0,2121,2125,1,0,0,0,2122,2124,5,5,0,
		0,2123,2122,1,0,0,0,2124,2127,1,0,0,0,2125,2123,1,0,0,0,2125,2126,1,0,
		0,0,2126,2128,1,0,0,0,2127,2125,1,0,0,0,2128,2132,5,13,0,0,2129,2131,5,
		5,0,0,2130,2129,1,0,0,0,2131,2134,1,0,0,0,2132,2130,1,0,0,0,2132,2133,
		1,0,0,0,2133,2144,1,0,0,0,2134,2132,1,0,0,0,2135,2139,3,202,101,0,2136,
		2138,5,5,0,0,2137,2136,1,0,0,0,2138,2141,1,0,0,0,2139,2137,1,0,0,0,2139,
		2140,1,0,0,0,2140,2143,1,0,0,0,2141,2139,1,0,0,0,2142,2135,1,0,0,0,2143,
		2146,1,0,0,0,2144,2142,1,0,0,0,2144,2145,1,0,0,0,2145,2150,1,0,0,0,2146,
		2144,1,0,0,0,2147,2149,5,5,0,0,2148,2147,1,0,0,0,2149,2152,1,0,0,0,2150,
		2148,1,0,0,0,2150,2151,1,0,0,0,2151,2153,1,0,0,0,2152,2150,1,0,0,0,2153,
		2154,5,14,0,0,2154,201,1,0,0,0,2155,2172,3,204,102,0,2156,2158,5,5,0,0,
		2157,2156,1,0,0,0,2158,2161,1,0,0,0,2159,2157,1,0,0,0,2159,2160,1,0,0,
		0,2160,2162,1,0,0,0,2161,2159,1,0,0,0,2162,2166,5,8,0,0,2163,2165,5,5,
		0,0,2164,2163,1,0,0,0,2165,2168,1,0,0,0,2166,2164,1,0,0,0,2166,2167,1,
		0,0,0,2167,2169,1,0,0,0,2168,2166,1,0,0,0,2169,2171,3,204,102,0,2170,2159,
		1,0,0,0,2171,2174,1,0,0,0,2172,2170,1,0,0,0,2172,2173,1,0,0,0,2173,2178,
		1,0,0,0,2174,2172,1,0,0,0,2175,2177,5,5,0,0,2176,2175,1,0,0,0,2177,2180,
		1,0,0,0,2178,2176,1,0,0,0,2178,2179,1,0,0,0,2179,2181,1,0,0,0,2180,2178,
		1,0,0,0,2181,2185,5,33,0,0,2182,2184,5,5,0,0,2183,2182,1,0,0,0,2184,2187,
		1,0,0,0,2185,2183,1,0,0,0,2185,2186,1,0,0,0,2186,2188,1,0,0,0,2187,2185,
		1,0,0,0,2188,2190,3,198,99,0,2189,2191,3,288,144,0,2190,2189,1,0,0,0,2190,
		2191,1,0,0,0,2191,2208,1,0,0,0,2192,2196,5,75,0,0,2193,2195,5,5,0,0,2194,
		2193,1,0,0,0,2195,2198,1,0,0,0,2196,2194,1,0,0,0,2196,2197,1,0,0,0,2197,
		2199,1,0,0,0,2198,2196,1,0,0,0,2199,2203,5,33,0,0,2200,2202,5,5,0,0,2201,
		2200,1,0,0,0,2202,2205,1,0,0,0,2203,2201,1,0,0,0,2203,2204,1,0,0,0,2204,
		2206,1,0,0,0,2205,2203,1,0,0,0,2206,2208,3,198,99,0,2207,2155,1,0,0,0,
		2207,2192,1,0,0,0,2208,203,1,0,0,0,2209,2213,3,116,58,0,2210,2213,3,206,
		103,0,2211,2213,3,208,104,0,2212,2209,1,0,0,0,2212,2210,1,0,0,0,2212,2211,
		1,0,0,0,2213,205,1,0,0,0,2214,2218,3,234,117,0,2215,2217,5,5,0,0,2216,
		2215,1,0,0,0,2217,2220,1,0,0,0,2218,2216,1,0,0,0,2218,2219,1,0,0,0,2219,
		2221,1,0,0,0,2220,2218,1,0,0,0,2221,2222,3,116,58,0,2222,207,1,0,0,0,2223,
		2227,3,236,118,0,2224,2226,5,5,0,0,2225,2224,1,0,0,0,2226,2229,1,0,0,0,
		2227,2225,1,0,0,0,2227,2228,1,0,0,0,2228,2230,1,0,0,0,2229,2227,1,0,0,
		0,2230,2231,3,82,41,0,2231,209,1,0,0,0,2232,2236,5,77,0,0,2233,2235,5,
		5,0,0,2234,2233,1,0,0,0,2235,2238,1,0,0,0,2236,2234,1,0,0,0,2236,2237,
		1,0,0,0,2237,2239,1,0,0,0,2238,2236,1,0,0,0,2239,2249,3,106,53,0,2240,
		2242,5,5,0,0,2241,2240,1,0,0,0,2242,2245,1,0,0,0,2243,2241,1,0,0,0,2243,
		2244,1,0,0,0,2244,2246,1,0,0,0,2245,2243,1,0,0,0,2246,2248,3,212,106,0,
		2247,2243,1,0,0,0,2248,2251,1,0,0,0,2249,2247,1,0,0,0,2249,2250,1,0,0,
		0,2250,2259,1,0,0,0,2251,2249,1,0,0,0,2252,2254,5,5,0,0,2253,2252,1,0,
		0,0,2254,2257,1,0,0,0,2255,2253,1,0,0,0,2255,2256,1,0,0,0,2256,2258,1,
		0,0,0,2257,2255,1,0,0,0,2258,2260,3,214,107,0,2259,2255,1,0,0,0,2259,2260,
		1,0,0,0,2260,211,1,0,0,0,2261,2265,5,78,0,0,2262,2264,5,5,0,0,2263,2262,
		1,0,0,0,2264,2267,1,0,0,0,2265,2263,1,0,0,0,2265,2266,1,0,0,0,2266,2268,
		1,0,0,0,2267,2265,1,0,0,0,2268,2272,5,9,0,0,2269,2271,3,274,137,0,2270,
		2269,1,0,0,0,2271,2274,1,0,0,0,2272,2270,1,0,0,0,2272,2273,1,0,0,0,2273,
		2275,1,0,0,0,2274,2272,1,0,0,0,2275,2276,3,286,143,0,2276,2277,5,25,0,
		0,2277,2278,3,96,48,0,2278,2282,5,10,0,0,2279,2281,5,5,0,0,2280,2279,1,
		0,0,0,2281,2284,1,0,0,0,2282,2280,1,0,0,0,2282,2283,1,0,0,0,2283,2285,
		1,0,0,0,2284,2282,1,0,0,0,2285,2286,3,106,53,0,2286,213,1,0,0,0,2287,2291,
		5,79,0,0,2288,2290,5,5,0,0,2289,2288,1,0,0,0,2290,2293,1,0,0,0,2291,2289,
		1,0,0,0,2291,2292,1,0,0,0,2292,2294,1,0,0,0,2293,2291,1,0,0,0,2294,2295,
		3,106,53,0,2295,215,1,0,0,0,2296,2300,3,218,109,0,2297,2300,3,220,110,
		0,2298,2300,3,222,111,0,2299,2296,1,0,0,0,2299,2297,1,0,0,0,2299,2298,
		1,0,0,0,2300,217,1,0,0,0,2301,2305,5,80,0,0,2302,2304,5,5,0,0,2303,2302,
		1,0,0,0,2304,2307,1,0,0,0,2305,2303,1,0,0,0,2305,2306,1,0,0,0,2306,2308,
		1,0,0,0,2307,2305,1,0,0,0,2308,2312,5,9,0,0,2309,2311,3,274,137,0,2310,
		2309,1,0,0,0,2311,2314,1,0,0,0,2312,2310,1,0,0,0,2312,2313,1,0,0,0,2313,
		2317,1,0,0,0,2314,2312,1,0,0,0,2315,2318,3,70,35,0,2316,2318,3,68,34,0,
		2317,2315,1,0,0,0,2317,2316,1,0,0,0,2318,2319,1,0,0,0,2319,2320,5,89,0,
		0,2320,2321,3,116,58,0,2321,2325,5,10,0,0,2322,2324,5,5,0,0,2323,2322,
		1,0,0,0,2324,2327,1,0,0,0,2325,2323,1,0,0,0,2325,2326,1,0,0,0,2326,2329,
		1,0,0,0,2327,2325,1,0,0,0,2328,2330,3,198,99,0,2329,2328,1,0,0,0,2329,
		2330,1,0,0,0,2330,219,1,0,0,0,2331,2335,5,82,0,0,2332,2334,5,5,0,0,2333,
		2332,1,0,0,0,2334,2337,1,0,0,0,2335,2333,1,0,0,0,2335,2336,1,0,0,0,2336,
		2338,1,0,0,0,2337,2335,1,0,0,0,2338,2339,5,9,0,0,2339,2340,3,116,58,0,
		2340,2344,5,10,0,0,2341,2343,5,5,0,0,2342,2341,1,0,0,0,2343,2346,1,0,0,
		0,2344,2342,1,0,0,0,2344,2345,1,0,0,0,2345,2348,1,0,0,0,2346,2344,1,0,
		0,0,2347,2349,3,198,99,0,2348,2347,1,0,0,0,2348,2349,1,0,0,0,2349,221,
		1,0,0,0,2350,2354,5,81,0,0,2351,2353,5,5,0,0,2352,2351,1,0,0,0,2353,2356,
		1,0,0,0,2354,2352,1,0,0,0,2354,2355,1,0,0,0,2355,2358,1,0,0,0,2356,2354,
		1,0,0,0,2357,2359,3,198,99,0,2358,2357,1,0,0,0,2358,2359,1,0,0,0,2359,
		2363,1,0,0,0,2360,2362,5,5,0,0,2361,2360,1,0,0,0,2362,2365,1,0,0,0,2363,
		2361,1,0,0,0,2363,2364,1,0,0,0,2364,2366,1,0,0,0,2365,2363,1,0,0,0,2366,
		2370,5,82,0,0,2367,2369,5,5,0,0,2368,2367,1,0,0,0,2369,2372,1,0,0,0,2370,
		2368,1,0,0,0,2370,2371,1,0,0,0,2371,2373,1,0,0,0,2372,2370,1,0,0,0,2373,
		2374,5,9,0,0,2374,2375,3,116,58,0,2375,2376,5,10,0,0,2376,223,1,0,0,0,
		2377,2381,5,83,0,0,2378,2380,5,5,0,0,2379,2378,1,0,0,0,2380,2383,1,0,0,
		0,2381,2379,1,0,0,0,2381,2382,1,0,0,0,2382,2384,1,0,0,0,2383,2381,1,0,
		0,0,2384,2394,3,116,58,0,2385,2387,7,5,0,0,2386,2388,3,116,58,0,2387,2386,
		1,0,0,0,2387,2388,1,0,0,0,2388,2394,1,0,0,0,2389,2394,5,85,0,0,2390,2394,
		5,54,0,0,2391,2394,5,86,0,0,2392,2394,5,55,0,0,2393,2377,1,0,0,0,2393,
		2385,1,0,0,0,2393,2389,1,0,0,0,2393,2390,1,0,0,0,2393,2391,1,0,0,0,2393,
		2392,1,0,0,0,2394,225,1,0,0,0,2395,2405,3,96,48,0,2396,2400,5,41,0,0,2397,
		2399,5,5,0,0,2398,2397,1,0,0,0,2399,2402,1,0,0,0,2400,2398,1,0,0,0,2400,
		2401,1,0,0,0,2401,2404,1,0,0,0,2402,2400,1,0,0,0,2403,2396,1,0,0,0,2404,
		2407,1,0,0,0,2405,2403,1,0,0,0,2405,2406,1,0,0,0,2406,2409,1,0,0,0,2407,
		2405,1,0,0,0,2408,2395,1,0,0,0,2408,2409,1,0,0,0,2409,2413,1,0,0,0,2410,
		2412,5,5,0,0,2411,2410,1,0,0,0,2412,2415,1,0,0,0,2413,2411,1,0,0,0,2413,
		2414,1,0,0,0,2414,2416,1,0,0,0,2415,2413,1,0,0,0,2416,2420,7,6,0,0,2417,
		2419,5,5,0,0,2418,2417,1,0,0,0,2419,2422,1,0,0,0,2420,2418,1,0,0,0,2420,
		2421,1,0,0,0,2421,2425,1,0,0,0,2422,2420,1,0,0,0,2423,2426,3,284,142,0,
		2424,2426,5,59,0,0,2425,2423,1,0,0,0,2425,2424,1,0,0,0,2426,227,1,0,0,
		0,2427,2428,7,7,0,0,2428,229,1,0,0,0,2429,2430,7,8,0,0,2430,231,1,0,0,
		0,2431,2432,7,9,0,0,2432,233,1,0,0,0,2433,2434,7,10,0,0,2434,235,1,0,0,
		0,2435,2436,7,11,0,0,2436,237,1,0,0,0,2437,2438,7,12,0,0,2438,239,1,0,
		0,0,2439,2440,7,13,0,0,2440,241,1,0,0,0,2441,2442,7,14,0,0,2442,243,1,
		0,0,0,2443,2451,5,20,0,0,2444,2451,5,21,0,0,2445,2451,5,18,0,0,2446,2451,
		5,19,0,0,2447,2451,5,24,0,0,2448,2451,3,274,137,0,2449,2451,3,272,136,
		0,2450,2443,1,0,0,0,2450,2444,1,0,0,0,2450,2445,1,0,0,0,2450,2446,1,0,
		0,0,2450,2447,1,0,0,0,2450,2448,1,0,0,0,2450,2449,1,0,0,0,2451,245,1,0,
		0,0,2452,2468,5,20,0,0,2453,2468,5,21,0,0,2454,2455,5,24,0,0,2455,2468,
		5,24,0,0,2456,2468,3,148,74,0,2457,2468,3,152,76,0,2458,2460,5,5,0,0,2459,
		2458,1,0,0,0,2460,2463,1,0,0,0,2461,2459,1,0,0,0,2461,2462,1,0,0,0,2462,
		2464,1,0,0,0,2463,2461,1,0,0,0,2464,2465,3,248,124,0,2465,2466,3,142,71,
		0,2466,2468,1,0,0,0,2467,2452,1,0,0,0,2467,2453,1,0,0,0,2467,2454,1,0,
		0,0,2467,2456,1,0,0,0,2467,2457,1,0,0,0,2467,2461,1,0,0,0,2468,247,1,0,
		0,0,2469,2473,5,7,0,0,2470,2471,5,41,0,0,2471,2473,5,7,0,0,2472,2469,1,
		0,0,0,2472,2470,1,0,0,0,2473,249,1,0,0,0,2474,2477,3,274,137,0,2475,2477,
		3,252,126,0,2476,2474,1,0,0,0,2476,2475,1,0,0,0,2477,2478,1,0,0,0,2478,
		2476,1,0,0,0,2478,2479,1,0,0,0,2479,251,1,0,0,0,2480,2490,3,254,127,0,
		2481,2490,3,256,128,0,2482,2490,3,258,129,0,2483,2490,3,260,130,0,2484,
		2490,3,262,131,0,2485,2490,3,264,132,0,2486,2490,3,266,133,0,2487,2490,
		3,268,134,0,2488,2490,3,270,135,0,2489,2480,1,0,0,0,2489,2481,1,0,0,0,
		2489,2482,1,0,0,0,2489,2483,1,0,0,0,2489,2484,1,0,0,0,2489,2485,1,0,0,
		0,2489,2486,1,0,0,0,2489,2487,1,0,0,0,2489,2488,1,0,0,0,2490,2494,1,0,
		0,0,2491,2493,5,5,0,0,2492,2491,1,0,0,0,2493,2496,1,0,0,0,2494,2492,1,
		0,0,0,2494,2495,1,0,0,0,2495,253,1,0,0,0,2496,2494,1,0,0,0,2497,2498,7,
		15,0,0,2498,255,1,0,0,0,2499,2500,7,16,0,0,2500,257,1,0,0,0,2501,2502,
		7,17,0,0,2502,259,1,0,0,0,2503,2504,7,18,0,0,2504,261,1,0,0,0,2505,2506,
		7,19,0,0,2506,263,1,0,0,0,2507,2508,5,123,0,0,2508,265,1,0,0,0,2509,2510,
		7,20,0,0,2510,267,1,0,0,0,2511,2512,7,21,0,0,2512,269,1,0,0,0,2513,2514,
		5,128,0,0,2514,271,1,0,0,0,2515,2519,5,142,0,0,2516,2518,5,5,0,0,2517,
		2516,1,0,0,0,2518,2521,1,0,0,0,2519,2517,1,0,0,0,2519,2520,1,0,0,0,2520,
		273,1,0,0,0,2521,2519,1,0,0,0,2522,2525,3,276,138,0,2523,2525,3,278,139,
		0,2524,2522,1,0,0,0,2524,2523,1,0,0,0,2525,2529,1,0,0,0,2526,2528,5,5,
		0,0,2527,2526,1,0,0,0,2528,2531,1,0,0,0,2529,2527,1,0,0,0,2529,2530,1,
		0,0,0,2530,275,1,0,0,0,2531,2529,1,0,0,0,2532,2536,3,280,140,0,2533,2535,
		5,5,0,0,2534,2533,1,0,0,0,2535,2538,1,0,0,0,2536,2534,1,0,0,0,2536,2537,
		1,0,0,0,2537,2539,1,0,0,0,2538,2536,1,0,0,0,2539,2543,5,25,0,0,2540,2542,
		5,5,0,0,2541,2540,1,0,0,0,2542,2545,1,0,0,0,2543,2541,1,0,0,0,2543,2544,
		1,0,0,0,2544,2546,1,0,0,0,2545,2543,1,0,0,0,2546,2547,3,282,141,0,2547,
		2568,1,0,0,0,2548,2556,5,141,0,0,2549,2551,5,5,0,0,2550,2549,1,0,0,0,2551,
		2554,1,0,0,0,2552,2550,1,0,0,0,2552,2553,1,0,0,0,2553,2555,1,0,0,0,2554,
		2552,1,0,0,0,2555,2557,3,156,78,0,2556,2552,1,0,0,0,2556,2557,1,0,0,0,
		2557,2565,1,0,0,0,2558,2560,5,5,0,0,2559,2558,1,0,0,0,2560,2563,1,0,0,
		0,2561,2559,1,0,0,0,2561,2562,1,0,0,0,2562,2564,1,0,0,0,2563,2561,1,0,
		0,0,2564,2566,3,154,77,0,2565,2561,1,0,0,0,2565,2566,1,0,0,0,2566,2568,
		1,0,0,0,2567,2532,1,0,0,0,2567,2548,1,0,0,0,2568,277,1,0,0,0,2569,2570,
		3,280,140,0,2570,2571,5,25,0,0,2571,2573,5,11,0,0,2572,2574,3,282,141,
		0,2573,2572,1,0,0,0,2574,2575,1,0,0,0,2575,2573,1,0,0,0,2575,2576,1,0,
		0,0,2576,2577,1,0,0,0,2577,2578,5,12,0,0,2578,2589,1,0,0,0,2579,2580,5,
		40,0,0,2580,2582,5,11,0,0,2581,2583,3,282,141,0,2582,2581,1,0,0,0,2583,
		2584,1,0,0,0,2584,2582,1,0,0,0,2584,2585,1,0,0,0,2585,2586,1,0,0,0,2586,
		2587,5,12,0,0,2587,2589,1,0,0,0,2588,2569,1,0,0,0,2588,2579,1,0,0,0,2589,
		279,1,0,0,0,2590,2591,7,22,0,0,2591,281,1,0,0,0,2592,2594,3,284,142,0,
		2593,2595,3,156,78,0,2594,2593,1,0,0,0,2594,2595,1,0,0,0,2595,2597,1,0,
		0,0,2596,2598,3,154,77,0,2597,2596,1,0,0,0,2597,2598,1,0,0,0,2598,283,
		1,0,0,0,2599,2610,3,286,143,0,2600,2602,5,5,0,0,2601,2600,1,0,0,0,2602,
		2605,1,0,0,0,2603,2601,1,0,0,0,2603,2604,1,0,0,0,2604,2606,1,0,0,0,2605,
		2603,1,0,0,0,2606,2607,5,7,0,0,2607,2609,3,286,143,0,2608,2603,1,0,0,0,
		2609,2612,1,0,0,0,2610,2608,1,0,0,0,2610,2611,1,0,0,0,2611,285,1,0,0,0,
		2612,2610,1,0,0,0,2613,2614,7,23,0,0,2614,287,1,0,0,0,2615,2617,5,5,0,
		0,2616,2615,1,0,0,0,2617,2618,1,0,0,0,2618,2616,1,0,0,0,2618,2619,1,0,
		0,0,2619,2634,1,0,0,0,2620,2622,5,5,0,0,2621,2620,1,0,0,0,2622,2625,1,
		0,0,0,2623,2621,1,0,0,0,2623,2624,1,0,0,0,2624,2626,1,0,0,0,2625,2623,
		1,0,0,0,2626,2630,5,26,0,0,2627,2629,5,5,0,0,2628,2627,1,0,0,0,2629,2632,
		1,0,0,0,2630,2628,1,0,0,0,2630,2631,1,0,0,0,2631,2634,1,0,0,0,2632,2630,
		1,0,0,0,2633,2616,1,0,0,0,2633,2623,1,0,0,0,2634,289,1,0,0,0,2635,2636,
		7,24,0,0,2636,291,1,0,0,0,397,295,302,309,312,316,319,326,333,340,343,
		347,350,355,363,371,376,379,383,386,391,393,398,406,409,419,422,428,435,
		439,444,448,453,460,464,469,473,478,485,489,492,498,501,511,514,519,522,
		529,534,541,548,554,560,569,576,585,591,597,610,615,621,627,633,640,647,
		651,656,660,666,674,678,684,688,693,700,706,709,714,723,728,731,737,741,
		746,750,755,759,762,768,775,780,785,789,794,798,803,810,817,821,826,830,
		835,839,847,850,855,860,871,875,878,884,891,895,900,907,911,916,920,923,
		929,933,939,943,948,955,959,964,968,971,977,981,986,993,998,1003,1008,
		1013,1017,1022,1029,1033,1039,1045,1047,1055,1063,1066,1070,1076,1084,
		1091,1095,1100,1108,1112,1114,1117,1121,1127,1133,1135,1140,1146,1151,
		1154,1160,1167,1171,1176,1183,1192,1199,1206,1212,1218,1224,1229,1236,
		1243,1247,1250,1256,1263,1266,1268,1276,1281,1287,1295,1301,1308,1311,
		1317,1324,1332,1338,1345,1351,1358,1362,1367,1372,1376,1385,1392,1399,
		1405,1411,1418,1425,1437,1444,1447,1451,1454,1458,1463,1469,1477,1484,
		1492,1499,1506,1512,1519,1526,1532,1540,1547,1555,1560,1567,1574,1580,
		1585,1591,1598,1604,1612,1619,1627,1633,1641,1648,1656,1663,1670,1678,
		1684,1691,1696,1711,1719,1724,1731,1737,1739,1744,1748,1753,1764,1767,
		1777,1780,1788,1795,1802,1808,1814,1818,1823,1829,1836,1839,1842,1847,
		1861,1865,1870,1872,1882,1884,1904,1911,1918,1927,1934,1941,1948,1953,
		1956,1961,1968,1974,1982,1989,1993,1995,2001,2008,2012,2017,2024,2030,
		2037,2044,2051,2056,2059,2063,2069,2078,2082,2085,2090,2097,2101,2103,
		2107,2113,2120,2125,2132,2139,2144,2150,2159,2166,2172,2178,2185,2190,
		2196,2203,2207,2212,2218,2227,2236,2243,2249,2255,2259,2265,2272,2282,
		2291,2299,2305,2312,2317,2325,2329,2335,2344,2348,2354,2358,2363,2370,
		2381,2387,2393,2400,2405,2408,2413,2420,2425,2450,2461,2467,2472,2476,
		2478,2489,2494,2519,2524,2529,2536,2543,2552,2556,2561,2565,2567,2575,
		2584,2588,2594,2597,2603,2610,2618,2623,2630,2633
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
