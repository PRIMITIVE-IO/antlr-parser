//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.10.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from /Users/maxfarsikov/IdeaProjects/antlr-parser/antlr-parser/grammars/Solidity.g4 by ANTLR 4.10.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.10.1")]
[System.CLSCompliant(false)]
public partial class SolidityParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		T__9=10, T__10=11, T__11=12, T__12=13, T__13=14, T__14=15, T__15=16, T__16=17, 
		T__17=18, T__18=19, T__19=20, T__20=21, T__21=22, T__22=23, T__23=24, 
		T__24=25, T__25=26, T__26=27, T__27=28, T__28=29, T__29=30, T__30=31, 
		T__31=32, T__32=33, T__33=34, T__34=35, T__35=36, T__36=37, T__37=38, 
		T__38=39, T__39=40, T__40=41, T__41=42, T__42=43, T__43=44, T__44=45, 
		T__45=46, T__46=47, T__47=48, T__48=49, T__49=50, T__50=51, T__51=52, 
		T__52=53, T__53=54, T__54=55, T__55=56, T__56=57, T__57=58, T__58=59, 
		T__59=60, T__60=61, T__61=62, T__62=63, T__63=64, T__64=65, T__65=66, 
		T__66=67, T__67=68, T__68=69, T__69=70, T__70=71, T__71=72, T__72=73, 
		T__73=74, T__74=75, T__75=76, T__76=77, T__77=78, T__78=79, T__79=80, 
		T__80=81, T__81=82, T__82=83, T__83=84, T__84=85, T__85=86, T__86=87, 
		T__87=88, T__88=89, T__89=90, T__90=91, T__91=92, Int=93, Uint=94, Byte=95, 
		Fixed=96, Ufixed=97, BooleanLiteral=98, DecimalNumber=99, HexNumber=100, 
		NumberUnit=101, HexLiteralFragment=102, ReservedKeyword=103, AnonymousKeyword=104, 
		BreakKeyword=105, ConstantKeyword=106, ImmutableKeyword=107, ContinueKeyword=108, 
		LeaveKeyword=109, ExternalKeyword=110, IndexedKeyword=111, InternalKeyword=112, 
		PayableKeyword=113, PrivateKeyword=114, PublicKeyword=115, VirtualKeyword=116, 
		PureKeyword=117, TypeKeyword=118, ViewKeyword=119, ConstructorKeyword=120, 
		FallbackKeyword=121, ReceiveKeyword=122, Identifier=123, StringLiteralFragment=124, 
		VersionLiteral=125, WS=126, COMMENT=127, LINE_COMMENT=128;
	public const int
		RULE_sourceUnit = 0, RULE_pragmaDirective = 1, RULE_pragmaName = 2, RULE_pragmaValue = 3, 
		RULE_version = 4, RULE_versionConstraint = 5, RULE_versionOperator = 6, 
		RULE_importDirective = 7, RULE_importDeclaration = 8, RULE_contractDefinition = 9, 
		RULE_inheritanceSpecifier = 10, RULE_contractPart = 11, RULE_stateVariableDeclaration = 12, 
		RULE_overrideSpecifier = 13, RULE_usingForDeclaration = 14, RULE_structDefinition = 15, 
		RULE_modifierDefinition = 16, RULE_functionDefinition = 17, RULE_functionDescriptor = 18, 
		RULE_returnParameters = 19, RULE_modifierList = 20, RULE_modifierInvocation = 21, 
		RULE_eventDefinition = 22, RULE_enumDefinition = 23, RULE_enumValue = 24, 
		RULE_parameterList = 25, RULE_parameter = 26, RULE_eventParameterList = 27, 
		RULE_eventParameter = 28, RULE_variableDeclaration = 29, RULE_typeName = 30, 
		RULE_userDefinedTypeName = 31, RULE_mapping = 32, RULE_functionTypeName = 33, 
		RULE_storageLocation = 34, RULE_stateMutability = 35, RULE_block = 36, 
		RULE_statement = 37, RULE_expressionStatement = 38, RULE_ifStatement = 39, 
		RULE_tryStatement = 40, RULE_catchClause = 41, RULE_whileStatement = 42, 
		RULE_forStatement = 43, RULE_simpleStatement = 44, RULE_inlineAssemblyStatement = 45, 
		RULE_doWhileStatement = 46, RULE_continueStatement = 47, RULE_breakStatement = 48, 
		RULE_returnStatement = 49, RULE_throwStatement = 50, RULE_emitStatement = 51, 
		RULE_variableDeclarationStatement = 52, RULE_variableDeclarationList = 53, 
		RULE_identifierList = 54, RULE_elementaryTypeName = 55, RULE_expression = 56, 
		RULE_primaryExpression = 57, RULE_expressionList = 58, RULE_nameValueList = 59, 
		RULE_nameValue = 60, RULE_functionCallArguments = 61, RULE_functionCall = 62, 
		RULE_tupleExpression = 63, RULE_typeNameExpression = 64, RULE_assemblyItem = 65, 
		RULE_assemblyBlock = 66, RULE_assemblyExpression = 67, RULE_assemblyCall = 68, 
		RULE_assemblyLocalDefinition = 69, RULE_assemblyAssignment = 70, RULE_assemblyIdentifierList = 71, 
		RULE_assemblyStackAssignment = 72, RULE_labelDefinition = 73, RULE_assemblySwitch = 74, 
		RULE_assemblyCase = 75, RULE_assemblyFunctionDefinition = 76, RULE_assemblyFunctionReturns = 77, 
		RULE_assemblyFor = 78, RULE_assemblyIf = 79, RULE_assemblyLiteral = 80, 
		RULE_assemblyTypedVariableList = 81, RULE_assemblyType = 82, RULE_subAssembly = 83, 
		RULE_numberLiteral = 84, RULE_identifier = 85, RULE_hexLiteral = 86, RULE_stringLiteral = 87;
	public static readonly string[] ruleNames = {
		"sourceUnit", "pragmaDirective", "pragmaName", "pragmaValue", "version", 
		"versionConstraint", "versionOperator", "importDirective", "importDeclaration", 
		"contractDefinition", "inheritanceSpecifier", "contractPart", "stateVariableDeclaration", 
		"overrideSpecifier", "usingForDeclaration", "structDefinition", "modifierDefinition", 
		"functionDefinition", "functionDescriptor", "returnParameters", "modifierList", 
		"modifierInvocation", "eventDefinition", "enumDefinition", "enumValue", 
		"parameterList", "parameter", "eventParameterList", "eventParameter", 
		"variableDeclaration", "typeName", "userDefinedTypeName", "mapping", "functionTypeName", 
		"storageLocation", "stateMutability", "block", "statement", "expressionStatement", 
		"ifStatement", "tryStatement", "catchClause", "whileStatement", "forStatement", 
		"simpleStatement", "inlineAssemblyStatement", "doWhileStatement", "continueStatement", 
		"breakStatement", "returnStatement", "throwStatement", "emitStatement", 
		"variableDeclarationStatement", "variableDeclarationList", "identifierList", 
		"elementaryTypeName", "expression", "primaryExpression", "expressionList", 
		"nameValueList", "nameValue", "functionCallArguments", "functionCall", 
		"tupleExpression", "typeNameExpression", "assemblyItem", "assemblyBlock", 
		"assemblyExpression", "assemblyCall", "assemblyLocalDefinition", "assemblyAssignment", 
		"assemblyIdentifierList", "assemblyStackAssignment", "labelDefinition", 
		"assemblySwitch", "assemblyCase", "assemblyFunctionDefinition", "assemblyFunctionReturns", 
		"assemblyFor", "assemblyIf", "assemblyLiteral", "assemblyTypedVariableList", 
		"assemblyType", "subAssembly", "numberLiteral", "identifier", "hexLiteral", 
		"stringLiteral"
	};

	private static readonly string[] _LiteralNames = {
		null, "'pragma'", "';'", "'^'", "'~'", "'>='", "'>'", "'<'", "'<='", "'='", 
		"'import'", "'as'", "'*'", "'from'", "'{'", "','", "'}'", "'abstract'", 
		"'contract'", "'interface'", "'library'", "'is'", "'('", "')'", "'override'", 
		"'using'", "'for'", "'struct'", "'modifier'", "'function'", "'returns'", 
		"'event'", "'enum'", "'['", "']'", "'.'", "'mapping'", "'=>'", "'memory'", 
		"'storage'", "'calldata'", "'if'", "'else'", "'try'", "'catch'", "'while'", 
		"'assembly'", "'do'", "'return'", "'throw'", "'emit'", "'var'", "'address'", 
		"'bool'", "'string'", "'byte'", "'++'", "'--'", "'new'", "':'", "'+'", 
		"'-'", "'after'", "'delete'", "'!'", "'**'", "'/'", "'%'", "'<<'", "'>>'", 
		"'&'", "'|'", "'=='", "'!='", "'&&'", "'||'", "'?'", "'|='", "'^='", "'&='", 
		"'<<='", "'>>='", "'+='", "'-='", "'*='", "'/='", "'%='", "'let'", "':='", 
		"'=:'", "'switch'", "'case'", "'default'", null, null, null, null, null, 
		null, null, null, null, null, null, "'anonymous'", "'break'", "'constant'", 
		"'immutable'", "'continue'", "'leave'", "'external'", "'indexed'", "'internal'", 
		"'payable'", "'private'", "'public'", "'virtual'", "'pure'", "'type'", 
		"'view'", "'constructor'", "'fallback'", "'receive'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, "Int", "Uint", "Byte", 
		"Fixed", "Ufixed", "BooleanLiteral", "DecimalNumber", "HexNumber", "NumberUnit", 
		"HexLiteralFragment", "ReservedKeyword", "AnonymousKeyword", "BreakKeyword", 
		"ConstantKeyword", "ImmutableKeyword", "ContinueKeyword", "LeaveKeyword", 
		"ExternalKeyword", "IndexedKeyword", "InternalKeyword", "PayableKeyword", 
		"PrivateKeyword", "PublicKeyword", "VirtualKeyword", "PureKeyword", "TypeKeyword", 
		"ViewKeyword", "ConstructorKeyword", "FallbackKeyword", "ReceiveKeyword", 
		"Identifier", "StringLiteralFragment", "VersionLiteral", "WS", "COMMENT", 
		"LINE_COMMENT"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Solidity.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static SolidityParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public SolidityParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public SolidityParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class SourceUnitContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(SolidityParser.Eof, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public PragmaDirectiveContext[] pragmaDirective() {
			return GetRuleContexts<PragmaDirectiveContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public PragmaDirectiveContext pragmaDirective(int i) {
			return GetRuleContext<PragmaDirectiveContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ImportDirectiveContext[] importDirective() {
			return GetRuleContexts<ImportDirectiveContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ImportDirectiveContext importDirective(int i) {
			return GetRuleContext<ImportDirectiveContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StructDefinitionContext[] structDefinition() {
			return GetRuleContexts<StructDefinitionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StructDefinitionContext structDefinition(int i) {
			return GetRuleContext<StructDefinitionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public EnumDefinitionContext[] enumDefinition() {
			return GetRuleContexts<EnumDefinitionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public EnumDefinitionContext enumDefinition(int i) {
			return GetRuleContext<EnumDefinitionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ContractDefinitionContext[] contractDefinition() {
			return GetRuleContexts<ContractDefinitionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ContractDefinitionContext contractDefinition(int i) {
			return GetRuleContext<ContractDefinitionContext>(i);
		}
		public SourceUnitContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sourceUnit; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.EnterSourceUnit(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.ExitSourceUnit(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISolidityVisitor<TResult> typedVisitor = visitor as ISolidityVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSourceUnit(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SourceUnitContext sourceUnit() {
		SourceUnitContext _localctx = new SourceUnitContext(Context, State);
		EnterRule(_localctx, 0, RULE_sourceUnit);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 183;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__0) | (1L << T__9) | (1L << T__16) | (1L << T__17) | (1L << T__18) | (1L << T__19) | (1L << T__26) | (1L << T__31))) != 0)) {
				{
				State = 181;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case T__0:
					{
					State = 176;
					pragmaDirective();
					}
					break;
				case T__9:
					{
					State = 177;
					importDirective();
					}
					break;
				case T__26:
					{
					State = 178;
					structDefinition();
					}
					break;
				case T__31:
					{
					State = 179;
					enumDefinition();
					}
					break;
				case T__16:
				case T__17:
				case T__18:
				case T__19:
					{
					State = 180;
					contractDefinition();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				State = 185;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 186;
			Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PragmaDirectiveContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public PragmaNameContext pragmaName() {
			return GetRuleContext<PragmaNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PragmaValueContext pragmaValue() {
			return GetRuleContext<PragmaValueContext>(0);
		}
		public PragmaDirectiveContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pragmaDirective; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.EnterPragmaDirective(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.ExitPragmaDirective(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISolidityVisitor<TResult> typedVisitor = visitor as ISolidityVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPragmaDirective(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PragmaDirectiveContext pragmaDirective() {
		PragmaDirectiveContext _localctx = new PragmaDirectiveContext(Context, State);
		EnterRule(_localctx, 2, RULE_pragmaDirective);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 188;
			Match(T__0);
			State = 189;
			pragmaName();
			State = 190;
			pragmaValue();
			State = 191;
			Match(T__1);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PragmaNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public PragmaNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pragmaName; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.EnterPragmaName(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.ExitPragmaName(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISolidityVisitor<TResult> typedVisitor = visitor as ISolidityVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPragmaName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PragmaNameContext pragmaName() {
		PragmaNameContext _localctx = new PragmaNameContext(Context, State);
		EnterRule(_localctx, 4, RULE_pragmaName);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 193;
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PragmaValueContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public VersionContext version() {
			return GetRuleContext<VersionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public PragmaValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pragmaValue; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.EnterPragmaValue(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.ExitPragmaValue(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISolidityVisitor<TResult> typedVisitor = visitor as ISolidityVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPragmaValue(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PragmaValueContext pragmaValue() {
		PragmaValueContext _localctx = new PragmaValueContext(Context, State);
		EnterRule(_localctx, 6, RULE_pragmaValue);
		try {
			State = 197;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,2,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 195;
				version();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 196;
				expression(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VersionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public VersionConstraintContext[] versionConstraint() {
			return GetRuleContexts<VersionConstraintContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public VersionConstraintContext versionConstraint(int i) {
			return GetRuleContext<VersionConstraintContext>(i);
		}
		public VersionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_version; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.EnterVersion(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.ExitVersion(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISolidityVisitor<TResult> typedVisitor = visitor as ISolidityVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVersion(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VersionContext version() {
		VersionContext _localctx = new VersionContext(Context, State);
		EnterRule(_localctx, 8, RULE_version);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 199;
			versionConstraint();
			State = 201;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__2) | (1L << T__3) | (1L << T__4) | (1L << T__5) | (1L << T__6) | (1L << T__7) | (1L << T__8))) != 0) || _la==VersionLiteral) {
				{
				State = 200;
				versionConstraint();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VersionConstraintContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VersionLiteral() { return GetToken(SolidityParser.VersionLiteral, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public VersionOperatorContext versionOperator() {
			return GetRuleContext<VersionOperatorContext>(0);
		}
		public VersionConstraintContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_versionConstraint; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.EnterVersionConstraint(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.ExitVersionConstraint(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISolidityVisitor<TResult> typedVisitor = visitor as ISolidityVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVersionConstraint(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VersionConstraintContext versionConstraint() {
		VersionConstraintContext _localctx = new VersionConstraintContext(Context, State);
		EnterRule(_localctx, 10, RULE_versionConstraint);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 204;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__2) | (1L << T__3) | (1L << T__4) | (1L << T__5) | (1L << T__6) | (1L << T__7) | (1L << T__8))) != 0)) {
				{
				State = 203;
				versionOperator();
				}
			}

			State = 206;
			Match(VersionLiteral);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VersionOperatorContext : ParserRuleContext {
		public VersionOperatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_versionOperator; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.EnterVersionOperator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.ExitVersionOperator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISolidityVisitor<TResult> typedVisitor = visitor as ISolidityVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVersionOperator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VersionOperatorContext versionOperator() {
		VersionOperatorContext _localctx = new VersionOperatorContext(Context, State);
		EnterRule(_localctx, 12, RULE_versionOperator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 208;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__2) | (1L << T__3) | (1L << T__4) | (1L << T__5) | (1L << T__6) | (1L << T__7) | (1L << T__8))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ImportDirectiveContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode StringLiteralFragment() { return GetToken(SolidityParser.StringLiteralFragment, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext[] identifier() {
			return GetRuleContexts<IdentifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier(int i) {
			return GetRuleContext<IdentifierContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ImportDeclarationContext[] importDeclaration() {
			return GetRuleContexts<ImportDeclarationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ImportDeclarationContext importDeclaration(int i) {
			return GetRuleContext<ImportDeclarationContext>(i);
		}
		public ImportDirectiveContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_importDirective; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.EnterImportDirective(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.ExitImportDirective(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISolidityVisitor<TResult> typedVisitor = visitor as ISolidityVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitImportDirective(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ImportDirectiveContext importDirective() {
		ImportDirectiveContext _localctx = new ImportDirectiveContext(Context, State);
		EnterRule(_localctx, 14, RULE_importDirective);
		int _la;
		try {
			State = 244;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,9,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 210;
				Match(T__9);
				State = 211;
				Match(StringLiteralFragment);
				State = 214;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__10) {
					{
					State = 212;
					Match(T__10);
					State = 213;
					identifier();
					}
				}

				State = 216;
				Match(T__1);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 217;
				Match(T__9);
				State = 220;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case T__11:
					{
					State = 218;
					Match(T__11);
					}
					break;
				case T__12:
				case T__39:
				case T__51:
				case Identifier:
					{
					State = 219;
					identifier();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 224;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__10) {
					{
					State = 222;
					Match(T__10);
					State = 223;
					identifier();
					}
				}

				State = 226;
				Match(T__12);
				State = 227;
				Match(StringLiteralFragment);
				State = 228;
				Match(T__1);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 229;
				Match(T__9);
				State = 230;
				Match(T__13);
				State = 231;
				importDeclaration();
				State = 236;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==T__14) {
					{
					{
					State = 232;
					Match(T__14);
					State = 233;
					importDeclaration();
					}
					}
					State = 238;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 239;
				Match(T__15);
				State = 240;
				Match(T__12);
				State = 241;
				Match(StringLiteralFragment);
				State = 242;
				Match(T__1);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ImportDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext[] identifier() {
			return GetRuleContexts<IdentifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier(int i) {
			return GetRuleContext<IdentifierContext>(i);
		}
		public ImportDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_importDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.EnterImportDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.ExitImportDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISolidityVisitor<TResult> typedVisitor = visitor as ISolidityVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitImportDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ImportDeclarationContext importDeclaration() {
		ImportDeclarationContext _localctx = new ImportDeclarationContext(Context, State);
		EnterRule(_localctx, 16, RULE_importDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 246;
			identifier();
			State = 249;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__10) {
				{
				State = 247;
				Match(T__10);
				State = 248;
				identifier();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ContractDefinitionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public InheritanceSpecifierContext[] inheritanceSpecifier() {
			return GetRuleContexts<InheritanceSpecifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public InheritanceSpecifierContext inheritanceSpecifier(int i) {
			return GetRuleContext<InheritanceSpecifierContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ContractPartContext[] contractPart() {
			return GetRuleContexts<ContractPartContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ContractPartContext contractPart(int i) {
			return GetRuleContext<ContractPartContext>(i);
		}
		public ContractDefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_contractDefinition; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.EnterContractDefinition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.ExitContractDefinition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISolidityVisitor<TResult> typedVisitor = visitor as ISolidityVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitContractDefinition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ContractDefinitionContext contractDefinition() {
		ContractDefinitionContext _localctx = new ContractDefinitionContext(Context, State);
		EnterRule(_localctx, 18, RULE_contractDefinition);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 252;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__16) {
				{
				State = 251;
				Match(T__16);
				}
			}

			State = 254;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__17) | (1L << T__18) | (1L << T__19))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 255;
			identifier();
			State = 265;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__20) {
				{
				State = 256;
				Match(T__20);
				State = 257;
				inheritanceSpecifier();
				State = 262;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==T__14) {
					{
					{
					State = 258;
					Match(T__14);
					State = 259;
					inheritanceSpecifier();
					}
					}
					State = 264;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
			}

			State = 267;
			Match(T__13);
			State = 271;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__12) | (1L << T__24) | (1L << T__26) | (1L << T__27) | (1L << T__28) | (1L << T__30) | (1L << T__31) | (1L << T__35) | (1L << T__39) | (1L << T__50) | (1L << T__51) | (1L << T__52) | (1L << T__53) | (1L << T__54))) != 0) || ((((_la - 93)) & ~0x3f) == 0 && ((1L << (_la - 93)) & ((1L << (Int - 93)) | (1L << (Uint - 93)) | (1L << (Byte - 93)) | (1L << (Fixed - 93)) | (1L << (Ufixed - 93)) | (1L << (ConstructorKeyword - 93)) | (1L << (FallbackKeyword - 93)) | (1L << (ReceiveKeyword - 93)) | (1L << (Identifier - 93)))) != 0)) {
				{
				{
				State = 268;
				contractPart();
				}
				}
				State = 273;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 274;
			Match(T__15);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InheritanceSpecifierContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public UserDefinedTypeNameContext userDefinedTypeName() {
			return GetRuleContext<UserDefinedTypeNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionListContext expressionList() {
			return GetRuleContext<ExpressionListContext>(0);
		}
		public InheritanceSpecifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_inheritanceSpecifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.EnterInheritanceSpecifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.ExitInheritanceSpecifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISolidityVisitor<TResult> typedVisitor = visitor as ISolidityVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInheritanceSpecifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InheritanceSpecifierContext inheritanceSpecifier() {
		InheritanceSpecifierContext _localctx = new InheritanceSpecifierContext(Context, State);
		EnterRule(_localctx, 20, RULE_inheritanceSpecifier);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 276;
			userDefinedTypeName();
			State = 282;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__21) {
				{
				State = 277;
				Match(T__21);
				State = 279;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__3) | (1L << T__12) | (1L << T__21) | (1L << T__32) | (1L << T__39) | (1L << T__50) | (1L << T__51) | (1L << T__52) | (1L << T__53) | (1L << T__54) | (1L << T__55) | (1L << T__56) | (1L << T__57) | (1L << T__59) | (1L << T__60) | (1L << T__61) | (1L << T__62))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (T__63 - 64)) | (1L << (Int - 64)) | (1L << (Uint - 64)) | (1L << (Byte - 64)) | (1L << (Fixed - 64)) | (1L << (Ufixed - 64)) | (1L << (BooleanLiteral - 64)) | (1L << (DecimalNumber - 64)) | (1L << (HexNumber - 64)) | (1L << (HexLiteralFragment - 64)) | (1L << (PayableKeyword - 64)) | (1L << (TypeKeyword - 64)) | (1L << (Identifier - 64)) | (1L << (StringLiteralFragment - 64)))) != 0)) {
					{
					State = 278;
					expressionList();
					}
				}

				State = 281;
				Match(T__22);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ContractPartContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StateVariableDeclarationContext stateVariableDeclaration() {
			return GetRuleContext<StateVariableDeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public UsingForDeclarationContext usingForDeclaration() {
			return GetRuleContext<UsingForDeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StructDefinitionContext structDefinition() {
			return GetRuleContext<StructDefinitionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ModifierDefinitionContext modifierDefinition() {
			return GetRuleContext<ModifierDefinitionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionDefinitionContext functionDefinition() {
			return GetRuleContext<FunctionDefinitionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public EventDefinitionContext eventDefinition() {
			return GetRuleContext<EventDefinitionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public EnumDefinitionContext enumDefinition() {
			return GetRuleContext<EnumDefinitionContext>(0);
		}
		public ContractPartContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_contractPart; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.EnterContractPart(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.ExitContractPart(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISolidityVisitor<TResult> typedVisitor = visitor as ISolidityVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitContractPart(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ContractPartContext contractPart() {
		ContractPartContext _localctx = new ContractPartContext(Context, State);
		EnterRule(_localctx, 22, RULE_contractPart);
		try {
			State = 291;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,17,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 284;
				stateVariableDeclaration();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 285;
				usingForDeclaration();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 286;
				structDefinition();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 287;
				modifierDefinition();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 288;
				functionDefinition();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 289;
				eventDefinition();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 290;
				enumDefinition();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StateVariableDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypeNameContext typeName() {
			return GetRuleContext<TypeNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] PublicKeyword() { return GetTokens(SolidityParser.PublicKeyword); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PublicKeyword(int i) {
			return GetToken(SolidityParser.PublicKeyword, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] InternalKeyword() { return GetTokens(SolidityParser.InternalKeyword); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode InternalKeyword(int i) {
			return GetToken(SolidityParser.InternalKeyword, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] PrivateKeyword() { return GetTokens(SolidityParser.PrivateKeyword); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PrivateKeyword(int i) {
			return GetToken(SolidityParser.PrivateKeyword, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] ConstantKeyword() { return GetTokens(SolidityParser.ConstantKeyword); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ConstantKeyword(int i) {
			return GetToken(SolidityParser.ConstantKeyword, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] ImmutableKeyword() { return GetTokens(SolidityParser.ImmutableKeyword); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ImmutableKeyword(int i) {
			return GetToken(SolidityParser.ImmutableKeyword, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public OverrideSpecifierContext[] overrideSpecifier() {
			return GetRuleContexts<OverrideSpecifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public OverrideSpecifierContext overrideSpecifier(int i) {
			return GetRuleContext<OverrideSpecifierContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public StateVariableDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stateVariableDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.EnterStateVariableDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.ExitStateVariableDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISolidityVisitor<TResult> typedVisitor = visitor as ISolidityVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStateVariableDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StateVariableDeclarationContext stateVariableDeclaration() {
		StateVariableDeclarationContext _localctx = new StateVariableDeclarationContext(Context, State);
		EnterRule(_localctx, 24, RULE_stateVariableDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 293;
			typeName(0);
			State = 302;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__23 || ((((_la - 106)) & ~0x3f) == 0 && ((1L << (_la - 106)) & ((1L << (ConstantKeyword - 106)) | (1L << (ImmutableKeyword - 106)) | (1L << (InternalKeyword - 106)) | (1L << (PrivateKeyword - 106)) | (1L << (PublicKeyword - 106)))) != 0)) {
				{
				State = 300;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case PublicKeyword:
					{
					State = 294;
					Match(PublicKeyword);
					}
					break;
				case InternalKeyword:
					{
					State = 295;
					Match(InternalKeyword);
					}
					break;
				case PrivateKeyword:
					{
					State = 296;
					Match(PrivateKeyword);
					}
					break;
				case ConstantKeyword:
					{
					State = 297;
					Match(ConstantKeyword);
					}
					break;
				case ImmutableKeyword:
					{
					State = 298;
					Match(ImmutableKeyword);
					}
					break;
				case T__23:
					{
					State = 299;
					overrideSpecifier();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				State = 304;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 305;
			identifier();
			State = 308;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__8) {
				{
				State = 306;
				Match(T__8);
				State = 307;
				expression(0);
				}
			}

			State = 310;
			Match(T__1);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OverrideSpecifierContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public UserDefinedTypeNameContext[] userDefinedTypeName() {
			return GetRuleContexts<UserDefinedTypeNameContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public UserDefinedTypeNameContext userDefinedTypeName(int i) {
			return GetRuleContext<UserDefinedTypeNameContext>(i);
		}
		public OverrideSpecifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_overrideSpecifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.EnterOverrideSpecifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.ExitOverrideSpecifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISolidityVisitor<TResult> typedVisitor = visitor as ISolidityVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOverrideSpecifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OverrideSpecifierContext overrideSpecifier() {
		OverrideSpecifierContext _localctx = new OverrideSpecifierContext(Context, State);
		EnterRule(_localctx, 26, RULE_overrideSpecifier);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 312;
			Match(T__23);
			State = 324;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,22,Context) ) {
			case 1:
				{
				State = 313;
				Match(T__21);
				State = 314;
				userDefinedTypeName();
				State = 319;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==T__14) {
					{
					{
					State = 315;
					Match(T__14);
					State = 316;
					userDefinedTypeName();
					}
					}
					State = 321;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 322;
				Match(T__22);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UsingForDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeNameContext typeName() {
			return GetRuleContext<TypeNameContext>(0);
		}
		public UsingForDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_usingForDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.EnterUsingForDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.ExitUsingForDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISolidityVisitor<TResult> typedVisitor = visitor as ISolidityVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUsingForDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UsingForDeclarationContext usingForDeclaration() {
		UsingForDeclarationContext _localctx = new UsingForDeclarationContext(Context, State);
		EnterRule(_localctx, 28, RULE_usingForDeclaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 326;
			Match(T__24);
			State = 327;
			identifier();
			State = 328;
			Match(T__25);
			State = 331;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__11:
				{
				State = 329;
				Match(T__11);
				}
				break;
			case T__12:
			case T__28:
			case T__35:
			case T__39:
			case T__50:
			case T__51:
			case T__52:
			case T__53:
			case T__54:
			case Int:
			case Uint:
			case Byte:
			case Fixed:
			case Ufixed:
			case Identifier:
				{
				State = 330;
				typeName(0);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 333;
			Match(T__1);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StructDefinitionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public VariableDeclarationContext[] variableDeclaration() {
			return GetRuleContexts<VariableDeclarationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public VariableDeclarationContext variableDeclaration(int i) {
			return GetRuleContext<VariableDeclarationContext>(i);
		}
		public StructDefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_structDefinition; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.EnterStructDefinition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.ExitStructDefinition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISolidityVisitor<TResult> typedVisitor = visitor as ISolidityVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStructDefinition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StructDefinitionContext structDefinition() {
		StructDefinitionContext _localctx = new StructDefinitionContext(Context, State);
		EnterRule(_localctx, 30, RULE_structDefinition);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 335;
			Match(T__26);
			State = 336;
			identifier();
			State = 337;
			Match(T__13);
			State = 348;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__12) | (1L << T__28) | (1L << T__35) | (1L << T__39) | (1L << T__50) | (1L << T__51) | (1L << T__52) | (1L << T__53) | (1L << T__54))) != 0) || ((((_la - 93)) & ~0x3f) == 0 && ((1L << (_la - 93)) & ((1L << (Int - 93)) | (1L << (Uint - 93)) | (1L << (Byte - 93)) | (1L << (Fixed - 93)) | (1L << (Ufixed - 93)) | (1L << (Identifier - 93)))) != 0)) {
				{
				State = 338;
				variableDeclaration();
				State = 339;
				Match(T__1);
				State = 345;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__12) | (1L << T__28) | (1L << T__35) | (1L << T__39) | (1L << T__50) | (1L << T__51) | (1L << T__52) | (1L << T__53) | (1L << T__54))) != 0) || ((((_la - 93)) & ~0x3f) == 0 && ((1L << (_la - 93)) & ((1L << (Int - 93)) | (1L << (Uint - 93)) | (1L << (Byte - 93)) | (1L << (Fixed - 93)) | (1L << (Ufixed - 93)) | (1L << (Identifier - 93)))) != 0)) {
					{
					{
					State = 340;
					variableDeclaration();
					State = 341;
					Match(T__1);
					}
					}
					State = 347;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
			}

			State = 350;
			Match(T__15);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ModifierDefinitionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ParameterListContext parameterList() {
			return GetRuleContext<ParameterListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] VirtualKeyword() { return GetTokens(SolidityParser.VirtualKeyword); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VirtualKeyword(int i) {
			return GetToken(SolidityParser.VirtualKeyword, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public OverrideSpecifierContext[] overrideSpecifier() {
			return GetRuleContexts<OverrideSpecifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public OverrideSpecifierContext overrideSpecifier(int i) {
			return GetRuleContext<OverrideSpecifierContext>(i);
		}
		public ModifierDefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_modifierDefinition; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.EnterModifierDefinition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.ExitModifierDefinition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISolidityVisitor<TResult> typedVisitor = visitor as ISolidityVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitModifierDefinition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ModifierDefinitionContext modifierDefinition() {
		ModifierDefinitionContext _localctx = new ModifierDefinitionContext(Context, State);
		EnterRule(_localctx, 32, RULE_modifierDefinition);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 352;
			Match(T__27);
			State = 353;
			identifier();
			State = 355;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__21) {
				{
				State = 354;
				parameterList();
				}
			}

			State = 361;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__23 || _la==VirtualKeyword) {
				{
				State = 359;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case VirtualKeyword:
					{
					State = 357;
					Match(VirtualKeyword);
					}
					break;
				case T__23:
					{
					State = 358;
					overrideSpecifier();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				State = 363;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 366;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__1:
				{
				State = 364;
				Match(T__1);
				}
				break;
			case T__13:
				{
				State = 365;
				block();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionDefinitionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FunctionDescriptorContext functionDescriptor() {
			return GetRuleContext<FunctionDescriptorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ParameterListContext parameterList() {
			return GetRuleContext<ParameterListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ModifierListContext modifierList() {
			return GetRuleContext<ModifierListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ReturnParametersContext returnParameters() {
			return GetRuleContext<ReturnParametersContext>(0);
		}
		public FunctionDefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionDefinition; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.EnterFunctionDefinition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.ExitFunctionDefinition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISolidityVisitor<TResult> typedVisitor = visitor as ISolidityVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionDefinition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionDefinitionContext functionDefinition() {
		FunctionDefinitionContext _localctx = new FunctionDefinitionContext(Context, State);
		EnterRule(_localctx, 34, RULE_functionDefinition);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 368;
			functionDescriptor();
			State = 369;
			parameterList();
			State = 370;
			modifierList();
			State = 372;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__29) {
				{
				State = 371;
				returnParameters();
				}
			}

			State = 376;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__1:
				{
				State = 374;
				Match(T__1);
				}
				break;
			case T__13:
				{
				State = 375;
				block();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionDescriptorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ReceiveKeyword() { return GetToken(SolidityParser.ReceiveKeyword, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FallbackKeyword() { return GetToken(SolidityParser.FallbackKeyword, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ConstructorKeyword() { return GetToken(SolidityParser.ConstructorKeyword, 0); }
		public FunctionDescriptorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionDescriptor; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.EnterFunctionDescriptor(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.ExitFunctionDescriptor(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISolidityVisitor<TResult> typedVisitor = visitor as ISolidityVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionDescriptor(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionDescriptorContext functionDescriptor() {
		FunctionDescriptorContext _localctx = new FunctionDescriptorContext(Context, State);
		EnterRule(_localctx, 36, RULE_functionDescriptor);
		try {
			State = 387;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__28:
				EnterOuterAlt(_localctx, 1);
				{
				State = 378;
				Match(T__28);
				State = 382;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case T__12:
				case T__39:
				case T__51:
				case Identifier:
					{
					State = 379;
					identifier();
					}
					break;
				case ReceiveKeyword:
					{
					State = 380;
					Match(ReceiveKeyword);
					}
					break;
				case FallbackKeyword:
					{
					State = 381;
					Match(FallbackKeyword);
					}
					break;
				case T__21:
					break;
				default:
					break;
				}
				}
				break;
			case ConstructorKeyword:
				EnterOuterAlt(_localctx, 2);
				{
				State = 384;
				Match(ConstructorKeyword);
				}
				break;
			case FallbackKeyword:
				EnterOuterAlt(_localctx, 3);
				{
				State = 385;
				Match(FallbackKeyword);
				}
				break;
			case ReceiveKeyword:
				EnterOuterAlt(_localctx, 4);
				{
				State = 386;
				Match(ReceiveKeyword);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReturnParametersContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ParameterListContext parameterList() {
			return GetRuleContext<ParameterListContext>(0);
		}
		public ReturnParametersContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_returnParameters; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.EnterReturnParameters(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.ExitReturnParameters(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISolidityVisitor<TResult> typedVisitor = visitor as ISolidityVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReturnParameters(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ReturnParametersContext returnParameters() {
		ReturnParametersContext _localctx = new ReturnParametersContext(Context, State);
		EnterRule(_localctx, 38, RULE_returnParameters);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 389;
			Match(T__29);
			State = 390;
			parameterList();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ModifierListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ModifierInvocationContext[] modifierInvocation() {
			return GetRuleContexts<ModifierInvocationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ModifierInvocationContext modifierInvocation(int i) {
			return GetRuleContext<ModifierInvocationContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StateMutabilityContext[] stateMutability() {
			return GetRuleContexts<StateMutabilityContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StateMutabilityContext stateMutability(int i) {
			return GetRuleContext<StateMutabilityContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] ExternalKeyword() { return GetTokens(SolidityParser.ExternalKeyword); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ExternalKeyword(int i) {
			return GetToken(SolidityParser.ExternalKeyword, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] PublicKeyword() { return GetTokens(SolidityParser.PublicKeyword); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PublicKeyword(int i) {
			return GetToken(SolidityParser.PublicKeyword, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] InternalKeyword() { return GetTokens(SolidityParser.InternalKeyword); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode InternalKeyword(int i) {
			return GetToken(SolidityParser.InternalKeyword, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] PrivateKeyword() { return GetTokens(SolidityParser.PrivateKeyword); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PrivateKeyword(int i) {
			return GetToken(SolidityParser.PrivateKeyword, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] VirtualKeyword() { return GetTokens(SolidityParser.VirtualKeyword); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VirtualKeyword(int i) {
			return GetToken(SolidityParser.VirtualKeyword, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public OverrideSpecifierContext[] overrideSpecifier() {
			return GetRuleContexts<OverrideSpecifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public OverrideSpecifierContext overrideSpecifier(int i) {
			return GetRuleContext<OverrideSpecifierContext>(i);
		}
		public ModifierListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_modifierList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.EnterModifierList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.ExitModifierList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISolidityVisitor<TResult> typedVisitor = visitor as ISolidityVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitModifierList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ModifierListContext modifierList() {
		ModifierListContext _localctx = new ModifierListContext(Context, State);
		EnterRule(_localctx, 40, RULE_modifierList);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 402;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,35,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					State = 400;
					ErrorHandler.Sync(this);
					switch (TokenStream.LA(1)) {
					case T__12:
					case T__39:
					case T__51:
					case Identifier:
						{
						State = 392;
						modifierInvocation();
						}
						break;
					case ConstantKeyword:
					case PayableKeyword:
					case PureKeyword:
					case ViewKeyword:
						{
						State = 393;
						stateMutability();
						}
						break;
					case ExternalKeyword:
						{
						State = 394;
						Match(ExternalKeyword);
						}
						break;
					case PublicKeyword:
						{
						State = 395;
						Match(PublicKeyword);
						}
						break;
					case InternalKeyword:
						{
						State = 396;
						Match(InternalKeyword);
						}
						break;
					case PrivateKeyword:
						{
						State = 397;
						Match(PrivateKeyword);
						}
						break;
					case VirtualKeyword:
						{
						State = 398;
						Match(VirtualKeyword);
						}
						break;
					case T__23:
						{
						State = 399;
						overrideSpecifier();
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					} 
				}
				State = 404;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,35,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ModifierInvocationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionListContext expressionList() {
			return GetRuleContext<ExpressionListContext>(0);
		}
		public ModifierInvocationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_modifierInvocation; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.EnterModifierInvocation(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.ExitModifierInvocation(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISolidityVisitor<TResult> typedVisitor = visitor as ISolidityVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitModifierInvocation(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ModifierInvocationContext modifierInvocation() {
		ModifierInvocationContext _localctx = new ModifierInvocationContext(Context, State);
		EnterRule(_localctx, 42, RULE_modifierInvocation);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 405;
			identifier();
			State = 411;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,37,Context) ) {
			case 1:
				{
				State = 406;
				Match(T__21);
				State = 408;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__3) | (1L << T__12) | (1L << T__21) | (1L << T__32) | (1L << T__39) | (1L << T__50) | (1L << T__51) | (1L << T__52) | (1L << T__53) | (1L << T__54) | (1L << T__55) | (1L << T__56) | (1L << T__57) | (1L << T__59) | (1L << T__60) | (1L << T__61) | (1L << T__62))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (T__63 - 64)) | (1L << (Int - 64)) | (1L << (Uint - 64)) | (1L << (Byte - 64)) | (1L << (Fixed - 64)) | (1L << (Ufixed - 64)) | (1L << (BooleanLiteral - 64)) | (1L << (DecimalNumber - 64)) | (1L << (HexNumber - 64)) | (1L << (HexLiteralFragment - 64)) | (1L << (PayableKeyword - 64)) | (1L << (TypeKeyword - 64)) | (1L << (Identifier - 64)) | (1L << (StringLiteralFragment - 64)))) != 0)) {
					{
					State = 407;
					expressionList();
					}
				}

				State = 410;
				Match(T__22);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EventDefinitionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public EventParameterListContext eventParameterList() {
			return GetRuleContext<EventParameterListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AnonymousKeyword() { return GetToken(SolidityParser.AnonymousKeyword, 0); }
		public EventDefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_eventDefinition; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.EnterEventDefinition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.ExitEventDefinition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISolidityVisitor<TResult> typedVisitor = visitor as ISolidityVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEventDefinition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EventDefinitionContext eventDefinition() {
		EventDefinitionContext _localctx = new EventDefinitionContext(Context, State);
		EnterRule(_localctx, 44, RULE_eventDefinition);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 413;
			Match(T__30);
			State = 414;
			identifier();
			State = 415;
			eventParameterList();
			State = 417;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==AnonymousKeyword) {
				{
				State = 416;
				Match(AnonymousKeyword);
				}
			}

			State = 419;
			Match(T__1);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EnumDefinitionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public EnumValueContext[] enumValue() {
			return GetRuleContexts<EnumValueContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public EnumValueContext enumValue(int i) {
			return GetRuleContext<EnumValueContext>(i);
		}
		public EnumDefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enumDefinition; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.EnterEnumDefinition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.ExitEnumDefinition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISolidityVisitor<TResult> typedVisitor = visitor as ISolidityVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEnumDefinition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EnumDefinitionContext enumDefinition() {
		EnumDefinitionContext _localctx = new EnumDefinitionContext(Context, State);
		EnterRule(_localctx, 46, RULE_enumDefinition);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 421;
			Match(T__31);
			State = 422;
			identifier();
			State = 423;
			Match(T__13);
			State = 425;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__12) | (1L << T__39) | (1L << T__51))) != 0) || _la==Identifier) {
				{
				State = 424;
				enumValue();
				}
			}

			State = 431;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__14) {
				{
				{
				State = 427;
				Match(T__14);
				State = 428;
				enumValue();
				}
				}
				State = 433;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 434;
			Match(T__15);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EnumValueContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public EnumValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enumValue; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.EnterEnumValue(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.ExitEnumValue(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISolidityVisitor<TResult> typedVisitor = visitor as ISolidityVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEnumValue(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EnumValueContext enumValue() {
		EnumValueContext _localctx = new EnumValueContext(Context, State);
		EnterRule(_localctx, 48, RULE_enumValue);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 436;
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParameterListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ParameterContext[] parameter() {
			return GetRuleContexts<ParameterContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ParameterContext parameter(int i) {
			return GetRuleContext<ParameterContext>(i);
		}
		public ParameterListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parameterList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.EnterParameterList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.ExitParameterList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISolidityVisitor<TResult> typedVisitor = visitor as ISolidityVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParameterList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ParameterListContext parameterList() {
		ParameterListContext _localctx = new ParameterListContext(Context, State);
		EnterRule(_localctx, 50, RULE_parameterList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 438;
			Match(T__21);
			State = 447;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__12) | (1L << T__28) | (1L << T__35) | (1L << T__39) | (1L << T__50) | (1L << T__51) | (1L << T__52) | (1L << T__53) | (1L << T__54))) != 0) || ((((_la - 93)) & ~0x3f) == 0 && ((1L << (_la - 93)) & ((1L << (Int - 93)) | (1L << (Uint - 93)) | (1L << (Byte - 93)) | (1L << (Fixed - 93)) | (1L << (Ufixed - 93)) | (1L << (Identifier - 93)))) != 0)) {
				{
				State = 439;
				parameter();
				State = 444;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==T__14) {
					{
					{
					State = 440;
					Match(T__14);
					State = 441;
					parameter();
					}
					}
					State = 446;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
			}

			State = 449;
			Match(T__22);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParameterContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypeNameContext typeName() {
			return GetRuleContext<TypeNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StorageLocationContext storageLocation() {
			return GetRuleContext<StorageLocationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ParameterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parameter; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.EnterParameter(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.ExitParameter(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISolidityVisitor<TResult> typedVisitor = visitor as ISolidityVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParameter(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ParameterContext parameter() {
		ParameterContext _localctx = new ParameterContext(Context, State);
		EnterRule(_localctx, 52, RULE_parameter);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 451;
			typeName(0);
			State = 453;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,43,Context) ) {
			case 1:
				{
				State = 452;
				storageLocation();
				}
				break;
			}
			State = 456;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__12) | (1L << T__39) | (1L << T__51))) != 0) || _la==Identifier) {
				{
				State = 455;
				identifier();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EventParameterListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public EventParameterContext[] eventParameter() {
			return GetRuleContexts<EventParameterContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public EventParameterContext eventParameter(int i) {
			return GetRuleContext<EventParameterContext>(i);
		}
		public EventParameterListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_eventParameterList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.EnterEventParameterList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.ExitEventParameterList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISolidityVisitor<TResult> typedVisitor = visitor as ISolidityVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEventParameterList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EventParameterListContext eventParameterList() {
		EventParameterListContext _localctx = new EventParameterListContext(Context, State);
		EnterRule(_localctx, 54, RULE_eventParameterList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 458;
			Match(T__21);
			State = 467;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__12) | (1L << T__28) | (1L << T__35) | (1L << T__39) | (1L << T__50) | (1L << T__51) | (1L << T__52) | (1L << T__53) | (1L << T__54))) != 0) || ((((_la - 93)) & ~0x3f) == 0 && ((1L << (_la - 93)) & ((1L << (Int - 93)) | (1L << (Uint - 93)) | (1L << (Byte - 93)) | (1L << (Fixed - 93)) | (1L << (Ufixed - 93)) | (1L << (Identifier - 93)))) != 0)) {
				{
				State = 459;
				eventParameter();
				State = 464;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==T__14) {
					{
					{
					State = 460;
					Match(T__14);
					State = 461;
					eventParameter();
					}
					}
					State = 466;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
			}

			State = 469;
			Match(T__22);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EventParameterContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypeNameContext typeName() {
			return GetRuleContext<TypeNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IndexedKeyword() { return GetToken(SolidityParser.IndexedKeyword, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public EventParameterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_eventParameter; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.EnterEventParameter(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.ExitEventParameter(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISolidityVisitor<TResult> typedVisitor = visitor as ISolidityVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEventParameter(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EventParameterContext eventParameter() {
		EventParameterContext _localctx = new EventParameterContext(Context, State);
		EnterRule(_localctx, 56, RULE_eventParameter);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 471;
			typeName(0);
			State = 473;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==IndexedKeyword) {
				{
				State = 472;
				Match(IndexedKeyword);
				}
			}

			State = 476;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__12) | (1L << T__39) | (1L << T__51))) != 0) || _la==Identifier) {
				{
				State = 475;
				identifier();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariableDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypeNameContext typeName() {
			return GetRuleContext<TypeNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StorageLocationContext storageLocation() {
			return GetRuleContext<StorageLocationContext>(0);
		}
		public VariableDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variableDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.EnterVariableDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.ExitVariableDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISolidityVisitor<TResult> typedVisitor = visitor as ISolidityVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariableDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VariableDeclarationContext variableDeclaration() {
		VariableDeclarationContext _localctx = new VariableDeclarationContext(Context, State);
		EnterRule(_localctx, 58, RULE_variableDeclaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 478;
			typeName(0);
			State = 480;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,49,Context) ) {
			case 1:
				{
				State = 479;
				storageLocation();
				}
				break;
			}
			State = 482;
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ElementaryTypeNameContext elementaryTypeName() {
			return GetRuleContext<ElementaryTypeNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public UserDefinedTypeNameContext userDefinedTypeName() {
			return GetRuleContext<UserDefinedTypeNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MappingContext mapping() {
			return GetRuleContext<MappingContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionTypeNameContext functionTypeName() {
			return GetRuleContext<FunctionTypeNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeNameContext typeName() {
			return GetRuleContext<TypeNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public TypeNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeName; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.EnterTypeName(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.ExitTypeName(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISolidityVisitor<TResult> typedVisitor = visitor as ISolidityVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeNameContext typeName() {
		return typeName(0);
	}

	private TypeNameContext typeName(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		TypeNameContext _localctx = new TypeNameContext(Context, _parentState);
		TypeNameContext _prevctx = _localctx;
		int _startState = 60;
		EnterRecursionRule(_localctx, 60, RULE_typeName, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 489;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,50,Context) ) {
			case 1:
				{
				State = 485;
				elementaryTypeName();
				}
				break;
			case 2:
				{
				State = 486;
				userDefinedTypeName();
				}
				break;
			case 3:
				{
				State = 487;
				mapping();
				}
				break;
			case 4:
				{
				State = 488;
				functionTypeName();
				}
				break;
			}
			Context.Stop = TokenStream.LT(-1);
			State = 499;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,52,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new TypeNameContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_typeName);
					State = 491;
					if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
					State = 492;
					Match(T__32);
					State = 494;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__3) | (1L << T__12) | (1L << T__21) | (1L << T__32) | (1L << T__39) | (1L << T__50) | (1L << T__51) | (1L << T__52) | (1L << T__53) | (1L << T__54) | (1L << T__55) | (1L << T__56) | (1L << T__57) | (1L << T__59) | (1L << T__60) | (1L << T__61) | (1L << T__62))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (T__63 - 64)) | (1L << (Int - 64)) | (1L << (Uint - 64)) | (1L << (Byte - 64)) | (1L << (Fixed - 64)) | (1L << (Ufixed - 64)) | (1L << (BooleanLiteral - 64)) | (1L << (DecimalNumber - 64)) | (1L << (HexNumber - 64)) | (1L << (HexLiteralFragment - 64)) | (1L << (PayableKeyword - 64)) | (1L << (TypeKeyword - 64)) | (1L << (Identifier - 64)) | (1L << (StringLiteralFragment - 64)))) != 0)) {
						{
						State = 493;
						expression(0);
						}
					}

					State = 496;
					Match(T__33);
					}
					} 
				}
				State = 501;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,52,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class UserDefinedTypeNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext[] identifier() {
			return GetRuleContexts<IdentifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier(int i) {
			return GetRuleContext<IdentifierContext>(i);
		}
		public UserDefinedTypeNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_userDefinedTypeName; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.EnterUserDefinedTypeName(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.ExitUserDefinedTypeName(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISolidityVisitor<TResult> typedVisitor = visitor as ISolidityVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUserDefinedTypeName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UserDefinedTypeNameContext userDefinedTypeName() {
		UserDefinedTypeNameContext _localctx = new UserDefinedTypeNameContext(Context, State);
		EnterRule(_localctx, 62, RULE_userDefinedTypeName);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 502;
			identifier();
			State = 507;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,53,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 503;
					Match(T__34);
					State = 504;
					identifier();
					}
					} 
				}
				State = 509;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,53,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MappingContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypeNameContext typeName() {
			return GetRuleContext<TypeNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ElementaryTypeNameContext elementaryTypeName() {
			return GetRuleContext<ElementaryTypeNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public UserDefinedTypeNameContext userDefinedTypeName() {
			return GetRuleContext<UserDefinedTypeNameContext>(0);
		}
		public MappingContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_mapping; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.EnterMapping(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.ExitMapping(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISolidityVisitor<TResult> typedVisitor = visitor as ISolidityVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMapping(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MappingContext mapping() {
		MappingContext _localctx = new MappingContext(Context, State);
		EnterRule(_localctx, 64, RULE_mapping);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 510;
			Match(T__35);
			State = 511;
			Match(T__21);
			State = 514;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,54,Context) ) {
			case 1:
				{
				State = 512;
				elementaryTypeName();
				}
				break;
			case 2:
				{
				State = 513;
				userDefinedTypeName();
				}
				break;
			}
			State = 516;
			Match(T__36);
			State = 517;
			typeName(0);
			State = 518;
			Match(T__22);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionTypeNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ParameterListContext parameterList() {
			return GetRuleContext<ParameterListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ModifierListContext modifierList() {
			return GetRuleContext<ModifierListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ReturnParametersContext returnParameters() {
			return GetRuleContext<ReturnParametersContext>(0);
		}
		public FunctionTypeNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionTypeName; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.EnterFunctionTypeName(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.ExitFunctionTypeName(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISolidityVisitor<TResult> typedVisitor = visitor as ISolidityVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionTypeName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionTypeNameContext functionTypeName() {
		FunctionTypeNameContext _localctx = new FunctionTypeNameContext(Context, State);
		EnterRule(_localctx, 66, RULE_functionTypeName);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 520;
			Match(T__28);
			State = 521;
			parameterList();
			State = 522;
			modifierList();
			State = 524;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,55,Context) ) {
			case 1:
				{
				State = 523;
				returnParameters();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StorageLocationContext : ParserRuleContext {
		public StorageLocationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_storageLocation; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.EnterStorageLocation(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.ExitStorageLocation(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISolidityVisitor<TResult> typedVisitor = visitor as ISolidityVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStorageLocation(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StorageLocationContext storageLocation() {
		StorageLocationContext _localctx = new StorageLocationContext(Context, State);
		EnterRule(_localctx, 68, RULE_storageLocation);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 526;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__37) | (1L << T__38) | (1L << T__39))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StateMutabilityContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PureKeyword() { return GetToken(SolidityParser.PureKeyword, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ConstantKeyword() { return GetToken(SolidityParser.ConstantKeyword, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ViewKeyword() { return GetToken(SolidityParser.ViewKeyword, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PayableKeyword() { return GetToken(SolidityParser.PayableKeyword, 0); }
		public StateMutabilityContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stateMutability; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.EnterStateMutability(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.ExitStateMutability(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISolidityVisitor<TResult> typedVisitor = visitor as ISolidityVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStateMutability(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StateMutabilityContext stateMutability() {
		StateMutabilityContext _localctx = new StateMutabilityContext(Context, State);
		EnterRule(_localctx, 70, RULE_stateMutability);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 528;
			_la = TokenStream.LA(1);
			if ( !(((((_la - 106)) & ~0x3f) == 0 && ((1L << (_la - 106)) & ((1L << (ConstantKeyword - 106)) | (1L << (PayableKeyword - 106)) | (1L << (PureKeyword - 106)) | (1L << (ViewKeyword - 106)))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlockContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public BlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_block; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.EnterBlock(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.ExitBlock(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISolidityVisitor<TResult> typedVisitor = visitor as ISolidityVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BlockContext block() {
		BlockContext _localctx = new BlockContext(Context, State);
		EnterRule(_localctx, 72, RULE_block);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 530;
			Match(T__13);
			State = 534;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__3) | (1L << T__12) | (1L << T__13) | (1L << T__21) | (1L << T__25) | (1L << T__28) | (1L << T__32) | (1L << T__35) | (1L << T__39) | (1L << T__40) | (1L << T__42) | (1L << T__44) | (1L << T__45) | (1L << T__46) | (1L << T__47) | (1L << T__48) | (1L << T__49) | (1L << T__50) | (1L << T__51) | (1L << T__52) | (1L << T__53) | (1L << T__54) | (1L << T__55) | (1L << T__56) | (1L << T__57) | (1L << T__59) | (1L << T__60) | (1L << T__61) | (1L << T__62))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (T__63 - 64)) | (1L << (Int - 64)) | (1L << (Uint - 64)) | (1L << (Byte - 64)) | (1L << (Fixed - 64)) | (1L << (Ufixed - 64)) | (1L << (BooleanLiteral - 64)) | (1L << (DecimalNumber - 64)) | (1L << (HexNumber - 64)) | (1L << (HexLiteralFragment - 64)) | (1L << (BreakKeyword - 64)) | (1L << (ContinueKeyword - 64)) | (1L << (PayableKeyword - 64)) | (1L << (TypeKeyword - 64)) | (1L << (Identifier - 64)) | (1L << (StringLiteralFragment - 64)))) != 0)) {
				{
				{
				State = 531;
				statement();
				}
				}
				State = 536;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 537;
			Match(T__15);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IfStatementContext ifStatement() {
			return GetRuleContext<IfStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TryStatementContext tryStatement() {
			return GetRuleContext<TryStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public WhileStatementContext whileStatement() {
			return GetRuleContext<WhileStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ForStatementContext forStatement() {
			return GetRuleContext<ForStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public InlineAssemblyStatementContext inlineAssemblyStatement() {
			return GetRuleContext<InlineAssemblyStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DoWhileStatementContext doWhileStatement() {
			return GetRuleContext<DoWhileStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ContinueStatementContext continueStatement() {
			return GetRuleContext<ContinueStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BreakStatementContext breakStatement() {
			return GetRuleContext<BreakStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ReturnStatementContext returnStatement() {
			return GetRuleContext<ReturnStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ThrowStatementContext throwStatement() {
			return GetRuleContext<ThrowStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public EmitStatementContext emitStatement() {
			return GetRuleContext<EmitStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SimpleStatementContext simpleStatement() {
			return GetRuleContext<SimpleStatementContext>(0);
		}
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.EnterStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.ExitStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISolidityVisitor<TResult> typedVisitor = visitor as ISolidityVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		StatementContext _localctx = new StatementContext(Context, State);
		EnterRule(_localctx, 74, RULE_statement);
		try {
			State = 552;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__40:
				EnterOuterAlt(_localctx, 1);
				{
				State = 539;
				ifStatement();
				}
				break;
			case T__42:
				EnterOuterAlt(_localctx, 2);
				{
				State = 540;
				tryStatement();
				}
				break;
			case T__44:
				EnterOuterAlt(_localctx, 3);
				{
				State = 541;
				whileStatement();
				}
				break;
			case T__25:
				EnterOuterAlt(_localctx, 4);
				{
				State = 542;
				forStatement();
				}
				break;
			case T__13:
				EnterOuterAlt(_localctx, 5);
				{
				State = 543;
				block();
				}
				break;
			case T__45:
				EnterOuterAlt(_localctx, 6);
				{
				State = 544;
				inlineAssemblyStatement();
				}
				break;
			case T__46:
				EnterOuterAlt(_localctx, 7);
				{
				State = 545;
				doWhileStatement();
				}
				break;
			case ContinueKeyword:
				EnterOuterAlt(_localctx, 8);
				{
				State = 546;
				continueStatement();
				}
				break;
			case BreakKeyword:
				EnterOuterAlt(_localctx, 9);
				{
				State = 547;
				breakStatement();
				}
				break;
			case T__47:
				EnterOuterAlt(_localctx, 10);
				{
				State = 548;
				returnStatement();
				}
				break;
			case T__48:
				EnterOuterAlt(_localctx, 11);
				{
				State = 549;
				throwStatement();
				}
				break;
			case T__49:
				EnterOuterAlt(_localctx, 12);
				{
				State = 550;
				emitStatement();
				}
				break;
			case T__3:
			case T__12:
			case T__21:
			case T__28:
			case T__32:
			case T__35:
			case T__39:
			case T__50:
			case T__51:
			case T__52:
			case T__53:
			case T__54:
			case T__55:
			case T__56:
			case T__57:
			case T__59:
			case T__60:
			case T__61:
			case T__62:
			case T__63:
			case Int:
			case Uint:
			case Byte:
			case Fixed:
			case Ufixed:
			case BooleanLiteral:
			case DecimalNumber:
			case HexNumber:
			case HexLiteralFragment:
			case PayableKeyword:
			case TypeKeyword:
			case Identifier:
			case StringLiteralFragment:
				EnterOuterAlt(_localctx, 13);
				{
				State = 551;
				simpleStatement();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ExpressionStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expressionStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.EnterExpressionStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.ExitExpressionStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISolidityVisitor<TResult> typedVisitor = visitor as ISolidityVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpressionStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionStatementContext expressionStatement() {
		ExpressionStatementContext _localctx = new ExpressionStatementContext(Context, State);
		EnterRule(_localctx, 76, RULE_expressionStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 554;
			expression(0);
			State = 555;
			Match(T__1);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IfStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public IfStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ifStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.EnterIfStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.ExitIfStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISolidityVisitor<TResult> typedVisitor = visitor as ISolidityVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIfStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IfStatementContext ifStatement() {
		IfStatementContext _localctx = new IfStatementContext(Context, State);
		EnterRule(_localctx, 78, RULE_ifStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 557;
			Match(T__40);
			State = 558;
			Match(T__21);
			State = 559;
			expression(0);
			State = 560;
			Match(T__22);
			State = 561;
			statement();
			State = 564;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,58,Context) ) {
			case 1:
				{
				State = 562;
				Match(T__41);
				State = 563;
				statement();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TryStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ReturnParametersContext returnParameters() {
			return GetRuleContext<ReturnParametersContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CatchClauseContext[] catchClause() {
			return GetRuleContexts<CatchClauseContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public CatchClauseContext catchClause(int i) {
			return GetRuleContext<CatchClauseContext>(i);
		}
		public TryStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tryStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.EnterTryStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.ExitTryStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISolidityVisitor<TResult> typedVisitor = visitor as ISolidityVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTryStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TryStatementContext tryStatement() {
		TryStatementContext _localctx = new TryStatementContext(Context, State);
		EnterRule(_localctx, 80, RULE_tryStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 566;
			Match(T__42);
			State = 567;
			expression(0);
			State = 569;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__29) {
				{
				State = 568;
				returnParameters();
				}
			}

			State = 571;
			block();
			State = 573;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 572;
				catchClause();
				}
				}
				State = 575;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==T__43 );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CatchClauseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ParameterListContext parameterList() {
			return GetRuleContext<ParameterListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public CatchClauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_catchClause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.EnterCatchClause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.ExitCatchClause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISolidityVisitor<TResult> typedVisitor = visitor as ISolidityVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCatchClause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CatchClauseContext catchClause() {
		CatchClauseContext _localctx = new CatchClauseContext(Context, State);
		EnterRule(_localctx, 82, RULE_catchClause);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 577;
			Match(T__43);
			State = 582;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__12) | (1L << T__21) | (1L << T__39) | (1L << T__51))) != 0) || _la==Identifier) {
				{
				State = 579;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__12) | (1L << T__39) | (1L << T__51))) != 0) || _la==Identifier) {
					{
					State = 578;
					identifier();
					}
				}

				State = 581;
				parameterList();
				}
			}

			State = 584;
			block();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WhileStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		public WhileStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_whileStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.EnterWhileStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.ExitWhileStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISolidityVisitor<TResult> typedVisitor = visitor as ISolidityVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWhileStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public WhileStatementContext whileStatement() {
		WhileStatementContext _localctx = new WhileStatementContext(Context, State);
		EnterRule(_localctx, 84, RULE_whileStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 586;
			Match(T__44);
			State = 587;
			Match(T__21);
			State = 588;
			expression(0);
			State = 589;
			Match(T__22);
			State = 590;
			statement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ForStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SimpleStatementContext simpleStatement() {
			return GetRuleContext<SimpleStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionStatementContext expressionStatement() {
			return GetRuleContext<ExpressionStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ForStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_forStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.EnterForStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.ExitForStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISolidityVisitor<TResult> typedVisitor = visitor as ISolidityVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ForStatementContext forStatement() {
		ForStatementContext _localctx = new ForStatementContext(Context, State);
		EnterRule(_localctx, 86, RULE_forStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 592;
			Match(T__25);
			State = 593;
			Match(T__21);
			State = 596;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__3:
			case T__12:
			case T__21:
			case T__28:
			case T__32:
			case T__35:
			case T__39:
			case T__50:
			case T__51:
			case T__52:
			case T__53:
			case T__54:
			case T__55:
			case T__56:
			case T__57:
			case T__59:
			case T__60:
			case T__61:
			case T__62:
			case T__63:
			case Int:
			case Uint:
			case Byte:
			case Fixed:
			case Ufixed:
			case BooleanLiteral:
			case DecimalNumber:
			case HexNumber:
			case HexLiteralFragment:
			case PayableKeyword:
			case TypeKeyword:
			case Identifier:
			case StringLiteralFragment:
				{
				State = 594;
				simpleStatement();
				}
				break;
			case T__1:
				{
				State = 595;
				Match(T__1);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 600;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__3:
			case T__12:
			case T__21:
			case T__32:
			case T__39:
			case T__50:
			case T__51:
			case T__52:
			case T__53:
			case T__54:
			case T__55:
			case T__56:
			case T__57:
			case T__59:
			case T__60:
			case T__61:
			case T__62:
			case T__63:
			case Int:
			case Uint:
			case Byte:
			case Fixed:
			case Ufixed:
			case BooleanLiteral:
			case DecimalNumber:
			case HexNumber:
			case HexLiteralFragment:
			case PayableKeyword:
			case TypeKeyword:
			case Identifier:
			case StringLiteralFragment:
				{
				State = 598;
				expressionStatement();
				}
				break;
			case T__1:
				{
				State = 599;
				Match(T__1);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 603;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__3) | (1L << T__12) | (1L << T__21) | (1L << T__32) | (1L << T__39) | (1L << T__50) | (1L << T__51) | (1L << T__52) | (1L << T__53) | (1L << T__54) | (1L << T__55) | (1L << T__56) | (1L << T__57) | (1L << T__59) | (1L << T__60) | (1L << T__61) | (1L << T__62))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (T__63 - 64)) | (1L << (Int - 64)) | (1L << (Uint - 64)) | (1L << (Byte - 64)) | (1L << (Fixed - 64)) | (1L << (Ufixed - 64)) | (1L << (BooleanLiteral - 64)) | (1L << (DecimalNumber - 64)) | (1L << (HexNumber - 64)) | (1L << (HexLiteralFragment - 64)) | (1L << (PayableKeyword - 64)) | (1L << (TypeKeyword - 64)) | (1L << (Identifier - 64)) | (1L << (StringLiteralFragment - 64)))) != 0)) {
				{
				State = 602;
				expression(0);
				}
			}

			State = 605;
			Match(T__22);
			State = 606;
			statement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SimpleStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public VariableDeclarationStatementContext variableDeclarationStatement() {
			return GetRuleContext<VariableDeclarationStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionStatementContext expressionStatement() {
			return GetRuleContext<ExpressionStatementContext>(0);
		}
		public SimpleStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_simpleStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.EnterSimpleStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.ExitSimpleStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISolidityVisitor<TResult> typedVisitor = visitor as ISolidityVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSimpleStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SimpleStatementContext simpleStatement() {
		SimpleStatementContext _localctx = new SimpleStatementContext(Context, State);
		EnterRule(_localctx, 88, RULE_simpleStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 610;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,66,Context) ) {
			case 1:
				{
				State = 608;
				variableDeclarationStatement();
				}
				break;
			case 2:
				{
				State = 609;
				expressionStatement();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InlineAssemblyStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public AssemblyBlockContext assemblyBlock() {
			return GetRuleContext<AssemblyBlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode StringLiteralFragment() { return GetToken(SolidityParser.StringLiteralFragment, 0); }
		public InlineAssemblyStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_inlineAssemblyStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.EnterInlineAssemblyStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.ExitInlineAssemblyStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISolidityVisitor<TResult> typedVisitor = visitor as ISolidityVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInlineAssemblyStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InlineAssemblyStatementContext inlineAssemblyStatement() {
		InlineAssemblyStatementContext _localctx = new InlineAssemblyStatementContext(Context, State);
		EnterRule(_localctx, 90, RULE_inlineAssemblyStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 612;
			Match(T__45);
			State = 614;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==StringLiteralFragment) {
				{
				State = 613;
				Match(StringLiteralFragment);
				}
			}

			State = 616;
			assemblyBlock();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DoWhileStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public DoWhileStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_doWhileStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.EnterDoWhileStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.ExitDoWhileStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISolidityVisitor<TResult> typedVisitor = visitor as ISolidityVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDoWhileStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DoWhileStatementContext doWhileStatement() {
		DoWhileStatementContext _localctx = new DoWhileStatementContext(Context, State);
		EnterRule(_localctx, 92, RULE_doWhileStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 618;
			Match(T__46);
			State = 619;
			statement();
			State = 620;
			Match(T__44);
			State = 621;
			Match(T__21);
			State = 622;
			expression(0);
			State = 623;
			Match(T__22);
			State = 624;
			Match(T__1);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ContinueStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ContinueKeyword() { return GetToken(SolidityParser.ContinueKeyword, 0); }
		public ContinueStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_continueStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.EnterContinueStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.ExitContinueStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISolidityVisitor<TResult> typedVisitor = visitor as ISolidityVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitContinueStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ContinueStatementContext continueStatement() {
		ContinueStatementContext _localctx = new ContinueStatementContext(Context, State);
		EnterRule(_localctx, 94, RULE_continueStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 626;
			Match(ContinueKeyword);
			State = 627;
			Match(T__1);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BreakStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BreakKeyword() { return GetToken(SolidityParser.BreakKeyword, 0); }
		public BreakStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_breakStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.EnterBreakStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.ExitBreakStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISolidityVisitor<TResult> typedVisitor = visitor as ISolidityVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBreakStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BreakStatementContext breakStatement() {
		BreakStatementContext _localctx = new BreakStatementContext(Context, State);
		EnterRule(_localctx, 96, RULE_breakStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 629;
			Match(BreakKeyword);
			State = 630;
			Match(T__1);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReturnStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ReturnStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_returnStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.EnterReturnStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.ExitReturnStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISolidityVisitor<TResult> typedVisitor = visitor as ISolidityVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReturnStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ReturnStatementContext returnStatement() {
		ReturnStatementContext _localctx = new ReturnStatementContext(Context, State);
		EnterRule(_localctx, 98, RULE_returnStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 632;
			Match(T__47);
			State = 634;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__3) | (1L << T__12) | (1L << T__21) | (1L << T__32) | (1L << T__39) | (1L << T__50) | (1L << T__51) | (1L << T__52) | (1L << T__53) | (1L << T__54) | (1L << T__55) | (1L << T__56) | (1L << T__57) | (1L << T__59) | (1L << T__60) | (1L << T__61) | (1L << T__62))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (T__63 - 64)) | (1L << (Int - 64)) | (1L << (Uint - 64)) | (1L << (Byte - 64)) | (1L << (Fixed - 64)) | (1L << (Ufixed - 64)) | (1L << (BooleanLiteral - 64)) | (1L << (DecimalNumber - 64)) | (1L << (HexNumber - 64)) | (1L << (HexLiteralFragment - 64)) | (1L << (PayableKeyword - 64)) | (1L << (TypeKeyword - 64)) | (1L << (Identifier - 64)) | (1L << (StringLiteralFragment - 64)))) != 0)) {
				{
				State = 633;
				expression(0);
				}
			}

			State = 636;
			Match(T__1);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ThrowStatementContext : ParserRuleContext {
		public ThrowStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_throwStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.EnterThrowStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.ExitThrowStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISolidityVisitor<TResult> typedVisitor = visitor as ISolidityVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitThrowStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ThrowStatementContext throwStatement() {
		ThrowStatementContext _localctx = new ThrowStatementContext(Context, State);
		EnterRule(_localctx, 100, RULE_throwStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 638;
			Match(T__48);
			State = 639;
			Match(T__1);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EmitStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FunctionCallContext functionCall() {
			return GetRuleContext<FunctionCallContext>(0);
		}
		public EmitStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_emitStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.EnterEmitStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.ExitEmitStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISolidityVisitor<TResult> typedVisitor = visitor as ISolidityVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEmitStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EmitStatementContext emitStatement() {
		EmitStatementContext _localctx = new EmitStatementContext(Context, State);
		EnterRule(_localctx, 102, RULE_emitStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 641;
			Match(T__49);
			State = 642;
			functionCall();
			State = 643;
			Match(T__1);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariableDeclarationStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierListContext identifierList() {
			return GetRuleContext<IdentifierListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public VariableDeclarationContext variableDeclaration() {
			return GetRuleContext<VariableDeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public VariableDeclarationListContext variableDeclarationList() {
			return GetRuleContext<VariableDeclarationListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public VariableDeclarationStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variableDeclarationStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.EnterVariableDeclarationStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.ExitVariableDeclarationStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISolidityVisitor<TResult> typedVisitor = visitor as ISolidityVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariableDeclarationStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VariableDeclarationStatementContext variableDeclarationStatement() {
		VariableDeclarationStatementContext _localctx = new VariableDeclarationStatementContext(Context, State);
		EnterRule(_localctx, 104, RULE_variableDeclarationStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 652;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,69,Context) ) {
			case 1:
				{
				State = 645;
				Match(T__50);
				State = 646;
				identifierList();
				}
				break;
			case 2:
				{
				State = 647;
				variableDeclaration();
				}
				break;
			case 3:
				{
				State = 648;
				Match(T__21);
				State = 649;
				variableDeclarationList();
				State = 650;
				Match(T__22);
				}
				break;
			}
			State = 656;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__8) {
				{
				State = 654;
				Match(T__8);
				State = 655;
				expression(0);
				}
			}

			State = 658;
			Match(T__1);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariableDeclarationListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public VariableDeclarationContext[] variableDeclaration() {
			return GetRuleContexts<VariableDeclarationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public VariableDeclarationContext variableDeclaration(int i) {
			return GetRuleContext<VariableDeclarationContext>(i);
		}
		public VariableDeclarationListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variableDeclarationList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.EnterVariableDeclarationList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.ExitVariableDeclarationList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISolidityVisitor<TResult> typedVisitor = visitor as ISolidityVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariableDeclarationList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VariableDeclarationListContext variableDeclarationList() {
		VariableDeclarationListContext _localctx = new VariableDeclarationListContext(Context, State);
		EnterRule(_localctx, 106, RULE_variableDeclarationList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 661;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__12) | (1L << T__28) | (1L << T__35) | (1L << T__39) | (1L << T__50) | (1L << T__51) | (1L << T__52) | (1L << T__53) | (1L << T__54))) != 0) || ((((_la - 93)) & ~0x3f) == 0 && ((1L << (_la - 93)) & ((1L << (Int - 93)) | (1L << (Uint - 93)) | (1L << (Byte - 93)) | (1L << (Fixed - 93)) | (1L << (Ufixed - 93)) | (1L << (Identifier - 93)))) != 0)) {
				{
				State = 660;
				variableDeclaration();
				}
			}

			State = 669;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__14) {
				{
				{
				State = 663;
				Match(T__14);
				State = 665;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__12) | (1L << T__28) | (1L << T__35) | (1L << T__39) | (1L << T__50) | (1L << T__51) | (1L << T__52) | (1L << T__53) | (1L << T__54))) != 0) || ((((_la - 93)) & ~0x3f) == 0 && ((1L << (_la - 93)) & ((1L << (Int - 93)) | (1L << (Uint - 93)) | (1L << (Byte - 93)) | (1L << (Fixed - 93)) | (1L << (Ufixed - 93)) | (1L << (Identifier - 93)))) != 0)) {
					{
					State = 664;
					variableDeclaration();
					}
				}

				}
				}
				State = 671;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IdentifierListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext[] identifier() {
			return GetRuleContexts<IdentifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier(int i) {
			return GetRuleContext<IdentifierContext>(i);
		}
		public IdentifierListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_identifierList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.EnterIdentifierList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.ExitIdentifierList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISolidityVisitor<TResult> typedVisitor = visitor as ISolidityVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIdentifierList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IdentifierListContext identifierList() {
		IdentifierListContext _localctx = new IdentifierListContext(Context, State);
		EnterRule(_localctx, 108, RULE_identifierList);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 672;
			Match(T__21);
			State = 679;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,75,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 674;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__12) | (1L << T__39) | (1L << T__51))) != 0) || _la==Identifier) {
						{
						State = 673;
						identifier();
						}
					}

					State = 676;
					Match(T__14);
					}
					} 
				}
				State = 681;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,75,Context);
			}
			State = 683;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__12) | (1L << T__39) | (1L << T__51))) != 0) || _la==Identifier) {
				{
				State = 682;
				identifier();
				}
			}

			State = 685;
			Match(T__22);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ElementaryTypeNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PayableKeyword() { return GetToken(SolidityParser.PayableKeyword, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Int() { return GetToken(SolidityParser.Int, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Uint() { return GetToken(SolidityParser.Uint, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Byte() { return GetToken(SolidityParser.Byte, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Fixed() { return GetToken(SolidityParser.Fixed, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Ufixed() { return GetToken(SolidityParser.Ufixed, 0); }
		public ElementaryTypeNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_elementaryTypeName; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.EnterElementaryTypeName(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.ExitElementaryTypeName(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISolidityVisitor<TResult> typedVisitor = visitor as ISolidityVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitElementaryTypeName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ElementaryTypeNameContext elementaryTypeName() {
		ElementaryTypeNameContext _localctx = new ElementaryTypeNameContext(Context, State);
		EnterRule(_localctx, 110, RULE_elementaryTypeName);
		try {
			State = 700;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__51:
				EnterOuterAlt(_localctx, 1);
				{
				State = 687;
				Match(T__51);
				State = 689;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,77,Context) ) {
				case 1:
					{
					State = 688;
					Match(PayableKeyword);
					}
					break;
				}
				}
				break;
			case T__52:
				EnterOuterAlt(_localctx, 2);
				{
				State = 691;
				Match(T__52);
				}
				break;
			case T__53:
				EnterOuterAlt(_localctx, 3);
				{
				State = 692;
				Match(T__53);
				}
				break;
			case T__50:
				EnterOuterAlt(_localctx, 4);
				{
				State = 693;
				Match(T__50);
				}
				break;
			case Int:
				EnterOuterAlt(_localctx, 5);
				{
				State = 694;
				Match(Int);
				}
				break;
			case Uint:
				EnterOuterAlt(_localctx, 6);
				{
				State = 695;
				Match(Uint);
				}
				break;
			case T__54:
				EnterOuterAlt(_localctx, 7);
				{
				State = 696;
				Match(T__54);
				}
				break;
			case Byte:
				EnterOuterAlt(_localctx, 8);
				{
				State = 697;
				Match(Byte);
				}
				break;
			case Fixed:
				EnterOuterAlt(_localctx, 9);
				{
				State = 698;
				Match(Fixed);
				}
				break;
			case Ufixed:
				EnterOuterAlt(_localctx, 10);
				{
				State = 699;
				Match(Ufixed);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypeNameContext typeName() {
			return GetRuleContext<TypeNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PayableKeyword() { return GetToken(SolidityParser.PayableKeyword, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PrimaryExpressionContext primaryExpression() {
			return GetRuleContext<PrimaryExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NameValueListContext nameValueList() {
			return GetRuleContext<NameValueListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionCallArgumentsContext functionCallArguments() {
			return GetRuleContext<FunctionCallArgumentsContext>(0);
		}
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.EnterExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.ExitExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISolidityVisitor<TResult> typedVisitor = visitor as ISolidityVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		return expression(0);
	}

	private ExpressionContext expression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ExpressionContext _localctx = new ExpressionContext(Context, _parentState);
		ExpressionContext _prevctx = _localctx;
		int _startState = 112;
		EnterRecursionRule(_localctx, 112, RULE_expression, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 725;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,79,Context) ) {
			case 1:
				{
				State = 703;
				Match(T__57);
				State = 704;
				typeName(0);
				}
				break;
			case 2:
				{
				State = 705;
				Match(PayableKeyword);
				State = 706;
				Match(T__21);
				State = 707;
				expression(0);
				State = 708;
				Match(T__22);
				}
				break;
			case 3:
				{
				State = 710;
				Match(T__21);
				State = 711;
				expression(0);
				State = 712;
				Match(T__22);
				}
				break;
			case 4:
				{
				State = 714;
				_la = TokenStream.LA(1);
				if ( !(_la==T__55 || _la==T__56) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 715;
				expression(19);
				}
				break;
			case 5:
				{
				State = 716;
				_la = TokenStream.LA(1);
				if ( !(_la==T__59 || _la==T__60) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 717;
				expression(18);
				}
				break;
			case 6:
				{
				State = 718;
				_la = TokenStream.LA(1);
				if ( !(_la==T__61 || _la==T__62) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 719;
				expression(17);
				}
				break;
			case 7:
				{
				State = 720;
				Match(T__63);
				State = 721;
				expression(16);
				}
				break;
			case 8:
				{
				State = 722;
				Match(T__3);
				State = 723;
				expression(15);
				}
				break;
			case 9:
				{
				State = 724;
				primaryExpression();
				}
				break;
			}
			Context.Stop = TokenStream.LT(-1);
			State = 802;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,84,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 800;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,83,Context) ) {
					case 1:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 727;
						if (!(Precpred(Context, 14))) throw new FailedPredicateException(this, "Precpred(Context, 14)");
						State = 728;
						Match(T__64);
						State = 729;
						expression(15);
						}
						break;
					case 2:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 730;
						if (!(Precpred(Context, 13))) throw new FailedPredicateException(this, "Precpred(Context, 13)");
						State = 731;
						_la = TokenStream.LA(1);
						if ( !(((((_la - 12)) & ~0x3f) == 0 && ((1L << (_la - 12)) & ((1L << (T__11 - 12)) | (1L << (T__65 - 12)) | (1L << (T__66 - 12)))) != 0)) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 732;
						expression(14);
						}
						break;
					case 3:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 733;
						if (!(Precpred(Context, 12))) throw new FailedPredicateException(this, "Precpred(Context, 12)");
						State = 734;
						_la = TokenStream.LA(1);
						if ( !(_la==T__59 || _la==T__60) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 735;
						expression(13);
						}
						break;
					case 4:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 736;
						if (!(Precpred(Context, 11))) throw new FailedPredicateException(this, "Precpred(Context, 11)");
						State = 737;
						_la = TokenStream.LA(1);
						if ( !(_la==T__67 || _la==T__68) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 738;
						expression(12);
						}
						break;
					case 5:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 739;
						if (!(Precpred(Context, 10))) throw new FailedPredicateException(this, "Precpred(Context, 10)");
						State = 740;
						Match(T__69);
						State = 741;
						expression(11);
						}
						break;
					case 6:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 742;
						if (!(Precpred(Context, 9))) throw new FailedPredicateException(this, "Precpred(Context, 9)");
						State = 743;
						Match(T__2);
						State = 744;
						expression(10);
						}
						break;
					case 7:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 745;
						if (!(Precpred(Context, 8))) throw new FailedPredicateException(this, "Precpred(Context, 8)");
						State = 746;
						Match(T__70);
						State = 747;
						expression(9);
						}
						break;
					case 8:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 748;
						if (!(Precpred(Context, 7))) throw new FailedPredicateException(this, "Precpred(Context, 7)");
						State = 749;
						_la = TokenStream.LA(1);
						if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__4) | (1L << T__5) | (1L << T__6) | (1L << T__7))) != 0)) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 750;
						expression(8);
						}
						break;
					case 9:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 751;
						if (!(Precpred(Context, 6))) throw new FailedPredicateException(this, "Precpred(Context, 6)");
						State = 752;
						_la = TokenStream.LA(1);
						if ( !(_la==T__71 || _la==T__72) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 753;
						expression(7);
						}
						break;
					case 10:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 754;
						if (!(Precpred(Context, 5))) throw new FailedPredicateException(this, "Precpred(Context, 5)");
						State = 755;
						Match(T__73);
						State = 756;
						expression(6);
						}
						break;
					case 11:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 757;
						if (!(Precpred(Context, 4))) throw new FailedPredicateException(this, "Precpred(Context, 4)");
						State = 758;
						Match(T__74);
						State = 759;
						expression(5);
						}
						break;
					case 12:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 760;
						if (!(Precpred(Context, 3))) throw new FailedPredicateException(this, "Precpred(Context, 3)");
						State = 761;
						Match(T__75);
						State = 762;
						expression(0);
						State = 763;
						Match(T__58);
						State = 764;
						expression(4);
						}
						break;
					case 13:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 766;
						if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
						State = 767;
						_la = TokenStream.LA(1);
						if ( !(_la==T__8 || ((((_la - 77)) & ~0x3f) == 0 && ((1L << (_la - 77)) & ((1L << (T__76 - 77)) | (1L << (T__77 - 77)) | (1L << (T__78 - 77)) | (1L << (T__79 - 77)) | (1L << (T__80 - 77)) | (1L << (T__81 - 77)) | (1L << (T__82 - 77)) | (1L << (T__83 - 77)) | (1L << (T__84 - 77)) | (1L << (T__85 - 77)))) != 0)) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 768;
						expression(3);
						}
						break;
					case 14:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 769;
						if (!(Precpred(Context, 28))) throw new FailedPredicateException(this, "Precpred(Context, 28)");
						State = 770;
						_la = TokenStream.LA(1);
						if ( !(_la==T__55 || _la==T__56) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						}
						break;
					case 15:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 771;
						if (!(Precpred(Context, 26))) throw new FailedPredicateException(this, "Precpred(Context, 26)");
						State = 772;
						Match(T__32);
						State = 774;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__3) | (1L << T__12) | (1L << T__21) | (1L << T__32) | (1L << T__39) | (1L << T__50) | (1L << T__51) | (1L << T__52) | (1L << T__53) | (1L << T__54) | (1L << T__55) | (1L << T__56) | (1L << T__57) | (1L << T__59) | (1L << T__60) | (1L << T__61) | (1L << T__62))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (T__63 - 64)) | (1L << (Int - 64)) | (1L << (Uint - 64)) | (1L << (Byte - 64)) | (1L << (Fixed - 64)) | (1L << (Ufixed - 64)) | (1L << (BooleanLiteral - 64)) | (1L << (DecimalNumber - 64)) | (1L << (HexNumber - 64)) | (1L << (HexLiteralFragment - 64)) | (1L << (PayableKeyword - 64)) | (1L << (TypeKeyword - 64)) | (1L << (Identifier - 64)) | (1L << (StringLiteralFragment - 64)))) != 0)) {
							{
							State = 773;
							expression(0);
							}
						}

						State = 776;
						Match(T__33);
						}
						break;
					case 16:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 777;
						if (!(Precpred(Context, 25))) throw new FailedPredicateException(this, "Precpred(Context, 25)");
						State = 778;
						Match(T__32);
						State = 780;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__3) | (1L << T__12) | (1L << T__21) | (1L << T__32) | (1L << T__39) | (1L << T__50) | (1L << T__51) | (1L << T__52) | (1L << T__53) | (1L << T__54) | (1L << T__55) | (1L << T__56) | (1L << T__57) | (1L << T__59) | (1L << T__60) | (1L << T__61) | (1L << T__62))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (T__63 - 64)) | (1L << (Int - 64)) | (1L << (Uint - 64)) | (1L << (Byte - 64)) | (1L << (Fixed - 64)) | (1L << (Ufixed - 64)) | (1L << (BooleanLiteral - 64)) | (1L << (DecimalNumber - 64)) | (1L << (HexNumber - 64)) | (1L << (HexLiteralFragment - 64)) | (1L << (PayableKeyword - 64)) | (1L << (TypeKeyword - 64)) | (1L << (Identifier - 64)) | (1L << (StringLiteralFragment - 64)))) != 0)) {
							{
							State = 779;
							expression(0);
							}
						}

						State = 782;
						Match(T__58);
						State = 784;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__3) | (1L << T__12) | (1L << T__21) | (1L << T__32) | (1L << T__39) | (1L << T__50) | (1L << T__51) | (1L << T__52) | (1L << T__53) | (1L << T__54) | (1L << T__55) | (1L << T__56) | (1L << T__57) | (1L << T__59) | (1L << T__60) | (1L << T__61) | (1L << T__62))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (T__63 - 64)) | (1L << (Int - 64)) | (1L << (Uint - 64)) | (1L << (Byte - 64)) | (1L << (Fixed - 64)) | (1L << (Ufixed - 64)) | (1L << (BooleanLiteral - 64)) | (1L << (DecimalNumber - 64)) | (1L << (HexNumber - 64)) | (1L << (HexLiteralFragment - 64)) | (1L << (PayableKeyword - 64)) | (1L << (TypeKeyword - 64)) | (1L << (Identifier - 64)) | (1L << (StringLiteralFragment - 64)))) != 0)) {
							{
							State = 783;
							expression(0);
							}
						}

						State = 786;
						Match(T__33);
						}
						break;
					case 17:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 787;
						if (!(Precpred(Context, 24))) throw new FailedPredicateException(this, "Precpred(Context, 24)");
						State = 788;
						Match(T__34);
						State = 789;
						identifier();
						}
						break;
					case 18:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 790;
						if (!(Precpred(Context, 23))) throw new FailedPredicateException(this, "Precpred(Context, 23)");
						State = 791;
						Match(T__13);
						State = 792;
						nameValueList();
						State = 793;
						Match(T__15);
						}
						break;
					case 19:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 795;
						if (!(Precpred(Context, 22))) throw new FailedPredicateException(this, "Precpred(Context, 22)");
						State = 796;
						Match(T__21);
						State = 797;
						functionCallArguments();
						State = 798;
						Match(T__22);
						}
						break;
					}
					} 
				}
				State = 804;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,84,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class PrimaryExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BooleanLiteral() { return GetToken(SolidityParser.BooleanLiteral, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NumberLiteralContext numberLiteral() {
			return GetRuleContext<NumberLiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public HexLiteralContext hexLiteral() {
			return GetRuleContext<HexLiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StringLiteralContext stringLiteral() {
			return GetRuleContext<StringLiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TypeKeyword() { return GetToken(SolidityParser.TypeKeyword, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TupleExpressionContext tupleExpression() {
			return GetRuleContext<TupleExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeNameExpressionContext typeNameExpression() {
			return GetRuleContext<TypeNameExpressionContext>(0);
		}
		public PrimaryExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_primaryExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.EnterPrimaryExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.ExitPrimaryExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISolidityVisitor<TResult> typedVisitor = visitor as ISolidityVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrimaryExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PrimaryExpressionContext primaryExpression() {
		PrimaryExpressionContext _localctx = new PrimaryExpressionContext(Context, State);
		EnterRule(_localctx, 114, RULE_primaryExpression);
		try {
			State = 821;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,87,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 805;
				Match(BooleanLiteral);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 806;
				numberLiteral();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 807;
				hexLiteral();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 808;
				stringLiteral();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 809;
				identifier();
				State = 812;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,85,Context) ) {
				case 1:
					{
					State = 810;
					Match(T__32);
					State = 811;
					Match(T__33);
					}
					break;
				}
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 814;
				Match(TypeKeyword);
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 815;
				tupleExpression();
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 816;
				typeNameExpression();
				State = 819;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,86,Context) ) {
				case 1:
					{
					State = 817;
					Match(T__32);
					State = 818;
					Match(T__33);
					}
					break;
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ExpressionListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expressionList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.EnterExpressionList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.ExitExpressionList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISolidityVisitor<TResult> typedVisitor = visitor as ISolidityVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpressionList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionListContext expressionList() {
		ExpressionListContext _localctx = new ExpressionListContext(Context, State);
		EnterRule(_localctx, 116, RULE_expressionList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 823;
			expression(0);
			State = 828;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__14) {
				{
				{
				State = 824;
				Match(T__14);
				State = 825;
				expression(0);
				}
				}
				State = 830;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NameValueListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public NameValueContext[] nameValue() {
			return GetRuleContexts<NameValueContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public NameValueContext nameValue(int i) {
			return GetRuleContext<NameValueContext>(i);
		}
		public NameValueListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_nameValueList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.EnterNameValueList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.ExitNameValueList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISolidityVisitor<TResult> typedVisitor = visitor as ISolidityVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNameValueList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NameValueListContext nameValueList() {
		NameValueListContext _localctx = new NameValueListContext(Context, State);
		EnterRule(_localctx, 118, RULE_nameValueList);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 831;
			nameValue();
			State = 836;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,89,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 832;
					Match(T__14);
					State = 833;
					nameValue();
					}
					} 
				}
				State = 838;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,89,Context);
			}
			State = 840;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__14) {
				{
				State = 839;
				Match(T__14);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NameValueContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public NameValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_nameValue; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.EnterNameValue(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.ExitNameValue(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISolidityVisitor<TResult> typedVisitor = visitor as ISolidityVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNameValue(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NameValueContext nameValue() {
		NameValueContext _localctx = new NameValueContext(Context, State);
		EnterRule(_localctx, 120, RULE_nameValue);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 842;
			identifier();
			State = 843;
			Match(T__58);
			State = 844;
			expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionCallArgumentsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public NameValueListContext nameValueList() {
			return GetRuleContext<NameValueListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionListContext expressionList() {
			return GetRuleContext<ExpressionListContext>(0);
		}
		public FunctionCallArgumentsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionCallArguments; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.EnterFunctionCallArguments(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.ExitFunctionCallArguments(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISolidityVisitor<TResult> typedVisitor = visitor as ISolidityVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionCallArguments(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionCallArgumentsContext functionCallArguments() {
		FunctionCallArgumentsContext _localctx = new FunctionCallArgumentsContext(Context, State);
		EnterRule(_localctx, 122, RULE_functionCallArguments);
		int _la;
		try {
			State = 854;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__13:
				EnterOuterAlt(_localctx, 1);
				{
				State = 846;
				Match(T__13);
				State = 848;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__12) | (1L << T__39) | (1L << T__51))) != 0) || _la==Identifier) {
					{
					State = 847;
					nameValueList();
					}
				}

				State = 850;
				Match(T__15);
				}
				break;
			case T__3:
			case T__12:
			case T__21:
			case T__22:
			case T__32:
			case T__39:
			case T__50:
			case T__51:
			case T__52:
			case T__53:
			case T__54:
			case T__55:
			case T__56:
			case T__57:
			case T__59:
			case T__60:
			case T__61:
			case T__62:
			case T__63:
			case Int:
			case Uint:
			case Byte:
			case Fixed:
			case Ufixed:
			case BooleanLiteral:
			case DecimalNumber:
			case HexNumber:
			case HexLiteralFragment:
			case PayableKeyword:
			case TypeKeyword:
			case Identifier:
			case StringLiteralFragment:
				EnterOuterAlt(_localctx, 2);
				{
				State = 852;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__3) | (1L << T__12) | (1L << T__21) | (1L << T__32) | (1L << T__39) | (1L << T__50) | (1L << T__51) | (1L << T__52) | (1L << T__53) | (1L << T__54) | (1L << T__55) | (1L << T__56) | (1L << T__57) | (1L << T__59) | (1L << T__60) | (1L << T__61) | (1L << T__62))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (T__63 - 64)) | (1L << (Int - 64)) | (1L << (Uint - 64)) | (1L << (Byte - 64)) | (1L << (Fixed - 64)) | (1L << (Ufixed - 64)) | (1L << (BooleanLiteral - 64)) | (1L << (DecimalNumber - 64)) | (1L << (HexNumber - 64)) | (1L << (HexLiteralFragment - 64)) | (1L << (PayableKeyword - 64)) | (1L << (TypeKeyword - 64)) | (1L << (Identifier - 64)) | (1L << (StringLiteralFragment - 64)))) != 0)) {
					{
					State = 851;
					expressionList();
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionCallContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionCallArgumentsContext functionCallArguments() {
			return GetRuleContext<FunctionCallArgumentsContext>(0);
		}
		public FunctionCallContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionCall; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.EnterFunctionCall(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.ExitFunctionCall(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISolidityVisitor<TResult> typedVisitor = visitor as ISolidityVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionCall(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionCallContext functionCall() {
		FunctionCallContext _localctx = new FunctionCallContext(Context, State);
		EnterRule(_localctx, 124, RULE_functionCall);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 856;
			expression(0);
			State = 857;
			Match(T__21);
			State = 858;
			functionCallArguments();
			State = 859;
			Match(T__22);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TupleExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public TupleExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tupleExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.EnterTupleExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.ExitTupleExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISolidityVisitor<TResult> typedVisitor = visitor as ISolidityVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTupleExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TupleExpressionContext tupleExpression() {
		TupleExpressionContext _localctx = new TupleExpressionContext(Context, State);
		EnterRule(_localctx, 126, RULE_tupleExpression);
		int _la;
		try {
			State = 887;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__21:
				EnterOuterAlt(_localctx, 1);
				{
				State = 861;
				Match(T__21);
				{
				State = 863;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__3) | (1L << T__12) | (1L << T__21) | (1L << T__32) | (1L << T__39) | (1L << T__50) | (1L << T__51) | (1L << T__52) | (1L << T__53) | (1L << T__54) | (1L << T__55) | (1L << T__56) | (1L << T__57) | (1L << T__59) | (1L << T__60) | (1L << T__61) | (1L << T__62))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (T__63 - 64)) | (1L << (Int - 64)) | (1L << (Uint - 64)) | (1L << (Byte - 64)) | (1L << (Fixed - 64)) | (1L << (Ufixed - 64)) | (1L << (BooleanLiteral - 64)) | (1L << (DecimalNumber - 64)) | (1L << (HexNumber - 64)) | (1L << (HexLiteralFragment - 64)) | (1L << (PayableKeyword - 64)) | (1L << (TypeKeyword - 64)) | (1L << (Identifier - 64)) | (1L << (StringLiteralFragment - 64)))) != 0)) {
					{
					State = 862;
					expression(0);
					}
				}

				State = 871;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==T__14) {
					{
					{
					State = 865;
					Match(T__14);
					State = 867;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__3) | (1L << T__12) | (1L << T__21) | (1L << T__32) | (1L << T__39) | (1L << T__50) | (1L << T__51) | (1L << T__52) | (1L << T__53) | (1L << T__54) | (1L << T__55) | (1L << T__56) | (1L << T__57) | (1L << T__59) | (1L << T__60) | (1L << T__61) | (1L << T__62))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (T__63 - 64)) | (1L << (Int - 64)) | (1L << (Uint - 64)) | (1L << (Byte - 64)) | (1L << (Fixed - 64)) | (1L << (Ufixed - 64)) | (1L << (BooleanLiteral - 64)) | (1L << (DecimalNumber - 64)) | (1L << (HexNumber - 64)) | (1L << (HexLiteralFragment - 64)) | (1L << (PayableKeyword - 64)) | (1L << (TypeKeyword - 64)) | (1L << (Identifier - 64)) | (1L << (StringLiteralFragment - 64)))) != 0)) {
						{
						State = 866;
						expression(0);
						}
					}

					}
					}
					State = 873;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				State = 874;
				Match(T__22);
				}
				break;
			case T__32:
				EnterOuterAlt(_localctx, 2);
				{
				State = 875;
				Match(T__32);
				State = 884;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__3) | (1L << T__12) | (1L << T__21) | (1L << T__32) | (1L << T__39) | (1L << T__50) | (1L << T__51) | (1L << T__52) | (1L << T__53) | (1L << T__54) | (1L << T__55) | (1L << T__56) | (1L << T__57) | (1L << T__59) | (1L << T__60) | (1L << T__61) | (1L << T__62))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (T__63 - 64)) | (1L << (Int - 64)) | (1L << (Uint - 64)) | (1L << (Byte - 64)) | (1L << (Fixed - 64)) | (1L << (Ufixed - 64)) | (1L << (BooleanLiteral - 64)) | (1L << (DecimalNumber - 64)) | (1L << (HexNumber - 64)) | (1L << (HexLiteralFragment - 64)) | (1L << (PayableKeyword - 64)) | (1L << (TypeKeyword - 64)) | (1L << (Identifier - 64)) | (1L << (StringLiteralFragment - 64)))) != 0)) {
					{
					State = 876;
					expression(0);
					State = 881;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (_la==T__14) {
						{
						{
						State = 877;
						Match(T__14);
						State = 878;
						expression(0);
						}
						}
						State = 883;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					}
				}

				State = 886;
				Match(T__33);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeNameExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ElementaryTypeNameContext elementaryTypeName() {
			return GetRuleContext<ElementaryTypeNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public UserDefinedTypeNameContext userDefinedTypeName() {
			return GetRuleContext<UserDefinedTypeNameContext>(0);
		}
		public TypeNameExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeNameExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.EnterTypeNameExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.ExitTypeNameExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISolidityVisitor<TResult> typedVisitor = visitor as ISolidityVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeNameExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeNameExpressionContext typeNameExpression() {
		TypeNameExpressionContext _localctx = new TypeNameExpressionContext(Context, State);
		EnterRule(_localctx, 128, RULE_typeNameExpression);
		try {
			State = 891;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,100,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 889;
				elementaryTypeName();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 890;
				userDefinedTypeName();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssemblyItemContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AssemblyBlockContext assemblyBlock() {
			return GetRuleContext<AssemblyBlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AssemblyExpressionContext assemblyExpression() {
			return GetRuleContext<AssemblyExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AssemblyLocalDefinitionContext assemblyLocalDefinition() {
			return GetRuleContext<AssemblyLocalDefinitionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AssemblyAssignmentContext assemblyAssignment() {
			return GetRuleContext<AssemblyAssignmentContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AssemblyStackAssignmentContext assemblyStackAssignment() {
			return GetRuleContext<AssemblyStackAssignmentContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LabelDefinitionContext labelDefinition() {
			return GetRuleContext<LabelDefinitionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AssemblySwitchContext assemblySwitch() {
			return GetRuleContext<AssemblySwitchContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AssemblyFunctionDefinitionContext assemblyFunctionDefinition() {
			return GetRuleContext<AssemblyFunctionDefinitionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AssemblyForContext assemblyFor() {
			return GetRuleContext<AssemblyForContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AssemblyIfContext assemblyIf() {
			return GetRuleContext<AssemblyIfContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BreakKeyword() { return GetToken(SolidityParser.BreakKeyword, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ContinueKeyword() { return GetToken(SolidityParser.ContinueKeyword, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LeaveKeyword() { return GetToken(SolidityParser.LeaveKeyword, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SubAssemblyContext subAssembly() {
			return GetRuleContext<SubAssemblyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NumberLiteralContext numberLiteral() {
			return GetRuleContext<NumberLiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StringLiteralContext stringLiteral() {
			return GetRuleContext<StringLiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public HexLiteralContext hexLiteral() {
			return GetRuleContext<HexLiteralContext>(0);
		}
		public AssemblyItemContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assemblyItem; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.EnterAssemblyItem(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.ExitAssemblyItem(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISolidityVisitor<TResult> typedVisitor = visitor as ISolidityVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssemblyItem(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AssemblyItemContext assemblyItem() {
		AssemblyItemContext _localctx = new AssemblyItemContext(Context, State);
		EnterRule(_localctx, 130, RULE_assemblyItem);
		try {
			State = 911;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,101,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 893;
				identifier();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 894;
				assemblyBlock();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 895;
				assemblyExpression();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 896;
				assemblyLocalDefinition();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 897;
				assemblyAssignment();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 898;
				assemblyStackAssignment();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 899;
				labelDefinition();
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 900;
				assemblySwitch();
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 901;
				assemblyFunctionDefinition();
				}
				break;
			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 902;
				assemblyFor();
				}
				break;
			case 11:
				EnterOuterAlt(_localctx, 11);
				{
				State = 903;
				assemblyIf();
				}
				break;
			case 12:
				EnterOuterAlt(_localctx, 12);
				{
				State = 904;
				Match(BreakKeyword);
				}
				break;
			case 13:
				EnterOuterAlt(_localctx, 13);
				{
				State = 905;
				Match(ContinueKeyword);
				}
				break;
			case 14:
				EnterOuterAlt(_localctx, 14);
				{
				State = 906;
				Match(LeaveKeyword);
				}
				break;
			case 15:
				EnterOuterAlt(_localctx, 15);
				{
				State = 907;
				subAssembly();
				}
				break;
			case 16:
				EnterOuterAlt(_localctx, 16);
				{
				State = 908;
				numberLiteral();
				}
				break;
			case 17:
				EnterOuterAlt(_localctx, 17);
				{
				State = 909;
				stringLiteral();
				}
				break;
			case 18:
				EnterOuterAlt(_localctx, 18);
				{
				State = 910;
				hexLiteral();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssemblyBlockContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public AssemblyItemContext[] assemblyItem() {
			return GetRuleContexts<AssemblyItemContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AssemblyItemContext assemblyItem(int i) {
			return GetRuleContext<AssemblyItemContext>(i);
		}
		public AssemblyBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assemblyBlock; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.EnterAssemblyBlock(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.ExitAssemblyBlock(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISolidityVisitor<TResult> typedVisitor = visitor as ISolidityVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssemblyBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AssemblyBlockContext assemblyBlock() {
		AssemblyBlockContext _localctx = new AssemblyBlockContext(Context, State);
		EnterRule(_localctx, 132, RULE_assemblyBlock);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 913;
			Match(T__13);
			State = 917;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__12) | (1L << T__13) | (1L << T__25) | (1L << T__28) | (1L << T__39) | (1L << T__40) | (1L << T__45) | (1L << T__47) | (1L << T__51) | (1L << T__54))) != 0) || ((((_la - 87)) & ~0x3f) == 0 && ((1L << (_la - 87)) & ((1L << (T__86 - 87)) | (1L << (T__88 - 87)) | (1L << (T__89 - 87)) | (1L << (BooleanLiteral - 87)) | (1L << (DecimalNumber - 87)) | (1L << (HexNumber - 87)) | (1L << (HexLiteralFragment - 87)) | (1L << (BreakKeyword - 87)) | (1L << (ContinueKeyword - 87)) | (1L << (LeaveKeyword - 87)) | (1L << (Identifier - 87)) | (1L << (StringLiteralFragment - 87)))) != 0)) {
				{
				{
				State = 914;
				assemblyItem();
				}
				}
				State = 919;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 920;
			Match(T__15);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssemblyExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public AssemblyCallContext assemblyCall() {
			return GetRuleContext<AssemblyCallContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AssemblyLiteralContext assemblyLiteral() {
			return GetRuleContext<AssemblyLiteralContext>(0);
		}
		public AssemblyExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assemblyExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.EnterAssemblyExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.ExitAssemblyExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISolidityVisitor<TResult> typedVisitor = visitor as ISolidityVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssemblyExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AssemblyExpressionContext assemblyExpression() {
		AssemblyExpressionContext _localctx = new AssemblyExpressionContext(Context, State);
		EnterRule(_localctx, 134, RULE_assemblyExpression);
		try {
			State = 924;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__12:
			case T__39:
			case T__47:
			case T__51:
			case T__54:
			case Identifier:
				EnterOuterAlt(_localctx, 1);
				{
				State = 922;
				assemblyCall();
				}
				break;
			case BooleanLiteral:
			case DecimalNumber:
			case HexNumber:
			case HexLiteralFragment:
			case StringLiteralFragment:
				EnterOuterAlt(_localctx, 2);
				{
				State = 923;
				assemblyLiteral();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssemblyCallContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AssemblyExpressionContext[] assemblyExpression() {
			return GetRuleContexts<AssemblyExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AssemblyExpressionContext assemblyExpression(int i) {
			return GetRuleContext<AssemblyExpressionContext>(i);
		}
		public AssemblyCallContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assemblyCall; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.EnterAssemblyCall(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.ExitAssemblyCall(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISolidityVisitor<TResult> typedVisitor = visitor as ISolidityVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssemblyCall(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AssemblyCallContext assemblyCall() {
		AssemblyCallContext _localctx = new AssemblyCallContext(Context, State);
		EnterRule(_localctx, 136, RULE_assemblyCall);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 930;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,104,Context) ) {
			case 1:
				{
				State = 926;
				Match(T__47);
				}
				break;
			case 2:
				{
				State = 927;
				Match(T__51);
				}
				break;
			case 3:
				{
				State = 928;
				Match(T__54);
				}
				break;
			case 4:
				{
				State = 929;
				identifier();
				}
				break;
			}
			State = 944;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__21) {
				{
				State = 932;
				Match(T__21);
				State = 934;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__12) | (1L << T__39) | (1L << T__47) | (1L << T__51) | (1L << T__54))) != 0) || ((((_la - 98)) & ~0x3f) == 0 && ((1L << (_la - 98)) & ((1L << (BooleanLiteral - 98)) | (1L << (DecimalNumber - 98)) | (1L << (HexNumber - 98)) | (1L << (HexLiteralFragment - 98)) | (1L << (Identifier - 98)) | (1L << (StringLiteralFragment - 98)))) != 0)) {
					{
					State = 933;
					assemblyExpression();
					}
				}

				State = 940;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==T__14) {
					{
					{
					State = 936;
					Match(T__14);
					State = 937;
					assemblyExpression();
					}
					}
					State = 942;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 943;
				Match(T__22);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssemblyLocalDefinitionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public AssemblyIdentifierListContext assemblyIdentifierList() {
			return GetRuleContext<AssemblyIdentifierListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AssemblyExpressionContext assemblyExpression() {
			return GetRuleContext<AssemblyExpressionContext>(0);
		}
		public AssemblyLocalDefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assemblyLocalDefinition; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.EnterAssemblyLocalDefinition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.ExitAssemblyLocalDefinition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISolidityVisitor<TResult> typedVisitor = visitor as ISolidityVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssemblyLocalDefinition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AssemblyLocalDefinitionContext assemblyLocalDefinition() {
		AssemblyLocalDefinitionContext _localctx = new AssemblyLocalDefinitionContext(Context, State);
		EnterRule(_localctx, 138, RULE_assemblyLocalDefinition);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 946;
			Match(T__86);
			State = 947;
			assemblyIdentifierList();
			State = 950;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__87) {
				{
				State = 948;
				Match(T__87);
				State = 949;
				assemblyExpression();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssemblyAssignmentContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public AssemblyIdentifierListContext assemblyIdentifierList() {
			return GetRuleContext<AssemblyIdentifierListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AssemblyExpressionContext assemblyExpression() {
			return GetRuleContext<AssemblyExpressionContext>(0);
		}
		public AssemblyAssignmentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assemblyAssignment; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.EnterAssemblyAssignment(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.ExitAssemblyAssignment(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISolidityVisitor<TResult> typedVisitor = visitor as ISolidityVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssemblyAssignment(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AssemblyAssignmentContext assemblyAssignment() {
		AssemblyAssignmentContext _localctx = new AssemblyAssignmentContext(Context, State);
		EnterRule(_localctx, 140, RULE_assemblyAssignment);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 952;
			assemblyIdentifierList();
			State = 953;
			Match(T__87);
			State = 954;
			assemblyExpression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssemblyIdentifierListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext[] identifier() {
			return GetRuleContexts<IdentifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier(int i) {
			return GetRuleContext<IdentifierContext>(i);
		}
		public AssemblyIdentifierListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assemblyIdentifierList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.EnterAssemblyIdentifierList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.ExitAssemblyIdentifierList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISolidityVisitor<TResult> typedVisitor = visitor as ISolidityVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssemblyIdentifierList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AssemblyIdentifierListContext assemblyIdentifierList() {
		AssemblyIdentifierListContext _localctx = new AssemblyIdentifierListContext(Context, State);
		EnterRule(_localctx, 142, RULE_assemblyIdentifierList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 956;
			identifier();
			State = 961;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__14) {
				{
				{
				State = 957;
				Match(T__14);
				State = 958;
				identifier();
				}
				}
				State = 963;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssemblyStackAssignmentContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public AssemblyStackAssignmentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assemblyStackAssignment; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.EnterAssemblyStackAssignment(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.ExitAssemblyStackAssignment(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISolidityVisitor<TResult> typedVisitor = visitor as ISolidityVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssemblyStackAssignment(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AssemblyStackAssignmentContext assemblyStackAssignment() {
		AssemblyStackAssignmentContext _localctx = new AssemblyStackAssignmentContext(Context, State);
		EnterRule(_localctx, 144, RULE_assemblyStackAssignment);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 964;
			Match(T__88);
			State = 965;
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LabelDefinitionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public LabelDefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_labelDefinition; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.EnterLabelDefinition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.ExitLabelDefinition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISolidityVisitor<TResult> typedVisitor = visitor as ISolidityVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLabelDefinition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LabelDefinitionContext labelDefinition() {
		LabelDefinitionContext _localctx = new LabelDefinitionContext(Context, State);
		EnterRule(_localctx, 146, RULE_labelDefinition);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 967;
			identifier();
			State = 968;
			Match(T__58);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssemblySwitchContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public AssemblyExpressionContext assemblyExpression() {
			return GetRuleContext<AssemblyExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AssemblyCaseContext[] assemblyCase() {
			return GetRuleContexts<AssemblyCaseContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AssemblyCaseContext assemblyCase(int i) {
			return GetRuleContext<AssemblyCaseContext>(i);
		}
		public AssemblySwitchContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assemblySwitch; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.EnterAssemblySwitch(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.ExitAssemblySwitch(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISolidityVisitor<TResult> typedVisitor = visitor as ISolidityVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssemblySwitch(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AssemblySwitchContext assemblySwitch() {
		AssemblySwitchContext _localctx = new AssemblySwitchContext(Context, State);
		EnterRule(_localctx, 148, RULE_assemblySwitch);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 970;
			Match(T__89);
			State = 971;
			assemblyExpression();
			State = 975;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__90 || _la==T__91) {
				{
				{
				State = 972;
				assemblyCase();
				}
				}
				State = 977;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssemblyCaseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public AssemblyLiteralContext assemblyLiteral() {
			return GetRuleContext<AssemblyLiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AssemblyBlockContext assemblyBlock() {
			return GetRuleContext<AssemblyBlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AssemblyTypeContext assemblyType() {
			return GetRuleContext<AssemblyTypeContext>(0);
		}
		public AssemblyCaseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assemblyCase; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.EnterAssemblyCase(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.ExitAssemblyCase(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISolidityVisitor<TResult> typedVisitor = visitor as ISolidityVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssemblyCase(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AssemblyCaseContext assemblyCase() {
		AssemblyCaseContext _localctx = new AssemblyCaseContext(Context, State);
		EnterRule(_localctx, 150, RULE_assemblyCase);
		int _la;
		try {
			State = 987;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__90:
				EnterOuterAlt(_localctx, 1);
				{
				State = 978;
				Match(T__90);
				State = 979;
				assemblyLiteral();
				State = 981;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__58) {
					{
					State = 980;
					assemblyType();
					}
				}

				State = 983;
				assemblyBlock();
				}
				break;
			case T__91:
				EnterOuterAlt(_localctx, 2);
				{
				State = 985;
				Match(T__91);
				State = 986;
				assemblyBlock();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssemblyFunctionDefinitionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AssemblyBlockContext assemblyBlock() {
			return GetRuleContext<AssemblyBlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AssemblyTypedVariableListContext assemblyTypedVariableList() {
			return GetRuleContext<AssemblyTypedVariableListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AssemblyFunctionReturnsContext assemblyFunctionReturns() {
			return GetRuleContext<AssemblyFunctionReturnsContext>(0);
		}
		public AssemblyFunctionDefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assemblyFunctionDefinition; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.EnterAssemblyFunctionDefinition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.ExitAssemblyFunctionDefinition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISolidityVisitor<TResult> typedVisitor = visitor as ISolidityVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssemblyFunctionDefinition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AssemblyFunctionDefinitionContext assemblyFunctionDefinition() {
		AssemblyFunctionDefinitionContext _localctx = new AssemblyFunctionDefinitionContext(Context, State);
		EnterRule(_localctx, 152, RULE_assemblyFunctionDefinition);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 989;
			Match(T__28);
			State = 990;
			identifier();
			State = 991;
			Match(T__21);
			State = 993;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__12) | (1L << T__39) | (1L << T__51))) != 0) || _la==Identifier) {
				{
				State = 992;
				assemblyTypedVariableList();
				}
			}

			State = 995;
			Match(T__22);
			State = 997;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__60) {
				{
				State = 996;
				assemblyFunctionReturns();
				}
			}

			State = 999;
			assemblyBlock();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssemblyFunctionReturnsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public AssemblyTypedVariableListContext assemblyTypedVariableList() {
			return GetRuleContext<AssemblyTypedVariableListContext>(0);
		}
		public AssemblyFunctionReturnsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assemblyFunctionReturns; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.EnterAssemblyFunctionReturns(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.ExitAssemblyFunctionReturns(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISolidityVisitor<TResult> typedVisitor = visitor as ISolidityVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssemblyFunctionReturns(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AssemblyFunctionReturnsContext assemblyFunctionReturns() {
		AssemblyFunctionReturnsContext _localctx = new AssemblyFunctionReturnsContext(Context, State);
		EnterRule(_localctx, 154, RULE_assemblyFunctionReturns);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 1001;
			Match(T__60);
			State = 1002;
			Match(T__5);
			State = 1003;
			assemblyTypedVariableList();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssemblyForContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public AssemblyBlockContext[] assemblyBlock() {
			return GetRuleContexts<AssemblyBlockContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AssemblyBlockContext assemblyBlock(int i) {
			return GetRuleContext<AssemblyBlockContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AssemblyExpressionContext assemblyExpression() {
			return GetRuleContext<AssemblyExpressionContext>(0);
		}
		public AssemblyForContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assemblyFor; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.EnterAssemblyFor(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.ExitAssemblyFor(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISolidityVisitor<TResult> typedVisitor = visitor as ISolidityVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssemblyFor(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AssemblyForContext assemblyFor() {
		AssemblyForContext _localctx = new AssemblyForContext(Context, State);
		EnterRule(_localctx, 156, RULE_assemblyFor);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1005;
			Match(T__25);
			State = 1006;
			assemblyBlock();
			State = 1007;
			assemblyExpression();
			State = 1008;
			assemblyBlock();
			State = 1009;
			assemblyBlock();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssemblyIfContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public AssemblyExpressionContext assemblyExpression() {
			return GetRuleContext<AssemblyExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AssemblyBlockContext assemblyBlock() {
			return GetRuleContext<AssemblyBlockContext>(0);
		}
		public AssemblyIfContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assemblyIf; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.EnterAssemblyIf(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.ExitAssemblyIf(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISolidityVisitor<TResult> typedVisitor = visitor as ISolidityVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssemblyIf(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AssemblyIfContext assemblyIf() {
		AssemblyIfContext _localctx = new AssemblyIfContext(Context, State);
		EnterRule(_localctx, 158, RULE_assemblyIf);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1011;
			Match(T__40);
			State = 1012;
			assemblyExpression();
			State = 1013;
			assemblyBlock();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssemblyLiteralContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StringLiteralContext stringLiteral() {
			return GetRuleContext<StringLiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DecimalNumber() { return GetToken(SolidityParser.DecimalNumber, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HexNumber() { return GetToken(SolidityParser.HexNumber, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public HexLiteralContext hexLiteral() {
			return GetRuleContext<HexLiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BooleanLiteral() { return GetToken(SolidityParser.BooleanLiteral, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public AssemblyTypeContext assemblyType() {
			return GetRuleContext<AssemblyTypeContext>(0);
		}
		public AssemblyLiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assemblyLiteral; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.EnterAssemblyLiteral(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.ExitAssemblyLiteral(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISolidityVisitor<TResult> typedVisitor = visitor as ISolidityVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssemblyLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AssemblyLiteralContext assemblyLiteral() {
		AssemblyLiteralContext _localctx = new AssemblyLiteralContext(Context, State);
		EnterRule(_localctx, 160, RULE_assemblyLiteral);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1020;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case StringLiteralFragment:
				{
				State = 1015;
				stringLiteral();
				}
				break;
			case DecimalNumber:
				{
				State = 1016;
				Match(DecimalNumber);
				}
				break;
			case HexNumber:
				{
				State = 1017;
				Match(HexNumber);
				}
				break;
			case HexLiteralFragment:
				{
				State = 1018;
				hexLiteral();
				}
				break;
			case BooleanLiteral:
				{
				State = 1019;
				Match(BooleanLiteral);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 1023;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,116,Context) ) {
			case 1:
				{
				State = 1022;
				assemblyType();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssemblyTypedVariableListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AssemblyTypeContext assemblyType() {
			return GetRuleContext<AssemblyTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AssemblyTypedVariableListContext assemblyTypedVariableList() {
			return GetRuleContext<AssemblyTypedVariableListContext>(0);
		}
		public AssemblyTypedVariableListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assemblyTypedVariableList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.EnterAssemblyTypedVariableList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.ExitAssemblyTypedVariableList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISolidityVisitor<TResult> typedVisitor = visitor as ISolidityVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssemblyTypedVariableList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AssemblyTypedVariableListContext assemblyTypedVariableList() {
		AssemblyTypedVariableListContext _localctx = new AssemblyTypedVariableListContext(Context, State);
		EnterRule(_localctx, 162, RULE_assemblyTypedVariableList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1025;
			identifier();
			State = 1027;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__58) {
				{
				State = 1026;
				assemblyType();
				}
			}

			State = 1031;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__14) {
				{
				State = 1029;
				Match(T__14);
				State = 1030;
				assemblyTypedVariableList();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssemblyTypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public AssemblyTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assemblyType; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.EnterAssemblyType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.ExitAssemblyType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISolidityVisitor<TResult> typedVisitor = visitor as ISolidityVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssemblyType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AssemblyTypeContext assemblyType() {
		AssemblyTypeContext _localctx = new AssemblyTypeContext(Context, State);
		EnterRule(_localctx, 164, RULE_assemblyType);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1033;
			Match(T__58);
			State = 1034;
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SubAssemblyContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AssemblyBlockContext assemblyBlock() {
			return GetRuleContext<AssemblyBlockContext>(0);
		}
		public SubAssemblyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_subAssembly; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.EnterSubAssembly(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.ExitSubAssembly(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISolidityVisitor<TResult> typedVisitor = visitor as ISolidityVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSubAssembly(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SubAssemblyContext subAssembly() {
		SubAssemblyContext _localctx = new SubAssemblyContext(Context, State);
		EnterRule(_localctx, 166, RULE_subAssembly);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1036;
			Match(T__45);
			State = 1037;
			identifier();
			State = 1038;
			assemblyBlock();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NumberLiteralContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DecimalNumber() { return GetToken(SolidityParser.DecimalNumber, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HexNumber() { return GetToken(SolidityParser.HexNumber, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NumberUnit() { return GetToken(SolidityParser.NumberUnit, 0); }
		public NumberLiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_numberLiteral; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.EnterNumberLiteral(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.ExitNumberLiteral(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISolidityVisitor<TResult> typedVisitor = visitor as ISolidityVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNumberLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NumberLiteralContext numberLiteral() {
		NumberLiteralContext _localctx = new NumberLiteralContext(Context, State);
		EnterRule(_localctx, 168, RULE_numberLiteral);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1040;
			_la = TokenStream.LA(1);
			if ( !(_la==DecimalNumber || _la==HexNumber) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 1042;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,119,Context) ) {
			case 1:
				{
				State = 1041;
				Match(NumberUnit);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IdentifierContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(SolidityParser.Identifier, 0); }
		public IdentifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_identifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.EnterIdentifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.ExitIdentifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISolidityVisitor<TResult> typedVisitor = visitor as ISolidityVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIdentifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IdentifierContext identifier() {
		IdentifierContext _localctx = new IdentifierContext(Context, State);
		EnterRule(_localctx, 170, RULE_identifier);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1044;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__12) | (1L << T__39) | (1L << T__51))) != 0) || _la==Identifier) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class HexLiteralContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] HexLiteralFragment() { return GetTokens(SolidityParser.HexLiteralFragment); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HexLiteralFragment(int i) {
			return GetToken(SolidityParser.HexLiteralFragment, i);
		}
		public HexLiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_hexLiteral; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.EnterHexLiteral(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.ExitHexLiteral(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISolidityVisitor<TResult> typedVisitor = visitor as ISolidityVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitHexLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public HexLiteralContext hexLiteral() {
		HexLiteralContext _localctx = new HexLiteralContext(Context, State);
		EnterRule(_localctx, 172, RULE_hexLiteral);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1047;
			ErrorHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 1046;
					Match(HexLiteralFragment);
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 1049;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,120,Context);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StringLiteralContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] StringLiteralFragment() { return GetTokens(SolidityParser.StringLiteralFragment); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode StringLiteralFragment(int i) {
			return GetToken(SolidityParser.StringLiteralFragment, i);
		}
		public StringLiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stringLiteral; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.EnterStringLiteral(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.ExitStringLiteral(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISolidityVisitor<TResult> typedVisitor = visitor as ISolidityVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStringLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StringLiteralContext stringLiteral() {
		StringLiteralContext _localctx = new StringLiteralContext(Context, State);
		EnterRule(_localctx, 174, RULE_stringLiteral);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1052;
			ErrorHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 1051;
					Match(StringLiteralFragment);
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 1054;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,121,Context);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 30: return typeName_sempred((TypeNameContext)_localctx, predIndex);
		case 56: return expression_sempred((ExpressionContext)_localctx, predIndex);
		}
		return true;
	}
	private bool typeName_sempred(TypeNameContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 2);
		}
		return true;
	}
	private bool expression_sempred(ExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 1: return Precpred(Context, 14);
		case 2: return Precpred(Context, 13);
		case 3: return Precpred(Context, 12);
		case 4: return Precpred(Context, 11);
		case 5: return Precpred(Context, 10);
		case 6: return Precpred(Context, 9);
		case 7: return Precpred(Context, 8);
		case 8: return Precpred(Context, 7);
		case 9: return Precpred(Context, 6);
		case 10: return Precpred(Context, 5);
		case 11: return Precpred(Context, 4);
		case 12: return Precpred(Context, 3);
		case 13: return Precpred(Context, 2);
		case 14: return Precpred(Context, 28);
		case 15: return Precpred(Context, 26);
		case 16: return Precpred(Context, 25);
		case 17: return Precpred(Context, 24);
		case 18: return Precpred(Context, 23);
		case 19: return Precpred(Context, 22);
		}
		return true;
	}

	private static int[] _serializedATN = {
		4,1,128,1057,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,
		7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,7,14,
		2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,7,21,
		2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,7,28,
		2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,2,35,7,35,
		2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,2,42,7,42,
		2,43,7,43,2,44,7,44,2,45,7,45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,
		2,50,7,50,2,51,7,51,2,52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,7,56,
		2,57,7,57,2,58,7,58,2,59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,7,63,
		2,64,7,64,2,65,7,65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,2,70,7,70,
		2,71,7,71,2,72,7,72,2,73,7,73,2,74,7,74,2,75,7,75,2,76,7,76,2,77,7,77,
		2,78,7,78,2,79,7,79,2,80,7,80,2,81,7,81,2,82,7,82,2,83,7,83,2,84,7,84,
		2,85,7,85,2,86,7,86,2,87,7,87,1,0,1,0,1,0,1,0,1,0,5,0,182,8,0,10,0,12,
		0,185,9,0,1,0,1,0,1,1,1,1,1,1,1,1,1,1,1,2,1,2,1,3,1,3,3,3,198,8,3,1,4,
		1,4,3,4,202,8,4,1,5,3,5,205,8,5,1,5,1,5,1,6,1,6,1,7,1,7,1,7,1,7,3,7,215,
		8,7,1,7,1,7,1,7,1,7,3,7,221,8,7,1,7,1,7,3,7,225,8,7,1,7,1,7,1,7,1,7,1,
		7,1,7,1,7,1,7,5,7,235,8,7,10,7,12,7,238,9,7,1,7,1,7,1,7,1,7,1,7,3,7,245,
		8,7,1,8,1,8,1,8,3,8,250,8,8,1,9,3,9,253,8,9,1,9,1,9,1,9,1,9,1,9,1,9,5,
		9,261,8,9,10,9,12,9,264,9,9,3,9,266,8,9,1,9,1,9,5,9,270,8,9,10,9,12,9,
		273,9,9,1,9,1,9,1,10,1,10,1,10,3,10,280,8,10,1,10,3,10,283,8,10,1,11,1,
		11,1,11,1,11,1,11,1,11,1,11,3,11,292,8,11,1,12,1,12,1,12,1,12,1,12,1,12,
		1,12,5,12,301,8,12,10,12,12,12,304,9,12,1,12,1,12,1,12,3,12,309,8,12,1,
		12,1,12,1,13,1,13,1,13,1,13,1,13,5,13,318,8,13,10,13,12,13,321,9,13,1,
		13,1,13,3,13,325,8,13,1,14,1,14,1,14,1,14,1,14,3,14,332,8,14,1,14,1,14,
		1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,5,15,344,8,15,10,15,12,15,347,
		9,15,3,15,349,8,15,1,15,1,15,1,16,1,16,1,16,3,16,356,8,16,1,16,1,16,5,
		16,360,8,16,10,16,12,16,363,9,16,1,16,1,16,3,16,367,8,16,1,17,1,17,1,17,
		1,17,3,17,373,8,17,1,17,1,17,3,17,377,8,17,1,18,1,18,1,18,1,18,3,18,383,
		8,18,1,18,1,18,1,18,3,18,388,8,18,1,19,1,19,1,19,1,20,1,20,1,20,1,20,1,
		20,1,20,1,20,1,20,5,20,401,8,20,10,20,12,20,404,9,20,1,21,1,21,1,21,3,
		21,409,8,21,1,21,3,21,412,8,21,1,22,1,22,1,22,1,22,3,22,418,8,22,1,22,
		1,22,1,23,1,23,1,23,1,23,3,23,426,8,23,1,23,1,23,5,23,430,8,23,10,23,12,
		23,433,9,23,1,23,1,23,1,24,1,24,1,25,1,25,1,25,1,25,5,25,443,8,25,10,25,
		12,25,446,9,25,3,25,448,8,25,1,25,1,25,1,26,1,26,3,26,454,8,26,1,26,3,
		26,457,8,26,1,27,1,27,1,27,1,27,5,27,463,8,27,10,27,12,27,466,9,27,3,27,
		468,8,27,1,27,1,27,1,28,1,28,3,28,474,8,28,1,28,3,28,477,8,28,1,29,1,29,
		3,29,481,8,29,1,29,1,29,1,30,1,30,1,30,1,30,1,30,3,30,490,8,30,1,30,1,
		30,1,30,3,30,495,8,30,1,30,5,30,498,8,30,10,30,12,30,501,9,30,1,31,1,31,
		1,31,5,31,506,8,31,10,31,12,31,509,9,31,1,32,1,32,1,32,1,32,3,32,515,8,
		32,1,32,1,32,1,32,1,32,1,33,1,33,1,33,1,33,3,33,525,8,33,1,34,1,34,1,35,
		1,35,1,36,1,36,5,36,533,8,36,10,36,12,36,536,9,36,1,36,1,36,1,37,1,37,
		1,37,1,37,1,37,1,37,1,37,1,37,1,37,1,37,1,37,1,37,1,37,3,37,553,8,37,1,
		38,1,38,1,38,1,39,1,39,1,39,1,39,1,39,1,39,1,39,3,39,565,8,39,1,40,1,40,
		1,40,3,40,570,8,40,1,40,1,40,4,40,574,8,40,11,40,12,40,575,1,41,1,41,3,
		41,580,8,41,1,41,3,41,583,8,41,1,41,1,41,1,42,1,42,1,42,1,42,1,42,1,42,
		1,43,1,43,1,43,1,43,3,43,597,8,43,1,43,1,43,3,43,601,8,43,1,43,3,43,604,
		8,43,1,43,1,43,1,43,1,44,1,44,3,44,611,8,44,1,45,1,45,3,45,615,8,45,1,
		45,1,45,1,46,1,46,1,46,1,46,1,46,1,46,1,46,1,46,1,47,1,47,1,47,1,48,1,
		48,1,48,1,49,1,49,3,49,635,8,49,1,49,1,49,1,50,1,50,1,50,1,51,1,51,1,51,
		1,51,1,52,1,52,1,52,1,52,1,52,1,52,1,52,3,52,653,8,52,1,52,1,52,3,52,657,
		8,52,1,52,1,52,1,53,3,53,662,8,53,1,53,1,53,3,53,666,8,53,5,53,668,8,53,
		10,53,12,53,671,9,53,1,54,1,54,3,54,675,8,54,1,54,5,54,678,8,54,10,54,
		12,54,681,9,54,1,54,3,54,684,8,54,1,54,1,54,1,55,1,55,3,55,690,8,55,1,
		55,1,55,1,55,1,55,1,55,1,55,1,55,1,55,1,55,3,55,701,8,55,1,56,1,56,1,56,
		1,56,1,56,1,56,1,56,1,56,1,56,1,56,1,56,1,56,1,56,1,56,1,56,1,56,1,56,
		1,56,1,56,1,56,1,56,1,56,1,56,3,56,726,8,56,1,56,1,56,1,56,1,56,1,56,1,
		56,1,56,1,56,1,56,1,56,1,56,1,56,1,56,1,56,1,56,1,56,1,56,1,56,1,56,1,
		56,1,56,1,56,1,56,1,56,1,56,1,56,1,56,1,56,1,56,1,56,1,56,1,56,1,56,1,
		56,1,56,1,56,1,56,1,56,1,56,1,56,1,56,1,56,1,56,1,56,1,56,1,56,1,56,3,
		56,775,8,56,1,56,1,56,1,56,1,56,3,56,781,8,56,1,56,1,56,3,56,785,8,56,
		1,56,1,56,1,56,1,56,1,56,1,56,1,56,1,56,1,56,1,56,1,56,1,56,1,56,1,56,
		5,56,801,8,56,10,56,12,56,804,9,56,1,57,1,57,1,57,1,57,1,57,1,57,1,57,
		3,57,813,8,57,1,57,1,57,1,57,1,57,1,57,3,57,820,8,57,3,57,822,8,57,1,58,
		1,58,1,58,5,58,827,8,58,10,58,12,58,830,9,58,1,59,1,59,1,59,5,59,835,8,
		59,10,59,12,59,838,9,59,1,59,3,59,841,8,59,1,60,1,60,1,60,1,60,1,61,1,
		61,3,61,849,8,61,1,61,1,61,3,61,853,8,61,3,61,855,8,61,1,62,1,62,1,62,
		1,62,1,62,1,63,1,63,3,63,864,8,63,1,63,1,63,3,63,868,8,63,5,63,870,8,63,
		10,63,12,63,873,9,63,1,63,1,63,1,63,1,63,1,63,5,63,880,8,63,10,63,12,63,
		883,9,63,3,63,885,8,63,1,63,3,63,888,8,63,1,64,1,64,3,64,892,8,64,1,65,
		1,65,1,65,1,65,1,65,1,65,1,65,1,65,1,65,1,65,1,65,1,65,1,65,1,65,1,65,
		1,65,1,65,1,65,3,65,912,8,65,1,66,1,66,5,66,916,8,66,10,66,12,66,919,9,
		66,1,66,1,66,1,67,1,67,3,67,925,8,67,1,68,1,68,1,68,1,68,3,68,931,8,68,
		1,68,1,68,3,68,935,8,68,1,68,1,68,5,68,939,8,68,10,68,12,68,942,9,68,1,
		68,3,68,945,8,68,1,69,1,69,1,69,1,69,3,69,951,8,69,1,70,1,70,1,70,1,70,
		1,71,1,71,1,71,5,71,960,8,71,10,71,12,71,963,9,71,1,72,1,72,1,72,1,73,
		1,73,1,73,1,74,1,74,1,74,5,74,974,8,74,10,74,12,74,977,9,74,1,75,1,75,
		1,75,3,75,982,8,75,1,75,1,75,1,75,1,75,3,75,988,8,75,1,76,1,76,1,76,1,
		76,3,76,994,8,76,1,76,1,76,3,76,998,8,76,1,76,1,76,1,77,1,77,1,77,1,77,
		1,78,1,78,1,78,1,78,1,78,1,78,1,79,1,79,1,79,1,79,1,80,1,80,1,80,1,80,
		1,80,3,80,1021,8,80,1,80,3,80,1024,8,80,1,81,1,81,3,81,1028,8,81,1,81,
		1,81,3,81,1032,8,81,1,82,1,82,1,82,1,83,1,83,1,83,1,83,1,84,1,84,3,84,
		1043,8,84,1,85,1,85,1,86,4,86,1048,8,86,11,86,12,86,1049,1,87,4,87,1053,
		8,87,11,87,12,87,1054,1,87,0,2,60,112,88,0,2,4,6,8,10,12,14,16,18,20,22,
		24,26,28,30,32,34,36,38,40,42,44,46,48,50,52,54,56,58,60,62,64,66,68,70,
		72,74,76,78,80,82,84,86,88,90,92,94,96,98,100,102,104,106,108,110,112,
		114,116,118,120,122,124,126,128,130,132,134,136,138,140,142,144,146,148,
		150,152,154,156,158,160,162,164,166,168,170,172,174,0,14,1,0,3,9,1,0,18,
		20,1,0,38,40,4,0,106,106,113,113,117,117,119,119,1,0,56,57,1,0,60,61,1,
		0,62,63,2,0,12,12,66,67,1,0,68,69,1,0,5,8,1,0,72,73,2,0,9,9,77,86,1,0,
		99,100,4,0,13,13,40,40,52,52,123,123,1186,0,183,1,0,0,0,2,188,1,0,0,0,
		4,193,1,0,0,0,6,197,1,0,0,0,8,199,1,0,0,0,10,204,1,0,0,0,12,208,1,0,0,
		0,14,244,1,0,0,0,16,246,1,0,0,0,18,252,1,0,0,0,20,276,1,0,0,0,22,291,1,
		0,0,0,24,293,1,0,0,0,26,312,1,0,0,0,28,326,1,0,0,0,30,335,1,0,0,0,32,352,
		1,0,0,0,34,368,1,0,0,0,36,387,1,0,0,0,38,389,1,0,0,0,40,402,1,0,0,0,42,
		405,1,0,0,0,44,413,1,0,0,0,46,421,1,0,0,0,48,436,1,0,0,0,50,438,1,0,0,
		0,52,451,1,0,0,0,54,458,1,0,0,0,56,471,1,0,0,0,58,478,1,0,0,0,60,489,1,
		0,0,0,62,502,1,0,0,0,64,510,1,0,0,0,66,520,1,0,0,0,68,526,1,0,0,0,70,528,
		1,0,0,0,72,530,1,0,0,0,74,552,1,0,0,0,76,554,1,0,0,0,78,557,1,0,0,0,80,
		566,1,0,0,0,82,577,1,0,0,0,84,586,1,0,0,0,86,592,1,0,0,0,88,610,1,0,0,
		0,90,612,1,0,0,0,92,618,1,0,0,0,94,626,1,0,0,0,96,629,1,0,0,0,98,632,1,
		0,0,0,100,638,1,0,0,0,102,641,1,0,0,0,104,652,1,0,0,0,106,661,1,0,0,0,
		108,672,1,0,0,0,110,700,1,0,0,0,112,725,1,0,0,0,114,821,1,0,0,0,116,823,
		1,0,0,0,118,831,1,0,0,0,120,842,1,0,0,0,122,854,1,0,0,0,124,856,1,0,0,
		0,126,887,1,0,0,0,128,891,1,0,0,0,130,911,1,0,0,0,132,913,1,0,0,0,134,
		924,1,0,0,0,136,930,1,0,0,0,138,946,1,0,0,0,140,952,1,0,0,0,142,956,1,
		0,0,0,144,964,1,0,0,0,146,967,1,0,0,0,148,970,1,0,0,0,150,987,1,0,0,0,
		152,989,1,0,0,0,154,1001,1,0,0,0,156,1005,1,0,0,0,158,1011,1,0,0,0,160,
		1020,1,0,0,0,162,1025,1,0,0,0,164,1033,1,0,0,0,166,1036,1,0,0,0,168,1040,
		1,0,0,0,170,1044,1,0,0,0,172,1047,1,0,0,0,174,1052,1,0,0,0,176,182,3,2,
		1,0,177,182,3,14,7,0,178,182,3,30,15,0,179,182,3,46,23,0,180,182,3,18,
		9,0,181,176,1,0,0,0,181,177,1,0,0,0,181,178,1,0,0,0,181,179,1,0,0,0,181,
		180,1,0,0,0,182,185,1,0,0,0,183,181,1,0,0,0,183,184,1,0,0,0,184,186,1,
		0,0,0,185,183,1,0,0,0,186,187,5,0,0,1,187,1,1,0,0,0,188,189,5,1,0,0,189,
		190,3,4,2,0,190,191,3,6,3,0,191,192,5,2,0,0,192,3,1,0,0,0,193,194,3,170,
		85,0,194,5,1,0,0,0,195,198,3,8,4,0,196,198,3,112,56,0,197,195,1,0,0,0,
		197,196,1,0,0,0,198,7,1,0,0,0,199,201,3,10,5,0,200,202,3,10,5,0,201,200,
		1,0,0,0,201,202,1,0,0,0,202,9,1,0,0,0,203,205,3,12,6,0,204,203,1,0,0,0,
		204,205,1,0,0,0,205,206,1,0,0,0,206,207,5,125,0,0,207,11,1,0,0,0,208,209,
		7,0,0,0,209,13,1,0,0,0,210,211,5,10,0,0,211,214,5,124,0,0,212,213,5,11,
		0,0,213,215,3,170,85,0,214,212,1,0,0,0,214,215,1,0,0,0,215,216,1,0,0,0,
		216,245,5,2,0,0,217,220,5,10,0,0,218,221,5,12,0,0,219,221,3,170,85,0,220,
		218,1,0,0,0,220,219,1,0,0,0,221,224,1,0,0,0,222,223,5,11,0,0,223,225,3,
		170,85,0,224,222,1,0,0,0,224,225,1,0,0,0,225,226,1,0,0,0,226,227,5,13,
		0,0,227,228,5,124,0,0,228,245,5,2,0,0,229,230,5,10,0,0,230,231,5,14,0,
		0,231,236,3,16,8,0,232,233,5,15,0,0,233,235,3,16,8,0,234,232,1,0,0,0,235,
		238,1,0,0,0,236,234,1,0,0,0,236,237,1,0,0,0,237,239,1,0,0,0,238,236,1,
		0,0,0,239,240,5,16,0,0,240,241,5,13,0,0,241,242,5,124,0,0,242,243,5,2,
		0,0,243,245,1,0,0,0,244,210,1,0,0,0,244,217,1,0,0,0,244,229,1,0,0,0,245,
		15,1,0,0,0,246,249,3,170,85,0,247,248,5,11,0,0,248,250,3,170,85,0,249,
		247,1,0,0,0,249,250,1,0,0,0,250,17,1,0,0,0,251,253,5,17,0,0,252,251,1,
		0,0,0,252,253,1,0,0,0,253,254,1,0,0,0,254,255,7,1,0,0,255,265,3,170,85,
		0,256,257,5,21,0,0,257,262,3,20,10,0,258,259,5,15,0,0,259,261,3,20,10,
		0,260,258,1,0,0,0,261,264,1,0,0,0,262,260,1,0,0,0,262,263,1,0,0,0,263,
		266,1,0,0,0,264,262,1,0,0,0,265,256,1,0,0,0,265,266,1,0,0,0,266,267,1,
		0,0,0,267,271,5,14,0,0,268,270,3,22,11,0,269,268,1,0,0,0,270,273,1,0,0,
		0,271,269,1,0,0,0,271,272,1,0,0,0,272,274,1,0,0,0,273,271,1,0,0,0,274,
		275,5,16,0,0,275,19,1,0,0,0,276,282,3,62,31,0,277,279,5,22,0,0,278,280,
		3,116,58,0,279,278,1,0,0,0,279,280,1,0,0,0,280,281,1,0,0,0,281,283,5,23,
		0,0,282,277,1,0,0,0,282,283,1,0,0,0,283,21,1,0,0,0,284,292,3,24,12,0,285,
		292,3,28,14,0,286,292,3,30,15,0,287,292,3,32,16,0,288,292,3,34,17,0,289,
		292,3,44,22,0,290,292,3,46,23,0,291,284,1,0,0,0,291,285,1,0,0,0,291,286,
		1,0,0,0,291,287,1,0,0,0,291,288,1,0,0,0,291,289,1,0,0,0,291,290,1,0,0,
		0,292,23,1,0,0,0,293,302,3,60,30,0,294,301,5,115,0,0,295,301,5,112,0,0,
		296,301,5,114,0,0,297,301,5,106,0,0,298,301,5,107,0,0,299,301,3,26,13,
		0,300,294,1,0,0,0,300,295,1,0,0,0,300,296,1,0,0,0,300,297,1,0,0,0,300,
		298,1,0,0,0,300,299,1,0,0,0,301,304,1,0,0,0,302,300,1,0,0,0,302,303,1,
		0,0,0,303,305,1,0,0,0,304,302,1,0,0,0,305,308,3,170,85,0,306,307,5,9,0,
		0,307,309,3,112,56,0,308,306,1,0,0,0,308,309,1,0,0,0,309,310,1,0,0,0,310,
		311,5,2,0,0,311,25,1,0,0,0,312,324,5,24,0,0,313,314,5,22,0,0,314,319,3,
		62,31,0,315,316,5,15,0,0,316,318,3,62,31,0,317,315,1,0,0,0,318,321,1,0,
		0,0,319,317,1,0,0,0,319,320,1,0,0,0,320,322,1,0,0,0,321,319,1,0,0,0,322,
		323,5,23,0,0,323,325,1,0,0,0,324,313,1,0,0,0,324,325,1,0,0,0,325,27,1,
		0,0,0,326,327,5,25,0,0,327,328,3,170,85,0,328,331,5,26,0,0,329,332,5,12,
		0,0,330,332,3,60,30,0,331,329,1,0,0,0,331,330,1,0,0,0,332,333,1,0,0,0,
		333,334,5,2,0,0,334,29,1,0,0,0,335,336,5,27,0,0,336,337,3,170,85,0,337,
		348,5,14,0,0,338,339,3,58,29,0,339,345,5,2,0,0,340,341,3,58,29,0,341,342,
		5,2,0,0,342,344,1,0,0,0,343,340,1,0,0,0,344,347,1,0,0,0,345,343,1,0,0,
		0,345,346,1,0,0,0,346,349,1,0,0,0,347,345,1,0,0,0,348,338,1,0,0,0,348,
		349,1,0,0,0,349,350,1,0,0,0,350,351,5,16,0,0,351,31,1,0,0,0,352,353,5,
		28,0,0,353,355,3,170,85,0,354,356,3,50,25,0,355,354,1,0,0,0,355,356,1,
		0,0,0,356,361,1,0,0,0,357,360,5,116,0,0,358,360,3,26,13,0,359,357,1,0,
		0,0,359,358,1,0,0,0,360,363,1,0,0,0,361,359,1,0,0,0,361,362,1,0,0,0,362,
		366,1,0,0,0,363,361,1,0,0,0,364,367,5,2,0,0,365,367,3,72,36,0,366,364,
		1,0,0,0,366,365,1,0,0,0,367,33,1,0,0,0,368,369,3,36,18,0,369,370,3,50,
		25,0,370,372,3,40,20,0,371,373,3,38,19,0,372,371,1,0,0,0,372,373,1,0,0,
		0,373,376,1,0,0,0,374,377,5,2,0,0,375,377,3,72,36,0,376,374,1,0,0,0,376,
		375,1,0,0,0,377,35,1,0,0,0,378,382,5,29,0,0,379,383,3,170,85,0,380,383,
		5,122,0,0,381,383,5,121,0,0,382,379,1,0,0,0,382,380,1,0,0,0,382,381,1,
		0,0,0,382,383,1,0,0,0,383,388,1,0,0,0,384,388,5,120,0,0,385,388,5,121,
		0,0,386,388,5,122,0,0,387,378,1,0,0,0,387,384,1,0,0,0,387,385,1,0,0,0,
		387,386,1,0,0,0,388,37,1,0,0,0,389,390,5,30,0,0,390,391,3,50,25,0,391,
		39,1,0,0,0,392,401,3,42,21,0,393,401,3,70,35,0,394,401,5,110,0,0,395,401,
		5,115,0,0,396,401,5,112,0,0,397,401,5,114,0,0,398,401,5,116,0,0,399,401,
		3,26,13,0,400,392,1,0,0,0,400,393,1,0,0,0,400,394,1,0,0,0,400,395,1,0,
		0,0,400,396,1,0,0,0,400,397,1,0,0,0,400,398,1,0,0,0,400,399,1,0,0,0,401,
		404,1,0,0,0,402,400,1,0,0,0,402,403,1,0,0,0,403,41,1,0,0,0,404,402,1,0,
		0,0,405,411,3,170,85,0,406,408,5,22,0,0,407,409,3,116,58,0,408,407,1,0,
		0,0,408,409,1,0,0,0,409,410,1,0,0,0,410,412,5,23,0,0,411,406,1,0,0,0,411,
		412,1,0,0,0,412,43,1,0,0,0,413,414,5,31,0,0,414,415,3,170,85,0,415,417,
		3,54,27,0,416,418,5,104,0,0,417,416,1,0,0,0,417,418,1,0,0,0,418,419,1,
		0,0,0,419,420,5,2,0,0,420,45,1,0,0,0,421,422,5,32,0,0,422,423,3,170,85,
		0,423,425,5,14,0,0,424,426,3,48,24,0,425,424,1,0,0,0,425,426,1,0,0,0,426,
		431,1,0,0,0,427,428,5,15,0,0,428,430,3,48,24,0,429,427,1,0,0,0,430,433,
		1,0,0,0,431,429,1,0,0,0,431,432,1,0,0,0,432,434,1,0,0,0,433,431,1,0,0,
		0,434,435,5,16,0,0,435,47,1,0,0,0,436,437,3,170,85,0,437,49,1,0,0,0,438,
		447,5,22,0,0,439,444,3,52,26,0,440,441,5,15,0,0,441,443,3,52,26,0,442,
		440,1,0,0,0,443,446,1,0,0,0,444,442,1,0,0,0,444,445,1,0,0,0,445,448,1,
		0,0,0,446,444,1,0,0,0,447,439,1,0,0,0,447,448,1,0,0,0,448,449,1,0,0,0,
		449,450,5,23,0,0,450,51,1,0,0,0,451,453,3,60,30,0,452,454,3,68,34,0,453,
		452,1,0,0,0,453,454,1,0,0,0,454,456,1,0,0,0,455,457,3,170,85,0,456,455,
		1,0,0,0,456,457,1,0,0,0,457,53,1,0,0,0,458,467,5,22,0,0,459,464,3,56,28,
		0,460,461,5,15,0,0,461,463,3,56,28,0,462,460,1,0,0,0,463,466,1,0,0,0,464,
		462,1,0,0,0,464,465,1,0,0,0,465,468,1,0,0,0,466,464,1,0,0,0,467,459,1,
		0,0,0,467,468,1,0,0,0,468,469,1,0,0,0,469,470,5,23,0,0,470,55,1,0,0,0,
		471,473,3,60,30,0,472,474,5,111,0,0,473,472,1,0,0,0,473,474,1,0,0,0,474,
		476,1,0,0,0,475,477,3,170,85,0,476,475,1,0,0,0,476,477,1,0,0,0,477,57,
		1,0,0,0,478,480,3,60,30,0,479,481,3,68,34,0,480,479,1,0,0,0,480,481,1,
		0,0,0,481,482,1,0,0,0,482,483,3,170,85,0,483,59,1,0,0,0,484,485,6,30,-1,
		0,485,490,3,110,55,0,486,490,3,62,31,0,487,490,3,64,32,0,488,490,3,66,
		33,0,489,484,1,0,0,0,489,486,1,0,0,0,489,487,1,0,0,0,489,488,1,0,0,0,490,
		499,1,0,0,0,491,492,10,2,0,0,492,494,5,33,0,0,493,495,3,112,56,0,494,493,
		1,0,0,0,494,495,1,0,0,0,495,496,1,0,0,0,496,498,5,34,0,0,497,491,1,0,0,
		0,498,501,1,0,0,0,499,497,1,0,0,0,499,500,1,0,0,0,500,61,1,0,0,0,501,499,
		1,0,0,0,502,507,3,170,85,0,503,504,5,35,0,0,504,506,3,170,85,0,505,503,
		1,0,0,0,506,509,1,0,0,0,507,505,1,0,0,0,507,508,1,0,0,0,508,63,1,0,0,0,
		509,507,1,0,0,0,510,511,5,36,0,0,511,514,5,22,0,0,512,515,3,110,55,0,513,
		515,3,62,31,0,514,512,1,0,0,0,514,513,1,0,0,0,515,516,1,0,0,0,516,517,
		5,37,0,0,517,518,3,60,30,0,518,519,5,23,0,0,519,65,1,0,0,0,520,521,5,29,
		0,0,521,522,3,50,25,0,522,524,3,40,20,0,523,525,3,38,19,0,524,523,1,0,
		0,0,524,525,1,0,0,0,525,67,1,0,0,0,526,527,7,2,0,0,527,69,1,0,0,0,528,
		529,7,3,0,0,529,71,1,0,0,0,530,534,5,14,0,0,531,533,3,74,37,0,532,531,
		1,0,0,0,533,536,1,0,0,0,534,532,1,0,0,0,534,535,1,0,0,0,535,537,1,0,0,
		0,536,534,1,0,0,0,537,538,5,16,0,0,538,73,1,0,0,0,539,553,3,78,39,0,540,
		553,3,80,40,0,541,553,3,84,42,0,542,553,3,86,43,0,543,553,3,72,36,0,544,
		553,3,90,45,0,545,553,3,92,46,0,546,553,3,94,47,0,547,553,3,96,48,0,548,
		553,3,98,49,0,549,553,3,100,50,0,550,553,3,102,51,0,551,553,3,88,44,0,
		552,539,1,0,0,0,552,540,1,0,0,0,552,541,1,0,0,0,552,542,1,0,0,0,552,543,
		1,0,0,0,552,544,1,0,0,0,552,545,1,0,0,0,552,546,1,0,0,0,552,547,1,0,0,
		0,552,548,1,0,0,0,552,549,1,0,0,0,552,550,1,0,0,0,552,551,1,0,0,0,553,
		75,1,0,0,0,554,555,3,112,56,0,555,556,5,2,0,0,556,77,1,0,0,0,557,558,5,
		41,0,0,558,559,5,22,0,0,559,560,3,112,56,0,560,561,5,23,0,0,561,564,3,
		74,37,0,562,563,5,42,0,0,563,565,3,74,37,0,564,562,1,0,0,0,564,565,1,0,
		0,0,565,79,1,0,0,0,566,567,5,43,0,0,567,569,3,112,56,0,568,570,3,38,19,
		0,569,568,1,0,0,0,569,570,1,0,0,0,570,571,1,0,0,0,571,573,3,72,36,0,572,
		574,3,82,41,0,573,572,1,0,0,0,574,575,1,0,0,0,575,573,1,0,0,0,575,576,
		1,0,0,0,576,81,1,0,0,0,577,582,5,44,0,0,578,580,3,170,85,0,579,578,1,0,
		0,0,579,580,1,0,0,0,580,581,1,0,0,0,581,583,3,50,25,0,582,579,1,0,0,0,
		582,583,1,0,0,0,583,584,1,0,0,0,584,585,3,72,36,0,585,83,1,0,0,0,586,587,
		5,45,0,0,587,588,5,22,0,0,588,589,3,112,56,0,589,590,5,23,0,0,590,591,
		3,74,37,0,591,85,1,0,0,0,592,593,5,26,0,0,593,596,5,22,0,0,594,597,3,88,
		44,0,595,597,5,2,0,0,596,594,1,0,0,0,596,595,1,0,0,0,597,600,1,0,0,0,598,
		601,3,76,38,0,599,601,5,2,0,0,600,598,1,0,0,0,600,599,1,0,0,0,601,603,
		1,0,0,0,602,604,3,112,56,0,603,602,1,0,0,0,603,604,1,0,0,0,604,605,1,0,
		0,0,605,606,5,23,0,0,606,607,3,74,37,0,607,87,1,0,0,0,608,611,3,104,52,
		0,609,611,3,76,38,0,610,608,1,0,0,0,610,609,1,0,0,0,611,89,1,0,0,0,612,
		614,5,46,0,0,613,615,5,124,0,0,614,613,1,0,0,0,614,615,1,0,0,0,615,616,
		1,0,0,0,616,617,3,132,66,0,617,91,1,0,0,0,618,619,5,47,0,0,619,620,3,74,
		37,0,620,621,5,45,0,0,621,622,5,22,0,0,622,623,3,112,56,0,623,624,5,23,
		0,0,624,625,5,2,0,0,625,93,1,0,0,0,626,627,5,108,0,0,627,628,5,2,0,0,628,
		95,1,0,0,0,629,630,5,105,0,0,630,631,5,2,0,0,631,97,1,0,0,0,632,634,5,
		48,0,0,633,635,3,112,56,0,634,633,1,0,0,0,634,635,1,0,0,0,635,636,1,0,
		0,0,636,637,5,2,0,0,637,99,1,0,0,0,638,639,5,49,0,0,639,640,5,2,0,0,640,
		101,1,0,0,0,641,642,5,50,0,0,642,643,3,124,62,0,643,644,5,2,0,0,644,103,
		1,0,0,0,645,646,5,51,0,0,646,653,3,108,54,0,647,653,3,58,29,0,648,649,
		5,22,0,0,649,650,3,106,53,0,650,651,5,23,0,0,651,653,1,0,0,0,652,645,1,
		0,0,0,652,647,1,0,0,0,652,648,1,0,0,0,653,656,1,0,0,0,654,655,5,9,0,0,
		655,657,3,112,56,0,656,654,1,0,0,0,656,657,1,0,0,0,657,658,1,0,0,0,658,
		659,5,2,0,0,659,105,1,0,0,0,660,662,3,58,29,0,661,660,1,0,0,0,661,662,
		1,0,0,0,662,669,1,0,0,0,663,665,5,15,0,0,664,666,3,58,29,0,665,664,1,0,
		0,0,665,666,1,0,0,0,666,668,1,0,0,0,667,663,1,0,0,0,668,671,1,0,0,0,669,
		667,1,0,0,0,669,670,1,0,0,0,670,107,1,0,0,0,671,669,1,0,0,0,672,679,5,
		22,0,0,673,675,3,170,85,0,674,673,1,0,0,0,674,675,1,0,0,0,675,676,1,0,
		0,0,676,678,5,15,0,0,677,674,1,0,0,0,678,681,1,0,0,0,679,677,1,0,0,0,679,
		680,1,0,0,0,680,683,1,0,0,0,681,679,1,0,0,0,682,684,3,170,85,0,683,682,
		1,0,0,0,683,684,1,0,0,0,684,685,1,0,0,0,685,686,5,23,0,0,686,109,1,0,0,
		0,687,689,5,52,0,0,688,690,5,113,0,0,689,688,1,0,0,0,689,690,1,0,0,0,690,
		701,1,0,0,0,691,701,5,53,0,0,692,701,5,54,0,0,693,701,5,51,0,0,694,701,
		5,93,0,0,695,701,5,94,0,0,696,701,5,55,0,0,697,701,5,95,0,0,698,701,5,
		96,0,0,699,701,5,97,0,0,700,687,1,0,0,0,700,691,1,0,0,0,700,692,1,0,0,
		0,700,693,1,0,0,0,700,694,1,0,0,0,700,695,1,0,0,0,700,696,1,0,0,0,700,
		697,1,0,0,0,700,698,1,0,0,0,700,699,1,0,0,0,701,111,1,0,0,0,702,703,6,
		56,-1,0,703,704,5,58,0,0,704,726,3,60,30,0,705,706,5,113,0,0,706,707,5,
		22,0,0,707,708,3,112,56,0,708,709,5,23,0,0,709,726,1,0,0,0,710,711,5,22,
		0,0,711,712,3,112,56,0,712,713,5,23,0,0,713,726,1,0,0,0,714,715,7,4,0,
		0,715,726,3,112,56,19,716,717,7,5,0,0,717,726,3,112,56,18,718,719,7,6,
		0,0,719,726,3,112,56,17,720,721,5,64,0,0,721,726,3,112,56,16,722,723,5,
		4,0,0,723,726,3,112,56,15,724,726,3,114,57,0,725,702,1,0,0,0,725,705,1,
		0,0,0,725,710,1,0,0,0,725,714,1,0,0,0,725,716,1,0,0,0,725,718,1,0,0,0,
		725,720,1,0,0,0,725,722,1,0,0,0,725,724,1,0,0,0,726,802,1,0,0,0,727,728,
		10,14,0,0,728,729,5,65,0,0,729,801,3,112,56,15,730,731,10,13,0,0,731,732,
		7,7,0,0,732,801,3,112,56,14,733,734,10,12,0,0,734,735,7,5,0,0,735,801,
		3,112,56,13,736,737,10,11,0,0,737,738,7,8,0,0,738,801,3,112,56,12,739,
		740,10,10,0,0,740,741,5,70,0,0,741,801,3,112,56,11,742,743,10,9,0,0,743,
		744,5,3,0,0,744,801,3,112,56,10,745,746,10,8,0,0,746,747,5,71,0,0,747,
		801,3,112,56,9,748,749,10,7,0,0,749,750,7,9,0,0,750,801,3,112,56,8,751,
		752,10,6,0,0,752,753,7,10,0,0,753,801,3,112,56,7,754,755,10,5,0,0,755,
		756,5,74,0,0,756,801,3,112,56,6,757,758,10,4,0,0,758,759,5,75,0,0,759,
		801,3,112,56,5,760,761,10,3,0,0,761,762,5,76,0,0,762,763,3,112,56,0,763,
		764,5,59,0,0,764,765,3,112,56,4,765,801,1,0,0,0,766,767,10,2,0,0,767,768,
		7,11,0,0,768,801,3,112,56,3,769,770,10,28,0,0,770,801,7,4,0,0,771,772,
		10,26,0,0,772,774,5,33,0,0,773,775,3,112,56,0,774,773,1,0,0,0,774,775,
		1,0,0,0,775,776,1,0,0,0,776,801,5,34,0,0,777,778,10,25,0,0,778,780,5,33,
		0,0,779,781,3,112,56,0,780,779,1,0,0,0,780,781,1,0,0,0,781,782,1,0,0,0,
		782,784,5,59,0,0,783,785,3,112,56,0,784,783,1,0,0,0,784,785,1,0,0,0,785,
		786,1,0,0,0,786,801,5,34,0,0,787,788,10,24,0,0,788,789,5,35,0,0,789,801,
		3,170,85,0,790,791,10,23,0,0,791,792,5,14,0,0,792,793,3,118,59,0,793,794,
		5,16,0,0,794,801,1,0,0,0,795,796,10,22,0,0,796,797,5,22,0,0,797,798,3,
		122,61,0,798,799,5,23,0,0,799,801,1,0,0,0,800,727,1,0,0,0,800,730,1,0,
		0,0,800,733,1,0,0,0,800,736,1,0,0,0,800,739,1,0,0,0,800,742,1,0,0,0,800,
		745,1,0,0,0,800,748,1,0,0,0,800,751,1,0,0,0,800,754,1,0,0,0,800,757,1,
		0,0,0,800,760,1,0,0,0,800,766,1,0,0,0,800,769,1,0,0,0,800,771,1,0,0,0,
		800,777,1,0,0,0,800,787,1,0,0,0,800,790,1,0,0,0,800,795,1,0,0,0,801,804,
		1,0,0,0,802,800,1,0,0,0,802,803,1,0,0,0,803,113,1,0,0,0,804,802,1,0,0,
		0,805,822,5,98,0,0,806,822,3,168,84,0,807,822,3,172,86,0,808,822,3,174,
		87,0,809,812,3,170,85,0,810,811,5,33,0,0,811,813,5,34,0,0,812,810,1,0,
		0,0,812,813,1,0,0,0,813,822,1,0,0,0,814,822,5,118,0,0,815,822,3,126,63,
		0,816,819,3,128,64,0,817,818,5,33,0,0,818,820,5,34,0,0,819,817,1,0,0,0,
		819,820,1,0,0,0,820,822,1,0,0,0,821,805,1,0,0,0,821,806,1,0,0,0,821,807,
		1,0,0,0,821,808,1,0,0,0,821,809,1,0,0,0,821,814,1,0,0,0,821,815,1,0,0,
		0,821,816,1,0,0,0,822,115,1,0,0,0,823,828,3,112,56,0,824,825,5,15,0,0,
		825,827,3,112,56,0,826,824,1,0,0,0,827,830,1,0,0,0,828,826,1,0,0,0,828,
		829,1,0,0,0,829,117,1,0,0,0,830,828,1,0,0,0,831,836,3,120,60,0,832,833,
		5,15,0,0,833,835,3,120,60,0,834,832,1,0,0,0,835,838,1,0,0,0,836,834,1,
		0,0,0,836,837,1,0,0,0,837,840,1,0,0,0,838,836,1,0,0,0,839,841,5,15,0,0,
		840,839,1,0,0,0,840,841,1,0,0,0,841,119,1,0,0,0,842,843,3,170,85,0,843,
		844,5,59,0,0,844,845,3,112,56,0,845,121,1,0,0,0,846,848,5,14,0,0,847,849,
		3,118,59,0,848,847,1,0,0,0,848,849,1,0,0,0,849,850,1,0,0,0,850,855,5,16,
		0,0,851,853,3,116,58,0,852,851,1,0,0,0,852,853,1,0,0,0,853,855,1,0,0,0,
		854,846,1,0,0,0,854,852,1,0,0,0,855,123,1,0,0,0,856,857,3,112,56,0,857,
		858,5,22,0,0,858,859,3,122,61,0,859,860,5,23,0,0,860,125,1,0,0,0,861,863,
		5,22,0,0,862,864,3,112,56,0,863,862,1,0,0,0,863,864,1,0,0,0,864,871,1,
		0,0,0,865,867,5,15,0,0,866,868,3,112,56,0,867,866,1,0,0,0,867,868,1,0,
		0,0,868,870,1,0,0,0,869,865,1,0,0,0,870,873,1,0,0,0,871,869,1,0,0,0,871,
		872,1,0,0,0,872,874,1,0,0,0,873,871,1,0,0,0,874,888,5,23,0,0,875,884,5,
		33,0,0,876,881,3,112,56,0,877,878,5,15,0,0,878,880,3,112,56,0,879,877,
		1,0,0,0,880,883,1,0,0,0,881,879,1,0,0,0,881,882,1,0,0,0,882,885,1,0,0,
		0,883,881,1,0,0,0,884,876,1,0,0,0,884,885,1,0,0,0,885,886,1,0,0,0,886,
		888,5,34,0,0,887,861,1,0,0,0,887,875,1,0,0,0,888,127,1,0,0,0,889,892,3,
		110,55,0,890,892,3,62,31,0,891,889,1,0,0,0,891,890,1,0,0,0,892,129,1,0,
		0,0,893,912,3,170,85,0,894,912,3,132,66,0,895,912,3,134,67,0,896,912,3,
		138,69,0,897,912,3,140,70,0,898,912,3,144,72,0,899,912,3,146,73,0,900,
		912,3,148,74,0,901,912,3,152,76,0,902,912,3,156,78,0,903,912,3,158,79,
		0,904,912,5,105,0,0,905,912,5,108,0,0,906,912,5,109,0,0,907,912,3,166,
		83,0,908,912,3,168,84,0,909,912,3,174,87,0,910,912,3,172,86,0,911,893,
		1,0,0,0,911,894,1,0,0,0,911,895,1,0,0,0,911,896,1,0,0,0,911,897,1,0,0,
		0,911,898,1,0,0,0,911,899,1,0,0,0,911,900,1,0,0,0,911,901,1,0,0,0,911,
		902,1,0,0,0,911,903,1,0,0,0,911,904,1,0,0,0,911,905,1,0,0,0,911,906,1,
		0,0,0,911,907,1,0,0,0,911,908,1,0,0,0,911,909,1,0,0,0,911,910,1,0,0,0,
		912,131,1,0,0,0,913,917,5,14,0,0,914,916,3,130,65,0,915,914,1,0,0,0,916,
		919,1,0,0,0,917,915,1,0,0,0,917,918,1,0,0,0,918,920,1,0,0,0,919,917,1,
		0,0,0,920,921,5,16,0,0,921,133,1,0,0,0,922,925,3,136,68,0,923,925,3,160,
		80,0,924,922,1,0,0,0,924,923,1,0,0,0,925,135,1,0,0,0,926,931,5,48,0,0,
		927,931,5,52,0,0,928,931,5,55,0,0,929,931,3,170,85,0,930,926,1,0,0,0,930,
		927,1,0,0,0,930,928,1,0,0,0,930,929,1,0,0,0,931,944,1,0,0,0,932,934,5,
		22,0,0,933,935,3,134,67,0,934,933,1,0,0,0,934,935,1,0,0,0,935,940,1,0,
		0,0,936,937,5,15,0,0,937,939,3,134,67,0,938,936,1,0,0,0,939,942,1,0,0,
		0,940,938,1,0,0,0,940,941,1,0,0,0,941,943,1,0,0,0,942,940,1,0,0,0,943,
		945,5,23,0,0,944,932,1,0,0,0,944,945,1,0,0,0,945,137,1,0,0,0,946,947,5,
		87,0,0,947,950,3,142,71,0,948,949,5,88,0,0,949,951,3,134,67,0,950,948,
		1,0,0,0,950,951,1,0,0,0,951,139,1,0,0,0,952,953,3,142,71,0,953,954,5,88,
		0,0,954,955,3,134,67,0,955,141,1,0,0,0,956,961,3,170,85,0,957,958,5,15,
		0,0,958,960,3,170,85,0,959,957,1,0,0,0,960,963,1,0,0,0,961,959,1,0,0,0,
		961,962,1,0,0,0,962,143,1,0,0,0,963,961,1,0,0,0,964,965,5,89,0,0,965,966,
		3,170,85,0,966,145,1,0,0,0,967,968,3,170,85,0,968,969,5,59,0,0,969,147,
		1,0,0,0,970,971,5,90,0,0,971,975,3,134,67,0,972,974,3,150,75,0,973,972,
		1,0,0,0,974,977,1,0,0,0,975,973,1,0,0,0,975,976,1,0,0,0,976,149,1,0,0,
		0,977,975,1,0,0,0,978,979,5,91,0,0,979,981,3,160,80,0,980,982,3,164,82,
		0,981,980,1,0,0,0,981,982,1,0,0,0,982,983,1,0,0,0,983,984,3,132,66,0,984,
		988,1,0,0,0,985,986,5,92,0,0,986,988,3,132,66,0,987,978,1,0,0,0,987,985,
		1,0,0,0,988,151,1,0,0,0,989,990,5,29,0,0,990,991,3,170,85,0,991,993,5,
		22,0,0,992,994,3,162,81,0,993,992,1,0,0,0,993,994,1,0,0,0,994,995,1,0,
		0,0,995,997,5,23,0,0,996,998,3,154,77,0,997,996,1,0,0,0,997,998,1,0,0,
		0,998,999,1,0,0,0,999,1000,3,132,66,0,1000,153,1,0,0,0,1001,1002,5,61,
		0,0,1002,1003,5,6,0,0,1003,1004,3,162,81,0,1004,155,1,0,0,0,1005,1006,
		5,26,0,0,1006,1007,3,132,66,0,1007,1008,3,134,67,0,1008,1009,3,132,66,
		0,1009,1010,3,132,66,0,1010,157,1,0,0,0,1011,1012,5,41,0,0,1012,1013,3,
		134,67,0,1013,1014,3,132,66,0,1014,159,1,0,0,0,1015,1021,3,174,87,0,1016,
		1021,5,99,0,0,1017,1021,5,100,0,0,1018,1021,3,172,86,0,1019,1021,5,98,
		0,0,1020,1015,1,0,0,0,1020,1016,1,0,0,0,1020,1017,1,0,0,0,1020,1018,1,
		0,0,0,1020,1019,1,0,0,0,1021,1023,1,0,0,0,1022,1024,3,164,82,0,1023,1022,
		1,0,0,0,1023,1024,1,0,0,0,1024,161,1,0,0,0,1025,1027,3,170,85,0,1026,1028,
		3,164,82,0,1027,1026,1,0,0,0,1027,1028,1,0,0,0,1028,1031,1,0,0,0,1029,
		1030,5,15,0,0,1030,1032,3,162,81,0,1031,1029,1,0,0,0,1031,1032,1,0,0,0,
		1032,163,1,0,0,0,1033,1034,5,59,0,0,1034,1035,3,170,85,0,1035,165,1,0,
		0,0,1036,1037,5,46,0,0,1037,1038,3,170,85,0,1038,1039,3,132,66,0,1039,
		167,1,0,0,0,1040,1042,7,12,0,0,1041,1043,5,101,0,0,1042,1041,1,0,0,0,1042,
		1043,1,0,0,0,1043,169,1,0,0,0,1044,1045,7,13,0,0,1045,171,1,0,0,0,1046,
		1048,5,102,0,0,1047,1046,1,0,0,0,1048,1049,1,0,0,0,1049,1047,1,0,0,0,1049,
		1050,1,0,0,0,1050,173,1,0,0,0,1051,1053,5,124,0,0,1052,1051,1,0,0,0,1053,
		1054,1,0,0,0,1054,1052,1,0,0,0,1054,1055,1,0,0,0,1055,175,1,0,0,0,122,
		181,183,197,201,204,214,220,224,236,244,249,252,262,265,271,279,282,291,
		300,302,308,319,324,331,345,348,355,359,361,366,372,376,382,387,400,402,
		408,411,417,425,431,444,447,453,456,464,467,473,476,480,489,494,499,507,
		514,524,534,552,564,569,575,579,582,596,600,603,610,614,634,652,656,661,
		665,669,674,679,683,689,700,725,774,780,784,800,802,812,819,821,828,836,
		840,848,852,854,863,867,871,881,884,887,891,911,917,924,930,934,940,944,
		950,961,975,981,987,993,997,1020,1023,1027,1031,1042,1049,1054
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
