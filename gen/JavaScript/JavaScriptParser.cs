//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.9.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from /Users/maxfarsikov/IdeaProjects/antlr-parser/grammars/JavaScriptParser.g4 by ANTLR 4.9.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.9.1")]
[System.CLSCompliant(false)]
public partial class JavaScriptParser : JavaScriptParserBase {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		HashBangLine=1, MultiLineComment=2, SingleLineComment=3, RegularExpressionLiteral=4, 
		OpenBracket=5, CloseBracket=6, OpenParen=7, CloseParen=8, OpenBrace=9, 
		CloseBrace=10, SemiColon=11, Comma=12, Assign=13, QuestionMark=14, Colon=15, 
		Ellipsis=16, Dot=17, PlusPlus=18, MinusMinus=19, Plus=20, Minus=21, BitNot=22, 
		Not=23, Multiply=24, Divide=25, Modulus=26, Power=27, NullCoalesce=28, 
		Hashtag=29, RightShiftArithmetic=30, LeftShiftArithmetic=31, RightShiftLogical=32, 
		LessThan=33, MoreThan=34, LessThanEquals=35, GreaterThanEquals=36, Equals_=37, 
		NotEquals=38, IdentityEquals=39, IdentityNotEquals=40, BitAnd=41, BitXOr=42, 
		BitOr=43, And=44, Or=45, MultiplyAssign=46, DivideAssign=47, ModulusAssign=48, 
		PlusAssign=49, MinusAssign=50, LeftShiftArithmeticAssign=51, RightShiftArithmeticAssign=52, 
		RightShiftLogicalAssign=53, BitAndAssign=54, BitXorAssign=55, BitOrAssign=56, 
		PowerAssign=57, ARROW=58, NullLiteral=59, BooleanLiteral=60, DecimalLiteral=61, 
		HexIntegerLiteral=62, OctalIntegerLiteral=63, OctalIntegerLiteral2=64, 
		BinaryIntegerLiteral=65, BigHexIntegerLiteral=66, BigOctalIntegerLiteral=67, 
		BigBinaryIntegerLiteral=68, BigDecimalIntegerLiteral=69, Break=70, Do=71, 
		Instanceof=72, Typeof=73, Case=74, Else=75, New=76, Var=77, Catch=78, 
		Finally=79, Return=80, Void=81, Continue=82, For=83, Switch=84, While=85, 
		Debugger=86, Function_=87, This=88, With=89, Default=90, If=91, Throw=92, 
		Delete=93, In=94, Try=95, As=96, From=97, Class=98, Enum=99, Extends=100, 
		Super=101, Const=102, Export=103, Import=104, Async=105, Await=106, Implements=107, 
		StrictLet=108, NonStrictLet=109, Private=110, Public=111, Interface=112, 
		Package=113, Protected=114, Static=115, Yield=116, Identifier=117, StringLiteral=118, 
		TemplateStringLiteral=119, WhiteSpaces=120, LineTerminator=121, HtmlComment=122, 
		CDataComment=123, UnexpectedCharacter=124;
	public const int
		RULE_program = 0, RULE_sourceElement = 1, RULE_statement = 2, RULE_block = 3, 
		RULE_statementList = 4, RULE_importStatement = 5, RULE_importFromBlock = 6, 
		RULE_moduleItems = 7, RULE_importDefault = 8, RULE_importNamespace = 9, 
		RULE_importFrom = 10, RULE_aliasName = 11, RULE_exportStatement = 12, 
		RULE_exportFromBlock = 13, RULE_declaration = 14, RULE_variableStatement = 15, 
		RULE_variableDeclarationList = 16, RULE_variableDeclaration = 17, RULE_emptyStatement = 18, 
		RULE_expressionStatement = 19, RULE_ifStatement = 20, RULE_iterationStatement = 21, 
		RULE_varModifier = 22, RULE_continueStatement = 23, RULE_breakStatement = 24, 
		RULE_returnStatement = 25, RULE_yieldStatement = 26, RULE_withStatement = 27, 
		RULE_switchStatement = 28, RULE_caseBlock = 29, RULE_caseClauses = 30, 
		RULE_caseClause = 31, RULE_defaultClause = 32, RULE_labelledStatement = 33, 
		RULE_throwStatement = 34, RULE_tryStatement = 35, RULE_catchProduction = 36, 
		RULE_finallyProduction = 37, RULE_debuggerStatement = 38, RULE_functionDeclaration = 39, 
		RULE_classDeclaration = 40, RULE_classTail = 41, RULE_classElement = 42, 
		RULE_methodDefinition = 43, RULE_formalParameterList = 44, RULE_formalParameterArg = 45, 
		RULE_lastFormalParameterArg = 46, RULE_functionBody = 47, RULE_sourceElements = 48, 
		RULE_arrayLiteral = 49, RULE_elementList = 50, RULE_arrayElement = 51, 
		RULE_propertyAssignment = 52, RULE_propertyName = 53, RULE_arguments = 54, 
		RULE_argument = 55, RULE_expressionSequence = 56, RULE_singleExpression = 57, 
		RULE_assignable = 58, RULE_objectLiteral = 59, RULE_anonymousFunction = 60, 
		RULE_arrowFunctionParameters = 61, RULE_arrowFunctionBody = 62, RULE_assignmentOperator = 63, 
		RULE_literal = 64, RULE_numericLiteral = 65, RULE_bigintLiteral = 66, 
		RULE_getter = 67, RULE_setter = 68, RULE_identifierName = 69, RULE_identifier = 70, 
		RULE_reservedWord = 71, RULE_keyword = 72, RULE_let_ = 73, RULE_eos = 74;
	public static readonly string[] ruleNames = {
		"program", "sourceElement", "statement", "block", "statementList", "importStatement", 
		"importFromBlock", "moduleItems", "importDefault", "importNamespace", 
		"importFrom", "aliasName", "exportStatement", "exportFromBlock", "declaration", 
		"variableStatement", "variableDeclarationList", "variableDeclaration", 
		"emptyStatement", "expressionStatement", "ifStatement", "iterationStatement", 
		"varModifier", "continueStatement", "breakStatement", "returnStatement", 
		"yieldStatement", "withStatement", "switchStatement", "caseBlock", "caseClauses", 
		"caseClause", "defaultClause", "labelledStatement", "throwStatement", 
		"tryStatement", "catchProduction", "finallyProduction", "debuggerStatement", 
		"functionDeclaration", "classDeclaration", "classTail", "classElement", 
		"methodDefinition", "formalParameterList", "formalParameterArg", "lastFormalParameterArg", 
		"functionBody", "sourceElements", "arrayLiteral", "elementList", "arrayElement", 
		"propertyAssignment", "propertyName", "arguments", "argument", "expressionSequence", 
		"singleExpression", "assignable", "objectLiteral", "anonymousFunction", 
		"arrowFunctionParameters", "arrowFunctionBody", "assignmentOperator", 
		"literal", "numericLiteral", "bigintLiteral", "getter", "setter", "identifierName", 
		"identifier", "reservedWord", "keyword", "let_", "eos"
	};

	private static readonly string[] _LiteralNames = {
		null, null, null, null, null, "'['", "']'", "'('", "')'", "'{'", "'}'", 
		"';'", "','", "'='", "'?'", "':'", "'...'", "'.'", "'++'", "'--'", "'+'", 
		"'-'", "'~'", "'!'", "'*'", "'/'", "'%'", "'**'", "'??'", "'#'", "'>>'", 
		"'<<'", "'>>>'", "'<'", "'>'", "'<='", "'>='", "'=='", "'!='", "'==='", 
		"'!=='", "'&'", "'^'", "'|'", "'&&'", "'||'", "'*='", "'/='", "'%='", 
		"'+='", "'-='", "'<<='", "'>>='", "'>>>='", "'&='", "'^='", "'|='", "'**='", 
		"'=>'", "'null'", null, null, null, null, null, null, null, null, null, 
		null, "'break'", "'do'", "'instanceof'", "'typeof'", "'case'", "'else'", 
		"'new'", "'var'", "'catch'", "'finally'", "'return'", "'void'", "'continue'", 
		"'for'", "'switch'", "'while'", "'debugger'", "'function'", "'this'", 
		"'with'", "'default'", "'if'", "'throw'", "'delete'", "'in'", "'try'", 
		"'as'", "'from'", "'class'", "'enum'", "'extends'", "'super'", "'const'", 
		"'export'", "'import'", "'async'", "'await'", "'implements'", null, null, 
		"'private'", "'public'", "'interface'", "'package'", "'protected'", "'static'", 
		"'yield'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "HashBangLine", "MultiLineComment", "SingleLineComment", "RegularExpressionLiteral", 
		"OpenBracket", "CloseBracket", "OpenParen", "CloseParen", "OpenBrace", 
		"CloseBrace", "SemiColon", "Comma", "Assign", "QuestionMark", "Colon", 
		"Ellipsis", "Dot", "PlusPlus", "MinusMinus", "Plus", "Minus", "BitNot", 
		"Not", "Multiply", "Divide", "Modulus", "Power", "NullCoalesce", "Hashtag", 
		"RightShiftArithmetic", "LeftShiftArithmetic", "RightShiftLogical", "LessThan", 
		"MoreThan", "LessThanEquals", "GreaterThanEquals", "Equals_", "NotEquals", 
		"IdentityEquals", "IdentityNotEquals", "BitAnd", "BitXOr", "BitOr", "And", 
		"Or", "MultiplyAssign", "DivideAssign", "ModulusAssign", "PlusAssign", 
		"MinusAssign", "LeftShiftArithmeticAssign", "RightShiftArithmeticAssign", 
		"RightShiftLogicalAssign", "BitAndAssign", "BitXorAssign", "BitOrAssign", 
		"PowerAssign", "ARROW", "NullLiteral", "BooleanLiteral", "DecimalLiteral", 
		"HexIntegerLiteral", "OctalIntegerLiteral", "OctalIntegerLiteral2", "BinaryIntegerLiteral", 
		"BigHexIntegerLiteral", "BigOctalIntegerLiteral", "BigBinaryIntegerLiteral", 
		"BigDecimalIntegerLiteral", "Break", "Do", "Instanceof", "Typeof", "Case", 
		"Else", "New", "Var", "Catch", "Finally", "Return", "Void", "Continue", 
		"For", "Switch", "While", "Debugger", "Function_", "This", "With", "Default", 
		"If", "Throw", "Delete", "In", "Try", "As", "From", "Class", "Enum", "Extends", 
		"Super", "Const", "Export", "Import", "Async", "Await", "Implements", 
		"StrictLet", "NonStrictLet", "Private", "Public", "Interface", "Package", 
		"Protected", "Static", "Yield", "Identifier", "StringLiteral", "TemplateStringLiteral", 
		"WhiteSpaces", "LineTerminator", "HtmlComment", "CDataComment", "UnexpectedCharacter"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "JavaScriptParser.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static JavaScriptParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public JavaScriptParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public JavaScriptParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class ProgramContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(JavaScriptParser.Eof, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HashBangLine() { return GetToken(JavaScriptParser.HashBangLine, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SourceElementsContext sourceElements() {
			return GetRuleContext<SourceElementsContext>(0);
		}
		public ProgramContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_program; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.EnterProgram(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.ExitProgram(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaScriptParserVisitor<TResult> typedVisitor = visitor as IJavaScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProgram(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ProgramContext program() {
		ProgramContext _localctx = new ProgramContext(Context, State);
		EnterRule(_localctx, 0, RULE_program);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 151;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,0,Context) ) {
			case 1:
				{
				State = 150;
				Match(HashBangLine);
				}
				break;
			}
			State = 154;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1,Context) ) {
			case 1:
				{
				State = 153;
				sourceElements();
				}
				break;
			}
			State = 156;
			Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SourceElementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		public SourceElementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sourceElement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.EnterSourceElement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.ExitSourceElement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaScriptParserVisitor<TResult> typedVisitor = visitor as IJavaScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSourceElement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SourceElementContext sourceElement() {
		SourceElementContext _localctx = new SourceElementContext(Context, State);
		EnterRule(_localctx, 2, RULE_sourceElement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 158;
			statement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public VariableStatementContext variableStatement() {
			return GetRuleContext<VariableStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ImportStatementContext importStatement() {
			return GetRuleContext<ImportStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExportStatementContext exportStatement() {
			return GetRuleContext<ExportStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public EmptyStatementContext emptyStatement() {
			return GetRuleContext<EmptyStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ClassDeclarationContext classDeclaration() {
			return GetRuleContext<ClassDeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionStatementContext expressionStatement() {
			return GetRuleContext<ExpressionStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IfStatementContext ifStatement() {
			return GetRuleContext<IfStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IterationStatementContext iterationStatement() {
			return GetRuleContext<IterationStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ContinueStatementContext continueStatement() {
			return GetRuleContext<ContinueStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BreakStatementContext breakStatement() {
			return GetRuleContext<BreakStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ReturnStatementContext returnStatement() {
			return GetRuleContext<ReturnStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public YieldStatementContext yieldStatement() {
			return GetRuleContext<YieldStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public WithStatementContext withStatement() {
			return GetRuleContext<WithStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LabelledStatementContext labelledStatement() {
			return GetRuleContext<LabelledStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SwitchStatementContext switchStatement() {
			return GetRuleContext<SwitchStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ThrowStatementContext throwStatement() {
			return GetRuleContext<ThrowStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TryStatementContext tryStatement() {
			return GetRuleContext<TryStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DebuggerStatementContext debuggerStatement() {
			return GetRuleContext<DebuggerStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionDeclarationContext functionDeclaration() {
			return GetRuleContext<FunctionDeclarationContext>(0);
		}
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.EnterStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.ExitStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaScriptParserVisitor<TResult> typedVisitor = visitor as IJavaScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		StatementContext _localctx = new StatementContext(Context, State);
		EnterRule(_localctx, 4, RULE_statement);
		try {
			State = 180;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,2,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 160;
				block();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 161;
				variableStatement();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 162;
				importStatement();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 163;
				exportStatement();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 164;
				emptyStatement();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 165;
				classDeclaration();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 166;
				expressionStatement();
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 167;
				ifStatement();
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 168;
				iterationStatement();
				}
				break;
			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 169;
				continueStatement();
				}
				break;
			case 11:
				EnterOuterAlt(_localctx, 11);
				{
				State = 170;
				breakStatement();
				}
				break;
			case 12:
				EnterOuterAlt(_localctx, 12);
				{
				State = 171;
				returnStatement();
				}
				break;
			case 13:
				EnterOuterAlt(_localctx, 13);
				{
				State = 172;
				yieldStatement();
				}
				break;
			case 14:
				EnterOuterAlt(_localctx, 14);
				{
				State = 173;
				withStatement();
				}
				break;
			case 15:
				EnterOuterAlt(_localctx, 15);
				{
				State = 174;
				labelledStatement();
				}
				break;
			case 16:
				EnterOuterAlt(_localctx, 16);
				{
				State = 175;
				switchStatement();
				}
				break;
			case 17:
				EnterOuterAlt(_localctx, 17);
				{
				State = 176;
				throwStatement();
				}
				break;
			case 18:
				EnterOuterAlt(_localctx, 18);
				{
				State = 177;
				tryStatement();
				}
				break;
			case 19:
				EnterOuterAlt(_localctx, 19);
				{
				State = 178;
				debuggerStatement();
				}
				break;
			case 20:
				EnterOuterAlt(_localctx, 20);
				{
				State = 179;
				functionDeclaration();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlockContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OpenBrace() { return GetToken(JavaScriptParser.OpenBrace, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CloseBrace() { return GetToken(JavaScriptParser.CloseBrace, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementListContext statementList() {
			return GetRuleContext<StatementListContext>(0);
		}
		public BlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_block; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.EnterBlock(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.ExitBlock(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaScriptParserVisitor<TResult> typedVisitor = visitor as IJavaScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BlockContext block() {
		BlockContext _localctx = new BlockContext(Context, State);
		EnterRule(_localctx, 6, RULE_block);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 182;
			Match(OpenBrace);
			State = 184;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,3,Context) ) {
			case 1:
				{
				State = 183;
				statementList();
				}
				break;
			}
			State = 186;
			Match(CloseBrace);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public StatementListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statementList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.EnterStatementList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.ExitStatementList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaScriptParserVisitor<TResult> typedVisitor = visitor as IJavaScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatementList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementListContext statementList() {
		StatementListContext _localctx = new StatementListContext(Context, State);
		EnterRule(_localctx, 8, RULE_statementList);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 189;
			ErrorHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 188;
					statement();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 191;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,4,Context);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ImportStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Import() { return GetToken(JavaScriptParser.Import, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ImportFromBlockContext importFromBlock() {
			return GetRuleContext<ImportFromBlockContext>(0);
		}
		public ImportStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_importStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.EnterImportStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.ExitImportStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaScriptParserVisitor<TResult> typedVisitor = visitor as IJavaScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitImportStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ImportStatementContext importStatement() {
		ImportStatementContext _localctx = new ImportStatementContext(Context, State);
		EnterRule(_localctx, 10, RULE_importStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 193;
			Match(Import);
			State = 194;
			importFromBlock();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ImportFromBlockContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ImportFromContext importFrom() {
			return GetRuleContext<ImportFromContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public EosContext eos() {
			return GetRuleContext<EosContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ImportNamespaceContext importNamespace() {
			return GetRuleContext<ImportNamespaceContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ModuleItemsContext moduleItems() {
			return GetRuleContext<ModuleItemsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ImportDefaultContext importDefault() {
			return GetRuleContext<ImportDefaultContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode StringLiteral() { return GetToken(JavaScriptParser.StringLiteral, 0); }
		public ImportFromBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_importFromBlock; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.EnterImportFromBlock(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.ExitImportFromBlock(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaScriptParserVisitor<TResult> typedVisitor = visitor as IJavaScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitImportFromBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ImportFromBlockContext importFromBlock() {
		ImportFromBlockContext _localctx = new ImportFromBlockContext(Context, State);
		EnterRule(_localctx, 12, RULE_importFromBlock);
		try {
			State = 208;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case OpenBrace:
			case Multiply:
			case NullLiteral:
			case BooleanLiteral:
			case Break:
			case Do:
			case Instanceof:
			case Typeof:
			case Case:
			case Else:
			case New:
			case Var:
			case Catch:
			case Finally:
			case Return:
			case Void:
			case Continue:
			case For:
			case Switch:
			case While:
			case Debugger:
			case Function_:
			case This:
			case With:
			case Default:
			case If:
			case Throw:
			case Delete:
			case In:
			case Try:
			case As:
			case From:
			case Class:
			case Enum:
			case Extends:
			case Super:
			case Const:
			case Export:
			case Import:
			case Async:
			case Await:
			case Implements:
			case StrictLet:
			case NonStrictLet:
			case Private:
			case Public:
			case Interface:
			case Package:
			case Protected:
			case Static:
			case Yield:
			case Identifier:
				EnterOuterAlt(_localctx, 1);
				{
				State = 197;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,5,Context) ) {
				case 1:
					{
					State = 196;
					importDefault();
					}
					break;
				}
				State = 201;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case Multiply:
				case NullLiteral:
				case BooleanLiteral:
				case Break:
				case Do:
				case Instanceof:
				case Typeof:
				case Case:
				case Else:
				case New:
				case Var:
				case Catch:
				case Finally:
				case Return:
				case Void:
				case Continue:
				case For:
				case Switch:
				case While:
				case Debugger:
				case Function_:
				case This:
				case With:
				case Default:
				case If:
				case Throw:
				case Delete:
				case In:
				case Try:
				case As:
				case From:
				case Class:
				case Enum:
				case Extends:
				case Super:
				case Const:
				case Export:
				case Import:
				case Async:
				case Await:
				case Implements:
				case StrictLet:
				case NonStrictLet:
				case Private:
				case Public:
				case Interface:
				case Package:
				case Protected:
				case Static:
				case Yield:
				case Identifier:
					{
					State = 199;
					importNamespace();
					}
					break;
				case OpenBrace:
					{
					State = 200;
					moduleItems();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 203;
				importFrom();
				State = 204;
				eos();
				}
				break;
			case StringLiteral:
				EnterOuterAlt(_localctx, 2);
				{
				State = 206;
				Match(StringLiteral);
				State = 207;
				eos();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ModuleItemsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OpenBrace() { return GetToken(JavaScriptParser.OpenBrace, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CloseBrace() { return GetToken(JavaScriptParser.CloseBrace, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public AliasNameContext[] aliasName() {
			return GetRuleContexts<AliasNameContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AliasNameContext aliasName(int i) {
			return GetRuleContext<AliasNameContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Comma() { return GetTokens(JavaScriptParser.Comma); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comma(int i) {
			return GetToken(JavaScriptParser.Comma, i);
		}
		public ModuleItemsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_moduleItems; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.EnterModuleItems(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.ExitModuleItems(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaScriptParserVisitor<TResult> typedVisitor = visitor as IJavaScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitModuleItems(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ModuleItemsContext moduleItems() {
		ModuleItemsContext _localctx = new ModuleItemsContext(Context, State);
		EnterRule(_localctx, 14, RULE_moduleItems);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 210;
			Match(OpenBrace);
			State = 216;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,8,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 211;
					aliasName();
					State = 212;
					Match(Comma);
					}
					} 
				}
				State = 218;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,8,Context);
			}
			State = 223;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (((((_la - 59)) & ~0x3f) == 0 && ((1L << (_la - 59)) & ((1L << (NullLiteral - 59)) | (1L << (BooleanLiteral - 59)) | (1L << (Break - 59)) | (1L << (Do - 59)) | (1L << (Instanceof - 59)) | (1L << (Typeof - 59)) | (1L << (Case - 59)) | (1L << (Else - 59)) | (1L << (New - 59)) | (1L << (Var - 59)) | (1L << (Catch - 59)) | (1L << (Finally - 59)) | (1L << (Return - 59)) | (1L << (Void - 59)) | (1L << (Continue - 59)) | (1L << (For - 59)) | (1L << (Switch - 59)) | (1L << (While - 59)) | (1L << (Debugger - 59)) | (1L << (Function_ - 59)) | (1L << (This - 59)) | (1L << (With - 59)) | (1L << (Default - 59)) | (1L << (If - 59)) | (1L << (Throw - 59)) | (1L << (Delete - 59)) | (1L << (In - 59)) | (1L << (Try - 59)) | (1L << (As - 59)) | (1L << (From - 59)) | (1L << (Class - 59)) | (1L << (Enum - 59)) | (1L << (Extends - 59)) | (1L << (Super - 59)) | (1L << (Const - 59)) | (1L << (Export - 59)) | (1L << (Import - 59)) | (1L << (Async - 59)) | (1L << (Await - 59)) | (1L << (Implements - 59)) | (1L << (StrictLet - 59)) | (1L << (NonStrictLet - 59)) | (1L << (Private - 59)) | (1L << (Public - 59)) | (1L << (Interface - 59)) | (1L << (Package - 59)) | (1L << (Protected - 59)) | (1L << (Static - 59)) | (1L << (Yield - 59)) | (1L << (Identifier - 59)))) != 0)) {
				{
				State = 219;
				aliasName();
				State = 221;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==Comma) {
					{
					State = 220;
					Match(Comma);
					}
				}

				}
			}

			State = 225;
			Match(CloseBrace);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ImportDefaultContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public AliasNameContext aliasName() {
			return GetRuleContext<AliasNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comma() { return GetToken(JavaScriptParser.Comma, 0); }
		public ImportDefaultContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_importDefault; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.EnterImportDefault(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.ExitImportDefault(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaScriptParserVisitor<TResult> typedVisitor = visitor as IJavaScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitImportDefault(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ImportDefaultContext importDefault() {
		ImportDefaultContext _localctx = new ImportDefaultContext(Context, State);
		EnterRule(_localctx, 16, RULE_importDefault);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 227;
			aliasName();
			State = 228;
			Match(Comma);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ImportNamespaceContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Multiply() { return GetToken(JavaScriptParser.Multiply, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierNameContext[] identifierName() {
			return GetRuleContexts<IdentifierNameContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierNameContext identifierName(int i) {
			return GetRuleContext<IdentifierNameContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode As() { return GetToken(JavaScriptParser.As, 0); }
		public ImportNamespaceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_importNamespace; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.EnterImportNamespace(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.ExitImportNamespace(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaScriptParserVisitor<TResult> typedVisitor = visitor as IJavaScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitImportNamespace(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ImportNamespaceContext importNamespace() {
		ImportNamespaceContext _localctx = new ImportNamespaceContext(Context, State);
		EnterRule(_localctx, 18, RULE_importNamespace);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 232;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case Multiply:
				{
				State = 230;
				Match(Multiply);
				}
				break;
			case NullLiteral:
			case BooleanLiteral:
			case Break:
			case Do:
			case Instanceof:
			case Typeof:
			case Case:
			case Else:
			case New:
			case Var:
			case Catch:
			case Finally:
			case Return:
			case Void:
			case Continue:
			case For:
			case Switch:
			case While:
			case Debugger:
			case Function_:
			case This:
			case With:
			case Default:
			case If:
			case Throw:
			case Delete:
			case In:
			case Try:
			case As:
			case From:
			case Class:
			case Enum:
			case Extends:
			case Super:
			case Const:
			case Export:
			case Import:
			case Async:
			case Await:
			case Implements:
			case StrictLet:
			case NonStrictLet:
			case Private:
			case Public:
			case Interface:
			case Package:
			case Protected:
			case Static:
			case Yield:
			case Identifier:
				{
				State = 231;
				identifierName();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 236;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==As) {
				{
				State = 234;
				Match(As);
				State = 235;
				identifierName();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ImportFromContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode From() { return GetToken(JavaScriptParser.From, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode StringLiteral() { return GetToken(JavaScriptParser.StringLiteral, 0); }
		public ImportFromContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_importFrom; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.EnterImportFrom(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.ExitImportFrom(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaScriptParserVisitor<TResult> typedVisitor = visitor as IJavaScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitImportFrom(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ImportFromContext importFrom() {
		ImportFromContext _localctx = new ImportFromContext(Context, State);
		EnterRule(_localctx, 20, RULE_importFrom);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 238;
			Match(From);
			State = 239;
			Match(StringLiteral);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AliasNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierNameContext[] identifierName() {
			return GetRuleContexts<IdentifierNameContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierNameContext identifierName(int i) {
			return GetRuleContext<IdentifierNameContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode As() { return GetToken(JavaScriptParser.As, 0); }
		public AliasNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_aliasName; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.EnterAliasName(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.ExitAliasName(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaScriptParserVisitor<TResult> typedVisitor = visitor as IJavaScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAliasName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AliasNameContext aliasName() {
		AliasNameContext _localctx = new AliasNameContext(Context, State);
		EnterRule(_localctx, 22, RULE_aliasName);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 241;
			identifierName();
			State = 244;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==As) {
				{
				State = 242;
				Match(As);
				State = 243;
				identifierName();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExportStatementContext : ParserRuleContext {
		public ExportStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_exportStatement; } }
	 
		public ExportStatementContext() { }
		public virtual void CopyFrom(ExportStatementContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class ExportDefaultDeclarationContext : ExportStatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Export() { return GetToken(JavaScriptParser.Export, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Default() { return GetToken(JavaScriptParser.Default, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SingleExpressionContext singleExpression() {
			return GetRuleContext<SingleExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public EosContext eos() {
			return GetRuleContext<EosContext>(0);
		}
		public ExportDefaultDeclarationContext(ExportStatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.EnterExportDefaultDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.ExitExportDefaultDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaScriptParserVisitor<TResult> typedVisitor = visitor as IJavaScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExportDefaultDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ExportDeclarationContext : ExportStatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Export() { return GetToken(JavaScriptParser.Export, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public EosContext eos() {
			return GetRuleContext<EosContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExportFromBlockContext exportFromBlock() {
			return GetRuleContext<ExportFromBlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DeclarationContext declaration() {
			return GetRuleContext<DeclarationContext>(0);
		}
		public ExportDeclarationContext(ExportStatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.EnterExportDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.ExitExportDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaScriptParserVisitor<TResult> typedVisitor = visitor as IJavaScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExportDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExportStatementContext exportStatement() {
		ExportStatementContext _localctx = new ExportStatementContext(Context, State);
		EnterRule(_localctx, 24, RULE_exportStatement);
		try {
			State = 258;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,15,Context) ) {
			case 1:
				_localctx = new ExportDeclarationContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 246;
				Match(Export);
				State = 249;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,14,Context) ) {
				case 1:
					{
					State = 247;
					exportFromBlock();
					}
					break;
				case 2:
					{
					State = 248;
					declaration();
					}
					break;
				}
				State = 251;
				eos();
				}
				break;
			case 2:
				_localctx = new ExportDefaultDeclarationContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 253;
				Match(Export);
				State = 254;
				Match(Default);
				State = 255;
				singleExpression(0);
				State = 256;
				eos();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExportFromBlockContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ImportNamespaceContext importNamespace() {
			return GetRuleContext<ImportNamespaceContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ImportFromContext importFrom() {
			return GetRuleContext<ImportFromContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public EosContext eos() {
			return GetRuleContext<EosContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ModuleItemsContext moduleItems() {
			return GetRuleContext<ModuleItemsContext>(0);
		}
		public ExportFromBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_exportFromBlock; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.EnterExportFromBlock(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.ExitExportFromBlock(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaScriptParserVisitor<TResult> typedVisitor = visitor as IJavaScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExportFromBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExportFromBlockContext exportFromBlock() {
		ExportFromBlockContext _localctx = new ExportFromBlockContext(Context, State);
		EnterRule(_localctx, 26, RULE_exportFromBlock);
		try {
			State = 270;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case Multiply:
			case NullLiteral:
			case BooleanLiteral:
			case Break:
			case Do:
			case Instanceof:
			case Typeof:
			case Case:
			case Else:
			case New:
			case Var:
			case Catch:
			case Finally:
			case Return:
			case Void:
			case Continue:
			case For:
			case Switch:
			case While:
			case Debugger:
			case Function_:
			case This:
			case With:
			case Default:
			case If:
			case Throw:
			case Delete:
			case In:
			case Try:
			case As:
			case From:
			case Class:
			case Enum:
			case Extends:
			case Super:
			case Const:
			case Export:
			case Import:
			case Async:
			case Await:
			case Implements:
			case StrictLet:
			case NonStrictLet:
			case Private:
			case Public:
			case Interface:
			case Package:
			case Protected:
			case Static:
			case Yield:
			case Identifier:
				EnterOuterAlt(_localctx, 1);
				{
				State = 260;
				importNamespace();
				State = 261;
				importFrom();
				State = 262;
				eos();
				}
				break;
			case OpenBrace:
				EnterOuterAlt(_localctx, 2);
				{
				State = 264;
				moduleItems();
				State = 266;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,16,Context) ) {
				case 1:
					{
					State = 265;
					importFrom();
					}
					break;
				}
				State = 268;
				eos();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public VariableStatementContext variableStatement() {
			return GetRuleContext<VariableStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ClassDeclarationContext classDeclaration() {
			return GetRuleContext<ClassDeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionDeclarationContext functionDeclaration() {
			return GetRuleContext<FunctionDeclarationContext>(0);
		}
		public DeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_declaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.EnterDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.ExitDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaScriptParserVisitor<TResult> typedVisitor = visitor as IJavaScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DeclarationContext declaration() {
		DeclarationContext _localctx = new DeclarationContext(Context, State);
		EnterRule(_localctx, 28, RULE_declaration);
		try {
			State = 275;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case Var:
			case Const:
			case StrictLet:
			case NonStrictLet:
				EnterOuterAlt(_localctx, 1);
				{
				State = 272;
				variableStatement();
				}
				break;
			case Class:
				EnterOuterAlt(_localctx, 2);
				{
				State = 273;
				classDeclaration();
				}
				break;
			case Function_:
			case Async:
				EnterOuterAlt(_localctx, 3);
				{
				State = 274;
				functionDeclaration();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariableStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public VariableDeclarationListContext variableDeclarationList() {
			return GetRuleContext<VariableDeclarationListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public EosContext eos() {
			return GetRuleContext<EosContext>(0);
		}
		public VariableStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variableStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.EnterVariableStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.ExitVariableStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaScriptParserVisitor<TResult> typedVisitor = visitor as IJavaScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariableStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VariableStatementContext variableStatement() {
		VariableStatementContext _localctx = new VariableStatementContext(Context, State);
		EnterRule(_localctx, 30, RULE_variableStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 277;
			variableDeclarationList();
			State = 278;
			eos();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariableDeclarationListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public VarModifierContext varModifier() {
			return GetRuleContext<VarModifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public VariableDeclarationContext[] variableDeclaration() {
			return GetRuleContexts<VariableDeclarationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public VariableDeclarationContext variableDeclaration(int i) {
			return GetRuleContext<VariableDeclarationContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Comma() { return GetTokens(JavaScriptParser.Comma); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comma(int i) {
			return GetToken(JavaScriptParser.Comma, i);
		}
		public VariableDeclarationListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variableDeclarationList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.EnterVariableDeclarationList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.ExitVariableDeclarationList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaScriptParserVisitor<TResult> typedVisitor = visitor as IJavaScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariableDeclarationList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VariableDeclarationListContext variableDeclarationList() {
		VariableDeclarationListContext _localctx = new VariableDeclarationListContext(Context, State);
		EnterRule(_localctx, 32, RULE_variableDeclarationList);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 280;
			varModifier();
			State = 281;
			variableDeclaration();
			State = 286;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,19,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 282;
					Match(Comma);
					State = 283;
					variableDeclaration();
					}
					} 
				}
				State = 288;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,19,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariableDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public AssignableContext assignable() {
			return GetRuleContext<AssignableContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Assign() { return GetToken(JavaScriptParser.Assign, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SingleExpressionContext singleExpression() {
			return GetRuleContext<SingleExpressionContext>(0);
		}
		public VariableDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variableDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.EnterVariableDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.ExitVariableDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaScriptParserVisitor<TResult> typedVisitor = visitor as IJavaScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariableDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VariableDeclarationContext variableDeclaration() {
		VariableDeclarationContext _localctx = new VariableDeclarationContext(Context, State);
		EnterRule(_localctx, 34, RULE_variableDeclaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 289;
			assignable();
			State = 292;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,20,Context) ) {
			case 1:
				{
				State = 290;
				Match(Assign);
				State = 291;
				singleExpression(0);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EmptyStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SemiColon() { return GetToken(JavaScriptParser.SemiColon, 0); }
		public EmptyStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_emptyStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.EnterEmptyStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.ExitEmptyStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaScriptParserVisitor<TResult> typedVisitor = visitor as IJavaScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEmptyStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EmptyStatementContext emptyStatement() {
		EmptyStatementContext _localctx = new EmptyStatementContext(Context, State);
		EnterRule(_localctx, 36, RULE_emptyStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 294;
			Match(SemiColon);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionSequenceContext expressionSequence() {
			return GetRuleContext<ExpressionSequenceContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public EosContext eos() {
			return GetRuleContext<EosContext>(0);
		}
		public ExpressionStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expressionStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.EnterExpressionStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.ExitExpressionStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaScriptParserVisitor<TResult> typedVisitor = visitor as IJavaScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpressionStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionStatementContext expressionStatement() {
		ExpressionStatementContext _localctx = new ExpressionStatementContext(Context, State);
		EnterRule(_localctx, 38, RULE_expressionStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 296;
			if (!(this.notOpenBraceAndNotFunction())) throw new FailedPredicateException(this, "this.notOpenBraceAndNotFunction()");
			State = 297;
			expressionSequence();
			State = 298;
			eos();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IfStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode If() { return GetToken(JavaScriptParser.If, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OpenParen() { return GetToken(JavaScriptParser.OpenParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionSequenceContext expressionSequence() {
			return GetRuleContext<ExpressionSequenceContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CloseParen() { return GetToken(JavaScriptParser.CloseParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Else() { return GetToken(JavaScriptParser.Else, 0); }
		public IfStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ifStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.EnterIfStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.ExitIfStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaScriptParserVisitor<TResult> typedVisitor = visitor as IJavaScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIfStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IfStatementContext ifStatement() {
		IfStatementContext _localctx = new IfStatementContext(Context, State);
		EnterRule(_localctx, 40, RULE_ifStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 300;
			Match(If);
			State = 301;
			Match(OpenParen);
			State = 302;
			expressionSequence();
			State = 303;
			Match(CloseParen);
			State = 304;
			statement();
			State = 307;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,21,Context) ) {
			case 1:
				{
				State = 305;
				Match(Else);
				State = 306;
				statement();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IterationStatementContext : ParserRuleContext {
		public IterationStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_iterationStatement; } }
	 
		public IterationStatementContext() { }
		public virtual void CopyFrom(IterationStatementContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class DoStatementContext : IterationStatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Do() { return GetToken(JavaScriptParser.Do, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode While() { return GetToken(JavaScriptParser.While, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OpenParen() { return GetToken(JavaScriptParser.OpenParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionSequenceContext expressionSequence() {
			return GetRuleContext<ExpressionSequenceContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CloseParen() { return GetToken(JavaScriptParser.CloseParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public EosContext eos() {
			return GetRuleContext<EosContext>(0);
		}
		public DoStatementContext(IterationStatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.EnterDoStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.ExitDoStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaScriptParserVisitor<TResult> typedVisitor = visitor as IJavaScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDoStatement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class WhileStatementContext : IterationStatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode While() { return GetToken(JavaScriptParser.While, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OpenParen() { return GetToken(JavaScriptParser.OpenParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionSequenceContext expressionSequence() {
			return GetRuleContext<ExpressionSequenceContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CloseParen() { return GetToken(JavaScriptParser.CloseParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		public WhileStatementContext(IterationStatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.EnterWhileStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.ExitWhileStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaScriptParserVisitor<TResult> typedVisitor = visitor as IJavaScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWhileStatement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ForStatementContext : IterationStatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode For() { return GetToken(JavaScriptParser.For, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OpenParen() { return GetToken(JavaScriptParser.OpenParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SemiColon() { return GetTokens(JavaScriptParser.SemiColon); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SemiColon(int i) {
			return GetToken(JavaScriptParser.SemiColon, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CloseParen() { return GetToken(JavaScriptParser.CloseParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionSequenceContext[] expressionSequence() {
			return GetRuleContexts<ExpressionSequenceContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionSequenceContext expressionSequence(int i) {
			return GetRuleContext<ExpressionSequenceContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public VariableDeclarationListContext variableDeclarationList() {
			return GetRuleContext<VariableDeclarationListContext>(0);
		}
		public ForStatementContext(IterationStatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.EnterForStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.ExitForStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaScriptParserVisitor<TResult> typedVisitor = visitor as IJavaScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForStatement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ForInStatementContext : IterationStatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode For() { return GetToken(JavaScriptParser.For, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OpenParen() { return GetToken(JavaScriptParser.OpenParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode In() { return GetToken(JavaScriptParser.In, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionSequenceContext expressionSequence() {
			return GetRuleContext<ExpressionSequenceContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CloseParen() { return GetToken(JavaScriptParser.CloseParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SingleExpressionContext singleExpression() {
			return GetRuleContext<SingleExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public VariableDeclarationListContext variableDeclarationList() {
			return GetRuleContext<VariableDeclarationListContext>(0);
		}
		public ForInStatementContext(IterationStatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.EnterForInStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.ExitForInStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaScriptParserVisitor<TResult> typedVisitor = visitor as IJavaScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForInStatement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ForOfStatementContext : IterationStatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode For() { return GetToken(JavaScriptParser.For, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OpenParen() { return GetToken(JavaScriptParser.OpenParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionSequenceContext expressionSequence() {
			return GetRuleContext<ExpressionSequenceContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CloseParen() { return GetToken(JavaScriptParser.CloseParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SingleExpressionContext singleExpression() {
			return GetRuleContext<SingleExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public VariableDeclarationListContext variableDeclarationList() {
			return GetRuleContext<VariableDeclarationListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Await() { return GetToken(JavaScriptParser.Await, 0); }
		public ForOfStatementContext(IterationStatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.EnterForOfStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.ExitForOfStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaScriptParserVisitor<TResult> typedVisitor = visitor as IJavaScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForOfStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IterationStatementContext iterationStatement() {
		IterationStatementContext _localctx = new IterationStatementContext(Context, State);
		EnterRule(_localctx, 42, RULE_iterationStatement);
		int _la;
		try {
			State = 365;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,28,Context) ) {
			case 1:
				_localctx = new DoStatementContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 309;
				Match(Do);
				State = 310;
				statement();
				State = 311;
				Match(While);
				State = 312;
				Match(OpenParen);
				State = 313;
				expressionSequence();
				State = 314;
				Match(CloseParen);
				State = 315;
				eos();
				}
				break;
			case 2:
				_localctx = new WhileStatementContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 317;
				Match(While);
				State = 318;
				Match(OpenParen);
				State = 319;
				expressionSequence();
				State = 320;
				Match(CloseParen);
				State = 321;
				statement();
				}
				break;
			case 3:
				_localctx = new ForStatementContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 323;
				Match(For);
				State = 324;
				Match(OpenParen);
				State = 327;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,22,Context) ) {
				case 1:
					{
					State = 325;
					expressionSequence();
					}
					break;
				case 2:
					{
					State = 326;
					variableDeclarationList();
					}
					break;
				}
				State = 329;
				Match(SemiColon);
				State = 331;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << RegularExpressionLiteral) | (1L << OpenBracket) | (1L << OpenParen) | (1L << OpenBrace) | (1L << PlusPlus) | (1L << MinusMinus) | (1L << Plus) | (1L << Minus) | (1L << BitNot) | (1L << Not) | (1L << NullLiteral) | (1L << BooleanLiteral) | (1L << DecimalLiteral) | (1L << HexIntegerLiteral) | (1L << OctalIntegerLiteral))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (OctalIntegerLiteral2 - 64)) | (1L << (BinaryIntegerLiteral - 64)) | (1L << (BigHexIntegerLiteral - 64)) | (1L << (BigOctalIntegerLiteral - 64)) | (1L << (BigBinaryIntegerLiteral - 64)) | (1L << (BigDecimalIntegerLiteral - 64)) | (1L << (Typeof - 64)) | (1L << (New - 64)) | (1L << (Void - 64)) | (1L << (Function_ - 64)) | (1L << (This - 64)) | (1L << (Delete - 64)) | (1L << (Class - 64)) | (1L << (Super - 64)) | (1L << (Import - 64)) | (1L << (Async - 64)) | (1L << (Await - 64)) | (1L << (NonStrictLet - 64)) | (1L << (Yield - 64)) | (1L << (Identifier - 64)) | (1L << (StringLiteral - 64)) | (1L << (TemplateStringLiteral - 64)))) != 0)) {
					{
					State = 330;
					expressionSequence();
					}
				}

				State = 333;
				Match(SemiColon);
				State = 335;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << RegularExpressionLiteral) | (1L << OpenBracket) | (1L << OpenParen) | (1L << OpenBrace) | (1L << PlusPlus) | (1L << MinusMinus) | (1L << Plus) | (1L << Minus) | (1L << BitNot) | (1L << Not) | (1L << NullLiteral) | (1L << BooleanLiteral) | (1L << DecimalLiteral) | (1L << HexIntegerLiteral) | (1L << OctalIntegerLiteral))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (OctalIntegerLiteral2 - 64)) | (1L << (BinaryIntegerLiteral - 64)) | (1L << (BigHexIntegerLiteral - 64)) | (1L << (BigOctalIntegerLiteral - 64)) | (1L << (BigBinaryIntegerLiteral - 64)) | (1L << (BigDecimalIntegerLiteral - 64)) | (1L << (Typeof - 64)) | (1L << (New - 64)) | (1L << (Void - 64)) | (1L << (Function_ - 64)) | (1L << (This - 64)) | (1L << (Delete - 64)) | (1L << (Class - 64)) | (1L << (Super - 64)) | (1L << (Import - 64)) | (1L << (Async - 64)) | (1L << (Await - 64)) | (1L << (NonStrictLet - 64)) | (1L << (Yield - 64)) | (1L << (Identifier - 64)) | (1L << (StringLiteral - 64)) | (1L << (TemplateStringLiteral - 64)))) != 0)) {
					{
					State = 334;
					expressionSequence();
					}
				}

				State = 337;
				Match(CloseParen);
				State = 338;
				statement();
				}
				break;
			case 4:
				_localctx = new ForInStatementContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 339;
				Match(For);
				State = 340;
				Match(OpenParen);
				State = 343;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,25,Context) ) {
				case 1:
					{
					State = 341;
					singleExpression(0);
					}
					break;
				case 2:
					{
					State = 342;
					variableDeclarationList();
					}
					break;
				}
				State = 345;
				Match(In);
				State = 346;
				expressionSequence();
				State = 347;
				Match(CloseParen);
				State = 348;
				statement();
				}
				break;
			case 5:
				_localctx = new ForOfStatementContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 350;
				Match(For);
				State = 352;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==Await) {
					{
					State = 351;
					Match(Await);
					}
				}

				State = 354;
				Match(OpenParen);
				State = 357;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,27,Context) ) {
				case 1:
					{
					State = 355;
					singleExpression(0);
					}
					break;
				case 2:
					{
					State = 356;
					variableDeclarationList();
					}
					break;
				}
				State = 359;
				identifier();
				State = 360;
				if (!(this.p("of"))) throw new FailedPredicateException(this, "this.p(\"of\")");
				State = 361;
				expressionSequence();
				State = 362;
				Match(CloseParen);
				State = 363;
				statement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VarModifierContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Var() { return GetToken(JavaScriptParser.Var, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Let_Context let_() {
			return GetRuleContext<Let_Context>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Const() { return GetToken(JavaScriptParser.Const, 0); }
		public VarModifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_varModifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.EnterVarModifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.ExitVarModifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaScriptParserVisitor<TResult> typedVisitor = visitor as IJavaScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVarModifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VarModifierContext varModifier() {
		VarModifierContext _localctx = new VarModifierContext(Context, State);
		EnterRule(_localctx, 44, RULE_varModifier);
		try {
			State = 370;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case Var:
				EnterOuterAlt(_localctx, 1);
				{
				State = 367;
				Match(Var);
				}
				break;
			case StrictLet:
			case NonStrictLet:
				EnterOuterAlt(_localctx, 2);
				{
				State = 368;
				let_();
				}
				break;
			case Const:
				EnterOuterAlt(_localctx, 3);
				{
				State = 369;
				Match(Const);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ContinueStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Continue() { return GetToken(JavaScriptParser.Continue, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public EosContext eos() {
			return GetRuleContext<EosContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ContinueStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_continueStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.EnterContinueStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.ExitContinueStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaScriptParserVisitor<TResult> typedVisitor = visitor as IJavaScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitContinueStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ContinueStatementContext continueStatement() {
		ContinueStatementContext _localctx = new ContinueStatementContext(Context, State);
		EnterRule(_localctx, 46, RULE_continueStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 372;
			Match(Continue);
			State = 375;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,30,Context) ) {
			case 1:
				{
				State = 373;
				if (!(this.notLineTerminator())) throw new FailedPredicateException(this, "this.notLineTerminator()");
				State = 374;
				identifier();
				}
				break;
			}
			State = 377;
			eos();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BreakStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Break() { return GetToken(JavaScriptParser.Break, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public EosContext eos() {
			return GetRuleContext<EosContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public BreakStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_breakStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.EnterBreakStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.ExitBreakStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaScriptParserVisitor<TResult> typedVisitor = visitor as IJavaScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBreakStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BreakStatementContext breakStatement() {
		BreakStatementContext _localctx = new BreakStatementContext(Context, State);
		EnterRule(_localctx, 48, RULE_breakStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 379;
			Match(Break);
			State = 382;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,31,Context) ) {
			case 1:
				{
				State = 380;
				if (!(this.notLineTerminator())) throw new FailedPredicateException(this, "this.notLineTerminator()");
				State = 381;
				identifier();
				}
				break;
			}
			State = 384;
			eos();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReturnStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Return() { return GetToken(JavaScriptParser.Return, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public EosContext eos() {
			return GetRuleContext<EosContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionSequenceContext expressionSequence() {
			return GetRuleContext<ExpressionSequenceContext>(0);
		}
		public ReturnStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_returnStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.EnterReturnStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.ExitReturnStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaScriptParserVisitor<TResult> typedVisitor = visitor as IJavaScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReturnStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ReturnStatementContext returnStatement() {
		ReturnStatementContext _localctx = new ReturnStatementContext(Context, State);
		EnterRule(_localctx, 50, RULE_returnStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 386;
			Match(Return);
			State = 389;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,32,Context) ) {
			case 1:
				{
				State = 387;
				if (!(this.notLineTerminator())) throw new FailedPredicateException(this, "this.notLineTerminator()");
				State = 388;
				expressionSequence();
				}
				break;
			}
			State = 391;
			eos();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class YieldStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Yield() { return GetToken(JavaScriptParser.Yield, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public EosContext eos() {
			return GetRuleContext<EosContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionSequenceContext expressionSequence() {
			return GetRuleContext<ExpressionSequenceContext>(0);
		}
		public YieldStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_yieldStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.EnterYieldStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.ExitYieldStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaScriptParserVisitor<TResult> typedVisitor = visitor as IJavaScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitYieldStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public YieldStatementContext yieldStatement() {
		YieldStatementContext _localctx = new YieldStatementContext(Context, State);
		EnterRule(_localctx, 52, RULE_yieldStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 393;
			Match(Yield);
			State = 396;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,33,Context) ) {
			case 1:
				{
				State = 394;
				if (!(this.notLineTerminator())) throw new FailedPredicateException(this, "this.notLineTerminator()");
				State = 395;
				expressionSequence();
				}
				break;
			}
			State = 398;
			eos();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WithStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode With() { return GetToken(JavaScriptParser.With, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OpenParen() { return GetToken(JavaScriptParser.OpenParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionSequenceContext expressionSequence() {
			return GetRuleContext<ExpressionSequenceContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CloseParen() { return GetToken(JavaScriptParser.CloseParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		public WithStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_withStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.EnterWithStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.ExitWithStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaScriptParserVisitor<TResult> typedVisitor = visitor as IJavaScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWithStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public WithStatementContext withStatement() {
		WithStatementContext _localctx = new WithStatementContext(Context, State);
		EnterRule(_localctx, 54, RULE_withStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 400;
			Match(With);
			State = 401;
			Match(OpenParen);
			State = 402;
			expressionSequence();
			State = 403;
			Match(CloseParen);
			State = 404;
			statement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SwitchStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Switch() { return GetToken(JavaScriptParser.Switch, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OpenParen() { return GetToken(JavaScriptParser.OpenParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionSequenceContext expressionSequence() {
			return GetRuleContext<ExpressionSequenceContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CloseParen() { return GetToken(JavaScriptParser.CloseParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public CaseBlockContext caseBlock() {
			return GetRuleContext<CaseBlockContext>(0);
		}
		public SwitchStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_switchStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.EnterSwitchStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.ExitSwitchStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaScriptParserVisitor<TResult> typedVisitor = visitor as IJavaScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSwitchStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SwitchStatementContext switchStatement() {
		SwitchStatementContext _localctx = new SwitchStatementContext(Context, State);
		EnterRule(_localctx, 56, RULE_switchStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 406;
			Match(Switch);
			State = 407;
			Match(OpenParen);
			State = 408;
			expressionSequence();
			State = 409;
			Match(CloseParen);
			State = 410;
			caseBlock();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CaseBlockContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OpenBrace() { return GetToken(JavaScriptParser.OpenBrace, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CloseBrace() { return GetToken(JavaScriptParser.CloseBrace, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public CaseClausesContext[] caseClauses() {
			return GetRuleContexts<CaseClausesContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public CaseClausesContext caseClauses(int i) {
			return GetRuleContext<CaseClausesContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DefaultClauseContext defaultClause() {
			return GetRuleContext<DefaultClauseContext>(0);
		}
		public CaseBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_caseBlock; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.EnterCaseBlock(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.ExitCaseBlock(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaScriptParserVisitor<TResult> typedVisitor = visitor as IJavaScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCaseBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CaseBlockContext caseBlock() {
		CaseBlockContext _localctx = new CaseBlockContext(Context, State);
		EnterRule(_localctx, 58, RULE_caseBlock);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 412;
			Match(OpenBrace);
			State = 414;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Case) {
				{
				State = 413;
				caseClauses();
				}
			}

			State = 420;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Default) {
				{
				State = 416;
				defaultClause();
				State = 418;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==Case) {
					{
					State = 417;
					caseClauses();
					}
				}

				}
			}

			State = 422;
			Match(CloseBrace);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CaseClausesContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public CaseClauseContext[] caseClause() {
			return GetRuleContexts<CaseClauseContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public CaseClauseContext caseClause(int i) {
			return GetRuleContext<CaseClauseContext>(i);
		}
		public CaseClausesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_caseClauses; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.EnterCaseClauses(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.ExitCaseClauses(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaScriptParserVisitor<TResult> typedVisitor = visitor as IJavaScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCaseClauses(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CaseClausesContext caseClauses() {
		CaseClausesContext _localctx = new CaseClausesContext(Context, State);
		EnterRule(_localctx, 60, RULE_caseClauses);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 425;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 424;
				caseClause();
				}
				}
				State = 427;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==Case );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CaseClauseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Case() { return GetToken(JavaScriptParser.Case, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionSequenceContext expressionSequence() {
			return GetRuleContext<ExpressionSequenceContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Colon() { return GetToken(JavaScriptParser.Colon, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementListContext statementList() {
			return GetRuleContext<StatementListContext>(0);
		}
		public CaseClauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_caseClause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.EnterCaseClause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.ExitCaseClause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaScriptParserVisitor<TResult> typedVisitor = visitor as IJavaScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCaseClause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CaseClauseContext caseClause() {
		CaseClauseContext _localctx = new CaseClauseContext(Context, State);
		EnterRule(_localctx, 62, RULE_caseClause);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 429;
			Match(Case);
			State = 430;
			expressionSequence();
			State = 431;
			Match(Colon);
			State = 433;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,38,Context) ) {
			case 1:
				{
				State = 432;
				statementList();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DefaultClauseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Default() { return GetToken(JavaScriptParser.Default, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Colon() { return GetToken(JavaScriptParser.Colon, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementListContext statementList() {
			return GetRuleContext<StatementListContext>(0);
		}
		public DefaultClauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_defaultClause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.EnterDefaultClause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.ExitDefaultClause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaScriptParserVisitor<TResult> typedVisitor = visitor as IJavaScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDefaultClause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DefaultClauseContext defaultClause() {
		DefaultClauseContext _localctx = new DefaultClauseContext(Context, State);
		EnterRule(_localctx, 64, RULE_defaultClause);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 435;
			Match(Default);
			State = 436;
			Match(Colon);
			State = 438;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,39,Context) ) {
			case 1:
				{
				State = 437;
				statementList();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LabelledStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Colon() { return GetToken(JavaScriptParser.Colon, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		public LabelledStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_labelledStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.EnterLabelledStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.ExitLabelledStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaScriptParserVisitor<TResult> typedVisitor = visitor as IJavaScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLabelledStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LabelledStatementContext labelledStatement() {
		LabelledStatementContext _localctx = new LabelledStatementContext(Context, State);
		EnterRule(_localctx, 66, RULE_labelledStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 440;
			identifier();
			State = 441;
			Match(Colon);
			State = 442;
			statement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ThrowStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Throw() { return GetToken(JavaScriptParser.Throw, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionSequenceContext expressionSequence() {
			return GetRuleContext<ExpressionSequenceContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public EosContext eos() {
			return GetRuleContext<EosContext>(0);
		}
		public ThrowStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_throwStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.EnterThrowStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.ExitThrowStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaScriptParserVisitor<TResult> typedVisitor = visitor as IJavaScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitThrowStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ThrowStatementContext throwStatement() {
		ThrowStatementContext _localctx = new ThrowStatementContext(Context, State);
		EnterRule(_localctx, 68, RULE_throwStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 444;
			Match(Throw);
			State = 445;
			if (!(this.notLineTerminator())) throw new FailedPredicateException(this, "this.notLineTerminator()");
			State = 446;
			expressionSequence();
			State = 447;
			eos();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TryStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Try() { return GetToken(JavaScriptParser.Try, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CatchProductionContext catchProduction() {
			return GetRuleContext<CatchProductionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FinallyProductionContext finallyProduction() {
			return GetRuleContext<FinallyProductionContext>(0);
		}
		public TryStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tryStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.EnterTryStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.ExitTryStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaScriptParserVisitor<TResult> typedVisitor = visitor as IJavaScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTryStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TryStatementContext tryStatement() {
		TryStatementContext _localctx = new TryStatementContext(Context, State);
		EnterRule(_localctx, 70, RULE_tryStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 449;
			Match(Try);
			State = 450;
			block();
			State = 456;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case Catch:
				{
				State = 451;
				catchProduction();
				State = 453;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,40,Context) ) {
				case 1:
					{
					State = 452;
					finallyProduction();
					}
					break;
				}
				}
				break;
			case Finally:
				{
				State = 455;
				finallyProduction();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CatchProductionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Catch() { return GetToken(JavaScriptParser.Catch, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OpenParen() { return GetToken(JavaScriptParser.OpenParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CloseParen() { return GetToken(JavaScriptParser.CloseParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public AssignableContext assignable() {
			return GetRuleContext<AssignableContext>(0);
		}
		public CatchProductionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_catchProduction; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.EnterCatchProduction(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.ExitCatchProduction(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaScriptParserVisitor<TResult> typedVisitor = visitor as IJavaScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCatchProduction(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CatchProductionContext catchProduction() {
		CatchProductionContext _localctx = new CatchProductionContext(Context, State);
		EnterRule(_localctx, 72, RULE_catchProduction);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 458;
			Match(Catch);
			State = 464;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==OpenParen) {
				{
				State = 459;
				Match(OpenParen);
				State = 461;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==OpenBracket || _la==OpenBrace || ((((_la - 105)) & ~0x3f) == 0 && ((1L << (_la - 105)) & ((1L << (Async - 105)) | (1L << (NonStrictLet - 105)) | (1L << (Identifier - 105)))) != 0)) {
					{
					State = 460;
					assignable();
					}
				}

				State = 463;
				Match(CloseParen);
				}
			}

			State = 466;
			block();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FinallyProductionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Finally() { return GetToken(JavaScriptParser.Finally, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public FinallyProductionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_finallyProduction; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.EnterFinallyProduction(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.ExitFinallyProduction(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaScriptParserVisitor<TResult> typedVisitor = visitor as IJavaScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFinallyProduction(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FinallyProductionContext finallyProduction() {
		FinallyProductionContext _localctx = new FinallyProductionContext(Context, State);
		EnterRule(_localctx, 74, RULE_finallyProduction);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 468;
			Match(Finally);
			State = 469;
			block();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DebuggerStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Debugger() { return GetToken(JavaScriptParser.Debugger, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public EosContext eos() {
			return GetRuleContext<EosContext>(0);
		}
		public DebuggerStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_debuggerStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.EnterDebuggerStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.ExitDebuggerStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaScriptParserVisitor<TResult> typedVisitor = visitor as IJavaScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDebuggerStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DebuggerStatementContext debuggerStatement() {
		DebuggerStatementContext _localctx = new DebuggerStatementContext(Context, State);
		EnterRule(_localctx, 76, RULE_debuggerStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 471;
			Match(Debugger);
			State = 472;
			eos();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Function_() { return GetToken(JavaScriptParser.Function_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OpenParen() { return GetToken(JavaScriptParser.OpenParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CloseParen() { return GetToken(JavaScriptParser.CloseParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Async() { return GetToken(JavaScriptParser.Async, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Multiply() { return GetToken(JavaScriptParser.Multiply, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FormalParameterListContext formalParameterList() {
			return GetRuleContext<FormalParameterListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionBodyContext functionBody() {
			return GetRuleContext<FunctionBodyContext>(0);
		}
		public FunctionDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.EnterFunctionDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.ExitFunctionDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaScriptParserVisitor<TResult> typedVisitor = visitor as IJavaScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionDeclarationContext functionDeclaration() {
		FunctionDeclarationContext _localctx = new FunctionDeclarationContext(Context, State);
		EnterRule(_localctx, 78, RULE_functionDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 475;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Async) {
				{
				State = 474;
				Match(Async);
				}
			}

			State = 477;
			Match(Function_);
			State = 479;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Multiply) {
				{
				State = 478;
				Match(Multiply);
				}
			}

			State = 481;
			identifier();
			State = 482;
			Match(OpenParen);
			State = 484;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << OpenBracket) | (1L << OpenBrace) | (1L << Ellipsis))) != 0) || ((((_la - 105)) & ~0x3f) == 0 && ((1L << (_la - 105)) & ((1L << (Async - 105)) | (1L << (NonStrictLet - 105)) | (1L << (Identifier - 105)))) != 0)) {
				{
				State = 483;
				formalParameterList();
				}
			}

			State = 486;
			Match(CloseParen);
			State = 488;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,47,Context) ) {
			case 1:
				{
				State = 487;
				functionBody();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClassDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Class() { return GetToken(JavaScriptParser.Class, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ClassTailContext classTail() {
			return GetRuleContext<ClassTailContext>(0);
		}
		public ClassDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_classDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.EnterClassDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.ExitClassDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaScriptParserVisitor<TResult> typedVisitor = visitor as IJavaScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClassDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ClassDeclarationContext classDeclaration() {
		ClassDeclarationContext _localctx = new ClassDeclarationContext(Context, State);
		EnterRule(_localctx, 80, RULE_classDeclaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 490;
			Match(Class);
			State = 491;
			identifier();
			State = 492;
			classTail();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClassTailContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OpenBrace() { return GetToken(JavaScriptParser.OpenBrace, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CloseBrace() { return GetToken(JavaScriptParser.CloseBrace, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Extends() { return GetToken(JavaScriptParser.Extends, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SingleExpressionContext singleExpression() {
			return GetRuleContext<SingleExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ClassElementContext[] classElement() {
			return GetRuleContexts<ClassElementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ClassElementContext classElement(int i) {
			return GetRuleContext<ClassElementContext>(i);
		}
		public ClassTailContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_classTail; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.EnterClassTail(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.ExitClassTail(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaScriptParserVisitor<TResult> typedVisitor = visitor as IJavaScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClassTail(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ClassTailContext classTail() {
		ClassTailContext _localctx = new ClassTailContext(Context, State);
		EnterRule(_localctx, 82, RULE_classTail);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 496;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Extends) {
				{
				State = 494;
				Match(Extends);
				State = 495;
				singleExpression(0);
				}
			}

			State = 498;
			Match(OpenBrace);
			State = 502;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,49,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 499;
					classElement();
					}
					} 
				}
				State = 504;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,49,Context);
			}
			State = 505;
			Match(CloseBrace);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClassElementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public MethodDefinitionContext methodDefinition() {
			return GetRuleContext<MethodDefinitionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AssignableContext assignable() {
			return GetRuleContext<AssignableContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Assign() { return GetToken(JavaScriptParser.Assign, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ObjectLiteralContext objectLiteral() {
			return GetRuleContext<ObjectLiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SemiColon() { return GetToken(JavaScriptParser.SemiColon, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Static() { return GetTokens(JavaScriptParser.Static); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Static(int i) {
			return GetToken(JavaScriptParser.Static, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext[] identifier() {
			return GetRuleContexts<IdentifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier(int i) {
			return GetRuleContext<IdentifierContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Async() { return GetTokens(JavaScriptParser.Async); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Async(int i) {
			return GetToken(JavaScriptParser.Async, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public EmptyStatementContext emptyStatement() {
			return GetRuleContext<EmptyStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PropertyNameContext propertyName() {
			return GetRuleContext<PropertyNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SingleExpressionContext singleExpression() {
			return GetRuleContext<SingleExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Hashtag() { return GetToken(JavaScriptParser.Hashtag, 0); }
		public ClassElementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_classElement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.EnterClassElement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.ExitClassElement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaScriptParserVisitor<TResult> typedVisitor = visitor as IJavaScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClassElement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ClassElementContext classElement() {
		ClassElementContext _localctx = new ClassElementContext(Context, State);
		EnterRule(_localctx, 84, RULE_classElement);
		int _la;
		try {
			int _alt;
			State = 532;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,54,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 513;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,51,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						State = 511;
						ErrorHandler.Sync(this);
						switch ( Interpreter.AdaptivePredict(TokenStream,50,Context) ) {
						case 1:
							{
							State = 507;
							Match(Static);
							}
							break;
						case 2:
							{
							State = 508;
							if (!(this.n("static"))) throw new FailedPredicateException(this, "this.n(\"static\")");
							State = 509;
							identifier();
							}
							break;
						case 3:
							{
							State = 510;
							Match(Async);
							}
							break;
						}
						} 
					}
					State = 515;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,51,Context);
				}
				State = 522;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,52,Context) ) {
				case 1:
					{
					State = 516;
					methodDefinition();
					}
					break;
				case 2:
					{
					State = 517;
					assignable();
					State = 518;
					Match(Assign);
					State = 519;
					objectLiteral();
					State = 520;
					Match(SemiColon);
					}
					break;
				}
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 524;
				emptyStatement();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 526;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==Hashtag) {
					{
					State = 525;
					Match(Hashtag);
					}
				}

				State = 528;
				propertyName();
				State = 529;
				Match(Assign);
				State = 530;
				singleExpression(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MethodDefinitionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public PropertyNameContext propertyName() {
			return GetRuleContext<PropertyNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OpenParen() { return GetToken(JavaScriptParser.OpenParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CloseParen() { return GetToken(JavaScriptParser.CloseParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Multiply() { return GetToken(JavaScriptParser.Multiply, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Hashtag() { return GetToken(JavaScriptParser.Hashtag, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FormalParameterListContext formalParameterList() {
			return GetRuleContext<FormalParameterListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionBodyContext functionBody() {
			return GetRuleContext<FunctionBodyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public GetterContext getter() {
			return GetRuleContext<GetterContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SetterContext setter() {
			return GetRuleContext<SetterContext>(0);
		}
		public MethodDefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_methodDefinition; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.EnterMethodDefinition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.ExitMethodDefinition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaScriptParserVisitor<TResult> typedVisitor = visitor as IJavaScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMethodDefinition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MethodDefinitionContext methodDefinition() {
		MethodDefinitionContext _localctx = new MethodDefinitionContext(Context, State);
		EnterRule(_localctx, 86, RULE_methodDefinition);
		int _la;
		try {
			State = 576;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,66,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 535;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==Multiply) {
					{
					State = 534;
					Match(Multiply);
					}
				}

				State = 538;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==Hashtag) {
					{
					State = 537;
					Match(Hashtag);
					}
				}

				State = 540;
				propertyName();
				State = 541;
				Match(OpenParen);
				State = 543;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << OpenBracket) | (1L << OpenBrace) | (1L << Ellipsis))) != 0) || ((((_la - 105)) & ~0x3f) == 0 && ((1L << (_la - 105)) & ((1L << (Async - 105)) | (1L << (NonStrictLet - 105)) | (1L << (Identifier - 105)))) != 0)) {
					{
					State = 542;
					formalParameterList();
					}
				}

				State = 545;
				Match(CloseParen);
				State = 547;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,58,Context) ) {
				case 1:
					{
					State = 546;
					functionBody();
					}
					break;
				}
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 550;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,59,Context) ) {
				case 1:
					{
					State = 549;
					Match(Multiply);
					}
					break;
				}
				State = 553;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,60,Context) ) {
				case 1:
					{
					State = 552;
					Match(Hashtag);
					}
					break;
				}
				State = 555;
				getter();
				State = 556;
				Match(OpenParen);
				State = 557;
				Match(CloseParen);
				State = 559;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,61,Context) ) {
				case 1:
					{
					State = 558;
					functionBody();
					}
					break;
				}
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 562;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,62,Context) ) {
				case 1:
					{
					State = 561;
					Match(Multiply);
					}
					break;
				}
				State = 565;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,63,Context) ) {
				case 1:
					{
					State = 564;
					Match(Hashtag);
					}
					break;
				}
				State = 567;
				setter();
				State = 568;
				Match(OpenParen);
				State = 570;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << OpenBracket) | (1L << OpenBrace) | (1L << Ellipsis))) != 0) || ((((_la - 105)) & ~0x3f) == 0 && ((1L << (_la - 105)) & ((1L << (Async - 105)) | (1L << (NonStrictLet - 105)) | (1L << (Identifier - 105)))) != 0)) {
					{
					State = 569;
					formalParameterList();
					}
				}

				State = 572;
				Match(CloseParen);
				State = 574;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,65,Context) ) {
				case 1:
					{
					State = 573;
					functionBody();
					}
					break;
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FormalParameterListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FormalParameterArgContext[] formalParameterArg() {
			return GetRuleContexts<FormalParameterArgContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public FormalParameterArgContext formalParameterArg(int i) {
			return GetRuleContext<FormalParameterArgContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Comma() { return GetTokens(JavaScriptParser.Comma); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comma(int i) {
			return GetToken(JavaScriptParser.Comma, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LastFormalParameterArgContext lastFormalParameterArg() {
			return GetRuleContext<LastFormalParameterArgContext>(0);
		}
		public FormalParameterListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_formalParameterList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.EnterFormalParameterList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.ExitFormalParameterList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaScriptParserVisitor<TResult> typedVisitor = visitor as IJavaScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFormalParameterList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FormalParameterListContext formalParameterList() {
		FormalParameterListContext _localctx = new FormalParameterListContext(Context, State);
		EnterRule(_localctx, 88, RULE_formalParameterList);
		int _la;
		try {
			int _alt;
			State = 591;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case OpenBracket:
			case OpenBrace:
			case Async:
			case NonStrictLet:
			case Identifier:
				EnterOuterAlt(_localctx, 1);
				{
				State = 578;
				formalParameterArg();
				State = 583;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,67,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 579;
						Match(Comma);
						State = 580;
						formalParameterArg();
						}
						} 
					}
					State = 585;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,67,Context);
				}
				State = 588;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==Comma) {
					{
					State = 586;
					Match(Comma);
					State = 587;
					lastFormalParameterArg();
					}
				}

				}
				break;
			case Ellipsis:
				EnterOuterAlt(_localctx, 2);
				{
				State = 590;
				lastFormalParameterArg();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FormalParameterArgContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public AssignableContext assignable() {
			return GetRuleContext<AssignableContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Assign() { return GetToken(JavaScriptParser.Assign, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SingleExpressionContext singleExpression() {
			return GetRuleContext<SingleExpressionContext>(0);
		}
		public FormalParameterArgContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_formalParameterArg; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.EnterFormalParameterArg(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.ExitFormalParameterArg(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaScriptParserVisitor<TResult> typedVisitor = visitor as IJavaScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFormalParameterArg(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FormalParameterArgContext formalParameterArg() {
		FormalParameterArgContext _localctx = new FormalParameterArgContext(Context, State);
		EnterRule(_localctx, 90, RULE_formalParameterArg);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 593;
			assignable();
			State = 596;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Assign) {
				{
				State = 594;
				Match(Assign);
				State = 595;
				singleExpression(0);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LastFormalParameterArgContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Ellipsis() { return GetToken(JavaScriptParser.Ellipsis, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SingleExpressionContext singleExpression() {
			return GetRuleContext<SingleExpressionContext>(0);
		}
		public LastFormalParameterArgContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lastFormalParameterArg; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.EnterLastFormalParameterArg(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.ExitLastFormalParameterArg(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaScriptParserVisitor<TResult> typedVisitor = visitor as IJavaScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLastFormalParameterArg(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LastFormalParameterArgContext lastFormalParameterArg() {
		LastFormalParameterArgContext _localctx = new LastFormalParameterArgContext(Context, State);
		EnterRule(_localctx, 92, RULE_lastFormalParameterArg);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 598;
			Match(Ellipsis);
			State = 599;
			singleExpression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionBodyContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OpenBrace() { return GetToken(JavaScriptParser.OpenBrace, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CloseBrace() { return GetToken(JavaScriptParser.CloseBrace, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SourceElementsContext sourceElements() {
			return GetRuleContext<SourceElementsContext>(0);
		}
		public FunctionBodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionBody; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.EnterFunctionBody(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.ExitFunctionBody(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaScriptParserVisitor<TResult> typedVisitor = visitor as IJavaScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionBody(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionBodyContext functionBody() {
		FunctionBodyContext _localctx = new FunctionBodyContext(Context, State);
		EnterRule(_localctx, 94, RULE_functionBody);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 601;
			Match(OpenBrace);
			State = 603;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,71,Context) ) {
			case 1:
				{
				State = 602;
				sourceElements();
				}
				break;
			}
			State = 605;
			Match(CloseBrace);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SourceElementsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SourceElementContext[] sourceElement() {
			return GetRuleContexts<SourceElementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SourceElementContext sourceElement(int i) {
			return GetRuleContext<SourceElementContext>(i);
		}
		public SourceElementsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sourceElements; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.EnterSourceElements(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.ExitSourceElements(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaScriptParserVisitor<TResult> typedVisitor = visitor as IJavaScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSourceElements(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SourceElementsContext sourceElements() {
		SourceElementsContext _localctx = new SourceElementsContext(Context, State);
		EnterRule(_localctx, 96, RULE_sourceElements);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 608;
			ErrorHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 607;
					sourceElement();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 610;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,72,Context);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArrayLiteralContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OpenBracket() { return GetToken(JavaScriptParser.OpenBracket, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ElementListContext elementList() {
			return GetRuleContext<ElementListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CloseBracket() { return GetToken(JavaScriptParser.CloseBracket, 0); }
		public ArrayLiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arrayLiteral; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.EnterArrayLiteral(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.ExitArrayLiteral(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaScriptParserVisitor<TResult> typedVisitor = visitor as IJavaScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArrayLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArrayLiteralContext arrayLiteral() {
		ArrayLiteralContext _localctx = new ArrayLiteralContext(Context, State);
		EnterRule(_localctx, 98, RULE_arrayLiteral);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 612;
			Match(OpenBracket);
			State = 613;
			elementList();
			State = 614;
			Match(CloseBracket);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ElementListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Comma() { return GetTokens(JavaScriptParser.Comma); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comma(int i) {
			return GetToken(JavaScriptParser.Comma, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArrayElementContext[] arrayElement() {
			return GetRuleContexts<ArrayElementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArrayElementContext arrayElement(int i) {
			return GetRuleContext<ArrayElementContext>(i);
		}
		public ElementListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_elementList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.EnterElementList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.ExitElementList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaScriptParserVisitor<TResult> typedVisitor = visitor as IJavaScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitElementList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ElementListContext elementList() {
		ElementListContext _localctx = new ElementListContext(Context, State);
		EnterRule(_localctx, 100, RULE_elementList);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 619;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,73,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 616;
					Match(Comma);
					}
					} 
				}
				State = 621;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,73,Context);
			}
			State = 623;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << RegularExpressionLiteral) | (1L << OpenBracket) | (1L << OpenParen) | (1L << OpenBrace) | (1L << Ellipsis) | (1L << PlusPlus) | (1L << MinusMinus) | (1L << Plus) | (1L << Minus) | (1L << BitNot) | (1L << Not) | (1L << NullLiteral) | (1L << BooleanLiteral) | (1L << DecimalLiteral) | (1L << HexIntegerLiteral) | (1L << OctalIntegerLiteral))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (OctalIntegerLiteral2 - 64)) | (1L << (BinaryIntegerLiteral - 64)) | (1L << (BigHexIntegerLiteral - 64)) | (1L << (BigOctalIntegerLiteral - 64)) | (1L << (BigBinaryIntegerLiteral - 64)) | (1L << (BigDecimalIntegerLiteral - 64)) | (1L << (Typeof - 64)) | (1L << (New - 64)) | (1L << (Void - 64)) | (1L << (Function_ - 64)) | (1L << (This - 64)) | (1L << (Delete - 64)) | (1L << (Class - 64)) | (1L << (Super - 64)) | (1L << (Import - 64)) | (1L << (Async - 64)) | (1L << (Await - 64)) | (1L << (NonStrictLet - 64)) | (1L << (Yield - 64)) | (1L << (Identifier - 64)) | (1L << (StringLiteral - 64)) | (1L << (TemplateStringLiteral - 64)))) != 0)) {
				{
				State = 622;
				arrayElement();
				}
			}

			State = 633;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,76,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 626;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					do {
						{
						{
						State = 625;
						Match(Comma);
						}
						}
						State = 628;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					} while ( _la==Comma );
					State = 630;
					arrayElement();
					}
					} 
				}
				State = 635;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,76,Context);
			}
			State = 639;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==Comma) {
				{
				{
				State = 636;
				Match(Comma);
				}
				}
				State = 641;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArrayElementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SingleExpressionContext singleExpression() {
			return GetRuleContext<SingleExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Ellipsis() { return GetToken(JavaScriptParser.Ellipsis, 0); }
		public ArrayElementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arrayElement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.EnterArrayElement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.ExitArrayElement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaScriptParserVisitor<TResult> typedVisitor = visitor as IJavaScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArrayElement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArrayElementContext arrayElement() {
		ArrayElementContext _localctx = new ArrayElementContext(Context, State);
		EnterRule(_localctx, 102, RULE_arrayElement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 643;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Ellipsis) {
				{
				State = 642;
				Match(Ellipsis);
				}
			}

			State = 645;
			singleExpression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PropertyAssignmentContext : ParserRuleContext {
		public PropertyAssignmentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_propertyAssignment; } }
	 
		public PropertyAssignmentContext() { }
		public virtual void CopyFrom(PropertyAssignmentContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class PropertyExpressionAssignmentContext : PropertyAssignmentContext {
		[System.Diagnostics.DebuggerNonUserCode] public PropertyNameContext propertyName() {
			return GetRuleContext<PropertyNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Colon() { return GetToken(JavaScriptParser.Colon, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SingleExpressionContext singleExpression() {
			return GetRuleContext<SingleExpressionContext>(0);
		}
		public PropertyExpressionAssignmentContext(PropertyAssignmentContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.EnterPropertyExpressionAssignment(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.ExitPropertyExpressionAssignment(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaScriptParserVisitor<TResult> typedVisitor = visitor as IJavaScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPropertyExpressionAssignment(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ComputedPropertyExpressionAssignmentContext : PropertyAssignmentContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OpenBracket() { return GetToken(JavaScriptParser.OpenBracket, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SingleExpressionContext[] singleExpression() {
			return GetRuleContexts<SingleExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SingleExpressionContext singleExpression(int i) {
			return GetRuleContext<SingleExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CloseBracket() { return GetToken(JavaScriptParser.CloseBracket, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Colon() { return GetToken(JavaScriptParser.Colon, 0); }
		public ComputedPropertyExpressionAssignmentContext(PropertyAssignmentContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.EnterComputedPropertyExpressionAssignment(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.ExitComputedPropertyExpressionAssignment(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaScriptParserVisitor<TResult> typedVisitor = visitor as IJavaScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitComputedPropertyExpressionAssignment(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class PropertyShorthandContext : PropertyAssignmentContext {
		[System.Diagnostics.DebuggerNonUserCode] public SingleExpressionContext singleExpression() {
			return GetRuleContext<SingleExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Ellipsis() { return GetToken(JavaScriptParser.Ellipsis, 0); }
		public PropertyShorthandContext(PropertyAssignmentContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.EnterPropertyShorthand(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.ExitPropertyShorthand(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaScriptParserVisitor<TResult> typedVisitor = visitor as IJavaScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPropertyShorthand(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class PropertySetterContext : PropertyAssignmentContext {
		[System.Diagnostics.DebuggerNonUserCode] public SetterContext setter() {
			return GetRuleContext<SetterContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OpenParen() { return GetToken(JavaScriptParser.OpenParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FormalParameterArgContext formalParameterArg() {
			return GetRuleContext<FormalParameterArgContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CloseParen() { return GetToken(JavaScriptParser.CloseParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FunctionBodyContext functionBody() {
			return GetRuleContext<FunctionBodyContext>(0);
		}
		public PropertySetterContext(PropertyAssignmentContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.EnterPropertySetter(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.ExitPropertySetter(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaScriptParserVisitor<TResult> typedVisitor = visitor as IJavaScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPropertySetter(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class PropertyGetterContext : PropertyAssignmentContext {
		[System.Diagnostics.DebuggerNonUserCode] public GetterContext getter() {
			return GetRuleContext<GetterContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OpenParen() { return GetToken(JavaScriptParser.OpenParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CloseParen() { return GetToken(JavaScriptParser.CloseParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FunctionBodyContext functionBody() {
			return GetRuleContext<FunctionBodyContext>(0);
		}
		public PropertyGetterContext(PropertyAssignmentContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.EnterPropertyGetter(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.ExitPropertyGetter(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaScriptParserVisitor<TResult> typedVisitor = visitor as IJavaScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPropertyGetter(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class FunctionPropertyContext : PropertyAssignmentContext {
		[System.Diagnostics.DebuggerNonUserCode] public PropertyNameContext propertyName() {
			return GetRuleContext<PropertyNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OpenParen() { return GetToken(JavaScriptParser.OpenParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CloseParen() { return GetToken(JavaScriptParser.CloseParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Async() { return GetToken(JavaScriptParser.Async, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Multiply() { return GetToken(JavaScriptParser.Multiply, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FormalParameterListContext formalParameterList() {
			return GetRuleContext<FormalParameterListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionBodyContext functionBody() {
			return GetRuleContext<FunctionBodyContext>(0);
		}
		public FunctionPropertyContext(PropertyAssignmentContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.EnterFunctionProperty(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.ExitFunctionProperty(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaScriptParserVisitor<TResult> typedVisitor = visitor as IJavaScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionProperty(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PropertyAssignmentContext propertyAssignment() {
		PropertyAssignmentContext _localctx = new PropertyAssignmentContext(Context, State);
		EnterRule(_localctx, 104, RULE_propertyAssignment);
		int _la;
		try {
			State = 689;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,86,Context) ) {
			case 1:
				_localctx = new PropertyExpressionAssignmentContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 647;
				propertyName();
				State = 648;
				Match(Colon);
				State = 649;
				singleExpression(0);
				}
				break;
			case 2:
				_localctx = new ComputedPropertyExpressionAssignmentContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 651;
				Match(OpenBracket);
				State = 652;
				singleExpression(0);
				State = 653;
				Match(CloseBracket);
				State = 654;
				Match(Colon);
				State = 655;
				singleExpression(0);
				}
				break;
			case 3:
				_localctx = new FunctionPropertyContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 658;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,79,Context) ) {
				case 1:
					{
					State = 657;
					Match(Async);
					}
					break;
				}
				State = 661;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==Multiply) {
					{
					State = 660;
					Match(Multiply);
					}
				}

				State = 663;
				propertyName();
				State = 664;
				Match(OpenParen);
				State = 666;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << OpenBracket) | (1L << OpenBrace) | (1L << Ellipsis))) != 0) || ((((_la - 105)) & ~0x3f) == 0 && ((1L << (_la - 105)) & ((1L << (Async - 105)) | (1L << (NonStrictLet - 105)) | (1L << (Identifier - 105)))) != 0)) {
					{
					State = 665;
					formalParameterList();
					}
				}

				State = 668;
				Match(CloseParen);
				State = 670;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==OpenBrace) {
					{
					State = 669;
					functionBody();
					}
				}

				}
				break;
			case 4:
				_localctx = new PropertyGetterContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 672;
				getter();
				State = 673;
				Match(OpenParen);
				State = 674;
				Match(CloseParen);
				State = 676;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==OpenBrace) {
					{
					State = 675;
					functionBody();
					}
				}

				}
				break;
			case 5:
				_localctx = new PropertySetterContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 678;
				setter();
				State = 679;
				Match(OpenParen);
				State = 680;
				formalParameterArg();
				State = 681;
				Match(CloseParen);
				State = 683;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==OpenBrace) {
					{
					State = 682;
					functionBody();
					}
				}

				}
				break;
			case 6:
				_localctx = new PropertyShorthandContext(_localctx);
				EnterOuterAlt(_localctx, 6);
				{
				State = 686;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==Ellipsis) {
					{
					State = 685;
					Match(Ellipsis);
					}
				}

				State = 688;
				singleExpression(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PropertyNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierNameContext identifierName() {
			return GetRuleContext<IdentifierNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode StringLiteral() { return GetToken(JavaScriptParser.StringLiteral, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NumericLiteralContext numericLiteral() {
			return GetRuleContext<NumericLiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OpenBracket() { return GetToken(JavaScriptParser.OpenBracket, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SingleExpressionContext singleExpression() {
			return GetRuleContext<SingleExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CloseBracket() { return GetToken(JavaScriptParser.CloseBracket, 0); }
		public PropertyNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_propertyName; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.EnterPropertyName(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.ExitPropertyName(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaScriptParserVisitor<TResult> typedVisitor = visitor as IJavaScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPropertyName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PropertyNameContext propertyName() {
		PropertyNameContext _localctx = new PropertyNameContext(Context, State);
		EnterRule(_localctx, 106, RULE_propertyName);
		try {
			State = 698;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case NullLiteral:
			case BooleanLiteral:
			case Break:
			case Do:
			case Instanceof:
			case Typeof:
			case Case:
			case Else:
			case New:
			case Var:
			case Catch:
			case Finally:
			case Return:
			case Void:
			case Continue:
			case For:
			case Switch:
			case While:
			case Debugger:
			case Function_:
			case This:
			case With:
			case Default:
			case If:
			case Throw:
			case Delete:
			case In:
			case Try:
			case As:
			case From:
			case Class:
			case Enum:
			case Extends:
			case Super:
			case Const:
			case Export:
			case Import:
			case Async:
			case Await:
			case Implements:
			case StrictLet:
			case NonStrictLet:
			case Private:
			case Public:
			case Interface:
			case Package:
			case Protected:
			case Static:
			case Yield:
			case Identifier:
				EnterOuterAlt(_localctx, 1);
				{
				State = 691;
				identifierName();
				}
				break;
			case StringLiteral:
				EnterOuterAlt(_localctx, 2);
				{
				State = 692;
				Match(StringLiteral);
				}
				break;
			case DecimalLiteral:
			case HexIntegerLiteral:
			case OctalIntegerLiteral:
			case OctalIntegerLiteral2:
			case BinaryIntegerLiteral:
				EnterOuterAlt(_localctx, 3);
				{
				State = 693;
				numericLiteral();
				}
				break;
			case OpenBracket:
				EnterOuterAlt(_localctx, 4);
				{
				State = 694;
				Match(OpenBracket);
				State = 695;
				singleExpression(0);
				State = 696;
				Match(CloseBracket);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArgumentsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OpenParen() { return GetToken(JavaScriptParser.OpenParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CloseParen() { return GetToken(JavaScriptParser.CloseParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ArgumentContext[] argument() {
			return GetRuleContexts<ArgumentContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArgumentContext argument(int i) {
			return GetRuleContext<ArgumentContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Comma() { return GetTokens(JavaScriptParser.Comma); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comma(int i) {
			return GetToken(JavaScriptParser.Comma, i);
		}
		public ArgumentsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arguments; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.EnterArguments(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.ExitArguments(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaScriptParserVisitor<TResult> typedVisitor = visitor as IJavaScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArguments(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArgumentsContext arguments() {
		ArgumentsContext _localctx = new ArgumentsContext(Context, State);
		EnterRule(_localctx, 108, RULE_arguments);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 700;
			Match(OpenParen);
			State = 712;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << RegularExpressionLiteral) | (1L << OpenBracket) | (1L << OpenParen) | (1L << OpenBrace) | (1L << Ellipsis) | (1L << PlusPlus) | (1L << MinusMinus) | (1L << Plus) | (1L << Minus) | (1L << BitNot) | (1L << Not) | (1L << NullLiteral) | (1L << BooleanLiteral) | (1L << DecimalLiteral) | (1L << HexIntegerLiteral) | (1L << OctalIntegerLiteral))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (OctalIntegerLiteral2 - 64)) | (1L << (BinaryIntegerLiteral - 64)) | (1L << (BigHexIntegerLiteral - 64)) | (1L << (BigOctalIntegerLiteral - 64)) | (1L << (BigBinaryIntegerLiteral - 64)) | (1L << (BigDecimalIntegerLiteral - 64)) | (1L << (Typeof - 64)) | (1L << (New - 64)) | (1L << (Void - 64)) | (1L << (Function_ - 64)) | (1L << (This - 64)) | (1L << (Delete - 64)) | (1L << (Class - 64)) | (1L << (Super - 64)) | (1L << (Import - 64)) | (1L << (Async - 64)) | (1L << (Await - 64)) | (1L << (NonStrictLet - 64)) | (1L << (Yield - 64)) | (1L << (Identifier - 64)) | (1L << (StringLiteral - 64)) | (1L << (TemplateStringLiteral - 64)))) != 0)) {
				{
				State = 701;
				argument();
				State = 706;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,88,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 702;
						Match(Comma);
						State = 703;
						argument();
						}
						} 
					}
					State = 708;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,88,Context);
				}
				State = 710;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==Comma) {
					{
					State = 709;
					Match(Comma);
					}
				}

				}
			}

			State = 714;
			Match(CloseParen);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArgumentContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SingleExpressionContext singleExpression() {
			return GetRuleContext<SingleExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Ellipsis() { return GetToken(JavaScriptParser.Ellipsis, 0); }
		public ArgumentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_argument; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.EnterArgument(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.ExitArgument(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaScriptParserVisitor<TResult> typedVisitor = visitor as IJavaScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArgument(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArgumentContext argument() {
		ArgumentContext _localctx = new ArgumentContext(Context, State);
		EnterRule(_localctx, 110, RULE_argument);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 717;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Ellipsis) {
				{
				State = 716;
				Match(Ellipsis);
				}
			}

			State = 721;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,92,Context) ) {
			case 1:
				{
				State = 719;
				singleExpression(0);
				}
				break;
			case 2:
				{
				State = 720;
				identifier();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionSequenceContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SingleExpressionContext[] singleExpression() {
			return GetRuleContexts<SingleExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SingleExpressionContext singleExpression(int i) {
			return GetRuleContext<SingleExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Comma() { return GetTokens(JavaScriptParser.Comma); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comma(int i) {
			return GetToken(JavaScriptParser.Comma, i);
		}
		public ExpressionSequenceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expressionSequence; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.EnterExpressionSequence(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.ExitExpressionSequence(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaScriptParserVisitor<TResult> typedVisitor = visitor as IJavaScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpressionSequence(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionSequenceContext expressionSequence() {
		ExpressionSequenceContext _localctx = new ExpressionSequenceContext(Context, State);
		EnterRule(_localctx, 112, RULE_expressionSequence);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 723;
			singleExpression(0);
			State = 728;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,93,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 724;
					Match(Comma);
					State = 725;
					singleExpression(0);
					}
					} 
				}
				State = 730;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,93,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SingleExpressionContext : ParserRuleContext {
		public SingleExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_singleExpression; } }
	 
		public SingleExpressionContext() { }
		public virtual void CopyFrom(SingleExpressionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class TemplateStringExpressionContext : SingleExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public SingleExpressionContext singleExpression() {
			return GetRuleContext<SingleExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TemplateStringLiteral() { return GetToken(JavaScriptParser.TemplateStringLiteral, 0); }
		public TemplateStringExpressionContext(SingleExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.EnterTemplateStringExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.ExitTemplateStringExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaScriptParserVisitor<TResult> typedVisitor = visitor as IJavaScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTemplateStringExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class TernaryExpressionContext : SingleExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public SingleExpressionContext[] singleExpression() {
			return GetRuleContexts<SingleExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SingleExpressionContext singleExpression(int i) {
			return GetRuleContext<SingleExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode QuestionMark() { return GetToken(JavaScriptParser.QuestionMark, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Colon() { return GetToken(JavaScriptParser.Colon, 0); }
		public TernaryExpressionContext(SingleExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.EnterTernaryExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.ExitTernaryExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaScriptParserVisitor<TResult> typedVisitor = visitor as IJavaScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTernaryExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class LogicalAndExpressionContext : SingleExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public SingleExpressionContext[] singleExpression() {
			return GetRuleContexts<SingleExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SingleExpressionContext singleExpression(int i) {
			return GetRuleContext<SingleExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode And() { return GetToken(JavaScriptParser.And, 0); }
		public LogicalAndExpressionContext(SingleExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.EnterLogicalAndExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.ExitLogicalAndExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaScriptParserVisitor<TResult> typedVisitor = visitor as IJavaScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLogicalAndExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class PowerExpressionContext : SingleExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public SingleExpressionContext[] singleExpression() {
			return GetRuleContexts<SingleExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SingleExpressionContext singleExpression(int i) {
			return GetRuleContext<SingleExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Power() { return GetToken(JavaScriptParser.Power, 0); }
		public PowerExpressionContext(SingleExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.EnterPowerExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.ExitPowerExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaScriptParserVisitor<TResult> typedVisitor = visitor as IJavaScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPowerExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class PreIncrementExpressionContext : SingleExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PlusPlus() { return GetToken(JavaScriptParser.PlusPlus, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SingleExpressionContext singleExpression() {
			return GetRuleContext<SingleExpressionContext>(0);
		}
		public PreIncrementExpressionContext(SingleExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.EnterPreIncrementExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.ExitPreIncrementExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaScriptParserVisitor<TResult> typedVisitor = visitor as IJavaScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPreIncrementExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ObjectLiteralExpressionContext : SingleExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ObjectLiteralContext objectLiteral() {
			return GetRuleContext<ObjectLiteralContext>(0);
		}
		public ObjectLiteralExpressionContext(SingleExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.EnterObjectLiteralExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.ExitObjectLiteralExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaScriptParserVisitor<TResult> typedVisitor = visitor as IJavaScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitObjectLiteralExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class MetaExpressionContext : SingleExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode New() { return GetToken(JavaScriptParser.New, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Dot() { return GetToken(JavaScriptParser.Dot, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public MetaExpressionContext(SingleExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.EnterMetaExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.ExitMetaExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaScriptParserVisitor<TResult> typedVisitor = visitor as IJavaScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMetaExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class InExpressionContext : SingleExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public SingleExpressionContext[] singleExpression() {
			return GetRuleContexts<SingleExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SingleExpressionContext singleExpression(int i) {
			return GetRuleContext<SingleExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode In() { return GetToken(JavaScriptParser.In, 0); }
		public InExpressionContext(SingleExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.EnterInExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.ExitInExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaScriptParserVisitor<TResult> typedVisitor = visitor as IJavaScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class LogicalOrExpressionContext : SingleExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public SingleExpressionContext[] singleExpression() {
			return GetRuleContexts<SingleExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SingleExpressionContext singleExpression(int i) {
			return GetRuleContext<SingleExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Or() { return GetToken(JavaScriptParser.Or, 0); }
		public LogicalOrExpressionContext(SingleExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.EnterLogicalOrExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.ExitLogicalOrExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaScriptParserVisitor<TResult> typedVisitor = visitor as IJavaScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLogicalOrExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class NotExpressionContext : SingleExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Not() { return GetToken(JavaScriptParser.Not, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SingleExpressionContext singleExpression() {
			return GetRuleContext<SingleExpressionContext>(0);
		}
		public NotExpressionContext(SingleExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.EnterNotExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.ExitNotExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaScriptParserVisitor<TResult> typedVisitor = visitor as IJavaScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNotExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class PreDecreaseExpressionContext : SingleExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MinusMinus() { return GetToken(JavaScriptParser.MinusMinus, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SingleExpressionContext singleExpression() {
			return GetRuleContext<SingleExpressionContext>(0);
		}
		public PreDecreaseExpressionContext(SingleExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.EnterPreDecreaseExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.ExitPreDecreaseExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaScriptParserVisitor<TResult> typedVisitor = visitor as IJavaScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPreDecreaseExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ArgumentsExpressionContext : SingleExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public SingleExpressionContext singleExpression() {
			return GetRuleContext<SingleExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArgumentsContext arguments() {
			return GetRuleContext<ArgumentsContext>(0);
		}
		public ArgumentsExpressionContext(SingleExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.EnterArgumentsExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.ExitArgumentsExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaScriptParserVisitor<TResult> typedVisitor = visitor as IJavaScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArgumentsExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AwaitExpressionContext : SingleExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Await() { return GetToken(JavaScriptParser.Await, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SingleExpressionContext singleExpression() {
			return GetRuleContext<SingleExpressionContext>(0);
		}
		public AwaitExpressionContext(SingleExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.EnterAwaitExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.ExitAwaitExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaScriptParserVisitor<TResult> typedVisitor = visitor as IJavaScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAwaitExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ThisExpressionContext : SingleExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode This() { return GetToken(JavaScriptParser.This, 0); }
		public ThisExpressionContext(SingleExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.EnterThisExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.ExitThisExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaScriptParserVisitor<TResult> typedVisitor = visitor as IJavaScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitThisExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class FunctionExpressionContext : SingleExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public AnonymousFunctionContext anonymousFunction() {
			return GetRuleContext<AnonymousFunctionContext>(0);
		}
		public FunctionExpressionContext(SingleExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.EnterFunctionExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.ExitFunctionExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaScriptParserVisitor<TResult> typedVisitor = visitor as IJavaScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class UnaryMinusExpressionContext : SingleExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Minus() { return GetToken(JavaScriptParser.Minus, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SingleExpressionContext singleExpression() {
			return GetRuleContext<SingleExpressionContext>(0);
		}
		public UnaryMinusExpressionContext(SingleExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.EnterUnaryMinusExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.ExitUnaryMinusExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaScriptParserVisitor<TResult> typedVisitor = visitor as IJavaScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnaryMinusExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AssignmentExpressionContext : SingleExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public SingleExpressionContext[] singleExpression() {
			return GetRuleContexts<SingleExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SingleExpressionContext singleExpression(int i) {
			return GetRuleContext<SingleExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Assign() { return GetToken(JavaScriptParser.Assign, 0); }
		public AssignmentExpressionContext(SingleExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.EnterAssignmentExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.ExitAssignmentExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaScriptParserVisitor<TResult> typedVisitor = visitor as IJavaScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssignmentExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class PostDecreaseExpressionContext : SingleExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public SingleExpressionContext singleExpression() {
			return GetRuleContext<SingleExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MinusMinus() { return GetToken(JavaScriptParser.MinusMinus, 0); }
		public PostDecreaseExpressionContext(SingleExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.EnterPostDecreaseExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.ExitPostDecreaseExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaScriptParserVisitor<TResult> typedVisitor = visitor as IJavaScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPostDecreaseExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class TypeofExpressionContext : SingleExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Typeof() { return GetToken(JavaScriptParser.Typeof, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SingleExpressionContext singleExpression() {
			return GetRuleContext<SingleExpressionContext>(0);
		}
		public TypeofExpressionContext(SingleExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.EnterTypeofExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.ExitTypeofExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaScriptParserVisitor<TResult> typedVisitor = visitor as IJavaScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeofExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class InstanceofExpressionContext : SingleExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public SingleExpressionContext[] singleExpression() {
			return GetRuleContexts<SingleExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SingleExpressionContext singleExpression(int i) {
			return GetRuleContext<SingleExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Instanceof() { return GetToken(JavaScriptParser.Instanceof, 0); }
		public InstanceofExpressionContext(SingleExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.EnterInstanceofExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.ExitInstanceofExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaScriptParserVisitor<TResult> typedVisitor = visitor as IJavaScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInstanceofExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class UnaryPlusExpressionContext : SingleExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Plus() { return GetToken(JavaScriptParser.Plus, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SingleExpressionContext singleExpression() {
			return GetRuleContext<SingleExpressionContext>(0);
		}
		public UnaryPlusExpressionContext(SingleExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.EnterUnaryPlusExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.ExitUnaryPlusExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaScriptParserVisitor<TResult> typedVisitor = visitor as IJavaScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnaryPlusExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class DeleteExpressionContext : SingleExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Delete() { return GetToken(JavaScriptParser.Delete, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SingleExpressionContext singleExpression() {
			return GetRuleContext<SingleExpressionContext>(0);
		}
		public DeleteExpressionContext(SingleExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.EnterDeleteExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.ExitDeleteExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaScriptParserVisitor<TResult> typedVisitor = visitor as IJavaScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeleteExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ImportExpressionContext : SingleExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Import() { return GetToken(JavaScriptParser.Import, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OpenParen() { return GetToken(JavaScriptParser.OpenParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SingleExpressionContext singleExpression() {
			return GetRuleContext<SingleExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CloseParen() { return GetToken(JavaScriptParser.CloseParen, 0); }
		public ImportExpressionContext(SingleExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.EnterImportExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.ExitImportExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaScriptParserVisitor<TResult> typedVisitor = visitor as IJavaScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitImportExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class EqualityExpressionContext : SingleExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public SingleExpressionContext[] singleExpression() {
			return GetRuleContexts<SingleExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SingleExpressionContext singleExpression(int i) {
			return GetRuleContext<SingleExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Equals_() { return GetToken(JavaScriptParser.Equals_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NotEquals() { return GetToken(JavaScriptParser.NotEquals, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IdentityEquals() { return GetToken(JavaScriptParser.IdentityEquals, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IdentityNotEquals() { return GetToken(JavaScriptParser.IdentityNotEquals, 0); }
		public EqualityExpressionContext(SingleExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.EnterEqualityExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.ExitEqualityExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaScriptParserVisitor<TResult> typedVisitor = visitor as IJavaScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEqualityExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class BitXOrExpressionContext : SingleExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public SingleExpressionContext[] singleExpression() {
			return GetRuleContexts<SingleExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SingleExpressionContext singleExpression(int i) {
			return GetRuleContext<SingleExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BitXOr() { return GetToken(JavaScriptParser.BitXOr, 0); }
		public BitXOrExpressionContext(SingleExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.EnterBitXOrExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.ExitBitXOrExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaScriptParserVisitor<TResult> typedVisitor = visitor as IJavaScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBitXOrExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class SuperExpressionContext : SingleExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Super() { return GetToken(JavaScriptParser.Super, 0); }
		public SuperExpressionContext(SingleExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.EnterSuperExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.ExitSuperExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaScriptParserVisitor<TResult> typedVisitor = visitor as IJavaScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSuperExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class MultiplicativeExpressionContext : SingleExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public SingleExpressionContext[] singleExpression() {
			return GetRuleContexts<SingleExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SingleExpressionContext singleExpression(int i) {
			return GetRuleContext<SingleExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Multiply() { return GetToken(JavaScriptParser.Multiply, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Divide() { return GetToken(JavaScriptParser.Divide, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Modulus() { return GetToken(JavaScriptParser.Modulus, 0); }
		public MultiplicativeExpressionContext(SingleExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.EnterMultiplicativeExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.ExitMultiplicativeExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaScriptParserVisitor<TResult> typedVisitor = visitor as IJavaScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMultiplicativeExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class BitShiftExpressionContext : SingleExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public SingleExpressionContext[] singleExpression() {
			return GetRuleContexts<SingleExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SingleExpressionContext singleExpression(int i) {
			return GetRuleContext<SingleExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LeftShiftArithmetic() { return GetToken(JavaScriptParser.LeftShiftArithmetic, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RightShiftArithmetic() { return GetToken(JavaScriptParser.RightShiftArithmetic, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RightShiftLogical() { return GetToken(JavaScriptParser.RightShiftLogical, 0); }
		public BitShiftExpressionContext(SingleExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.EnterBitShiftExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.ExitBitShiftExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaScriptParserVisitor<TResult> typedVisitor = visitor as IJavaScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBitShiftExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ParenthesizedExpressionContext : SingleExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OpenParen() { return GetToken(JavaScriptParser.OpenParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionSequenceContext expressionSequence() {
			return GetRuleContext<ExpressionSequenceContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CloseParen() { return GetToken(JavaScriptParser.CloseParen, 0); }
		public ParenthesizedExpressionContext(SingleExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.EnterParenthesizedExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.ExitParenthesizedExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaScriptParserVisitor<TResult> typedVisitor = visitor as IJavaScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParenthesizedExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AdditiveExpressionContext : SingleExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public SingleExpressionContext[] singleExpression() {
			return GetRuleContexts<SingleExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SingleExpressionContext singleExpression(int i) {
			return GetRuleContext<SingleExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Plus() { return GetToken(JavaScriptParser.Plus, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Minus() { return GetToken(JavaScriptParser.Minus, 0); }
		public AdditiveExpressionContext(SingleExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.EnterAdditiveExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.ExitAdditiveExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaScriptParserVisitor<TResult> typedVisitor = visitor as IJavaScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAdditiveExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class RelationalExpressionContext : SingleExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public SingleExpressionContext[] singleExpression() {
			return GetRuleContexts<SingleExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SingleExpressionContext singleExpression(int i) {
			return GetRuleContext<SingleExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LessThan() { return GetToken(JavaScriptParser.LessThan, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MoreThan() { return GetToken(JavaScriptParser.MoreThan, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LessThanEquals() { return GetToken(JavaScriptParser.LessThanEquals, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GreaterThanEquals() { return GetToken(JavaScriptParser.GreaterThanEquals, 0); }
		public RelationalExpressionContext(SingleExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.EnterRelationalExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.ExitRelationalExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaScriptParserVisitor<TResult> typedVisitor = visitor as IJavaScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRelationalExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class PostIncrementExpressionContext : SingleExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public SingleExpressionContext singleExpression() {
			return GetRuleContext<SingleExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PlusPlus() { return GetToken(JavaScriptParser.PlusPlus, 0); }
		public PostIncrementExpressionContext(SingleExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.EnterPostIncrementExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.ExitPostIncrementExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaScriptParserVisitor<TResult> typedVisitor = visitor as IJavaScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPostIncrementExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class YieldExpressionContext : SingleExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public YieldStatementContext yieldStatement() {
			return GetRuleContext<YieldStatementContext>(0);
		}
		public YieldExpressionContext(SingleExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.EnterYieldExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.ExitYieldExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaScriptParserVisitor<TResult> typedVisitor = visitor as IJavaScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitYieldExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class BitNotExpressionContext : SingleExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BitNot() { return GetToken(JavaScriptParser.BitNot, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SingleExpressionContext singleExpression() {
			return GetRuleContext<SingleExpressionContext>(0);
		}
		public BitNotExpressionContext(SingleExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.EnterBitNotExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.ExitBitNotExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaScriptParserVisitor<TResult> typedVisitor = visitor as IJavaScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBitNotExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class NewExpressionContext : SingleExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode New() { return GetToken(JavaScriptParser.New, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SingleExpressionContext singleExpression() {
			return GetRuleContext<SingleExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArgumentsContext arguments() {
			return GetRuleContext<ArgumentsContext>(0);
		}
		public NewExpressionContext(SingleExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.EnterNewExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.ExitNewExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaScriptParserVisitor<TResult> typedVisitor = visitor as IJavaScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNewExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class LiteralExpressionContext : SingleExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public LiteralContext literal() {
			return GetRuleContext<LiteralContext>(0);
		}
		public LiteralExpressionContext(SingleExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.EnterLiteralExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.ExitLiteralExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaScriptParserVisitor<TResult> typedVisitor = visitor as IJavaScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLiteralExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ArrayLiteralExpressionContext : SingleExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ArrayLiteralContext arrayLiteral() {
			return GetRuleContext<ArrayLiteralContext>(0);
		}
		public ArrayLiteralExpressionContext(SingleExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.EnterArrayLiteralExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.ExitArrayLiteralExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaScriptParserVisitor<TResult> typedVisitor = visitor as IJavaScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArrayLiteralExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class MemberDotExpressionContext : SingleExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public SingleExpressionContext singleExpression() {
			return GetRuleContext<SingleExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Dot() { return GetToken(JavaScriptParser.Dot, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierNameContext identifierName() {
			return GetRuleContext<IdentifierNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode QuestionMark() { return GetToken(JavaScriptParser.QuestionMark, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Hashtag() { return GetToken(JavaScriptParser.Hashtag, 0); }
		public MemberDotExpressionContext(SingleExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.EnterMemberDotExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.ExitMemberDotExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaScriptParserVisitor<TResult> typedVisitor = visitor as IJavaScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMemberDotExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ClassExpressionContext : SingleExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Class() { return GetToken(JavaScriptParser.Class, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ClassTailContext classTail() {
			return GetRuleContext<ClassTailContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ClassExpressionContext(SingleExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.EnterClassExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.ExitClassExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaScriptParserVisitor<TResult> typedVisitor = visitor as IJavaScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClassExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class MemberIndexExpressionContext : SingleExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public SingleExpressionContext singleExpression() {
			return GetRuleContext<SingleExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OpenBracket() { return GetToken(JavaScriptParser.OpenBracket, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionSequenceContext expressionSequence() {
			return GetRuleContext<ExpressionSequenceContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CloseBracket() { return GetToken(JavaScriptParser.CloseBracket, 0); }
		public MemberIndexExpressionContext(SingleExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.EnterMemberIndexExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.ExitMemberIndexExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaScriptParserVisitor<TResult> typedVisitor = visitor as IJavaScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMemberIndexExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class IdentifierExpressionContext : SingleExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public IdentifierExpressionContext(SingleExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.EnterIdentifierExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.ExitIdentifierExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaScriptParserVisitor<TResult> typedVisitor = visitor as IJavaScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIdentifierExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class BitAndExpressionContext : SingleExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public SingleExpressionContext[] singleExpression() {
			return GetRuleContexts<SingleExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SingleExpressionContext singleExpression(int i) {
			return GetRuleContext<SingleExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BitAnd() { return GetToken(JavaScriptParser.BitAnd, 0); }
		public BitAndExpressionContext(SingleExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.EnterBitAndExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.ExitBitAndExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaScriptParserVisitor<TResult> typedVisitor = visitor as IJavaScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBitAndExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class BitOrExpressionContext : SingleExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public SingleExpressionContext[] singleExpression() {
			return GetRuleContexts<SingleExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SingleExpressionContext singleExpression(int i) {
			return GetRuleContext<SingleExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BitOr() { return GetToken(JavaScriptParser.BitOr, 0); }
		public BitOrExpressionContext(SingleExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.EnterBitOrExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.ExitBitOrExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaScriptParserVisitor<TResult> typedVisitor = visitor as IJavaScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBitOrExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AssignmentOperatorExpressionContext : SingleExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public SingleExpressionContext[] singleExpression() {
			return GetRuleContexts<SingleExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SingleExpressionContext singleExpression(int i) {
			return GetRuleContext<SingleExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AssignmentOperatorContext assignmentOperator() {
			return GetRuleContext<AssignmentOperatorContext>(0);
		}
		public AssignmentOperatorExpressionContext(SingleExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.EnterAssignmentOperatorExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.ExitAssignmentOperatorExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaScriptParserVisitor<TResult> typedVisitor = visitor as IJavaScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssignmentOperatorExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class VoidExpressionContext : SingleExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Void() { return GetToken(JavaScriptParser.Void, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SingleExpressionContext singleExpression() {
			return GetRuleContext<SingleExpressionContext>(0);
		}
		public VoidExpressionContext(SingleExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.EnterVoidExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.ExitVoidExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaScriptParserVisitor<TResult> typedVisitor = visitor as IJavaScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVoidExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class CoalesceExpressionContext : SingleExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public SingleExpressionContext[] singleExpression() {
			return GetRuleContexts<SingleExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SingleExpressionContext singleExpression(int i) {
			return GetRuleContext<SingleExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NullCoalesce() { return GetToken(JavaScriptParser.NullCoalesce, 0); }
		public CoalesceExpressionContext(SingleExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.EnterCoalesceExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.ExitCoalesceExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaScriptParserVisitor<TResult> typedVisitor = visitor as IJavaScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCoalesceExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SingleExpressionContext singleExpression() {
		return singleExpression(0);
	}

	private SingleExpressionContext singleExpression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		SingleExpressionContext _localctx = new SingleExpressionContext(Context, _parentState);
		SingleExpressionContext _prevctx = _localctx;
		int _startState = 114;
		EnterRecursionRule(_localctx, 114, RULE_singleExpression, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 782;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,96,Context) ) {
			case 1:
				{
				_localctx = new FunctionExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;

				State = 732;
				anonymousFunction();
				}
				break;
			case 2:
				{
				_localctx = new ClassExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 733;
				Match(Class);
				State = 735;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (((((_la - 105)) & ~0x3f) == 0 && ((1L << (_la - 105)) & ((1L << (Async - 105)) | (1L << (NonStrictLet - 105)) | (1L << (Identifier - 105)))) != 0)) {
					{
					State = 734;
					identifier();
					}
				}

				State = 737;
				classTail();
				}
				break;
			case 3:
				{
				_localctx = new NewExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 738;
				Match(New);
				State = 739;
				singleExpression(0);
				State = 741;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,95,Context) ) {
				case 1:
					{
					State = 740;
					arguments();
					}
					break;
				}
				}
				break;
			case 4:
				{
				_localctx = new MetaExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 743;
				Match(New);
				State = 744;
				Match(Dot);
				State = 745;
				identifier();
				}
				break;
			case 5:
				{
				_localctx = new DeleteExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 746;
				Match(Delete);
				State = 747;
				singleExpression(37);
				}
				break;
			case 6:
				{
				_localctx = new VoidExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 748;
				Match(Void);
				State = 749;
				singleExpression(36);
				}
				break;
			case 7:
				{
				_localctx = new TypeofExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 750;
				Match(Typeof);
				State = 751;
				singleExpression(35);
				}
				break;
			case 8:
				{
				_localctx = new PreIncrementExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 752;
				Match(PlusPlus);
				State = 753;
				singleExpression(34);
				}
				break;
			case 9:
				{
				_localctx = new PreDecreaseExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 754;
				Match(MinusMinus);
				State = 755;
				singleExpression(33);
				}
				break;
			case 10:
				{
				_localctx = new UnaryPlusExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 756;
				Match(Plus);
				State = 757;
				singleExpression(32);
				}
				break;
			case 11:
				{
				_localctx = new UnaryMinusExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 758;
				Match(Minus);
				State = 759;
				singleExpression(31);
				}
				break;
			case 12:
				{
				_localctx = new BitNotExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 760;
				Match(BitNot);
				State = 761;
				singleExpression(30);
				}
				break;
			case 13:
				{
				_localctx = new NotExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 762;
				Match(Not);
				State = 763;
				singleExpression(29);
				}
				break;
			case 14:
				{
				_localctx = new AwaitExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 764;
				Match(Await);
				State = 765;
				singleExpression(28);
				}
				break;
			case 15:
				{
				_localctx = new ImportExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 766;
				Match(Import);
				State = 767;
				Match(OpenParen);
				State = 768;
				singleExpression(0);
				State = 769;
				Match(CloseParen);
				}
				break;
			case 16:
				{
				_localctx = new YieldExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 771;
				yieldStatement();
				}
				break;
			case 17:
				{
				_localctx = new ThisExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 772;
				Match(This);
				}
				break;
			case 18:
				{
				_localctx = new IdentifierExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 773;
				identifier();
				}
				break;
			case 19:
				{
				_localctx = new SuperExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 774;
				Match(Super);
				}
				break;
			case 20:
				{
				_localctx = new LiteralExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 775;
				literal();
				}
				break;
			case 21:
				{
				_localctx = new ArrayLiteralExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 776;
				arrayLiteral();
				}
				break;
			case 22:
				{
				_localctx = new ObjectLiteralExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 777;
				objectLiteral();
				}
				break;
			case 23:
				{
				_localctx = new ParenthesizedExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 778;
				Match(OpenParen);
				State = 779;
				expressionSequence();
				State = 780;
				Match(CloseParen);
				}
				break;
			}
			Context.Stop = TokenStream.LT(-1);
			State = 865;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,100,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 863;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,99,Context) ) {
					case 1:
						{
						_localctx = new PowerExpressionContext(new SingleExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_singleExpression);
						State = 784;
						if (!(Precpred(Context, 27))) throw new FailedPredicateException(this, "Precpred(Context, 27)");
						State = 785;
						Match(Power);
						State = 786;
						singleExpression(27);
						}
						break;
					case 2:
						{
						_localctx = new MultiplicativeExpressionContext(new SingleExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_singleExpression);
						State = 787;
						if (!(Precpred(Context, 26))) throw new FailedPredicateException(this, "Precpred(Context, 26)");
						State = 788;
						_la = TokenStream.LA(1);
						if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << Multiply) | (1L << Divide) | (1L << Modulus))) != 0)) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 789;
						singleExpression(27);
						}
						break;
					case 3:
						{
						_localctx = new AdditiveExpressionContext(new SingleExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_singleExpression);
						State = 790;
						if (!(Precpred(Context, 25))) throw new FailedPredicateException(this, "Precpred(Context, 25)");
						State = 791;
						_la = TokenStream.LA(1);
						if ( !(_la==Plus || _la==Minus) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 792;
						singleExpression(26);
						}
						break;
					case 4:
						{
						_localctx = new CoalesceExpressionContext(new SingleExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_singleExpression);
						State = 793;
						if (!(Precpred(Context, 24))) throw new FailedPredicateException(this, "Precpred(Context, 24)");
						State = 794;
						Match(NullCoalesce);
						State = 795;
						singleExpression(25);
						}
						break;
					case 5:
						{
						_localctx = new BitShiftExpressionContext(new SingleExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_singleExpression);
						State = 796;
						if (!(Precpred(Context, 23))) throw new FailedPredicateException(this, "Precpred(Context, 23)");
						State = 797;
						_la = TokenStream.LA(1);
						if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << RightShiftArithmetic) | (1L << LeftShiftArithmetic) | (1L << RightShiftLogical))) != 0)) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 798;
						singleExpression(24);
						}
						break;
					case 6:
						{
						_localctx = new RelationalExpressionContext(new SingleExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_singleExpression);
						State = 799;
						if (!(Precpred(Context, 22))) throw new FailedPredicateException(this, "Precpred(Context, 22)");
						State = 800;
						_la = TokenStream.LA(1);
						if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << LessThan) | (1L << MoreThan) | (1L << LessThanEquals) | (1L << GreaterThanEquals))) != 0)) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 801;
						singleExpression(23);
						}
						break;
					case 7:
						{
						_localctx = new InstanceofExpressionContext(new SingleExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_singleExpression);
						State = 802;
						if (!(Precpred(Context, 21))) throw new FailedPredicateException(this, "Precpred(Context, 21)");
						State = 803;
						Match(Instanceof);
						State = 804;
						singleExpression(22);
						}
						break;
					case 8:
						{
						_localctx = new InExpressionContext(new SingleExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_singleExpression);
						State = 805;
						if (!(Precpred(Context, 20))) throw new FailedPredicateException(this, "Precpred(Context, 20)");
						State = 806;
						Match(In);
						State = 807;
						singleExpression(21);
						}
						break;
					case 9:
						{
						_localctx = new EqualityExpressionContext(new SingleExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_singleExpression);
						State = 808;
						if (!(Precpred(Context, 19))) throw new FailedPredicateException(this, "Precpred(Context, 19)");
						State = 809;
						_la = TokenStream.LA(1);
						if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << Equals_) | (1L << NotEquals) | (1L << IdentityEquals) | (1L << IdentityNotEquals))) != 0)) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 810;
						singleExpression(20);
						}
						break;
					case 10:
						{
						_localctx = new BitAndExpressionContext(new SingleExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_singleExpression);
						State = 811;
						if (!(Precpred(Context, 18))) throw new FailedPredicateException(this, "Precpred(Context, 18)");
						State = 812;
						Match(BitAnd);
						State = 813;
						singleExpression(19);
						}
						break;
					case 11:
						{
						_localctx = new BitXOrExpressionContext(new SingleExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_singleExpression);
						State = 814;
						if (!(Precpred(Context, 17))) throw new FailedPredicateException(this, "Precpred(Context, 17)");
						State = 815;
						Match(BitXOr);
						State = 816;
						singleExpression(18);
						}
						break;
					case 12:
						{
						_localctx = new BitOrExpressionContext(new SingleExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_singleExpression);
						State = 817;
						if (!(Precpred(Context, 16))) throw new FailedPredicateException(this, "Precpred(Context, 16)");
						State = 818;
						Match(BitOr);
						State = 819;
						singleExpression(17);
						}
						break;
					case 13:
						{
						_localctx = new LogicalAndExpressionContext(new SingleExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_singleExpression);
						State = 820;
						if (!(Precpred(Context, 15))) throw new FailedPredicateException(this, "Precpred(Context, 15)");
						State = 821;
						Match(And);
						State = 822;
						singleExpression(16);
						}
						break;
					case 14:
						{
						_localctx = new LogicalOrExpressionContext(new SingleExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_singleExpression);
						State = 823;
						if (!(Precpred(Context, 14))) throw new FailedPredicateException(this, "Precpred(Context, 14)");
						State = 824;
						Match(Or);
						State = 825;
						singleExpression(15);
						}
						break;
					case 15:
						{
						_localctx = new TernaryExpressionContext(new SingleExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_singleExpression);
						State = 826;
						if (!(Precpred(Context, 13))) throw new FailedPredicateException(this, "Precpred(Context, 13)");
						State = 827;
						Match(QuestionMark);
						State = 828;
						singleExpression(0);
						State = 829;
						Match(Colon);
						State = 830;
						singleExpression(14);
						}
						break;
					case 16:
						{
						_localctx = new AssignmentExpressionContext(new SingleExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_singleExpression);
						State = 832;
						if (!(Precpred(Context, 12))) throw new FailedPredicateException(this, "Precpred(Context, 12)");
						State = 833;
						Match(Assign);
						State = 834;
						singleExpression(12);
						}
						break;
					case 17:
						{
						_localctx = new AssignmentOperatorExpressionContext(new SingleExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_singleExpression);
						State = 835;
						if (!(Precpred(Context, 11))) throw new FailedPredicateException(this, "Precpred(Context, 11)");
						State = 836;
						assignmentOperator();
						State = 837;
						singleExpression(11);
						}
						break;
					case 18:
						{
						_localctx = new MemberIndexExpressionContext(new SingleExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_singleExpression);
						State = 839;
						if (!(Precpred(Context, 44))) throw new FailedPredicateException(this, "Precpred(Context, 44)");
						State = 840;
						Match(OpenBracket);
						State = 841;
						expressionSequence();
						State = 842;
						Match(CloseBracket);
						}
						break;
					case 19:
						{
						_localctx = new MemberDotExpressionContext(new SingleExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_singleExpression);
						State = 844;
						if (!(Precpred(Context, 43))) throw new FailedPredicateException(this, "Precpred(Context, 43)");
						State = 846;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if (_la==QuestionMark) {
							{
							State = 845;
							Match(QuestionMark);
							}
						}

						State = 848;
						Match(Dot);
						State = 850;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if (_la==Hashtag) {
							{
							State = 849;
							Match(Hashtag);
							}
						}

						State = 852;
						identifierName();
						}
						break;
					case 20:
						{
						_localctx = new ArgumentsExpressionContext(new SingleExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_singleExpression);
						State = 853;
						if (!(Precpred(Context, 42))) throw new FailedPredicateException(this, "Precpred(Context, 42)");
						State = 854;
						arguments();
						}
						break;
					case 21:
						{
						_localctx = new PostIncrementExpressionContext(new SingleExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_singleExpression);
						State = 855;
						if (!(Precpred(Context, 39))) throw new FailedPredicateException(this, "Precpred(Context, 39)");
						State = 856;
						if (!(this.notLineTerminator())) throw new FailedPredicateException(this, "this.notLineTerminator()");
						State = 857;
						Match(PlusPlus);
						}
						break;
					case 22:
						{
						_localctx = new PostDecreaseExpressionContext(new SingleExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_singleExpression);
						State = 858;
						if (!(Precpred(Context, 38))) throw new FailedPredicateException(this, "Precpred(Context, 38)");
						State = 859;
						if (!(this.notLineTerminator())) throw new FailedPredicateException(this, "this.notLineTerminator()");
						State = 860;
						Match(MinusMinus);
						}
						break;
					case 23:
						{
						_localctx = new TemplateStringExpressionContext(new SingleExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_singleExpression);
						State = 861;
						if (!(Precpred(Context, 9))) throw new FailedPredicateException(this, "Precpred(Context, 9)");
						State = 862;
						Match(TemplateStringLiteral);
						}
						break;
					}
					} 
				}
				State = 867;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,100,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class AssignableContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArrayLiteralContext arrayLiteral() {
			return GetRuleContext<ArrayLiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ObjectLiteralContext objectLiteral() {
			return GetRuleContext<ObjectLiteralContext>(0);
		}
		public AssignableContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assignable; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.EnterAssignable(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.ExitAssignable(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaScriptParserVisitor<TResult> typedVisitor = visitor as IJavaScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssignable(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AssignableContext assignable() {
		AssignableContext _localctx = new AssignableContext(Context, State);
		EnterRule(_localctx, 116, RULE_assignable);
		try {
			State = 871;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case Async:
			case NonStrictLet:
			case Identifier:
				EnterOuterAlt(_localctx, 1);
				{
				State = 868;
				identifier();
				}
				break;
			case OpenBracket:
				EnterOuterAlt(_localctx, 2);
				{
				State = 869;
				arrayLiteral();
				}
				break;
			case OpenBrace:
				EnterOuterAlt(_localctx, 3);
				{
				State = 870;
				objectLiteral();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ObjectLiteralContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OpenBrace() { return GetToken(JavaScriptParser.OpenBrace, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CloseBrace() { return GetToken(JavaScriptParser.CloseBrace, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public PropertyAssignmentContext[] propertyAssignment() {
			return GetRuleContexts<PropertyAssignmentContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public PropertyAssignmentContext propertyAssignment(int i) {
			return GetRuleContext<PropertyAssignmentContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Comma() { return GetTokens(JavaScriptParser.Comma); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comma(int i) {
			return GetToken(JavaScriptParser.Comma, i);
		}
		public ObjectLiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_objectLiteral; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.EnterObjectLiteral(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.ExitObjectLiteral(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaScriptParserVisitor<TResult> typedVisitor = visitor as IJavaScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitObjectLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ObjectLiteralContext objectLiteral() {
		ObjectLiteralContext _localctx = new ObjectLiteralContext(Context, State);
		EnterRule(_localctx, 118, RULE_objectLiteral);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 873;
			Match(OpenBrace);
			State = 882;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,103,Context) ) {
			case 1:
				{
				State = 874;
				propertyAssignment();
				State = 879;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,102,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 875;
						Match(Comma);
						State = 876;
						propertyAssignment();
						}
						} 
					}
					State = 881;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,102,Context);
				}
				}
				break;
			}
			State = 885;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Comma) {
				{
				State = 884;
				Match(Comma);
				}
			}

			State = 887;
			Match(CloseBrace);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AnonymousFunctionContext : ParserRuleContext {
		public AnonymousFunctionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_anonymousFunction; } }
	 
		public AnonymousFunctionContext() { }
		public virtual void CopyFrom(AnonymousFunctionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class AnonymousFunctionDeclContext : AnonymousFunctionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Function_() { return GetToken(JavaScriptParser.Function_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OpenParen() { return GetToken(JavaScriptParser.OpenParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CloseParen() { return GetToken(JavaScriptParser.CloseParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Async() { return GetToken(JavaScriptParser.Async, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Multiply() { return GetToken(JavaScriptParser.Multiply, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FormalParameterListContext formalParameterList() {
			return GetRuleContext<FormalParameterListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionBodyContext functionBody() {
			return GetRuleContext<FunctionBodyContext>(0);
		}
		public AnonymousFunctionDeclContext(AnonymousFunctionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.EnterAnonymousFunctionDecl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.ExitAnonymousFunctionDecl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaScriptParserVisitor<TResult> typedVisitor = visitor as IJavaScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAnonymousFunctionDecl(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ArrowFunctionContext : AnonymousFunctionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ArrowFunctionParametersContext arrowFunctionParameters() {
			return GetRuleContext<ArrowFunctionParametersContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ARROW() { return GetToken(JavaScriptParser.ARROW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ArrowFunctionBodyContext arrowFunctionBody() {
			return GetRuleContext<ArrowFunctionBodyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Async() { return GetToken(JavaScriptParser.Async, 0); }
		public ArrowFunctionContext(AnonymousFunctionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.EnterArrowFunction(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.ExitArrowFunction(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaScriptParserVisitor<TResult> typedVisitor = visitor as IJavaScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArrowFunction(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class FunctionDeclContext : AnonymousFunctionContext {
		[System.Diagnostics.DebuggerNonUserCode] public FunctionDeclarationContext functionDeclaration() {
			return GetRuleContext<FunctionDeclarationContext>(0);
		}
		public FunctionDeclContext(AnonymousFunctionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.EnterFunctionDecl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.ExitFunctionDecl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaScriptParserVisitor<TResult> typedVisitor = visitor as IJavaScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionDecl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AnonymousFunctionContext anonymousFunction() {
		AnonymousFunctionContext _localctx = new AnonymousFunctionContext(Context, State);
		EnterRule(_localctx, 120, RULE_anonymousFunction);
		int _la;
		try {
			State = 912;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,110,Context) ) {
			case 1:
				_localctx = new FunctionDeclContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 889;
				functionDeclaration();
				}
				break;
			case 2:
				_localctx = new AnonymousFunctionDeclContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 891;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==Async) {
					{
					State = 890;
					Match(Async);
					}
				}

				State = 893;
				Match(Function_);
				State = 895;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==Multiply) {
					{
					State = 894;
					Match(Multiply);
					}
				}

				State = 897;
				Match(OpenParen);
				State = 899;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << OpenBracket) | (1L << OpenBrace) | (1L << Ellipsis))) != 0) || ((((_la - 105)) & ~0x3f) == 0 && ((1L << (_la - 105)) & ((1L << (Async - 105)) | (1L << (NonStrictLet - 105)) | (1L << (Identifier - 105)))) != 0)) {
					{
					State = 898;
					formalParameterList();
					}
				}

				State = 901;
				Match(CloseParen);
				State = 903;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,108,Context) ) {
				case 1:
					{
					State = 902;
					functionBody();
					}
					break;
				}
				}
				break;
			case 3:
				_localctx = new ArrowFunctionContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 906;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,109,Context) ) {
				case 1:
					{
					State = 905;
					Match(Async);
					}
					break;
				}
				State = 908;
				arrowFunctionParameters();
				State = 909;
				Match(ARROW);
				State = 910;
				arrowFunctionBody();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArrowFunctionParametersContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OpenParen() { return GetToken(JavaScriptParser.OpenParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CloseParen() { return GetToken(JavaScriptParser.CloseParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FormalParameterListContext formalParameterList() {
			return GetRuleContext<FormalParameterListContext>(0);
		}
		public ArrowFunctionParametersContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arrowFunctionParameters; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.EnterArrowFunctionParameters(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.ExitArrowFunctionParameters(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaScriptParserVisitor<TResult> typedVisitor = visitor as IJavaScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArrowFunctionParameters(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArrowFunctionParametersContext arrowFunctionParameters() {
		ArrowFunctionParametersContext _localctx = new ArrowFunctionParametersContext(Context, State);
		EnterRule(_localctx, 122, RULE_arrowFunctionParameters);
		int _la;
		try {
			State = 920;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case Async:
			case NonStrictLet:
			case Identifier:
				EnterOuterAlt(_localctx, 1);
				{
				State = 914;
				identifier();
				}
				break;
			case OpenParen:
				EnterOuterAlt(_localctx, 2);
				{
				State = 915;
				Match(OpenParen);
				State = 917;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << OpenBracket) | (1L << OpenBrace) | (1L << Ellipsis))) != 0) || ((((_la - 105)) & ~0x3f) == 0 && ((1L << (_la - 105)) & ((1L << (Async - 105)) | (1L << (NonStrictLet - 105)) | (1L << (Identifier - 105)))) != 0)) {
					{
					State = 916;
					formalParameterList();
					}
				}

				State = 919;
				Match(CloseParen);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArrowFunctionBodyContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SingleExpressionContext singleExpression() {
			return GetRuleContext<SingleExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionBodyContext functionBody() {
			return GetRuleContext<FunctionBodyContext>(0);
		}
		public ArrowFunctionBodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arrowFunctionBody; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.EnterArrowFunctionBody(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.ExitArrowFunctionBody(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaScriptParserVisitor<TResult> typedVisitor = visitor as IJavaScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArrowFunctionBody(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArrowFunctionBodyContext arrowFunctionBody() {
		ArrowFunctionBodyContext _localctx = new ArrowFunctionBodyContext(Context, State);
		EnterRule(_localctx, 124, RULE_arrowFunctionBody);
		try {
			State = 924;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,113,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 922;
				singleExpression(0);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 923;
				functionBody();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssignmentOperatorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MultiplyAssign() { return GetToken(JavaScriptParser.MultiplyAssign, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DivideAssign() { return GetToken(JavaScriptParser.DivideAssign, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ModulusAssign() { return GetToken(JavaScriptParser.ModulusAssign, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PlusAssign() { return GetToken(JavaScriptParser.PlusAssign, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MinusAssign() { return GetToken(JavaScriptParser.MinusAssign, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LeftShiftArithmeticAssign() { return GetToken(JavaScriptParser.LeftShiftArithmeticAssign, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RightShiftArithmeticAssign() { return GetToken(JavaScriptParser.RightShiftArithmeticAssign, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RightShiftLogicalAssign() { return GetToken(JavaScriptParser.RightShiftLogicalAssign, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BitAndAssign() { return GetToken(JavaScriptParser.BitAndAssign, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BitXorAssign() { return GetToken(JavaScriptParser.BitXorAssign, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BitOrAssign() { return GetToken(JavaScriptParser.BitOrAssign, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PowerAssign() { return GetToken(JavaScriptParser.PowerAssign, 0); }
		public AssignmentOperatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assignmentOperator; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.EnterAssignmentOperator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.ExitAssignmentOperator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaScriptParserVisitor<TResult> typedVisitor = visitor as IJavaScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssignmentOperator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AssignmentOperatorContext assignmentOperator() {
		AssignmentOperatorContext _localctx = new AssignmentOperatorContext(Context, State);
		EnterRule(_localctx, 126, RULE_assignmentOperator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 926;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << MultiplyAssign) | (1L << DivideAssign) | (1L << ModulusAssign) | (1L << PlusAssign) | (1L << MinusAssign) | (1L << LeftShiftArithmeticAssign) | (1L << RightShiftArithmeticAssign) | (1L << RightShiftLogicalAssign) | (1L << BitAndAssign) | (1L << BitXorAssign) | (1L << BitOrAssign) | (1L << PowerAssign))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LiteralContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NullLiteral() { return GetToken(JavaScriptParser.NullLiteral, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BooleanLiteral() { return GetToken(JavaScriptParser.BooleanLiteral, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode StringLiteral() { return GetToken(JavaScriptParser.StringLiteral, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TemplateStringLiteral() { return GetToken(JavaScriptParser.TemplateStringLiteral, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RegularExpressionLiteral() { return GetToken(JavaScriptParser.RegularExpressionLiteral, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NumericLiteralContext numericLiteral() {
			return GetRuleContext<NumericLiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BigintLiteralContext bigintLiteral() {
			return GetRuleContext<BigintLiteralContext>(0);
		}
		public LiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_literal; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.EnterLiteral(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.ExitLiteral(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaScriptParserVisitor<TResult> typedVisitor = visitor as IJavaScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LiteralContext literal() {
		LiteralContext _localctx = new LiteralContext(Context, State);
		EnterRule(_localctx, 128, RULE_literal);
		try {
			State = 935;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case NullLiteral:
				EnterOuterAlt(_localctx, 1);
				{
				State = 928;
				Match(NullLiteral);
				}
				break;
			case BooleanLiteral:
				EnterOuterAlt(_localctx, 2);
				{
				State = 929;
				Match(BooleanLiteral);
				}
				break;
			case StringLiteral:
				EnterOuterAlt(_localctx, 3);
				{
				State = 930;
				Match(StringLiteral);
				}
				break;
			case TemplateStringLiteral:
				EnterOuterAlt(_localctx, 4);
				{
				State = 931;
				Match(TemplateStringLiteral);
				}
				break;
			case RegularExpressionLiteral:
				EnterOuterAlt(_localctx, 5);
				{
				State = 932;
				Match(RegularExpressionLiteral);
				}
				break;
			case DecimalLiteral:
			case HexIntegerLiteral:
			case OctalIntegerLiteral:
			case OctalIntegerLiteral2:
			case BinaryIntegerLiteral:
				EnterOuterAlt(_localctx, 6);
				{
				State = 933;
				numericLiteral();
				}
				break;
			case BigHexIntegerLiteral:
			case BigOctalIntegerLiteral:
			case BigBinaryIntegerLiteral:
			case BigDecimalIntegerLiteral:
				EnterOuterAlt(_localctx, 7);
				{
				State = 934;
				bigintLiteral();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NumericLiteralContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DecimalLiteral() { return GetToken(JavaScriptParser.DecimalLiteral, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HexIntegerLiteral() { return GetToken(JavaScriptParser.HexIntegerLiteral, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OctalIntegerLiteral() { return GetToken(JavaScriptParser.OctalIntegerLiteral, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OctalIntegerLiteral2() { return GetToken(JavaScriptParser.OctalIntegerLiteral2, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BinaryIntegerLiteral() { return GetToken(JavaScriptParser.BinaryIntegerLiteral, 0); }
		public NumericLiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_numericLiteral; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.EnterNumericLiteral(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.ExitNumericLiteral(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaScriptParserVisitor<TResult> typedVisitor = visitor as IJavaScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNumericLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NumericLiteralContext numericLiteral() {
		NumericLiteralContext _localctx = new NumericLiteralContext(Context, State);
		EnterRule(_localctx, 130, RULE_numericLiteral);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 937;
			_la = TokenStream.LA(1);
			if ( !(((((_la - 61)) & ~0x3f) == 0 && ((1L << (_la - 61)) & ((1L << (DecimalLiteral - 61)) | (1L << (HexIntegerLiteral - 61)) | (1L << (OctalIntegerLiteral - 61)) | (1L << (OctalIntegerLiteral2 - 61)) | (1L << (BinaryIntegerLiteral - 61)))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BigintLiteralContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BigDecimalIntegerLiteral() { return GetToken(JavaScriptParser.BigDecimalIntegerLiteral, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BigHexIntegerLiteral() { return GetToken(JavaScriptParser.BigHexIntegerLiteral, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BigOctalIntegerLiteral() { return GetToken(JavaScriptParser.BigOctalIntegerLiteral, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BigBinaryIntegerLiteral() { return GetToken(JavaScriptParser.BigBinaryIntegerLiteral, 0); }
		public BigintLiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_bigintLiteral; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.EnterBigintLiteral(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.ExitBigintLiteral(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaScriptParserVisitor<TResult> typedVisitor = visitor as IJavaScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBigintLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BigintLiteralContext bigintLiteral() {
		BigintLiteralContext _localctx = new BigintLiteralContext(Context, State);
		EnterRule(_localctx, 132, RULE_bigintLiteral);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 939;
			_la = TokenStream.LA(1);
			if ( !(((((_la - 66)) & ~0x3f) == 0 && ((1L << (_la - 66)) & ((1L << (BigHexIntegerLiteral - 66)) | (1L << (BigOctalIntegerLiteral - 66)) | (1L << (BigBinaryIntegerLiteral - 66)) | (1L << (BigDecimalIntegerLiteral - 66)))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GetterContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PropertyNameContext propertyName() {
			return GetRuleContext<PropertyNameContext>(0);
		}
		public GetterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_getter; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.EnterGetter(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.ExitGetter(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaScriptParserVisitor<TResult> typedVisitor = visitor as IJavaScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGetter(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public GetterContext getter() {
		GetterContext _localctx = new GetterContext(Context, State);
		EnterRule(_localctx, 134, RULE_getter);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 941;
			if (!(this.n("get"))) throw new FailedPredicateException(this, "this.n(\"get\")");
			State = 942;
			identifier();
			State = 943;
			propertyName();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SetterContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PropertyNameContext propertyName() {
			return GetRuleContext<PropertyNameContext>(0);
		}
		public SetterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_setter; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.EnterSetter(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.ExitSetter(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaScriptParserVisitor<TResult> typedVisitor = visitor as IJavaScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSetter(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SetterContext setter() {
		SetterContext _localctx = new SetterContext(Context, State);
		EnterRule(_localctx, 136, RULE_setter);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 945;
			if (!(this.n("set"))) throw new FailedPredicateException(this, "this.n(\"set\")");
			State = 946;
			identifier();
			State = 947;
			propertyName();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IdentifierNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ReservedWordContext reservedWord() {
			return GetRuleContext<ReservedWordContext>(0);
		}
		public IdentifierNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_identifierName; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.EnterIdentifierName(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.ExitIdentifierName(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaScriptParserVisitor<TResult> typedVisitor = visitor as IJavaScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIdentifierName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IdentifierNameContext identifierName() {
		IdentifierNameContext _localctx = new IdentifierNameContext(Context, State);
		EnterRule(_localctx, 138, RULE_identifierName);
		try {
			State = 951;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,115,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 949;
				identifier();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 950;
				reservedWord();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IdentifierContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(JavaScriptParser.Identifier, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NonStrictLet() { return GetToken(JavaScriptParser.NonStrictLet, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Async() { return GetToken(JavaScriptParser.Async, 0); }
		public IdentifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_identifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.EnterIdentifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.ExitIdentifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaScriptParserVisitor<TResult> typedVisitor = visitor as IJavaScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIdentifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IdentifierContext identifier() {
		IdentifierContext _localctx = new IdentifierContext(Context, State);
		EnterRule(_localctx, 140, RULE_identifier);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 953;
			_la = TokenStream.LA(1);
			if ( !(((((_la - 105)) & ~0x3f) == 0 && ((1L << (_la - 105)) & ((1L << (Async - 105)) | (1L << (NonStrictLet - 105)) | (1L << (Identifier - 105)))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReservedWordContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public KeywordContext keyword() {
			return GetRuleContext<KeywordContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NullLiteral() { return GetToken(JavaScriptParser.NullLiteral, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BooleanLiteral() { return GetToken(JavaScriptParser.BooleanLiteral, 0); }
		public ReservedWordContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_reservedWord; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.EnterReservedWord(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.ExitReservedWord(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaScriptParserVisitor<TResult> typedVisitor = visitor as IJavaScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReservedWord(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ReservedWordContext reservedWord() {
		ReservedWordContext _localctx = new ReservedWordContext(Context, State);
		EnterRule(_localctx, 142, RULE_reservedWord);
		try {
			State = 958;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case Break:
			case Do:
			case Instanceof:
			case Typeof:
			case Case:
			case Else:
			case New:
			case Var:
			case Catch:
			case Finally:
			case Return:
			case Void:
			case Continue:
			case For:
			case Switch:
			case While:
			case Debugger:
			case Function_:
			case This:
			case With:
			case Default:
			case If:
			case Throw:
			case Delete:
			case In:
			case Try:
			case As:
			case From:
			case Class:
			case Enum:
			case Extends:
			case Super:
			case Const:
			case Export:
			case Import:
			case Async:
			case Await:
			case Implements:
			case StrictLet:
			case NonStrictLet:
			case Private:
			case Public:
			case Interface:
			case Package:
			case Protected:
			case Static:
			case Yield:
				EnterOuterAlt(_localctx, 1);
				{
				State = 955;
				keyword();
				}
				break;
			case NullLiteral:
				EnterOuterAlt(_localctx, 2);
				{
				State = 956;
				Match(NullLiteral);
				}
				break;
			case BooleanLiteral:
				EnterOuterAlt(_localctx, 3);
				{
				State = 957;
				Match(BooleanLiteral);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class KeywordContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Break() { return GetToken(JavaScriptParser.Break, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Do() { return GetToken(JavaScriptParser.Do, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Instanceof() { return GetToken(JavaScriptParser.Instanceof, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Typeof() { return GetToken(JavaScriptParser.Typeof, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Case() { return GetToken(JavaScriptParser.Case, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Else() { return GetToken(JavaScriptParser.Else, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode New() { return GetToken(JavaScriptParser.New, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Var() { return GetToken(JavaScriptParser.Var, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Catch() { return GetToken(JavaScriptParser.Catch, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Finally() { return GetToken(JavaScriptParser.Finally, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Return() { return GetToken(JavaScriptParser.Return, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Void() { return GetToken(JavaScriptParser.Void, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Continue() { return GetToken(JavaScriptParser.Continue, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode For() { return GetToken(JavaScriptParser.For, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Switch() { return GetToken(JavaScriptParser.Switch, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode While() { return GetToken(JavaScriptParser.While, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Debugger() { return GetToken(JavaScriptParser.Debugger, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Function_() { return GetToken(JavaScriptParser.Function_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode This() { return GetToken(JavaScriptParser.This, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode With() { return GetToken(JavaScriptParser.With, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Default() { return GetToken(JavaScriptParser.Default, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode If() { return GetToken(JavaScriptParser.If, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Throw() { return GetToken(JavaScriptParser.Throw, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Delete() { return GetToken(JavaScriptParser.Delete, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode In() { return GetToken(JavaScriptParser.In, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Try() { return GetToken(JavaScriptParser.Try, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Class() { return GetToken(JavaScriptParser.Class, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Enum() { return GetToken(JavaScriptParser.Enum, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Extends() { return GetToken(JavaScriptParser.Extends, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Super() { return GetToken(JavaScriptParser.Super, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Const() { return GetToken(JavaScriptParser.Const, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Export() { return GetToken(JavaScriptParser.Export, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Import() { return GetToken(JavaScriptParser.Import, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Implements() { return GetToken(JavaScriptParser.Implements, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Let_Context let_() {
			return GetRuleContext<Let_Context>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Private() { return GetToken(JavaScriptParser.Private, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Public() { return GetToken(JavaScriptParser.Public, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Interface() { return GetToken(JavaScriptParser.Interface, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Package() { return GetToken(JavaScriptParser.Package, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Protected() { return GetToken(JavaScriptParser.Protected, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Static() { return GetToken(JavaScriptParser.Static, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Yield() { return GetToken(JavaScriptParser.Yield, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Async() { return GetToken(JavaScriptParser.Async, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Await() { return GetToken(JavaScriptParser.Await, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode From() { return GetToken(JavaScriptParser.From, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode As() { return GetToken(JavaScriptParser.As, 0); }
		public KeywordContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_keyword; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.EnterKeyword(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.ExitKeyword(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaScriptParserVisitor<TResult> typedVisitor = visitor as IJavaScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitKeyword(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public KeywordContext keyword() {
		KeywordContext _localctx = new KeywordContext(Context, State);
		EnterRule(_localctx, 144, RULE_keyword);
		try {
			State = 1006;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case Break:
				EnterOuterAlt(_localctx, 1);
				{
				State = 960;
				Match(Break);
				}
				break;
			case Do:
				EnterOuterAlt(_localctx, 2);
				{
				State = 961;
				Match(Do);
				}
				break;
			case Instanceof:
				EnterOuterAlt(_localctx, 3);
				{
				State = 962;
				Match(Instanceof);
				}
				break;
			case Typeof:
				EnterOuterAlt(_localctx, 4);
				{
				State = 963;
				Match(Typeof);
				}
				break;
			case Case:
				EnterOuterAlt(_localctx, 5);
				{
				State = 964;
				Match(Case);
				}
				break;
			case Else:
				EnterOuterAlt(_localctx, 6);
				{
				State = 965;
				Match(Else);
				}
				break;
			case New:
				EnterOuterAlt(_localctx, 7);
				{
				State = 966;
				Match(New);
				}
				break;
			case Var:
				EnterOuterAlt(_localctx, 8);
				{
				State = 967;
				Match(Var);
				}
				break;
			case Catch:
				EnterOuterAlt(_localctx, 9);
				{
				State = 968;
				Match(Catch);
				}
				break;
			case Finally:
				EnterOuterAlt(_localctx, 10);
				{
				State = 969;
				Match(Finally);
				}
				break;
			case Return:
				EnterOuterAlt(_localctx, 11);
				{
				State = 970;
				Match(Return);
				}
				break;
			case Void:
				EnterOuterAlt(_localctx, 12);
				{
				State = 971;
				Match(Void);
				}
				break;
			case Continue:
				EnterOuterAlt(_localctx, 13);
				{
				State = 972;
				Match(Continue);
				}
				break;
			case For:
				EnterOuterAlt(_localctx, 14);
				{
				State = 973;
				Match(For);
				}
				break;
			case Switch:
				EnterOuterAlt(_localctx, 15);
				{
				State = 974;
				Match(Switch);
				}
				break;
			case While:
				EnterOuterAlt(_localctx, 16);
				{
				State = 975;
				Match(While);
				}
				break;
			case Debugger:
				EnterOuterAlt(_localctx, 17);
				{
				State = 976;
				Match(Debugger);
				}
				break;
			case Function_:
				EnterOuterAlt(_localctx, 18);
				{
				State = 977;
				Match(Function_);
				}
				break;
			case This:
				EnterOuterAlt(_localctx, 19);
				{
				State = 978;
				Match(This);
				}
				break;
			case With:
				EnterOuterAlt(_localctx, 20);
				{
				State = 979;
				Match(With);
				}
				break;
			case Default:
				EnterOuterAlt(_localctx, 21);
				{
				State = 980;
				Match(Default);
				}
				break;
			case If:
				EnterOuterAlt(_localctx, 22);
				{
				State = 981;
				Match(If);
				}
				break;
			case Throw:
				EnterOuterAlt(_localctx, 23);
				{
				State = 982;
				Match(Throw);
				}
				break;
			case Delete:
				EnterOuterAlt(_localctx, 24);
				{
				State = 983;
				Match(Delete);
				}
				break;
			case In:
				EnterOuterAlt(_localctx, 25);
				{
				State = 984;
				Match(In);
				}
				break;
			case Try:
				EnterOuterAlt(_localctx, 26);
				{
				State = 985;
				Match(Try);
				}
				break;
			case Class:
				EnterOuterAlt(_localctx, 27);
				{
				State = 986;
				Match(Class);
				}
				break;
			case Enum:
				EnterOuterAlt(_localctx, 28);
				{
				State = 987;
				Match(Enum);
				}
				break;
			case Extends:
				EnterOuterAlt(_localctx, 29);
				{
				State = 988;
				Match(Extends);
				}
				break;
			case Super:
				EnterOuterAlt(_localctx, 30);
				{
				State = 989;
				Match(Super);
				}
				break;
			case Const:
				EnterOuterAlt(_localctx, 31);
				{
				State = 990;
				Match(Const);
				}
				break;
			case Export:
				EnterOuterAlt(_localctx, 32);
				{
				State = 991;
				Match(Export);
				}
				break;
			case Import:
				EnterOuterAlt(_localctx, 33);
				{
				State = 992;
				Match(Import);
				}
				break;
			case Implements:
				EnterOuterAlt(_localctx, 34);
				{
				State = 993;
				Match(Implements);
				}
				break;
			case StrictLet:
			case NonStrictLet:
				EnterOuterAlt(_localctx, 35);
				{
				State = 994;
				let_();
				}
				break;
			case Private:
				EnterOuterAlt(_localctx, 36);
				{
				State = 995;
				Match(Private);
				}
				break;
			case Public:
				EnterOuterAlt(_localctx, 37);
				{
				State = 996;
				Match(Public);
				}
				break;
			case Interface:
				EnterOuterAlt(_localctx, 38);
				{
				State = 997;
				Match(Interface);
				}
				break;
			case Package:
				EnterOuterAlt(_localctx, 39);
				{
				State = 998;
				Match(Package);
				}
				break;
			case Protected:
				EnterOuterAlt(_localctx, 40);
				{
				State = 999;
				Match(Protected);
				}
				break;
			case Static:
				EnterOuterAlt(_localctx, 41);
				{
				State = 1000;
				Match(Static);
				}
				break;
			case Yield:
				EnterOuterAlt(_localctx, 42);
				{
				State = 1001;
				Match(Yield);
				}
				break;
			case Async:
				EnterOuterAlt(_localctx, 43);
				{
				State = 1002;
				Match(Async);
				}
				break;
			case Await:
				EnterOuterAlt(_localctx, 44);
				{
				State = 1003;
				Match(Await);
				}
				break;
			case From:
				EnterOuterAlt(_localctx, 45);
				{
				State = 1004;
				Match(From);
				}
				break;
			case As:
				EnterOuterAlt(_localctx, 46);
				{
				State = 1005;
				Match(As);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Let_Context : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NonStrictLet() { return GetToken(JavaScriptParser.NonStrictLet, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode StrictLet() { return GetToken(JavaScriptParser.StrictLet, 0); }
		public Let_Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_let_; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.EnterLet_(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.ExitLet_(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaScriptParserVisitor<TResult> typedVisitor = visitor as IJavaScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLet_(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Let_Context let_() {
		Let_Context _localctx = new Let_Context(Context, State);
		EnterRule(_localctx, 146, RULE_let_);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1008;
			_la = TokenStream.LA(1);
			if ( !(_la==StrictLet || _la==NonStrictLet) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EosContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SemiColon() { return GetToken(JavaScriptParser.SemiColon, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(JavaScriptParser.Eof, 0); }
		public EosContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_eos; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.EnterEos(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.ExitEos(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaScriptParserVisitor<TResult> typedVisitor = visitor as IJavaScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEos(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EosContext eos() {
		EosContext _localctx = new EosContext(Context, State);
		EnterRule(_localctx, 148, RULE_eos);
		try {
			State = 1014;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,118,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1010;
				Match(SemiColon);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1011;
				Match(Eof);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1012;
				if (!(this.lineTerminatorAhead())) throw new FailedPredicateException(this, "this.lineTerminatorAhead()");
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1013;
				if (!(this.closeBrace())) throw new FailedPredicateException(this, "this.closeBrace()");
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 19: return expressionStatement_sempred((ExpressionStatementContext)_localctx, predIndex);
		case 21: return iterationStatement_sempred((IterationStatementContext)_localctx, predIndex);
		case 23: return continueStatement_sempred((ContinueStatementContext)_localctx, predIndex);
		case 24: return breakStatement_sempred((BreakStatementContext)_localctx, predIndex);
		case 25: return returnStatement_sempred((ReturnStatementContext)_localctx, predIndex);
		case 26: return yieldStatement_sempred((YieldStatementContext)_localctx, predIndex);
		case 34: return throwStatement_sempred((ThrowStatementContext)_localctx, predIndex);
		case 42: return classElement_sempred((ClassElementContext)_localctx, predIndex);
		case 57: return singleExpression_sempred((SingleExpressionContext)_localctx, predIndex);
		case 67: return getter_sempred((GetterContext)_localctx, predIndex);
		case 68: return setter_sempred((SetterContext)_localctx, predIndex);
		case 74: return eos_sempred((EosContext)_localctx, predIndex);
		}
		return true;
	}
	private bool expressionStatement_sempred(ExpressionStatementContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return this.notOpenBraceAndNotFunction();
		}
		return true;
	}
	private bool iterationStatement_sempred(IterationStatementContext _localctx, int predIndex) {
		switch (predIndex) {
		case 1: return this.p("of");
		}
		return true;
	}
	private bool continueStatement_sempred(ContinueStatementContext _localctx, int predIndex) {
		switch (predIndex) {
		case 2: return this.notLineTerminator();
		}
		return true;
	}
	private bool breakStatement_sempred(BreakStatementContext _localctx, int predIndex) {
		switch (predIndex) {
		case 3: return this.notLineTerminator();
		}
		return true;
	}
	private bool returnStatement_sempred(ReturnStatementContext _localctx, int predIndex) {
		switch (predIndex) {
		case 4: return this.notLineTerminator();
		}
		return true;
	}
	private bool yieldStatement_sempred(YieldStatementContext _localctx, int predIndex) {
		switch (predIndex) {
		case 5: return this.notLineTerminator();
		}
		return true;
	}
	private bool throwStatement_sempred(ThrowStatementContext _localctx, int predIndex) {
		switch (predIndex) {
		case 6: return this.notLineTerminator();
		}
		return true;
	}
	private bool classElement_sempred(ClassElementContext _localctx, int predIndex) {
		switch (predIndex) {
		case 7: return this.n("static");
		}
		return true;
	}
	private bool singleExpression_sempred(SingleExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 8: return Precpred(Context, 27);
		case 9: return Precpred(Context, 26);
		case 10: return Precpred(Context, 25);
		case 11: return Precpred(Context, 24);
		case 12: return Precpred(Context, 23);
		case 13: return Precpred(Context, 22);
		case 14: return Precpred(Context, 21);
		case 15: return Precpred(Context, 20);
		case 16: return Precpred(Context, 19);
		case 17: return Precpred(Context, 18);
		case 18: return Precpred(Context, 17);
		case 19: return Precpred(Context, 16);
		case 20: return Precpred(Context, 15);
		case 21: return Precpred(Context, 14);
		case 22: return Precpred(Context, 13);
		case 23: return Precpred(Context, 12);
		case 24: return Precpred(Context, 11);
		case 25: return Precpred(Context, 44);
		case 26: return Precpred(Context, 43);
		case 27: return Precpred(Context, 42);
		case 28: return Precpred(Context, 39);
		case 29: return this.notLineTerminator();
		case 30: return Precpred(Context, 38);
		case 31: return this.notLineTerminator();
		case 32: return Precpred(Context, 9);
		}
		return true;
	}
	private bool getter_sempred(GetterContext _localctx, int predIndex) {
		switch (predIndex) {
		case 33: return this.n("get");
		}
		return true;
	}
	private bool setter_sempred(SetterContext _localctx, int predIndex) {
		switch (predIndex) {
		case 34: return this.n("set");
		}
		return true;
	}
	private bool eos_sempred(EosContext _localctx, int predIndex) {
		switch (predIndex) {
		case 35: return this.lineTerminatorAhead();
		case 36: return this.closeBrace();
		}
		return true;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', '~', '\x3FB', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', 
		'\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', '\x4', 
		'\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', '\t', '\b', 
		'\x4', '\t', '\t', '\t', '\x4', '\n', '\t', '\n', '\x4', '\v', '\t', '\v', 
		'\x4', '\f', '\t', '\f', '\x4', '\r', '\t', '\r', '\x4', '\xE', '\t', 
		'\xE', '\x4', '\xF', '\t', '\xF', '\x4', '\x10', '\t', '\x10', '\x4', 
		'\x11', '\t', '\x11', '\x4', '\x12', '\t', '\x12', '\x4', '\x13', '\t', 
		'\x13', '\x4', '\x14', '\t', '\x14', '\x4', '\x15', '\t', '\x15', '\x4', 
		'\x16', '\t', '\x16', '\x4', '\x17', '\t', '\x17', '\x4', '\x18', '\t', 
		'\x18', '\x4', '\x19', '\t', '\x19', '\x4', '\x1A', '\t', '\x1A', '\x4', 
		'\x1B', '\t', '\x1B', '\x4', '\x1C', '\t', '\x1C', '\x4', '\x1D', '\t', 
		'\x1D', '\x4', '\x1E', '\t', '\x1E', '\x4', '\x1F', '\t', '\x1F', '\x4', 
		' ', '\t', ' ', '\x4', '!', '\t', '!', '\x4', '\"', '\t', '\"', '\x4', 
		'#', '\t', '#', '\x4', '$', '\t', '$', '\x4', '%', '\t', '%', '\x4', '&', 
		'\t', '&', '\x4', '\'', '\t', '\'', '\x4', '(', '\t', '(', '\x4', ')', 
		'\t', ')', '\x4', '*', '\t', '*', '\x4', '+', '\t', '+', '\x4', ',', '\t', 
		',', '\x4', '-', '\t', '-', '\x4', '.', '\t', '.', '\x4', '/', '\t', '/', 
		'\x4', '\x30', '\t', '\x30', '\x4', '\x31', '\t', '\x31', '\x4', '\x32', 
		'\t', '\x32', '\x4', '\x33', '\t', '\x33', '\x4', '\x34', '\t', '\x34', 
		'\x4', '\x35', '\t', '\x35', '\x4', '\x36', '\t', '\x36', '\x4', '\x37', 
		'\t', '\x37', '\x4', '\x38', '\t', '\x38', '\x4', '\x39', '\t', '\x39', 
		'\x4', ':', '\t', ':', '\x4', ';', '\t', ';', '\x4', '<', '\t', '<', '\x4', 
		'=', '\t', '=', '\x4', '>', '\t', '>', '\x4', '?', '\t', '?', '\x4', '@', 
		'\t', '@', '\x4', '\x41', '\t', '\x41', '\x4', '\x42', '\t', '\x42', '\x4', 
		'\x43', '\t', '\x43', '\x4', '\x44', '\t', '\x44', '\x4', '\x45', '\t', 
		'\x45', '\x4', '\x46', '\t', '\x46', '\x4', 'G', '\t', 'G', '\x4', 'H', 
		'\t', 'H', '\x4', 'I', '\t', 'I', '\x4', 'J', '\t', 'J', '\x4', 'K', '\t', 
		'K', '\x4', 'L', '\t', 'L', '\x3', '\x2', '\x5', '\x2', '\x9A', '\n', 
		'\x2', '\x3', '\x2', '\x5', '\x2', '\x9D', '\n', '\x2', '\x3', '\x2', 
		'\x3', '\x2', '\x3', '\x3', '\x3', '\x3', '\x3', '\x4', '\x3', '\x4', 
		'\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', 
		'\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', 
		'\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', 
		'\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x5', '\x4', '\xB7', '\n', 
		'\x4', '\x3', '\x5', '\x3', '\x5', '\x5', '\x5', '\xBB', '\n', '\x5', 
		'\x3', '\x5', '\x3', '\x5', '\x3', '\x6', '\x6', '\x6', '\xC0', '\n', 
		'\x6', '\r', '\x6', '\xE', '\x6', '\xC1', '\x3', '\a', '\x3', '\a', '\x3', 
		'\a', '\x3', '\b', '\x5', '\b', '\xC8', '\n', '\b', '\x3', '\b', '\x3', 
		'\b', '\x5', '\b', '\xCC', '\n', '\b', '\x3', '\b', '\x3', '\b', '\x3', 
		'\b', '\x3', '\b', '\x3', '\b', '\x5', '\b', '\xD3', '\n', '\b', '\x3', 
		'\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\a', '\t', '\xD9', '\n', 
		'\t', '\f', '\t', '\xE', '\t', '\xDC', '\v', '\t', '\x3', '\t', '\x3', 
		'\t', '\x5', '\t', '\xE0', '\n', '\t', '\x5', '\t', '\xE2', '\n', '\t', 
		'\x3', '\t', '\x3', '\t', '\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', 
		'\v', '\x3', '\v', '\x5', '\v', '\xEB', '\n', '\v', '\x3', '\v', '\x3', 
		'\v', '\x5', '\v', '\xEF', '\n', '\v', '\x3', '\f', '\x3', '\f', '\x3', 
		'\f', '\x3', '\r', '\x3', '\r', '\x3', '\r', '\x5', '\r', '\xF7', '\n', 
		'\r', '\x3', '\xE', '\x3', '\xE', '\x3', '\xE', '\x5', '\xE', '\xFC', 
		'\n', '\xE', '\x3', '\xE', '\x3', '\xE', '\x3', '\xE', '\x3', '\xE', '\x3', 
		'\xE', '\x3', '\xE', '\x3', '\xE', '\x5', '\xE', '\x105', '\n', '\xE', 
		'\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', 
		'\x3', '\xF', '\x5', '\xF', '\x10D', '\n', '\xF', '\x3', '\xF', '\x3', 
		'\xF', '\x5', '\xF', '\x111', '\n', '\xF', '\x3', '\x10', '\x3', '\x10', 
		'\x3', '\x10', '\x5', '\x10', '\x116', '\n', '\x10', '\x3', '\x11', '\x3', 
		'\x11', '\x3', '\x11', '\x3', '\x12', '\x3', '\x12', '\x3', '\x12', '\x3', 
		'\x12', '\a', '\x12', '\x11F', '\n', '\x12', '\f', '\x12', '\xE', '\x12', 
		'\x122', '\v', '\x12', '\x3', '\x13', '\x3', '\x13', '\x3', '\x13', '\x5', 
		'\x13', '\x127', '\n', '\x13', '\x3', '\x14', '\x3', '\x14', '\x3', '\x15', 
		'\x3', '\x15', '\x3', '\x15', '\x3', '\x15', '\x3', '\x16', '\x3', '\x16', 
		'\x3', '\x16', '\x3', '\x16', '\x3', '\x16', '\x3', '\x16', '\x3', '\x16', 
		'\x5', '\x16', '\x136', '\n', '\x16', '\x3', '\x17', '\x3', '\x17', '\x3', 
		'\x17', '\x3', '\x17', '\x3', '\x17', '\x3', '\x17', '\x3', '\x17', '\x3', 
		'\x17', '\x3', '\x17', '\x3', '\x17', '\x3', '\x17', '\x3', '\x17', '\x3', 
		'\x17', '\x3', '\x17', '\x3', '\x17', '\x3', '\x17', '\x3', '\x17', '\x3', 
		'\x17', '\x5', '\x17', '\x14A', '\n', '\x17', '\x3', '\x17', '\x3', '\x17', 
		'\x5', '\x17', '\x14E', '\n', '\x17', '\x3', '\x17', '\x3', '\x17', '\x5', 
		'\x17', '\x152', '\n', '\x17', '\x3', '\x17', '\x3', '\x17', '\x3', '\x17', 
		'\x3', '\x17', '\x3', '\x17', '\x3', '\x17', '\x5', '\x17', '\x15A', '\n', 
		'\x17', '\x3', '\x17', '\x3', '\x17', '\x3', '\x17', '\x3', '\x17', '\x3', 
		'\x17', '\x3', '\x17', '\x3', '\x17', '\x5', '\x17', '\x163', '\n', '\x17', 
		'\x3', '\x17', '\x3', '\x17', '\x3', '\x17', '\x5', '\x17', '\x168', '\n', 
		'\x17', '\x3', '\x17', '\x3', '\x17', '\x3', '\x17', '\x3', '\x17', '\x3', 
		'\x17', '\x3', '\x17', '\x5', '\x17', '\x170', '\n', '\x17', '\x3', '\x18', 
		'\x3', '\x18', '\x3', '\x18', '\x5', '\x18', '\x175', '\n', '\x18', '\x3', 
		'\x19', '\x3', '\x19', '\x3', '\x19', '\x5', '\x19', '\x17A', '\n', '\x19', 
		'\x3', '\x19', '\x3', '\x19', '\x3', '\x1A', '\x3', '\x1A', '\x3', '\x1A', 
		'\x5', '\x1A', '\x181', '\n', '\x1A', '\x3', '\x1A', '\x3', '\x1A', '\x3', 
		'\x1B', '\x3', '\x1B', '\x3', '\x1B', '\x5', '\x1B', '\x188', '\n', '\x1B', 
		'\x3', '\x1B', '\x3', '\x1B', '\x3', '\x1C', '\x3', '\x1C', '\x3', '\x1C', 
		'\x5', '\x1C', '\x18F', '\n', '\x1C', '\x3', '\x1C', '\x3', '\x1C', '\x3', 
		'\x1D', '\x3', '\x1D', '\x3', '\x1D', '\x3', '\x1D', '\x3', '\x1D', '\x3', 
		'\x1D', '\x3', '\x1E', '\x3', '\x1E', '\x3', '\x1E', '\x3', '\x1E', '\x3', 
		'\x1E', '\x3', '\x1E', '\x3', '\x1F', '\x3', '\x1F', '\x5', '\x1F', '\x1A1', 
		'\n', '\x1F', '\x3', '\x1F', '\x3', '\x1F', '\x5', '\x1F', '\x1A5', '\n', 
		'\x1F', '\x5', '\x1F', '\x1A7', '\n', '\x1F', '\x3', '\x1F', '\x3', '\x1F', 
		'\x3', ' ', '\x6', ' ', '\x1AC', '\n', ' ', '\r', ' ', '\xE', ' ', '\x1AD', 
		'\x3', '!', '\x3', '!', '\x3', '!', '\x3', '!', '\x5', '!', '\x1B4', '\n', 
		'!', '\x3', '\"', '\x3', '\"', '\x3', '\"', '\x5', '\"', '\x1B9', '\n', 
		'\"', '\x3', '#', '\x3', '#', '\x3', '#', '\x3', '#', '\x3', '$', '\x3', 
		'$', '\x3', '$', '\x3', '$', '\x3', '$', '\x3', '%', '\x3', '%', '\x3', 
		'%', '\x3', '%', '\x5', '%', '\x1C8', '\n', '%', '\x3', '%', '\x5', '%', 
		'\x1CB', '\n', '%', '\x3', '&', '\x3', '&', '\x3', '&', '\x5', '&', '\x1D0', 
		'\n', '&', '\x3', '&', '\x5', '&', '\x1D3', '\n', '&', '\x3', '&', '\x3', 
		'&', '\x3', '\'', '\x3', '\'', '\x3', '\'', '\x3', '(', '\x3', '(', '\x3', 
		'(', '\x3', ')', '\x5', ')', '\x1DE', '\n', ')', '\x3', ')', '\x3', ')', 
		'\x5', ')', '\x1E2', '\n', ')', '\x3', ')', '\x3', ')', '\x3', ')', '\x5', 
		')', '\x1E7', '\n', ')', '\x3', ')', '\x3', ')', '\x5', ')', '\x1EB', 
		'\n', ')', '\x3', '*', '\x3', '*', '\x3', '*', '\x3', '*', '\x3', '+', 
		'\x3', '+', '\x5', '+', '\x1F3', '\n', '+', '\x3', '+', '\x3', '+', '\a', 
		'+', '\x1F7', '\n', '+', '\f', '+', '\xE', '+', '\x1FA', '\v', '+', '\x3', 
		'+', '\x3', '+', '\x3', ',', '\x3', ',', '\x3', ',', '\x3', ',', '\a', 
		',', '\x202', '\n', ',', '\f', ',', '\xE', ',', '\x205', '\v', ',', '\x3', 
		',', '\x3', ',', '\x3', ',', '\x3', ',', '\x3', ',', '\x3', ',', '\x5', 
		',', '\x20D', '\n', ',', '\x3', ',', '\x3', ',', '\x5', ',', '\x211', 
		'\n', ',', '\x3', ',', '\x3', ',', '\x3', ',', '\x3', ',', '\x5', ',', 
		'\x217', '\n', ',', '\x3', '-', '\x5', '-', '\x21A', '\n', '-', '\x3', 
		'-', '\x5', '-', '\x21D', '\n', '-', '\x3', '-', '\x3', '-', '\x3', '-', 
		'\x5', '-', '\x222', '\n', '-', '\x3', '-', '\x3', '-', '\x5', '-', '\x226', 
		'\n', '-', '\x3', '-', '\x5', '-', '\x229', '\n', '-', '\x3', '-', '\x5', 
		'-', '\x22C', '\n', '-', '\x3', '-', '\x3', '-', '\x3', '-', '\x3', '-', 
		'\x5', '-', '\x232', '\n', '-', '\x3', '-', '\x5', '-', '\x235', '\n', 
		'-', '\x3', '-', '\x5', '-', '\x238', '\n', '-', '\x3', '-', '\x3', '-', 
		'\x3', '-', '\x5', '-', '\x23D', '\n', '-', '\x3', '-', '\x3', '-', '\x5', 
		'-', '\x241', '\n', '-', '\x5', '-', '\x243', '\n', '-', '\x3', '.', '\x3', 
		'.', '\x3', '.', '\a', '.', '\x248', '\n', '.', '\f', '.', '\xE', '.', 
		'\x24B', '\v', '.', '\x3', '.', '\x3', '.', '\x5', '.', '\x24F', '\n', 
		'.', '\x3', '.', '\x5', '.', '\x252', '\n', '.', '\x3', '/', '\x3', '/', 
		'\x3', '/', '\x5', '/', '\x257', '\n', '/', '\x3', '\x30', '\x3', '\x30', 
		'\x3', '\x30', '\x3', '\x31', '\x3', '\x31', '\x5', '\x31', '\x25E', '\n', 
		'\x31', '\x3', '\x31', '\x3', '\x31', '\x3', '\x32', '\x6', '\x32', '\x263', 
		'\n', '\x32', '\r', '\x32', '\xE', '\x32', '\x264', '\x3', '\x33', '\x3', 
		'\x33', '\x3', '\x33', '\x3', '\x33', '\x3', '\x34', '\a', '\x34', '\x26C', 
		'\n', '\x34', '\f', '\x34', '\xE', '\x34', '\x26F', '\v', '\x34', '\x3', 
		'\x34', '\x5', '\x34', '\x272', '\n', '\x34', '\x3', '\x34', '\x6', '\x34', 
		'\x275', '\n', '\x34', '\r', '\x34', '\xE', '\x34', '\x276', '\x3', '\x34', 
		'\a', '\x34', '\x27A', '\n', '\x34', '\f', '\x34', '\xE', '\x34', '\x27D', 
		'\v', '\x34', '\x3', '\x34', '\a', '\x34', '\x280', '\n', '\x34', '\f', 
		'\x34', '\xE', '\x34', '\x283', '\v', '\x34', '\x3', '\x35', '\x5', '\x35', 
		'\x286', '\n', '\x35', '\x3', '\x35', '\x3', '\x35', '\x3', '\x36', '\x3', 
		'\x36', '\x3', '\x36', '\x3', '\x36', '\x3', '\x36', '\x3', '\x36', '\x3', 
		'\x36', '\x3', '\x36', '\x3', '\x36', '\x3', '\x36', '\x3', '\x36', '\x5', 
		'\x36', '\x295', '\n', '\x36', '\x3', '\x36', '\x5', '\x36', '\x298', 
		'\n', '\x36', '\x3', '\x36', '\x3', '\x36', '\x3', '\x36', '\x5', '\x36', 
		'\x29D', '\n', '\x36', '\x3', '\x36', '\x3', '\x36', '\x5', '\x36', '\x2A1', 
		'\n', '\x36', '\x3', '\x36', '\x3', '\x36', '\x3', '\x36', '\x3', '\x36', 
		'\x5', '\x36', '\x2A7', '\n', '\x36', '\x3', '\x36', '\x3', '\x36', '\x3', 
		'\x36', '\x3', '\x36', '\x3', '\x36', '\x5', '\x36', '\x2AE', '\n', '\x36', 
		'\x3', '\x36', '\x5', '\x36', '\x2B1', '\n', '\x36', '\x3', '\x36', '\x5', 
		'\x36', '\x2B4', '\n', '\x36', '\x3', '\x37', '\x3', '\x37', '\x3', '\x37', 
		'\x3', '\x37', '\x3', '\x37', '\x3', '\x37', '\x3', '\x37', '\x5', '\x37', 
		'\x2BD', '\n', '\x37', '\x3', '\x38', '\x3', '\x38', '\x3', '\x38', '\x3', 
		'\x38', '\a', '\x38', '\x2C3', '\n', '\x38', '\f', '\x38', '\xE', '\x38', 
		'\x2C6', '\v', '\x38', '\x3', '\x38', '\x5', '\x38', '\x2C9', '\n', '\x38', 
		'\x5', '\x38', '\x2CB', '\n', '\x38', '\x3', '\x38', '\x3', '\x38', '\x3', 
		'\x39', '\x5', '\x39', '\x2D0', '\n', '\x39', '\x3', '\x39', '\x3', '\x39', 
		'\x5', '\x39', '\x2D4', '\n', '\x39', '\x3', ':', '\x3', ':', '\x3', ':', 
		'\a', ':', '\x2D9', '\n', ':', '\f', ':', '\xE', ':', '\x2DC', '\v', ':', 
		'\x3', ';', '\x3', ';', '\x3', ';', '\x3', ';', '\x5', ';', '\x2E2', '\n', 
		';', '\x3', ';', '\x3', ';', '\x3', ';', '\x3', ';', '\x5', ';', '\x2E8', 
		'\n', ';', '\x3', ';', '\x3', ';', '\x3', ';', '\x3', ';', '\x3', ';', 
		'\x3', ';', '\x3', ';', '\x3', ';', '\x3', ';', '\x3', ';', '\x3', ';', 
		'\x3', ';', '\x3', ';', '\x3', ';', '\x3', ';', '\x3', ';', '\x3', ';', 
		'\x3', ';', '\x3', ';', '\x3', ';', '\x3', ';', '\x3', ';', '\x3', ';', 
		'\x3', ';', '\x3', ';', '\x3', ';', '\x3', ';', '\x3', ';', '\x3', ';', 
		'\x3', ';', '\x3', ';', '\x3', ';', '\x3', ';', '\x3', ';', '\x3', ';', 
		'\x3', ';', '\x3', ';', '\x3', ';', '\x3', ';', '\x5', ';', '\x311', '\n', 
		';', '\x3', ';', '\x3', ';', '\x3', ';', '\x3', ';', '\x3', ';', '\x3', 
		';', '\x3', ';', '\x3', ';', '\x3', ';', '\x3', ';', '\x3', ';', '\x3', 
		';', '\x3', ';', '\x3', ';', '\x3', ';', '\x3', ';', '\x3', ';', '\x3', 
		';', '\x3', ';', '\x3', ';', '\x3', ';', '\x3', ';', '\x3', ';', '\x3', 
		';', '\x3', ';', '\x3', ';', '\x3', ';', '\x3', ';', '\x3', ';', '\x3', 
		';', '\x3', ';', '\x3', ';', '\x3', ';', '\x3', ';', '\x3', ';', '\x3', 
		';', '\x3', ';', '\x3', ';', '\x3', ';', '\x3', ';', '\x3', ';', '\x3', 
		';', '\x3', ';', '\x3', ';', '\x3', ';', '\x3', ';', '\x3', ';', '\x3', 
		';', '\x3', ';', '\x3', ';', '\x3', ';', '\x3', ';', '\x3', ';', '\x3', 
		';', '\x3', ';', '\x3', ';', '\x3', ';', '\x3', ';', '\x3', ';', '\x3', 
		';', '\x3', ';', '\x3', ';', '\x5', ';', '\x351', '\n', ';', '\x3', ';', 
		'\x3', ';', '\x5', ';', '\x355', '\n', ';', '\x3', ';', '\x3', ';', '\x3', 
		';', '\x3', ';', '\x3', ';', '\x3', ';', '\x3', ';', '\x3', ';', '\x3', 
		';', '\x3', ';', '\x3', ';', '\a', ';', '\x362', '\n', ';', '\f', ';', 
		'\xE', ';', '\x365', '\v', ';', '\x3', '<', '\x3', '<', '\x3', '<', '\x5', 
		'<', '\x36A', '\n', '<', '\x3', '=', '\x3', '=', '\x3', '=', '\x3', '=', 
		'\a', '=', '\x370', '\n', '=', '\f', '=', '\xE', '=', '\x373', '\v', '=', 
		'\x5', '=', '\x375', '\n', '=', '\x3', '=', '\x5', '=', '\x378', '\n', 
		'=', '\x3', '=', '\x3', '=', '\x3', '>', '\x3', '>', '\x5', '>', '\x37E', 
		'\n', '>', '\x3', '>', '\x3', '>', '\x5', '>', '\x382', '\n', '>', '\x3', 
		'>', '\x3', '>', '\x5', '>', '\x386', '\n', '>', '\x3', '>', '\x3', '>', 
		'\x5', '>', '\x38A', '\n', '>', '\x3', '>', '\x5', '>', '\x38D', '\n', 
		'>', '\x3', '>', '\x3', '>', '\x3', '>', '\x3', '>', '\x5', '>', '\x393', 
		'\n', '>', '\x3', '?', '\x3', '?', '\x3', '?', '\x5', '?', '\x398', '\n', 
		'?', '\x3', '?', '\x5', '?', '\x39B', '\n', '?', '\x3', '@', '\x3', '@', 
		'\x5', '@', '\x39F', '\n', '@', '\x3', '\x41', '\x3', '\x41', '\x3', '\x42', 
		'\x3', '\x42', '\x3', '\x42', '\x3', '\x42', '\x3', '\x42', '\x3', '\x42', 
		'\x3', '\x42', '\x5', '\x42', '\x3AA', '\n', '\x42', '\x3', '\x43', '\x3', 
		'\x43', '\x3', '\x44', '\x3', '\x44', '\x3', '\x45', '\x3', '\x45', '\x3', 
		'\x45', '\x3', '\x45', '\x3', '\x46', '\x3', '\x46', '\x3', '\x46', '\x3', 
		'\x46', '\x3', 'G', '\x3', 'G', '\x5', 'G', '\x3BA', '\n', 'G', '\x3', 
		'H', '\x3', 'H', '\x3', 'I', '\x3', 'I', '\x3', 'I', '\x5', 'I', '\x3C1', 
		'\n', 'I', '\x3', 'J', '\x3', 'J', '\x3', 'J', '\x3', 'J', '\x3', 'J', 
		'\x3', 'J', '\x3', 'J', '\x3', 'J', '\x3', 'J', '\x3', 'J', '\x3', 'J', 
		'\x3', 'J', '\x3', 'J', '\x3', 'J', '\x3', 'J', '\x3', 'J', '\x3', 'J', 
		'\x3', 'J', '\x3', 'J', '\x3', 'J', '\x3', 'J', '\x3', 'J', '\x3', 'J', 
		'\x3', 'J', '\x3', 'J', '\x3', 'J', '\x3', 'J', '\x3', 'J', '\x3', 'J', 
		'\x3', 'J', '\x3', 'J', '\x3', 'J', '\x3', 'J', '\x3', 'J', '\x3', 'J', 
		'\x3', 'J', '\x3', 'J', '\x3', 'J', '\x3', 'J', '\x3', 'J', '\x3', 'J', 
		'\x3', 'J', '\x3', 'J', '\x3', 'J', '\x3', 'J', '\x3', 'J', '\x5', 'J', 
		'\x3F1', '\n', 'J', '\x3', 'K', '\x3', 'K', '\x3', 'L', '\x3', 'L', '\x3', 
		'L', '\x3', 'L', '\x5', 'L', '\x3F9', '\n', 'L', '\x3', 'L', '\x2', '\x3', 
		't', 'M', '\x2', '\x4', '\x6', '\b', '\n', '\f', '\xE', '\x10', '\x12', 
		'\x14', '\x16', '\x18', '\x1A', '\x1C', '\x1E', ' ', '\"', '$', '&', '(', 
		'*', ',', '.', '\x30', '\x32', '\x34', '\x36', '\x38', ':', '<', '>', 
		'@', '\x42', '\x44', '\x46', 'H', 'J', 'L', 'N', 'P', 'R', 'T', 'V', 'X', 
		'Z', '\\', '^', '`', '\x62', '\x64', '\x66', 'h', 'j', 'l', 'n', 'p', 
		'r', 't', 'v', 'x', 'z', '|', '~', '\x80', '\x82', '\x84', '\x86', '\x88', 
		'\x8A', '\x8C', '\x8E', '\x90', '\x92', '\x94', '\x96', '\x2', '\f', '\x3', 
		'\x2', '\x1A', '\x1C', '\x3', '\x2', '\x16', '\x17', '\x3', '\x2', ' ', 
		'\"', '\x3', '\x2', '#', '&', '\x3', '\x2', '\'', '*', '\x3', '\x2', '\x30', 
		';', '\x3', '\x2', '?', '\x43', '\x3', '\x2', '\x44', 'G', '\x5', '\x2', 
		'k', 'k', 'o', 'o', 'w', 'w', '\x3', '\x2', 'n', 'o', '\x2', '\x4A7', 
		'\x2', '\x99', '\x3', '\x2', '\x2', '\x2', '\x4', '\xA0', '\x3', '\x2', 
		'\x2', '\x2', '\x6', '\xB6', '\x3', '\x2', '\x2', '\x2', '\b', '\xB8', 
		'\x3', '\x2', '\x2', '\x2', '\n', '\xBF', '\x3', '\x2', '\x2', '\x2', 
		'\f', '\xC3', '\x3', '\x2', '\x2', '\x2', '\xE', '\xD2', '\x3', '\x2', 
		'\x2', '\x2', '\x10', '\xD4', '\x3', '\x2', '\x2', '\x2', '\x12', '\xE5', 
		'\x3', '\x2', '\x2', '\x2', '\x14', '\xEA', '\x3', '\x2', '\x2', '\x2', 
		'\x16', '\xF0', '\x3', '\x2', '\x2', '\x2', '\x18', '\xF3', '\x3', '\x2', 
		'\x2', '\x2', '\x1A', '\x104', '\x3', '\x2', '\x2', '\x2', '\x1C', '\x110', 
		'\x3', '\x2', '\x2', '\x2', '\x1E', '\x115', '\x3', '\x2', '\x2', '\x2', 
		' ', '\x117', '\x3', '\x2', '\x2', '\x2', '\"', '\x11A', '\x3', '\x2', 
		'\x2', '\x2', '$', '\x123', '\x3', '\x2', '\x2', '\x2', '&', '\x128', 
		'\x3', '\x2', '\x2', '\x2', '(', '\x12A', '\x3', '\x2', '\x2', '\x2', 
		'*', '\x12E', '\x3', '\x2', '\x2', '\x2', ',', '\x16F', '\x3', '\x2', 
		'\x2', '\x2', '.', '\x174', '\x3', '\x2', '\x2', '\x2', '\x30', '\x176', 
		'\x3', '\x2', '\x2', '\x2', '\x32', '\x17D', '\x3', '\x2', '\x2', '\x2', 
		'\x34', '\x184', '\x3', '\x2', '\x2', '\x2', '\x36', '\x18B', '\x3', '\x2', 
		'\x2', '\x2', '\x38', '\x192', '\x3', '\x2', '\x2', '\x2', ':', '\x198', 
		'\x3', '\x2', '\x2', '\x2', '<', '\x19E', '\x3', '\x2', '\x2', '\x2', 
		'>', '\x1AB', '\x3', '\x2', '\x2', '\x2', '@', '\x1AF', '\x3', '\x2', 
		'\x2', '\x2', '\x42', '\x1B5', '\x3', '\x2', '\x2', '\x2', '\x44', '\x1BA', 
		'\x3', '\x2', '\x2', '\x2', '\x46', '\x1BE', '\x3', '\x2', '\x2', '\x2', 
		'H', '\x1C3', '\x3', '\x2', '\x2', '\x2', 'J', '\x1CC', '\x3', '\x2', 
		'\x2', '\x2', 'L', '\x1D6', '\x3', '\x2', '\x2', '\x2', 'N', '\x1D9', 
		'\x3', '\x2', '\x2', '\x2', 'P', '\x1DD', '\x3', '\x2', '\x2', '\x2', 
		'R', '\x1EC', '\x3', '\x2', '\x2', '\x2', 'T', '\x1F2', '\x3', '\x2', 
		'\x2', '\x2', 'V', '\x216', '\x3', '\x2', '\x2', '\x2', 'X', '\x242', 
		'\x3', '\x2', '\x2', '\x2', 'Z', '\x251', '\x3', '\x2', '\x2', '\x2', 
		'\\', '\x253', '\x3', '\x2', '\x2', '\x2', '^', '\x258', '\x3', '\x2', 
		'\x2', '\x2', '`', '\x25B', '\x3', '\x2', '\x2', '\x2', '\x62', '\x262', 
		'\x3', '\x2', '\x2', '\x2', '\x64', '\x266', '\x3', '\x2', '\x2', '\x2', 
		'\x66', '\x26D', '\x3', '\x2', '\x2', '\x2', 'h', '\x285', '\x3', '\x2', 
		'\x2', '\x2', 'j', '\x2B3', '\x3', '\x2', '\x2', '\x2', 'l', '\x2BC', 
		'\x3', '\x2', '\x2', '\x2', 'n', '\x2BE', '\x3', '\x2', '\x2', '\x2', 
		'p', '\x2CF', '\x3', '\x2', '\x2', '\x2', 'r', '\x2D5', '\x3', '\x2', 
		'\x2', '\x2', 't', '\x310', '\x3', '\x2', '\x2', '\x2', 'v', '\x369', 
		'\x3', '\x2', '\x2', '\x2', 'x', '\x36B', '\x3', '\x2', '\x2', '\x2', 
		'z', '\x392', '\x3', '\x2', '\x2', '\x2', '|', '\x39A', '\x3', '\x2', 
		'\x2', '\x2', '~', '\x39E', '\x3', '\x2', '\x2', '\x2', '\x80', '\x3A0', 
		'\x3', '\x2', '\x2', '\x2', '\x82', '\x3A9', '\x3', '\x2', '\x2', '\x2', 
		'\x84', '\x3AB', '\x3', '\x2', '\x2', '\x2', '\x86', '\x3AD', '\x3', '\x2', 
		'\x2', '\x2', '\x88', '\x3AF', '\x3', '\x2', '\x2', '\x2', '\x8A', '\x3B3', 
		'\x3', '\x2', '\x2', '\x2', '\x8C', '\x3B9', '\x3', '\x2', '\x2', '\x2', 
		'\x8E', '\x3BB', '\x3', '\x2', '\x2', '\x2', '\x90', '\x3C0', '\x3', '\x2', 
		'\x2', '\x2', '\x92', '\x3F0', '\x3', '\x2', '\x2', '\x2', '\x94', '\x3F2', 
		'\x3', '\x2', '\x2', '\x2', '\x96', '\x3F8', '\x3', '\x2', '\x2', '\x2', 
		'\x98', '\x9A', '\a', '\x3', '\x2', '\x2', '\x99', '\x98', '\x3', '\x2', 
		'\x2', '\x2', '\x99', '\x9A', '\x3', '\x2', '\x2', '\x2', '\x9A', '\x9C', 
		'\x3', '\x2', '\x2', '\x2', '\x9B', '\x9D', '\x5', '\x62', '\x32', '\x2', 
		'\x9C', '\x9B', '\x3', '\x2', '\x2', '\x2', '\x9C', '\x9D', '\x3', '\x2', 
		'\x2', '\x2', '\x9D', '\x9E', '\x3', '\x2', '\x2', '\x2', '\x9E', '\x9F', 
		'\a', '\x2', '\x2', '\x3', '\x9F', '\x3', '\x3', '\x2', '\x2', '\x2', 
		'\xA0', '\xA1', '\x5', '\x6', '\x4', '\x2', '\xA1', '\x5', '\x3', '\x2', 
		'\x2', '\x2', '\xA2', '\xB7', '\x5', '\b', '\x5', '\x2', '\xA3', '\xB7', 
		'\x5', ' ', '\x11', '\x2', '\xA4', '\xB7', '\x5', '\f', '\a', '\x2', '\xA5', 
		'\xB7', '\x5', '\x1A', '\xE', '\x2', '\xA6', '\xB7', '\x5', '&', '\x14', 
		'\x2', '\xA7', '\xB7', '\x5', 'R', '*', '\x2', '\xA8', '\xB7', '\x5', 
		'(', '\x15', '\x2', '\xA9', '\xB7', '\x5', '*', '\x16', '\x2', '\xAA', 
		'\xB7', '\x5', ',', '\x17', '\x2', '\xAB', '\xB7', '\x5', '\x30', '\x19', 
		'\x2', '\xAC', '\xB7', '\x5', '\x32', '\x1A', '\x2', '\xAD', '\xB7', '\x5', 
		'\x34', '\x1B', '\x2', '\xAE', '\xB7', '\x5', '\x36', '\x1C', '\x2', '\xAF', 
		'\xB7', '\x5', '\x38', '\x1D', '\x2', '\xB0', '\xB7', '\x5', '\x44', '#', 
		'\x2', '\xB1', '\xB7', '\x5', ':', '\x1E', '\x2', '\xB2', '\xB7', '\x5', 
		'\x46', '$', '\x2', '\xB3', '\xB7', '\x5', 'H', '%', '\x2', '\xB4', '\xB7', 
		'\x5', 'N', '(', '\x2', '\xB5', '\xB7', '\x5', 'P', ')', '\x2', '\xB6', 
		'\xA2', '\x3', '\x2', '\x2', '\x2', '\xB6', '\xA3', '\x3', '\x2', '\x2', 
		'\x2', '\xB6', '\xA4', '\x3', '\x2', '\x2', '\x2', '\xB6', '\xA5', '\x3', 
		'\x2', '\x2', '\x2', '\xB6', '\xA6', '\x3', '\x2', '\x2', '\x2', '\xB6', 
		'\xA7', '\x3', '\x2', '\x2', '\x2', '\xB6', '\xA8', '\x3', '\x2', '\x2', 
		'\x2', '\xB6', '\xA9', '\x3', '\x2', '\x2', '\x2', '\xB6', '\xAA', '\x3', 
		'\x2', '\x2', '\x2', '\xB6', '\xAB', '\x3', '\x2', '\x2', '\x2', '\xB6', 
		'\xAC', '\x3', '\x2', '\x2', '\x2', '\xB6', '\xAD', '\x3', '\x2', '\x2', 
		'\x2', '\xB6', '\xAE', '\x3', '\x2', '\x2', '\x2', '\xB6', '\xAF', '\x3', 
		'\x2', '\x2', '\x2', '\xB6', '\xB0', '\x3', '\x2', '\x2', '\x2', '\xB6', 
		'\xB1', '\x3', '\x2', '\x2', '\x2', '\xB6', '\xB2', '\x3', '\x2', '\x2', 
		'\x2', '\xB6', '\xB3', '\x3', '\x2', '\x2', '\x2', '\xB6', '\xB4', '\x3', 
		'\x2', '\x2', '\x2', '\xB6', '\xB5', '\x3', '\x2', '\x2', '\x2', '\xB7', 
		'\a', '\x3', '\x2', '\x2', '\x2', '\xB8', '\xBA', '\a', '\v', '\x2', '\x2', 
		'\xB9', '\xBB', '\x5', '\n', '\x6', '\x2', '\xBA', '\xB9', '\x3', '\x2', 
		'\x2', '\x2', '\xBA', '\xBB', '\x3', '\x2', '\x2', '\x2', '\xBB', '\xBC', 
		'\x3', '\x2', '\x2', '\x2', '\xBC', '\xBD', '\a', '\f', '\x2', '\x2', 
		'\xBD', '\t', '\x3', '\x2', '\x2', '\x2', '\xBE', '\xC0', '\x5', '\x6', 
		'\x4', '\x2', '\xBF', '\xBE', '\x3', '\x2', '\x2', '\x2', '\xC0', '\xC1', 
		'\x3', '\x2', '\x2', '\x2', '\xC1', '\xBF', '\x3', '\x2', '\x2', '\x2', 
		'\xC1', '\xC2', '\x3', '\x2', '\x2', '\x2', '\xC2', '\v', '\x3', '\x2', 
		'\x2', '\x2', '\xC3', '\xC4', '\a', 'j', '\x2', '\x2', '\xC4', '\xC5', 
		'\x5', '\xE', '\b', '\x2', '\xC5', '\r', '\x3', '\x2', '\x2', '\x2', '\xC6', 
		'\xC8', '\x5', '\x12', '\n', '\x2', '\xC7', '\xC6', '\x3', '\x2', '\x2', 
		'\x2', '\xC7', '\xC8', '\x3', '\x2', '\x2', '\x2', '\xC8', '\xCB', '\x3', 
		'\x2', '\x2', '\x2', '\xC9', '\xCC', '\x5', '\x14', '\v', '\x2', '\xCA', 
		'\xCC', '\x5', '\x10', '\t', '\x2', '\xCB', '\xC9', '\x3', '\x2', '\x2', 
		'\x2', '\xCB', '\xCA', '\x3', '\x2', '\x2', '\x2', '\xCC', '\xCD', '\x3', 
		'\x2', '\x2', '\x2', '\xCD', '\xCE', '\x5', '\x16', '\f', '\x2', '\xCE', 
		'\xCF', '\x5', '\x96', 'L', '\x2', '\xCF', '\xD3', '\x3', '\x2', '\x2', 
		'\x2', '\xD0', '\xD1', '\a', 'x', '\x2', '\x2', '\xD1', '\xD3', '\x5', 
		'\x96', 'L', '\x2', '\xD2', '\xC7', '\x3', '\x2', '\x2', '\x2', '\xD2', 
		'\xD0', '\x3', '\x2', '\x2', '\x2', '\xD3', '\xF', '\x3', '\x2', '\x2', 
		'\x2', '\xD4', '\xDA', '\a', '\v', '\x2', '\x2', '\xD5', '\xD6', '\x5', 
		'\x18', '\r', '\x2', '\xD6', '\xD7', '\a', '\xE', '\x2', '\x2', '\xD7', 
		'\xD9', '\x3', '\x2', '\x2', '\x2', '\xD8', '\xD5', '\x3', '\x2', '\x2', 
		'\x2', '\xD9', '\xDC', '\x3', '\x2', '\x2', '\x2', '\xDA', '\xD8', '\x3', 
		'\x2', '\x2', '\x2', '\xDA', '\xDB', '\x3', '\x2', '\x2', '\x2', '\xDB', 
		'\xE1', '\x3', '\x2', '\x2', '\x2', '\xDC', '\xDA', '\x3', '\x2', '\x2', 
		'\x2', '\xDD', '\xDF', '\x5', '\x18', '\r', '\x2', '\xDE', '\xE0', '\a', 
		'\xE', '\x2', '\x2', '\xDF', '\xDE', '\x3', '\x2', '\x2', '\x2', '\xDF', 
		'\xE0', '\x3', '\x2', '\x2', '\x2', '\xE0', '\xE2', '\x3', '\x2', '\x2', 
		'\x2', '\xE1', '\xDD', '\x3', '\x2', '\x2', '\x2', '\xE1', '\xE2', '\x3', 
		'\x2', '\x2', '\x2', '\xE2', '\xE3', '\x3', '\x2', '\x2', '\x2', '\xE3', 
		'\xE4', '\a', '\f', '\x2', '\x2', '\xE4', '\x11', '\x3', '\x2', '\x2', 
		'\x2', '\xE5', '\xE6', '\x5', '\x18', '\r', '\x2', '\xE6', '\xE7', '\a', 
		'\xE', '\x2', '\x2', '\xE7', '\x13', '\x3', '\x2', '\x2', '\x2', '\xE8', 
		'\xEB', '\a', '\x1A', '\x2', '\x2', '\xE9', '\xEB', '\x5', '\x8C', 'G', 
		'\x2', '\xEA', '\xE8', '\x3', '\x2', '\x2', '\x2', '\xEA', '\xE9', '\x3', 
		'\x2', '\x2', '\x2', '\xEB', '\xEE', '\x3', '\x2', '\x2', '\x2', '\xEC', 
		'\xED', '\a', '\x62', '\x2', '\x2', '\xED', '\xEF', '\x5', '\x8C', 'G', 
		'\x2', '\xEE', '\xEC', '\x3', '\x2', '\x2', '\x2', '\xEE', '\xEF', '\x3', 
		'\x2', '\x2', '\x2', '\xEF', '\x15', '\x3', '\x2', '\x2', '\x2', '\xF0', 
		'\xF1', '\a', '\x63', '\x2', '\x2', '\xF1', '\xF2', '\a', 'x', '\x2', 
		'\x2', '\xF2', '\x17', '\x3', '\x2', '\x2', '\x2', '\xF3', '\xF6', '\x5', 
		'\x8C', 'G', '\x2', '\xF4', '\xF5', '\a', '\x62', '\x2', '\x2', '\xF5', 
		'\xF7', '\x5', '\x8C', 'G', '\x2', '\xF6', '\xF4', '\x3', '\x2', '\x2', 
		'\x2', '\xF6', '\xF7', '\x3', '\x2', '\x2', '\x2', '\xF7', '\x19', '\x3', 
		'\x2', '\x2', '\x2', '\xF8', '\xFB', '\a', 'i', '\x2', '\x2', '\xF9', 
		'\xFC', '\x5', '\x1C', '\xF', '\x2', '\xFA', '\xFC', '\x5', '\x1E', '\x10', 
		'\x2', '\xFB', '\xF9', '\x3', '\x2', '\x2', '\x2', '\xFB', '\xFA', '\x3', 
		'\x2', '\x2', '\x2', '\xFC', '\xFD', '\x3', '\x2', '\x2', '\x2', '\xFD', 
		'\xFE', '\x5', '\x96', 'L', '\x2', '\xFE', '\x105', '\x3', '\x2', '\x2', 
		'\x2', '\xFF', '\x100', '\a', 'i', '\x2', '\x2', '\x100', '\x101', '\a', 
		'\\', '\x2', '\x2', '\x101', '\x102', '\x5', 't', ';', '\x2', '\x102', 
		'\x103', '\x5', '\x96', 'L', '\x2', '\x103', '\x105', '\x3', '\x2', '\x2', 
		'\x2', '\x104', '\xF8', '\x3', '\x2', '\x2', '\x2', '\x104', '\xFF', '\x3', 
		'\x2', '\x2', '\x2', '\x105', '\x1B', '\x3', '\x2', '\x2', '\x2', '\x106', 
		'\x107', '\x5', '\x14', '\v', '\x2', '\x107', '\x108', '\x5', '\x16', 
		'\f', '\x2', '\x108', '\x109', '\x5', '\x96', 'L', '\x2', '\x109', '\x111', 
		'\x3', '\x2', '\x2', '\x2', '\x10A', '\x10C', '\x5', '\x10', '\t', '\x2', 
		'\x10B', '\x10D', '\x5', '\x16', '\f', '\x2', '\x10C', '\x10B', '\x3', 
		'\x2', '\x2', '\x2', '\x10C', '\x10D', '\x3', '\x2', '\x2', '\x2', '\x10D', 
		'\x10E', '\x3', '\x2', '\x2', '\x2', '\x10E', '\x10F', '\x5', '\x96', 
		'L', '\x2', '\x10F', '\x111', '\x3', '\x2', '\x2', '\x2', '\x110', '\x106', 
		'\x3', '\x2', '\x2', '\x2', '\x110', '\x10A', '\x3', '\x2', '\x2', '\x2', 
		'\x111', '\x1D', '\x3', '\x2', '\x2', '\x2', '\x112', '\x116', '\x5', 
		' ', '\x11', '\x2', '\x113', '\x116', '\x5', 'R', '*', '\x2', '\x114', 
		'\x116', '\x5', 'P', ')', '\x2', '\x115', '\x112', '\x3', '\x2', '\x2', 
		'\x2', '\x115', '\x113', '\x3', '\x2', '\x2', '\x2', '\x115', '\x114', 
		'\x3', '\x2', '\x2', '\x2', '\x116', '\x1F', '\x3', '\x2', '\x2', '\x2', 
		'\x117', '\x118', '\x5', '\"', '\x12', '\x2', '\x118', '\x119', '\x5', 
		'\x96', 'L', '\x2', '\x119', '!', '\x3', '\x2', '\x2', '\x2', '\x11A', 
		'\x11B', '\x5', '.', '\x18', '\x2', '\x11B', '\x120', '\x5', '$', '\x13', 
		'\x2', '\x11C', '\x11D', '\a', '\xE', '\x2', '\x2', '\x11D', '\x11F', 
		'\x5', '$', '\x13', '\x2', '\x11E', '\x11C', '\x3', '\x2', '\x2', '\x2', 
		'\x11F', '\x122', '\x3', '\x2', '\x2', '\x2', '\x120', '\x11E', '\x3', 
		'\x2', '\x2', '\x2', '\x120', '\x121', '\x3', '\x2', '\x2', '\x2', '\x121', 
		'#', '\x3', '\x2', '\x2', '\x2', '\x122', '\x120', '\x3', '\x2', '\x2', 
		'\x2', '\x123', '\x126', '\x5', 'v', '<', '\x2', '\x124', '\x125', '\a', 
		'\xF', '\x2', '\x2', '\x125', '\x127', '\x5', 't', ';', '\x2', '\x126', 
		'\x124', '\x3', '\x2', '\x2', '\x2', '\x126', '\x127', '\x3', '\x2', '\x2', 
		'\x2', '\x127', '%', '\x3', '\x2', '\x2', '\x2', '\x128', '\x129', '\a', 
		'\r', '\x2', '\x2', '\x129', '\'', '\x3', '\x2', '\x2', '\x2', '\x12A', 
		'\x12B', '\x6', '\x15', '\x2', '\x2', '\x12B', '\x12C', '\x5', 'r', ':', 
		'\x2', '\x12C', '\x12D', '\x5', '\x96', 'L', '\x2', '\x12D', ')', '\x3', 
		'\x2', '\x2', '\x2', '\x12E', '\x12F', '\a', ']', '\x2', '\x2', '\x12F', 
		'\x130', '\a', '\t', '\x2', '\x2', '\x130', '\x131', '\x5', 'r', ':', 
		'\x2', '\x131', '\x132', '\a', '\n', '\x2', '\x2', '\x132', '\x135', '\x5', 
		'\x6', '\x4', '\x2', '\x133', '\x134', '\a', 'M', '\x2', '\x2', '\x134', 
		'\x136', '\x5', '\x6', '\x4', '\x2', '\x135', '\x133', '\x3', '\x2', '\x2', 
		'\x2', '\x135', '\x136', '\x3', '\x2', '\x2', '\x2', '\x136', '+', '\x3', 
		'\x2', '\x2', '\x2', '\x137', '\x138', '\a', 'I', '\x2', '\x2', '\x138', 
		'\x139', '\x5', '\x6', '\x4', '\x2', '\x139', '\x13A', '\a', 'W', '\x2', 
		'\x2', '\x13A', '\x13B', '\a', '\t', '\x2', '\x2', '\x13B', '\x13C', '\x5', 
		'r', ':', '\x2', '\x13C', '\x13D', '\a', '\n', '\x2', '\x2', '\x13D', 
		'\x13E', '\x5', '\x96', 'L', '\x2', '\x13E', '\x170', '\x3', '\x2', '\x2', 
		'\x2', '\x13F', '\x140', '\a', 'W', '\x2', '\x2', '\x140', '\x141', '\a', 
		'\t', '\x2', '\x2', '\x141', '\x142', '\x5', 'r', ':', '\x2', '\x142', 
		'\x143', '\a', '\n', '\x2', '\x2', '\x143', '\x144', '\x5', '\x6', '\x4', 
		'\x2', '\x144', '\x170', '\x3', '\x2', '\x2', '\x2', '\x145', '\x146', 
		'\a', 'U', '\x2', '\x2', '\x146', '\x149', '\a', '\t', '\x2', '\x2', '\x147', 
		'\x14A', '\x5', 'r', ':', '\x2', '\x148', '\x14A', '\x5', '\"', '\x12', 
		'\x2', '\x149', '\x147', '\x3', '\x2', '\x2', '\x2', '\x149', '\x148', 
		'\x3', '\x2', '\x2', '\x2', '\x149', '\x14A', '\x3', '\x2', '\x2', '\x2', 
		'\x14A', '\x14B', '\x3', '\x2', '\x2', '\x2', '\x14B', '\x14D', '\a', 
		'\r', '\x2', '\x2', '\x14C', '\x14E', '\x5', 'r', ':', '\x2', '\x14D', 
		'\x14C', '\x3', '\x2', '\x2', '\x2', '\x14D', '\x14E', '\x3', '\x2', '\x2', 
		'\x2', '\x14E', '\x14F', '\x3', '\x2', '\x2', '\x2', '\x14F', '\x151', 
		'\a', '\r', '\x2', '\x2', '\x150', '\x152', '\x5', 'r', ':', '\x2', '\x151', 
		'\x150', '\x3', '\x2', '\x2', '\x2', '\x151', '\x152', '\x3', '\x2', '\x2', 
		'\x2', '\x152', '\x153', '\x3', '\x2', '\x2', '\x2', '\x153', '\x154', 
		'\a', '\n', '\x2', '\x2', '\x154', '\x170', '\x5', '\x6', '\x4', '\x2', 
		'\x155', '\x156', '\a', 'U', '\x2', '\x2', '\x156', '\x159', '\a', '\t', 
		'\x2', '\x2', '\x157', '\x15A', '\x5', 't', ';', '\x2', '\x158', '\x15A', 
		'\x5', '\"', '\x12', '\x2', '\x159', '\x157', '\x3', '\x2', '\x2', '\x2', 
		'\x159', '\x158', '\x3', '\x2', '\x2', '\x2', '\x15A', '\x15B', '\x3', 
		'\x2', '\x2', '\x2', '\x15B', '\x15C', '\a', '`', '\x2', '\x2', '\x15C', 
		'\x15D', '\x5', 'r', ':', '\x2', '\x15D', '\x15E', '\a', '\n', '\x2', 
		'\x2', '\x15E', '\x15F', '\x5', '\x6', '\x4', '\x2', '\x15F', '\x170', 
		'\x3', '\x2', '\x2', '\x2', '\x160', '\x162', '\a', 'U', '\x2', '\x2', 
		'\x161', '\x163', '\a', 'l', '\x2', '\x2', '\x162', '\x161', '\x3', '\x2', 
		'\x2', '\x2', '\x162', '\x163', '\x3', '\x2', '\x2', '\x2', '\x163', '\x164', 
		'\x3', '\x2', '\x2', '\x2', '\x164', '\x167', '\a', '\t', '\x2', '\x2', 
		'\x165', '\x168', '\x5', 't', ';', '\x2', '\x166', '\x168', '\x5', '\"', 
		'\x12', '\x2', '\x167', '\x165', '\x3', '\x2', '\x2', '\x2', '\x167', 
		'\x166', '\x3', '\x2', '\x2', '\x2', '\x168', '\x169', '\x3', '\x2', '\x2', 
		'\x2', '\x169', '\x16A', '\x5', '\x8E', 'H', '\x2', '\x16A', '\x16B', 
		'\x6', '\x17', '\x3', '\x2', '\x16B', '\x16C', '\x5', 'r', ':', '\x2', 
		'\x16C', '\x16D', '\a', '\n', '\x2', '\x2', '\x16D', '\x16E', '\x5', '\x6', 
		'\x4', '\x2', '\x16E', '\x170', '\x3', '\x2', '\x2', '\x2', '\x16F', '\x137', 
		'\x3', '\x2', '\x2', '\x2', '\x16F', '\x13F', '\x3', '\x2', '\x2', '\x2', 
		'\x16F', '\x145', '\x3', '\x2', '\x2', '\x2', '\x16F', '\x155', '\x3', 
		'\x2', '\x2', '\x2', '\x16F', '\x160', '\x3', '\x2', '\x2', '\x2', '\x170', 
		'-', '\x3', '\x2', '\x2', '\x2', '\x171', '\x175', '\a', 'O', '\x2', '\x2', 
		'\x172', '\x175', '\x5', '\x94', 'K', '\x2', '\x173', '\x175', '\a', 'h', 
		'\x2', '\x2', '\x174', '\x171', '\x3', '\x2', '\x2', '\x2', '\x174', '\x172', 
		'\x3', '\x2', '\x2', '\x2', '\x174', '\x173', '\x3', '\x2', '\x2', '\x2', 
		'\x175', '/', '\x3', '\x2', '\x2', '\x2', '\x176', '\x179', '\a', 'T', 
		'\x2', '\x2', '\x177', '\x178', '\x6', '\x19', '\x4', '\x2', '\x178', 
		'\x17A', '\x5', '\x8E', 'H', '\x2', '\x179', '\x177', '\x3', '\x2', '\x2', 
		'\x2', '\x179', '\x17A', '\x3', '\x2', '\x2', '\x2', '\x17A', '\x17B', 
		'\x3', '\x2', '\x2', '\x2', '\x17B', '\x17C', '\x5', '\x96', 'L', '\x2', 
		'\x17C', '\x31', '\x3', '\x2', '\x2', '\x2', '\x17D', '\x180', '\a', 'H', 
		'\x2', '\x2', '\x17E', '\x17F', '\x6', '\x1A', '\x5', '\x2', '\x17F', 
		'\x181', '\x5', '\x8E', 'H', '\x2', '\x180', '\x17E', '\x3', '\x2', '\x2', 
		'\x2', '\x180', '\x181', '\x3', '\x2', '\x2', '\x2', '\x181', '\x182', 
		'\x3', '\x2', '\x2', '\x2', '\x182', '\x183', '\x5', '\x96', 'L', '\x2', 
		'\x183', '\x33', '\x3', '\x2', '\x2', '\x2', '\x184', '\x187', '\a', 'R', 
		'\x2', '\x2', '\x185', '\x186', '\x6', '\x1B', '\x6', '\x2', '\x186', 
		'\x188', '\x5', 'r', ':', '\x2', '\x187', '\x185', '\x3', '\x2', '\x2', 
		'\x2', '\x187', '\x188', '\x3', '\x2', '\x2', '\x2', '\x188', '\x189', 
		'\x3', '\x2', '\x2', '\x2', '\x189', '\x18A', '\x5', '\x96', 'L', '\x2', 
		'\x18A', '\x35', '\x3', '\x2', '\x2', '\x2', '\x18B', '\x18E', '\a', 'v', 
		'\x2', '\x2', '\x18C', '\x18D', '\x6', '\x1C', '\a', '\x2', '\x18D', '\x18F', 
		'\x5', 'r', ':', '\x2', '\x18E', '\x18C', '\x3', '\x2', '\x2', '\x2', 
		'\x18E', '\x18F', '\x3', '\x2', '\x2', '\x2', '\x18F', '\x190', '\x3', 
		'\x2', '\x2', '\x2', '\x190', '\x191', '\x5', '\x96', 'L', '\x2', '\x191', 
		'\x37', '\x3', '\x2', '\x2', '\x2', '\x192', '\x193', '\a', '[', '\x2', 
		'\x2', '\x193', '\x194', '\a', '\t', '\x2', '\x2', '\x194', '\x195', '\x5', 
		'r', ':', '\x2', '\x195', '\x196', '\a', '\n', '\x2', '\x2', '\x196', 
		'\x197', '\x5', '\x6', '\x4', '\x2', '\x197', '\x39', '\x3', '\x2', '\x2', 
		'\x2', '\x198', '\x199', '\a', 'V', '\x2', '\x2', '\x199', '\x19A', '\a', 
		'\t', '\x2', '\x2', '\x19A', '\x19B', '\x5', 'r', ':', '\x2', '\x19B', 
		'\x19C', '\a', '\n', '\x2', '\x2', '\x19C', '\x19D', '\x5', '<', '\x1F', 
		'\x2', '\x19D', ';', '\x3', '\x2', '\x2', '\x2', '\x19E', '\x1A0', '\a', 
		'\v', '\x2', '\x2', '\x19F', '\x1A1', '\x5', '>', ' ', '\x2', '\x1A0', 
		'\x19F', '\x3', '\x2', '\x2', '\x2', '\x1A0', '\x1A1', '\x3', '\x2', '\x2', 
		'\x2', '\x1A1', '\x1A6', '\x3', '\x2', '\x2', '\x2', '\x1A2', '\x1A4', 
		'\x5', '\x42', '\"', '\x2', '\x1A3', '\x1A5', '\x5', '>', ' ', '\x2', 
		'\x1A4', '\x1A3', '\x3', '\x2', '\x2', '\x2', '\x1A4', '\x1A5', '\x3', 
		'\x2', '\x2', '\x2', '\x1A5', '\x1A7', '\x3', '\x2', '\x2', '\x2', '\x1A6', 
		'\x1A2', '\x3', '\x2', '\x2', '\x2', '\x1A6', '\x1A7', '\x3', '\x2', '\x2', 
		'\x2', '\x1A7', '\x1A8', '\x3', '\x2', '\x2', '\x2', '\x1A8', '\x1A9', 
		'\a', '\f', '\x2', '\x2', '\x1A9', '=', '\x3', '\x2', '\x2', '\x2', '\x1AA', 
		'\x1AC', '\x5', '@', '!', '\x2', '\x1AB', '\x1AA', '\x3', '\x2', '\x2', 
		'\x2', '\x1AC', '\x1AD', '\x3', '\x2', '\x2', '\x2', '\x1AD', '\x1AB', 
		'\x3', '\x2', '\x2', '\x2', '\x1AD', '\x1AE', '\x3', '\x2', '\x2', '\x2', 
		'\x1AE', '?', '\x3', '\x2', '\x2', '\x2', '\x1AF', '\x1B0', '\a', 'L', 
		'\x2', '\x2', '\x1B0', '\x1B1', '\x5', 'r', ':', '\x2', '\x1B1', '\x1B3', 
		'\a', '\x11', '\x2', '\x2', '\x1B2', '\x1B4', '\x5', '\n', '\x6', '\x2', 
		'\x1B3', '\x1B2', '\x3', '\x2', '\x2', '\x2', '\x1B3', '\x1B4', '\x3', 
		'\x2', '\x2', '\x2', '\x1B4', '\x41', '\x3', '\x2', '\x2', '\x2', '\x1B5', 
		'\x1B6', '\a', '\\', '\x2', '\x2', '\x1B6', '\x1B8', '\a', '\x11', '\x2', 
		'\x2', '\x1B7', '\x1B9', '\x5', '\n', '\x6', '\x2', '\x1B8', '\x1B7', 
		'\x3', '\x2', '\x2', '\x2', '\x1B8', '\x1B9', '\x3', '\x2', '\x2', '\x2', 
		'\x1B9', '\x43', '\x3', '\x2', '\x2', '\x2', '\x1BA', '\x1BB', '\x5', 
		'\x8E', 'H', '\x2', '\x1BB', '\x1BC', '\a', '\x11', '\x2', '\x2', '\x1BC', 
		'\x1BD', '\x5', '\x6', '\x4', '\x2', '\x1BD', '\x45', '\x3', '\x2', '\x2', 
		'\x2', '\x1BE', '\x1BF', '\a', '^', '\x2', '\x2', '\x1BF', '\x1C0', '\x6', 
		'$', '\b', '\x2', '\x1C0', '\x1C1', '\x5', 'r', ':', '\x2', '\x1C1', '\x1C2', 
		'\x5', '\x96', 'L', '\x2', '\x1C2', 'G', '\x3', '\x2', '\x2', '\x2', '\x1C3', 
		'\x1C4', '\a', '\x61', '\x2', '\x2', '\x1C4', '\x1CA', '\x5', '\b', '\x5', 
		'\x2', '\x1C5', '\x1C7', '\x5', 'J', '&', '\x2', '\x1C6', '\x1C8', '\x5', 
		'L', '\'', '\x2', '\x1C7', '\x1C6', '\x3', '\x2', '\x2', '\x2', '\x1C7', 
		'\x1C8', '\x3', '\x2', '\x2', '\x2', '\x1C8', '\x1CB', '\x3', '\x2', '\x2', 
		'\x2', '\x1C9', '\x1CB', '\x5', 'L', '\'', '\x2', '\x1CA', '\x1C5', '\x3', 
		'\x2', '\x2', '\x2', '\x1CA', '\x1C9', '\x3', '\x2', '\x2', '\x2', '\x1CB', 
		'I', '\x3', '\x2', '\x2', '\x2', '\x1CC', '\x1D2', '\a', 'P', '\x2', '\x2', 
		'\x1CD', '\x1CF', '\a', '\t', '\x2', '\x2', '\x1CE', '\x1D0', '\x5', 'v', 
		'<', '\x2', '\x1CF', '\x1CE', '\x3', '\x2', '\x2', '\x2', '\x1CF', '\x1D0', 
		'\x3', '\x2', '\x2', '\x2', '\x1D0', '\x1D1', '\x3', '\x2', '\x2', '\x2', 
		'\x1D1', '\x1D3', '\a', '\n', '\x2', '\x2', '\x1D2', '\x1CD', '\x3', '\x2', 
		'\x2', '\x2', '\x1D2', '\x1D3', '\x3', '\x2', '\x2', '\x2', '\x1D3', '\x1D4', 
		'\x3', '\x2', '\x2', '\x2', '\x1D4', '\x1D5', '\x5', '\b', '\x5', '\x2', 
		'\x1D5', 'K', '\x3', '\x2', '\x2', '\x2', '\x1D6', '\x1D7', '\a', 'Q', 
		'\x2', '\x2', '\x1D7', '\x1D8', '\x5', '\b', '\x5', '\x2', '\x1D8', 'M', 
		'\x3', '\x2', '\x2', '\x2', '\x1D9', '\x1DA', '\a', 'X', '\x2', '\x2', 
		'\x1DA', '\x1DB', '\x5', '\x96', 'L', '\x2', '\x1DB', 'O', '\x3', '\x2', 
		'\x2', '\x2', '\x1DC', '\x1DE', '\a', 'k', '\x2', '\x2', '\x1DD', '\x1DC', 
		'\x3', '\x2', '\x2', '\x2', '\x1DD', '\x1DE', '\x3', '\x2', '\x2', '\x2', 
		'\x1DE', '\x1DF', '\x3', '\x2', '\x2', '\x2', '\x1DF', '\x1E1', '\a', 
		'Y', '\x2', '\x2', '\x1E0', '\x1E2', '\a', '\x1A', '\x2', '\x2', '\x1E1', 
		'\x1E0', '\x3', '\x2', '\x2', '\x2', '\x1E1', '\x1E2', '\x3', '\x2', '\x2', 
		'\x2', '\x1E2', '\x1E3', '\x3', '\x2', '\x2', '\x2', '\x1E3', '\x1E4', 
		'\x5', '\x8E', 'H', '\x2', '\x1E4', '\x1E6', '\a', '\t', '\x2', '\x2', 
		'\x1E5', '\x1E7', '\x5', 'Z', '.', '\x2', '\x1E6', '\x1E5', '\x3', '\x2', 
		'\x2', '\x2', '\x1E6', '\x1E7', '\x3', '\x2', '\x2', '\x2', '\x1E7', '\x1E8', 
		'\x3', '\x2', '\x2', '\x2', '\x1E8', '\x1EA', '\a', '\n', '\x2', '\x2', 
		'\x1E9', '\x1EB', '\x5', '`', '\x31', '\x2', '\x1EA', '\x1E9', '\x3', 
		'\x2', '\x2', '\x2', '\x1EA', '\x1EB', '\x3', '\x2', '\x2', '\x2', '\x1EB', 
		'Q', '\x3', '\x2', '\x2', '\x2', '\x1EC', '\x1ED', '\a', '\x64', '\x2', 
		'\x2', '\x1ED', '\x1EE', '\x5', '\x8E', 'H', '\x2', '\x1EE', '\x1EF', 
		'\x5', 'T', '+', '\x2', '\x1EF', 'S', '\x3', '\x2', '\x2', '\x2', '\x1F0', 
		'\x1F1', '\a', '\x66', '\x2', '\x2', '\x1F1', '\x1F3', '\x5', 't', ';', 
		'\x2', '\x1F2', '\x1F0', '\x3', '\x2', '\x2', '\x2', '\x1F2', '\x1F3', 
		'\x3', '\x2', '\x2', '\x2', '\x1F3', '\x1F4', '\x3', '\x2', '\x2', '\x2', 
		'\x1F4', '\x1F8', '\a', '\v', '\x2', '\x2', '\x1F5', '\x1F7', '\x5', 'V', 
		',', '\x2', '\x1F6', '\x1F5', '\x3', '\x2', '\x2', '\x2', '\x1F7', '\x1FA', 
		'\x3', '\x2', '\x2', '\x2', '\x1F8', '\x1F6', '\x3', '\x2', '\x2', '\x2', 
		'\x1F8', '\x1F9', '\x3', '\x2', '\x2', '\x2', '\x1F9', '\x1FB', '\x3', 
		'\x2', '\x2', '\x2', '\x1FA', '\x1F8', '\x3', '\x2', '\x2', '\x2', '\x1FB', 
		'\x1FC', '\a', '\f', '\x2', '\x2', '\x1FC', 'U', '\x3', '\x2', '\x2', 
		'\x2', '\x1FD', '\x202', '\a', 'u', '\x2', '\x2', '\x1FE', '\x1FF', '\x6', 
		',', '\t', '\x2', '\x1FF', '\x202', '\x5', '\x8E', 'H', '\x2', '\x200', 
		'\x202', '\a', 'k', '\x2', '\x2', '\x201', '\x1FD', '\x3', '\x2', '\x2', 
		'\x2', '\x201', '\x1FE', '\x3', '\x2', '\x2', '\x2', '\x201', '\x200', 
		'\x3', '\x2', '\x2', '\x2', '\x202', '\x205', '\x3', '\x2', '\x2', '\x2', 
		'\x203', '\x201', '\x3', '\x2', '\x2', '\x2', '\x203', '\x204', '\x3', 
		'\x2', '\x2', '\x2', '\x204', '\x20C', '\x3', '\x2', '\x2', '\x2', '\x205', 
		'\x203', '\x3', '\x2', '\x2', '\x2', '\x206', '\x20D', '\x5', 'X', '-', 
		'\x2', '\x207', '\x208', '\x5', 'v', '<', '\x2', '\x208', '\x209', '\a', 
		'\xF', '\x2', '\x2', '\x209', '\x20A', '\x5', 'x', '=', '\x2', '\x20A', 
		'\x20B', '\a', '\r', '\x2', '\x2', '\x20B', '\x20D', '\x3', '\x2', '\x2', 
		'\x2', '\x20C', '\x206', '\x3', '\x2', '\x2', '\x2', '\x20C', '\x207', 
		'\x3', '\x2', '\x2', '\x2', '\x20D', '\x217', '\x3', '\x2', '\x2', '\x2', 
		'\x20E', '\x217', '\x5', '&', '\x14', '\x2', '\x20F', '\x211', '\a', '\x1F', 
		'\x2', '\x2', '\x210', '\x20F', '\x3', '\x2', '\x2', '\x2', '\x210', '\x211', 
		'\x3', '\x2', '\x2', '\x2', '\x211', '\x212', '\x3', '\x2', '\x2', '\x2', 
		'\x212', '\x213', '\x5', 'l', '\x37', '\x2', '\x213', '\x214', '\a', '\xF', 
		'\x2', '\x2', '\x214', '\x215', '\x5', 't', ';', '\x2', '\x215', '\x217', 
		'\x3', '\x2', '\x2', '\x2', '\x216', '\x203', '\x3', '\x2', '\x2', '\x2', 
		'\x216', '\x20E', '\x3', '\x2', '\x2', '\x2', '\x216', '\x210', '\x3', 
		'\x2', '\x2', '\x2', '\x217', 'W', '\x3', '\x2', '\x2', '\x2', '\x218', 
		'\x21A', '\a', '\x1A', '\x2', '\x2', '\x219', '\x218', '\x3', '\x2', '\x2', 
		'\x2', '\x219', '\x21A', '\x3', '\x2', '\x2', '\x2', '\x21A', '\x21C', 
		'\x3', '\x2', '\x2', '\x2', '\x21B', '\x21D', '\a', '\x1F', '\x2', '\x2', 
		'\x21C', '\x21B', '\x3', '\x2', '\x2', '\x2', '\x21C', '\x21D', '\x3', 
		'\x2', '\x2', '\x2', '\x21D', '\x21E', '\x3', '\x2', '\x2', '\x2', '\x21E', 
		'\x21F', '\x5', 'l', '\x37', '\x2', '\x21F', '\x221', '\a', '\t', '\x2', 
		'\x2', '\x220', '\x222', '\x5', 'Z', '.', '\x2', '\x221', '\x220', '\x3', 
		'\x2', '\x2', '\x2', '\x221', '\x222', '\x3', '\x2', '\x2', '\x2', '\x222', 
		'\x223', '\x3', '\x2', '\x2', '\x2', '\x223', '\x225', '\a', '\n', '\x2', 
		'\x2', '\x224', '\x226', '\x5', '`', '\x31', '\x2', '\x225', '\x224', 
		'\x3', '\x2', '\x2', '\x2', '\x225', '\x226', '\x3', '\x2', '\x2', '\x2', 
		'\x226', '\x243', '\x3', '\x2', '\x2', '\x2', '\x227', '\x229', '\a', 
		'\x1A', '\x2', '\x2', '\x228', '\x227', '\x3', '\x2', '\x2', '\x2', '\x228', 
		'\x229', '\x3', '\x2', '\x2', '\x2', '\x229', '\x22B', '\x3', '\x2', '\x2', 
		'\x2', '\x22A', '\x22C', '\a', '\x1F', '\x2', '\x2', '\x22B', '\x22A', 
		'\x3', '\x2', '\x2', '\x2', '\x22B', '\x22C', '\x3', '\x2', '\x2', '\x2', 
		'\x22C', '\x22D', '\x3', '\x2', '\x2', '\x2', '\x22D', '\x22E', '\x5', 
		'\x88', '\x45', '\x2', '\x22E', '\x22F', '\a', '\t', '\x2', '\x2', '\x22F', 
		'\x231', '\a', '\n', '\x2', '\x2', '\x230', '\x232', '\x5', '`', '\x31', 
		'\x2', '\x231', '\x230', '\x3', '\x2', '\x2', '\x2', '\x231', '\x232', 
		'\x3', '\x2', '\x2', '\x2', '\x232', '\x243', '\x3', '\x2', '\x2', '\x2', 
		'\x233', '\x235', '\a', '\x1A', '\x2', '\x2', '\x234', '\x233', '\x3', 
		'\x2', '\x2', '\x2', '\x234', '\x235', '\x3', '\x2', '\x2', '\x2', '\x235', 
		'\x237', '\x3', '\x2', '\x2', '\x2', '\x236', '\x238', '\a', '\x1F', '\x2', 
		'\x2', '\x237', '\x236', '\x3', '\x2', '\x2', '\x2', '\x237', '\x238', 
		'\x3', '\x2', '\x2', '\x2', '\x238', '\x239', '\x3', '\x2', '\x2', '\x2', 
		'\x239', '\x23A', '\x5', '\x8A', '\x46', '\x2', '\x23A', '\x23C', '\a', 
		'\t', '\x2', '\x2', '\x23B', '\x23D', '\x5', 'Z', '.', '\x2', '\x23C', 
		'\x23B', '\x3', '\x2', '\x2', '\x2', '\x23C', '\x23D', '\x3', '\x2', '\x2', 
		'\x2', '\x23D', '\x23E', '\x3', '\x2', '\x2', '\x2', '\x23E', '\x240', 
		'\a', '\n', '\x2', '\x2', '\x23F', '\x241', '\x5', '`', '\x31', '\x2', 
		'\x240', '\x23F', '\x3', '\x2', '\x2', '\x2', '\x240', '\x241', '\x3', 
		'\x2', '\x2', '\x2', '\x241', '\x243', '\x3', '\x2', '\x2', '\x2', '\x242', 
		'\x219', '\x3', '\x2', '\x2', '\x2', '\x242', '\x228', '\x3', '\x2', '\x2', 
		'\x2', '\x242', '\x234', '\x3', '\x2', '\x2', '\x2', '\x243', 'Y', '\x3', 
		'\x2', '\x2', '\x2', '\x244', '\x249', '\x5', '\\', '/', '\x2', '\x245', 
		'\x246', '\a', '\xE', '\x2', '\x2', '\x246', '\x248', '\x5', '\\', '/', 
		'\x2', '\x247', '\x245', '\x3', '\x2', '\x2', '\x2', '\x248', '\x24B', 
		'\x3', '\x2', '\x2', '\x2', '\x249', '\x247', '\x3', '\x2', '\x2', '\x2', 
		'\x249', '\x24A', '\x3', '\x2', '\x2', '\x2', '\x24A', '\x24E', '\x3', 
		'\x2', '\x2', '\x2', '\x24B', '\x249', '\x3', '\x2', '\x2', '\x2', '\x24C', 
		'\x24D', '\a', '\xE', '\x2', '\x2', '\x24D', '\x24F', '\x5', '^', '\x30', 
		'\x2', '\x24E', '\x24C', '\x3', '\x2', '\x2', '\x2', '\x24E', '\x24F', 
		'\x3', '\x2', '\x2', '\x2', '\x24F', '\x252', '\x3', '\x2', '\x2', '\x2', 
		'\x250', '\x252', '\x5', '^', '\x30', '\x2', '\x251', '\x244', '\x3', 
		'\x2', '\x2', '\x2', '\x251', '\x250', '\x3', '\x2', '\x2', '\x2', '\x252', 
		'[', '\x3', '\x2', '\x2', '\x2', '\x253', '\x256', '\x5', 'v', '<', '\x2', 
		'\x254', '\x255', '\a', '\xF', '\x2', '\x2', '\x255', '\x257', '\x5', 
		't', ';', '\x2', '\x256', '\x254', '\x3', '\x2', '\x2', '\x2', '\x256', 
		'\x257', '\x3', '\x2', '\x2', '\x2', '\x257', ']', '\x3', '\x2', '\x2', 
		'\x2', '\x258', '\x259', '\a', '\x12', '\x2', '\x2', '\x259', '\x25A', 
		'\x5', 't', ';', '\x2', '\x25A', '_', '\x3', '\x2', '\x2', '\x2', '\x25B', 
		'\x25D', '\a', '\v', '\x2', '\x2', '\x25C', '\x25E', '\x5', '\x62', '\x32', 
		'\x2', '\x25D', '\x25C', '\x3', '\x2', '\x2', '\x2', '\x25D', '\x25E', 
		'\x3', '\x2', '\x2', '\x2', '\x25E', '\x25F', '\x3', '\x2', '\x2', '\x2', 
		'\x25F', '\x260', '\a', '\f', '\x2', '\x2', '\x260', '\x61', '\x3', '\x2', 
		'\x2', '\x2', '\x261', '\x263', '\x5', '\x4', '\x3', '\x2', '\x262', '\x261', 
		'\x3', '\x2', '\x2', '\x2', '\x263', '\x264', '\x3', '\x2', '\x2', '\x2', 
		'\x264', '\x262', '\x3', '\x2', '\x2', '\x2', '\x264', '\x265', '\x3', 
		'\x2', '\x2', '\x2', '\x265', '\x63', '\x3', '\x2', '\x2', '\x2', '\x266', 
		'\x267', '\a', '\a', '\x2', '\x2', '\x267', '\x268', '\x5', '\x66', '\x34', 
		'\x2', '\x268', '\x269', '\a', '\b', '\x2', '\x2', '\x269', '\x65', '\x3', 
		'\x2', '\x2', '\x2', '\x26A', '\x26C', '\a', '\xE', '\x2', '\x2', '\x26B', 
		'\x26A', '\x3', '\x2', '\x2', '\x2', '\x26C', '\x26F', '\x3', '\x2', '\x2', 
		'\x2', '\x26D', '\x26B', '\x3', '\x2', '\x2', '\x2', '\x26D', '\x26E', 
		'\x3', '\x2', '\x2', '\x2', '\x26E', '\x271', '\x3', '\x2', '\x2', '\x2', 
		'\x26F', '\x26D', '\x3', '\x2', '\x2', '\x2', '\x270', '\x272', '\x5', 
		'h', '\x35', '\x2', '\x271', '\x270', '\x3', '\x2', '\x2', '\x2', '\x271', 
		'\x272', '\x3', '\x2', '\x2', '\x2', '\x272', '\x27B', '\x3', '\x2', '\x2', 
		'\x2', '\x273', '\x275', '\a', '\xE', '\x2', '\x2', '\x274', '\x273', 
		'\x3', '\x2', '\x2', '\x2', '\x275', '\x276', '\x3', '\x2', '\x2', '\x2', 
		'\x276', '\x274', '\x3', '\x2', '\x2', '\x2', '\x276', '\x277', '\x3', 
		'\x2', '\x2', '\x2', '\x277', '\x278', '\x3', '\x2', '\x2', '\x2', '\x278', 
		'\x27A', '\x5', 'h', '\x35', '\x2', '\x279', '\x274', '\x3', '\x2', '\x2', 
		'\x2', '\x27A', '\x27D', '\x3', '\x2', '\x2', '\x2', '\x27B', '\x279', 
		'\x3', '\x2', '\x2', '\x2', '\x27B', '\x27C', '\x3', '\x2', '\x2', '\x2', 
		'\x27C', '\x281', '\x3', '\x2', '\x2', '\x2', '\x27D', '\x27B', '\x3', 
		'\x2', '\x2', '\x2', '\x27E', '\x280', '\a', '\xE', '\x2', '\x2', '\x27F', 
		'\x27E', '\x3', '\x2', '\x2', '\x2', '\x280', '\x283', '\x3', '\x2', '\x2', 
		'\x2', '\x281', '\x27F', '\x3', '\x2', '\x2', '\x2', '\x281', '\x282', 
		'\x3', '\x2', '\x2', '\x2', '\x282', 'g', '\x3', '\x2', '\x2', '\x2', 
		'\x283', '\x281', '\x3', '\x2', '\x2', '\x2', '\x284', '\x286', '\a', 
		'\x12', '\x2', '\x2', '\x285', '\x284', '\x3', '\x2', '\x2', '\x2', '\x285', 
		'\x286', '\x3', '\x2', '\x2', '\x2', '\x286', '\x287', '\x3', '\x2', '\x2', 
		'\x2', '\x287', '\x288', '\x5', 't', ';', '\x2', '\x288', 'i', '\x3', 
		'\x2', '\x2', '\x2', '\x289', '\x28A', '\x5', 'l', '\x37', '\x2', '\x28A', 
		'\x28B', '\a', '\x11', '\x2', '\x2', '\x28B', '\x28C', '\x5', 't', ';', 
		'\x2', '\x28C', '\x2B4', '\x3', '\x2', '\x2', '\x2', '\x28D', '\x28E', 
		'\a', '\a', '\x2', '\x2', '\x28E', '\x28F', '\x5', 't', ';', '\x2', '\x28F', 
		'\x290', '\a', '\b', '\x2', '\x2', '\x290', '\x291', '\a', '\x11', '\x2', 
		'\x2', '\x291', '\x292', '\x5', 't', ';', '\x2', '\x292', '\x2B4', '\x3', 
		'\x2', '\x2', '\x2', '\x293', '\x295', '\a', 'k', '\x2', '\x2', '\x294', 
		'\x293', '\x3', '\x2', '\x2', '\x2', '\x294', '\x295', '\x3', '\x2', '\x2', 
		'\x2', '\x295', '\x297', '\x3', '\x2', '\x2', '\x2', '\x296', '\x298', 
		'\a', '\x1A', '\x2', '\x2', '\x297', '\x296', '\x3', '\x2', '\x2', '\x2', 
		'\x297', '\x298', '\x3', '\x2', '\x2', '\x2', '\x298', '\x299', '\x3', 
		'\x2', '\x2', '\x2', '\x299', '\x29A', '\x5', 'l', '\x37', '\x2', '\x29A', 
		'\x29C', '\a', '\t', '\x2', '\x2', '\x29B', '\x29D', '\x5', 'Z', '.', 
		'\x2', '\x29C', '\x29B', '\x3', '\x2', '\x2', '\x2', '\x29C', '\x29D', 
		'\x3', '\x2', '\x2', '\x2', '\x29D', '\x29E', '\x3', '\x2', '\x2', '\x2', 
		'\x29E', '\x2A0', '\a', '\n', '\x2', '\x2', '\x29F', '\x2A1', '\x5', '`', 
		'\x31', '\x2', '\x2A0', '\x29F', '\x3', '\x2', '\x2', '\x2', '\x2A0', 
		'\x2A1', '\x3', '\x2', '\x2', '\x2', '\x2A1', '\x2B4', '\x3', '\x2', '\x2', 
		'\x2', '\x2A2', '\x2A3', '\x5', '\x88', '\x45', '\x2', '\x2A3', '\x2A4', 
		'\a', '\t', '\x2', '\x2', '\x2A4', '\x2A6', '\a', '\n', '\x2', '\x2', 
		'\x2A5', '\x2A7', '\x5', '`', '\x31', '\x2', '\x2A6', '\x2A5', '\x3', 
		'\x2', '\x2', '\x2', '\x2A6', '\x2A7', '\x3', '\x2', '\x2', '\x2', '\x2A7', 
		'\x2B4', '\x3', '\x2', '\x2', '\x2', '\x2A8', '\x2A9', '\x5', '\x8A', 
		'\x46', '\x2', '\x2A9', '\x2AA', '\a', '\t', '\x2', '\x2', '\x2AA', '\x2AB', 
		'\x5', '\\', '/', '\x2', '\x2AB', '\x2AD', '\a', '\n', '\x2', '\x2', '\x2AC', 
		'\x2AE', '\x5', '`', '\x31', '\x2', '\x2AD', '\x2AC', '\x3', '\x2', '\x2', 
		'\x2', '\x2AD', '\x2AE', '\x3', '\x2', '\x2', '\x2', '\x2AE', '\x2B4', 
		'\x3', '\x2', '\x2', '\x2', '\x2AF', '\x2B1', '\a', '\x12', '\x2', '\x2', 
		'\x2B0', '\x2AF', '\x3', '\x2', '\x2', '\x2', '\x2B0', '\x2B1', '\x3', 
		'\x2', '\x2', '\x2', '\x2B1', '\x2B2', '\x3', '\x2', '\x2', '\x2', '\x2B2', 
		'\x2B4', '\x5', 't', ';', '\x2', '\x2B3', '\x289', '\x3', '\x2', '\x2', 
		'\x2', '\x2B3', '\x28D', '\x3', '\x2', '\x2', '\x2', '\x2B3', '\x294', 
		'\x3', '\x2', '\x2', '\x2', '\x2B3', '\x2A2', '\x3', '\x2', '\x2', '\x2', 
		'\x2B3', '\x2A8', '\x3', '\x2', '\x2', '\x2', '\x2B3', '\x2B0', '\x3', 
		'\x2', '\x2', '\x2', '\x2B4', 'k', '\x3', '\x2', '\x2', '\x2', '\x2B5', 
		'\x2BD', '\x5', '\x8C', 'G', '\x2', '\x2B6', '\x2BD', '\a', 'x', '\x2', 
		'\x2', '\x2B7', '\x2BD', '\x5', '\x84', '\x43', '\x2', '\x2B8', '\x2B9', 
		'\a', '\a', '\x2', '\x2', '\x2B9', '\x2BA', '\x5', 't', ';', '\x2', '\x2BA', 
		'\x2BB', '\a', '\b', '\x2', '\x2', '\x2BB', '\x2BD', '\x3', '\x2', '\x2', 
		'\x2', '\x2BC', '\x2B5', '\x3', '\x2', '\x2', '\x2', '\x2BC', '\x2B6', 
		'\x3', '\x2', '\x2', '\x2', '\x2BC', '\x2B7', '\x3', '\x2', '\x2', '\x2', 
		'\x2BC', '\x2B8', '\x3', '\x2', '\x2', '\x2', '\x2BD', 'm', '\x3', '\x2', 
		'\x2', '\x2', '\x2BE', '\x2CA', '\a', '\t', '\x2', '\x2', '\x2BF', '\x2C4', 
		'\x5', 'p', '\x39', '\x2', '\x2C0', '\x2C1', '\a', '\xE', '\x2', '\x2', 
		'\x2C1', '\x2C3', '\x5', 'p', '\x39', '\x2', '\x2C2', '\x2C0', '\x3', 
		'\x2', '\x2', '\x2', '\x2C3', '\x2C6', '\x3', '\x2', '\x2', '\x2', '\x2C4', 
		'\x2C2', '\x3', '\x2', '\x2', '\x2', '\x2C4', '\x2C5', '\x3', '\x2', '\x2', 
		'\x2', '\x2C5', '\x2C8', '\x3', '\x2', '\x2', '\x2', '\x2C6', '\x2C4', 
		'\x3', '\x2', '\x2', '\x2', '\x2C7', '\x2C9', '\a', '\xE', '\x2', '\x2', 
		'\x2C8', '\x2C7', '\x3', '\x2', '\x2', '\x2', '\x2C8', '\x2C9', '\x3', 
		'\x2', '\x2', '\x2', '\x2C9', '\x2CB', '\x3', '\x2', '\x2', '\x2', '\x2CA', 
		'\x2BF', '\x3', '\x2', '\x2', '\x2', '\x2CA', '\x2CB', '\x3', '\x2', '\x2', 
		'\x2', '\x2CB', '\x2CC', '\x3', '\x2', '\x2', '\x2', '\x2CC', '\x2CD', 
		'\a', '\n', '\x2', '\x2', '\x2CD', 'o', '\x3', '\x2', '\x2', '\x2', '\x2CE', 
		'\x2D0', '\a', '\x12', '\x2', '\x2', '\x2CF', '\x2CE', '\x3', '\x2', '\x2', 
		'\x2', '\x2CF', '\x2D0', '\x3', '\x2', '\x2', '\x2', '\x2D0', '\x2D3', 
		'\x3', '\x2', '\x2', '\x2', '\x2D1', '\x2D4', '\x5', 't', ';', '\x2', 
		'\x2D2', '\x2D4', '\x5', '\x8E', 'H', '\x2', '\x2D3', '\x2D1', '\x3', 
		'\x2', '\x2', '\x2', '\x2D3', '\x2D2', '\x3', '\x2', '\x2', '\x2', '\x2D4', 
		'q', '\x3', '\x2', '\x2', '\x2', '\x2D5', '\x2DA', '\x5', 't', ';', '\x2', 
		'\x2D6', '\x2D7', '\a', '\xE', '\x2', '\x2', '\x2D7', '\x2D9', '\x5', 
		't', ';', '\x2', '\x2D8', '\x2D6', '\x3', '\x2', '\x2', '\x2', '\x2D9', 
		'\x2DC', '\x3', '\x2', '\x2', '\x2', '\x2DA', '\x2D8', '\x3', '\x2', '\x2', 
		'\x2', '\x2DA', '\x2DB', '\x3', '\x2', '\x2', '\x2', '\x2DB', 's', '\x3', 
		'\x2', '\x2', '\x2', '\x2DC', '\x2DA', '\x3', '\x2', '\x2', '\x2', '\x2DD', 
		'\x2DE', '\b', ';', '\x1', '\x2', '\x2DE', '\x311', '\x5', 'z', '>', '\x2', 
		'\x2DF', '\x2E1', '\a', '\x64', '\x2', '\x2', '\x2E0', '\x2E2', '\x5', 
		'\x8E', 'H', '\x2', '\x2E1', '\x2E0', '\x3', '\x2', '\x2', '\x2', '\x2E1', 
		'\x2E2', '\x3', '\x2', '\x2', '\x2', '\x2E2', '\x2E3', '\x3', '\x2', '\x2', 
		'\x2', '\x2E3', '\x311', '\x5', 'T', '+', '\x2', '\x2E4', '\x2E5', '\a', 
		'N', '\x2', '\x2', '\x2E5', '\x2E7', '\x5', 't', ';', '\x2', '\x2E6', 
		'\x2E8', '\x5', 'n', '\x38', '\x2', '\x2E7', '\x2E6', '\x3', '\x2', '\x2', 
		'\x2', '\x2E7', '\x2E8', '\x3', '\x2', '\x2', '\x2', '\x2E8', '\x311', 
		'\x3', '\x2', '\x2', '\x2', '\x2E9', '\x2EA', '\a', 'N', '\x2', '\x2', 
		'\x2EA', '\x2EB', '\a', '\x13', '\x2', '\x2', '\x2EB', '\x311', '\x5', 
		'\x8E', 'H', '\x2', '\x2EC', '\x2ED', '\a', '_', '\x2', '\x2', '\x2ED', 
		'\x311', '\x5', 't', ';', '\'', '\x2EE', '\x2EF', '\a', 'S', '\x2', '\x2', 
		'\x2EF', '\x311', '\x5', 't', ';', '&', '\x2F0', '\x2F1', '\a', 'K', '\x2', 
		'\x2', '\x2F1', '\x311', '\x5', 't', ';', '%', '\x2F2', '\x2F3', '\a', 
		'\x14', '\x2', '\x2', '\x2F3', '\x311', '\x5', 't', ';', '$', '\x2F4', 
		'\x2F5', '\a', '\x15', '\x2', '\x2', '\x2F5', '\x311', '\x5', 't', ';', 
		'#', '\x2F6', '\x2F7', '\a', '\x16', '\x2', '\x2', '\x2F7', '\x311', '\x5', 
		't', ';', '\"', '\x2F8', '\x2F9', '\a', '\x17', '\x2', '\x2', '\x2F9', 
		'\x311', '\x5', 't', ';', '!', '\x2FA', '\x2FB', '\a', '\x18', '\x2', 
		'\x2', '\x2FB', '\x311', '\x5', 't', ';', ' ', '\x2FC', '\x2FD', '\a', 
		'\x19', '\x2', '\x2', '\x2FD', '\x311', '\x5', 't', ';', '\x1F', '\x2FE', 
		'\x2FF', '\a', 'l', '\x2', '\x2', '\x2FF', '\x311', '\x5', 't', ';', '\x1E', 
		'\x300', '\x301', '\a', 'j', '\x2', '\x2', '\x301', '\x302', '\a', '\t', 
		'\x2', '\x2', '\x302', '\x303', '\x5', 't', ';', '\x2', '\x303', '\x304', 
		'\a', '\n', '\x2', '\x2', '\x304', '\x311', '\x3', '\x2', '\x2', '\x2', 
		'\x305', '\x311', '\x5', '\x36', '\x1C', '\x2', '\x306', '\x311', '\a', 
		'Z', '\x2', '\x2', '\x307', '\x311', '\x5', '\x8E', 'H', '\x2', '\x308', 
		'\x311', '\a', 'g', '\x2', '\x2', '\x309', '\x311', '\x5', '\x82', '\x42', 
		'\x2', '\x30A', '\x311', '\x5', '\x64', '\x33', '\x2', '\x30B', '\x311', 
		'\x5', 'x', '=', '\x2', '\x30C', '\x30D', '\a', '\t', '\x2', '\x2', '\x30D', 
		'\x30E', '\x5', 'r', ':', '\x2', '\x30E', '\x30F', '\a', '\n', '\x2', 
		'\x2', '\x30F', '\x311', '\x3', '\x2', '\x2', '\x2', '\x310', '\x2DD', 
		'\x3', '\x2', '\x2', '\x2', '\x310', '\x2DF', '\x3', '\x2', '\x2', '\x2', 
		'\x310', '\x2E4', '\x3', '\x2', '\x2', '\x2', '\x310', '\x2E9', '\x3', 
		'\x2', '\x2', '\x2', '\x310', '\x2EC', '\x3', '\x2', '\x2', '\x2', '\x310', 
		'\x2EE', '\x3', '\x2', '\x2', '\x2', '\x310', '\x2F0', '\x3', '\x2', '\x2', 
		'\x2', '\x310', '\x2F2', '\x3', '\x2', '\x2', '\x2', '\x310', '\x2F4', 
		'\x3', '\x2', '\x2', '\x2', '\x310', '\x2F6', '\x3', '\x2', '\x2', '\x2', 
		'\x310', '\x2F8', '\x3', '\x2', '\x2', '\x2', '\x310', '\x2FA', '\x3', 
		'\x2', '\x2', '\x2', '\x310', '\x2FC', '\x3', '\x2', '\x2', '\x2', '\x310', 
		'\x2FE', '\x3', '\x2', '\x2', '\x2', '\x310', '\x300', '\x3', '\x2', '\x2', 
		'\x2', '\x310', '\x305', '\x3', '\x2', '\x2', '\x2', '\x310', '\x306', 
		'\x3', '\x2', '\x2', '\x2', '\x310', '\x307', '\x3', '\x2', '\x2', '\x2', 
		'\x310', '\x308', '\x3', '\x2', '\x2', '\x2', '\x310', '\x309', '\x3', 
		'\x2', '\x2', '\x2', '\x310', '\x30A', '\x3', '\x2', '\x2', '\x2', '\x310', 
		'\x30B', '\x3', '\x2', '\x2', '\x2', '\x310', '\x30C', '\x3', '\x2', '\x2', 
		'\x2', '\x311', '\x363', '\x3', '\x2', '\x2', '\x2', '\x312', '\x313', 
		'\f', '\x1D', '\x2', '\x2', '\x313', '\x314', '\a', '\x1D', '\x2', '\x2', 
		'\x314', '\x362', '\x5', 't', ';', '\x1D', '\x315', '\x316', '\f', '\x1C', 
		'\x2', '\x2', '\x316', '\x317', '\t', '\x2', '\x2', '\x2', '\x317', '\x362', 
		'\x5', 't', ';', '\x1D', '\x318', '\x319', '\f', '\x1B', '\x2', '\x2', 
		'\x319', '\x31A', '\t', '\x3', '\x2', '\x2', '\x31A', '\x362', '\x5', 
		't', ';', '\x1C', '\x31B', '\x31C', '\f', '\x1A', '\x2', '\x2', '\x31C', 
		'\x31D', '\a', '\x1E', '\x2', '\x2', '\x31D', '\x362', '\x5', 't', ';', 
		'\x1B', '\x31E', '\x31F', '\f', '\x19', '\x2', '\x2', '\x31F', '\x320', 
		'\t', '\x4', '\x2', '\x2', '\x320', '\x362', '\x5', 't', ';', '\x1A', 
		'\x321', '\x322', '\f', '\x18', '\x2', '\x2', '\x322', '\x323', '\t', 
		'\x5', '\x2', '\x2', '\x323', '\x362', '\x5', 't', ';', '\x19', '\x324', 
		'\x325', '\f', '\x17', '\x2', '\x2', '\x325', '\x326', '\a', 'J', '\x2', 
		'\x2', '\x326', '\x362', '\x5', 't', ';', '\x18', '\x327', '\x328', '\f', 
		'\x16', '\x2', '\x2', '\x328', '\x329', '\a', '`', '\x2', '\x2', '\x329', 
		'\x362', '\x5', 't', ';', '\x17', '\x32A', '\x32B', '\f', '\x15', '\x2', 
		'\x2', '\x32B', '\x32C', '\t', '\x6', '\x2', '\x2', '\x32C', '\x362', 
		'\x5', 't', ';', '\x16', '\x32D', '\x32E', '\f', '\x14', '\x2', '\x2', 
		'\x32E', '\x32F', '\a', '+', '\x2', '\x2', '\x32F', '\x362', '\x5', 't', 
		';', '\x15', '\x330', '\x331', '\f', '\x13', '\x2', '\x2', '\x331', '\x332', 
		'\a', ',', '\x2', '\x2', '\x332', '\x362', '\x5', 't', ';', '\x14', '\x333', 
		'\x334', '\f', '\x12', '\x2', '\x2', '\x334', '\x335', '\a', '-', '\x2', 
		'\x2', '\x335', '\x362', '\x5', 't', ';', '\x13', '\x336', '\x337', '\f', 
		'\x11', '\x2', '\x2', '\x337', '\x338', '\a', '.', '\x2', '\x2', '\x338', 
		'\x362', '\x5', 't', ';', '\x12', '\x339', '\x33A', '\f', '\x10', '\x2', 
		'\x2', '\x33A', '\x33B', '\a', '/', '\x2', '\x2', '\x33B', '\x362', '\x5', 
		't', ';', '\x11', '\x33C', '\x33D', '\f', '\xF', '\x2', '\x2', '\x33D', 
		'\x33E', '\a', '\x10', '\x2', '\x2', '\x33E', '\x33F', '\x5', 't', ';', 
		'\x2', '\x33F', '\x340', '\a', '\x11', '\x2', '\x2', '\x340', '\x341', 
		'\x5', 't', ';', '\x10', '\x341', '\x362', '\x3', '\x2', '\x2', '\x2', 
		'\x342', '\x343', '\f', '\xE', '\x2', '\x2', '\x343', '\x344', '\a', '\xF', 
		'\x2', '\x2', '\x344', '\x362', '\x5', 't', ';', '\xE', '\x345', '\x346', 
		'\f', '\r', '\x2', '\x2', '\x346', '\x347', '\x5', '\x80', '\x41', '\x2', 
		'\x347', '\x348', '\x5', 't', ';', '\r', '\x348', '\x362', '\x3', '\x2', 
		'\x2', '\x2', '\x349', '\x34A', '\f', '.', '\x2', '\x2', '\x34A', '\x34B', 
		'\a', '\a', '\x2', '\x2', '\x34B', '\x34C', '\x5', 'r', ':', '\x2', '\x34C', 
		'\x34D', '\a', '\b', '\x2', '\x2', '\x34D', '\x362', '\x3', '\x2', '\x2', 
		'\x2', '\x34E', '\x350', '\f', '-', '\x2', '\x2', '\x34F', '\x351', '\a', 
		'\x10', '\x2', '\x2', '\x350', '\x34F', '\x3', '\x2', '\x2', '\x2', '\x350', 
		'\x351', '\x3', '\x2', '\x2', '\x2', '\x351', '\x352', '\x3', '\x2', '\x2', 
		'\x2', '\x352', '\x354', '\a', '\x13', '\x2', '\x2', '\x353', '\x355', 
		'\a', '\x1F', '\x2', '\x2', '\x354', '\x353', '\x3', '\x2', '\x2', '\x2', 
		'\x354', '\x355', '\x3', '\x2', '\x2', '\x2', '\x355', '\x356', '\x3', 
		'\x2', '\x2', '\x2', '\x356', '\x362', '\x5', '\x8C', 'G', '\x2', '\x357', 
		'\x358', '\f', ',', '\x2', '\x2', '\x358', '\x362', '\x5', 'n', '\x38', 
		'\x2', '\x359', '\x35A', '\f', ')', '\x2', '\x2', '\x35A', '\x35B', '\x6', 
		';', '\x1F', '\x2', '\x35B', '\x362', '\a', '\x14', '\x2', '\x2', '\x35C', 
		'\x35D', '\f', '(', '\x2', '\x2', '\x35D', '\x35E', '\x6', ';', '!', '\x2', 
		'\x35E', '\x362', '\a', '\x15', '\x2', '\x2', '\x35F', '\x360', '\f', 
		'\v', '\x2', '\x2', '\x360', '\x362', '\a', 'y', '\x2', '\x2', '\x361', 
		'\x312', '\x3', '\x2', '\x2', '\x2', '\x361', '\x315', '\x3', '\x2', '\x2', 
		'\x2', '\x361', '\x318', '\x3', '\x2', '\x2', '\x2', '\x361', '\x31B', 
		'\x3', '\x2', '\x2', '\x2', '\x361', '\x31E', '\x3', '\x2', '\x2', '\x2', 
		'\x361', '\x321', '\x3', '\x2', '\x2', '\x2', '\x361', '\x324', '\x3', 
		'\x2', '\x2', '\x2', '\x361', '\x327', '\x3', '\x2', '\x2', '\x2', '\x361', 
		'\x32A', '\x3', '\x2', '\x2', '\x2', '\x361', '\x32D', '\x3', '\x2', '\x2', 
		'\x2', '\x361', '\x330', '\x3', '\x2', '\x2', '\x2', '\x361', '\x333', 
		'\x3', '\x2', '\x2', '\x2', '\x361', '\x336', '\x3', '\x2', '\x2', '\x2', 
		'\x361', '\x339', '\x3', '\x2', '\x2', '\x2', '\x361', '\x33C', '\x3', 
		'\x2', '\x2', '\x2', '\x361', '\x342', '\x3', '\x2', '\x2', '\x2', '\x361', 
		'\x345', '\x3', '\x2', '\x2', '\x2', '\x361', '\x349', '\x3', '\x2', '\x2', 
		'\x2', '\x361', '\x34E', '\x3', '\x2', '\x2', '\x2', '\x361', '\x357', 
		'\x3', '\x2', '\x2', '\x2', '\x361', '\x359', '\x3', '\x2', '\x2', '\x2', 
		'\x361', '\x35C', '\x3', '\x2', '\x2', '\x2', '\x361', '\x35F', '\x3', 
		'\x2', '\x2', '\x2', '\x362', '\x365', '\x3', '\x2', '\x2', '\x2', '\x363', 
		'\x361', '\x3', '\x2', '\x2', '\x2', '\x363', '\x364', '\x3', '\x2', '\x2', 
		'\x2', '\x364', 'u', '\x3', '\x2', '\x2', '\x2', '\x365', '\x363', '\x3', 
		'\x2', '\x2', '\x2', '\x366', '\x36A', '\x5', '\x8E', 'H', '\x2', '\x367', 
		'\x36A', '\x5', '\x64', '\x33', '\x2', '\x368', '\x36A', '\x5', 'x', '=', 
		'\x2', '\x369', '\x366', '\x3', '\x2', '\x2', '\x2', '\x369', '\x367', 
		'\x3', '\x2', '\x2', '\x2', '\x369', '\x368', '\x3', '\x2', '\x2', '\x2', 
		'\x36A', 'w', '\x3', '\x2', '\x2', '\x2', '\x36B', '\x374', '\a', '\v', 
		'\x2', '\x2', '\x36C', '\x371', '\x5', 'j', '\x36', '\x2', '\x36D', '\x36E', 
		'\a', '\xE', '\x2', '\x2', '\x36E', '\x370', '\x5', 'j', '\x36', '\x2', 
		'\x36F', '\x36D', '\x3', '\x2', '\x2', '\x2', '\x370', '\x373', '\x3', 
		'\x2', '\x2', '\x2', '\x371', '\x36F', '\x3', '\x2', '\x2', '\x2', '\x371', 
		'\x372', '\x3', '\x2', '\x2', '\x2', '\x372', '\x375', '\x3', '\x2', '\x2', 
		'\x2', '\x373', '\x371', '\x3', '\x2', '\x2', '\x2', '\x374', '\x36C', 
		'\x3', '\x2', '\x2', '\x2', '\x374', '\x375', '\x3', '\x2', '\x2', '\x2', 
		'\x375', '\x377', '\x3', '\x2', '\x2', '\x2', '\x376', '\x378', '\a', 
		'\xE', '\x2', '\x2', '\x377', '\x376', '\x3', '\x2', '\x2', '\x2', '\x377', 
		'\x378', '\x3', '\x2', '\x2', '\x2', '\x378', '\x379', '\x3', '\x2', '\x2', 
		'\x2', '\x379', '\x37A', '\a', '\f', '\x2', '\x2', '\x37A', 'y', '\x3', 
		'\x2', '\x2', '\x2', '\x37B', '\x393', '\x5', 'P', ')', '\x2', '\x37C', 
		'\x37E', '\a', 'k', '\x2', '\x2', '\x37D', '\x37C', '\x3', '\x2', '\x2', 
		'\x2', '\x37D', '\x37E', '\x3', '\x2', '\x2', '\x2', '\x37E', '\x37F', 
		'\x3', '\x2', '\x2', '\x2', '\x37F', '\x381', '\a', 'Y', '\x2', '\x2', 
		'\x380', '\x382', '\a', '\x1A', '\x2', '\x2', '\x381', '\x380', '\x3', 
		'\x2', '\x2', '\x2', '\x381', '\x382', '\x3', '\x2', '\x2', '\x2', '\x382', 
		'\x383', '\x3', '\x2', '\x2', '\x2', '\x383', '\x385', '\a', '\t', '\x2', 
		'\x2', '\x384', '\x386', '\x5', 'Z', '.', '\x2', '\x385', '\x384', '\x3', 
		'\x2', '\x2', '\x2', '\x385', '\x386', '\x3', '\x2', '\x2', '\x2', '\x386', 
		'\x387', '\x3', '\x2', '\x2', '\x2', '\x387', '\x389', '\a', '\n', '\x2', 
		'\x2', '\x388', '\x38A', '\x5', '`', '\x31', '\x2', '\x389', '\x388', 
		'\x3', '\x2', '\x2', '\x2', '\x389', '\x38A', '\x3', '\x2', '\x2', '\x2', 
		'\x38A', '\x393', '\x3', '\x2', '\x2', '\x2', '\x38B', '\x38D', '\a', 
		'k', '\x2', '\x2', '\x38C', '\x38B', '\x3', '\x2', '\x2', '\x2', '\x38C', 
		'\x38D', '\x3', '\x2', '\x2', '\x2', '\x38D', '\x38E', '\x3', '\x2', '\x2', 
		'\x2', '\x38E', '\x38F', '\x5', '|', '?', '\x2', '\x38F', '\x390', '\a', 
		'<', '\x2', '\x2', '\x390', '\x391', '\x5', '~', '@', '\x2', '\x391', 
		'\x393', '\x3', '\x2', '\x2', '\x2', '\x392', '\x37B', '\x3', '\x2', '\x2', 
		'\x2', '\x392', '\x37D', '\x3', '\x2', '\x2', '\x2', '\x392', '\x38C', 
		'\x3', '\x2', '\x2', '\x2', '\x393', '{', '\x3', '\x2', '\x2', '\x2', 
		'\x394', '\x39B', '\x5', '\x8E', 'H', '\x2', '\x395', '\x397', '\a', '\t', 
		'\x2', '\x2', '\x396', '\x398', '\x5', 'Z', '.', '\x2', '\x397', '\x396', 
		'\x3', '\x2', '\x2', '\x2', '\x397', '\x398', '\x3', '\x2', '\x2', '\x2', 
		'\x398', '\x399', '\x3', '\x2', '\x2', '\x2', '\x399', '\x39B', '\a', 
		'\n', '\x2', '\x2', '\x39A', '\x394', '\x3', '\x2', '\x2', '\x2', '\x39A', 
		'\x395', '\x3', '\x2', '\x2', '\x2', '\x39B', '}', '\x3', '\x2', '\x2', 
		'\x2', '\x39C', '\x39F', '\x5', 't', ';', '\x2', '\x39D', '\x39F', '\x5', 
		'`', '\x31', '\x2', '\x39E', '\x39C', '\x3', '\x2', '\x2', '\x2', '\x39E', 
		'\x39D', '\x3', '\x2', '\x2', '\x2', '\x39F', '\x7F', '\x3', '\x2', '\x2', 
		'\x2', '\x3A0', '\x3A1', '\t', '\a', '\x2', '\x2', '\x3A1', '\x81', '\x3', 
		'\x2', '\x2', '\x2', '\x3A2', '\x3AA', '\a', '=', '\x2', '\x2', '\x3A3', 
		'\x3AA', '\a', '>', '\x2', '\x2', '\x3A4', '\x3AA', '\a', 'x', '\x2', 
		'\x2', '\x3A5', '\x3AA', '\a', 'y', '\x2', '\x2', '\x3A6', '\x3AA', '\a', 
		'\x6', '\x2', '\x2', '\x3A7', '\x3AA', '\x5', '\x84', '\x43', '\x2', '\x3A8', 
		'\x3AA', '\x5', '\x86', '\x44', '\x2', '\x3A9', '\x3A2', '\x3', '\x2', 
		'\x2', '\x2', '\x3A9', '\x3A3', '\x3', '\x2', '\x2', '\x2', '\x3A9', '\x3A4', 
		'\x3', '\x2', '\x2', '\x2', '\x3A9', '\x3A5', '\x3', '\x2', '\x2', '\x2', 
		'\x3A9', '\x3A6', '\x3', '\x2', '\x2', '\x2', '\x3A9', '\x3A7', '\x3', 
		'\x2', '\x2', '\x2', '\x3A9', '\x3A8', '\x3', '\x2', '\x2', '\x2', '\x3AA', 
		'\x83', '\x3', '\x2', '\x2', '\x2', '\x3AB', '\x3AC', '\t', '\b', '\x2', 
		'\x2', '\x3AC', '\x85', '\x3', '\x2', '\x2', '\x2', '\x3AD', '\x3AE', 
		'\t', '\t', '\x2', '\x2', '\x3AE', '\x87', '\x3', '\x2', '\x2', '\x2', 
		'\x3AF', '\x3B0', '\x6', '\x45', '#', '\x2', '\x3B0', '\x3B1', '\x5', 
		'\x8E', 'H', '\x2', '\x3B1', '\x3B2', '\x5', 'l', '\x37', '\x2', '\x3B2', 
		'\x89', '\x3', '\x2', '\x2', '\x2', '\x3B3', '\x3B4', '\x6', '\x46', '$', 
		'\x2', '\x3B4', '\x3B5', '\x5', '\x8E', 'H', '\x2', '\x3B5', '\x3B6', 
		'\x5', 'l', '\x37', '\x2', '\x3B6', '\x8B', '\x3', '\x2', '\x2', '\x2', 
		'\x3B7', '\x3BA', '\x5', '\x8E', 'H', '\x2', '\x3B8', '\x3BA', '\x5', 
		'\x90', 'I', '\x2', '\x3B9', '\x3B7', '\x3', '\x2', '\x2', '\x2', '\x3B9', 
		'\x3B8', '\x3', '\x2', '\x2', '\x2', '\x3BA', '\x8D', '\x3', '\x2', '\x2', 
		'\x2', '\x3BB', '\x3BC', '\t', '\n', '\x2', '\x2', '\x3BC', '\x8F', '\x3', 
		'\x2', '\x2', '\x2', '\x3BD', '\x3C1', '\x5', '\x92', 'J', '\x2', '\x3BE', 
		'\x3C1', '\a', '=', '\x2', '\x2', '\x3BF', '\x3C1', '\a', '>', '\x2', 
		'\x2', '\x3C0', '\x3BD', '\x3', '\x2', '\x2', '\x2', '\x3C0', '\x3BE', 
		'\x3', '\x2', '\x2', '\x2', '\x3C0', '\x3BF', '\x3', '\x2', '\x2', '\x2', 
		'\x3C1', '\x91', '\x3', '\x2', '\x2', '\x2', '\x3C2', '\x3F1', '\a', 'H', 
		'\x2', '\x2', '\x3C3', '\x3F1', '\a', 'I', '\x2', '\x2', '\x3C4', '\x3F1', 
		'\a', 'J', '\x2', '\x2', '\x3C5', '\x3F1', '\a', 'K', '\x2', '\x2', '\x3C6', 
		'\x3F1', '\a', 'L', '\x2', '\x2', '\x3C7', '\x3F1', '\a', 'M', '\x2', 
		'\x2', '\x3C8', '\x3F1', '\a', 'N', '\x2', '\x2', '\x3C9', '\x3F1', '\a', 
		'O', '\x2', '\x2', '\x3CA', '\x3F1', '\a', 'P', '\x2', '\x2', '\x3CB', 
		'\x3F1', '\a', 'Q', '\x2', '\x2', '\x3CC', '\x3F1', '\a', 'R', '\x2', 
		'\x2', '\x3CD', '\x3F1', '\a', 'S', '\x2', '\x2', '\x3CE', '\x3F1', '\a', 
		'T', '\x2', '\x2', '\x3CF', '\x3F1', '\a', 'U', '\x2', '\x2', '\x3D0', 
		'\x3F1', '\a', 'V', '\x2', '\x2', '\x3D1', '\x3F1', '\a', 'W', '\x2', 
		'\x2', '\x3D2', '\x3F1', '\a', 'X', '\x2', '\x2', '\x3D3', '\x3F1', '\a', 
		'Y', '\x2', '\x2', '\x3D4', '\x3F1', '\a', 'Z', '\x2', '\x2', '\x3D5', 
		'\x3F1', '\a', '[', '\x2', '\x2', '\x3D6', '\x3F1', '\a', '\\', '\x2', 
		'\x2', '\x3D7', '\x3F1', '\a', ']', '\x2', '\x2', '\x3D8', '\x3F1', '\a', 
		'^', '\x2', '\x2', '\x3D9', '\x3F1', '\a', '_', '\x2', '\x2', '\x3DA', 
		'\x3F1', '\a', '`', '\x2', '\x2', '\x3DB', '\x3F1', '\a', '\x61', '\x2', 
		'\x2', '\x3DC', '\x3F1', '\a', '\x64', '\x2', '\x2', '\x3DD', '\x3F1', 
		'\a', '\x65', '\x2', '\x2', '\x3DE', '\x3F1', '\a', '\x66', '\x2', '\x2', 
		'\x3DF', '\x3F1', '\a', 'g', '\x2', '\x2', '\x3E0', '\x3F1', '\a', 'h', 
		'\x2', '\x2', '\x3E1', '\x3F1', '\a', 'i', '\x2', '\x2', '\x3E2', '\x3F1', 
		'\a', 'j', '\x2', '\x2', '\x3E3', '\x3F1', '\a', 'm', '\x2', '\x2', '\x3E4', 
		'\x3F1', '\x5', '\x94', 'K', '\x2', '\x3E5', '\x3F1', '\a', 'p', '\x2', 
		'\x2', '\x3E6', '\x3F1', '\a', 'q', '\x2', '\x2', '\x3E7', '\x3F1', '\a', 
		'r', '\x2', '\x2', '\x3E8', '\x3F1', '\a', 's', '\x2', '\x2', '\x3E9', 
		'\x3F1', '\a', 't', '\x2', '\x2', '\x3EA', '\x3F1', '\a', 'u', '\x2', 
		'\x2', '\x3EB', '\x3F1', '\a', 'v', '\x2', '\x2', '\x3EC', '\x3F1', '\a', 
		'k', '\x2', '\x2', '\x3ED', '\x3F1', '\a', 'l', '\x2', '\x2', '\x3EE', 
		'\x3F1', '\a', '\x63', '\x2', '\x2', '\x3EF', '\x3F1', '\a', '\x62', '\x2', 
		'\x2', '\x3F0', '\x3C2', '\x3', '\x2', '\x2', '\x2', '\x3F0', '\x3C3', 
		'\x3', '\x2', '\x2', '\x2', '\x3F0', '\x3C4', '\x3', '\x2', '\x2', '\x2', 
		'\x3F0', '\x3C5', '\x3', '\x2', '\x2', '\x2', '\x3F0', '\x3C6', '\x3', 
		'\x2', '\x2', '\x2', '\x3F0', '\x3C7', '\x3', '\x2', '\x2', '\x2', '\x3F0', 
		'\x3C8', '\x3', '\x2', '\x2', '\x2', '\x3F0', '\x3C9', '\x3', '\x2', '\x2', 
		'\x2', '\x3F0', '\x3CA', '\x3', '\x2', '\x2', '\x2', '\x3F0', '\x3CB', 
		'\x3', '\x2', '\x2', '\x2', '\x3F0', '\x3CC', '\x3', '\x2', '\x2', '\x2', 
		'\x3F0', '\x3CD', '\x3', '\x2', '\x2', '\x2', '\x3F0', '\x3CE', '\x3', 
		'\x2', '\x2', '\x2', '\x3F0', '\x3CF', '\x3', '\x2', '\x2', '\x2', '\x3F0', 
		'\x3D0', '\x3', '\x2', '\x2', '\x2', '\x3F0', '\x3D1', '\x3', '\x2', '\x2', 
		'\x2', '\x3F0', '\x3D2', '\x3', '\x2', '\x2', '\x2', '\x3F0', '\x3D3', 
		'\x3', '\x2', '\x2', '\x2', '\x3F0', '\x3D4', '\x3', '\x2', '\x2', '\x2', 
		'\x3F0', '\x3D5', '\x3', '\x2', '\x2', '\x2', '\x3F0', '\x3D6', '\x3', 
		'\x2', '\x2', '\x2', '\x3F0', '\x3D7', '\x3', '\x2', '\x2', '\x2', '\x3F0', 
		'\x3D8', '\x3', '\x2', '\x2', '\x2', '\x3F0', '\x3D9', '\x3', '\x2', '\x2', 
		'\x2', '\x3F0', '\x3DA', '\x3', '\x2', '\x2', '\x2', '\x3F0', '\x3DB', 
		'\x3', '\x2', '\x2', '\x2', '\x3F0', '\x3DC', '\x3', '\x2', '\x2', '\x2', 
		'\x3F0', '\x3DD', '\x3', '\x2', '\x2', '\x2', '\x3F0', '\x3DE', '\x3', 
		'\x2', '\x2', '\x2', '\x3F0', '\x3DF', '\x3', '\x2', '\x2', '\x2', '\x3F0', 
		'\x3E0', '\x3', '\x2', '\x2', '\x2', '\x3F0', '\x3E1', '\x3', '\x2', '\x2', 
		'\x2', '\x3F0', '\x3E2', '\x3', '\x2', '\x2', '\x2', '\x3F0', '\x3E3', 
		'\x3', '\x2', '\x2', '\x2', '\x3F0', '\x3E4', '\x3', '\x2', '\x2', '\x2', 
		'\x3F0', '\x3E5', '\x3', '\x2', '\x2', '\x2', '\x3F0', '\x3E6', '\x3', 
		'\x2', '\x2', '\x2', '\x3F0', '\x3E7', '\x3', '\x2', '\x2', '\x2', '\x3F0', 
		'\x3E8', '\x3', '\x2', '\x2', '\x2', '\x3F0', '\x3E9', '\x3', '\x2', '\x2', 
		'\x2', '\x3F0', '\x3EA', '\x3', '\x2', '\x2', '\x2', '\x3F0', '\x3EB', 
		'\x3', '\x2', '\x2', '\x2', '\x3F0', '\x3EC', '\x3', '\x2', '\x2', '\x2', 
		'\x3F0', '\x3ED', '\x3', '\x2', '\x2', '\x2', '\x3F0', '\x3EE', '\x3', 
		'\x2', '\x2', '\x2', '\x3F0', '\x3EF', '\x3', '\x2', '\x2', '\x2', '\x3F1', 
		'\x93', '\x3', '\x2', '\x2', '\x2', '\x3F2', '\x3F3', '\t', '\v', '\x2', 
		'\x2', '\x3F3', '\x95', '\x3', '\x2', '\x2', '\x2', '\x3F4', '\x3F9', 
		'\a', '\r', '\x2', '\x2', '\x3F5', '\x3F9', '\a', '\x2', '\x2', '\x3', 
		'\x3F6', '\x3F9', '\x6', 'L', '%', '\x2', '\x3F7', '\x3F9', '\x6', 'L', 
		'&', '\x2', '\x3F8', '\x3F4', '\x3', '\x2', '\x2', '\x2', '\x3F8', '\x3F5', 
		'\x3', '\x2', '\x2', '\x2', '\x3F8', '\x3F6', '\x3', '\x2', '\x2', '\x2', 
		'\x3F8', '\x3F7', '\x3', '\x2', '\x2', '\x2', '\x3F9', '\x97', '\x3', 
		'\x2', '\x2', '\x2', 'y', '\x99', '\x9C', '\xB6', '\xBA', '\xC1', '\xC7', 
		'\xCB', '\xD2', '\xDA', '\xDF', '\xE1', '\xEA', '\xEE', '\xF6', '\xFB', 
		'\x104', '\x10C', '\x110', '\x115', '\x120', '\x126', '\x135', '\x149', 
		'\x14D', '\x151', '\x159', '\x162', '\x167', '\x16F', '\x174', '\x179', 
		'\x180', '\x187', '\x18E', '\x1A0', '\x1A4', '\x1A6', '\x1AD', '\x1B3', 
		'\x1B8', '\x1C7', '\x1CA', '\x1CF', '\x1D2', '\x1DD', '\x1E1', '\x1E6', 
		'\x1EA', '\x1F2', '\x1F8', '\x201', '\x203', '\x20C', '\x210', '\x216', 
		'\x219', '\x21C', '\x221', '\x225', '\x228', '\x22B', '\x231', '\x234', 
		'\x237', '\x23C', '\x240', '\x242', '\x249', '\x24E', '\x251', '\x256', 
		'\x25D', '\x264', '\x26D', '\x271', '\x276', '\x27B', '\x281', '\x285', 
		'\x294', '\x297', '\x29C', '\x2A0', '\x2A6', '\x2AD', '\x2B0', '\x2B3', 
		'\x2BC', '\x2C4', '\x2C8', '\x2CA', '\x2CF', '\x2D3', '\x2DA', '\x2E1', 
		'\x2E7', '\x310', '\x350', '\x354', '\x361', '\x363', '\x369', '\x371', 
		'\x374', '\x377', '\x37D', '\x381', '\x385', '\x389', '\x38C', '\x392', 
		'\x397', '\x39A', '\x39E', '\x3A9', '\x3B9', '\x3C0', '\x3F0', '\x3F8',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
